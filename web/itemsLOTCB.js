/**
 * Created by skyeguy on 1/21/17.
 */
//ALL ITEMS FOR LOTCB GAME
var firstIdSet = true; //this allows the game to set item ID's in the very first moment of the game.

function Item(type, x, y)
{
    this.type = type;
    this.X = x;
    this.Y = y;
    this.dmx = map; //dimension
    this.equipped = false; //this is for the inventory and equipping to the player.
    this.zIndex = 1;
    this.biproducts = []; //these are the accompanying items that come along with the main item being crafted.
    this.alcohol = 0;
    this.wake = 0;
    this.store = []; //these are the items you gain from opening a package utility item.
    this.aqua = false; //this determines if the item can be dropped or used while in water
    this.barcode = this.type + (Math.random() * Math.random());
    this.questy = false;
    this.fireProofing = 0;
    this.cooling = 0;
    this.ingredients = [];
    this.smallText = false;

    this.multiATK = false;

    this.decay = 0;
    this.decayable = false;
    this.decayLimit = 10;
    this.decayObjective = "rawFrichFlesh";

    this.doorKeyID = "none"; //for opening doors with keys etc.

    this.turn = 0;
    this.flashFrame = 0;
    this.flashFrameTime = new Date().getTime();
    this.flashAnimate = function(framerate, rotation, transparency, list)
    {
        //use a list with coords for images: [{image:, imgX:, imgY:, portionW:, portionH:, adjX:, adjY:, width:, height:}, ... etc.]
        if (this.flashFrame >= list.length)
        {
            this.flashFrame = 0;
        }

        if (rotation != false)
        {
            XXX.save();
            XXX.globalAlpha = transparency;
            XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
            XXX.rotate(rotation);
            XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
            XXX.restore();
        }
        else
        {
            XXX.save();
            XXX.globalAlpha = transparency;
            XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, X - this.X + (1 / 2 * CCC.width) + list[this.flashFrame].adjX, Y - this.Y + (1 / 2 * CCC.height) + list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
            XXX.restore();
        }

        if (new Date().getTime() - this.flashFrameTime >= framerate)
        {
            this.flashFrameTime = new Date().getTime();
            this.flashFrame += 1;
        }
    };

    this.setItemID = function()
    {
        //defaults
        this.subUtility = "none";

        // because I don't want damage to be decreased from the starting amount by the multiplyer this makes sure that it is evened out at one before taking level into consideration.
        if (player.getStrength() >= 25)
        {
            this.leveledDamageMultiple = player.getStrength();
        }
        else
        {
            this.leveledDamageMultiple = 25;
        }
        //if strength is less than 4 all weapons are 1 damage weaker unless they only do 1 damage.
        if (player.getStrength() >= 4)
        {
            this.damageHandicap = 0;
        }
        else
        {
            this.damageHandicap = 1;
        }
        //For some weapons if the player's strength is less than 25 they will get a deduction
        if (player.getStrength() >= 25)
        {
            this.damageHandicapII = 0;
        }
        else if (player.getStrength() >= 20)
        {
            this.damageHandicapII = 1;
        }
        else if (player.getStrength() >= 15)
        {
            this.damageHandicapII = 3;
        }
        else if (player.getStrength() >= 10)
        {
            this.damageHandicapII = 4;
        }
        else
        {
            this.damageHandicapII = 5;
        }

        this.alter = function(input, upDown, level, alteration) //INPUT is something like player.getStrength() for example //UP Down determines if it is a less than or greater than equation //level = the level at which the change takes place //alteration = the number which the skill goes down by
        {
            if (upDown)
            {
                if (input >= level)
                {
                    return alteration;
                }
            }
            else
            {
                if (input <= level)
                {
                    return alteration;
                }
            }
        };

        this.superStealthNum = function(multiplyerOrAddend)
        {
            if (player.superStealth == true)
            {
                return multiplyerOrAddend;
            }
            else
            {
                return 0;
            }
        }

        //INDIVIDUAL ITEM DETAILS


        //FISTS (not a real item)
        if (this.type == "none")
        {
            //For All Items
            this.identity = "Fists";
            this.weight = 0;
            this.size = 10;
            this.description = "Your Fists.";
            this.intForDes = 4;
            this.intDescription = "Face Punch!";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0;
            this.range = 1;
            this.rate = 25;
            this.damage = player.getFistDamage();
            this.magicalDamage = player.getMagicHands("damage");
            this.negateArmour = 0;

            //ability
            this.ability = player.getMagicHands();
        }
        else if (this.type == "werewolf")
        {
            //For All Items
            this.identity = "Werewolf";
            this.weight = 0;
            this.size = 10;
            this.description = "You are a cursed beast.";
            this.intForDes = 4;
            this.intDescription = "Rawr!";

            //Define Utility
            this.utility = "weapon";

            if (eKey && spaceKey != true || player.powerAttack == true && player.attacking)
            {
                //Utility Focused
                this.energyCost = 0;
                this.range = 2;
                this.rate = 160;
                this.damage = (55 / 1.5);
                this.magicalDamage = 0;
                this.negateArmour = (11 / 1.5);

                //ability
                this.ability = "lycanthropy";
            }
            else
            {
                //Utility Focused
                this.energyCost = 0;
                this.range = 4;
                this.rate = 60;
                this.damage = 24;
                this.magicalDamage = 0;
                this.negateArmour = 5;

                //ability
                this.ability = "none";
            }
        }
        else if (this.type == "vampire")
        {
            //For All Items
            this.identity = "Vampire";
            this.weight = 0;
            this.size = 10;
            this.description = "Your soul is sworn to an arch demon.";
            this.intForDes = 0;
            this.intDescription = "You have been granted power in exchange for fealty.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0;
            this.distance = 22;
            this.range = 2 + 2/7;
            this.rate = 260;
            this.damage = 88;
            this.magicalDamage = 0;
            this.negateArmour = 26;

            //ability
            this.ability = "vampireCurse";
        }
        else if (this.type == "wendigo")
        {
            //For All Items
            this.identity = "Wendigo";
            this.weight = 0;
            this.size = 10;
            this.description = "You have been cursed by a leshen for cannibalizing your own kind.";
            this.intForDes = 4;
            this.intDescription = "You enter your beast form no matter what if your hunger is at 10 or below.";

            //Define Utility
            this.utility = "weapon";

            if (eKey && spaceKey != true || player.powerAttack == true && player.attacking)
            {
                //Utility Focused
                this.energyCost = 9;
                this.range = 1 + 5/7;
                this.rate = (120 / 1.5);
                this.damage = (33 / 1.5);
                this.magicalDamage = 0;
                this.negateArmour = (6.5 / 1.5);

                //ability
                this.ability = "none";
            }
            else
            {
                //Utility Focused
                this.energyCost = 15;
                this.range = 3 + 1/7;
                this.rate = 220;
                this.damage = 18;
                this.magicalDamage = 0;
                this.negateArmour = 30;

                //ability
                this.ability = "knockbackI";
            }
        }
        else if (this.type == "selkieSkin")
        {
            //For All Items
            this.identity = "Ceremonial Skin";
            this.weight = 2;
            this.size = 15;
            this.description = "In Sylkeem culture each tribal member keeps their own ceremonial skin with them.";
            if (player.raceName == "Sylkeem")
            {
                this.intForDes = 22;
                this.intDescription = "This is your selkie skin, you were born wearing it. Wearing this lets you become a seal.";
            }
            else
            {
                this.intForDes = 3;
                this.intDescription = "According to northern tales, the Sylkeem are so fond of the sea that their young come out as seals.";
            }

            //Define Utility
            if (player.raceName == "Sylkeem")
            {
                this.utility = "weapon";
            }
            else
            {
                this.utility = "material";
            }

            //Utility Focused
            this.energyCost = 0;
            this.distance = 20;
            this.range = 1 + 5/7;
            this.rate = 120;
            this.damage = 0.5;
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 95 - Math.floor(player.getCharisma() / 10); // at max, buy for 90.
            this.sellValue = 85 + Math.floor(player.getCharisma() / 10); // at max, sell for 90.
        }
        else if (this.type == "venandi")
        {
            //For All Items
            this.identity = "Venandi";
            this.weight = 0;
            this.size = 10;
            this.description = "Your body has become host the a parasitic fungus thats mycelium has taken control of your circulatory and nervous systems.";
            this.intForDes = 0;
            this.intDescription = "Venandi cannot survive in climates colder than the jungle.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0;
            this.distance = 22;
            this.range = 2 + 2/7;
            this.rate = 90;
            this.damage = 2 + player.getStrength() / 10;
            this.magicalDamage = 0;
            this.negateArmour = 2;

            //ability
            this.ability = "venandi";
        }
        else if (this.type == "nude")
        {
            //For All Items
            this.identity = "Nakedness";
            this.weight = 0;
            this.size = 0;
            this.description = "your player's body... IN THE NUDE!!!";
            this.intForDes = 0;
            this.intDescription = "You are sooo naked right now!";

            //Define Utility
            this.utility = "worn";
            //the this.type of armour/clothing it is...
            this.subUtility = "none";
            //Utility Focused
            //protections
            this.protection = 0;
            this.toughnessRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0;
            this.sellValue = 0;
        } //ACTUAL ITEMS
        else if (this.type == "boat")
        {
            //For All Items
            this.identity = "Boat";
            this.weight = 300;
            this.size = 60;
            this.description = "This is the most effective and safe way to travel across large bodies of water.";
            this.intForDes = 15;
            this.intDescription = "Boats are not hindered by carryweight so they can also be an effective means of moving merchandise.";

            //Define Utility
            this.utility = "weapon";
            this.subUtility = "boat";

            //Utility Focused
            this.energyCost = 0.5;
            this.distance = 0;
            this.range = 0;
            this.rate = 20;
            this.damage = 0;
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //extra
            this.aqua = true;

            //ability
            this.ability = "none";

            //crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["wood", 30]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 200 - Math.floor(player.getCharisma() / 2); // at max, buy for 175.
            this.sellValue = 125 + Math.floor(player.getCharisma() / 1); // at max, sell for 175.
        }
        else if (this.type == "coins")
        {
            //For All Items
            this.identity = "Coins";
            this.weight = 0.005;
            this.size = 6;
            this.description = "A currency that is widely accepted among the several kingdoms in the land.";
            this.intForDes = 0;
            this.intDescription = "Although they may appear to be made of solid gold, it is only actually their outermost layer that is made of gold.";

            //Define Utility
            this.utility = "currency";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1;
            this.sellValue = 1;
        }
        else if (this.type == "tablet")
        {
            //For All Items
            this.identity = "Engraved Stone Tablet";
            this.description = "There are strange symbols engraved in the stone.";
            this.intForDes = 6;
            this.intDescription = "Perhaps this stone is an artifact from an ancient culture.";
            this.buyValue = 900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 700.
            this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
            this.weight = 2.5;
            this.size = 13;

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";
        }
        else if (this.type == "stolenTablet")
        {
            //For All Items
            this.identity = "Ancient Freydic Stone Tablet";
            this.description = "This tablet was stolen from the temple of Gemesh in Venning.";
            this.intForDes = 29;
            this.intDescription = "This is freydic religious scripture written in old freydic.";
            this.buyValue = 95; // at max, buy for 95.
            this.sellValue = 95; // at max, sell for 95.
            this.weight = 2.5;
            this.size = 13;

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";
        }
        else if (this.type == "iceClaymore")
        {
            //For All Items
            if (player.getKnowledge() >= 6)
            {
                this.identity = "Tablet of Ice Blade";
                this.description = "Studying this magically engraved stone tablet will teach you how to summon a claymore formed of magical ice.";
                this.intForDes = 0;
                this.intDescription = "The summoned blade melts away the moment you let go of it.";
                this.buyValue = 900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 700.
                this.sellValue = 486 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 686.
            }
            else
            {
                this.identity = "Engraved Stone Tablet";
                this.description = "There are strange symbols engraved in the stone.";
                this.intForDes = 6;
                this.intDescription = "Perhaps this stone is an artifact from an ancient culture.";
                this.buyValue = 900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 700.
                this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
            }
            this.weight = 2.5;
            this.size = 13;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 4 + (1 / 12.5) * player.getConcentration() - (1 / 7) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Ice";
            this.spellName = "Ice Blade";
            this.spellID = "iceClaymore";
            this.spellEXP = 14 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 3 + (3/50) * player.getConcentration() - (5/50) * player.getEminence());
            this.spellDescription = "Forms a magical claymore out of ice; it gains strength from your magic and it can freeze its targets. " + "  Damage: " + Math.floor(allWeapons[29].damage + allWeapons[29].magicalDamage) + "   Rate: " + Math.floor(allWeapons[29].rate) + "   Reach: " + Math.floor(allWeapons[29].range) + "   Range: " + allWeapons[29].distance + "   Energy Cost: " + Math.ceil(allWeapons[29].energyCost);
            this.spellKnowledgeRequirement = 6;
            this.spellRange = "Near";
        }
        else if (this.type == "shell")
        {
            //For All Items
            if (player.getKnowledge() >= 3)
            {
                this.identity = "Tablet of Shell";
                this.description = "Studying this magically engraved stone tablet will teach you how to create a magical shell of energy around the caster.";
                this.intForDes = 0;
                this.intDescription = "It blocks all impact from most attacks then goes away.";
                this.buyValue = 1000 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 800.
                this.sellValue = 600 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 800.
            }
            else
            {
                this.identity = "Engraved Stone Tablet";
                this.description = "There are strange symbols engraved in the stone.";
                this.intForDes = 6;
                this.intDescription = "Perhaps this stone is an artifact from an ancient culture.";
                this.buyValue = 1000 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 800.
                this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
            }
            this.weight = 2.5;
            this.size = 13;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 2 + (1 / 50) * player.getConcentration() - (2 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Cosmic";
            this.spellName = "Shell";
            this.spellID = "shell";
            this.spellEXP = 3 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 14 + (1/50) * player.getConcentration() - (8/50) * player.getEminence());
            this.spellDescription = "Forms a magical bubble of protection that prevents a single attack then disappears.";
            this.spellKnowledgeRequirement = 3;
            this.spellRange = "Self";
        }
        else if (this.type == "theFrozenWord")
        {
            //For All Items
            if (player.getKnowledge() >= 4)
            {
                this.identity = "Tablet of the Frozen Word";
                this.description = "Studying this magically engraved stone tablet will teach you how to temporarily freeze all those around you.";
                this.intForDes = 0;
                this.intDescription = "This tablet is cold to the touch.";
                this.buyValue = 400 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 300.
                this.sellValue = 200 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 300.
            }
            else
            {
                this.identity = "Engraved Stone Tablet";
                this.description = "There are strange symbols engraved in the stone.";
                this.intForDes = 6;
                this.intDescription = "Perhaps this stone is an artifact from an ancient culture.";
                this.buyValue = 400 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 300.
                this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
            }
            this.weight = 2.5;
            this.size = 13;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 3 + (2 / 50) * player.getConcentration() - (4 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Ice";
            this.spellName = "The Frozen Word";
            this.spellID = "theFrozenWord";
            this.spellEXP = 15 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 2 + (3/50) * player.getConcentration() - (6/50) * player.getEminence());
            this.spellDescription = "Drifts from the caster's breath as an icy gust; it freezes all who surround you."
            this.spellKnowledgeRequirement = 4;
            this.spellRange = "Near";
        }
        else if (this.type == "shadowport")
        {
            //For All Items
            if (player.getKnowledge() >= 25)
            {
                this.identity = "Tablet of Shadowportation";
                this.description = "Studying this magically engraved stone tablet will teach you how to tear through shadow dimensions in order to get to where you want to go faster.";
                this.intForDes = 0;
                this.intDescription = "It leaves behind blinding shadows.";
                this.buyValue = 5000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 4600.
                this.sellValue = 4000 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 4400.
            }
            else
            {
                this.identity = "Engraved Stone Tablet";
                this.description = "There are strange symbols engraved in the stone.";
                this.intForDes = 6;
                this.intDescription = "Perhaps this stone is an artifact from an ancient culture.";
                this.buyValue = 5000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 4600.
                this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
            }
            this.weight = 2.5;
            this.size = 13;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 11 + (4 / 50) * player.getConcentration() - (7 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Cosmic";
            this.spellName = "Shadowportation";
            this.spellID = "shadowport";
            this.spellEXP = 20 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 10 + (5/50) * player.getConcentration() - (10/50) * player.getEminence());
            this.spellDescription = "Teleport from one space to another through a dimensional tear leaving behind blinding shadows.";
            this.spellKnowledgeRequirement = 25;
            this.spellRange = "On-Screen";
        }
        else if (this.type == "scroll")
        {
            //For All Items
            this.identity = "Scroll";
            this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
            this.intForDes = 2;
            this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";

            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "slowTimeI")
        {
            //For All Items
            if (player.getKnowledge() >= 2)
            {
                this.identity = "Scroll of Slow Time I";
                this.description = "Studying this scroll will teach you how to slow down time for everyone but you.";
                this.intForDes = 0;
                this.intDescription = "Slows time to 0.7 times its normal pace.";
                this.buyValue = 1200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1000.
                this.sellValue = 900 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 1000.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1000.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 2 + (0 / 50) * player.getConcentration() - (1 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Time";
            this.spellName = "Slow Time I";
            this.spellID = "slowTimeI";
            this.spellEXP = 10 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 15 + (0/50) * player.getConcentration() - (8/50) * player.getEminence());
            this.spellDescription = "Slow down time to 0.7 times its normal pace.";
            this.spellKnowledgeRequirement = 2;
            this.spellRange = "Everywhere";
        }
        else if (this.type == "slowTimeII")
        {
            //For All Items
            if (player.getKnowledge() >= 4)
            {
                this.identity = "Scroll of Slow Time II";
                this.description = "Studying this scroll will teach you how to slow down time for everyone but you.";
                this.intForDes = 0;
                this.intDescription = "Slows time to 0.6 times its normal pace.";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1300.
                this.sellValue = 1100 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 1200.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1300.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 3 + (0 / 50) * player.getConcentration() - (1 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Time";
            this.spellName = "Slow Time II";
            this.spellID = "slowTimeII";
            this.spellEXP = 14 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 20 + (0/50) * player.getConcentration() - (10/50) * player.getEminence());
            this.spellDescription = "Slow down time to 0.6 times its normal pace.";
            this.spellKnowledgeRequirement = 4;
            this.spellRange = "Everywhere";
        }
        else if (this.type == "slowTimeIII")
        {
            //For All Items
            if (player.getKnowledge() >= 7)
            {
                this.identity = "Scroll of Slow Time III";
                this.description = "Studying this scroll will teach you how to slow down time for everyone but you.";
                this.intForDes = 0;
                this.intDescription = "Slows time to 0.5 times its normal pace.";
                this.buyValue = 1900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1700.
                this.sellValue = 1500 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 1600.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1700.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(2, 6 + (0 / 50) * player.getConcentration() - (3 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Time";
            this.spellName = "Slow Time III";
            this.spellID = "slowTimeIII";
            this.spellEXP = 20 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 26 + (0/50) * player.getConcentration() - (12/50) * player.getEminence());
            this.spellDescription = "Slow down time to 0.5 times its normal pace.";
            this.spellKnowledgeRequirement = 7;
            this.spellRange = "Everywhere";
        }
        else if (this.type == "slowTimeIV")
        {
            //For All Items
            if (player.getKnowledge() >= 12)
            {
                this.identity = "Scroll of Slow Time IV";
                this.description = "Studying this scroll will teach you how to slow down time for everyone but you.";
                this.intForDes = 0;
                this.intDescription = "Slows time to 0.4 times its normal pace.";
                this.buyValue = 2500 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 2100.
                this.sellValue = 1900 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 2000.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 2500 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 2100.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(3, 9 + (0 / 50) * player.getConcentration() - (4 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Time";
            this.spellName = "Slow Time IV";
            this.spellID = "slowTimeIV";
            this.spellEXP = 24 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 32 + (0/50) * player.getConcentration() - (13/50) * player.getEminence());
            this.spellDescription = "Slow down time to 0.4 times its normal pace.";
            this.spellKnowledgeRequirement = 12;
            this.spellRange = "Everywhere";
        }
        else if (this.type == "slowTimeV")
        {
            //For All Items
            if (player.getKnowledge() >= 25)
            {
                this.identity = "Scroll of Slow Time V";
                this.description = "Studying this scroll will teach you how to slow down time for everyone but you.";
                this.intForDes = 0;
                this.intDescription = "Slows time to 0.2 times its normal pace.";
                this.buyValue = 8000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 7600.
                this.sellValue = 7000 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 7400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 8000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 7600.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(6, 16 + (0 / 50) * player.getConcentration() - (6 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Time";
            this.spellName = "Slow Time V";
            this.spellID = "slowTimeV";
            this.spellEXP = 30 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(10, 60 + (0/50) * player.getConcentration() - (30/50) * player.getEminence());
            this.spellDescription = "Slow down time to 0.2 times its normal pace.";
            this.spellKnowledgeRequirement = 25;
            this.spellRange = "Everywhere";
        }
        else if (this.type == "slowTimeVI")
        {
            //For All Items
            if (player.getKnowledge() >= 36)
            {
                this.identity = "Scroll of Slow Time VI";
                this.description = "Studying this scroll will teach you how to slow down time for everyone but you.";
                this.intForDes = 0;
                this.intDescription = "Slows time to 0.1 times its normal pace.";
                this.buyValue = 19000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 18600.
                this.sellValue = 17000 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 17400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 19000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 18600.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(12, 25 + (0 / 50) * player.getConcentration() - (5 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Time";
            this.spellName = "Slow Time VI";
            this.spellID = "slowTimeVI";
            this.spellEXP = 50 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(36, 120 + (0/50) * player.getConcentration() - (60/50) * player.getEminence());
            this.spellDescription = "Slow down time to 0.1 times its normal pace.";
            this.spellKnowledgeRequirement = 36;
            this.spellRange = "Everywhere";
        }
        else if (this.type == "flyingColours")
        {
            //For All Items
            if (player.getKnowledge() >= 2)
            {
                this.identity = "Scroll of Flying Colours";
                this.description = "Studying this scroll will teach you how to blast colorful lights from your palms.";
                this.intForDes = 0;
                this.intDescription = "This spell can be used to blind the target momentarily.";
                this.buyValue = 190 - Math.floor(player.getCharisma() / 1); // at max, buy for 145.
                this.sellValue = 95 + Math.floor(player.getCharisma() / 1); // at max, sell for 145.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 190 - Math.floor(player.getCharisma() / 1); // at max, buy for 145.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            if (player.getConcentration() >= 50)
            {
                this.spellCost = Math.max(1, 3 + 14 / 50 * player.getConcentration() - (1 / 6) * player.getEminence());
            }
            else
            {
                this.spellCost = Math.max(1, 1 + (1 / 15) * player.getConcentration() - (1 / 15) * player.getEminence());
            }
            this.spellGroup = "Form";
            this.spellGenre = "Illusion";
            this.spellName = "Flying Colours";
            this.spellID = "flyingColours";
            this.spellEXP = 6 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.1, 3 + (3/50) * player.getConcentration() - (6/50) * player.getEminence());
            this.spellDescription = "A beautiful flurry of flying orbs of colourful light bright enough to blind that which gets too close.";
            this.spellKnowledgeRequirement = 2;
            this.spellRange = "Medium";
        }
        else if (this.type == "spiritBear")
        {
            //For All Items
            if (player.getKnowledge() >= 4)
            {
                this.identity = "Scroll of Spirit Bear";
                this.description = "Studying this scroll will teach you how to magically enter the form of a spirit bear.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has, the larger the spirit bear they become.";
                this.buyValue = 600 - Math.floor(player.getCharisma() / 1); // at max, buy for 550.
                this.sellValue = 500 + Math.floor(player.getCharisma() / 1); // at max, sell for 550.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 600 - Math.floor(player.getCharisma() / 1); // at max, buy for 550.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(4, 6 + 19 / 50 * player.getConcentration() - (10 / 50) * player.getEminence());

            this.spellGroup = "Incantation";
            this.spellGenre = "Druidic";
            this.spellName = "Spirit Bear Form";
            this.spellID = "spiritBear";
            this.spellEXP = 13 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(20, 45 + (45/50) * player.getConcentration() - (30/50) * player.getEminence());
            this.spellDescription = "A mental fusion with the spirit of nature that binds your mind with a spirit bear.";
            this.spellKnowledgeRequirement = 6;
            this.spellRange = "Self";
        }
        else if (this.type == "shadowCrow")
        {
            //For All Items
            if (player.getKnowledge() >= 12)
            {
                this.identity = "Scroll of Shadow Crow";
                this.description = "Studying this scroll will teach you how to magically project shadowy crows at your foes.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has, the more shadow crows can be summoned.";
                this.buyValue = 630 - Math.floor(player.getCharisma() / 1); // at max, buy for 580.
                this.sellValue = 530 + Math.floor(player.getCharisma() / 1); // at max, sell for 580.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 630 - Math.floor(player.getCharisma() / 1); // at max, buy for 580.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(1, 4 + 14 / 50 * player.getConcentration() - (8 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Nechromancy";
            this.spellName = "Shadow Crow";
            this.spellID = "shadowCrow";
            this.spellEXP = 7 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(14, 30 + (10/50) * player.getConcentration() - (20/50) * player.getEminence());
            if (player.getConcentration() >= 5)
            {
                this.spellDescription = "A shadowy rift through which crows of shadow fly forth.";
            }
            else
            {
                this.spellDescription = "A shadowy rift through which a crow of shadow flies forth.";
            }
            this.spellKnowledgeRequirement = 12;
            this.spellRange = "Medium";
        }
        else if (this.type == "antherPlague")
        {
            //For All Items
            if (player.getKnowledge() >= 32)
            {
                this.identity = "Scroll of Anther Plague";
                this.description = "Studying this scroll will teach you how to magically synthesize an anther fly.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has, the more shadow crows can be summoned.";
                this.buyValue = 1350 - Math.floor(player.getCharisma() / 1); // at max, buy for 1300.
                this.sellValue = 1250 + Math.floor(player.getCharisma() / 1); // at max, sell for 1300.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1300 - Math.floor(player.getCharisma() / 1); // at max, buy for 580.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(1, 2 + (1 / 50) * player.getConcentration() - (3 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Nechromancy";
            this.spellName = "Anther Plague";
            this.spellID = "antherPlague";
            this.spellEXP = 0.2 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.2, 0.2);
            this.spellDescription = "Instantaneously synthesize an anther fly.";
            this.spellKnowledgeRequirement = 32;
            this.spellRange = "Medium";
        }
        else if (this.type == "summonFrich")
        {
            //For All Items
            if (player.getKnowledge() >= 2)
            {
                this.identity = "Scroll of Frich Summoning";
                this.description = "Studying this scroll will teach you how to magically synthesize a frich to fight for you.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has, the more friches can be summoned.";
                this.buyValue = 230 - Math.floor(player.getCharisma() / 1); // at max, buy for 180.
                this.sellValue = 130 + Math.floor(player.getCharisma() / 1); // at max, sell for 180.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 230 - Math.floor(player.getCharisma() / 1); // at max, buy for 180.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(1, 2 + 11 / 50 * player.getConcentration() - (9 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Conjuration";
            this.spellName = "Frich Summoning";
            this.spellID = "summonFrich";
            this.spellEXP = 5 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 8 + (6/50) * player.getConcentration() - (11/50) * player.getEminence());
            this.spellDescription = "A blast of magical synthesis energy that forms an allied frich.";
            this.spellKnowledgeRequirement = 2;
            this.spellRange = "Near-Medium";
        }
        else if (this.type == "summonWolf")
        {
            //For All Items
            if (player.getKnowledge() >= 4)
            {
                this.identity = "Scroll of Wolf Summoning";
                this.description = "Studying this scroll will teach you how to magically synthesize a wolf to fight for you.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has, the more wolves can be summoned.";
                this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 200.
                this.sellValue = 150 + Math.floor(player.getCharisma() / 1); // at max, sell for 200.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 180.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(2, 2 + 12 / 50 * player.getConcentration() - (9 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Conjuration";
            this.spellName = "Wolf Summoning";
            this.spellID = "summonWolf";
            this.spellEXP = 7 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(4, 9 + (6/50) * player.getConcentration() - (11/50) * player.getEminence());
            this.spellDescription = "A blast of magical synthesis energy that forms an allied wolf.";
            this.spellKnowledgeRequirement = 4;
            this.spellRange = "Near-Medium";
        }
        else if (this.type == "summonGriffin")
        {
            //For All Items
            if (player.getKnowledge() >= 39)
            {
                this.identity = "Scroll of Griffin Summoning";
                this.description = "Studying this scroll will teach you how to magically synthesize a griffin to fight for you.";
                this.intForDes = 0;
                this.intDescription = "The griffin will be hostile unless you have high concentration.";
                this.buyValue = 2500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 2400.
                this.sellValue = 2000 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 2400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 2500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 2400.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(29, 30 + 30 / 50 * player.getConcentration() - (15 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Conjuration";
            this.spellName = "Griffin Summoning";
            this.spellID = "summonGriffin";
            this.spellEXP = 50 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(35, 45 + (30/50) * player.getConcentration() - (15/50) * player.getEminence());
            this.spellDescription = "A blast of magical synthesis energy that forms a griffin.";
            this.spellKnowledgeRequirement = 39;
            this.spellRange = "Near-Medium";
        }
        else if (this.type == "beholderRift")
        {
            //For All Items
            if (player.getKnowledge() >= 4)
            {
                this.identity = "Scroll of Beholder Rift";
                this.description = "Studying this scroll will teach you how to create a controlled arcane rift to call forth a beholder.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has, the more beholders can be called forth.";
                this.buyValue = 1000 - Math.floor(player.getCharisma() / 1); // at max, buy for 950.
                this.sellValue = 900 + Math.floor(player.getCharisma() / 1); // at max, sell for 950.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1000 - Math.floor(player.getCharisma() / 1); // at max, buy for 950.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(2, 3 + 12 / 50 * player.getConcentration() - (9 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Cosmic";
            this.spellName = "Beholder Rift";
            this.spellID = "summonBeholder";
            this.spellEXP = 7 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(4, 9 + (6/50) * player.getConcentration() - (11/50) * player.getEminence());
            this.spellDescription = "A blast of magical energy that tears a micro-rift through which beholders can be summoned.";
            this.spellKnowledgeRequirement = 7;
            this.spellRange = "Near-Medium";
        }
        else if (this.type == "doppelganger")
        {
            //For All Items
            if (player.getKnowledge() >= 20)
            {
                this.identity = "Scroll of Doppelganger";
                this.description = "Studying this scroll will teach you how to form a doppelganger likened to yourself.";
                this.intForDes = 0;
                this.intDescription = "Creating a Doppelganger costs you your blood... If you create it without sacrifice it will take what it is owed.";
                this.buyValue = 400; // at max, buy for 400.
                this.sellValue = 400; // at max, sell for 400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 400; // at max, buy for 400.
                this.sellValue = 1; // at max, sell for 400.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(2, 3 + 1 / 50 * player.getConcentration() - (2 / 50) * player.getEminence());

            this.spellGroup = "Incantation";
            this.spellGenre = "Nechromancy";
            this.spellName = "Doppelganger";
            this.spellID = "doppelganger";
            this.spellEXP = 50 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(4, 12 + (1/50) * player.getConcentration() - (9/50) * player.getEminence());
            this.spellDescription = "Create a nechromantic duplicate of yourself bound to you by your own blood in its veins.";
            this.spellKnowledgeRequirement = 20;
            this.spellRange = "Near";
        }
        else if (this.type == "summonDemon")
        {
            //For All Items
            if (player.getKnowledge() >= 48)
            {
                this.identity = "Scroll of Demon Rift";
                this.description = "Studying this scroll will teach you how to tear through dimensions and drag an ancient being through.";
                this.intForDes = 0;
                this.intDescription = "The demon summoned will be hostile.";
                this.buyValue = 10000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 9600.
                this.sellValue = 9000 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 9400.
            }
            else
            {
                this.identity = "Eerie Scroll";
                this.description = "The markings on this scroll are written in a long lost language that sends shivers down your spine.";
                this.intForDes = 0;
                this.intDescription = "The scroll is unusually heavy.";
                this.buyValue = 10000 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 9600.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 11;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(40, 50 + 0 / 50 * player.getConcentration() - (10 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Cosmic";
            this.spellName = "Demon Rift";
            this.spellID = "ancientRift";
            this.spellEXP = 100 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(60, 80 + (0/50) * player.getConcentration() - (20/50) * player.getEminence());
            this.spellDescription = "Creates a rift between dimensions and drags an ancient being through.";
            this.spellKnowledgeRequirement = 48;
            this.spellRange = "Near-Medium";
        }
        else if (this.type == "entanglement")
        {
            //For All Items
            if (player.getKnowledge() >= 3)
            {
                this.identity = "Scroll of Entanglement";
                this.description = "Studying this scroll will teach you how to conjure magical vines to trap their target.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has, the longer the vines will stay around.";
                this.buyValue = 200 - Math.floor(player.getCharisma() / 1); // at max, buy for 150.
                this.sellValue = 100 + Math.floor(player.getCharisma() / 1); // at max, sell for 150.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 200 - Math.floor(player.getCharisma() / 1); // at max, buy for 150.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(1, 2 + 8 / 50 * player.getConcentration() - (6 / 50) * player.getEminence());

            this.spellGroup = "Incantation";
            this.spellGenre = "Druidic";
            this.spellName = "Entanglement";
            this.spellID = "entanglement";
            this.spellEXP = 4 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(8, 10 + (10/50) * player.getConcentration() - (4/50) * player.getEminence());
            this.spellDescription = "Calls forth magical vines that protrude from the ground and entangle foes.";
            this.spellKnowledgeRequirement = 3;
            this.spellRange = "Mouse-Pointer";
        }
        else if (this.type == "charm")
        {
            //For All Items
            if (player.getKnowledge() >= 10)
            {
                this.identity = "Scroll of Charming";
                this.description = "Studying this scroll will allow you to temporarily manipulate the will of a being.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has the stronger the beings the spell will be effective on.";
                this.buyValue = 790 - Math.floor(player.getCharisma() / 1); // at max, buy for 740.
                this.sellValue = 690 + Math.floor(player.getCharisma() / 1); // at max, sell for 740.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 790 - Math.floor(player.getCharisma() / 1); // at max, buy for 740.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(1, 2 + 6 / 50 * player.getConcentration() - (7 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Transmutation";
            this.spellName = "Charm";
            this.spellID = "charm";
            this.spellEXP = 10 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(2, 14 + (16/50) * player.getConcentration() - (26/50) * player.getEminence());
            this.spellDescription = "A charm that manipulates the target being's mind to the casters will.";
            this.spellKnowledgeRequirement = 10;
            this.spellRange = "Medium";
        }
        else if (this.type == "mark")
        {
            //For All Items
            if (player.getKnowledge() >= 8)
            {
                this.identity = "Scroll of Marking";
                this.description = "Studying this scroll will allow you to make a being temporarily go mad.";
                this.intForDes = 0;
                this.intDescription = "The more concentration the caster has the stronger the beings the spell will be effective on.";
                this.buyValue = 900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 800.
                this.sellValue = 750 + Math.floor(player.getCharisma() / 1); // at max, sell for 800.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 800.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;

            this.spellCost = Math.max(1, 2 + 6 / 50 * player.getConcentration() - (7 / 50) * player.getEminence());

            this.spellGroup = "Form";
            this.spellGenre = "Transmutation";
            this.spellName = "Mark";
            this.spellID = "mark";
            this.spellEXP = 6 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(2, 14 + (16/50) * player.getConcentration() - (26/50) * player.getEminence());
            this.spellDescription = "A charm that manipulates the target being's mind to think that all other beings are its enemies.";
            this.spellKnowledgeRequirement = 8;
            this.spellRange = "Medium";
        }
        else if (this.type == "chasingLights")
        {
            //For All Items
            if (player.getKnowledge() >= 8)
            {
                this.identity = "Scroll of Chasing Lights";
                this.description = "Studying this scroll will teach you how to conjure spheres of light that race to the nearest beings around aside from the caster.";
                this.intForDes = 0;
                this.intDescription = "This spell is best used to find enemies during the night.";
                this.buyValue = 340 - Math.floor(player.getCharisma() / 1); // at max, buy for 290.
                this.sellValue = 190 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 290.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 340 - Math.floor(player.getCharisma() / 1); // at max, buy for 290.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 3 + 7 / 50 * player.getConcentration() - (1 / 7) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Illusion";
            this.spellName = "Chasing Lights";
            this.spellID = "chasingLights";
            this.spellEXP = 4 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.1, 3 + (6/50) * player.getConcentration() - (7/50) * player.getEminence());
            this.spellDescription = "Spheres of light that are attracted to any beings nearby.";
            this.spellKnowledgeRequirement = 8;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "magicMissiles")
        {
            //For All Items
            if (player.getKnowledge() >= 3)
            {
                this.identity = "Scroll of Magic Missiles";
                this.description = "Studying this scroll will teach you how to launch blasts of magical energy at your foes.";
                this.intForDes = 0;
                this.intDescription = "The missiles target whomever is closest to you and not considered an ally.";
                this.buyValue = 1087 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 887.
                this.sellValue = 671 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 871.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 4;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1087 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 887.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellDamage = 5 + 0.2 * player.getConcentration();
            this.spellCost = Math.max(1, 2 + (38/50) * player.getConcentration() - (17/50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Cosmic";
            this.spellName = "Magic Missiles";
            this.spellID = "magicMissiles";
            this.spellEXP = 5 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 3 + (12/50) * player.getConcentration() - (14/50) * player.getEminence());
            this.spellDescription = "Missiles of concentrated magical energy that home in on their target.";
            this.spellKnowledgeRequirement = 3;
            this.spellRange = "Medium";
        }
        else if (this.type == "minorVortex")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of Minor Vortex";
                this.description = "Studying this scroll will teach you how to conjure a small vortex made of magical energy.";
                this.intForDes = 0;
                this.intDescription = "The vortex will temporarily trap weak creatures.";
                this.buyValue = 700 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 500.
                this.sellValue = 300 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 500.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 4;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 700 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 500.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 1 + (4/50) * player.getConcentration() - (4/50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Cosmic";
            this.spellName = "Minor Vortex";
            this.spellID = "minorVortex";
            this.spellEXP = 1 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(15, 15 + (50/50) * player.getConcentration() - (50/50) * player.getEminence());
            this.spellDescription = "A small vortex of cosmic energy that traps weak beings.";
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Short";
        }
        else if (this.type == "healingPsalms")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "The Healing Psalms of Xeremalyo the Saint";
                this.description = "Xeremayo is the saint that used these hymns of the eternal spirit to heal the hurt and bring life to the frail.";
                this.intForDes = 0;
                this.intDescription = "This incantation will heal you and those imediately near you.";
                this.buyValue = 50;
                this.sellValue = 50;
            }
            else
            {
                this.identity = "The Healing Psalms of Xeremalyo the Saint";
                this.description = "The old scripture is written in an ancient and holy language only spoken by the church.";
                this.intForDes = 0;
                this.intDescription = "You must study this ancient holy language if you are to aquaint yourself with these hymns.";
                this.buyValue = 50;
                this.sellValue = 50;
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 1 + (14/50) * player.getConcentration() - (10/50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Clerical";
            this.spellName = "Healing Hymn";
            this.spellID = "healingPsalms";
            this.spellEXP = 1 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(15, 20 + (20/50) * player.getConcentration() - (25/50) * player.getEminence());
            this.spellDescription = "A hymn that heals those who feel its vibration.";
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Short";
        }
        else if (this.type == "despell")
        {
            //For All Items
            if (player.getKnowledge() >= 10)
            {
                this.identity = "Scroll of Despell";
                this.description = "This spell lets out a blast of light that despells any spell that it makes contact with.";
                this.intForDes = 0;
                this.intDescription = "This spell is thought to be of the light.";
                this.buyValue = 1100;
                this.sellValue = 1100;
            }
            else
            {
                this.identity = "Revered Scripture";
                this.description = "The old scripture is written in an ancient and holy language only spoken by the church.";
                this.intForDes = 0;
                this.intDescription = "You must study this ancient holy language if you are to aquaint yourself with these sacred verses.";
                this.buyValue = 1100;
                this.sellValue = 100;
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(1, 3 + (2/50) * player.getConcentration() - (10/50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Clerical";
            this.spellName = "Despell";
            this.spellID = "despell";
            this.spellEXP = 18 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(4, 6 + (4/50) * player.getConcentration() - (12/50) * player.getEminence());
            this.spellDescription = "Eliminates other spells upon proximity with them.";
            this.spellKnowledgeRequirement = 10;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "repel")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of the Repelling Word";
                this.description = "Studying this scroll will teach you how to blast a wave of magical force that repels all within a close proximity of you.";
                this.intForDes = 0;
                this.intDescription = "This spell can be used in combination with forms or melee styles.";
                this.buyValue = 1277 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1077.
                this.sellValue = 762 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 962.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 4;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1277 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1077.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellDamage = 0.5 + 0.02 * player.getConcentration();
            this.spellCost = Math.max(1, 1 + (2/50) * player.getConcentration() - (2/50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Cosmic";
            this.spellName = "Repel";
            this.spellID = "repel";
            this.spellEXP = 4 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.65, 1 + (2/50) * player.getConcentration() - (2/50) * player.getEminence());
            this.spellDescription = "A blast of cosmic force that repels all beings within range.";
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Short";
        }
        else if (this.type == "sanctuary")
        {
            //For All Items
            if (player.getKnowledge() >= 15)
            {
                this.identity = "Scroll of Sanctuary";
                this.description = "Studying this scroll will teach you how to form a magical sanctuary circle that will restore you and your allies health and energy, as well as disintegrate all incoming non-magical projectiles.";
                this.intForDes = 0;
                this.intDescription = "";
                this.buyValue = 3200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 3000.
                this.sellValue = 2800 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 3000.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 4;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 3200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 3000.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellDamage = 0;
            this.spellCost = Math.max(3, 9 + (11/50) * player.getConcentration() - (17/50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Cosmic";
            this.spellName = "Sanctuary";
            this.spellID = "sanctuary";
            this.spellEXP = 12 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(6, 60 + (180/50) * player.getConcentration() - (234/50) * player.getEminence());
            this.spellDescription = "A circle of magical sigils that restore ally health and energy, and disentigrate non-magical projectiles.";
            this.spellKnowledgeRequirement = 15;
            this.spellRange = "Short";
        }
        else if (this.type == "repellingWard")
        {
            //For All Items
            if (player.getKnowledge() >= 18)
            {
                this.identity = "Scroll of Repelling Ward";
                this.description = "Studying this scroll will teach you how to form a magical warding circle that will force all who are not you or your allies out of that area.";
                this.intForDes = 0;
                this.intDescription = "";
                this.buyValue = 3900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 3800.
                this.sellValue = 3600 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 3800.
            }
            else
            {
                this.identity = "Demonic Scrawlings";
                this.description = "The markings on this scroll are clearly the work of the devil, or some powerful demonic like creature similar to him!";
                this.intForDes = 1;
                this.intDescription = "Evidence: Do you need any?";
                this.buyValue = 3900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 3800.
                this.sellValue = 5; // at max, sell for 5.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellDamage = 0;
            this.spellCost = Math.max(1, 3 + (3/50) * player.getConcentration() - (5/50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Cosmic";
            this.spellName = "Ward of Repelling";
            this.spellID = "repellingWard";
            this.spellEXP = 5 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(60, 60 + (180/50) * player.getConcentration() - (60/50) * player.getEminence());
            this.spellDescription = "A circle of magical sigils that repel all but the caster and their minions from being in the encompassed area.";
            this.spellKnowledgeRequirement = 18;
            this.spellRange = "Short";
        }
        else if (this.type == "corporalityWard")
        {
            //For All Items
            if (player.getKnowledge() >= 8)
            {
                this.identity = "Scroll of Corporality Ward";
                this.description = "Studying this scroll will teach you how to form a magical warding circle that will force all who are not you or your allies out of that area.";
                this.intForDes = 0;
                this.intDescription = "";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1400.
                this.sellValue = 1000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1200.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 4;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1400.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellDamage = 0;
            this.spellCost = Math.max(2, 4 + (3/50) * player.getConcentration() - (6/50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Cosmic";
            this.spellName = "Ward of Corporality";
            this.spellID = "corporalityWard";
            this.spellEXP = 9 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(35, 40 + (80/50) * player.getConcentration() - (90/50) * player.getEminence());
            this.spellDescription = "A circle of magical sigils that weakens, and stuns those that enter it by drawing their soul even more deeply into the physical realm.";
            this.spellKnowledgeRequirement = 8;
            this.spellRange = "Short";
        }
        else if (this.type == "undyingWard")
        {
            //For All Items
            if (player.getKnowledge() >= 30)
            {
                this.identity = "Scroll of Undying Ward";
                this.description = "Studying this scroll will teach you how to form a ward of undying that will will bring you and anyone standing within it back to life upon dying.";
                this.intForDes = 0;
                this.intDescription = "This scroll was gifted to humanity by a powerful arch demon.";
                this.buyValue = 11000; // at max, buy for 11000.
                this.sellValue = 11000; // at max, sell for 11000.
            }
            else
            {
                this.description = "The markings on this scroll look unnatural and wrong at the deepest of levels.";
                this.intForDes = 50;
                this.intDescription = "The markings resemble the lost language of death; it appears to be a contract with death itself...";
                this.buyValue = 11000; // at max, buy for 11000.
                if (player.getIntelligence() >= 50)
                {
                    this.identity = "Contract with Death Itself";
                    this.sellValue = 1100; // at max, sell for 1100.
                }
                else
                {
                    this.identity = "Scroll";
                    this.sellValue = 1; // at max, sell for 1.
                }
            }
            this.weight = 11;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellDamage = 0;
            this.spellCost = Math.max(11, 11 + (11/50) * player.getConcentration() - (11/50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Nechromancy";
            this.spellName = "Undying Ward";
            this.spellID = "undyingWard";
            this.spellEXP = 66 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(81, 90 + (150/50) * player.getConcentration() - (300/50) * player.getEminence());
            this.spellDescription = "A circle of magical sigils that shields whomever is inside the ward from death itself.";
            this.spellKnowledgeRequirement = 30;
            this.spellRange = "Short";
        }
        else if (this.type == "frostWind")
        {
            //For All Items
            if (player.getKnowledge() >= 3)
            {
                this.identity = "Scroll of Frost Wind";
                this.description = "Studying this scroll will teach you how to send forth a chilling gust that freezes nearly all thing it contacts.";
                this.intForDes = 0;
                this.intDescription = "This is a staple spell for the ice discipline of magic.";
                this.buyValue = 1120 - Math.floor(player.getCharisma() / 0.414); // at max, buy for 1000.
                this.sellValue = 540 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 940.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1120 - Math.floor(player.getCharisma() / 0.414); // at max, buy for 1000.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellDamage = 0.5 + (4.5/50 * player.getConcentration());
            this.spellCost = Math.max(1, 3 + 12 / 50 * player.getConcentration() - (9 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Ice";
            this.spellName = "Frost Wind";
            this.spellID = "frostWind";
            this.spellEXP = 14 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.1, 8 + (10/50) * player.getConcentration() - (12/50) * player.getEminence());
            this.spellDescription = "A chilling blast of icy wind that can freeze flesh in an instant. ";
            this.spellKnowledgeRequirement = 3;
            this.spellRange = "Short-Medium";
        }
        else if (this.type == "whirlwind")
        {
            //For All Items
            if (player.getKnowledge() >= 5)
            {
                this.identity = "Scroll of Whirlwind";
                this.description = "Studying this scroll will teach you how to bring about a devestating whirlwind.";
                this.intForDes = 0;
                this.intDescription = "The whirlwind created by this spell goes wherever the caster wants it to go.";
                this.buyValue = 1400 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1200.
                this.sellValue = 1000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1200.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1400 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1200.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellDamage = 1.25 + (0.5 + 0.05 * player.getConcentration());
            this.spellCost = Math.max(3, 6 + 11 / 50 * player.getConcentration() - (12 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Air";
            this.spellName = "Whirlwind";
            this.spellID = "whirlwind";
            this.spellEXP = 11 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(11, 12 + (20/50) * player.getConcentration() - (11/50) * player.getEminence());
            this.spellDescription = "A swirling mass of opposing winds that is directed at will.";
            this.spellKnowledgeRequirement = 5;
            this.spellRange = "Mouse-Pointer";
        }
        else if (this.type == "iceberg")
        {
            //For All Items
            if (player.getKnowledge() >= 10)
            {
                this.identity = "Scroll of Iceberg";
                this.description = "Studying this scroll will teach you how to shoot A massive hunk of ice that explodes into several sharp shards.";
                this.intForDes = 0;
                this.intDescription = "The more powerful the caster is the more powerful the explosion will be.";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1400.
                this.sellValue = 1200 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 1); // at max, buy for 1400.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            //this.spellDamage = 0.5 + (4.5/50 * player.getConcentration());
            this.spellCost = Math.max(5, 7 + (20 / 50 * player.getConcentration()) - (22 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Ice";
            this.spellName = "Iceberg";
            this.spellDescription = "A huge blast of ice that explodes into shards.";
            this.spellID = "iceberg";
            this.spellEXP = 20 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(6, 12 + (10/50) * player.getConcentration() - (16/10) * player.getEminence());
            this.spellKnowledgeRequirement = 10;
            this.spellRange = "Medium-Short";
        }
        else if (this.type == "iceSpikes")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of Ice Spikes";
                this.description = "Studying this scroll will teach you how to shoot spikes of ice from your hands.";
                this.intForDes = 0;
                this.intDescription = "The more powerful the caster is the more numerous and sharp the spikes will be.";
                this.buyValue = 500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 400.
                this.sellValue = 300 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 500 - Math.floor(player.getCharisma() / 1); // at max, buy for 145.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(0.5, 0.5 + 17.5 / 50 * player.getConcentration() - (13 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Ice";
            if (player.concentration >= 4)
            {
                this.spellName = "Ice Spikes";
                this.spellDescription = "Deadly spikes of magical ice sharper than any blade.";
            }
            else
            {
                this.spellName = "Ice Spike";
                this.spellDescription = "A deadly spike of magical ice sharper than any blade.";
            }
            this.spellID = "iceSpikes";
            this.spellEXP = 8 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 2 + (4/50) * player.getConcentration() - (1/10) * player.getEminence());
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "iceBlast")
        {
            //For All Items
            if (player.getKnowledge() >= 9)
            {
                this.identity = "Scroll of Ice Blast";
                this.description = "Studying this scroll will teach you to bring about a piercing circle of ice spikes to skewer foes.";
                this.intForDes = 0;
                this.intDescription = "It will increase in effectiveness if you learn to concentrate more.";
                this.buyValue = 1100 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 900.
                this.sellValue = 400 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 600.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1100 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 900.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = Math.max(2, 4 + 3 / 50 * player.getConcentration() - (4 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Ice";
            this.spellName = "Ice Blast";
            this.spellDescription = "A deadly blast of large ice spikes all around.";
            this.spellID = "iceBlast";
            this.spellEXP = 11 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(5, 8 + (3/50) * player.getConcentration() - (6/10) * player.getEminence());
            this.spellKnowledgeRequirement = 9;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "lifeTap")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of Life-Tap";
                this.description = "Studying this scroll will teach you how to transform your own lifeforce into magical energy.";
                this.intForDes = 0;
                this.intDescription = "If one is not careful with this spell they will surely die.";
                this.buyValue = 880 - Math.floor(player.getCharisma() / 1); // at max, buy for 830.
                this.sellValue = 730 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 830.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 880 - Math.floor(player.getCharisma() / 1); // at max, buy for 830.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 0;
            this.spellGroup = "Incantation";
            this.spellGenre = "Necromancy";
            this.spellName = "Life-Tap";
            this.spellID = "lifeTap";
            this.spellDamage = 0;
            this.spellEXP = 2 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 6 + (5/50) * player.getConcentration() - (8/50) * player.getEminence());
            this.spellDescription = "Drain your own lifeforce and convert it into magical energy.";
            this.spellKnowledgeRequirement = 6;
            this.spellRange = "Self";
        }
        else if (this.type == "drainingI")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of Draining I";
                this.description = "Studying this scroll will teach you how to cast a shadowy blast that will steel the life force of its target and give it to the caster.";
                this.intForDes = 0;
                this.intDescription = "Reading the ancient markings sends an anxious chill through your bones.";
                this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                this.sellValue = 250 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 350.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(1, 1 + (14 / 50) * player.getConcentration() - (12 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Necromancy";
            this.spellName = "Draining I";
            this.spellID = "drainingI";
            this.spellDamage = 1 + (Math.floor(4/50 * player.getConcentration()));
            this.spellEXP = 5 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 8 + (7/50) * player.getConcentration() - (12/50) * player.getEminence());
            this.spellDescription = "A shadowy blast that steels the lifeforce of its target and gives it to the caster.";
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "vivification")
        {
            //For All Items
            if (player.getKnowledge() >= 20)
            {
                this.identity = "Scroll of Vivification";
                this.description = "Studying this scroll will teach you how to give life to the recently diseased.";
                this.intForDes = 4;
                this.intDescription = "If the target of this spell has been dead too long it is impossible to revive them for their soul will have already departed.";
                this.buyValue = 1239 - Math.floor(player.getCharisma() / 1.27); // at max, buy for 1200.
                this.sellValue = 1000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1200.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1239 - Math.floor(player.getCharisma() / 1.27); // at max, buy for 1200.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            if (player.getConcentration() >= 50)
            {
                this.spellCost = Math.max(1, 15 + 5 / 50 * player.getConcentration() - (1 / 10) * player.getEminence());
            }
            else
            {
                this.spellCost = Math.max(1, 20 + 10 / 50 * player.getConcentration() - (1 / 10) * player.getEminence());
            }
            this.spellGroup = "Form";
            this.spellGenre = "Necromancy";
            this.spellName = "Vivification";
            this.spellID = "vivification";
            this.spellEXP = 10 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(2, 60 + (35/50) * player.getConcentration() - (65/50) * player.getEminence());
            this.spellDescription = "A manipulation of the very fabric of life and death, forcing the dead target's soul back into its body.";
            this.spellKnowledgeRequirement = 20;
            this.spellRange = "Near";
        }
        else if (this.type == "leechingTouch")
        {
            //For All Items
            if (player.getKnowledge() >= 19)
            {
                this.identity = "Tablet of Leeching Touch";
                this.description = "Studying this magically engraved stone tablet will teach you how absorb the lifeforce from your targets through your fingertips.";
                this.intForDes = 0;
                this.intDescription = "This spell does not combo with other on-touch spells.";
                this.buyValue = 1388 - Math.floor(player.getCharisma() / 1); // at max, buy for 1338.
                this.sellValue = 1288 + Math.floor(player.getCharisma() / 1); // at max, sell for 1338.
            }
            else
            {
                this.identity = "Engraved Stone Tablet";
                this.description = "There are strange symbols engraved in the stone.";
                this.intForDes = 22;
                this.intDescription = "This stone tablet seems to be some sort of deathly relic.";
                this.buyValue = 1388 - Math.floor(player.getCharisma() / 1); // at max, buy for 1328.
                this.sellValue = 466 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 666.
            }

            this.weight = 2.5;
            this.size = 13;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = 13;
            this.spellGroup = "Bind";
            this.spellGenre = "Necromancy";
            this.spellName = "Leeching Touch";
            this.spellID = "leechingTouch";
            this.spellDamage = 6;
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "Life force is rapidly absorbed from the victim into the caster with a single touch.";
            this.spellKnowledgeRequirement = 19;
            this.spellRange = "Near";
        }
        else if (this.type == "fireHands")
        {
            //For All Items
            if (player.getKnowledge() >= 2)
            {
                this.identity = "Scroll of Fire Hands";
                this.description = "Studying this scroll will teach you how to catch anyone that you touch aflame.";
                this.intForDes = 0;
                this.intDescription = "This spell does not combo with other on-touch spells.";
                this.buyValue = 648 - Math.floor(player.getCharisma() / 1); // at max, buy for 598.
                this.sellValue = 548 + Math.floor(player.getCharisma() / 1); // at max, sell for 598.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 648 - Math.floor(player.getCharisma() / 1); // at max, buy for 598.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 2;
            this.spellGroup = "Bind";
            this.spellGenre = "Fire";
            this.spellName = "Fire Hands";
            this.spellID = "fireHands";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "That which is touched is set aflame.";
            this.spellKnowledgeRequirement = 2;
            this.spellRange = "Near";
        }
        else if (this.type == "chargedTouch")
        {
            //For All Items
            if (player.getKnowledge() >= 11)
            {
                this.identity = "Scroll of Charged Touch";
                this.description = "Studying this scroll will teach you how to hold a powerful electric charge in your hands.";
                this.intForDes = 0;
                this.intDescription = "This spell does not combo with other on-touch spells.";
                this.buyValue = 1246 - Math.floor(player.getCharisma() / 1); // at max, buy for 1198.
                this.sellValue = 1146 + Math.floor(player.getCharisma() / 1); // at max, sell for 1198.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1246 - Math.floor(player.getCharisma() / 1); // at max, buy for 1198.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = 5;
            this.spellGroup = "Bind";
            this.spellGenre = "Electricity";
            this.spellName = "Charged Touch";
            this.spellID = "chargedTouch";
            this.spellDamage = 1;
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "That which is touched is electrocuted.";
            this.spellKnowledgeRequirement = 11;
            this.spellRange = "Near";
        }
        else if (this.type == "freezingGrasp")
        {
            //For All Items
            if (player.getKnowledge() >= 3)
            {
                this.identity = "Scroll of Freezing Grasp";
                this.description = "Studying this scroll will teach you how to make your hands exude the pure essence of coldness.";
                this.intForDes = 0;
                this.intDescription = "This spell does not combo with other on-touch spells.";
                this.buyValue = 930 - Math.floor(player.getCharisma() / 1); // at max, buy for 880.
                this.sellValue = 830 + Math.floor(player.getCharisma() / 1); // at max, sell for 880.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 930 - Math.floor(player.getCharisma() / 1); // at max, buy for 880.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 3;
            this.spellGroup = "Bind";
            this.spellGenre = "Ice";
            this.spellName = "Freezing Grasp";
            this.spellID = "freezingGrasp";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "That which is touched is frozen.";
            this.spellKnowledgeRequirement = 3;
            this.spellRange = "Near";
        }
        else if (this.type == "sorcerer'sRaincoat")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of The Sorcerer's Raincoat";
                this.description = "Studying this scroll will teach you how to summon a magical energy shield around yourself.";
                this.intForDes = 19;
                this.intDescription = "The scroll has some very interesting and peculiar wording as if the mage who wrote this spell made it as a joke.";
                this.buyValue = 300 - Math.floor(player.getCharisma() / 1); // at max, buy for 250.
                this.sellValue = 200 + Math.floor(player.getCharisma() / 1); // at max, sell for 250.
            }
            else
            {
                this.identity = "Otherworldy Grocery List";
                this.description = "The markings on this scroll are incomprehensible; except for one which looks like a coat.";
                this.intForDes = 0;
                this.intDescription = "This is clearly the grocery list of an otherworldly being... Don't question it, it just is.";
                this.buyValue = 300 - Math.floor(player.getCharisma() / 1); // at max, buy for 250.
                this.sellValue = 10 + Math.floor(player.getCharisma() / 1); // at max, sell for 60.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 1;
            this.spellGroup = "Bind";
            this.spellGenre = "Cosmic";
            this.spellID = "sorcerer'sRaincoat";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            if (player.gender == "Male")
            {
                this.spellName = "The Sorcerer's Raincoat";
                this.spellDescription = "Forms a film of magical energy around the caster so that he can stay dry in the rain.";
            }
            else if (player.gender == "Female")
            {
                this.spellName = "The Sorceress's Raincoat";
                this.spellDescription = "Forms a film of magical energy around the caster so that she can stay dry in the rain.";
            }
            else if (player.gender == "Goop")
            {
                this.spellName = "The Goop's Raincoat";
                this.spellDescription = "Forms a film of magical energy around the goop so that it can stay dry in the rain.";
            }
            else
            {
                this.spellName = "The Sorcereress's Raincoat";
                this.spellDescription = "Forms a film of magical energy around the caster so that they can stay dry in the rain.";
            }
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Self";
        }
        else if (this.type == "shieldingI")
        {
            //For All Items
            if (player.getKnowledge() >= 4)
            {
                this.identity = "Scroll of Shielding I";
                this.description = "Studying this scroll will teach you how to summon a shield of magical energy around yourself.";
                this.intForDes = 0;
                this.intDescription = "You can not have multiple all-purpose shield spells active at once.";
                this.buyValue = 1300 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1100.
                this.sellValue = 900 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1100.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1300 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1100.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 2;
            this.spellGroup = "Bind";
            this.spellGenre = "Cosmic";
            this.spellName = "Shielding I";
            this.spellID = "shieldingI";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "A basic strength magical energy shield that envelopes the caster and acts as a layer of protection.";
            this.spellKnowledgeRequirement = 4;
            this.spellRange = "Self";
        }
        else if (this.type == "shieldingII")
        {
            //For All Items
            if (player.getKnowledge() >= 6)
            {
                this.identity = "Scroll of Shielding II";
                this.description = "Studying this scroll will teach you how to summon a shield of magical energy around yourself.";
                this.intForDes = 0;
                this.intDescription = "You can not have multiple all-purpose shield spells active at once.";
                this.buyValue = 1600 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1400.
                this.sellValue = 1200 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1600 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1400.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 5;
            this.spellGroup = "Bind";
            this.spellGenre = "Cosmic";
            this.spellName = "Shielding II";
            this.spellID = "shieldingII";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "A magical energy shield that envelopes the caster and acts as a layer of protection.";
            this.spellKnowledgeRequirement = 6;
            this.spellRange = "Self";
        }
        else if (this.type == "shieldingIII")
        {
            //For All Items
            if (player.getKnowledge() >= 15)
            {
                this.identity = "Scroll of Shielding III";
                this.description = "Studying this scroll will teach you how to summon a shield of magical energy around yourself.";
                this.intForDes = 0;
                this.intDescription = "You can not have multiple all-purpose shield spells active at once.";
                this.buyValue = 1900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1700.
                this.sellValue = 1500 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1700.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1700.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 9;
            this.spellGroup = "Bind";
            this.spellGenre = "Cosmic";
            this.spellName = "Shielding III";
            this.spellID = "shieldingIII";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "A reliable magical energy shield that envelopes the caster and acts as a layer of protection.";
            this.spellKnowledgeRequirement = 15;
            this.spellRange = "Self";
        }
        else if (this.type == "shieldingIV")
        {
            //For All Items
            if (player.getKnowledge() >= 21)
            {
                this.identity = "Scroll of Shielding IV";
                this.description = "Studying this scroll will teach you how to summon a shield of magical energy around yourself.";
                this.intForDes = 0;
                this.intDescription = "You can not have multiple all-purpose shield spells active at once.";
                this.buyValue = 2400 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 2200.
                this.sellValue = 2000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 2200.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 2400 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 2200.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 14;
            this.spellGroup = "Bind";
            this.spellGenre = "Cosmic";
            this.spellName = "Shielding IV";
            this.spellID = "shieldingIV";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "A strong magical energy shield that envelopes the caster and acts as a layer of protection.";
            this.spellKnowledgeRequirement = 21;
            this.spellRange = "Self";
        }
        else if (this.type == "shieldingV")
        {
            //For All Items
            if (player.getKnowledge() >= 32)
            {
                this.identity = "Scroll of Shielding V";
                this.description = "Studying this scroll will teach you how to summon a shield of magical energy around yourself.";
                this.intForDes = 0;
                this.intDescription = "You can not have multiple all-purpose shield spells active at once.";
                this.buyValue = 3700 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 3500.
                this.sellValue = 3300 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 3500.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 3700 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 3500.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 23;
            this.spellGroup = "Bind";
            this.spellGenre = "Cosmic";
            this.spellName = "Shielding V";
            this.spellID = "shieldingV";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "A powerful magical energy shield that envelopes the caster and acts as a layer of protection.";
            this.spellKnowledgeRequirement = 32;
            this.spellRange = "Self";
        }
        else if (this.type == "embers")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of Embers";
                this.description = "Studying this scroll will teach you how to cast a spiraling dance of fire.";
                this.intForDes = 0;
                this.intDescription = "Although this is a novice spell it is actually quite effective when used by skilled magi.";
                this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                this.sellValue = 250 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 350.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(1, 1 + (1 / 12.5) * player.getConcentration() - (1 / 12.5) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Fire";
            this.spellName = "Embers";
            this.spellID = "embers";
            this.spellDamage = 3 + (0.2 * player.getConcentration());
            this.spellEXP = 9 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.5, 4 + (3.5/50) * player.getConcentration() - (7/50) * player.getEminence());
            this.spellDescription = "A fiery burst that forms several swirling masses of flame.";
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Near";
        }
        else if (this.type == "powerDraw")
        {
            //For All Items
            if (player.getKnowledge() >= 11)
            {
                this.identity = "Scroll of Absorption";
                this.description = "Studying this scroll will teach you how to cast a spiraling dance of fire.";
                this.intForDes = 0;
                this.intDescription = "Although this is a novice spell it is actually quite effective when used by skilled magi.";
                this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                this.sellValue = 250 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 350.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(4, 8 + (5 / 50) * player.getConcentration() - (15 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Nechromancy";
            this.spellName = "Absorption";
            this.spellID = "powerDraw";
            this.spellDamage = 3 + (0.2 * player.getConcentration());
            this.spellEXP = 20 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(6, 10 + (5/50) * player.getConcentration() - (12/50) * player.getEminence());
            this.spellDescription = "Drains the lifeforce from all surrounding beings and transfers it to the caster.";
            this.spellKnowledgeRequirement = 11;
            this.spellRange = "Medium";
        }
        else if (this.type == "arcaneOrbs")
        {
            //For All Items
            if (player.getKnowledge() >= 9)
            {
                this.identity = "Scroll of Arcane Orbs";
                this.description = "Studying this scroll will teach you how to send forth two orbs that shoot arcane lasers at whatever is nearest to them.";
                this.intForDes = 1;
                this.intDescription = "This spell targets all but the player's own team.";
                this.buyValue = 750 - Math.floor(player.getCharisma() / 1); // at max, buy for 700.
                this.sellValue = 650 + Math.floor(player.getCharisma() / 1); // at max, sell for 700.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 750 - Math.floor(player.getCharisma() / 1); // at max, buy for 700.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(3, 3 + (10 / 50) * player.getConcentration() - (6 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Cosmic";
            this.spellName = "Arcane Orbs";
            this.spellID = "arcaneOrbs";
            this.spellDamage = 2.5 + (0.1 * player.getConcentration());
            this.spellEXP = 12 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 8 + (4/50) * player.getConcentration() - (9/50) * player.getEminence());
            this.spellDescription = "Two orbs of magic that shoot magical laser beams at the target nearest them.";
            this.spellKnowledgeRequirement = 9;
            this.spellRange = "Wander";
        }
        else if (this.type == "potatoInvisibility")
        {
            //For All Items
            if (player.getKnowledge() >= 1)
            {
                this.identity = "Scroll of Potato Invisibility";
                this.description = "Studying this scroll will teach you how to make all potatoes within a wide range of the player completely invisible.";
                this.intForDes = 0;
                this.intDescription = "You are the first worldly being to have discovered this spell.";
                this.buyValue = 10; // at max, buy for 10.
                this.sellValue = 10; // at max, sell for 10.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 10; // at max, buy for 10.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = false;
            this.spellCost = 1;
            this.spellGroup = "Bind";
            this.spellGenre = "Illusion";
            this.spellName = "Potato Invisibility";
            this.spellID = "potatoInvisibility";
            this.spellEXP = 0;
            this.spellCooldown = 0;
            this.spellDescription = "A field of magical anti-potato energy that causes all potatoes within a wide radius to disappear.";
            this.spellKnowledgeRequirement = 1;
            this.spellRange = "Long";
        }
        else if (this.type == "shadowSwitch")
        {
            //For All Items
            if (player.getKnowledge() >= 6)
            {
                this.identity = "Scroll of Shadow Switch";
                this.description = "Studying this scroll will teach you how to cast a bolt of shadow energy that decays the foe's essence.";
                this.intForDes = 0;
                this.intDescription = "The second part of the spell switches the caster and the foe's positions.";
                this.buyValue = 900 - Math.floor(player.getCharisma() / 1); // at max, buy for 850.
                this.sellValue = 800 + Math.floor(player.getCharisma() / 1); // at max, sell for 850.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 900 - Math.floor(player.getCharisma() / 1); // at max, buy for 850.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 12;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(1, 5 + (3 / 50) * player.getConcentration() - (5 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Nechromancy";
            this.spellName = "Shadow Switch";
            this.spellID = "shadowSwitch";
            this.spellDamage = 6 + (0.4 * player.getConcentration());
            this.spellEXP = 19 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.5, 6 + (8/50) * player.getConcentration() - (10/50) * player.getEminence());
            this.spellDescription = "A shadowy bolt that switches the caster and the foe while decaying the foe's essence.";
            this.spellKnowledgeRequirement = 6;
            this.spellRange = "Medium";
        }
        else if (this.type == "windBlast")
        {
            //For All Items
            if (player.getKnowledge() >= 6)
            {
                this.identity = "Scroll of Wind Blast";
                this.description = "Studying this scroll will teach you how to cast a blast of wind to throw back your foes.";
                this.intForDes = 0;
                this.intDescription = "This scroll looks old and withered, but the magical writing is still clear enough to read.";
                this.buyValue = 945 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 845.
                this.sellValue = 720 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 820.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 945 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 845.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 14;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(2, 3 + (3 / 50) * player.getConcentration() - (4 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Air";
            this.spellName = "Wind Blast";
            this.spellID = "windBlast";
            this.spellDamage = 4 + 0.1 * player.getConcentration();
            this.spellEXP = 8 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 6 + (4/50) * player.getConcentration() - (7/50) * player.getEminence());
            this.spellDescription = "A powerful blast of wind that throws all that it hits forcefully back.";
            this.spellKnowledgeRequirement = 6;
            this.spellRange = "Medium";
        }
        else if (this.type == "fireballI")
        {
            //For All Items
            if (player.getKnowledge() >= 2)
            {
                this.identity = "Scroll of Fireball I";
                this.description = "Studying this scroll will teach you how to cast a flaming hot ball of fire.";
                this.intForDes = 0;
                this.intDescription = "This scroll looks old and withered, but the magical writing is still clear enough to read.";
                this.buyValue = 750 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 650.
                this.sellValue = 550 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 650.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 750 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 14;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(2, 2 + (1 / 10) * player.getConcentration() - (1 / 10) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Fire";
            this.spellName = "Fireball I";
            this.spellID = "fireballI";
            this.spellDamage = 7.5 + 0.3 * player.getConcentration()
            this.spellEXP = 12 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 5 + (3/50) * player.getConcentration() - (7/50) * player.getEminence());
            this.spellDescription = "A burning hot ball of flames projected from the caster's hands.";
            this.spellKnowledgeRequirement = 2;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "flamingMissiles")
        {
            //For All Items
            if (player.getKnowledge() >= 6)
            {
                this.identity = "Scroll of Flaming Missiles";
                this.description = "Studying this scroll will teach you how to cast two target seeking streaks of fire.";
                this.intForDes = 0;
                this.intDescription = "This scroll looks old and withered, but the magical writing is still clear enough to read.";
                this.buyValue = 800 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 700.
                this.sellValue = 500 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 700.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 800 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 700.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 14;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(2, 2 + (1 / 10) * player.getConcentration() - (1 / 10) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Fire";
            this.spellName = "Flaming Missiles";
            this.spellID = "flamingMissiles";
            this.spellDamage = 3 * (1 + player.getConcentration() / 25);
            this.spellEXP = 14 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 4 + (2/50) * player.getConcentration() - (5/50) * player.getEminence());
            this.spellDescription = "Two bolts of flame that seek their target.";
            this.spellKnowledgeRequirement = 6;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "eruption")
        {
            //For All Items
            if (player.getKnowledge() >= 23)
            {
                this.identity = "Scroll of Eruption";
                this.description = "Studying this scroll will teach you how to shoot out a growing circle of flames.";
                this.intForDes = 0;
                this.intDescription = "This scroll looks old and withered, but the magical writing is still clear enough to read.";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1400.
                this.sellValue = 1300 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 1400.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1400.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 14;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(3, 10 + (2 / 10) * player.getConcentration() - (7 / 10) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Fire";
            this.spellName = "Eruption";
            this.spellID = "eruption";
            this.spellDamage = 35 + 0.5 * player.getConcentration();
            this.spellEXP = 39 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(3, 19 + (7/50) * player.getConcentration() - (18/50) * player.getEminence());
            this.spellDescription = "An explosion of flames that eminates from the caster.";
            this.spellKnowledgeRequirement = 23;
            this.spellRange = "Medium";
        }
        else if (this.type == "drakeBreath")
        {
            //For All Items
            if (player.getKnowledge() >= 29)
            {
                this.identity = "Scroll of Drake Breath";
                this.description = "Studying this scroll will teach you how to spit a torrent of flames from your mouth.";
                this.intForDes = 0;
                this.intDescription = "This scroll looks old, withered, and burnt on the edges, but the magical writing is still clear enough to read.";
                this.buyValue = 1750 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1650.
                this.sellValue = 1450 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1650.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1750 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1650.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 14;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(0.2, 0.6 + (0.4 / 10) * player.getConcentration() - (1 / 10) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Fire";
            this.spellName = "Drake Breath";
            this.spellID = "drakeBreath";
            this.spellDamage = 8 + 0.1 * player.getConcentration();
            this.spellEXP = 0.2 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(0.1, 0.2 + (0.3/50) * player.getConcentration() - (0.4/50) * player.getEminence());
            this.spellDescription = "A torrent of flames that spills from the caster's mouth.";
            this.spellKnowledgeRequirement = 29;
            this.spellRange = "Short";
        }
        else if (this.type == "electricBolt")
        {
            //For All Items
            if (player.getKnowledge() >= 12)
            {
                this.identity = "Scroll of Electric Bolt";
                this.description = "Studying this scroll will teach you how to cast and throw a powerful bolt of electricity from your hands.";
                this.intForDes = 0;
                this.intDescription = "The inked sybols on this scroll stand out from the paper as if they were reaching out to you.";
                this.buyValue = 1200 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1100.
                this.sellValue = 1050 + Math.floor(player.getCharisma() / 1); // at max, sell for 1100.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1200 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1100.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 14;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(1, 6 + (7 / 50) * player.getConcentration() - (7 / 50) * player.getEminence());
            this.spellGroup = "Form";
            this.spellGenre = "Electricity";
            this.spellName = "Electric Bolt";
            this.spellID = "electricBolt";
            this.spellDamage = 11 + 0.4 * player.getConcentration();
            this.spellEXP = 15 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 8 + (6/50) * player.getConcentration() - (12/50) * player.getEminence());
            this.spellDescription = "A powerful and contained bolt of magical electricity thrown forth from the caster's hand.";
            this.spellKnowledgeRequirement = 12;
            this.spellRange = "Medium-Long";
        }
        else if (this.type == "surge")
        {
            //For All Items
            if (player.getKnowledge() >= 14)
            {
                this.identity = "Scroll of Surge";
                this.description = "Studying this scroll will teach you how to create an explosion of magical eletricity around you.";
                this.intForDes = 0;
                this.intDescription = "This is an area of effect spell that electrocutes all within a short distance from the caster.";
                this.buyValue = 1085 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 985.
                this.sellValue = 900 + Math.floor(player.getCharisma() / 1); // at max, sell for 950.
            }
            else
            {
                this.identity = "Scroll";
                this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                this.intForDes = 2;
                this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                this.buyValue = 1085 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 985.
                this.sellValue = 1; // at max, sell for 1.
            }
            this.weight = 0.02;
            this.size = 14;

            //Define Utility
            this.utility = "spell";

            //ability
            this.ability = "none";

            //Utility Focused
            this.damages = true;
            this.spellCost = Math.max(1, 4 + (4 / 50) * player.getConcentration() - (6 / 50) * player.getEminence());
            this.spellGroup = "Incantation";
            this.spellGenre = "Electricity";
            this.spellName = "Surge";
            this.spellID = "surge";
            this.spellDamage = 3 + 0.15 * player.getConcentration();
            this.spellEXP = 7 * ((50 + player.getMemory()) / 50);
            this.spellCooldown = Math.max(1, 10 + (5/50) * player.getConcentration() - (13/50) * player.getEminence());
            this.spellDescription = "An electrical explosion that surrounds the caster shocking all that are around.";
            this.spellKnowledgeRequirement = 13;
            this.spellRange = "Short";
        }
        else if (this.type == "etyrMeat")
        {
            //For All Items
            this.identity = "Etyr Meat";
            this.weight = 1;
            this.size = 6;
            this.description = "The cooked meat of an Etyr.";
            this.intForDes = 1;
            this.intDescription = "Stringy, chewy, and tough... but it's edible.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Etyr Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "trubkaLeaf")
        {
            //For All Items
            this.identity = "Trubka Leaf";
            this.weight = 1.6;
            this.size = 7;
            this.description = "The reddish, moist, liquid filled leaf of a trubka plant.";
            this.intForDes = 23;
            this.intDescription = "A special enzyme in trubka leaves is the only known cure to pixi venom, and it kills internally lodged pixi eggs as well.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.3; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -3; //restores will.

            //ability
            this.ability = "antiPixi";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "giraffePlatter")
        {
            //For All Items
            this.identity = "Giraffe Platter";
            this.weight = 7;
            this.size = 15;
            this.description = "Giraffe meat slow roasted until tender with chunks of eggplant all seasoned with zaf spice.";
            this.intForDes = 0;
            this.intDescription = "It tastes gamey, spicy, and poignantly savoury, with a zesty but somewhat insecty aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.raceName == "Cephrite")
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 26; //satisfies hunger.
                this.thirst = 2.5; //quenches thirst.
                this.warmth = 14; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.2; //recoops lost energy.
                this.replenish = 0.15; //restores will.

                //ability
                this.ability = "satiation";

                //Crafting
                this.yield = 1;
                this.intForCraft = 23;
                this.ingredients = [["Raw Giraffe Flesh", 1], ["Chopped Eggplant", 1], ["Zaf Beetle Whiskers", 1]];
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 21; //satisfies hunger.
                this.thirst = 1.5; //quenches thirst.
                this.warmth = 12; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = 0.1; //restores will.

                //ability
                if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
                {
                    this.ability = "satiation";
                }
                else
                {
                    this.ability = "none";
                }

                //Crafting
                this.yield = 1;
                this.intForCraft = 26;
                this.ingredients = [["Raw Giraffe Flesh", 1], ["Chopped Eggplant", 1], ["Zaf Beetle Whiskers", 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite" || shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 39; // at max, buy for 39.
                    this.sellValue = 39; // at max, sell for 39.
                }
                else
                {
                    this.buyValue = 31 - Math.floor(player.getCharisma() / 15); // at max, buy for 28.
                    this.sellValue = 23 + Math.floor(player.getCharisma() / 10); // at max, sell for 28.
                }
            }
            else
            {
                this.buyValue = 31 - Math.floor(player.getCharisma() / 15); // at max, buy for 28.
                this.sellValue = 23 + Math.floor(player.getCharisma() / 10); // at max, sell for 28.
            }
        }
        else if (this.type == "cookedTurkeyEgg")
        {
            //For All Items
            this.identity = "Fried Turkey Egg";
            this.weight = 0.25;
            this.size = 7;
            this.description = "A cooked turkey egg.";
            this.intForDes = 0;
            this.intDescription = "It is a sort of rich flavour, but otherwise it just tastes like an egg.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5.25; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Turkey Egg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "rawRibbackFlesh")
        {
            //For All Items
            this.identity = "Raw Ribback Flesh";
            this.weight = 0.8;
            this.size = 6;
            this.description = "The spongey light-bodied flesh of a ribback.";
            this.intForDes = 0;
            this.intDescription = "It is safe to eat, but it is by no means appetizing; its sort of like a fat wad of blood flavoured gum...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = -2; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "ribbackMeat")
        {
            //For All Items
            this.identity = "Ribback Meat";
            this.weight = 0.75;
            this.size = 6;
            this.description = "This meat has a firm but spongey texture and a relatively bland flavour.";
            this.intForDes = 0;
            this.intDescription = "It is a bit chewy and tough.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Raw Ribback Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "fegilRegurgitation")
        {
            //For All Items
            this.identity = "Fegil Regurgitation";
            this.weight = 0.5;
            this.size = 8;
            this.description = "The premasticated, partially digested, brown slop that is leftover from a fegil's last meal.";
            this.intForDes = 1;
            this.intDescription = "Fegils have an extra stomach just for producing this substance which they regurgitate for their babies to eat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.01; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -3; //restores will.


            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawSilterFlesh")
        {
            //For All Items
            this.identity = "Raw Silter Flesh";
            this.weight = 0.85;
            this.size = 6;
            this.description = "The raw flesh of a silter.";
            this.intForDes = 0;
            this.intDescription = "It is slimy, sour, somewhat bitter, and it burns your mouth and throat to eat it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.6; //satisfies hunger.
            this.thirst = 0.7; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -3; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "silterMeat")
        {
            //For All Items
            this.identity = "Silter Meat";
            this.weight = 0.80;
            this.size = 6;
            this.description = "The cooked meat of a silter.";
            this.intForDes = 0;
            this.intDescription = "It is pasty and fills your mouth with a crippling bitterness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Silter Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "cebolla")
        {
            //For All Items
            this.identity = "Onion";
            this.weight = 1.15;
            this.size = 6;
            this.description = "A sulferous ball of layered plant stuff.";
            this.intForDes = 0;
            this.intDescription = "Onions hurt your eyes because they have lots of sulfur in them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.5; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -3; //restores will.

            //ability
            this.ability = "blindI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "cebollaPicadaCocinada")
        {
            //For All Items
            this.identity = "Caramelized Onions";
            this.weight = 0.45;
            this.size = 9;
            this.description = "Carmelized diced onion.";
            this.intForDes = 0;
            this.intDescription = "They taste sweet and oniony.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "blindI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Chopped Onion", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "cebollaPicada")
        {
            //For All Items
            this.identity = "Chopped Onion";
            this.weight = 0.5;
            this.size = 9;
            this.description = "Small diced up bits of onion.";
            this.intForDes = 0;
            this.intDescription = "Onions hurt your eyes because they have lots of sulfur in them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.25; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = -1.5; //restores will.

            //ability
            this.ability = "blind1/2";

            //Crafting
            this.yield = 2;
            this.intForCraft = 1;
            this.ingredients = [["Onion", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "cebollaHorneada")
        {
            //For All Items
            this.identity = "Roasted Onion";
            this.weight = 1.1;
            this.size = 6;
            this.description = "A sweet caramelized roasted onion.";
            this.intForDes = 0;
            this.intDescription = "It has a depth of flavour that is quite enjoyable; it is even better when paired with other foods.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Onion", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "alcachofaCocinada")
        {
            //For All Items
            this.identity = "Steamed Artichoke";
            this.weight = 2;
            this.size = 6;
            this.description = "A large green flower bud formed from numerous edible leaves with a spine on their tip. In the center is the edible heart which is the best part.";
            this.intForDes = 0;
            this.intDescription = "It tastes savoury but unique.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 12;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Artichoke", 2], ["Bucket of Water", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "berenjenaPicadaCocinada")
        {
            //For All Items
            this.identity = "Chopped Roasted Eggplant";
            this.weight = 0.4;
            this.size = 9;
            this.description = "Chopped chunks of roasted eggplant.";
            this.intForDes = 0;
            this.intDescription = "They taste rather bland alone: eggplant tastes much better when it is cooked with other foods so that it soaks in their flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.75; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = -0.1; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Chopped Eggplant", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "berenjenaRebanadaCocinada")
        {
            //For All Items
            this.identity = "Sliced Roasted Eggplant";
            this.weight = 0.3;
            this.size = 8;
            this.description = "A thin slice of roasted eggplant.";
            this.intForDes = 0;
            this.intDescription = "It tastes rather bland alone: eggplant tastes much better when it is cooked with other foods so that it soaks in their flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.75; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.25; //recoops lost energy.
            this.replenish = -0.05; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Sliced Eggplant", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "glazaRoot")
        {
            //For All Items
            this.identity = "Glaza Root";
            this.weight = 2.3;
            this.size = 9;
            this.description = "A reddish tuber that grows in the southern savannah.";
            this.intForDes = 10;
            this.intDescription = "This root is particularly posionous to consume raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "poisonIII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "roastedGlazaRoot")
        {
            //For All Items
            this.identity = "Roasted Glaza Root";
            this.weight = 2.25;
            this.size = 9;
            this.description = "A roasted reddish tuber that is light green and starchy.";
            this.intForDes = 11;
            this.intDescription = "Though the poisonous compounds in the glaza root are deteriorated by heat, they do not break down enough to stop being poisonous.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "poisonI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Glaza Root", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "glazaPowder")
        {
            //For All Items
            this.identity = "Glaza Powder";
            this.weight = 0.1;
            this.size = 7;
            this.description = "A greyish green powder extracted from the glaza root.";
            this.intForDes = 10;
            this.intDescription = "This powder is particularly poisonous.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "poisonIII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 27;
            this.ingredients = [["Glaza Root", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 25); // at max, sell for 12.
        }
        else if (this.type == "glazm")
        {
            //For All Items
            this.identity = "Glazm";
            this.weight = 0.12;
            this.size = 8;
            this.description = "A bright green paste that is highly posionous.";
            this.intForDes = 12;
            this.intDescription = "This compound is made by blending glaza powder with tchalta flower and fermenting them together.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "poisonIV";

            //Crafting
            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Glaza Powder", 1], ["Tchalta Flower", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 25); // at max, buy for 18.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 25); // at max, sell for 18.
        }
        else if (this.type == "tchaltaGel")
        {
            //For All Items
            this.identity = "Tchalta Gel";
            this.weight = 0.9;
            this.size = 8;
            this.description = "The gelatinous sap from a leaf of a tchalta cactus.";
            this.intForDes = 0;
            if (player.getIntelligence() >= 3)
            {
                this.intDescription = "It gives you a painful burning sensation where it touches your skin; consuming it kills throat tics, and gut worms, but causes you immense pain and makes you vomit.";
            }
            else
            {
                this.intDescription = "It gives you a painful burning sensation where it touches your skin; consuming it would not be pleasant by any means.";
            }
            this.smallText = true;

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -0.5; //satisfies hunger.
            this.thirst = -0.5; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = -3; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -3; //restores will.


            //ability
            this.ability = "tchaltaGel";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Tchalta Leaf", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "ardilMeat")
        {
            //For All Items
            this.identity = "Ardil Meat";
            this.weight = 0.3;
            this.size = 4;
            this.description = "The cooked meat of an Ardil.";
            this.intForDes = 1;
            this.intDescription = "Chewy, and a bit gamey... but it's alright.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Ardil Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "snowyOwlWing")
        {
            //For All Items
            this.identity = "Snowy Owl Wing";
            this.weight = 0.7;
            this.size = 11;
            this.description = "The severed wing of a snowy owl.";
            this.intForDes = 0;
            this.intDescription = "This can be used to adorn certain northern styles of clothing and it acts as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "maleLyagushkaSkin")
        {
            //For All Items
            this.identity = "Lyagushka Skin";
            this.weight = 1.7;
            this.size = 11;
            this.description = "The oily colorful skin of a male lyagushka.";
            this.intForDes = 0;
            this.intDescription = "The oily pheramones in a male lyagushka's skin are both highly flame retardant and smelly; they are produced to attract a mate.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "snowyOwlWingLarge")
        {
            //For All Items
            this.identity = "Giant Snowy Owl Wing";
            this.weight = 7;
            this.size = 21;
            this.description = "The severed wing of a giant snowy owl.";
            this.intForDes = 0;
            this.intDescription = "This wing is a trophy that demonstrate the prowess of the one that slayed a giant snowy owl.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 25); // at max, sell for 11.
        }
        else if (this.type == "saffron")
        {
            //For All Items
            this.identity = "Saffron";
            this.weight = 0.06;
            this.size = 5;
            this.description = "The stamens of the saffron flower.";
            this.intForDes = 0;
            this.intDescription = "It is a flavourful spice used commonly in Cephrian cooking, and it also can be used to dye things yellow.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 8); // at max, sell for 15.
        }
        else if (this.type == "alcachofa")
        {
            //For All Items
            this.identity = "Artichoke";
            this.weight = 1;
            this.size = 8;
            this.description = "The spine-tipped-leaved bud of the immature artichoke flower.";
            this.intForDes = 1;
            this.intDescription = "It is too hard to eat raw. When cooked it is a savoury and tasty vegetable.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "berenjena")
        {
            //For All Items
            this.identity = "Eggplant";
            this.weight = 1.1;
            this.size = 12;
            this.description = "A large tubular purple vegetable with a thick spongey white interior.";
            this.intForDes = 1;
            this.intDescription = "It is too spongey to eat raw; that spongeyness, when cooked, is great for soaking up flavours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "berenjenaRebanada")
        {
            //For All Items
            this.identity = "Sliced Eggplant";
            this.weight = 0.27;
            this.size = 8;
            this.description = "A thin slice of eggplant.";
            this.intForDes = 1;
            this.intDescription = "It is too spongey to eat raw; that spongeyness, when cooked, is great for soaking up flavours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 1;
            this.ingredients = [["Eggplant", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "berenjenaPicada")
        {
            //For All Items
            this.identity = "Chopped Eggplant";
            this.weight = 0.36;
            this.size = 9;
            this.description = "Chopped chunks of eggplant.";
            this.intForDes = 1;
            this.intDescription = "It is too spongey to eat raw; that spongeyness, when cooked, is great for soaking up flavours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 1;
            this.ingredients = [["Eggplant", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "nupalaPuffs")
        {
            //For All Items
            this.identity = "Nupala Puffs";
            this.weight = 0.06;
            this.size = 5;
            this.description = "The soft, somewhat sticky seed filled puffs of a nupala plant.";
            this.intForDes = 0;
            this.intDescription = "When washed thoroughly to remove the stickiness, nupala puffs can be woven into a soft fabric.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "tchaltaLeaf")
        {
            //For All Items
            this.identity = "Tchalta Leaf";
            this.weight = 1.2;
            this.size = 8;
            this.description = "A thick leaf from a tchalta cactus; it has spines along the sides of the leaf.";
            this.intForDes = 2;
            this.intDescription = "This can be despined and mashed into a gelatinous paste for medicinal use.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "tchaltaFlower")
        {
            //For All Items
            this.identity = "Tchalta Flower";
            this.weight = 0.02;
            this.size = 6;
            this.description = "The vibrant red flower of the tchalta cactus; it has a mildly sweet aroma.";
            this.intForDes = 7;
            this.intDescription = "It can be used as an amplifier/changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "tchafulaTuft")
        {
            //For All Items
            this.identity = "Tchafula Tuft";
            this.weight = 0.1;
            this.size = 9;
            this.description = "An orange fibrous hairlike substance plucked from a Tchafula bush.";
            this.intForDes = 7;
            this.intDescription = "It is commonly used as a stuffing for pillows, but it can also be woven into fabric.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "zwaleimBranches")
        {
            //For All Items
            this.identity = "Zwaleim Branches";
            this.weight = 0.6;
            this.size = 6;
            this.description = "Some branches and foliage from a zwaleim bush.";
            this.intForDes = 4;
            this.intDescription = "These have no practical use.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "skriatokEssence")
        {
            //For All Items
            this.identity = "Skriatok Essence";
            this.weight = 0.001;
            this.size = 9;
            this.description = "The faded silky essence of a skriatok.";
            this.intForDes = 0;
            this.intDescription = "It feels like cold smooth silk, but touching it sends an unsettling shiver through your bones.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 61 - Math.floor(player.getCharisma() / 2); // at max, buy for 36.
            this.sellValue = 21 + Math.floor(player.getCharisma() / 3); // at max, sell for 36.
        }
        else if (this.type == "hugeBogTrollSkull")
        {
            //For All Items
            this.identity = "Huge Bog Troll Skull";
            this.weight = 50;
            this.size = 30;
            this.description = "The skull of a humongous bog troll.";
            this.intForDes = 1;
            this.intDescription = "A testament to the valor and might of the one that has slain such a monstrous beast!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3000 - Math.floor(player.getCharisma() / 0.05125); // at max, buy for 2025.
            this.sellValue = 1445 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 1845.
        }
        else if (this.type == "bogTrollSkull")
        {
            //For All Items
            this.identity = "Bog Troll Skull";
            this.weight = 35;
            this.size = 24;
            this.description = "The skull of a bog troll.";
            this.intForDes = 1;
            this.intDescription = "A testament to the valor and might of the one that has slain such a beast!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1900 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 1500.
            this.sellValue = 1060 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1260.
        }
        else if (this.type == "babyBogTrollSkull")
        {
            //For All Items
            this.identity = "Baby Bog Troll Skull";
            this.weight = 8;
            this.size = 15;
            this.description = "The skull of a baby bog troll.";
            this.intForDes = 1;
            this.intDescription = "A trophy of a sort, for a troll is a troll, even a baby is dangerous...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 70 - Math.floor(player.getCharisma() / 2); // at max, buy for 45.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 3); // at max, sell for 45.
        }
        else if (this.type == "trollFlesh")
        {
            //For All Items
            this.identity = "Troll Flesh";
            this.weight = 4;
            this.size = 11;
            this.description = "The raw flesh of a Troll.";
            this.intForDes = 40;
            this.intDescription = "This meat can be strained for the troll's blood which has regenerative properties.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.getIntelligence >= 25)
            {
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            }
            this.hunger = 1; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = -6; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 90 - Math.floor(player.getCharisma() / 2); // at max, buy for 65.
                    this.sellValue = 40 + Math.floor(player.getCharisma() / 2); // at max, sell for 65.
                }
                else if (shopkeeper.ultra.race == "Vardan" && shopkeeper.ID != "Neculai the Merchant")
                {
                    this.buyValue = 80 - Math.floor(player.getCharisma() / 2); // at max, buy for 55.
                    this.sellValue = 19 + Math.floor(player.getCharisma() / 2); // at max, sell for 44.
                }
                else if (shopkeeper.ultra.race == "Thengar")
                {
                    this.buyValue = 115 - Math.floor(player.getCharisma() / 3); // at max, buy for 100.
                    this.sellValue = 70 + Math.floor(player.getCharisma() / 2); // at max, sell for 95.
                }
                else
                {
                    this.buyValue = 135 - Math.floor(player.getCharisma() / 2); // at max, buy for 110.
                    this.sellValue = 80 + Math.floor(player.getCharisma() / 2); // at max, sell for 105.
                }
            }
            else
            {
                this.buyValue = 135 - Math.floor(player.getCharisma() / 2); // at max, buy for 110.
                this.sellValue = 80 + Math.floor(player.getCharisma() / 2); // at max, sell for 105.
            }
        }
        else if (this.type == "trollMeat")
        {
            //For All Items
            this.identity = "Troll Meat";
            this.weight = 3;
            this.size = 11;
            this.description = "The cooked meat of a troll.";
            this.intForDes = 5;
            this.intDescription = "It is tough to chew, and quite frankly it tastes disgusting...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Troll Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 25); // at max, sell for 10.
        }
        else if (this.type == "ribbackSpinneret")
        {
            //For All Items
            this.identity = "Ribback Spinneret";
            this.weight = 1.6;
            this.size = 12;
            this.description = "The web spinning organ from a ribback";
            this.intForDes = 1;
            this.intDescription = "This serves as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 25); // at max, sell for 11.
        }
        else if (this.type == "ribbackFangs")
        {
            //For All Items
            this.identity = "Ribback Fangs";
            this.weight = 0.7;
            this.size = 9;
            this.description = "The long pointed fangs of a ribback";
            this.intForDes = 1;
            this.intDescription = "This is a trophy that demonstrates ones prowess for having defeated a ribback.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "fegilPelt")
        {
            //For All Items
            this.identity = "Fegil Pelt";
            this.weight = 0.4;
            this.size = 6;
            this.description = "The messy grey furred pelt of a fegil.";
            this.intForDes = 5;
            this.intDescription = "Fegil pelts can be made into low class apparel and clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "yilotnyyPelt")
        {
            //For All Items
            this.identity = "Yilotnyy Pelt";
            this.weight = 7;
            this.size = 18;
            this.description = "Soft, thin, dark brown fur from a Yilotnyy.";
            this.intForDes = 14;
            this.intDescription = "Though yilotnyy are akin to giant lobster eels, they are indeed mammals that have fur and give birth to live young.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "yilotnyyFangs")
        {
            //For All Items
            this.identity = "Yilotnyy Fangs";
            this.weight = 10;
            this.size = 18;
            this.description = "The thick boney fangs of an adult male yilotnyy.";
            this.intForDes = 14;
            this.intDescription = "Female yilotnyy have much smaller fangs, instead of chewing they use corrosive acid to melt their food for them.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "juniperBerries")
        {
            //For All Items
            this.identity = "Juniper Berries";
            this.weight = 0.11;
            this.size = 4;
            this.description = "The hard, dried, tiny, strong smelling seeds of a great pine.";
            this.intForDes = 4;
            this.intDescription = "These can be used to make gin!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "holuimBankKey")
        {
            //For All Items
            this.identity = "The Bank of Holuim Vault Key";
            this.weight = 0.01;
            this.size = 3;
            this.description = "A key that unlocks the door to the bank vault in Holuim.";
            this.intForDes = 10000;
            this.intDescription = "";

            //Define Utility
            this.utility = "material";

            this.doorKeyID = "holuimBankDoor";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 50); // at max, buy for 9.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "masterKey")
        {
            //For All Items
            this.identity = "Master Key";
            this.weight = 0.01;
            this.size = 3;
            this.description = "A key that unlocks any locked door.";
            this.intForDes = 10000;
            this.intDescription = "";

            //Define Utility
            this.utility = "material";

            this.doorKeyID = "master";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 50); // at max, buy for 9.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "masterKeyring")
        {
            //For All Items
            this.identity = "Master Keyring";
            this.weight = 0.01;
            this.size = 5;
            this.description = "A keyring that contains a master key.";
            this.intForDes = 2;
            this.intDescription = "What are the other keys for if the master key opens all locks?";

            //Define Utility
            this.utility = "material";

            this.doorKeyID = "master";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 50); // at max, buy for 11.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 50); // at max, sell for 11.
        }
        else if (this.type == "rawOlkrinFlesh")
        {
            //For All Items
            this.identity = "Raw Olkrin Flesh";
            this.weight = 35;
            this.size = 20;
            this.description = "The raw flesh of an Olkrin: it smells sour and stale, and with purple threads of tough fibers running though it it looks absolutely indigestible.";
            this.intForDes = 14;
            this.intDescription = "Olkrin flesh is toxic.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.getIntelligence() >= 14)
            {
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            }
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -6; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 197 - Math.floor(player.getCharisma() / 1); // at max, buy for 147.
            this.sellValue = 93 + Math.floor(player.getCharisma() / 1.5); // at max, sell for 123.
        }
        else if (this.type == "olkrinMeat")
        {
            //For All Items
            this.identity = "Olkrin Meat";
            this.weight = 33;
            this.size = 20;
            this.description = "The cooked meat of an Olkrin has a strange almost plastic-like smell and it has a meaty yet grossly bitter taste.";
            this.intForDes = 1;
            this.intDescription = "It's safe to eat, but just because you can doesn't mean that you should...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.getIntelligence() >= 14)
            {
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            }
            this.hunger = 33; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "potentialFoodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Olkrin Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 39 - Math.floor(player.getCharisma() / 3); // at max, buy for 24.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 3); // at max, sell for 22.
        }
        else if (this.type == "decipulaHead")
        {
            //For All Items
            this.identity = "Decipula Head";
            this.weight = 2.5;
            this.size = 16;
            this.description = "A severed head of the carnivorous decipula plant.";
            this.intForDes = 1;
            this.intDescription = "This can be used as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "nechromanticDust")
        {
            //For All Items
            this.identity = "Nechromantic Dust";
            this.weight = 0.5;
            this.size = 10;
            this.description = "A shadowy dust finer than silt, smooth like silk to the touch, that exudes the very essence of both life and death.";
            this.intForDes = 37;
            this.intDescription = "Nechromantic dust is a rare alchemy ingredient.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1;
            this.sellValue = 1;
        }
        else if (this.type == "morshPuff")
        {
            //For All Items
            this.identity = "Morsh Puff";
            this.weight = 0.2;
            this.size = 9;
            this.description = "A large poofy fuzzy ball of plant fiber.";
            this.intForDes = 20;
            this.intDescription = "Morsh plants use these to absorb pollen. It can be used to make an stretchy elastic-like fabric, but it should be washed first as it is sticky with pollen.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "reshidTooth")
        {
            //For All Items
            this.identity = "Reshid Tooth";
            this.weight = 0.25;
            this.size = 8;
            this.description = "A glistening, long, hard, sharp tooth from a reshid.";
            this.intForDes = 1;
            this.intDescription = "This trophy is a testimate to having slain a reshid...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "sutetchiLeg")
        {
            //For All Items
            if (player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Aldrek" || player.raceName == "Kel" || player.raceName == "Sylkeem")
            {
                this.identity = "Sutetchi Leg";
                this.weight = 5.4;
                this.size = 16;
                this.description = "The sharp pointed blade leg of a sutetchi.";
                this.intForDes = 2;
                this.intDescription = "Sutetchi use their legs to stab and slice at their prey.";
            }
            else
            {
                this.identity = "Jack Spider Leg";
                this.weight = 5.4;
                this.size = 16;
                this.description = "The sharp pointed blade leg of a jack spider.";
                this.intForDes = 2;
                this.intDescription = "Jack spiders use their legs to stab and slice at their prey.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "tilkTentacle")
        {
            //For All Items
            this.identity = "Tilk Tentacle";
            this.weight = 1.7;
            this.size = 10;
            this.description = "A toothed black tentacle from a tilk.";
            this.intForDes = 29;
            this.intDescription = "The tentacles of a tilk contain a strange fatty substance that can be used in advanced alchemic recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 12); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "lrgTilkTentacle")
        {
            //For All Items
            this.identity = "Large Tilk Tentacle";
            this.weight = 2.2;
            this.size = 14;
            this.description = "A large toothed black tentacle from a tilk.";
            this.intForDes = 29;
            this.intDescription = "The tentacles of a tilk contain a strange fatty substance that can be used in advanced achemic recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 8); // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "giantTilkTentacle")
        {
            //For All Items
            this.identity = "Giant Tilk Tentacle";
            this.weight = 3.7;
            this.size = 14;
            this.description = "A massive toothed black tentacle from a tilk.";
            this.intForDes = 29;
            this.intDescription = "The tentacles of a tilk contain a strange fatty substance that can be used in advanced achemic recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 37 - Math.floor(player.getCharisma() / 5); // at max, buy for 27.
            this.sellValue = 21 + Math.floor(player.getCharisma() / 8); // at max, sell for 27.
        }
        else if (this.type == "narthwarpMouth")
        {
            //For All Items
            this.identity = "Narthwarp Mouth";
            this.weight = 3;
            this.size = 9;
            this.description = "The razor-toothed external eating appendage of a narthwarp.";
            this.intForDes = 23;
            this.intDescription = "Narthwarps release a dangerous toxin through this appendage that is known to cause extreme weakness and fatigue.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 37 - Math.floor(player.getCharisma() / 3); // at max, buy for 22.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 5); // at max, sell for 22.
        }
        else if (this.type == "lrgNarthwarpMouth")
        {
            //For All Items
            this.identity = "Narthwarp Mouth";
            this.weight = 6;
            this.size = 16;
            this.description = "The razor-toothed external eating appendage of a large narthwarp.";
            this.intForDes = 23;
            this.intDescription = "Narthwarps release a dangerous toxin through this appendage that is known to cause extreme weakness and fatigue.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 42 - Math.floor(player.getCharisma() / 3); // at max, buy for 27.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 5); // at max, sell for 24.
        }
        else if (this.type == "fermentedNarthwarpMouth")
        {
            //For All Items
            this.identity = "Fermented Narthwarp Mouth";
            this.weight = 19;
            this.size = 19;
            this.description = "What was once the mouth of a narthwarp is now a swollen oozing mess.";
            this.intForDes = 23;
            this.intDescription = "Fermenting the toxins in narthwarp venom creates a new substance that can be used in some alchemy recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Narthwarp Mouth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 3); // at max, buy for 31.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 5); // at max, sell for 29.
        }
        else if (this.type == "olkrinHorn")
        {
            //For All Items
            this.identity = "Olkrin Horn";
            this.weight = 19;
            this.size = 19;
            this.description = "The horn of an Olkrin.";
            this.intForDes = 38;
            this.intDescription = "When in its powdered form it can be used in alchemy to produce or enhance certain effects in potions.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 480 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 380.
            this.sellValue = 250 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 350.
        }
        else if (this.type == "olkrinArm")
        {
            //For All Items
            this.identity = "Olkrin Arm";
            this.weight = 160;
            this.size = 40;
            this.description = "The Arm of an Olkrin.";
            this.intForDes = 1;
            this.intDescription = "This is a trophy that represents the spectacular achievement of having slain an Olkrin.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1360 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 960.
            this.sellValue = 550 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 950.
        }
        else if (this.type == "olkrinSkull")
        {
            //For All Items
            this.identity = "Olkrin Skull";
            this.weight = 100;
            this.size = 24;
            this.description = "The skull of an Olkrin.";
            this.intForDes = 1;
            this.intDescription = "This is a trophy that represents the spectacular achievement of having slain an Olkrin.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1860 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 1460.
            this.sellValue = 900 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 1300.
        }
        else if (this.type == "goliathOlkrinSkull")
        {
            //For All Items
            this.identity = "Goliath Olkrin Skull";
            this.weight = 140;
            this.size = 35;
            this.description = "The skull of a goliath sized Olkrin.";
            this.intForDes = 1;
            this.intDescription = "This was once part of an unimaginably powerful creature, and now it is yours!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9200 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 8800.
            this.sellValue = 6592 + Math.floor(player.getCharisma() / 0.025); // at max, sell for 8592.
        }
        else if (this.type == "korskBeetleStinkGland")
        {
            //For All Items
            this.identity = "Korsk Beetle Stink Gland";
            this.weight = 2.25;
            this.size = 9;
            this.description = "A slimey organ of the korsk beetle that exudes a terrible stench that lingers in your nostrils.";
            this.intForDes = 1;
            this.intDescription = "The stink glands are used by the male beetles to attract the females when it is time to mate.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 15); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "silterEggs")
        {
            //For All Items
            this.identity = "Silter Eggs";
            this.weight = 0.9;
            this.size = 8;
            this.description = "Fleshy membrain composed yellow orbs that each shelter a baby silter.";
            this.intForDes = 0;
            this.intDescription = "Since these eggs are already fertalized, you can lay them down to hatch.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "hatchSilter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "friedSilterEggs")
        {
            //For All Items
            this.identity = "Fried Silter Eggs";
            this.weight = 0.9;
            this.size = 8;
            this.description = "The popped and coagulated eggs of a silter.";
            this.intForDes = 3;
            this.intDescription = "These are not particularly appetizing aesthetically, but they taste alright.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Silter Eggs", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawLyagushkaFlesh")
        {
            //For All Items
            this.identity = "Raw Lyagushka Flesh";
            this.weight = 1.1;
            this.size = 10;
            this.description = "The raw flesh of a lyagushka.";
            this.intForDes = 0;
            this.intDescription = "It has a thick boggy odor and has a slimey malleableness to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -2; //restores will.


            //ability
            this.ability = "potentialFoodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "lyagushkaMeat")
        {
            //For All Items
            this.identity = "Lyagushka Meat";
            this.weight = 1;
            this.size = 10;
            this.description = "The cooked meat of a lyagushka.";
            this.intForDes = 0;
            this.intDescription = "It tastes sort of like toad meat but it has a peculiar boggy aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6.5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = -1; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Lyagushka Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "rawKorskBeetleFlesh")
        {
            //For All Items
            this.identity = "Raw Korsk Beetle Flesh";
            this.weight = 1;
            this.size = 10;
            this.description = "The raw flesh of a korsk beetle.";
            this.intForDes = 0;
            this.intDescription = "It has a peculiar distasteful stench to it... eating it would not be advisable.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = -1; //restores will.


            //ability
            this.ability = "potentialFoodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "korskBeetleMeat")
        {
            //For All Items
            this.identity = "Korsk Beetle Meat";
            this.weight = 1;
            this.size = 10;
            this.description = "The cooked meat of a korsk beetle.";
            this.intForDes = 0;
            this.intDescription = "It has a relatively bland flavour, but its aftertaste somewhat resembles a rotten egg fart...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = - 0.5; //recoops lost energy.
            this.replenish = -0.5; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Korsk Beetle Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawGribFlesh")
        {
            //For All Items
            this.identity = "Raw Grib Flesh";
            this.weight = 1;
            this.size = 10;
            this.description = "The raw flesh of a grib.";
            this.intForDes = 1;
            this.intDescription = "Raw grib meat is often infested with flesh mites.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = -1; //restores will.


            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
        }
        else if (this.type == "gribMeat")
        {
            //For All Items
            this.identity = "Grib Meat";
            this.weight = 1;
            this.size = 10;
            this.description = "The cooked meat of a grib.";
            this.intForDes = 2;
            this.intDescription = "Gribs are foul creatures and their meat is not much better.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = -1; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Grib Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 8); // at max, buy for 9.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 10); // at max, sell for 9.
        }
        else if (this.type == "gribPelt")
        {
            //For All Items
            this.identity = "Grib Pelt";
            this.weight = 2;
            this.size = 18;
            this.description = "The prickly brown fur of a grib.";
            this.intForDes = 6;
            this.intDescription = "Due to the strong odor that gribs release to mark their territory grib pelts are not commonly sought after.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "beholderStrands")
        {
            //For All Items
            this.identity = "Beholder Strands";
            this.weight = 0.4;
            this.size = 18;
            this.description = "The long purple metalic strand-like arms of a beholder.";
            this.intForDes = 25;
            this.intDescription = "Beholder strands can convert arcane energy into electricity.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 25); // at max, buy for 10.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, buy for 10.
        }
        else if (this.type == "vodkapaSpleen")
        {
            //For All Items
            this.identity = "Vodkapa Spleen";
            this.weight = 3;
            this.size = 18;
            this.description = "The spleen of a vodkapa.";
            this.intForDes = 5;
            this.intDescription = "Vodkapas have very effective immune systems thanks to having up to two large spleens; these can be used as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "fermentedVodkapaSpleen")
        {
            //For All Items
            this.identity = "Fermented Vodkapa Spleen";
            this.weight = 2.75;
            this.size = 18;
            this.description = "The fermented spleen of a vodkapa.";
            this.intForDes = 30;
            this.intDescription = "This is an important ingredient in producing a cure for internal warts.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 18;
            this.ingredients = [["Vodkapa Spleen", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 50); // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "rawVodkapaFlesh")
        {
            //For All Items
            this.identity = "Raw Vodkapa Flesh";
            this.weight = 40;
            this.size = 25;
            this.description = "The raw flesh of a vodkapa.";
            this.intForDes = 9;
            this.intDescription = "Eating this raw may infect you with throat ticks.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -19; //recoops lost energy.
            this.replenish = -7; //restores will.


            //ability
            this.ability = "throatTicks";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "vodkapaMeat")
        {
            //For All Items
            this.identity = "Vodkapa Meat";
            this.weight = 40;
            this.size = 25;
            this.description = "The pungent tasting meat of a vodkapa.";
            this.intForDes = 9;
            this.intDescription = "It leaves you with the taste of bile in your mouth...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 33; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 9; //warms player.
            this.heal = 0; //heals health.
            this.generation = -8; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Vodkapa Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "toadHide")
        {
            //For All Items
            this.identity = "Toad Hide";
            this.weight = 12;
            this.size = 28;
            this.description = "The thick leathery green hide of a Vardanian Swamp Toad.";
            this.intForDes = 0;
            this.intDescription = "It is rather putrid smelling and rough.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26; // at max, buy for 26.
            this.sellValue = 26; // at max, sell for 26.
        }
        else if (this.type == "rawTilkFlesh")
        {
            //For All Items
            this.identity = "Raw Tilk Flesh";
            this.weight = 6;
            this.size = 13;
            this.description = "The raw flesh of a tilk.";
            this.intForDes = 16;
            this.intDescription = "This meat while raw, though it smells and tastes foul, has both an energizing and warming property. However it will make you throw up.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.45; //recoops lost energy.
            this.replenish = -1; //restores will.


            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "tilkMeat")
        {
            //For All Items
            this.identity = "Tilk Meat";
            this.weight = 5;
            this.size = 13;
            this.description = "The cooked meat of a tilk.";
            this.intForDes = 0;
            this.intDescription = "This is absolutely disgusting, perhaps not even the bravest knight would try this rank meat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = -0.5; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = -2; //restores will.

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Tilk Flesh", 1]];

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawBalkurFlesh")
        {
            //For All Items
            this.identity = "Raw Balkur Flesh";
            this.weight = 2;
            this.size = 11;
            this.description = "The raw flesh of a balkur.";
            this.intForDes = 1;
            this.intDescription = "Balkur flesh tends to have mites infesting it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "fleshmites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "balkurMeat")
        {
            //For All Items
            this.identity = "Balkur Meat";
            this.weight = 1.55;
            this.size = 10;
            this.description = "The cooked meat of a balkur.";
            this.intForDes = 1;
            this.intDescription = "The meat is grissly and tough to eat, but for some people its flavour is worth it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            if (player.raceName == "Freynor")
            {
                this.hunger = 10; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 2; //warms player.
                this.heal = 0; //heals health.
                this.generation = -2; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "satiate";
            }
            else
            {
                this.hunger = 6; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 2; //warms player.
                this.heal = 0; //heals health.
                this.generation = -2; //recoops lost energy.
                this.replenish = 0; //restores will.

                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Raw Balkur Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 10); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "rawCloimidFlesh")
        {
            //For All Items
            this.identity = "Raw Cloimid Flesh";
            this.weight = 43;
            this.size = 15;
            this.description = "The raw underhalf of a cloimid.";
            this.intForDes = 17;
            this.intDescription = "Eating this raw is toxic. The toxin is neutralized when it is cooked; the meat is actually alright tasting.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 8; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "toxicityII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 10);; // at max, sell for 18.
        }
        else if (this.type == "cloimidMeat")
        {
            //For All Items
            this.identity = "Cloimid Meat";
            this.weight = 42;
            this.size = 15;
            this.description = "The steamed meat of a cloimid; It's tender, mildly sweet, and tastes of the sea.";
            this.intForDes = 30;
            this.intDescription = "When cooked the toxins that were in the raw flesh were neutralized and mostly evaporated.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 62; //satisfies hunger.
            this.thirst = 14; //quenches thirst.
            this.warmth = 29; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Raw Cloimid Flesh", 1], ["Bucket of Water", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 39; // at max, buy for 39.
            this.sellValue = 24 + Math.floor(player.getCharisma() / 3); // at max, sell for 39.
        }
        else if (this.type == "rawBoarFlesh")
        {
            //For All Items
            this.identity = "Raw Boar Flesh";
            this.weight = 16;
            this.size = 18;
            this.description = "The leg of a wild forest dwelling swine.";
            this.intForDes = 1;
            this.intDescription = "Eating this as it is is not safe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -20; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 25); // at max, buy for 18.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 15); // at max, sell for 18.
        }
        else if (this.type == "rawBoarChunks")
        {
            //For All Items
            this.identity = "Raw Cut Pork";
            this.weight = 16;
            this.size = 18;
            this.description = "The chopped flesh from the leg of a wild forest dwelling swine.";
            this.intForDes = 1;
            this.intDescription = "Eating this as it is is not safe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -15; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "gutWorms";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Raw Boar Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 25); // at max, buy for 19.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 15); // at max, sell for 19.
        }
        else if (this.type == "boarChunks")
        {
            //For All Items
            this.identity = "Cut Pork";
            this.weight = 16;
            this.size = 18;
            this.description = "Roasted pork cut into large chunks.";
            this.intForDes = 0;
            this.intDescription = "The flavor is very rich and fatty.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 30; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 15; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Raw Cut Pork", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 10); // at max, buy for 40.
            this.sellValue = 35 + Math.floor(player.getCharisma() / 10); // at max, sell for 40.
        }
        else if (this.type == "boarChunksSmall")
        {
            //For All Items
            this.identity = "Chopped Pork";
            this.weight = 3;
            this.size = 8;
            this.description = "Roasted pork cut into small chunks.";
            this.intForDes = 0;
            this.intDescription = "The flavor is very rich and fatty.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.06; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 2;
            this.intForCraft = 17;
            this.ingredients = [["Raw Chopped Pork", 2], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 25); // at max, buy for 11.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 50); // at max, sell for 11.
        }
        else if (this.type == "iemaPork")
        {
            //For All Items
            this.identity = "Pork with Iema Berry Sauce";
            this.weight = 3.1;
            this.size = 8;
            this.description = "Roasted chunks of pork served in a tart and sweet iema berry sauce.";
            this.intForDes = 0;
            this.intDescription = "The flavor is rich and fatty paired with tart and sweet.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12.5; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.07; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 2;
            this.intForCraft = 19;
            this.ingredients = [["Raw Chopped Pork", 2], ["Iema Berries", 3], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 50); // at max, buy for 15.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 50); // at max, sell for 15.
        }
        else if (this.type == "searedFalder")
        {
            //For All Items
            this.identity = "Seared Falder";
            this.weight = 1.15;
            this.size = 8;
            this.description = "A thick cut of red bellied falder seared with garlic and salt.";
            this.intForDes = 0;
            this.intDescription = "The fish has a strong flavor that is complimented by salt and garlic.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 3.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 2;
            this.intForCraft = 23;
            this.ingredients = [["Raw Red-Bellied Falder", 1], ["Garlic", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 50); // at max, sell for 13.
        }
        else if (this.type == "searedSalmon")
        {
            //For All Items
            this.identity = "Seared Salmon";
            this.weight = 1.25;
            this.size = 8;
            this.description = "A thick cut of salmon seared with garlic and salt.";
            this.intForDes = 0;
            this.intDescription = "The fish has a strong flavor that is complimented by the salt.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 0.05; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.055; //recoops lost energy.
            this.replenish = 0.05; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 3;
            this.intForCraft = 25;
            this.ingredients = [["Raw Salmon", 1], ["Garlic", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 50); // at max, buy for 20.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 50); // at max, sell for 20.
        }
        else if (this.type == "porkAndHalgom")
        {
            //For All Items
            this.identity = "Pork and Halgom";
            this.weight = 3.3;
            this.size = 8;
            this.description = "Small chunks of roasted pork cooked with halgom mushrooms, garlic and salt.";
            this.intForDes = 0;
            this.intDescription = "The flavor is hearty, rich, and well seasoned.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 13; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.065; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 3;
            this.intForCraft = 20;
            this.ingredients = [["Raw Chopped Pork", 3], ["Halgom Mushrooms", 2], ["Garlic", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 50); // at max, buy for 15.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 25); // at max, sell for 15.
        }
        else if (this.type == "garlicTialoPork")
        {
            //For All Items
            this.identity = "Garlic Tialo Pork";
            this.weight = 3.1;
            this.size = 8;
            this.description = "Small chunks of roasted pork cooked with tialo fronds, garlic and salt.";
            this.intForDes = 0;
            this.intDescription = "The flavor is wholesome, rich, and well seasoned.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 3.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.06; //recoops lost energy.
            this.replenish = 0.05; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 3;
            this.intForCraft = 20;
            this.ingredients = [["Raw Chopped Pork", 3], ["Tialo Frond", 6], ["Garlic", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 50); // at max, buy for 14.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 25); // at max, sell for 13.
        }
        else if (this.type == "rawBoarChunksSmall")
        {
            //For All Items
            this.identity = "Raw Chopped Pork";
            this.weight = 3.2;
            this.size = 8;
            this.description = "The well chopped flesh from the leg of a wild forest dwelling swine.";
            this.intForDes = 1;
            this.intDescription = "Eating this as it is is not safe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.8; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "gutWorms";

            //Crafting
            this.yield = 5;
            this.intForCraft = 9;
            this.ingredients = [["Raw Cut Pork", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "boarMeat")
        {
            //For All Items
            this.identity = "Cured Leg of Swine";
            this.weight = 15;
            this.size = 18;
            this.description = "The salt cured leg of a wild forest dwelling swine.";
            this.intForDes = 1;
            this.intDescription = "Eating this whole would be tremendously difficult and absurdly salty, so don't.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 120; //satisfies hunger.
            this.thirst = -20; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -18; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Raw Boar Flesh", 1], ["Salt", 10]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100 - Math.floor(player.getCharisma() / 10); // at max, buy for 95.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 10); // at max, sell for 95.
        }
        else if (this.type == "curedPork")
        {
            //For All Items
            this.identity = "Cured Pork";
            this.weight = 0.67;
            this.size = 18;
            this.description = "A salty hunk of cured pork.";
            this.intForDes = 1;
            this.intDescription = "This is particularly salty but it tastes really good.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = -1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.35; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 20;
            this.intForCraft = 4;
            this.ingredients = [["Cured Leg of Swine", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "rawPorkbelly")
        {
            //For All Items
            this.identity = "Raw Porkbelly";
            this.weight = 6.2;
            this.size = 16;
            this.description = "The fatty underside cut of flesh from a swine.";
            this.intForDes = 1;
            this.intDescription = "Eating this raw is not safe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 25); // at max, buy for 20.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 50); // at max, sell for 20.
        }
        else if (this.type == "porkbelly")
        {
            //For All Items
            this.identity = "Porkbelly";
            this.weight = 6;
            this.size = 16;
            this.description = "The fatty juicy roasted underbelly of a swine";
            this.intForDes = 1;
            this.intDescription = "Porkbelly is widely held to be the most exquisite cut of swine meat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 33; //satisfies hunger.
            this.thirst = -3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Raw Porkbelly", 1], ["Salt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 39 - Math.floor(player.getCharisma() / 15); // at max, buy for 36.
            this.sellValue = 34 + Math.floor(player.getCharisma() / 25); // at max, sell for 36.
        }
        else if (this.type == "rawBacon")
        {
            //For All Items
            this.identity = "Raw Bacon Slices";
            this.weight = 0.62;
            this.size = 8;
            this.description = "Sliced cured and smoked porkbelly.";
            this.intForDes = 1;
            this.intDescription = "Eating this raw is not safe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = -0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "gutWorms";

            //Crafting
            this.yield = 10;
            this.intForCraft = 17;
            this.ingredients = [["Raw Porkbelly", 1], ["Wood", 1], ["Salt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "bacon")
        {
            //For All Items
            this.identity = "Bacon";
            this.weight = 0.59;
            this.size = 8;
            this.description = "Sliced cured and smoked porkbelly cooked to sizzling perfection.";
            this.intForDes = 1;
            this.intDescription = "Bacon is flavourful and sating.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = -0.3; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Raw Bacon Slices", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "rawSealFlesh")
        {
            //For All Items
            this.identity = "Raw Seal Flesh";
            this.weight = 4;
            this.size = 11;
            this.description = "The raw flesh of a seal.";
            this.intForDes = 1;
            this.intDescription = "Though this is safe to eat raw, it would not be a pleasant experience to do so.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 5.
        }
        else if (this.type == "sealMeat")
        {
            //For All Items
            this.identity = "Seal Meat";
            this.weight = 4;
            this.size = 11;
            this.description = "The cooked meat of a seal.";
            this.intForDes = 0;
            this.intDescription = "Seal meat is fatty, hearty, and filling.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 16; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Raw Seal Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 8); // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "rawWalrusFlesh")
        {
            //For All Items
            this.identity = "Raw Walrus Flesh";
            this.weight = 8;
            this.size = 12;
            this.description = "The raw flesh of a walrus.";
            this.intForDes = 1;
            this.intDescription = "Eating this raw would be tough...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 15); // at max, buy for 8.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 10); // at max, sell for 8.
        }
        else if (this.type == "walrusMeat")
        {
            //For All Items
            this.identity = "Walrus Meat";
            this.weight = 8;
            this.size = 12;
            this.description = "The cooked meat of a walrus.";
            this.intForDes = 3;
            this.intDescription = "Walrus meat is filling and hearty, and even more it can provide you with the energy you need to endure in cold climates.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 27; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 10; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Raw Walrus Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 25); // at max, buy for 22.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 6); // at max, sell for 22.
        }
        else if (this.type == "rawTaebjuurFlesh")
        {
            //For All Items
            this.identity = "Raw Taebjuur Flesh";
            this.weight = 7;
            this.size = 13;
            this.description = "The raw flesh of a Taebjuur.";
            this.intForDes = 0;
            this.intDescription = "Eating this raw would cause you to ingest microbial sea parasites that would irritate your innards.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 10); // at max, sell for 7.
        }
        else if (this.type == "taebjuurMeat")
        {
            //For All Items
            this.identity = "Taebjuur Meat";
            this.weight = 7;
            this.size = 13;
            this.description = "The cooked meat of a Taebjuur.";
            this.intForDes = 0;
            this.intDescription = "It tastes bland with a slight fishy flavour and a firm texture.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 22; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 9; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.024; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiation";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19; // at max, buy for 19.
            this.sellValue = 17 + Math.floor(player.getCharisma() / 25); // at max, sell for 19.
        }
        else if (this.type == "apple")
        {
            //For All Items
            this.identity = "Apple";
            this.weight = 0.7;
            this.size = 6;
            this.description = "Apples are sweet and crisp, with a nice balance of sour.";
            this.intForDes = 3;
            this.intDescription = "Apples can keep the doctor away, but they can also be made into hard cider.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "ogoFruit")
        {
            //For All Items
            this.identity = "Ogo";
            this.weight = 1;
            this.size = 7;
            this.description = "The ogo fruit is sweet, tender, and smooth.";
            this.intForDes = 19;
            this.intDescription = "Ogo has been known to make people get a bit hyper!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1.5; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 37 - Math.floor(player.getCharisma() / 2); // at max, buy for 12.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
        }
        else if (this.type == "chonaFruit")
        {
            //For All Items
            this.identity = "Chona";
            this.weight = 0.4;
            this.size = 5;
            this.description = "A smooth pink fruit that grows in clusters in small temperate trees.";
            this.intForDes = 0;
            this.intDescription = "The fruits are sweet and have a particularly aromatic and juicy flavor.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.75; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "polyapaFruit")
        {
            //For All Items
            this.identity = "Polyapa";
            this.weight = 0.43;
            this.size = 7;
            this.description = "A greenish yellow fruit that grows on small temperate trees.";
            this.intForDes = 0;
            this.intDescription = "It has a crisp yet tender texture and an aromatic sweetness that is just delightful. It is pronounced 'PO-lyah-pah'";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.025; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 25); // at max, sell for 1.
        }
        else if (this.type == "karmFruit")
        {
            //For All Items
            this.identity = "Karm";
            this.weight = 0.5;
            this.size = 7;
            this.description = "A tiny sweet fruit with a sour aftertaste.";
            this.intForDes = 3;
            this.intDescription = "It grows on a plant that is found exclusively in certain temperate grasslands.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.75; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.01; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "kwomFruit")
        {
            //For All Items
            this.identity = "Kwom";
            this.weight = 0.5;
            this.size = 7;
            this.description = "This fruit is smooth and firm but tender to the bite.";
            this.intForDes = 0;
            this.intDescription = "It is extremely sour, so much so that no one can truly develop a tolerance to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -11; //recoops lost energy.
            this.replenish = -6; //restores will.
            this.cooling = 1; //cools player.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "clobeLeaf")
        {
            //For All Items
            this.identity = "Clobe Leaf";
            this.weight = 0.9;
            this.size = 8;
            this.description = "A thick and rounded leaf full of a sticky viscous green sap.";
            this.intForDes = 5;
            this.intDescription = "This can be used as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "boiledFrijols")
        {
            //For All Items
            this.identity = "Boiled Frijols";
            this.weight = 45;
            this.size = 12;
            this.description = "A kellish style of pot filled with steaming boiled frijols.";
            this.intForDes = 3;
            this.intDescription = "Frijols are a staple food in many Southern Kellish diets.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 48; //satisfies hunger.
            this.thirst = 18; //quenches thirst.
            this.warmth = 15; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Kellish Clay Pot of Water", 1], ["Frijols", 38]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 52 - Math.floor(player.getCharisma() / 10); // at max, buy for 47.
            this.sellValue = 41 + Math.floor(player.getCharisma() / 8); // at max, sell for 47.
        }
        else if (this.type == "aktaltlSoup")
        {
            //For All Items
            this.identity = "Aktaltl Fish Soup";
            this.weight = 45;
            this.size = 12;
            this.description = "A kellish style of pot filled with a soup made from mashed roasted Aktaltl and fish.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 12;
                this.intDescription = "This sort of soup is a specialty of the Kellish Karib tribe.";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "This soup is a bit spicy but it is tolerable.";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 59; //satisfies hunger.
            this.thirst = 22; //quenches thirst.
            this.warmth = 18; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.65; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "sensational";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Kellish Clay Pot of Water", 1], ["Apotl Pepper", 1], ["Roasted Aktaltl Root", 10], ["Riulpo", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 70 - Math.floor(player.getCharisma() / 5); // at max, buy for 60.
            this.sellValue = 60; // at max, sell for 60.
        }
        else if (this.type == "latuku")
        {
            //For All Items
            this.identity = "Latuku";
            this.weight = 45;
            this.size = 12;
            this.description = "A Kellish style of pot filled with a Kellish stew unique to the alzkwaya tribe.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 18;
                this.intDescription = "It is made with apotl pepper, mofu, frijols, aktaltl root, and kwom juice";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "Just by the smell you can tell this will be far too spicy for you to eat.";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 66; //satisfies hunger.
            this.thirst = 15; //quenches thirst.
            this.warmth = 20; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "sensational";
            }
            else
            {
                this.heal = -3; //heals health.
                this.generation = -9; //recoops lost energy.
                this.replenish = -5; //restores will.
                this.ability = "foodPoisoning";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 18;
            this.ingredients = [["Boiled Frijols", 1], ["Mofu Meat", 1], ["Apotl Pepper", 5], ["Roasted Aktaltl Root", 3], ["Kwom", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 76 - Math.floor(player.getCharisma() / 8); // at max, buy for 70.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 5); // at max, sell for 70.
        }
        else if (this.type == "eisyncryneFruit")
        {
            //For All Items
            this.identity = "Eisyncryne";
            this.weight = 2.6;
            this.size = 10;
            this.description = "The hard shelled fruit of an eisyncryne plant.";
            this.intForDes = 9;
            this.intDescription = "Inside the shell is a thick, sweet, deep-bodied, flesh that is riddled with little pinkish-white seeds.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["splitEisyncryneFruit", 2]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16; // at max, buy for 16.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 5); // at max, sell for 16.
        }
        else if (this.type == "muon")
        {
            //For All Items
            this.identity = "Muon";
            this.weight = 9;
            this.size = 12;
            this.description = "A large spiny, hairy, redish brown shelled fruit.";
            this.intForDes = 1;
            this.intDescription = "The shell is too thick to break though with your hands, you may need to use a hammer to open this...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16; // at max, buy for 14.
            this.sellValue = 16; // at max, sell for 14.
        }
        else if (this.type == "muonShell")
        {
            //For All Items
            this.identity = "Muon Shell";
            this.weight = 3;
            this.size = 12;
            this.description = "The large spiny, hairy, reddish brown shell of a muon fruit.";
            this.intForDes = 0;
            this.intDescription = "All of the edible part of this plant has been removed, but the inside of the shell smells sweet and creamy like muon fruit still. Some people put these in their homes to scent the air.";
            this.smallText = "tiny";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "muonFruit")
        {
            //For All Items
            this.identity = "Muon Fruit";
            this.weight = 6;
            this.size = 8;
            this.description = "A large orb shaped fruit that is like a giant rambutan, but with a flavour that resembles a cross between an extra creamy coconut and a lychee.";
            this.intForDes = 0;
            this.intDescription = "It tastes tropical, sweet, and creamy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 7; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.25; //restores will.
            this.cooling = 7; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            if (player.raceName == "Zetian")
            {
                this.ingredients = [["Muon", 1], ["zetianWarPick", 1]];
                this.biproducts = [[new Item("zetianWarPick", false), 1], [new Item("muonShell", false), 1]];
            }
            else
            {
                this.ingredients = [["Muon", 1], ["Hammer", 1]];
                this.biproducts = [[new Item("hammer", false), 1], [new Item("muonShell", false), 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "sonja")
        {
            //For All Items
            this.identity = "Sonja";
            this.weight = 4;
            this.size = 12;
            this.description = "A large tree fruit that is covered in golden sap filled bubbles.";
            this.intForDes = 9;
            this.intDescription = "The fruit's bubbles are meant to prevent serious bruising when the fruit falls from the tall sonja tree it grows on.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["sonjaFruit", 1], ["sonjaBubble", 32]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 15; // at max, sell for 15.
        }
        else if (this.type == "sonjaSlice")
        {
            //For All Items
            this.identity = "Sonja Slice";
            this.weight = 0.62;
            this.size = 8;
            this.description = "A tender and glistening golden-yellow slice of sonja fruit.";
            this.intForDes = 0;
            this.intDescription = "It has a sweet, smooth, tropical flavour with some notes of honey, ripe mango, and honeysuckle.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.6; //satisfies hunger.
            this.thirst = 0.8; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.1; //restores will.
            this.cooling = 0.25; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "spicedSonjaSlices")
        {
            //For All Items
            this.identity = "Spiced Sonja Slices";
            this.weight = 1.86;
            this.size = 8;
            this.description = "Three tender, glistening golden-yellow slices of sonja fruit seasoned with zaf spice.";
            this.smallText = true;

            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 0;
                this.intDescription = "It has a sweet, smooth, tropical flavour with some notes of honey, ripe mango, and honeysuckle and it has a prickly insecty spiciness.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 14; //satisfies hunger.
                this.thirst = 2.5; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.35; //recoops lost energy.
                this.replenish = 0.35; //restores will.

                //ability
                this.ability = "none";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "The otherwise satisfying flavour of the tropical fruit is ruined by the prickly insecty spicyness that burns your mouth.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 6; //satisfies hunger.
                this.thirst = 0.5; //quenches thirst.
                this.warmth = 3; //warms player.
                this.heal = -0.6; //heals health.
                this.generation = -1.5; //recoops lost energy.
                this.replenish = -1.2; //restores will.

                //ability
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Sonja Slice", 3], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 15; // at max, sell for 15.
        }
        else if (this.type == "sonjaBubble")
        {
            //For All Items
            this.identity = "Sonja Bubble";
            this.weight = 0.01;
            this.size = 2;
            this.description = "A golden sap filled bubble from a sonja.";
            this.intForDes = 0;
            this.intDescription = "The sap is sweet, has the conistency of a syrup, and has a pleasant flavour that lies somwhere between tropical fruit and honey.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.2; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.01; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 1.
        }
        else if (this.type == "jarOfSonjaSap")
        {
            //For All Items
            this.identity = "Jar of Sonja Sap";
            this.weight = 1.5;
            this.size = 7;
            this.description = "A glass jar full of the sweet syrup of the sonja fruit.";
            this.intForDes = 0;
            this.intDescription = "This can be used to make cephrian desserts, or drinks, or it can simply be consumed as it is, though that would be overwhelmingly sweet.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 36; //satisfies hunger.
            this.thirst = 13; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -1; //heals health.
            this.generation = -12; //recoops lost energy.
            this.replenish = -4; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Sonja Bubble", 29], ["Glass Jar", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 15); // at max, buy for 13.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 25); // at max, sell for 13.
        }
        else if (this.type == "jarOfGlassworm")
        {
            //For All Items
            this.identity = "Trapped Glassworm";
            this.weight = 2.5;
            this.size = 7;
            this.description = "A glass jar that holds a glassworm.";
            this.intForDes = 0;
            this.intDescription = "A glass worm's bite can turn almost any organic substance into glass.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "glassworm";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1800 - Math.floor(player.getCharisma() / 1); // at max, buy for 1750.
            this.sellValue = 1700 + Math.floor(player.getCharisma() / 1); // at max, sell for 1750.
        }
        else if (this.type == "sonjaFruit")
        {
            //For All Items
            this.identity = "Plucked Sonja";
            this.weight = 3.7;
            this.size = 11;
            this.description = "A large, hard shelled, tree fruit that has green marks all over it from where its sap filled bubbels have been plucked off.";
            this.intForDes = 1;
            this.intDescription = "The fruit must be sliced before it can be eaten because it has a very thick shell.";

            //Define Utility
            if (player.getIntelligence() >= 1)
            {
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["sonjaSlice", 6]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1.5; //recoops lost energy.
                this.replenish = 0; //restores will.
            }
            else
            {
                //Define Utility
                this.utility = "material";
            }

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13; // at max, buy for 13.
            this.sellValue = 13; // at max, sell for 13.
        }
        else if (this.type == "sonjaPuree")
        {
            //For All Items
            this.identity = "Sonja Puree";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with pureed sonja fruit.";
            this.intForDes = 0;
            this.intDescription = "It is a somewhat thick liquid with a sweet, smooth, tropical flavour.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.2; //restores will.
            this.cooling = 2; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 1], ["Sonja Slice", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "spicedSonjaPuree")
        {
            //For All Items
            this.identity = "Spiced Sonja Puree";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with pureed sonja fruit and topped with a spicy red mouth-numbing powder.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 0;
                this.intDescription = "The spiciness compliments the sweetness giving it a rich, bold, and well-rounded tropical flavour.";
                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 9; //satisfies hunger.
                this.thirst = 5; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.3; //recoops lost energy.
                this.replenish = 0.3; //restores will.
                this.cooling = 1; //cools player.

                //ability
                this.ability = "quench";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "The insect-like spiciness is uncomfortable and completely ruins its otherwise good sweet tropical flavour.";
                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 7; //satisfies hunger.
                this.thirst = 3.5; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = -0.65; //heals health.
                this.generation = -0.25; //recoops lost energy.
                this.replenish = -0.15; //restores will.

                //ability
                this.ability = "none";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];


            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Sonja Puree", 1], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "bovodo")
        {
            //For All Items
            this.identity = "Wheel of Bovodo Cheese";
            this.weight = 6;
            this.size = 13;
            this.description = "A thick wheel of cheese made from bovine milk.";
            this.intForDes = 1;
            this.intDescription = "Bovodo cheese is meant to be eaten alongside main coarses, or eaten paired with fruit or with alcohol.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 50; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 43;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Bovine Milk", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 25); // at max, buy for 28.
            this.sellValue = 26 + Math.floor(player.getCharisma() / 25); // at max, sell for 28.
        }
        else if (this.type == "bovodoWedge")
        {
            //For All Items
            this.identity = "Wedge of Bovodo Cheese";
            this.weight = 0.75;
            this.size = 5;
            this.description = "A wedge of cheese made from bovine milk.";
            this.intForDes = 1;
            this.intDescription = "Bovodo cheese is meant to be eaten alongside main coarses, or eaten paired with fruit or with alcohol.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 8;
            this.intForCraft = 0;
            this.ingredients = [["Wheel of Bovodo Cheese", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
        }
        else if (this.type == "vardanianPieDough")
        {
            //For All Items
            this.identity = "Vardanian Pie Dough";
            this.weight = 0.25;
            this.size = 6;
            this.description = "A dough made from wheat flour, bovine butter, and borsht sugar.";
            this.intForDes = 1;
            this.intDescription = "It is used to make pastries such as... pies.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Wheat Flour", 4], ["Bovine Butter", 1], ["Borsht", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "uncookedChyoulBerryPie")
        {
            //For All Items
            this.identity = "Uncooked Chyoul Berry Pie";
            this.weight = 4.65;
            this.size = 6;
            this.description = "A ready-to-bake pie filled with chyoul berries mashed with borsht sugar.";
            this.intForDes = 1;
            this.intDescription = "Just cook it and you'll have yourself a pie!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Vardanian Pie Dough", 2], ["Bovine Butter", 1], ["Borsht", 1], ["Chyoul Berries", 10]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 50); // at max, buy for 54.
            this.sellValue = 52 + Math.floor(player.getCharisma() / 25); // at max, sell for 54.
        }
        else if (this.type == "chyoulBerryPie")
        {
            //For All Items
            this.identity = "Chyoul Berry Pie";
            this.weight = 4.5;
            this.size = 6;
            this.description = "An exquisite chyoul berry pie.";
            this.intForDes = 0;
            this.intDescription = "It has a thickly sweet throat coating flavour, it has a buttery crispness to its texture, and it makes your lips purple.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 40; //satisfies hunger.
            this.thirst = 14; //quenches thirst.
            this.warmth = 9; //warms player.
            this.heal = 0; //heals health.
            this.generation = 2; //recoops lost energy.
            this.replenish = 2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Uncooked Chyoul Berry Pie", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 60 - Math.floor(player.getCharisma() / 50); // at max, buy for 59.
            this.sellValue = 55 + Math.floor(player.getCharisma() / 12); // at max, sell for 59.
        }
        else if (this.type == "chyoulBerryPieSlice")
        {
            //For All Items
            this.identity = "Slice of Chyoul Berry Pie";
            this.weight = 1.125;
            this.size = 9;
            this.description = "A slice of exquisite chyoul berry pie.";
            this.intForDes = 0;
            this.intDescription = "It has a thickly sweet throat coating flavour, it has a buttery crispness to its texture, and it makes your lips purple.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = 0.5; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.ingredients = [["Chyoul Berry Pie", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 50); // at max, buy for 14.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 25); // at max, sell for 14.
        }
        else if (this.type == "bovineButter")
        {
            //For All Items
            this.identity = "Bovine Butter";
            this.weight = 0.1;
            this.size = 4;
            this.description = "A watery emulsification of fat, milk solid, and water.";
            this.intForDes = 1;
            this.intDescription = "Bovine butter is mostly used to make pastries and desserts, but is occasionally used in other contexts.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 32;
            this.intForCraft = 22;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Bovine Milk", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "smokedBovodo")
        {
            //For All Items
            this.identity = "Wheel of Smoked Bovodo Cheese";
            this.weight = 6;
            this.size = 13;
            this.description = "A thick wheel of smoked cheese made from bovine milk.";
            this.intForDes = 1;
            this.intDescription = "Smoked bovodo cheese is meant to be eaten alongside main coarses, or eaten paired with fruit or with alcohol.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 69; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 47;
            this.ingredients = [["Wheel of Bovodo Cheese", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 15); // at max, buy for 47.
            this.sellValue = 45 + Math.floor(player.getCharisma() / 25); // at max, sell for 47.
        }
        else if (this.type == "smokedBovodoWedge")
        {
            //For All Items
            this.identity = "Wedge of Smoked Bovodo Cheese";
            this.weight = 0.75;
            this.size = 5;
            this.description = "A wedge of smoked cheese made from bovine milk.";
            this.intForDes = 1;
            this.intDescription = "Smoked bovodo cheese is meant to be eaten alongside main coarses, or eaten paired with fruit or with alcohol.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 11; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 8;
            this.intForCraft = 0;
            this.ingredients = [["Wheel of Smoked Bovodo Cheese", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 50); // at max, buy for 11.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 50); // at max, sell for 11.
        }
        else if (this.type == "apotlPepper")
        {
            //For All Items
            this.identity = "Apotl Pepper";
            this.weight = 0.25;
            this.size = 6;
            this.description = "A long red chili pepper that is notably spicy.";
            this.intForDes = 1;
            this.intDescription = "It is used as a flavoring in southern kellish cuisines.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "maizeHusk")
        {
            //For All Items
            this.identity = "Maize Husk";
            this.weight = 0.05;
            this.size = 4;
            this.description = "The husk from a mazorca of maize.";
            this.intForDes = 12;
            this.intDescription = "Maize husks can be used to wrap tamales.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mazorca")
        {
            //For All Items
            this.identity = "Mazorca Of Maize";
            this.weight = 0.75;
            this.size = 6;
            this.description = "Ripe yellow maize inside of a green fibrous husk that has already started peeling away.";
            this.intForDes = 1;
            this.intDescription = "The maize must be seperated from its husk in order to be eaten or processed.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["maize", 1], ["maizeHusk", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "maize")
        {
            //For All Items
            this.identity = "Maize";
            this.weight = 0.7;
            this.size = 6;
            this.description = "A ripe mazorca of maize without its husk.";
            this.intForDes = 1;
            this.intDescription = "This can be either roasted and eaten or ground into flour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.75; //satisfies hunger.
            this.thirst = 0.05; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "maizeFlour")
        {
            //For All Items
            this.identity = "Maize Flour";
            this.weight = 0.3;
            this.size = 7;
            this.description = "A gritty yellowish flour ground from dried maize kernals.";
            this.intForDes = 3;
            this.intDescription = "This is mixed with water to make maize dough.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 1;
            this.ingredients = [["Maize", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "masa")
        {
            //For All Items
            this.identity = "Maize Dough";
            this.weight = 0.3;
            this.size = 7;
            this.description = "A dough made from maize flour and water.";
            this.intForDes = 15;
            this.intDescription = "This dough can be used to make tamales, a specialty of the Kellish Alzkwaya tribe.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 8;
            this.intForCraft = 3;
            this.ingredients = [["Maize Flour", 32], ["Kellish Clay Pot of Water", 1]];
            this.biproducts = [[new Item("kellishClayPot", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "tamal1")
        {
            //For All Items
            this.identity = "Tamal (1)";
            this.weight = 0.2;
            this.size = 5;
            this.description = "A mostly eaten tamal.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 3;
                this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "Tamales are intensely spicy and just barely bearable.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0; //restores will.
            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.heal = -1; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = -2; //restores will.
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "tamal2")
        {
            //For All Items
            this.identity = "Tamal (2)";
            this.weight = 0.4;
            this.size = 5;
            this.description = "A partially eaten tamal.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 3;
                this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "Tamales are intensely spicy and just barely bearable.";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["tamal1", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0; //restores will.
            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.heal = -1; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = -2; //restores will.
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "tamal")
        {
            //For All Items
            this.identity = "Tamal";
            this.weight = 0.6;
            this.size = 5;
            this.description = "Steamed maize dough wrapped around a rich variety of ingredients and held together by being rolled up with a maize husk.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 3;
                this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "Tamales are intensely spicy and just barely bearable.";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["tamal2", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0; //restores will.
            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.heal = -1; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = -2; //restores will.
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 10.
            this.sellValue = 7; // at max, sell for 10.
        }
        else if (this.type == "wrappedTamal")
        {
            //For All Items
            this.identity = "Wrapped Tamal";
            this.weight = 0.65;
            this.size = 5;
            this.description = "Steamed maize dough wrapped around a rich variety of ingredients and held together by being rolled up with a maize husk.";
            this.intForDes = 3;
            this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["tamal", 1], ["maizeHusk", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 18;
            this.intForCraft = 8;
            this.ingredients = [["Uncooked Tamal", 18], ["Kellish Clay Pot of Water", 1]];
            this.biproducts = [[new Item("kellishClayPot", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "mofuTamal1")
        {
            //For All Items
            this.identity = "Mofu Tamal (1)";
            this.weight = 0.2;
            this.size = 5;
            this.description = "A mostly eaten mofu tamal.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 3;
                this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "Tamales are intensely spicy and just barely bearable.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.
            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.heal = -1; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = -2; //restores will.
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mofuTamal2")
        {
            //For All Items
            this.identity = "Mofu Tamal (2)";
            this.weight = 0.4;
            this.size = 5;
            this.description = "A partially eaten mofu tamal.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 3;
                this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "Tamales are intensely spicy and just barely bearable.";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["mofuTamal1", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.
            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.heal = -1; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = -2; //restores will.
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mofuTamal")
        {
            //For All Items
            this.identity = "Mofu Tamal";
            this.weight = 0.6;
            this.size = 5;
            this.description = "Steamed maize dough wrapped around a rich variety of ingredients and held together by being rolled up with a maize husk.";
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 3;
                this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "Tamales are intensely spicy and just barely bearable.";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["mofuTamal2", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.
            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.heal = -1; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = -2; //restores will.
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "wrappedMofuTamal")
        {
            //For All Items
            this.identity = "Wrapped Mofu Tamal";
            this.weight = 0.65;
            this.size = 5;
            this.description = "Steamed maize dough wrapped around a rich variety of ingredients and held together by being rolled up with a maize husk.";
            this.intForDes = 3;
            this.intDescription = "Tamales are a food to eat on the go; they are particularly portable.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["mofuTamal", 1], ["maizeHusk", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 20;
            this.intForCraft = 8;
            this.ingredients = [["Uncooked Mofu Tamal", 20], ["Kellish Clay Pot of Water", 1]];
            this.biproducts = [[new Item("kellishClayPot", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 10.
            this.sellValue = 12; // at max, sell for 10.
        }
        else if (this.type == "rawTamal")
        {
            //For All Items
            this.identity = "Uncooked Tamal";
            this.weight = 0.6;
            this.size = 5;
            this.description = "Maize dough wrapped around a rich variety of ingredients and held together by being rolled up with a maize husk.";
            this.intForDes = 13;
            this.intDescription = "Making tamales is an elaborate process and not complete until they are steamed.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 18;
            this.intForCraft = 15;
            this.ingredients = [["Maize Husk", 18], ["Boiled Aktaltl Frond", 2], ["Maize Dough", 3], ["Apotl Pepper", 3], ["Boiled Frijols", 1], ["Roasted Aktaltl Root", 2]];
            this.biproducts = [[new Item("kellishClayPot", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "rawMofuTamal")
        {
            //For All Items
            this.identity = "Uncooked Mofu Tamal";
            this.weight = 0.6;
            this.size = 5;
            this.description = "Maize dough wrapped around a rich variety of ingredients and held together by being rolled up with a maize husk.";
            this.intForDes = 13;
            this.intDescription = "Making mofu tamales is an elaborate process and not complete until they are steamed.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 20;
            this.intForCraft = 16;
            this.ingredients = [["Maize Husk", 20], ["Maize Dough", 3], ["Apotl Pepper", 3], ["Mofu Meat", 1], ["Boiled Frijols", 1], ["Roasted Aktaltl Root", 2]];
            this.biproducts = [[new Item("kellishClayPot", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "roastedMaize")
        {
            //For All Items
            this.identity = "Roasted Maize";
            this.weight = 0.7;
            this.size = 6;
            this.description = "A roasted mazorca of maize.";
            this.intForDes = 1;
            this.intDescription = "The juicy golden kernals are sweet, juicy, and delectable.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.5; //satisfies hunger.
            this.thirst = 1.2; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Maize", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "frijols")
        {
            //For All Items
            this.identity = "Frijols";
            this.weight = 0.35;
            this.size = 7;
            this.description = "The dry black legumes from a frijol plant.";
            this.intForDes = 2;
            this.intDescription = "These can be boiled for an extended period of time to make them soft enough to eat.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawEtyrFlesh")
        {
            //For All Items
            this.identity = "Raw Etyr Flesh";
            this.weight = 1;
            this.size = 6;
            this.description = "The raw flesh from an Etyr.";
            this.intForDes = 3;
            this.intDescription = "Rare, with extra gut worms!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawArdilFlesh")
        {
            //For All Items
            this.identity = "Raw Ardil Flesh";
            this.weight = 0.35;
            this.size = 4;
            this.description = "The raw flesh from an Ardil.";
            this.intForDes = 4;
            this.intDescription = "Just a little bit infested with gut worms...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "neevFlesh")
        {
            //For All Items
            this.identity = "Neev Flesh";
            this.weight = 1;
            this.size = 6;
            this.description = "A pure black flesh gooey with sticky tar-like black blood.";
            this.intForDes = 0;

            if (player.getIntelligence() < 20)
            {
                this.intDescription = "This does not look like something anyone would want to ingest.";
            }
            else
            {
                this.intDescription = "This can be drained for the blood which can be used as a base for some powerful alchemy recipes.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -10; //satisfies hunger.
            this.thirst = -10; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -5; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -25; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 105 - Math.floor(player.getCharisma() / 1.5); // at max, buy for 72.
            this.sellValue = 42 + Math.floor(player.getCharisma() / 2); // at max, sell for 67.
        }
        else if (this.type == "rawLeafCutterAnterFlesh")
        {
            //For All Items
            this.identity = "Leaf Cutter Anter Innards";
            this.weight = 2;
            this.size = 9;
            this.description = "The soft innards of a leaf cutter anter held together by thick tendons.";
            this.intForDes = 0;
            if (player.getIntelligence() >= 7)
            {
                this.intDescription = "This has a terrible nose tingling stench. This type of anter feeds on a special type of fungus that it cultivates which gives it some resistance to magics.";
                this.smallText = true;
            }
            else
            {
                this.intDescription = "This smells terrible, and its stench makes your nose tingle.";
                this.smallText = false;
            }


            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0.75; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -5; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = -25; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "leafCutterAnterMeat")
        {
            //For All Items
            this.identity = "Coagulated Leaf Cutter Anter Innards";
            this.weight = 1.9;
            this.size = 6;
            this.description = "The extremely sour and bitter, pasty, cooked innards of a leaf cutter anter.";
            this.intForDes = 0;
            this.intDescription = "Not only should this not go anywhere near your mouth, it should be destroyed so that no one will ever have to smell it again...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = -2; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = -3; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = -10; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Leaf Cutter Anter Innards", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "elcheLeaves")
        {
            //For All Items
            this.identity = "Elche Leaves";
            this.weight = 0.05;
            this.size = 9;
            this.description = "The sharp serrated edged leaves of the elche plant.";
            this.intForDes = 0;
            this.intDescription = "Eating these would cut up your throat and stomach. Elche leaves act as a fairly powerful antidote to poison.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -10; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "anterInnards")
        {
            //For All Items
            this.identity = "Anter Innards";
            this.weight = 3;
            this.size = 9;
            this.description = "The gooey innards of an anter.";
            this.intForDes = 0;
            this.intDescription = "Anter innards smell like someone was split open and left to rot for days...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.5; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "anterAcid")
        {
            //For All Items
            this.identity = "Anter Acid";
            this.weight = 2.5;
            this.size = 9;
            this.description = "Toxic residue found inside anters.";
            this.intForDes = 7;
            this.intDescription = "Anter acid is used by anters to mark new terrotory because it has a powerful acidic odor.";
            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 15); // at max, buy for 9.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "anterShell")
        {
            //For All Items
            this.identity = "Anter Shell";
            this.weight = 6;
            this.size = 15;
            this.description = "The hard, shiny, black shell of an anter.";
            this.intForDes = 10;
            this.intDescription = "Can be crafted into armour.";
            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 12); // at max, buy for 8.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 25); // at max, sell for 8.
        }
        else if (this.type == "anterMandibles")
        {
            //For All Items
            this.identity = "Anter Mandibles";
            this.weight = 2;
            this.size = 12;
            this.description = "The mandibles of an anter.";
            this.intForDes = 2;
            this.intDescription = "Anters use their mandibles to devour their prey and also to carry food back to their hive.";
            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 10.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
        }
        else if (this.type == "mudBeetleLeg")
        {
            //For All Items
            this.identity = "Mud Beetle Leg";
            this.weight = 0.7;
            this.size = 12;
            this.description = "The leg of a mud beetle; it has a bitter chemical smell.";
            this.intForDes = 0;
            if (player.getIntelligence() < 6)
            {
                this.intDescription = "This aweful smelling insect leg seems to be completely useless.";
            }
            else
            {
                this.intDescription = "This is used as a changer in alchemy.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "beholderTentacles")
        {
            //For All Items
            this.identity = "Beholder Tentacles";
            this.weight = 0.333;
            this.size = 7;
            this.description = "These are slippery and slick, but not at all wet. You feel static charge run through your flesh when you touch it.";
            this.intForDes = 8;
            this.intDescription = "This can be used in advanced alchemy.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "jinnCore")
        {
            //For All Items
            this.identity = "Jinn Core";
            this.weight = 0;
            this.size = 10;
            this.description = "The slain essence of a jinn in the form of the creature's head.";
            this.intForDes = 16;
            this.intDescription = "This can be powdered for use in alchemy.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250; // at max, buy for 250.
            this.sellValue = 250; // at max, sell for 250.
        }
        else if (this.type == "jinnDust")
        {
            //For All Items
            this.identity = "Jinn Dust";
            this.weight = 0;
            this.size = 10;
            this.description = "The powdered essence of a jinn.";
            this.intForDes = 8;
            this.intDescription = "This is extremely magically potent; it can be used in advanced alchemy.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Jinn Core", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 266; // at max, buy for 266.
            this.sellValue = 266; // at max, sell for 266.
        }
        else if (this.type == "cephrianTincturePot")
        {
            //For All Items
            this.identity = "Cephrian Tincture Pot";
            this.weight = 1.55;
            this.size = 9;
            this.description = "A long spouted pot used to make powerful magical mixtures.";
            this.intForDes = 10;
            this.intDescription = "It is made from crystalized torper wax, which has unique ability to contain powerful magics without being corrupted or broken.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Torper Wax", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21; // at max, buy for 21.
            this.sellValue = 21; // at max, sell for 21.
        }
        else if (this.type == "tinctureCup")
        {
            //For All Items
            this.identity = "Cephrian Tincture Cup";
            this.weight = 0.55;
            this.size = 5;
            this.description = "A small cup made from crystalized torper wax. It is a vessel from which Cephrian tinctures are drunk.";
            this.intForDes = 10;
            this.intDescription = "This has unique ability to contain powerful magics without being corrupted or broken.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 18;
            this.ingredients = [["Torper Wax", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 7; // at max, sell for 7.
        }
        else if (this.type == "cephrianTincturePotOfFungicideTincture")
        {
            //For All Items
            this.identity = "Cephrian Tincture Pot of Fungicide Tincture";
            this.weight = 3.35;
            this.size = 5;
            this.description = "A viscous, salty, red liquid that smells strongly of insect pharamones.";
            this.intForDes = 0;
            this.intDescription = "This tincture can cure any and all fungal infections.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Cephrian Tincture Pot", 1], ["Humpty Chalaza", 1], ["Riod Beetle Flesh", 5], ["Zaf Beetle Feeler", 2], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 72; // at max, buy for 72.
            this.sellValue = 72; // at max, sell for 72.
        }
        else if (this.type == "cupOfFungicideTincture")
        {
            //For All Items
            this.identity = "Fungicide Tincture";
            this.weight = 1.15;
            this.size = 5;
            this.description = "A viscous red liquid that smells strongly of insect pharamones.";
            this.intForDes = 0;
            this.intDescription = "This tincture can cure any and all fungal infections.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["tinctureCup", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -1; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -5; //restores will.
            this.alcohol = 1; //intoxicates the mind.

            //ability
            this.ability = "fungicide";

            //Crafting
            this.yield = 3;
            this.intForCraft = 0;
            this.ingredients = [["Cephrian Tincture Cup", 3], ["Cephrian Tincture Pot of Fungicide Tincture", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21; // at max, buy for 21.
            this.sellValue = 21; // at max, sell for 21.
        }
        else if (this.type == "capturedJinn")
        {
            //For All Items
            this.identity = "Cephrian Tincture Pot of Jinn Essence";
            this.weight = 1.55;
            this.size = 9;
            this.description = "A powerful magical entity is trapped in this long spouted pot; once captured it owes its captor a single wish and cannot leave until it has been granted.";
            this.intForDes = 12;
            this.intDescription = "Crystalized torper wax is perhaps the only substance that contains magic well enough to hold a jinn.";


            //Define Utility
            this.utility = "material";
            this.subUtility = "jinn";
            this.questy = true;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000000; // at max, buy for 1000000.
            this.sellValue = 1000000; // at max, sell for 1000000.
        }
        else if (this.type == "zafBeetleWhiskers")
        {
            //For All Items
            this.identity = "Zaf Beetle Whiskers";
            this.weight = 0.2;
            this.size = 10;
            this.description = "The beetle uses these to notice subtle environmental changes.";
            this.intForDes = 1;
            if (player.getIntelligence() < 5)
            {
                this.intDescription = "This can be used as a rich spicy seasoning with a slightly mouth numbing, insecty aftertaste.";
            }
            else
            {
                this.intDescription = "This can be used as a rich spicy seasoning with a slightly numbing, insecty aftertaste; they can also be used to filter particles from the air.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "zafBeetleFeeler")
        {
            //For All Items
            this.identity = "Zaf Beetle Feeler";
            this.weight = 2;
            this.size = 15;
            this.description = "The beetle uses its feelers to feel its way around the jungle floor.";
            this.intForDes = 27;
            this.intDescription = "The blood inside of the feeler contains antibodies to the Cerebris Fungus that when mixed with the right ingredients can make a cure.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "zafBeetleShell")
        {
            //For All Items
            this.identity = "Zaf Beetle Shell";
            this.weight = 46;
            this.size = 20;
            this.description = "The striped yellow shell of a zaf beetle.";
            this.intForDes = 4;
            this.intDescription = "The shell is durable and hard and can be used to reinforce certain armours.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40; // at max, buy for 40.
            this.sellValue = 32; // at max, sell for 32.
        }
        else if (this.type == "lionPelt")
        {
            //For All Items
            this.identity = "Lion Pelt";
            this.weight = 3.5;
            this.size = 14;
            this.description = "The soft dark orangish-tan fur of a lion.";
            this.intForDes = 3;
            this.intDescription = "Lion fur is extravagent and luxurious and is often worn by those who wish to flaunt their wealth.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite" || shopkeeper.ultra.race == "Zetian" || shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 15; // at max, buy for 15.
                    this.sellValue = 15; // at max, sell for 15.
                }
                else
                {
                    this.buyValue = 35 - Math.floor(player.getCharisma() / 10); // at max, buy for 30.
                    this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
                }
            }
            else
            {
                this.buyValue = 35 - Math.floor(player.getCharisma() / 10); // at max, buy for 30.
                this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
            }
        }
        else if (this.type == "foxPelt")
        {
            //For All Items
            this.identity = "Fox Pelt";
            this.weight = 1;
            this.size = 10;
            this.description = "The orangish furred pelt of a fox.";
            this.intForDes = 6;
            this.intDescription = "Fox fur apparel is particularly desirable, some nobles are even known to wear fox pelts.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 25); // at max, buy for 17.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 25); // at max, sell for 17.
        }
        else if (this.type == "rawLionFlesh")
        {
            //For All Items
            this.identity = "Raw Lion Flesh";
            this.weight = 2.3;
            this.size = 10;
            this.description = "The raw flesh of a lion.";
            this.intForDes = 2;
            this.intDescription = "Not only is  lion meat wridden with gut worms, it tastes terrible.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -0.5; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "lionMeat")
        {
            //For All Items
            this.identity = "Lion Meat";
            this.weight = 2.25;
            this.size = 10;
            this.description = "The cooked meat of a lion.";
            this.intForDes = 0;
            this.intDescription = "It is stringy, gristly, and tastes awful.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "arcticFoxPelt")
        {
            //For All Items
            this.identity = "Arctic Fox Pelt";
            this.weight = 1.1;
            this.size = 10;
            this.description = "The white furred pelt of an arctic fox.";
            this.intForDes = 3;
            this.intDescription = "Arctic Fox fur apparel is traditionally worn by northern Thengans.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 25); // at max, buy for 8.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 8.
        }
        else if (this.type == "rawArcticFoxFlesh")
        {
            //For All Items
            this.identity = "Raw Arctic Fox Flesh";
            this.weight = 1.2;
            this.size = 7;
            this.description = "The raw flesh of an arctic fox.";
            this.intForDes = 4;
            this.intDescription = "Eating this raw might give you gut worms...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.44; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.8; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "arcticFoxMeat")
        {
            //For All Items
            this.identity = "Arctic Fox Meat";
            this.weight = 1.1;
            this.size = 8;
            this.description = "The cooked meat of an arctic fox.";
            this.intForDes = 1;
            this.intDescription = "Northern fox is mainly eaten by Freydic and Northern Thengan peoples.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0.34; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Raw Arctic Fox Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "rawFoxFlesh")
        {
            //For All Items
            this.identity = "Raw Fox Flesh";
            this.weight = 0.9;
            this.size = 7;
            this.description = "The raw flesh of a fox.";
            this.intForDes = 4;
            this.intDescription = "Eating this raw might give you gut worms...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.6; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "foxMeat")
        {
            //For All Items
            this.identity = "Fox Meat";
            this.weight = 0.8;
            this.size = 7;
            this.description = "The cooked meat of a fox.";
            this.intForDes = 0;
            this.intDescription = "Most Thengans don't consider fox to be a proper food: needless to say it is not found on most dinner tables in Thengaria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.9; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Fox Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "utMeat")
        {
            //For All Items
            this.identity = "Ut Meat";
            this.weight = 3;
            this.size = 12;
            this.description = "The cooked flesh of an ut.";
            this.intForDes = 0;
            this.intDescription = "This meat is super flimsy, slimy, and slippery. Only those with a hardy gut can keep this food down.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            if (player.getToughness() < 10)
            {
                this.ability = "potentialFoodPoisoning";
            }
            else
            {
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Ut Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "frichMeat")
        {
            //For All Items
            this.identity = "Frich Meat";
            this.weight = 1;
            this.size = 12;
            this.description = "The cooked flesh of a Frich.";
            this.intForDes = 2;
            this.intDescription = "Cooking it didn't do much to soften it up, but at least it is safe to eat...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Frich Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "vreckMeat")
        {
            //For All Items
            this.identity = "Vreck Meat";
            this.weight = 1.6;
            this.size = 15;
            this.description = "The cooked flesh of a Vreck.";
            this.intForDes = 0;
            this.intDescription = "It is tough and has or sort of muddy taste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = -0.5; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Vreck Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
        }
        else if (this.type == "rawVreckFlesh")
        {
            //For All Items
            this.identity = "Raw Vreck Flesh";
            this.weight = 1.7;
            this.size = 15;
            this.description = "The raw flesh of a Vreck.";
            this.intForDes = 4;
            this.intDescription = "Eating raw vreck flesh can give you flesh mites.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "molteMeat")
        {
            //For All Items
            this.identity = "Molte Meat";
            this.weight = 1;
            this.size = 12;
            this.description = "The cooked flesh of a Molte.";
            this.intForDes = 2;
            this.intDescription = "The meat tastes sour... in a bad way.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = -0.25; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Molte Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "utTentacle")
        {
            //For All Items
            this.identity = "Ut Tentacle";
            this.weight = 5;
            this.size = 18;
            this.description = "A slick and slimy tentacle from an ut.";
            this.intForDes = 30;
            this.intDescription = "Such tentacles are used in anti-magic elixers due to the strong magic resistance in the blood. This can also be fermented for other uses.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "elkAntler")
        {
            //For All Items
            this.identity = "Elk Antler";
            this.weight = 3.6;
            this.size = 15;
            this.description = "The antler of a Vardanian Elk.";
            this.intForDes = 1;
            this.intDescription = "Antlers are often used for home decoration; they have also been used in crafting and making elaborate furnishings.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "elkPelt")
        {
            //For All Items
            this.identity = "Elk Pelt";
            this.weight = 2.5;
            this.size = 15;
            this.description = "The soft grey furred pelt of an elk.";
            this.intForDes = 1;
            this.intDescription = "Elk pelts are used to make Vardanian apparel, blankets, and beds.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 14.
        }
        else if (this.type == "deerPelt")
        {
            //For All Items
            this.identity = "Deer Pelt";
            this.weight = 2.5;
            this.size = 15;
            this.description = "The soft white spotted brown furred pelt of a deer.";
            this.intForDes = 1;
            this.intDescription = "Deer pelts are used to make Thengan apparel and other useful stuff like that.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 15); // at max, buy for 12.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 15); // at max, sell for 12.
        }
        else if (this.type == "giraffePelt")
        {
            //For All Items
            this.identity = "Giraffe Pelt";
            this.weight = 18;
            this.size = 30;
            this.description = "The thick yellow and brown spotted pelt of a giraffe.";
            this.intForDes = 1;
            this.intDescription = "Giraffe pelts are a sought after material used to make decorations, rugs, and fine clothing.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 6); // at max, buy for 37.
            this.sellValue = 31 + Math.floor(player.getCharisma() / 8); // at max, sell for 37.
        }
        else if (this.type == "deerAntler")
        {
            //For All Items
            this.identity = "Deer Antler";
            this.weight = 1;
            this.size = 15;
            this.description = "An antler from a deer.";
            this.intForDes = 4;
            this.intDescription = "Deer antlers can be used as either a trophy, a decoration, or in making certain apparel.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "fermentedUtTentacle")
        {
            //For All Items
            this.identity = "Fermented Ut Tentacle";
            this.weight = 6;
            this.size = 18;
            this.description = "A rank smelling slimy fermented tentacle originally from an ut.";
            this.intForDes = 20;
            this.intDescription = "The ut's blood chemically alters and becomes brownish when fermented. This substance can be extracted.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Ut Tentacle", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "rawUtFlesh")
        {
            //For All Items
            this.identity = "Raw Ut Flesh";
            this.weight = 4;
            this.size = 12;
            this.description = "The raw flesh from an ut. It is gooey, slimy, limp, and coated in slick transparent slimyness.";
            this.intForDes = 1;
            this.intDescription = "Eating this is sure to make you lose the contents of your stomach... but why would you do something so gross?";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "etnaEggSac")
        {
            //For All Items
            this.identity = "Etna Egg Sac";
            this.weight = 40;
            this.size = 15;
            this.description = "An egg sac full of developing baby etnas.";
            this.intForDes = 2;
            this.intDescription = "Leave it on the ground and in time a swarm of baby etnas will crawl out of it.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "etnaHatch";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29; // at max, buy for 29.
            this.sellValue = 29; // at max, sell for 29.
        }
        else if (this.type == "etnaVenomSac")
        {
            //For All Items
            this.identity = "Etna Venom Sac";
            this.weight = 0.6;
            this.size = 5;
            this.description = "The organ in which etnas store their venom.";
            this.intForDes = 1;
            this.intDescription = "This can be used in alchemy as a changer.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "etnaPoison";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 15); // at max, buy for 16.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 6); // at max, sell for 16.
        }
        else if (this.type == "lombrisFlesh")
        {
            //For All Items
            if (player.getIntelligence() >= 18)
            {
                this.identity = "Slice of Lombris Flesh";
            }
            else
            {
                if (player.raceName == "Thengar" && player.title == "Vagabond" || player.raceName == "Thengar" && player.title == "Peasant" || player.raceName == "Thengar" && player.title == "Commoner")
                {
                    this.identity = "Slice of Bris Flesh";
                }
                else if (player.raceName == "Freynor" && player.title == "Vagabond" || player.raceName == "Freynor" && player.title == "Peasant" || player.raceName == "Freynor" && player.title == "Commoner")
                {
                    this.identity = "Slice of Lomb Flesh";
                }
                else
                {
                    this.identity = "Slice of Lombris Flesh";
                }
            }
            this.weight = 1.5;
            this.size = 11;
            this.description = "A slimy, gummy and tender substance.";
            this.intForDes = 18;
            this.intDescription = "The Thengans call the beasts 'Bris' while the Freynor call them 'Lombs', though the full name is actually Lombris which means 'longest' in Old Thengan.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = -40; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -20; //heals health.
            this.generation = -20; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fatigueIV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 3); // at max, sell for 18.
        }
        else if (this.type == "rawThuegTripe")
        {
            //For All Items
            this.identity = "Raw Thueg Tripe";
            this.weight = 1;
            this.size = 12;
            this.description = "The stomach-lining of a thueg.";
            this.intForDes = 8;
            this.intDescription = "This is incredibly good for the health of the one consuming it, but it is not at all appetizing. It can also be used in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "rawThuegTripe";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 34 - Math.floor(player.getCharisma() / 12); // at max, buy for 30.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
        }
        else if (this.type == "thuegTripe")
        {
            //For All Items
            this.identity = "Thueg Tripe";
            this.weight = 1;
            this.size = 12;
            this.description = "The cooked stomach-lining of a thueg.";
            this.intForDes = 8;
            this.intDescription = "This is incredibly good for the health of the one consuming it, but it is not at all appetizing. It can also be used in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "thuegTripe";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Thueg Tripe", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 50); // at max, buy for 19.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 10); // at max, sell for 19.
        }
        else if (this.type == "rawRazorfin")
        {
            //For All Items
            this.identity = "Raw Razorfin";
            this.weight = 2.8;
            this.size = 11;
            this.description = "A green cold-water fish with pronounced fins and sharp, pointed scales.";
            this.intForDes = 1;
            this.intDescription = "This fish needs to have its scales trimmed before it can be served whole roasted.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.35; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -1; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "razorfin")
        {
            //For All Items
            this.identity = "Razorfin";
            this.weight = 2.8;
            this.size = 11;
            this.description = "A roasted fish with freshly trimmed green scales, and a strong but flavorful red meat.";
            this.intForDes = 7;
            this.intDescription = "This is often used to make a traditional northern freydic soup with kelp and fish.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Raw Razorfin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "rawJuurgo")
        {
            //For All Items
            this.identity = "Raw Juurgo";
            this.weight = 4;
            this.size = 13;
            this.description = "A northern blue carnivorous fish that is an uncommon catch.";
            this.intForDes = 1;
            this.intDescription = "This is a tougher and more meaty fish than most others. Don't eat it raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 2.
        }
        else if (this.type == "juurgo")
        {
            //For All Items
            this.identity = "Juurgo";
            this.weight = 4;
            this.size = 13;
            this.description = "Roasted fish with a rubbery but tender meat and an intensely oceanic flavor.";
            this.intForDes = 1;
            this.intDescription = "The freydic have adapted to this strong tasting fish after centuries of proximity; other races tend to find it repulsing.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            if (player.raceName == "Freynor")
            {
                this.hunger = 12; //satisfies hunger.
                this.ability = "satiate";
            }
            else
            {
                this.hunger = 10; //satisfies hunger.
                this.ability = "foodPoisoning";
            }
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Raw Juurgo", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "rawThab")
        {
            //For All Items
            this.identity = "Raw Thab";
            this.weight = 5.8;
            this.size = 18;
            this.description = "A fast swimming yellowish grey fish that is valued for its rich and buttery white flesh.";
            this.intForDes = 1;
            this.intDescription = "When cooked its scales gleam a somewhat golden tone of dark yellow. Don't eat it raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 1.
            this.sellValue = 10; // at max, sell for 1.
        }
        else if (this.type == "thab")
        {
            //For All Items
            this.identity = "Thab";
            this.weight = 5.8;
            this.size = 18;
            this.description = "Roasted fish with golden yellow scales; it has a rich and buttery white meat.";
            this.intForDes = 1;
            this.intDescription = "This northern fish is rather large, and a highly desirable catch.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 16; //satisfies hunger.
            this.thirst = 0.55; //quenches thirst.
            this.warmth = 8; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0.15; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Raw Thab", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 16; // at max, sell for 16.
        }
        else if (this.type == "rawRedCrombal")
        {
            //For All Items
            this.identity = "Raw Red Crombal";
            this.weight = 1.2;
            this.size = 8;
            this.description = "A northern fish that is an extremely common catch.";
            this.intForDes = 1;
            this.intDescription = "This fish is not particularly highly valued. Don't eat it raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "redCrombal")
        {
            //For All Items
            this.identity = "Red Crombal";
            this.weight = 1.2;
            this.size = 8;
            this.description = "A roasted red fish commonly eaten in the north.";
            this.intForDes = 1;
            this.intDescription = "This fish is not particularly highly valued as it is easily found, caught and cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Red Crombal", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "rawTridite")
        {
            //For All Items
            this.identity = "Raw Tridite";
            this.weight = 5;
            this.size = 15;
            this.description = "A green and yellow striped southern fish that glimmers in the water as it swims.";
            this.intForDes = 3;
            this.intDescription = "It has minorly toxic compounds in its flesh. Don't eat it...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = -3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -1; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = -2.5; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "tridite")
        {
            //For All Items
            this.identity = "Tridite";
            this.weight = 5;
            this.size = 15;
            this.description = "Tridite has a slightly chewy texture and an extremely salty, fishy flavour.";
            this.intForDes = 4;
            this.intDescription = "The toxic compounds in the flesh have been cooked away.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = -3; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Tridite", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "rawDuskfish")
        {
            //For All Items
            this.identity = "Raw Duskfish";
            this.weight = 2.5;
            this.size = 12;
            this.description = "A red and white fish that inhabits temperate waters.";
            this.intForDes = 3;
            this.intDescription = "Dusk fish are most active during the night.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.8; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "duskfish")
        {
            //For All Items
            this.identity = "Duskfish";
            this.weight = 2.5;
            this.size = 12;
            this.description = "The roasted pink meat of a the duskfish tastes slightly sweet but it also has a depth of savory fish-like flavours.";
            this.intForDes = 3;
            this.intDescription = "Dusk fish are most active during the night.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 13; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.01; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Raw Duskfish", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16; // at max, buy for 16.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "rawPolxetp")
        {
            //For All Items
            this.identity = "Raw Polxetp";
            this.weight = 3.5;
            this.size = 13;
            this.description = "A red southern fish with distorted yellow stripes.";
            this.intForDes = 9;
            this.intDescription = "The skin of this fish is poisonous and would be lethal to consume.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.65; //satisfies hunger.
            this.thirst = 0.35; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "polxetp")
        {
            //For All Items
            this.identity = "Polxetp";
            this.weight = 3.5;
            this.size = 13;
            this.description = "A roasted red fish with yellow stripes.";
            this.intForDes = 11;
            this.intDescription = "Cooking the fish destroys some of the compounds in the fish's skin but it is still poisonous.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 0.35; //quenches thirst.
            this.warmth = 3.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = -0.75; //restores will.

            //ability
            this.ability = "poisonI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["rawPolxetp", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawRedBelliedFalder")
        {
            //For All Items
            this.identity = "Raw Red-Bellied Falder";
            this.weight = 1.9;
            this.size = 9;
            this.description = "A green fish with a characteristic red belly.";
            this.intForDes = 1;
            this.intDescription = "A common catch in temperate waters.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.75; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "redBelliedFalder")
        {
            //For All Items
            this.identity = "Red-Bellied Falder";
            this.weight = 1.8;
            this.size = 9;
            this.description = "A roasted fish with dark red meat.";
            this.intForDes = 0;
            this.intDescription = "It has a thorough fishiness about it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7.5; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 3.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Raw Red-Bellied Falder", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "rawRiulpo")
        {
            //For All Items
            this.identity = "Raw Riulpo";
            this.weight = 3;
            this.size = 12;
            this.description = "A specled orange fish with thin, wispy, and beatiful red fins.";
            this.intForDes = 0;
            this.intDescription = "Riulpo have a tender, light pink flesh.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.75; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "riulpo")
        {
            //For All Items
            this.identity = "Riulpo";
            this.weight = 3;
            this.size = 10;
            this.description = "A roasted orange specled fish with a strong tasting, tender, pink meat.";
            this.intForDes = 2;
            this.intDescription = "Riulpo is eaten often by people of the Karib tribe, it is a key ingredient in a traditional soup they make.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Riulpo", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "rawKalp")
        {
            //For All Items
            this.identity = "Raw Kalp";
            this.weight = 5.7;
            this.size = 10;
            this.description = "A large greenish southern fish that is eaten rather commonly.";
            this.intForDes = 0;
            this.intDescription = "Its flesh is dark pink and firm.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0.05; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13; // at max, buy for 13.
            this.sellValue = 13; // at max, sell for 13.
        }
        else if (this.type == "kalp")
        {
            //For All Items
            this.identity = "Kalp";
            this.weight = 6;
            this.size = 10;
            this.description = "The roasted meat of a kalp.";
            this.intForDes = 0;
            this.intDescription = "This fish has a firm textured dark pink meat that is rich and full of flavour but a little bit tiresome to eat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 0.01; //quenches thirst.
            this.warmth = 8; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Raw Kalp", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "rawSlol")
        {
            //For All Items
            this.identity = "Raw Slol";
            this.weight = 6.25;
            this.size = 10;
            this.description = "A northern and temperate blue fish with a flavourful white flesh.";
            this.intForDes = 7;
            this.intDescription = "Slol lay their eggs in the rivers and when they hatch they migrate north to the sea.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.25; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "slol")
        {
            //For All Items
            this.identity = "Slol";
            this.weight = 6;
            this.size = 10;
            this.description = "The roasted meat of a slol.";
            this.intForDes = 0;
            this.intDescription = "This fish has a sturdy, white meat that is just a bit bland but still tastes good.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 16; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Raw Slol", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19; // at max, buy for 19.
            this.sellValue = 19; // at max, sell for 19.
        }
        else if (this.type == "rawSalmon")
        {
            //For All Items
            this.identity = "Raw Salmon";
            this.weight = 4;
            this.size = 10;
            this.description = "A red and green fish that lives in temperate waters.";
            this.intForDes = 5;
            this.intDescription = "Salmon migrate from the ocean to lay their eggs upstream in the river.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "salmon")
        {
            //For All Items
            this.identity = "Salmon";
            this.weight = 4;
            this.size = 10;
            this.description = "The roasted meat of a salmon.";
            this.intForDes = 0;
            this.intDescription = "This fish has a tender, pink meat that is flavorful without any additions.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 8; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 21;
            this.ingredients = [["Raw Salmon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28; // at max, buy for 18.
            this.sellValue = 28; // at max, sell for 18.
        }
        else if (this.type == "rawSaskriit")
        {
            //For All Items
            this.identity = "Raw Saskriit";
            this.weight = 2.75;
            this.size = 11;
            this.description = "A carnivorous southern fish with a mouth that opens wide in four toothed sections.";
            this.intForDes = 0;
            this.intDescription = "It has rough skin like sandpaper, and six beady black eyes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.25; //satisfies hunger.
            this.thirst = 2.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.5; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "saskriit")
        {
            //For All Items
            this.identity = "Saskriit";
            this.weight = 2.75;
            this.size = 11;
            this.description = "A roasted fish with a tender pinkish cream coloured meat.";
            this.intForDes = 0;
            this.intDescription = "This fish has a sourish aftertaste that isn't particularly desirable but it is otherwise paletable.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Raw Saskriit", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "dryKelp")
        {
            //For All Items
            this.identity = "Dry Kelp";
            this.weight = 0.4;
            this.size = 9;
            this.description = "The dried oceanic salty fronds of northern sea kelp that is washed ashore.";
            this.intForDes = 6;
            this.intDescription = "This can be eaten plain as a tasty snack, but it is most notably used in a northern freydic fish soup.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = -0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Kelp", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawFrichFlesh")
        {
            //For All Items
            this.identity = "Raw Frich Flesh";
            this.weight = 1;
            this.size = 12;
            this.description = "The raw flesh from a frich.";
            this.intForDes = 4;
            this.intDescription = "It is tough, slimy with curdling blood, and finished with an occasional gut worm here or there.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawVarminHaunch")
        {
            //For All Items
            this.identity = "Raw Varmin Haunch";
            this.weight = 4;
            this.size = 17;
            this.description = "The skinned haunch of a varmin.";
            this.intForDes = 5;
            this.intDescription = "It is not safe to eat this raw because it may have gutworms in it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Varmin Leg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "varminHaunch")
        {
            //For All Items
            this.identity = "Varmin Haunch";
            this.weight = 4;
            this.size = 17;
            this.description = "The roasted haunch of a varmin.";
            this.intForDes = 0;
            this.intDescription = "It has a sort of musty meaty smell and it does taste any better...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Varmin Haunch", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "rawSkeweredRat")
        {
            //For All Items
            this.identity = "Raw Skewered Rat";
            this.weight = 0.4;
            this.size = 6;
            this.description = "A skinned rat on a sharpened skewer.";
            this.intForDes = 5;
            this.intDescription = "Don't eat it raw, it may be infested with gutworms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.75; //satisfies hunger.
            this.thirst = 0.05; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Crafting
            this.yield = 20;
            this.intForCraft = 2;
            this.ingredients = [["Dead Rat", 20], ["Ashai Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "skeweredRat")
        {
            //For All Items
            this.identity = "Skewered Rat";
            this.weight = 0.4;
            this.size = 6;
            this.description = "A rat rotisseried on a sharpened skewer.";
            this.intForDes = 0;
            this.intDescription = "The roasty toasty rat meat has a musty meaty flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Skewered Rat", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "rawBadgerFlesh")
        {
            //For All Items
            this.identity = "Raw Badger Flesh";
            this.weight = 0.44;
            this.size = 4;
            this.description = "The raw flesh of a badger.";
            this.intForDes = 2;
            this.intDescription = "It has flesh mites while raw; it is actually good meat when its cooked, it just is not very filling.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.45; //satisfies hunger.
            this.thirst = 0.12; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "badgerMeat")
        {
            //For All Items
            this.identity = "Badger Meat";
            this.weight = 0.4;
            this.size = 4;
            this.description = "The cooked meat of a badger.";
            this.intForDes = 0;
            this.intDescription = "Its not half bad... It tastes, well, not bad. So, that's good. Right?";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.25; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Badger Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawGazelleFlesh")
        {
            //For All Items
            this.identity = "Raw Gazelle Flesh";
            this.weight = 2.7;
            this.size = 11;
            this.description = "The raw flesh of a gazelle from the southern savannah region.";
            this.intForDes = 3;
            this.intDescription = "A large juicy cut of flesh that is potentially infected with flesh mites.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.8; //satisfies hunger.
            this.thirst = 0.6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.7; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "gazelleMeat")
        {
            //For All Items
            this.identity = "Gazelle Meat";
            this.weight = 2.65;
            this.size = 11;
            this.description = "The sensuous rich well marble meat of a gazelle.";
            this.intForDes = 3;
            this.intDescription = "This meat is an extravagant culinary ingredient that has a lot of fatty and gamey flavour in it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.025; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Raw Gazelle Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25; // at max, buy for 25.
            this.sellValue = 25; // at max, sell for 25
        }
        else if (this.type == "rawVenison")
        {
            //For All Items
            this.identity = "Raw Venison";
            this.weight = 1.4;
            this.size = 10;
            this.description = "The raw flesh from a hoofed ruminant mammal of the family Cervinae.";
            this.intForDes = 3;
            this.intDescription = "A thick cut of flesh that is potentially infected with flesh mites.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.9; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "venison")
        {
            //For All Items
            this.identity = "Venison";
            this.weight = 1.4;
            this.size = 10;
            this.description = "The cooked meat from a hoofed ruminant mammal of the family Cervinae.";
            this.intForDes = 0;
            this.intDescription = "A nicely marbled cut of meat that tastes savoury, and hearty, and it has a particularly venison-like flavour..";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 13; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.01; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Raw Venison", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "smokedVenison")
        {
            //For All Items
            this.identity = "Smoked Venison";
            this.weight = 1.4;
            this.size = 10;
            this.description = "The smoked meat from a hoofed ruminant mammal of the family Cervinae.";
            this.intForDes = 0;
            this.intDescription = "A nicely marbled cut of meat that tastes smokey, and hearty, and it has a particularly venison-like flavour..";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 8; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.07; //recoops lost energy.
            this.replenish = 0.015; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Raw Venison", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "rawMudToad")
        {
            //For All Items
            this.identity = "Raw Mud Toad";
            this.weight = 1.25;
            this.size = 8;
            this.description = "A slimy, rough skinned mud toad.";
            this.intForDes = 1;
            this.intDescription = "This can make for a tasty snack if it is cooked, but don't eat it raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "wartPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mudToad")
        {
            //For All Items
            this.identity = "Roasted Mud Toad";
            this.weight = 1.23;
            this.size = 8;
            this.description = "A standard tasting meat with a very slight rubberiness to the bite.";
            this.intForDes = 0;
            this.intDescription = "Mud toads eat a diet of mainly fireflies and vecher beetles so their meat is high in protein.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.25; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Mud Toad", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawBabosaFlesh")
        {
            //For All Items
            this.identity = "Raw Babosa Flesh";
            this.weight = 5;
            this.size = 10;
            this.description = "The raw gooey flesh of a babosa.";
            this.intForDes = 2;
            this.intDescription = "This is poisonous to eat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 3; // at max, buy for 3.
                    this.sellValue = 3; // at max, sell for 3.
                }
                else
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 1; // at max, sell for 1.
                }
            }
            else
            {
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
        }
        else if (this.type == "fermentedBabosaFlesh")
        {
            //For All Items
            this.identity = "Fermented Babosa Flesh";
            this.weight = 5;
            this.size = 10;
            this.description = "The putrid, festering, gooey, rotting flesh of a babosa; this is extremely dangerous to eat.";
            this.intForDes = 10;
            this.intDescription = "It functions as a changer in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -9; //heals health.
            this.generation = -9; //recoops lost energy.
            this.replenish = -9; //restores will.

            //ability
            this.ability = "poisonIV";

            //Crafting
            this.yield = 1;
            this.intForCraft = 27;
            this.ingredients = [["Raw Babosa Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 11; // at max, sell for 11.
        }
        else if (this.type == "babosaMeat")
        {
            //For All Items
            this.identity = "Babosa Meat";
            this.weight = 5;
            this.size = 10;
            this.description = "The soft somewhat bitter pasty meat of a babosa.";
            if (player.raceName == "Cephrite")
            {
                this.intForDes = 0;
                this.intDescription = "Not only is this safe to eat, it has a uniquely creamy aftertaste that is absolutely mouthwatering.";
            }
            else
            {
                this.intForDes = 4;
                this.intDescription = "Cooking it deteriorated the poisonous compounds within it, but eating it would still be an unthinkable atrocity to your stomach.";
            }

            //Define Utility
            this.utility = "food";

            if (player.raceName == "Cephrite")
            {
                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 9; //satisfies hunger.
                this.thirst = 1.5; //quenches thirst.
                this.warmth = 3; //warms player.
                this.heal = 0.05; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = 0.05; //restores will.

                //ability
                this.ability = "none";
            }
            else
            {
                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 6; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 2; //warms player.
                this.heal = -0.2; //heals health.
                this.generation = -6; //recoops lost energy.
                this.replenish = -1; //restores will.

                //ability
                this.ability = "foodPoisoning";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Raw Babosa Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 8; // at max, buy for 8.
                    this.sellValue = 8; // at max, sell for 8.
                }
                else
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 0; // at max, sell for 0.
                }
            }
            else
            {
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "rawMolteFlesh")
        {
            //For All Items
            this.identity = "Raw Molte Flesh";
            this.weight = 2;
            this.size = 12;
            this.description = "The raw flesh from a Molte.";
            this.intForDes = 0;
            if (player.areGlovesEquipped)
            {
                this.intDescription = "It is slimy and jiggly and it smells weird...";
            }
            else
            {
                this.intDescription = "Your flesh burns with a fiery tingling sensation when you touch it...";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -11; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = -4; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mudToadLeg")
        {
            //For All Items
            this.identity = "Mud Toad Leg";
            this.weight = 0.16;
            this.size = 4;
            this.description = "The leg of a Vardanian mud toad.";
            this.intForDes = 19;
            this.intDescription = "This can be used in alchemy, and in certain culinary recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "stovolBeetleMandable")
        {
            //For All Items
            this.identity = "Stovol Beetle Mandible";
            this.weight = 2.6;
            this.size = 16;
            this.description = "The long dark Mandible of a stovol beetle.";
            this.intForDes = 2;
            this.intDescription = "The stovol beetle uses its mandibles not only to defend itself and to eat larger prey, but also to turn up soil to eat insects that dwell below.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "raggedGrizzlyPelt")
        {
            //For All Items
            this.identity = "Ragged Grizzly Pelt";
            this.weight = 3;
            this.size = 15;
            this.description = "A pelt that has been badly cut and shredded in parts.";
            this.intForDes = 0;
            this.intDescription = "It was like this before you took it off of the bear...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "skindlerIntestines")
        {
            //For All Items
            this.identity = "Skindler Intestines";
            this.weight = 4;
            this.size = 12;
            this.description = "The intestines of a Skindler.";
            this.intForDes = 0;
            this.intDescription = "It reeks of a gut twisting fetid boquet of decaying flesh and excriment. Skindlers are also called bloatheads because of their large head-like stomach sack.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "grizzlyBearPeltLarge")
        {
            //For All Items
            this.identity = "Grizzly Bear Pelt";
            this.weight = 3.8;
            this.size = 15;
            this.description = "The thick brown furred pelt of a grizzly bear.";
            this.intForDes = 6;
            this.intDescription = "Grizzly bear pelts can be crafted into light leather armour and can be used to make other apparel as well.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 32 - Math.floor(player.getCharisma() / 4.166666666666666); // at max, buy for 20.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 20.
        }
        else if (this.type == "grizzlyBearPeltSmall")
        {
            //For All Items
            this.identity = "Grizzly Bear Pelt";
            this.weight = 3.6;
            this.size = 14;
            this.description = "The thick brown furred pelt of a grizzly bear.";
            this.intForDes = 6;
            this.intDescription = "Grizzly bear pelts can be crafted into light leather armour and can be used to make other apparel as well.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 4.5454545454545); // at max, buy for 19.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 10); // at max, sell for 19.
        }
        else if (this.type == "badgerPelt")
        {
            //For All Items
            this.identity = "Badger Pelt";
            this.weight = 0.8;
            this.size = 16;
            this.description = "The grey furred pelt of a badger.";
            this.intForDes = 2;
            this.intDescription = "This is used to make rugs and cheap apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "kagsHead")
        {
            //For All Items
            this.identity = "Kag's Head";
            this.weight = 10;
            this.size = 16;
            this.description = "The hulking head of a ferocious grizzly bear with a scar across its right eye.";
            this.intForDes = 0;
            this.intDescription = "In life, this bear once devoured an entire party of Balgur Mercenaries.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21; // at max, buy for 21.
            this.sellValue = 21; // at max, sell for 21.
        }
        else if (this.type == "wendigoHead")
        {
            //For All Items
            this.identity = "Wendigo Head";
            this.weight = 7.5;
            this.size = 16;
            this.description = "The severed head of a wendigo; a wendigo was once a human, but was cursed for consuming human flesh.";
            this.intForDes = 0;
            this.intDescription = "This trophy shows that you have bested a most vile and murderous Wendigo and lived to brag about it.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45; // at max, buy for 45.
            this.sellValue = 45; // at max, sell for 45.
        }
        else if (this.type == "roylaFlower")
        {
            //For All Items
            this.identity = "Royla Flower";
            this.weight = 0.03;
            this.size = 6;
            this.description = "A thin light blue flower that grows in the shallows of the Vardanian Swamps.";
            this.intForDes = 19;
            this.intDescription = "It acts as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "vardanianMardyl")
        {
            //For All Items
            this.identity = "Vardanian Mardyl";
            this.weight = 2.23;
            this.size = 8;
            this.description = "A light grayish-green and pinkish-grey swamp plant that grows in the shallows.";
            this.intForDes = 7;
            this.intDescription = "It is thought to have some obscure medical properties.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "orgishMardyl")
        {
            //For All Items
            this.identity = "Orgish Mardyl";
            this.weight = 2.82;
            this.size = 9;
            this.description = "A light green, orange and pink swamp plant that grows in the shallows.";
            this.intForDes = 10;
            this.intDescription = "It is releases valuable nutrients into the water that are good for the fishlife.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "salaFlower")
        {
            //For All Items
            this.identity = "Sala Flower";
            this.weight = 0.05;
            this.size = 4;
            this.description = "A red wildflower native to Nirwaden.";
            this.intForDes = 1;
            this.intDescription = "It is a pretty flower... what more could you need?";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "jolleFlower")
        {
            //For All Items
            this.identity = "Jolle Flower";
            this.weight = 0.02;
            this.size = 4;
            this.description = "A delicate blue wildflower native to Thengaria.";
            this.intForDes = 0;
            if (player.getIntelligence() >= 4)
            {
                this.intDescription = "It has a soft herbal scent; its smell can attract certain animals, it can also be used in herbal remedies.";
            }
            else
            {
                this.intDescription = "It has a soft herbal scent.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction != "Thengar" && shopkeeper.ultra.race != "Thengar")
                {
                    this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
                    this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
                }
                else
                {
                    this.buyValue = 2; // at max, buy for 2.
                    this.sellValue = 0; // at max, sell for 0.
                }
            }
            else
            {
                this.buyValue = 2; // at max, buy for 2.
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "heyolBerries")
        {
            //For All Items
            this.identity = "Heyol Berries";
            this.weight = 0.03;
            this.size = 5;
            this.description = "Small light green berries that are hard and firm.";
            this.intForDes = 8;
            this.intDescription = "These crunchy, bitter tasting berries are medicinal: eating them somewhat reduces swelling.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = -0.5; //restores will.

            //ability
            this.ability = "swellReductionI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "palggaFlowers")
        {
            //For All Items
            this.identity = "Palgga Flowers";
            this.weight = 1.25;
            this.size = 10;
            this.description = "A branch of a palgga bush that has thick green leaves and numerous little pink flowers.";
            this.intForDes = 10;
            this.intDescription = "These flowers can be used to make a sweet and floral smelling perfume.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "falloryFlower")
        {
            //For All Items
            this.identity = "Fallory Flower";
            this.weight = 0.015;
            this.size = 5;
            this.description = "A gorgeous red flower.";
            this.intForDes = 15;
            this.intDescription = "Fallory flowers are used to celebrate romantic love and marriage in Thengaria.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "desertPoppyPods")
        {
            //For All Items
            this.identity = "Desert Poppy Pods";
            this.weight = 0.25;
            this.size = 6;
            this.description = "The part of the poppy that holds the seeds.";
            this.intForDes = 5;
            this.intDescription = "Desert poppy seeds have painkilling affects on the human mind and they leave the consumer with a feeling of euphoria.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["desertPoppySeedMash", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race != "Aldrek" && shopkeeper.ultra.race != "Zetian" && shopkeeper.ultra.race != "Orgell" && shopkeeper.ultra.race != "Cephrite" && shopkeeper.ultra.faction != "Nirwaden")
                {
                    this.buyValue = 24 - Math.floor(player.getCharisma() / 25); // at max, buy for 22.
                    this.sellValue = 20 + Math.floor(player.getCharisma() / 25); // at max, sell for 22.
                }
                else if (shopkeeper.ultra.faction == "Nirwaden")
                {
                    this.buyValue = 0; // at max, buy for 0.
                    this.sellValue = 0; // at max, sell for 0.
                }
                else
                {
                    this.buyValue = 5; // at max, buy for 5.
                    this.sellValue = 5; // at max, sell for 5.
                }
            }
            else
            {
                this.buyValue = 5; // at max, buy for 5.
                this.sellValue = 5; // at max, sell for 5.
            }
        }
        else if (this.type == "desertPoppySeedMash")
        {
            //For All Items
            this.identity = "Desert Poppy Seed Mash";
            this.weight = 0.2;
            this.size = 6;
            this.description = "This is a potent opioid drug.";
            this.intForDes = 5;
            this.intDescription = "Desert poppy seeds have painkilling affects on the human mind and they leave the consumer with a feeling of euphoria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.05; //satisfies hunger.
            this.thirst = 0.05; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 2; //restores will.

            //ability
            this.ability = "opium";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race != "Aldrek" && shopkeeper.ultra.race != "Zetian" && shopkeeper.ultra.race != "Orgell" && shopkeeper.ultra.race != "Cephrite" && shopkeeper.ultra.faction != "Nirwaden")
                {
                    this.buyValue = 28 - Math.floor(player.getCharisma() / 25); // at max, buy for 26.
                    this.sellValue = 24 + Math.floor(player.getCharisma() / 25); // at max, sell for 26.
                }
                else if (shopkeeper.ultra.faction == "Nirwaden")
                {
                    this.buyValue = 0; // at max, buy for 0.
                    this.sellValue = 0; // at max, sell for 0.
                }
                else
                {
                    this.buyValue = 7; // at max, buy for 7.
                    this.sellValue = 7; // at max, sell for 7.
                }
            }
            else
            {
                this.buyValue = 7; // at max, buy for 7.
                this.sellValue = 7; // at max, sell for 7.
            }
        }
        else if (this.type == "opium")
        {
            //For All Items
            this.identity = "Opium";
            this.weight = 0.1;
            this.size = 6;
            this.description = "This is an extremely potent and addictive opioid drug.";
            this.intForDes = 5;
            this.intDescription = "Opium has strong painkilling affects on the human mind and it leaves the consumer with a feeling of utter bliss and euphoria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 4; //restores will.

            //ability
            this.ability = "superOpium";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Desert Poppy Seed Mash", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race != "Aldrek" && shopkeeper.ultra.race != "Zetian" && shopkeeper.ultra.race != "Orgell" && shopkeeper.ultra.race != "Cephrite" && shopkeeper.ultra.faction != "Nirwaden")
                {
                    this.buyValue = 32 - Math.floor(player.getCharisma() / 25); // at max, buy for 30.
                    this.sellValue = 30; // at max, sell for 30.
                }
                else if (shopkeeper.ultra.faction == "Nirwaden")
                {
                    this.buyValue = 0; // at max, buy for 0.
                    this.sellValue = 0; // at max, sell for 0.
                }
                else
                {
                    this.buyValue = 20; // at max, buy for 20.
                    this.sellValue = 20; // at max, sell for 20.
                }
            }
            else
            {
                this.buyValue = 20; // at max, buy for 20.
                this.sellValue = 20; // at max, sell for 20.
            }
        }
        else if (this.type == "desertPoppyFlower")
        {
            //For All Items
            this.identity = "Desert Poppy Flower";
            this.weight = 0.03;
            this.size = 5;
            this.description = "The red flower of a desert poppy can be used as a former in alchemy.";
            this.intForDes = 5;
            this.intDescription = "The desert poppy flower does not share the same potency as the seeds.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race != "Aldrek" && shopkeeper.ultra.race != "Zetian" && shopkeeper.ultra.race != "Orgell" && shopkeeper.ultra.race != "Cephrite" && shopkeeper.ultra.faction != "Nirwaden")
                {
                    this.buyValue = 6 - Math.floor(player.getCharisma() / 50); // at max, buy for 5.
                    this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
                }
                else if (shopkeeper.ultra.faction == "Nirwaden")
                {
                    this.buyValue = 3; // at max, buy for 0.
                    this.sellValue = 3; // at max, sell for 0.
                }
                else
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 0; // at max, sell for 0.
                }
            }
            else
            {
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "yeolPod")
        {
            //For All Items
            this.identity = "Yeol Pod";
            this.weight = 1;
            this.size = 6;
            this.description = "The green pod that fell from a yeol tree.";
            this.intForDes = 1;
            this.intDescription = "Yeol pods are most abundant during Bounty; each hold a yeol nut within.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["yeolPodHusk", 1], ["yeolNut", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "yeolPodHusk")
        {
            //For All Items
            this.identity = "Yeol Pod Husk";
            this.weight = 1;
            this.size = 6;
            this.description = "The green husk of a yeol pod.";
            this.intForDes = 19;
            this.intDescription = "This can be used in alchemy to make remedies to certain ailments.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "yeolNut")
        {
            //For All Items
            this.identity = "Yeol Nut";
            this.weight = 0.25;
            this.size = 6;
            this.description = "The nut of a yeol tree.";
            this.intForDes = 0;
            this.intDescription = "A crunchy, buttery nut with a nutty aroma and a particular and desirable aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0.005; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "mimicHead")
        {
            //For All Items
            this.identity = "Mimic Head";
            this.weight = 0.7;
            this.size = 7;
            this.description = "The decapitated head of a mimic.";
            this.intForDes = 18;
            this.intDescription = "This is packed with smooth stringy pearly white filament that acts as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20; // at max, buy for 20.
            this.sellValue = 20; // at max, sell for 20.
        }
        else if (this.type == "mimicFilament")
        {
            //For All Items
            this.identity = "Mimic Filament";
            this.weight = 0.22;
            this.size = 6;
            this.description = "The smooth stringy pearly white filament that makes up the majority of a mimic's anatomy.";
            this.intForDes = 18;
            this.intDescription = "This acts as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 18;
            this.ingredients = [["Mimic Head", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "rawKoobuFlesh")
        {
            //For All Items
            this.identity = "Raw Koobu Flesh";
            this.weight = 0.5;
            this.size = 6;
            this.description = "The raw flesh from a Koobu.";
            this.intForDes = 2;
            this.intDescription = "A small bit of meat coated in a thick layer of blubbery fat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "koobuMeat")
        {
            //For All Items
            this.identity = "Koobu Meat";
            this.weight = 0.45;
            this.size = 7;
            this.description = "The cooked meat of a koobu.";
            this.intForDes = 0;
            this.intDescription = "A very tender, fatty, and flavorful meat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            if (player.raceName == "Freynor")
            {
                this.hunger = 6.5; //satisfies hunger.
            }
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.025; //recoops lost energy.
            this.replenish = 0.0001; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Raw Koobu Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "boulchomLung")
        {
            //For All Items
            this.identity = "Boulchom Lung";
            this.weight = 1.75;
            this.size = 14;
            this.description = "The slimy fleshy lung of a boulchom.";
            this.intForDes = 30;
            this.intDescription = "This is used as a changer in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.75; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22; // at max, buy for 22.
            this.sellValue = 19; // at max, sell for 19.
        }
        else if (this.type == "rawBoulchomFlesh")
        {
            //For All Items
            this.identity = "Raw Boulchom Flesh";
            this.weight = 2;
            this.size = 15;
            this.description = "The raw flesh from a boulchom.";
            this.intForDes = 5;
            this.intDescription = "This is not safe to eat raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "boulchomMeat")
        {
            //For All Items
            this.identity = "Boulchom Meat";
            this.weight = 2;
            this.size = 15;
            this.description = "The cooked meat of a boulchom.";
            this.intForDes = 0;
            this.intDescription = "It is particularly tough and gamey meat, the hint of redeeming flavor that the gameyness provides is squandered by the stringy texture.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = -0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Raw Boulchom Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "mountainFrichMeat")
        {
            //For All Items
            this.identity = "Mountain-Frich Meat";
            this.weight = 2.5;
            this.size = 18;
            this.description = "The cooked flesh of a mountain-frich.";
            this.intForDes = 2;
            this.intDescription = "Cooking it didn't do much to soften it up, but at least it is safe to eat...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Mountain-Frich Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
        }
        else if (this.type == "rawMountainFrichFlesh")
        {
            //For All Items
            this.identity = "Raw Mountain-Frich Flesh";
            this.weight = 3;
            this.size = 18;
            this.description = "The raw flesh from a mountain-frich.";
            this.intForDes = 4;
            this.intDescription = "It is tough, slimy with curdling blood, and finished with an occasional gut worm here or there.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "rawGhoulFlesh")
        {
            //For All Items
            this.identity = "Raw Ghoul Flesh";
            this.weight = 6;
            this.size = 14;
            this.description = "The raw stench exuding green grey flesh of ghoul.";
            this.intForDes = 7;
            this.intDescription = "As ghouls' diet consists largely of carrion, you should probably not eat this. However this can be used in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "nasty";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "ghoulMeat")
        {
            //For All Items
            this.identity = "Ghoul Meat";
            this.weight = 6;
            this.size = 15;
            this.description = "The vile, stench exuding meat of ghoul.";
            this.intForDes = 8;
            this.intDescription = "As ghouls' diet consists largely of carrion and rotten corpses, this is not edible by any means.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "nasty";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Ghoul Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawToadFlesh")
        {
            //For All Items
            this.identity = "Raw Toad Flesh";
            this.weight = 6;
            this.size = 19;
            this.description = "The raw flesh from a giant Vardanian swamp toad.";
            this.intForDes = 0;
            this.intDescription = "The flesh is slimy and smells utterly putrid.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "wartPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "toadMeat")
        {
            //For All Items
            this.identity = "Toad Meat";
            this.weight = 6;
            this.size = 19;
            this.description = "The cooked meat of a giant Vardanian swamp toad.";
            this.intForDes = 0;
            this.intDescription = "It is a rubbery meat with an inediblely leathery skin, it tastes somewhat fatty and sort of muddy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Raw Toad Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "smokedToadMeat")
        {
            //For All Items
            this.identity = "Smoked Toad Meat";
            this.weight = 6;
            this.size = 19;
            this.description = "The smoked meat of a giant Vardanian swamp toad.";
            this.intForDes = 0;
            this.intDescription = "It is a rubbery meat with an inediblely leathery skin, it tastes somewhat fatty, muddy, and very smokey.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Raw Toad Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "hydraHeart")
        {
            //For All Items
            this.identity = "Hydra Heart";
            this.weight = 9;
            this.size = 16;
            this.description = "The heart of a hydra.";
            this.intForDes = 1;
            this.intDescription = "It is said that the very scent of a hydra's poisonous blood can boil your blood. That is clearly untrue since your blood is not boiling.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50; // at max, buy for 50.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 5); // at max, sell for 50.
        }
        else if (this.type == "roastedHydraHeart")
        {
            //For All Items
            this.identity = "Roasted Hydra Heart";
            this.weight = 8.5;
            this.size = 16;
            this.description = "A slow roasted hydra heart.";
            this.intForDes = 0;
            this.intDescription = "Hydra heart tastes tough but has a particularly flavourful punch to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 20; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 18;
            this.ingredients = [["Hydra Heart", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30; // at max, buy for 30.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 5); // at max, sell for 30.
        }
        else if (this.type == "smokedHydraHeart")
        {
            //For All Items
            this.identity = "Smoked Hydra Heart";
            this.weight = 8.8;
            this.size = 16;
            this.description = "A slow smoked hydra heart.";
            this.intForDes = 0;
            this.intDescription = "Smoked hydra heart tastes tough but has a particularly flavourful punch to it; its smokey aroma is amazing!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Hydra Heart", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40; // at max, buy for 40.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 5); // at max, sell for 40.
        }
        else if (this.type == "rawBovineRibs")
        {
            //For All Items
            this.identity = "Raw Bovine Ribs";
            this.weight = 2.5;
            this.size = 14;
            this.description = "The raw rib cut of a bovine.";
            this.intForDes = 7;
            this.intDescription = "The meat may have flesh mites, so it is best not to eat it raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshmites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 12); // at max, sell for 10.
        }
        else if (this.type == "bovineRibs")
        {
            //For All Items
            this.identity = "Bovine Rib Meat";
            this.weight = 2.4;
            this.size = 14;
            this.description = "The cooked rib cut of a bovine.";
            this.intForDes = 0;
            this.intDescription = "The meat is hearty and tender.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 20; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Raw Bovine Ribs", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19; // at max, buy for 19.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 10); // at max, sell for 19.
        }
        else if (this.type == "smokedBovineRibs")
        {
            //For All Items
            this.identity = "Smoked Bovine Rib Meat";
            this.weight = 2.4;
            this.size = 14;
            this.description = "The smoke-cooked rib cut of a bovine.";
            this.intForDes = 0;
            this.intDescription = "The meat is hearty, tender and smokey.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 22; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 9; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0.15; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 22;
            this.ingredients = [["Raw Bovine Ribs", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26; // at max, buy for 26.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 12); // at max, sell for 26.
        }
        else if (this.type == "rawCheshireFlesh")
        {
            //For All Items
            this.identity = "Raw Cheshire Flesh";
            this.weight = 1;
            this.size = 12;
            this.description = "The raw flesh from a cheshire.";
            this.intForDes = 6;
            this.intDescription = "The meat may have flesh mites, so it is best not to eat it raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshmites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "cheshireMeat")
        {
            //For All Items
            this.identity = "Cheshire Meat";
            this.weight = 1;
            this.size = 12;
            this.description = "The cooked meat of a cheshire.";
            this.intForDes = 0;
            this.intDescription = "The meat has a slightly sour bile flavour mixed with a strong and sharp savory flavour...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Cheshire Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "rawHorseFlesh")
        {
            //For All Items
            this.identity = "Raw Horse Flesh";
            this.weight = 5;
            this.size = 17;
            this.description = "The raw flesh from a horse.";
            this.intForDes = 1;
            this.intDescription = "This will likely not sit well in your stomach if eaten raw...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "potentialFoodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "horseMeat")
        {
            //For All Items
            this.identity = "Horse Meat";
            this.weight = 5;
            this.size = 17;
            this.description = "The cooked meat of a horse.";
            this.intForDes = 0;
            this.intDescription = "The meat is tough and hard to chew, but it tastes pretty good.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Raw Horse Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 25);; // at max, buy for 17.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 10); // at max, sell for 17.
        }
        else if (this.type == "mugmulMeat")
        {
            //For All Items
            this.identity = "Mugmul Meat";
            this.weight = 1;
            this.size = 12;
            this.description = "The cooked meat from a mugmul.";
            this.intForDes = 0;
            this.intDescription = "The meat has a sharp meaty flavour, as well as a nutty fattiness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Raw Mugmul Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 25); // at max, buy for 10.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 25); // at max, sell for 10.
        }
        else if (this.type == "rawMugmulFlesh")
        {
            //For All Items
            this.identity = "Raw Mugmul Flesh";
            this.weight = 1;
            this.size = 12;
            this.description = "The raw flesh of a mugmul.";
            this.intForDes = 0;
            this.intDescription = "The flesh is moist and thick with fat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "potentialFoodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "mugmulBrain")
        {
            //For All Items
            this.identity = "Mugmul Brain";
            this.weight = 1;
            this.size = 12;
            if (player.getIntelligence() >= 25)
            {
                this.description = "A squishy pale brain dripping in cerebral fluid.";
            }
            else
            {
                this.description = "The brain of a mugmul.";
            }
            this.intForDes = 0;
            if (player.getIntelligence() >= 25)
            {
                this.intDescription = "It can be used as a former in alchemy. It contains deadly and invasive proteins that slowly kill humans upon entering the body.";
            }
            else if (player.getIntelligence() >= 10)
            {
                this.intDescription = "It is a squishy pale organ dripping in cerebral fluid. It can be used as a former in alchemy.";
            }
            else
            {
                this.intDescription = "It is a squishy pale organ dripping in cerebral fluid.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 1.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "eliktozeola";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 8); // at max, buy for 24.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 5); // at max, sell for 24.
        }
        else if (this.type == "mugmulFur")
        {
            //For All Items
            this.identity = "Mugmul Fur";
            this.weight = 3;
            this.size = 22;
            this.description = "The thick and fuzzy brown curly haired pelt of a mugmul. ";
            this.intForDes = 7;
            this.intDescription = "This type of fur is usually used as a sitting mat by the kerib tribe, it can also be made into clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "horseArmourRemover")
        {
            //For All Items
            this.identity = "Horse Armour Tool";
            this.weight = 0.25;
            this.size = 6;
            this.description = "A tool that is used for unlatching horse armour.";
            this.intForDes = 0;
            this.intDescription = "Use near a horse that you own in order to unequip the armour they are wearing.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "krovhyuzkaHorseArmour")
        {
            //For All Items
            this.identity = "Krovhyuzka Horse Caparison";
            this.weight = 14;
            this.size = 32;
            this.description = "White and black gambeson in the style of house Krovhyuzka, sewn for a horse.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 140 - Math.floor(player.getCharisma() / 2); // at max, buy for 115.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 2); // at max, sell for 115.
        }
        else if (this.type == "vardanianHorseArmour")
        {
            //For All Items
            this.identity = "Vardanian Horse Caparison";
            this.weight = 14;
            this.size = 32;
            this.description = "Red and black gambeson in the style of the national colours of Vardania, sewn for a horse.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 120 - Math.floor(player.getCharisma() / 3); // at max, buy for 105.
            this.sellValue = 80 + Math.floor(player.getCharisma() / 2); // at max, sell for 105.
        }
        else if (this.type == "blueHorseArmour")
        {
            //For All Items
            this.identity = "North Vardanian Horse Caparison";
            this.weight = 14;
            this.size = 32;
            this.description = "Blue and black gambeson in the style of a northern count of Vardania, sewn for a horse.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 125 - Math.floor(player.getCharisma() / 3); // at max, buy for 110.
            this.sellValue = 85 + Math.floor(player.getCharisma() / 2); // at max, sell for 110.
        }
        else if (this.type == "nirwadenHorseArmour")
        {
            //For All Items
            this.identity = "Nirwaden Horse Caparison";
            this.weight = 14;
            this.size = 32;
            this.description = "Red and yellow gambeson in the style of the imperial colours of Nirwaden, sewn for a horse.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 125 - Math.floor(player.getCharisma() / 3); // at max, buy for 110.
            this.sellValue = 85 + Math.floor(player.getCharisma() / 2); // at max, sell for 110.
        }
        else if (this.type == "altezorHorseArmour")
        {
            //For All Items
            this.identity = "Altezor Horse Caparison";
            this.weight = 14;
            this.size = 32;
            this.description = "Gold and black gambeson in the style of the heraldry of house Altezor, sewn for a horse.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 135 - Math.floor(player.getCharisma() / 3); // at max, buy for 120.
            this.sellValue = 95 + Math.floor(player.getCharisma() / 2); // at max, sell for 120.
        }
        else if (this.type == "ghoulHorseArmour")
        {
            //For All Items
            this.identity = "Ghoul Horse Armour";
            this.weight = 170;
            this.size = 32;
            this.description = "Segmented steel armour plates fitted to protect a horse decorated with ghoul pelts.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2100 - Math.floor(player.getCharisma() / 1); // at max, buy for 2050.
            this.sellValue = 1900 + Math.floor(player.getCharisma() / 0.333333333); // at max, sell for 2050.
        }
        else if (this.type == "steelHorseArmour")
        {
            //For All Items
            this.identity = "Steel Horse Armour";
            this.weight = 190;
            this.size = 32;
            this.description = "Thick steel plate armour built for horses.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2300 - Math.floor(player.getCharisma() / 0.16666666666666666666666666666); // at max, buy for 2000.
            this.sellValue = 1900 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 2000.
        }
        else if (this.type == "nechroviteHorseArmour")
        {
            //For All Items
            this.identity = "Nechrovite Horse Armour";
            this.weight = 240;
            this.size = 33;
            this.description = "Thick nechrovite plate armour built for horses.";
            this.intForDes = 1;
            this.intDescription = "Use near a horse that you own in order to equip the armour for them.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "horseArmour";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3200 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 2800.
            this.sellValue = 3700 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 2800.
        }
        else if (this.type == "bovineMammaryGlands")
        {
            //For All Items
            this.identity = "Bovine Mammary Glands";
            this.weight = 1.8;
            this.size = 12;
            this.description = "The milk producing glands from within a bovine's udder. ";
            this.intForDes = 5;
            this.intDescription = "This is used as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
        }
        else if (this.type == "rawNogFlesh")
        {
            //For All Items
            this.identity = "Raw Nog Flesh";
            this.weight = 2;
            this.size = 16;
            this.description = "The slimy reaking flesh of a nog.";
            this.intForDes = 0;
            this.intDescription = "The smell alone makes you want to gag, eating this is out of the question.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "nogMeat")
        {
            //For All Items
            this.identity = "Nog Meat";
            this.weight = 2;
            this.size = 16;
            this.description = "A Mushy, fluid gushing, food-like substance.";
            this.intForDes = 0;
            this.intDescription = "Only the brave would dare to eat such a horrific 'food'.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "potentialFoodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Raw Nog Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawYoungNaapridFlesh")
        {
            //For All Items
            this.identity = "Raw Young-Naaprid Flesh";
            this.weight = 1;
            this.size = 9;
            this.description = "The raw flesh of a sweet and innocent baby naaprid.";
            this.intForDes = 1;
            this.intDescription = "The flesh of a young-naaprid is more tender and supple than that of an adult of the species.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 10); // at max, buy for 19.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 10); // at max sell for 19.
        }
        else if (this.type == "youngNaapridMeat")
        {
            //For All Items
            this.identity = "Young-Naaprid Meat";
            this.weight = 1;
            this.size = 9;
            this.description = "The tender and succulent meat of a sweet and innocent baby naaprid.";
            this.intForDes = 1;
            this.intDescription = "Naaprid Meat is eaten as a luxury meal by some nobility.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Raw Young-Naaprid Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 10); // at max, buy for 24.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 8); // at max sell for 20.
        }
        else if (this.type == "rawNaapridFlesh")
        {
            //For All Items
            this.identity = "Raw Naaprid Flesh";
            this.weight = 8;
            this.size = 22;
            this.description = "A large hunk of flesh from a naaprid.";
            this.intForDes = 4;
            this.intDescription = "It would be rather difficult to eat this raw, plus it would be sort of, well, raw...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 8.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max sell for 7.
        }
        else if (this.type == "naapridMeat")
        {
            //For All Items
            this.identity = "Naaprid Meat";
            this.weight = 8;
            this.size = 22;
            this.description = "A sizable cut of meat from a naaprid: the cooked meat has strong gamey flavour and a distinct savory taste.";
            this.intForDes = 4;
            this.intDescription = "This amount of food could tide someone over for a while!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 30; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Raw Naaprid Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 34 - Math.floor(player.getCharisma() / 8); // at max, buy for 28.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 5); // at max sell for 26.
        }
        else if (this.type == "naapridPelt")
        {
            //For All Items
            this.identity = "Naaprid Pelt";
            this.weight = 3;
            this.size = 22;
            this.description = "The thick matted fur pelt of a naaprid.";
            this.intForDes = 5;
            this.intDescription = "This is a good material to form leather out of.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 8); // at max, buy for 15.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 8); // at max, sell for 13.
        }
        else if (this.type == "naapridHorn")
        {
            //For All Items
            this.identity = "Naaprid Horn";
            this.weight = 1;
            this.size = 14;
            this.description = "A curved horn from a naaprid.";
            this.intForDes = 7;
            this.intDescription = "In a powdered form this can be used to thicken certain mixtures.";
            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
        }
        else if (this.type == "zarbuPelt")
        {
            //For All Items
            this.identity = "Zarbu Pelt";
            this.weight = 4.5;
            this.size = 33;
            this.description = "The short and sleek haired black and white striped pelt of a zarbu.";
            this.intForDes = 5;
            this.intDescription = "This can be made into clothing usually worn by the Kellish Karib Tribe.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 43 - Math.floor(player.getCharisma() / 6); // at max, buy for 35.
            this.sellValue = 33 + Math.floor(player.getCharisma() / 25); // at max, sell for 35.
        }
        else if (this.type == "zarbuTuft")
        {
            //For All Items
            this.identity = "Zarbu Tuft";
            this.weight = 0.33;
            this.size = 8;
            this.description = "The long bristly white and black hairs from a zarbu's tail.";
            this.intForDes = 5;
            this.intDescription = "This can be made into clothing usually worn by the Kellish Karib Tribe.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 10); // at max, buy for 6.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 20); // at max, sell for 6.
        }
        else if (this.type == "rawZarbuFlesh")
        {
            //For All Items
            this.identity = "Raw Zarbu Flesh";
            this.weight = 4;
            this.size = 19;
            this.description = "A large hunk of meat from a zarbu.";
            this.intForDes = 2;
            this.intDescription = "Zarbu flesh would take a lot of effort to eat raw, but would most likely be safe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 25); // at max, buy for 8.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 25); // at max, sell for 8.
        }
        else if (this.type == "zarbuMeat")
        {
            //For All Items
            this.identity = "Zarbu Meat";
            this.weight = 4;
            this.size = 19;
            this.description = "Cooked meat from a zarbu.";
            this.intForDes = 1;
            this.intDescription = "It is tough and has a meaty flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Raw Zarbu Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 15); // at max, buy for 22.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 6); // at max, sell for 22.
        }
        else if (this.type == "rawDrileFlesh")
        {
            //For All Items
            this.identity = "Raw Drile Flesh";
            this.weight = 5.5;
            this.size = 21;
            this.description = "A big slice of drile flesh.";
            this.intForDes = 3;
            this.intDescription = "Eating drile flesh raw will make you sick to your stomach.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "drileMeat")
        {
            //For All Items
            this.identity = "Drile Meat";
            this.weight = 5;
            this.size = 21;
            this.description = "A big roasted slice of drile meat.";
            this.intForDes = 3;
            this.intDescription = "Drile flesh is somewhat rubbery but also has a sort of tender aspect to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 19; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Drile Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 23 - Math.floor(player.getCharisma() / 12); // at max, buy for 19.
            this.sellValue = 17 + Math.floor(player.getCharisma() / 25); // at max, sell for 19.
        }
        else if (this.type == "drileKidney")
        {
            //For All Items
            this.identity = "Drile Kidney";
            this.weight = 3.5;
            this.size = 21;
            this.description = "A kidney that is composed of boulbous slimy orangish pink sections connected together by a fatty membrane.";
            this.intForDes = 3;
            this.intDescription = "It smells bad enough as it is, don't even think about eating it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -1; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 8); // at max, sell for 14.
        }
        else if (this.type == "acidifiedDrileKidney")
        {
            //For All Items
            this.identity = "Acidified Drile Kidney";
            this.weight = 2.25;
            this.size = 20;
            this.description = "The kidney of a drile melted with torper venom.";
            this.intForDes = 3;
            this.intDescription = "The acidified kidney is gooey elastic and sticky; It is used as both a powerful catalyst and as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 23;
            this.ingredients = [["Drile Kidney", 2], ["Torper Venom Sac", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 8); // at max, buy for 44.
            this.sellValue = 29 + Math.floor(player.getCharisma() / 3); // at max, sell for 44.
        }
        else if (this.type == "drileSkin")
        {
            //For All Items
            this.identity = "Drile Skin";
            this.weight = 11;
            this.size = 20;
            this.description = "The rugged and bumpy scaled hide of a drile.";
            this.intForDes = 13;
            this.intDescription = "Drile skin can be used to make a light leather armour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 39 - Math.floor(player.getCharisma() / 25); // at max, buy for 37.
            this.sellValue = 29 + Math.floor(player.getCharisma() / 6); // at max, sell for 37.
        }
        else if (this.type == "basiliskScale")
        {
            //For All Items
            this.identity = "Basilisk Scale";
            this.weight = 1;
            this.size = 7;
            this.description = "The brownish orange scale of a basilisk.";
            this.intForDes = 0;
            if (player.getIntelligence() < 17)
            {
                this.intDescription = "Everyone one knows that looking at a basilisk will turn you to stone; try not to look too long at this scale, and make sure to squint...";
            }
            else if (player.getIntelligence() < 26)
            {
                this.intDescription = "Dead basilisks can not petrify you by any means so this should be safe to look at.";
            }
            else
            {
                this.intDescription = "Looking at a basilisk is not what petrifies you, so there is nothing to worry about in keeping this scale around...";
            }


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 550 - Math.floor(player.getCharisma() / 0.1666); // at max, buy for 250.
            this.sellValue = 150 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 250.
        }
        else if (this.type == "basiliskEye")
        {
            //For All Items
            this.identity = "Basilisk Eye";
            this.weight = 5;
            this.size = 8;
            this.description = "A glistening yellowy eye with a long black pupil.";
            this.intForDes = 0;
            if (player.getIntelligence() < 17)
            {
                this.intDescription = "Careful, try not to touch it with your hands or look at it, you could die! Basilisks are poisonous!!!";
            }
            else if (player.getIntelligence() < 26)
            {
                this.intDescription = "Contrary to popular belief, basilisk eyes are not poisonous or even the least bit dangerous to touch or look at.";
            }
            else
            {
                this.intDescription = "It is the gaze of a living basilisk that gives the eyes the power to petrify, but the residual magic in the eyes can be harnessed for alchemy.";
            }


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 800 - Math.floor(player.getCharisma() / 0.1666); // at max, buy for 500.
            this.sellValue = 400 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 500.
        }
        else if (this.type == "basiliskFang")
        {
            //For All Items
            this.identity = "Basilisk Fang";
            this.weight = 3;
            this.size = 8;
            this.description = "A long curved fang ripe with an orangish redish brown venom.";
            this.intForDes = 20;
            this.intDescription = "Basilisk fangs are so durable and sharp that they can pierce stone with little effort; basilisk venom is the most dangerous in the world.";


            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 900 - Math.floor(player.getCharisma() / 0.1666); // at max, buy for 600.
            this.sellValue = 500 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 600.
        }
        else if (this.type == "smlBlackBearPelt")
        {
            //For All Items
            this.identity = "Black Bear Pelt";
            this.weight = 2;
            this.size = 20;
            this.description = "The pelt of a black bear.";
            this.intForDes = 3;
            this.intDescription = "This can be used to make bear fur apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 8); // at max, buy for 19.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 6); // at max, sell for 19.
        }
        else if (this.type == "medBlackBearPelt")
        {
            //For All Items
            this.identity = "Black Bear Pelt";
            this.weight = 4;
            this.size = 33;
            this.description = "The pelt of a large black bear.";
            this.intForDes = 3;
            this.intDescription = "This can be used to make bear fur apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 34 - Math.floor(player.getCharisma() / 5); // at max, buy for 24.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 5); // at max, sell for 24.
        }
        else if (this.type == "lrgBlackBearPelt")
        {
            //For All Items
            this.identity = "Elder Black Bear Pelt";
            this.weight = 13;
            this.size = 65;
            this.description = "The pelt of an elder black bear.";
            this.intForDes = 3;
            this.intDescription = "This can be used to make the finest bear fur apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 214 - Math.floor(player.getCharisma() / 1); // at max, buy for 164.
            this.sellValue = 113 + Math.floor(player.getCharisma() / 1); // at max, sell for 163.
        }
        else if (this.type == "motylekhWing")
        {
            //For All Items
            this.identity = "Motylekh Wing";
            this.weight = 6.5;
            this.size = 34;
            this.description = "The soft, dusty, bristle-tipped wing of a motylekh.";
            this.intForDes = 2;
            this.intDescription = "The wings are full of psychodelic fear dust that when inhaled causes you to become weak, weary, delusional, and afraid...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 10); // at max, buy for 45.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 10); // at max, sell for 45.
        }
        else if (this.type == "motylekhWingBundle")
        {
            //For All Items
            this.identity = "Motylekh Wing Bundle";
            this.weight = 39;
            this.size = 44;
            this.description = "A bundle of soft, dusty, bristle-tipped motylekh wings.";
            this.intForDes = 2;
            this.intDescription = "The wings are full of psychodelic fear dust that when inhaled causes you to become weak, weary, delusional, and afraid...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Motylekh Wing", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 300 - Math.floor(player.getCharisma() / 2); // at max, buy for 275.
            this.sellValue = 240 + Math.floor(player.getCharisma() / 2); // at max, sell for 265.
        }
        else if (this.type == "bulkMotylinka")
        {
            //For All Items
            this.identity = "Bulk Motylinka";
            this.weight = 34;
            this.size = 41;
            this.description = "A large quantity of motylinka, an ultra soft material akin to silken, velvetty, wool.";
            this.intForDes = 20;
            this.intDescription = "Motylinka is made from clipped and boiled motylekh wing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Motylekh Wing Bundle", 1], ["Vardanian Pot of Water", 8]];
            this.biproducts = [[new Item("vardanianPot", false), 8]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 440 - Math.floor(player.getCharisma() / 1); // at max, buy for 390.
            this.sellValue = 340 + Math.floor(player.getCharisma() / 1); // at max, sell for 390.
        }
        else if (this.type == "motylinka")
        {
            //For All Items
            this.identity = "Motylinka";
            this.weight = 2;
            this.size = 41;
            this.description = "An ultra soft material akin to silken, velvetty, wool.";
            this.intForDes = 0;
            this.intDescription = "Motylinka is considered to be one of the finest materials in the land for use in crafting bedding, and worn apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 18;
            this.intForCraft = 15;
            this.ingredients = [["Bulk Motylinka", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28 - Math.floor(player.getCharisma() / 50); // at max, buy for 27.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 25); // at max, sell for 27.
        }
        else if (this.type == "griffinPelt")
        {
            //For All Items
            this.identity = "Griffin Pelt";
            this.weight = 11;
            this.size = 40;
            this.description = "The pelt of a griffin.";
            this.intForDes = 0;
            this.intDescription = "The fur is short, sleek and soft.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 400 - Math.floor(player.getCharisma() / 1); // at max, buy for 350.
            this.sellValue = 300 + Math.floor(player.getCharisma() / 1); // at max, sell for 350.
        }
        else if (this.type == "griffinHeadSml")
        {
            //For All Items
            this.identity = "Griffin Head";
            this.weight = 28;
            this.size = 33;
            this.description = "The severed head of a griffin.";
            this.intForDes = 0;
            this.intDescription = "A testament to the heroism and might of the one who slayed such a ferocious beast.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 130; // at max, buy for 130.
            this.sellValue = 130; // at max, sell for 130.
        }
        else if (this.type == "griffinHeadMed")
        {
            //For All Items
            this.identity = "Griffin Head";
            this.weight = 70;
            this.size = 41;
            this.description = "The severed head of a large griffin.";
            this.intForDes = 0;
            this.intDescription = "A testament to the heroism and might of the one who slayed such a ferocious beast.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 275; // at max, buy for 275.
            this.sellValue = 275; // at max, sell for 275.
        }
        else if (this.type == "griffinHeadLrg")
        {
            //For All Items
            this.identity = "Griffin Head";
            this.weight = 166;
            this.size = 67;
            this.description = "The severed head of a massive griffin.";
            this.intForDes = 0;
            this.intDescription = "A testament to the heroism and might of the one who slayed such a ferocious beast.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 600; // at max, buy for 600.
            this.sellValue = 600; // at max, sell for 600.
        }
        else if (this.type == "rawHumanFlesh")
        {
            //For All Items
            if (player.cannibalism == true || player.getIntelligence() >= 28 && player.matureContentFilter == false)
            {
                this.identity = "Raw Human Flesh";
                this.weight = 1;
                this.size = 9;
                this.description = "A cut of flesh from a human.";
                this.intForDes = 2;
                if (player.form == false)
                {
                    this.intDescription = "Eating human flesh brands you a cannibal; you can sell it at markets: most people assume it is from another sort of animal";
                }
                else
                {
                    this.intDescription = "Human flesh is oftentimes the most delectable to mythical beasts of lore.";
                }

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                if (player.wendigo == true)
                {
                    this.hunger = 100; //satisfies hunger.
                    this.thirst = 40; //quenches thirst.
                }
                else
                {
                    this.hunger = 1; //satisfies hunger.
                    this.thirst = 0.25; //quenches thirst.
                }

                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = 0.1; //restores will.

                //ability
                if (player.form == false)
                {
                    this.ability = "cannibal";
                }
                else
                {
                    this.ability = "none";
                }
            }
            else
            {
                this.identity = "Raw Flesh";
                this.weight = 1;
                this.size = 9;
                this.description = "A cut of uncooked flesh.";
                this.intForDes = 0;
                this.intDescription = "It is not clear what animal this flesh is from, but it looks fine enough to eat.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0.25; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = 0.1; //restores will.

                //ability
                if (player.form == false)
                {
                    this.ability = "cannibal";
                }
                else
                {
                    this.ability = "none";
                }
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "humanMeat")
        {
            //For All Items
            if (player.cannibalism == true || player.getIntelligence() >= 28 && player.matureContentFilter == false)
            {
                this.identity = "Human Meat";
                this.weight = 1;
                this.size = 9;
                this.description = "A cut of cooked meat from a human.";
                this.intForDes = 2;
                if (player.form == false)
                {
                    this.intDescription = "Eating human meat brands you a cannibal; you can sell it at markets: most people assume it is from another sort of animal";
                }
                else
                {
                    this.intDescription = "The meat is lean, but flavorful.";
                }

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                if (player.wendigo == true)
                {
                    this.hunger = 60; //satisfies hunger.
                    this.thirst = 20; //quenches thirst.
                }
                else
                {
                    this.hunger = 9; //satisfies hunger.
                    this.thirst = 0.2; //quenches thirst.
                }
                this.warmth = 4; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.2; //recoops lost energy.
                this.replenish = 0.05; //restores will.

                //Crafting
                this.yield = 1;
                this.intForCraft = 4;
                this.ingredients = [["Raw Human Flesh", 1]];

                //ability
                if (player.form == false)
                {
                    this.ability = "cannibalSatiation";
                }
                else
                {
                    this.ability = "satiation";
                }
            }
            else
            {
                this.identity = "Meat";
                this.weight = 1;
                this.size = 9;
                this.description = "A cut of cooked meat.";
                this.intForDes = 0;
                this.intDescription = "Lean meat that is tender, and that smells quite flavorful.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 9; //satisfies hunger.
                this.thirst = 0.2; //quenches thirst.
                this.warmth = 4; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.2; //recoops lost energy.
                this.replenish = 0.05; //restores will.

                //Crafting
                this.yield = 1;
                this.intForCraft = 4;
                this.ingredients = [["Raw Flesh", 1]];

                //ability
                if (player.form == false)
                {
                    this.ability = "cannibalSatiation";
                }
                else
                {
                    this.ability = "satiation";
                }
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "rawBearFlesh")
        {
            //For All Items
            this.identity = "Raw Bear Flesh";
            this.weight = 3.5;
            this.size = 15;
            this.description = "A hunk of meat from a bear.";
            this.intForDes = 2;
            this.intDescription = "A bear's flesh is often unsafe to eat raw due to the parasites that are common in some of the creatures that they eat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
        }
        else if (this.type == "bearMeat")
        {
            //For All Items
            this.identity = "Bear Meat";
            this.weight = 3.5;
            this.size = 17;
            this.description = "Cooked meat from a bear.";
            this.intForDes = 1;
            this.intDescription = "The meat is rather tough, but its strong meaty flavour makes up for it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 21; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Raw Bear Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 25); // at max, buy for 19.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 6); // at max, sell fo.
        }
        else if (this.type == "rawBearTongue")
        {
            //For All Items
            this.identity = "Raw Bear Tongue";
            this.weight = 2;
            this.size = 15;
            this.description = "A bear's tongue; it is thick, fleshy and covered with sticky moist partially dried saliva.";
            this.intForDes = 5;
            this.intDescription = "Bear tongue is an important ingredient in some alchemy recipes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.getIntelligence() >= 20)
            {
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            }
            this.hunger = 1; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 1; //restores will.

            //ability
            this.ability = "potentialFoodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 12); // at max, buy for 15.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 10); // at max, sell for 15.
        }
        else if (this.type == "bearTongue")
        {
            //For All Items
            this.identity = "Bear Tongue";
            this.weight = 2;
            this.size = 17;
            this.description = "Cooked bear tongue.";
            this.intForDes = 1;
            this.intDescription = "Bear tongue is an important part of a healthy diet, its very nutritious!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Raw Bear Tongue", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 13.
        }
        else if (this.type == "rawYioshkFlesh")
        {
            //For All Items
            this.identity = "Raw Yioshk Flesh";
            this.weight = 2;
            this.size = 13;
            this.description = "A thick cut of meat from a Yioshk.";
            this.intForDes = 5;
            this.intDescription = "Yioshks are ravenous hunters but will also stoop to scavenging if the carrion is available, thus yioshk flesh is often infested with mites.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "yioshkMeat")
        {
            //For All Items
            this.identity = "Yioshk Meat";
            this.weight = 2;
            this.size = 13;
            this.description = "The cooked meat from a yioshk.";
            this.intForDes = 2;
            this.intDescription = "This meat is safe to eat, but it is tough and sinewous to an extent that doing so is best avoided.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Yioshk Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "rawBerulnFlesh")
        {
            //For All Items
            this.identity = "Raw Beruln Flesh";
            this.weight = 2;
            this.size = 17;
            this.description = "A chunk of rib flesh from a beruln.";
            this.intForDes = 2;
            this.intDescription = "The meat is tough and sticky with blood. It is going to be a challenge to eat it in this state...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "berulnMeat")
        {
            //For All Items
            this.identity = "Beruln Meat";
            this.weight = 2;
            this.size = 17;
            this.description = "Cooked rib meat from a beruln.";
            this.intForDes = 1;
            this.intDescription = "The meat is too tough to chew comfortably...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Beruln Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "gargoyleHeart")
        {
            //For All Items
            this.identity = "Gargoyle Heart";
            this.weight = 9;
            this.size = 15;
            this.description = "The dark sinewy black blooded heart of a gargoyle.";
            this.intForDes = 0;
            if (player.getIntelligence < 13)
            {
                this.intDescription = "Everyone knows that eating a gargoyle heart will give you magical powers...";
            }
            else
            {
                this.intDescription = "Eating a gargoyle heart will cause your body to become petrified, but will also fill you with magical energy.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = -20; //warms player.
            this.heal = -20; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = 10; //restores will.

            //ability
            this.ability = "gargoyleHeart";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 399; // at max, buy for 399.
            this.sellValue = 399; // at max, sell for 399.
        }
        else if (this.type == "griffinHeart")
        {
            //For All Items
            this.identity = "Griffin Heart";
            this.weight = 20;
            this.size = 20;
            this.description = "The thick, blood-red heart of a griffin.";
            this.intForDes = 0;
            if (player.getIntelligence < 14)
            {
                this.intDescription = "If you put a dead calf into the heart of a griffin it will turn into gold...";
            }
            else
            {
                this.intDescription = "This acts as a former in alchemy. Griffin hearts do not turn dead calves into gold...";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 1; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 2; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250; // at max, buy for 250.
            this.sellValue = 250; // at max, sell for 250.
        }
        else if (this.type == "roastedGriffinHeart")
        {
            //For All Items
            this.identity = "Roasted Griffin Heart";
            this.weight = 19;
            this.size = 20;
            this.description = "The roasted, hearty, and meaty heart of a griffin.";
            this.intForDes = 1;
            if (player.getIntelligence < 15)
            {
                this.intDescription = "It is said that eating Griffin heart will make you stronger...";
            }
            else
            {
                this.intDescription = "Cooking the heart of a griffin neutralizes its alchemic properties.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 20; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 8; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Griffin Heart", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 124 - Math.floor(player.getCharisma() / 2); // at max, buy for 99.
            this.sellValue = 99; // at max, sell for 99.
        }
        else if (this.type == "yaihefBerries")
        {
            //For All Items
            this.identity = "Yaihef Berries";
            this.weight = 0.8;
            this.size = 7;
            this.description = "Juicy light blue berries with a plumlike texture.";
            this.intForDes = 2;
            this.intDescription = "They're the quenchiest!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 2; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "akerBerries")
        {
            //For All Items
            this.identity = "Aker Berries";
            this.weight = 0.5;
            this.size = 7;
            this.description = "Scrumptious red berrys with a sweet and tangy flavour!";
            this.intForDes = 6;
            this.intDescription = "These berries have no interesting effects.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "porstolBerries")
        {
            //For All Items
            this.identity = "Porstol Berries";
            this.weight = 0.3;
            this.size = 7;
            this.description = "Bitter, smooth-skinned berries that have a noxious smell.";
            this.intForDes = 1;
            this.intDescription = "They are poisonous...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.45; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "tyrniBerries")
        {
            //For All Items
            this.identity = "Tyrni Berries";
            this.weight = 0.6;
            this.size = 9;
            this.description = "Sour berries with a mild sweetness that is accompanied by a depth of subtle aromatic flavours.";
            this.intForDes = 14;
            this.intDescription = "Also called sea buckthorn berries because the bushes are covered in sharp barbed needle-like thorns.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = -0.45; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "callopBerries")
        {
            //For All Items
            this.identity = "Callop Berries";
            this.weight = 0.5;
            this.size = 7;
            this.description = "Scrumptious peachy berries with a strong sweet flavor and a disturbingly persistent aftertaste!";
            this.intForDes = 3;
            this.intDescription = "These berries are commonly found in the temperate woodlands of Thengaria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "darbBerries")
        {
            //For All Items
            this.identity = "Darb Berries";
            this.weight = 0.6;
            this.size = 7;
            this.description = "Berries that have a thick gleaming transparent skin, they appear to be translucent orbs of orange fluid.";
            this.intForDes = 15;
            this.intDescription = "These berries are highly toxic, but certain alchemical combinations can render benefit from them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = -1; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "poisonIII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 3.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 12); // at max, sell for 4.
        }
        else if (this.type == "crilkFruit")
        {
            //For All Items
            this.identity = "Crilk";
            this.weight = 1.4;
            this.size = 8;
            this.description = "The fruit of the crilk plant; it has a rubbery skin that does not break easily.";
            this.intForDes = 0;
            if (player.getIntelligence() >= 7)
            {
                this.intDescription = "It is filled with a thick gooey liquid with little black seeds floating in it; it is poisonous to eat.";
            }
            else
            {
                this.intDescription = "It is filled with a thick gooey liquid with little black seeds floating in it; it tastes sour.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.2; //satisfies hunger.
            this.thirst = 3.2; //quenches thirst.
            this.warmth = -2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.24; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "poisonIII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "bequonFruit")
        {
            //For All Items
            this.identity = "Bequon";
            this.weight = 2.25;
            this.size = 14;
            this.description = "A bumpy purple fruit that is sweet, tender and extremely juicy!";
            this.intForDes = 1;
            this.intDescription = "Bequon can be juiced and drunk as a beverage, or simply eated whole as a whole fruit.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, sell for 10.
        }
        else if (this.type == "splitEisyncryneFruit")
        {
            //For All Items
            this.identity = "Split Eisyncryne";
            this.weight = 1.3;
            this.size = 9;
            this.description = "A dark, rich, thick, fleshy fruit with numerous crunchy pinkish white seeds throughout it.";
            this.intForDes = 0;
            this.intDescription = "The flavour is sweet and deep-bodied, with some very mild acidity to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0.25; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 10); // at max, sell for 8.
        }
        else if (this.type == "pochalPods")
        {
            //For All Items
            this.identity = "Pochal Pods";
            this.weight = 0.75;
            this.size = 10;
            this.description = "Fibrous and stringy green pods that hold the soft immature seeds of the pochal bush.";
            this.intForDes = 4;
            this.intDescription = "These pods can be boiled and then eaten.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "boiledPochalPods")
        {
            //For All Items
            this.identity = "Boiled Pochal Pods";
            this.weight = 0.75;
            this.size = 10;
            this.description = "A substantive and healthful vegetable with a firm texture.";
            this.intForDes = 4;
            this.intDescription = "Eat your boiled pochal kids!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "wegRoot")
        {
            //For All Items
            this.identity = "Weg Root";
            this.weight = 11;
            this.size = 14;
            this.description = "A hard dark root with little wirey root hairs.";
            this.intForDes = 4;
            this.intDescription = "Weg root is extremely bitter and fibrous raw, it is mostly used for curing certain sicknesses. It is also eaten as a food item by some kellish tribes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 15); // at max, buy for 10.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, sell for 10.
        }
        else if (this.type == "roastedWegRoot")
        {
            //For All Items
            this.identity = "Roasted Weg Root";
            this.weight = 10;
            this.size = 14;
            this.description = "A stringy grainy roasted root that has a strong bitter flavor.";
            this.intForDes = 1;
            this.intDescription = "This can be broken down into more appropriately sized pieces.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Weg Root", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "roastedWegRootChunks")
        {
            //For All Items
            this.identity = "Roasted Weg Root Chunks";
            this.weight = 1.65;
            this.size = 9;
            this.description = "Reasonably sized hunks of stringy bitter root.";
            this.intForDes = 4;
            this.intDescription = "Nobody likes the taste, if someone says they do they are probably lying.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 5;
            this.ingredients = [["Roasted Weg Root", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "tialoFrond")
        {
            //For All Items
            this.identity = "Tialo Frond";
            this.weight = 0.22;
            this.size = 13;
            this.description = "The sleek muddied green frond of a tialo plant. It has a crisp watery taste with a slightly bitter aftertaste.";
            this.intForDes = 2;
            this.intDescription = "Tialo is commonly eaten by the northern nirwaden people in their regional cuisine.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.05; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "steamedTialo")
        {
            //For All Items
            this.identity = "Steamed Tialo";
            this.weight = 0.9;
            this.size = 13;
            this.description = "A hearty wilted green with a mildly bitter aftertaste.";
            this.intForDes = 2;
            this.intDescription = "Tialo is commonly eaten by the northern nirwaden people in their regional cuisine.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.2; //satisfies hunger.
            this.thirst = 1.2; //quenches thirst.
            this.warmth = 0.55; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 5;
            this.intForCraft = 3;
            this.ingredients = [["Tialo Frond", 15], ["Bucket of Water", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "aktaltlFrond")
        {
            //For All Items
            this.identity = "Aktaltl Frond";
            this.weight = 2.2;
            this.size = 13;
            this.description = "The long frondolous green frond of an Aktaltl plant. It has a slightly sweet taste to it, but is too fibrous to be at all appetizing.";
            this.intForDes = 6;
            this.intDescription = "This frond is believed to remedy certain ailments, particularly colic.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "colicAway";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "boiledAktaltlFrond")
        {
            //For All Items
            this.identity = "Boiled Aktaltl Frond";
            this.weight = 2.2;
            this.size = 13;
            this.description = "A mildly sweet wilted green that is healthful to eat.";
            this.intForDes = 6;
            this.intDescription = "This frond no longer has any medical properties when it is cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 14;
            this.intForCraft = 2;
            this.ingredients = [["Aktaltl Frond", 14], ["Kellish Clay Pot of Water", 1]];
            this.biproducts = [[new Item("kellishClayPot", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "aktaltlRoot")
        {
            //For All Items
            this.identity = "Aktaltl Root";
            this.weight = 2.2;
            this.size = 13;
            this.description = "A long yellowy beige tuber.";
            this.intForDes = 1;
            this.intDescription = "This is a staple starch in the diet of many of the various southern kellish tribes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "roastedAktaltlRoot")
        {
            //For All Items
            this.identity = "Roasted Aktaltl Root";
            this.weight = 2.2;
            this.size = 13;
            this.description = "A sweet, tender and starchy tuber.";
            this.intForDes = 1;
            this.intDescription = "This is a staple starch in the diet of many of the various southern kellish tribes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Aktaltl Root", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 2.
            this.sellValue = 4; // at max, sell for 2.
        }
        else if (this.type == "laumin")
        {
            //For All Items
            this.identity = "Laumin";
            this.weight = 0.002;
            this.size = 6;
            this.description = "A stem with a cluster of neatly ordered laumin flowers.";
            this.intForDes = 10;
            this.intDescription = "This acts as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "eisyncrynePlant")
        {
            //For All Items
            this.identity = "Eisyncryne Membrane Curtain";
            this.weight = 7;
            this.size = 15;
            this.description = "A spined tubular curtain of plantlike fibrous membrane.";
            this.intForDes = 30;
            this.intDescription = "This acts as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "korceidaFlower")
        {
            //For All Items
            this.identity = "Korceida Flower";
            this.weight = 0.22;
            this.size = 6;
            this.description = "A red petalled flower with light pollen that grows in the thengan woodlands.";
            this.intForDes = 10;
            this.intDescription = "This acts as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "korceidaLeaf")
        {
            //For All Items
            this.identity = "Korceida Leaf";
            this.weight = 0.01;
            this.size = 4;
            this.description = "A smooth and silky thin green leaf.";
            this.intForDes = 2;
            this.intDescription = "These can be used to give Thengan soups and stews a hearty herbal aromatic.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "palntFlower")
        {
            //For All Items
            this.identity = "Palnt Flower";
            this.weight = 0.001;
            this.size = 6;
            this.description = "One flower comprised of many small white flowers.";
            this.intForDes = 20;
            this.intDescription = "Although this is poisoness to eat, its poison can be neutralized when mixed with other certain alchemic ingredients. It serves as an amplifier.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "palntRoot")
        {
            //For All Items
            this.identity = "Palnt Root";
            this.weight = 0.6;
            this.size = 7;
            this.description = "A light tannish coloured root that is crunchy and relatively bland.";
            this.intForDes = 2;
            this.intDescription = "When cooked palnt root is chalky, flavorless and starchy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.45; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "boiledPalntRoot")
        {
            //For All Items
            this.identity = "Boiled Palnt Root";
            this.weight = 0.8;
            this.size = 7;
            this.description = "A light tannish coloured root that is crunchy and relatively bland.";
            this.intForDes = 2;
            this.intDescription = "When cooked palnt root is chalky, flavorless and starchy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 9;
            this.intForCraft = 3;
            this.ingredients = [["Palnt Root", 9], ["Bucket of Water", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "wightbloomBerries")
        {
            //For All Items
            this.identity = "Wightbloom Berries";
            this.weight = 0.62;
            this.size = 9;
            this.description = "Elongated, grey, ovalular berries that are wrinkled along their length.";
            this.intForDes = 38;
            this.intDescription = "These berries contain an enzyme that temporarily stops your body from producing natural heat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.getIntelligence() >= 38)
            {
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            }
            this.hunger = 1.2; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = -26; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 10); // at max, sell for 7.
        }
        else if (this.type == "luufBerries")
        {
            //For All Items
            this.identity = "Luuf Berries";
            this.weight = 0.24;
            this.size = 5;
            this.description = "Little green berries that grow in the northern plains; they have a strongly plant-like bitter taste.";
            this.intForDes = 10;
            this.intDescription = "These berries are poisoness and should not be eaten.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "lelBerries")
        {
            //For All Items
            this.identity = "Lel Berries";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A bunch of translucent yellow berries; they taste sweet and pop open when they're bit into.";
            this.intForDes = 20;
            this.intDescription = "Lel berries contain chemicals that mimic adrenaline and thus produce an energy rush when eaten.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -1.5; //satisfies hunger.
            this.thirst = -0.5; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = -0.5; //heals health.
            this.generation = 3.5; //recoops lost energy.
            this.replenish = -0.5; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "bushkaBerries")
        {
            //For All Items
            this.identity = "Bushka Berries";
            this.weight = 0.1;
            this.size = 6;
            this.description = "Little white berries that are mildly sweet and have a weirdly exotic aftertaste.";
            this.intForDes = 10;
            this.intDescription = "Bushka plants only live in cold and snowy climates, they also appear in warmer climates during the winter.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "driedPluttBerries")
        {
            //For All Items
            this.identity = "Dried Plutt Berries";
            this.weight = 0.7;
            this.size = 7;
            this.description = "Sweet chewy and flavorful dried berries.";
            this.intForDes = 6;
            this.intDescription = "These make an excellent dessert when served with honey.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Plutt Berries", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 12); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "driedPluttBerriesWithHoney")
        {
            //For All Items
            this.identity = "Dried Plutt Berries with Honey";
            this.weight = 0.9;
            this.size = 8;
            this.description = "Sweet chewy and flavorful dried berries coated in fresh honey.";
            this.intForDes = 1;
            this.intDescription = "The honey really compliments the plutt beriies' flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 3;
            this.ingredients = [["Dried Plutt Berries", 6], ["Honey", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 12); // at max, buy for 10.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 25); // at max, sell for 10.
        }
        else if (this.type == "pluttBerries")
        {
            //For All Items
            this.identity = "Plutt Berries";
            this.weight = 1;
            this.size = 7;
            this.description = "Juicy, plump, and sweet berries about the size of a small child's fist.";
            this.intForDes = 6;
            this.intDescription = "These make an excellent dessert when dried and served with honey.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "chyoulBerries")
        {
            //For All Items
            this.identity = "Chyoul Berries";
            this.weight = 0.4;
            this.size = 7;
            this.description = "Chyoul berries are sweet with a thick throat coating fruity aftertaste.";
            this.intForDes = 0;
            this.intDescription = "They are extremely refreshing.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.6; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.06; //recoops lost energy.
            this.replenish = 0.4; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "cranberries")
        {
            //For All Items
            this.identity = "Cranberries";
            this.weight = 0.63;
            this.size = 7;
            this.description = "Bitter and sour tasting red berries.";
            this.intForDes = 0;
            this.intDescription = "They are sort of hard.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.25; //satisfies hunger.
            this.thirst = 0.01; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.1; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "iemaBerries")
        {
            //For All Items
            this.identity = "Iema Berries";
            this.weight = 1.2;
            this.size = 7;
            this.description = "Large succulent magenta coloured berries that have a distinctly sweet yet complex flavour.";
            this.intForDes = 7;
            this.intDescription = "These berries grow specifically in eastern and northeastern temperate climates.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.6; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.01; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "laicaumBerries")
        {
            //For All Items
            this.identity = "Laicaum Berries";
            this.weight = 0.12;
            this.size = 7;
            this.description = "Plump berries with a black outer skin that contains a squishy translucent flesh.";
            this.intForDes = 11;
            this.intDescription = "These are poisonous to consume and are venemous as well.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "laicaumBranch")
        {
            //For All Items
            this.identity = "Laicaum Branch";
            this.weight = 0.41;
            this.size = 7;
            this.description = "A branch with numerous grey leaves that give your nose a burning sensation with its powerful scent.";
            this.intForDes = 2;

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.getIntelligence() >= 8)
            {
                this.intDescription = "The thin transparent fluid in the leaves can promote healing when applied directly to a wound.";
                this.hunger = 0; //satisfies hunger.
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.thirst = 0; //quenches thirst.
                this.heal = 0.26; //heals health.
            }
            else
            {
                this.intDescription = "It tastes bitter and stings your mouth a bit... but it is said to be safe to eat.";
                this.hunger = 0.25; //satisfies hunger.
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.thirst = 0.12; //quenches thirst.
                this.heal = -0.01; //heals health.
            }
            this.warmth = 0; //warms player.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "neprilneBerries")
        {
            //For All Items
            this.identity = "Neprilne Berries";
            this.weight = 0.1;
            this.size = 7;
            this.description = "Tiny blue coloured berries picked from a neprilne plant.";
            this.intForDes = 10;
            this.intDescription = "These are mildly poisonous and the body will often react to them by expelling the contents of one's stomach.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
        }
        else if (this.type == "hracklePod")
        {
            //For All Items
            this.identity = "Hrackle Pod";
            this.weight = 1.2;
            this.size = 8;
            this.description = "A prickly green pod full of liquid.";
            this.intForDes = 5;
            this.intDescription = "Hrackle plants store extra water in their pods to keep hydrated throughout the year.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 2; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "rose")
        {
            //For All Items
            this.identity = "Rose";
            this.weight = 0.05;
            this.size = 5;
            this.description = "A red rose.";
            this.intForDes = 0;
            this.intDescription = "Red roses are considered a symbol of romantic passion and love.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "roseBoquet")
        {
            //For All Items
            this.identity = "Boquet of Roses";
            this.weight = 0.25;
            this.size = 9;
            this.description = "A boquet of red roses.";
            this.intForDes = 0;
            this.intDescription = "Red roses are considered a symbol of romantic passion and love.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Rose", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "darkRose")
        {
            //For All Items
            this.identity = "Dark Rose";
            this.weight = 0.05;
            this.size = 5;
            this.description = "A dark red rose.";
            this.intForDes = 0;
            this.intDescription = "Dark roses are common throughout Thengaria and the west.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "darkRoseBoquet")
        {
            //For All Items
            this.identity = "Boquet of Dark Roses";
            this.weight = 0.25;
            this.size = 9;
            this.description = "A boquet of dark red roses.";
            this.intForDes = 0;
            this.intDescription = "Dark roses are common throughout Thengaria and the west.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Dark Rose", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 11; // at max, sell for 11.
        }
        else if (this.type == "mekleFrond")
        {
            //For All Items
            this.identity = "Mekle Frond";
            this.weight = 0.03;
            this.size = 5;
            this.description = "A thin green frond that has a bunch of small bumps all over it.";
            this.intForDes = 2;
            this.intDescription = "This unique plant grows rapidly with minimal resources; it is not useful except as a food source for herbivores.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "danzigFrond")
        {
            //For All Items
            this.identity = "Danzig Frond";
            this.weight = 0.1;
            this.size = 5;
            this.description = "The black fronds of a danzig bush.";
            this.intForDes = 2;
            this.intDescription = "This type of fern is not used for anything at all...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "redStetriliFlower")
        {
            //For All Items
            this.identity = "Red Stetrili Flower";
            this.weight = 0.06;
            this.size = 5;
            this.description = "A six petalled red flower from the eastern lands.";
            this.intForDes = 0;
            this.intDescription = "Stetrili flowers can be used to make dye.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "orangeStetriliFlower")
        {
            //For All Items
            this.identity = "Orange Stetrili Flower";
            this.weight = 0.06;
            this.size = 5;
            this.description = "A six petalled orange flower from the eastern lands.";
            this.intForDes = 0;
            this.intDescription = "Stetrili flowers can be used to make dye.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "yellowStetriliFlower")
        {
            //For All Items
            this.identity = "Yellow Stetrili Flower";
            this.weight = 0.06;
            this.size = 5;
            this.description = "A six petalled yellow flower from the eastern lands.";
            this.intForDes = 0;
            this.intDescription = "Stetrili flowers can be used to make dye.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "peachStetriliFlower")
        {
            //For All Items
            this.identity = "Peach Stetrili Flower";
            this.weight = 0.06;
            this.size = 5;
            this.description = "A six petalled peach coloured flower from the eastern lands.";
            this.intForDes = 0;
            this.intDescription = "Stetrili flowers can be used to make dye.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "blueStetriliFlower")
        {
            //For All Items
            this.identity = "Blue Stetrili Flower";
            this.weight = 0.06;
            this.size = 5;
            this.description = "A six petalled blue flower from the eastern lands.";
            this.intForDes = 0;
            this.intDescription = "Stetrili flowers can be used to make dye.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "galloshFlower")
        {
            //For All Items
            this.identity = "Gallosh Flower";
            this.weight = 0.03;
            this.size = 4;
            this.description = "An attractive pink flower with pointed petals.";
            this.intForDes = 0;
            this.intDescription = "This might make a good gift for a romantic partner.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "lelFlower")
        {
            //For All Items
            this.identity = "Lel Flower";
            this.weight = 0.025;
            this.size = 4;
            this.description = "A grey flower that grows in the savannah.";
            this.intForDes = 10;
            this.intDescription = "It is considered sacred in southern kellish cultures such as Karib and Alzkwaya.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "volaFlowers")
        {
            //For All Items
            this.identity = "Vola Flowers";
            this.weight = 0.02;
            this.size = 4;
            this.description = "A number of little purple wildflowers that tend to grow in the savannah.";
            this.intForDes = 0;
            this.intDescription = "These flowers look nice, and that's about all they do.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "brightbloomFlower")
        {
            //For All Items
            this.identity = "Brightbloom Flower";
            this.weight = 1.2;
            this.size = 10;
            this.description = "A glorious sleek white flower with a large extending stamen.";
            this.intForDes = 0;
            this.intDescription = "This is truely a flower fit for those of high birth. This acts as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 60 - Math.floor(player.getCharisma() / 5); // at max, buy for 50.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 1.42); // at max, sell for 50.
        }
        else if (this.type == "vorlymFlower")
        {
            //For All Items
            this.identity = "Vorlym Flower";
            this.weight = 0.03;
            this.size = 8;
            this.description = "A voluptuous violet two-petaled flower with a softness like that of velvet.";
            this.intForDes = 20;
            this.intDescription = "These flowers are common in thengaria but are highly sought after in many other regions.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race != "Thengar")
                {
                    this.buyValue = 13 - Math.floor(player.getCharisma() / 8); // at max, buy for 7.
                    this.sellValue = 3 + Math.floor(player.getCharisma() / 12); // at max, sell for 7.
                }
                else
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 0; // at max, sell for 0.
                }
            }
            else
            {
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "steugiurneFlower")
        {
            //For All Items
            this.identity = "Steugiurne Flower";
            this.weight = 0.35;
            this.size = 4;
            this.description = "The yellow flower of a steugiurne plant.";
            this.intForDes = 11;
            this.intDescription = "This has use in alchemy as an amplifier.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "steugiurneFrond")
        {
            //For All Items
            this.identity = "Steugiurne Frond";
            this.weight = 2;
            this.size = 4;
            this.description = "The large and weighty frond of a steugiurne plant.";
            this.intForDes = 3;
            this.intDescription = "The plant's name is pronounced (ST | EW | G | YERN).";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "maweFlower")
        {
            //For All Items
            this.identity = "Mawe Flower";
            this.weight = 0.05;
            this.size = 5;
            this.description = "The vibrant beautiful bright blue flower of a mawe cactus.";
            this.intForDes = 1;
            this.intDescription = "This is used as a floral herb to give food a sweet tantalizing aroma.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "anjayFlower")
        {
            //For All Items
            this.identity = "Anjay Flower";
            this.weight = 0.3;
            this.size = 5;
            this.description = "The thickly petalled orange flower of an anjay cactus.";
            this.intForDes = 5;
            this.intDescription = "Anjay flower has a psychoactive compound that causes vivid hallucinations, and a wildly increased heart rate and body temperature.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.25; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 25; //warms player.
            this.heal = 0; //heals health.
            this.generation = 10; //recoops lost energy.
            this.replenish = -50; //restores will.
            this.cooling = -25; //cools player.

            //ability
            this.ability = "anjayTripII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Nirwaden")
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 0; // at max, sell for 0.
                }
                else
                {
                    this.buyValue = 3; // at max, buy for 3.
                    this.sellValue = 3; // at max, sell for 3.
                }
            }
            else
            {
                this.buyValue = 3; // at max, buy for 3.
                this.sellValue = 3; // at max, sell for 3.
            }
        }
        else if (this.type == "naibArm")
        {
            //For All Items
            this.identity = "Na'ib Arm";
            this.weight = 4;
            this.size = 5;
            this.description = "A long arm from a na'ib cactus .";
            this.intForDes = 1;
            this.intDescription = "These can be juiced into a thick, fibrous, bitter pulp which can be made into a special kind of alcohol.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "inumClipping")
        {
            //For All Items
            this.identity = "Inum Clipping";
            this.weight = 0.01;
            this.size = 5;
            this.description = "Clippings from an inum bush.";
            this.intForDes = 1;
            this.intDescription = "It has a slightly sour flavour with a thick fibrous texture that makes it hard to chew...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0.04; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.6; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "chapulCactus")
        {
            //For All Items
            this.identity = "Chapul Cactus";
            this.weight = 4.5;
            this.size = 10;
            this.description = "A spined thick barrel arm of a chapul cactus.";
            this.intForDes = 2;
            this.intDescription = "It must be despined before it can be eaten; it will hurt your mouth to eat it with the spines...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -25; //heals health.
            this.generation = -9; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 6; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "chapulCactusPaste")
        {
            //For All Items
            this.identity = "Chapul Cactus Mash";
            this.weight = 4.5;
            this.size = 10;
            this.description = "A thick liquid Mash of despined chapul cactus.";
            this.intForDes = 2;
            this.intDescription = "Chapul cactus is offers a very refreshing and cooling feeling when consumed.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 1.5; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 5;
            this.intForCraft = 7;
            this.ingredients = [["Chapul Cactus", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "anjayCactus")
        {
            //For All Items
            this.identity = "Anjay Cactus";
            this.weight = 5;
            this.size = 10;
            this.description = "A large spined section of anjay cactus.";
            this.intForDes = 2;
            this.intDescription = "It must be despined before it can be consumed; it will hurt your mouth to consume it with the spines...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 9; //quenches thirst.
            this.warmth = 15; //warms player.
            this.heal = -24; //heals health.
            this.generation = -9; //recoops lost energy.
            this.replenish = 1; //restores will.
            this.cooling = -15; //cools player.

            //ability
            this.ability = "anjayTripI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Nirwaden")
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 0; // at max, sell for 0.
                }
                else
                {
                    this.buyValue = 5; // at max, buy for 5.
                    this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
                }
            }
            else
            {
                this.buyValue = 5; // at max, buy for 5.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
            }
        }
        else if (this.type == "despinedAnjayCactus")
        {
            //For All Items
            this.identity = "Despined Anjay Cactus";
            this.weight = 4.9;
            this.size = 10;
            this.description = "A large despined section of anjay cactus.";
            this.intForDes = 0;
            if (player.getIntelligence() < 6)
            {
                this.intDescription = "It has a thick white creamy flesh.";
            }
            else
            {
                this.intDescription = "It has a thick white creamy flesh. This has a psychoactive compound in it that is potentially dangerous to consume.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 9; //quenches thirst.
            this.warmth = 15; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 1; //restores will.
            this.cooling = -15; //cools player.

            //ability
            this.ability = "anjayTripI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Anjay Cactus", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Nirwaden")
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 0; // at max, sell for 0.
                }
                else
                {
                    this.buyValue = 6; // at max, buy for 5.
                    this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
                }
            }
            else
            {
                this.buyValue = 6; // at max, buy for 5.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
            }
        }
        else if (this.type == "roastedAnjayCactus")
        {
            //For All Items
            this.identity = "Roasted Anjay Cactus";
            this.weight = 4;
            this.size = 10;
            this.description = "A large roasted section of anjay cactus.";
            this.intForDes = 0;
            this.intDescription = "It has a slightly creamy, mushy, chalky texture and a relatively bland, perhaps squash-like flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Despined Anjay Cactus", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7;
            this.sellValue = 5;
        }
        else if (this.type == "maweHunk")
        {
            //For All Items
            this.identity = "Mawe Cactus";
            this.weight = 6;
            this.size = 10;
            this.description = "A spined hunk of mawe cactus.";
            this.intForDes = 2;
            this.intDescription = "It must be despined before it can be eaten; it will hurt your mouth to eat it with the spines...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = -2; //warms player.
            this.heal = -21; //heals health.
            this.generation = -8; //recoops lost energy.
            this.replenish = 0.1; //restores will.
            this.cooling = 4; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 50); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "despinedMaweHunk")
        {
            //For All Items
            this.identity = "Despined Mawe Cactus";
            this.weight = 5.8;
            this.size = 10;
            this.description = "A despined hunk of mawe cactus.";
            this.intForDes = 0;
            this.intDescription = "Its light blue flesh and juice are sweet, watery, smooth, and refreshing.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = -2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.1; //restores will.
            this.cooling = 5; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Mawe Cactus", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 25); // at max, sell for 6.
        }
        else if (this.type == "pashaArm")
        {
            //For All Items
            this.identity = "Pasha Arm";
            this.weight = 2.1;
            this.size = 10;
            this.description = "A spined arm from a pasha cactus.";
            this.intForDes = 2;
            this.intDescription = "It must be despined before it can be eaten; it will hurt your mouth to eat it with the spines...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -17; //heals health.
            this.generation = -7; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0.5; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "despinedPashaArm")
        {
            //For All Items
            this.identity = "Despined Pasha Arm";
            this.weight = 2.1;
            this.size = 10;
            this.description = "A despined arm from a pasha cactus.";
            this.intForDes = 2;
            this.intDescription = "It tastes refreshing, sort of like a thick, firm cucumber.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 2.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0.75; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Pasha Arm", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "roastedPashaArm")
        {
            //For All Items
            this.identity = "Roasted Pasha Arm";
            this.weight = 2.1;
            this.size = 10;
            this.description = "A roasted despined arm from a pasha cactus.";
            this.intForDes = 2;
            this.intDescription = "It is thick and firm with a unique roasty-toasty cactus-like flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.025; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Despined Pasha Arm", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
        }
        else if (this.type == "thalisLeaf")
        {
            //For All Items
            this.identity = "Thalis Leaf";
            this.weight = 0.4;
            this.size = 6;
            this.description = "A thick twisted leaf with a slimy viscous liquid inside.";
            this.intForDes = 20;
            this.intDescription = "Thalis is often used to make a salve that works to prevent the body from dehydrating, it also removes silver from blood.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.1; //restores will.
            this.cooling = 1; //cools player.

            //ability
            this.ability = "antiSilver";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 12); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "hydroraSalve")
        {
            //For All Items
            this.identity = "Hydrora Salve";
            this.weight = 0.4;
            this.size = 6;
            this.description = "A green herbal salve stored in a glass jar.";
            this.intForDes = 4;
            this.intDescription = "This temporarily counters natural dehydration.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.2; //restores will.
            this.cooling = 10; //cools player.

            //ability
            this.ability = "hydrora";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Glass Jar", 1], ["Thalis Leaf", 3], ["Kofke Leaves", 1], ["Blubber", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 10); // at max, buy for 24.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 10); // at max, sell for 24.
        }
        else if (this.type == "kofkeLeaves")
        {
            //For All Items
            this.identity = "Kofke Leaves";
            this.weight = 0.3;
            this.size = 7;
            this.description = "A bunch of pointed leaves from a kofke plant.";
            this.intForDes = 20;
            this.intDescription = "Used as a changer in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0.1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "wobeaNeedles")
        {
            //For All Items
            this.identity = "Wobea Needles";
            this.weight = 0.06;
            this.size = 8;
            this.description = "The thin needles of the wobea plant.";
            this.intForDes = 18;
            this.intDescription = "These can be made into an extract that is used as medical anesthesia";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Wobea Leaf", 1]];
            this.biproducts = [[new Item("wobeaFlesh", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "wobeaFlesh")
        {
            //For All Items
            this.identity = "Wobea Flesh";
            this.weight = 1.54;
            this.size = 9;
            this.description = "The viscous sap and the stringy mess of fibrous wobea rib that is left after removing all of the needles from a wobea leaf.";
            this.intForDes = 9;
            this.intDescription = "This can be used in alchemy as a changer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Wobea Leaf", 1]];
            this.biproducts = [[new Item("wobeaNeedles", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "wobeaLeaf")
        {
            //For All Items
            this.identity = "Wobea Leaf";
            this.weight = 1.6;
            this.size = 10;
            this.description = "A long, porus, and very thick rib of the wobea plant.";
            this.intForDes = 9;
            this.intDescription = "The needles embedded in this leaf can be extracted for use in alchemy...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "blilArm")
        {
            //For All Items
            this.identity = "Blil Arm";
            this.weight = 0.8;
            this.size = 8;
            this.description = "One of the six turquoise coloured tubular segments of a blil plant. It is extremely bitter.";
            this.intForDes = 14;
            this.intDescription = "Consumption and/or absorption through the skin cause sleepiness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.wake = -9;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 12); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "kelp")
        {
            //For All Items
            this.identity = "Kelp";
            this.weight = 0.75;
            this.size = 9;
            this.description = "The oceanic salty fronds of northern sea kelp that is washed ashore.";
            this.intForDes = 1;
            this.intDescription = "Kelp can be dried and eaten or used to make northern freydic soup.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "eyewortLeaves")
        {
            //For All Items
            this.identity = "Eyewort Leaves";
            this.weight = 0.12;
            this.size = 8;
            this.description = "A rough bumpy leaf that smells a bit sour.";
            this.intForDes = 25;
            this.intDescription = "The toxins in the leaves are not necessarily strong enough to kill you, but they will kill most gut parasites living in you.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = -5; //warms player.
            this.heal = -2; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "gutCleanse";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 50); // at max, buy for 8.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 25); // at max, sell for 8.
        }
        else if (this.type == "eyewortStalk")
        {
            //For All Items
            this.identity = "Eyewort Stalk";
            this.weight = 0.83;
            this.size = 9;
            this.description = "A red branching stem that hosts numerous buds that look like human eyes.";
            this.intForDes = 5;
            this.intDescription = "This is highly poisonous to consume, but can be used in certain alchemic formulas as a changer.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.65; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonIII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "culprisLeaf")
        {
            //For All Items
            this.identity = "Culpris Leaf";
            this.weight = 0.1;
            this.size = 7;
            this.description = "A soft green leaf from a culpris plant.";
            this.intForDes = 3;
            this.intDescription = "Culpris Leaves are known to have restorative properties.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0.38; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 10); // at max, buy for 7.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "prematureCauwLeaf")
        {
            //For All Items
            this.identity = "Premature Cauw Leaf";
            this.weight = 0.025;
            this.size = 5;
            this.description = "An oily black leaf.";
            this.intForDes = 3;
            this.intDescription = "Premature cauw leaves have a lethally poisonous oil on them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "cauwLeaf")
        {
            //For All Items
            this.identity = "Cauw Leaf";
            this.weight = 0.11;
            this.size = 5;
            this.description = "A thick black leaf with patchy white spots; they taste sweet.";
            this.intForDes = 2;
            this.intDescription = "They are perfectly safe to eat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.45; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0.1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "bushkaLeaves")
        {
            //For All Items
            this.identity = "Bushka Leaves";
            this.weight = 0.1;
            this.size = 7;
            this.description = "Small waxy hard turquoise colored leaves from a bushka plant.";
            this.intForDes = 3;
            this.intDescription = "These can be used in several alchemy recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "heskFungalPod")
        {
            //For All Items
            this.identity = "Hesk Fungal Pod";
            this.weight = 14;
            this.size = 15;
            this.description = "A slimy darkish green protrusion of hesk fungus.";
            this.intForDes = 12;
            this.intDescription = "The mycelium of hesk lies deep under the top soil where it forms thousands of fist-sized fungal bubbles that store volatile gas.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 25); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "heskFungus")
        {
            //For All Items
            this.identity = "Hesk Fungus";
            this.weight = 2.9;
            this.size = 10;
            this.description = "A slimy strip of torn hesk fungus protrusion.";
            this.intForDes = 12;
            this.intDescription = "This is used in alchemy as a potent changer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "wyrLeaf")
        {
            //For All Items
            this.identity = "Wyr Leaf";
            this.weight = 0.05;
            this.size = 4;
            this.description = "The large, soft, light, dark green leaf of a wyr plant.";
            this.intForDes = 14;
            this.intDescription = "In a strong enough concentration the extract from a wyr leaf can counter the effects of some basic poisons.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "bee")
        {
            //For All Items
            this.identity = "Dead Bee";
            this.weight = 0.001;
            this.size = 2;
            this.description = "A dead honey bee.";
            this.intForDes = 8;
            this.intDescription = "Bees can be used as an alchemy ingredient.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "swollenI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "wheat")
        {
            //For All Items
            this.identity = "Wheat";
            this.weight = 0.1;
            this.size = 7;
            this.description = "A basic grain for to mill or to brew.";
            this.intForDes = 0;
            this.intDescription = "Cooking and/or brewing this is preferable to eating it raw...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "harstGrain")
        {
            //For All Items
            this.identity = "Harst Grain";
            this.weight = 0.1;
            this.size = 7;
            this.description = "A rough and hard shelled dark grain.";
            this.intForDes = 8;
            this.intDescription = "Raw, harst grain is crunchy and unappetizing; it must be boiled for over an hour to reach a more edible state.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "santhGrain")
        {
            //For All Items
            this.identity = "Santh Grain";
            this.weight = 0.1;
            this.size = 7;
            this.description = "The lightest and finest grain anyone would ever find, santh is used to craft the most artisan of confections.";
            this.intForDes = 1;
            this.intDescription = "Santh is revered by all those who have tried the baked goods made from it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 10); // at max, buy for 7.
            this.sellValue = 7; // at max, sell for 7.
        }
        else if (this.type == "santhFlour")
        {
            //For All Items
            this.identity = "Santh Flour";
            this.weight = 0.1;
            this.size = 7;
            this.description = "The lightest and finest grain anyone would ever find, santh is used to craft the most artisan of confections.";
            this.intForDes = 1;
            this.intDescription = "Santh is revered by all those who have tried the baked goods made from it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Santh Grain", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 6); // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "bagOfSanthFlour")
        {
            //For All Items
            this.identity = "Bag of Santh Flour";
            this.weight = 8;
            this.size = 12;
            this.description = "A bag full of santh flour.";
            this.intForDes = 1;
            this.intDescription = "The bag holds fifty loads of flour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Santh Flour", 50], ["Empty Bag", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 800.
            this.sellValue = 700 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 800.
        }
        else if (this.type == "emptyBagSanth")
        {
            //For All Items
            this.identity = "Empty Bag";
            this.weight = 1;
            this.size = 12;
            this.description = "A bag with nothing in it.";
            this.intForDes = 0;
            this.intDescription = "If there is nothing in the bag, isn't there something in it?";

            //Define Utility
            this.utility = "material";
            this.subUtility = "reusable";
            this.refund = [["santhFlour", 50]];

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Bag of Santh Flour", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "wheatFlour")
        {
            //For All Items
            this.identity = "Wheat Flour";
            this.weight = 0.1;
            this.size = 7;
            this.description = "Wheat flour is smooth and powdery.";
            this.intForDes = 2;
            this.intDescription = "Wheat flour can be used to make bread and pastries.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Wheat", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "harstFlour")
        {
            //For All Items
            this.identity = "Harst Flour";
            this.weight = 0.1;
            this.size = 7;
            this.description = "Even as a flour harst still seems to be course and gritty.";
            this.intForDes = 1;
            this.intDescription = "Harst is commonly eaten by those who can not afford a more pleasant means of survival.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Harst Grain", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "bagOfHarstFlour")
        {
            //For All Items
            this.identity = "Bag of Harst Flour";
            this.weight = 8;
            this.size = 12;
            this.description = "A bag full of Harst flour.";
            this.intForDes = 1;
            this.intDescription = "The bag holds fifty loads of flour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Harst Flour", 50], ["Empty Bag", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100; // at max, buy for 800.
            this.sellValue = 100; // at max, sell for 800.
        }
        else if (this.type == "emptyBagHarst")
        {
            //For All Items
            this.identity = "Empty Bag";
            this.weight = 1;
            this.size = 12;
            this.description = "A bag with nothing in it.";
            this.intForDes = 0;
            this.intDescription = "If there is nothing in the bag, isn't there something in it?";

            //Define Utility
            this.utility = "material";
            this.subUtility = "reusable";
            this.refund = [["harstFlour", 50]];

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Bag of Harst Flour", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "wheatDough")
        {
            //For All Items
            this.identity = "Wheat Dough";
            this.weight = 0.4;
            this.size = 8;
            this.description = "A dough to make wheat bread: it is made of flour, water, and yeast from the air.";
            this.intForDes = 1;
            this.intDescription = "Dough is oftentimes doughy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 5;
            this.ingredients = [["Wheat Flour", 6], ["Bucket of Water", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "harstDough")
        {
            //For All Items
            this.identity = "Harst Dough";
            this.weight = 0.4;
            this.size = 7;
            this.description = "A dough for harst bread made from flour, water, and yeast from the air.";
            this.intForDes = 3;
            this.intDescription = "Harst products are cheap and nutritious, but also very coarse.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 4;
            this.ingredients = [["Harst Flour", 6], ["Bucket of Water", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "pumpkinDough")
        {
            //For All Items
            this.identity = "Pumpkin Dough";
            this.weight = 0.7;
            this.size = 7;
            this.description = "A dough for pumpkin harst bread made from flour, water, butter, yeast from the air, and pumpkin.";
            this.intForDes = 1;
            this.intDescription = "Pumpkin dough is a harst based bread dough.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 6;
            this.ingredients = [["Harst Flour", 6], ["Naaprid Butter", 1], ["Pumpkin", 1], ["Bucket of Water", 1], ["Ground Ogard", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 3.
        }
        else if (this.type == "pumpkinBread")
        {
            //For All Items
            this.identity = "Pumpkin Bread";
            this.weight = 0.7;
            this.size = 7;
            this.description = "Dark spiced pumpkin bread made from harst grain.";
            this.intForDes = 5;
            this.intDescription = "Pumpkin Bread is a traditional Kellish recipe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Pumpkin Dough", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16; // at max, buy for 16.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 12); // at max, sell for 16.
        }
        else if (this.type == "butteredPumpkinBread")
        {
            //For All Items
            this.identity = "Buttered Pumpkin Bread";
            this.weight = 0.7;
            this.size = 7;
            this.description = "Dark spiced pumpkin bread made from harst grain.";
            this.intForDes = 5;
            this.intDescription = "Pumpkin Bread is a traditional Kellish recipe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 21; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.75; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Pumpkin Bread", 1], ["Naaprid Butter", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 27; // at max, buy for 27.
            this.sellValue = 23 + Math.floor(player.getCharisma() / 12); // at max, sell for 27.
        }
        else if (this.type == "velPumpkinBread")
        {
            //For All Items
            this.identity = "Pumpkin Bread with Vel";
            this.weight = 0.7;
            this.size = 7;
            this.description = "Dark spiced pumpkin bread made from harst grain.";
            this.intForDes = 5;
            this.intDescription = "Pumpkin Bread is a traditional Kellish recipe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = 0.6; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.2; //recoops lost energy.
            this.replenish = 0.4; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Pumpkin Bread", 1], ["Vel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 41; // at max, buy for 41.
            this.sellValue = 37 + Math.floor(player.getCharisma() / 12); // at max, sell for 41.
        }
        else if (this.type == "wheatBread")
        {
            //For All Items
            this.identity = "Wheat Bread";
            this.weight = 0.4;
            this.size = 8;
            this.description = "A loaf of dark whole wheat bread.";
            this.intForDes = 1;
            this.intDescription = "Wheat bread is eaten commonly in Vardania, or at least it used to be... before the famine.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Wheat Dough", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "borshtWheatBread")
        {
            //For All Items
            this.identity = "Wheat Bread with Borsht Spread";
            this.weight = 0.5;
            this.size = 8;
            this.description = "A sliced loaf of dark whole wheat bread spread with mashed borsht.";
            this.intForDes = 1;
            this.intDescription = "This is a common food eaten in Vardania by the lucky few who can manage to put food on the table.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 20; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 1;
            this.ingredients = [["Wheat Bread", 2], ["Roasted Borsht", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "butteredWheatBread")
        {
            //For All Items
            this.identity = "Buttered Wheat Bread";
            this.weight = 0.4;
            this.size = 8;
            this.description = "A sliced loaf of dark whole wheat bread spread with naaprid butter.";
            this.intForDes = 1;
            this.intDescription = "Since bovine milk is usually to thin to make butter with, buttered bread is a foreign luxury.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 21; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Wheat Bread", 1], ["Naaprid Butter", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22; // at max, buy for 22.
            this.sellValue = 22; // at max, sell for 22.
        }
        else if (this.type == "velWheatBread")
        {
            //For All Items
            this.identity = "Wheat Bread with Vel";
            this.weight = 0.4;
            this.size = 8;
            this.description = "A sliced loaf of dark whole wheat bread spread with vel.";
            this.intForDes = 1;
            this.intDescription = "Bread with vel is an extravagant luxury that would likely not be found in Vardania outside of a count's manor.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Wheat Bread", 1], ["Vel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 47; // at max, buy for 47.
            this.sellValue = 47; // at max, sell for 47.
        }
        else if (this.type == "harstBread")
        {
            //For All Items
            this.identity = "Harst Bread";
            this.weight = 0.4;
            this.size = 7;
            this.description = "Grainy, coarse, dark bread made from harst grain.";
            this.intForDes = 1;
            this.intDescription = "Harst bread is a common food of the peasant class.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Harst Dough", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
        }
        else if (this.type == "butteredHarstBread")
        {
            //For All Items
            this.identity = "Buttered Harst Bread";
            this.weight = 0.4;
            this.size = 7;
            this.description = "Grainy, coarse, dark bread made from harst grain... with butter!!!";
            this.intForDes = 1;
            this.intDescription = "Harst bread is a common food of the peasant class.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 19; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Harst Bread", 1], ["Naaprid Butter", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22; // at max, buy for 22.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 15); // at max, sell for 22.
        }
        else if (this.type == "velHarstBread")
        {
            //For All Items
            this.identity = "Harst Bread with Vel";
            this.weight = 0.4;
            this.size = 7;
            this.description = "Grainy, coarse, dark bread made from harst grain... spread with a delicious and creamy layer of vel.";
            this.intForDes = 1;
            this.intDescription = "Harst bread is a common food of the peasant class.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 23; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Harst Bread", 1], ["Vel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 36; // at max, buy for 36.
            this.sellValue = 33 + Math.floor(player.getCharisma() / 15); // at max, sell for 36.
        }
        else if (this.type == "kellishSanthDough")
        {
            //For All Items
            this.identity = "Santh Dough";
            this.weight = 0.3;
            this.size = 7;
            this.description = "A dough for santh bread made from traditional Kellish products.";
            this.intForDes = 2;
            this.intDescription = "Santh like in many other cultures is highly valued by the Kellish.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 20;
            this.ingredients = [["Santh Flour", 4], ["Naaprid Butter", 2], ["Kellish Clay Pot of Naaprid Milk", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 3); // at max, buy for 25.
            this.sellValue = 25; // at max, sell for 25.
        }
        else if (this.type == "nirwadenPastryDough")
        {
            //For All Items
            this.identity = "Nirwaden Pastry Dough";
            this.weight = 0.5;
            this.size = 7;
            this.description = "A dough for nirwaden pastries.";
            this.intForDes = 2;
            this.intDescription = "Nirwaden pastries originated in the north of the Nirwaden empire.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 20;
            this.ingredients = [["Santh Flour", 2], ["Naaprid Butter", 2], ["Bucket of Naaprid Milk", 1], ["Erguer Paste", 3], ["Mofu Egg", 2]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 32 - Math.floor(player.getCharisma() / 5); // at max, buy for 22.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 15); // at max, sell for 22.
        }
        else if (this.type == "rawIemaTart")
        {
            //For All Items
            this.identity = "Raw Iema Tart";
            this.weight = 0.3;
            this.size = 7;
            this.description = "An uncooked nirwaden pastry made with iema berries.";
            if (player.raceName == "Nirwaden")
            {
                this.intForDes = 12;
            }
            else
            {
                this.intForDes = 14;
            }
            this.intDescription = "The temperature must be just right for the dough to rise the right way.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 3;
            this.ingredients = [["Nirwaden Pastry Dough", 1], ["Iema Berries", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 50); // at max, buy for 11.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 50); // at max, sell for 11.
        }
        else if (this.type == "iemaTart")
        {
            //For All Items
            this.identity = "Iema Tart";
            this.weight = 0.25;
            this.size = 7;
            this.description = "A nirwaden pastry made with iema berries.";
            this.intForDes = 0;
            this.intDescription = "It is a sweet and rich pastry that tastes of iema berries.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Nirwaden")
            {
                this.intForCraft = 12;
            }
            else
            {
                this.intForCraft = 14;
            }
            this.ingredients = [["Raw Iema Tart", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 50); // at max, buy for 15.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 50); // at max, sell for 15.
        }
        else if (this.type == "rawChonaTart")
        {
            //For All Items
            this.identity = "Raw Chona Tart";
            this.weight = 0.3;
            this.size = 7;
            this.description = "An uncooked nirwaden pastry made with chona fruit.";
            if (player.raceName == "Nirwaden")
            {
                this.intForDes = 12;
            }
            else
            {
                this.intForDes = 14;
            }
            this.intDescription = "The temperature must be just right for the dough to rise the right way.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 3;
            this.ingredients = [["Nirwaden Pastry Dough", 1], ["Chona", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 50); // at max, sell for 8.
        }
        else if (this.type == "chonaTart")
        {
            //For All Items
            this.identity = "Chona Tart";
            this.weight = 0.25;
            this.size = 7;
            this.description = "A nirwaden pastry made with chona fruit.";
            this.intForDes = 0;
            this.intDescription = "It is a sweet and rich pastry that tastes of chona fruit.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.3; //recoops lost energy.
            this.replenish = 0.15; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Nirwaden")
            {
                this.intForCraft = 13;
            }
            else
            {
                this.intForCraft = 15;
            }
            this.ingredients = [["Raw Chona Tart", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 50); // at max, buy for 16.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 50); // at max, sell for 16.
        }
        else if (this.type == "rawPolyapaTart")
        {
            //For All Items
            this.identity = "Raw Polyapa Tart";
            this.weight = 0.3;
            this.size = 7;
            this.description = "An uncooked nirwaden pastry made with polyapa fruit.";
            if (player.raceName == "Nirwaden")
            {
                this.intForDes = 12;
            }
            else
            {
                this.intForDes = 14;
            }
            this.intDescription = "The temperature must be just right for the dough to rise the right way.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 3;
            this.ingredients = [["Nirwaden Pastry Dough", 1], ["Polyapa", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 11.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
        }
        else if (this.type == "polyapaTart")
        {
            //For All Items
            this.identity = "Polyapa Tart";
            this.weight = 0.25;
            this.size = 7;
            this.description = "A nirwaden pastry made with polyapa fruit.";
            this.intForDes = 0;
            this.intDescription = "It is a sweet and rich pastry that tastes of polyapa fruit.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.35; //recoops lost energy.
            this.replenish = 0.15; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Nirwaden")
            {
                this.intForCraft = 13;
            }
            else
            {
                this.intForCraft = 15;
            }
            this.ingredients = [["Raw Polyapa Tart", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 50); // at max, buy for 17.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 50); // at max, sell for 17.
        }
        else if (this.type == "santhBread")
        {
            //For All Items
            this.identity = "Santh Bread";
            this.weight = 0.3;
            this.size = 7;
            this.description = "The smoothest, lightest, whitest, and most delicate bread one could ever eat.";
            this.intForDes = 1;
            this.intDescription = "Properly made santh bread is of a quality suitable for kings and queens.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 22; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Santh Dough", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 3); // at max, buy for 35.
            this.sellValue = 35; // at max, sell for 35.
        }
        else if (this.type == "butteredSanthBread")
        {
            //For All Items
            this.identity = "Buttered Santh Bread";
            this.weight = 0.3;
            this.size = 7;
            this.description = "The smoothest, lightest, whitest, and most delicate bread one could ever eat... With Butter!";
            this.intForDes = 1;
            this.intDescription = "Properly made santh bread is of a quality suitable for kings and queens.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 26; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.4; //recoops lost energy.
            this.replenish = 0.35; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Santh Bread", 1], ["Naaprid Butter", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 61 - Math.floor(player.getCharisma() / 3); // at max, buy for 46.
            this.sellValue = 46; // at max, sell for 46.
        }
        else if (this.type == "velSanthBread")
        {
            //For All Items
            this.identity = "Santh Bread with Vel";
            this.weight = 0.3;
            this.size = 7;
            this.description = "The smoothest, lightest, whitest, and most delicate bread one could ever eat... smothered with sweet and creamy vel!";
            this.intForDes = 1;
            this.intDescription = "Properly made santh bread is of a quality suitable for kings and queens.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 30; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.75; //recoops lost energy.
            this.replenish = 0.75; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Santh Bread", 1], ["Vel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 75 - Math.floor(player.getCharisma() / 3); // at max, buy for 60.
            this.sellValue = 60; // at max, sell for 60.
        }
        else if (this.type == "waantiButter")
        {
            //For All Items
            this.identity = "Waanti Butter";
            this.weight = 0.15;
            this.size = 5;
            this.description = "The thick textured, gamey, fatty butter from a waanti.";
            this.intForDes = 1;
            this.intDescription = "Waanti butter is used in freydic recipes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 22;
            this.ingredients = [["Bucket of Waanti Milk", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 25); // at max, sell for 14.
        }
        else if (this.type == "naapridButter")
        {
            //For All Items
            this.identity = "Naaprid Butter";
            this.weight = 0.1;
            this.size = 5;
            this.description = "Creamy fatty butter from a naaprid.";
            this.intForDes = 1;
            this.intDescription = "Naaprid butter is used in many kellish and southern freydic recipes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 20;
            this.ingredients = [["Kellish Clay Pot of Naaprid Milk", 1]];
            this.biproducts = [[new Item("kellishClayPot", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 25); // at max, buy for 9.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
        }
        else if (this.type == "vel") //velvel
        {
            //For All Items
            this.identity = "Vel";
            this.weight = 0.9;
            this.size = 5;
            this.description = "Creamy sweet thick partially digested nectar from a fletter.";
            this.intForDes = 5;
            this.intDescription = "The enzymes released when a fletter's body breaks down the nectar that it eats forms this substance.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0.2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 3); // at max, sell for 25.
        }
        else if (this.type == "honey")
        {
            //For All Items
            this.identity = "Honey";
            this.weight = 0.6;
            this.size = 6;
            this.description = "Sticky sweet thick golden fluid.";
            this.intForDes = 3;
            this.intDescription = "Bees collect nectar from plants and make it into honey to feed their young.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26 - Math.floor(player.getCharisma() / 8); // at max, buy for 20.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 10); // at max, sell for 20.
        }
        else if (this.type == "ogard")
        {
            //For All Items
            this.identity = "Ogard";
            this.weight = 0.9;
            this.size = 8;
            this.description = "Ogard is a large ovular hard seed produced by the ogard plant.";
            if (player.raceName == "Freynor")
            {
                this.intForDes = 0;
            }
            else
            {
                this.intForDes = 4;
            }
            this.intDescription = "It is popularly used ground as a spice to flavour certain foods and drinks.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 5); // at max, buy for 36.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 3); // at max, sell for 33.
        }
        else if (this.type == "groundOgard")
        {
            //For All Items
            this.identity = "Ground Ogard";
            this.weight = 0.9;
            this.size = 8;
            this.description = "Ground ogard has a strong, hot, nutty, wood aromatic.";
            if (player.raceName == "Freynor")
            {
                this.intForDes = 0;
            }
            else
            {
                this.intForDes = 4;
            }

            this.intDescription = "This spice originates from the north where it is commonly used in hot drinks, baked goods, and desserts.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 9;
            this.intForCraft = 2;
            this.ingredients = [["Ogard", 1]];
            this.biproducts = [[new Item("ogardPollen", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "ogardPollen")
        {
            //For All Items
            this.identity = "Ogard Pollen";
            this.weight = 0.02;
            this.size = 8;
            this.description = "Ogard Pollen is a light yellow fluffy airy substance that smells imensely sweet, hot, and nutty.";
            if (player.raceName == "Freynor")
            {
                this.intForDes = 2;
            }
            else
            {
                this.intForDes = 7;
            }
            this.intDescription = "Ogard pollen is used in alchemy and to make fine perfume.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 12); // at max, sell for 14.
        }
        else if (this.type == "driedTechiLeaf")
        {
            //For All Items
            this.identity = "Dried Techi Leaf";
            this.weight = 0.1;
            this.size = 7;
            this.description = "The dried leaf of a techi weed.";
            this.intForDes = 5;
            this.intDescription = "This dried herb makes up the body of much of the tea drunk throughout the lands.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Techi Leaf", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "techiLeaf")
        {
            //For All Items
            this.identity = "Techi Leaf";
            this.weight = 0.1;
            this.size = 7;
            this.description = "Techi weeds grow scattered among the northern plains.";
            this.intForDes = 5;
            this.intDescription = "Techi leaf can be used in alchemy or it can be dried and made into a bitter tea.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "stomwikLeaf")
        {
            //For All Items
            this.identity = "Stomwik Leaf";
            this.weight = 0.1;
            this.size = 7;
            this.description = "The stomwik plant has an unforgetably foul odor, imagine wet sweaty socks that have begun to mold mixed with a hint of wrotten egg then sprinkled with a just a dab of cat urine.";
            this.intForDes = 7;
            this.intDescription = "Crushed stomwik leaves can serve as a powerful bug repellent, but its whole form can be used as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 10); // at max, buy for 10.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 10); // at max, sell for 8.
        }
        else if (this.type == "hoilLeaves")
        {
            //For All Items
            this.identity = "Hoil Leaves";
            this.weight = 0.15;
            this.size = 8;
            this.description = "A bunch of thick, rough, sap filled, green leaves with a moderately musky odor.";
            this.intForDes = 0;
            this.intDescription = "This acts as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 12); // at max, buy for 6.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 12); // at max, sell for 6.
        }
        else if (this.type == "ishBranch")
        {
            //For All Items
            this.identity = "Ish Branch";
            this.weight = 0.4;
            this.size = 7;
            this.description = "One branch of an ish bush.";
            this.intForDes = 0;
            this.intDescription = "A plain, completely ordinary branch covered in bushy leaves.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "corneliusFlower")
        {
            //For All Items
            this.identity = "Cornelius Flower";
            this.weight = 0.06;
            this.size = 4;
            this.description = "A small orange wildflower.";
            this.intForDes = 15;
            this.intDescription = "This type of flower is used in some herbal remedies.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor((20 + player.getCharisma()) / 50); // at max, sell for 2.
        }
        else if (this.type == "rilthasiaFlower")
        {
            //For All Items
            this.weight = 0.05;
            this.size = 4;
            this.description = "A small blue wildflower.";
            this.intForDes = 20;
            if (player.raceName == "Kel")
            {
                this.identity = "Love Flower";
                this.intForDes = 0;
                this.intDescription = "In your culture if someone gifts their crush this flower and it is accepted, it acts as a subtle form of consent to becoming lovers.";
            }
            else
            {
                this.identity = "Rilthasia Flower";
                this.intDescription = "A pretty blue flower that in kellish culture is given to ones lover to show them that one is serious about their love for them.";
            }

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "butterMellowFlower")
        {
            //For All Items
            this.identity = "Butter-Mellow Flower";
            this.weight = 0.14;
            this.size = 8;
            this.description = "A thick stemmed flower with large yellow petals.";
            this.intForDes = 27;
            this.intDescription = "A light yellow oil that clings to the smooth petals makes this flower popular for use in alchemy.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 1 + Math.floor((20 + player.getCharisma()) / 25); // at max, sell for 3.
        }
        else if (this.type == "mufBall")
        {
            //For All Items
            this.identity = "Muf";
            this.weight = 0.025;
            this.size = 4;
            this.description = "A ball of muf picked from the plant; muf is soft, fluffy, and fibrous.";
            this.intForDes = 11;
            this.intDescription = "Muf is used to make cheap cloth for manufacture into clothing and other goods.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "mufFiber")
        {
            //For All Items
            this.identity = "Muf Fiber";
            this.weight = 0.1;
            this.size = 8;
            this.description = "Muf that has been woven into strands for production into cloth.";
            this.intForDes = 11;
            this.intDescription = "Muf fiber is used to make cheap cloth for manufacture into clothing and other goods.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Muf", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 1.
            this.sellValue = 4; // at max, sell for 1.
        }
        else if (this.type == "mufCloth")
        {
            //For All Items
            this.identity = "Muf Cloth";
            this.weight = 0.2;
            this.size = 10;
            this.description = "Cloth made from a soft and fluffy plant material known as muf.";
            this.intForDes = 3;
            this.intDescription = "Muf cloth must be dyed white before it can be made into standard cloth products.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Muf Fiber", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "tenicLeaf")
        {
            //For All Items
            this.identity = "Tenic Leaf";
            this.weight = 0.55;
            this.size = 8;
            this.description = "A long fuzzy pointed green leaf from a tenic plant.";
            this.intForDes = 5;
            this.intDescription = "Tenic Leaves have curing properties as well as other diverse alchemic effects.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "tenicFlower")
        {
            //For All Items
            this.identity = "Tenic Flower";
            this.weight = 0.25;
            this.size = 6;
            this.description = "A flower made up of a number of small white bubble-like enclosures.";
            this.intForDes = 5;
            this.intDescription = "Tenic flowers have some alchemic properties but are mostly used to make dye.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "tenicPaste")
        {
            //For All Items
            this.identity = "Tenic Paste";
            this.weight = 0.5;
            this.size = 7;
            this.description = "A white paste made from mashed tenic flower and a hint of water.";
            this.intForDes = 2;
            this.intDescription = "Used as a dye.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Tenic Flower", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "itlinBranch")
        {
            //For All Items
            this.identity = "Itlin Branch";
            this.weight = 0.4;
            this.size = 7;
            this.description = "One branch of an itlin bush.";
            if (player.raceName == "Kel")
            {
                this.intForDes = 0;
            }
            else
            {
                this.intForDes = 6;
            }
            this.intDescription = "Many Kellish tribes believe that itlin branches ward off bad spirits.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "sprite")
        {
            //For All Items
            this.identity = "Sprite";
            this.weight = 0.01;
            this.size = 9;

            this.description = "A small sprite taken from within a larger sprite.";
            this.intForDes = 4;
            this.intDescription = "Consuming a sprite magically unfocuses all of your abilities allowing you to completely change everything about yourself.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "skillReset";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 220; // at max, buy for 220.
            this.sellValue = 220; // at max, sell for 220.
        }
        else if (this.type == "ulgoyLeaf")
        {
            //For All Items
            this.identity = "Ulgoy Leaf";
            this.weight = 2.6;
            this.size = 12;
            this.description = "A leaf from a carnivorous ulgoy plant.";
            this.intForDes = 7;
            this.intDescription = "This can be used in rare alchemy recipes as either an amplifier or a former.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 8); // at max, buy for 16.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 6); // at max, sell for 16.
        }
        else if (this.type == "erguerFlower")
        {
            //For All Items
            this.identity = "Erguer Flower";
            this.weight = 0.31;
            this.size = 8;
            this.description = "A yellow flower with sweet brown pollen and a strong sweet and floral aroma.";
            this.intForDes = 5;
            this.intDescription = "This flower can be made into a sweet paste used in culinary arts and brewing.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "erguerLeaf")
        {
            //For All Items
            this.identity = "Erguer Leaf";
            this.weight = 0.069;
            this.size = 8;
            this.description = "A fuzzy light green leaf from an erguer plant.";
            this.intForDes = 38;
            this.intDescription = "This leaf may be able to help prevent wrinkles caused by old age...";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "erguerPaste")
        {
            //For All Items
            this.identity = "Erguer Paste";
            this.weight = 0.63;
            this.size = 8;
            this.description = "A yellow and brown paste with a strong sweet and floral aroma.";
            this.intForDes = 0;
            this.intDescription = "It tastes sweet with a highly delectable floral aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Erguer Flower", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "tylunFlower")
        {
            //For All Items
            this.identity = "Tylun Flower";
            this.weight = 0.1;
            this.size = 7;
            this.description = "A gorgeous pink flower with pointed petals and a velvety soft stem.";
            this.intForDes = 5;
            this.intDescription = "This rare flower can be used in many alchemy recipes. It serves as both an amplifier and a former.";

            //Define Utility
            this.utility = "material";

            //Utility Focused

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 10); // at max, buy for 17.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 6); // at max, sell for 16.
        }
        else if (this.type == "soakedMandrake") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Soaked Mandrake";
            this.weight = 2;
            this.size = 14;
            this.description = "A mandrake root that has been thoroughly soaked in bovine milk.";
            this.intForDes = 25;
            this.intDescription = "A certain chemical that is in the grass that bovines eat tricks mandrakes into thinking they are still in the ground.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            if (lowBar == "crafting" && crafting == "handcrafted")
            {
                for (var plrinv = 0; plrinv < Inventory.length; plrinv++)
                {
                    if (Inventory[plrinv][0].identity == "Vardanian Pot of Mandrake")
                    {
                        //Crafting
                        this.yield = 1;
                        this.intForCraft = 0;
                        this.biproducts = [[new Item("vardanianPotOfBovineMilk", false), 1]];
                        this.ingredients = [["Vardanian Pot of Mandrake", 1]];
                        break;
                    }
                    else if (Inventory[plrinv][0].identity == "Vardanian Bowl of Mandrake")
                    {
                        //Crafting
                        this.yield = 1;
                        this.intForCraft = 0;
                        this.biproducts = [[new Item("vardanianBowlOfBovineMilk", false), 1]];
                        this.ingredients = [["Vardanian Bowl of Mandrake", 1]];
                        break;
                    }
                    else if (Inventory[plrinv][0].identity == "Bucket of Mandrake")
                    {
                        //Crafting
                        this.yield = 1;
                        this.intForCraft = 0;
                        this.biproducts = [[new Item("bucketOfBovineMilk", false), 1]];
                        this.ingredients = [["Bucket of Mandrake", 1]];
                        break;
                    }
                    else if (Inventory[plrinv][0].identity == "Kellish Clay Pot of Mandrake")
                    {
                        //Crafting
                        this.yield = 1;
                        this.intForCraft = 0;
                        this.biproducts = [[new Item("kellishClayPotOfBovineMilk", false), 1]];
                        this.ingredients = [["Kellish Clay Pot of Mandrake", 1]];
                        break;
                    }
                }
            }
            else
            {
                //Crafting
                this.yield = 1;
                this.intForCraft = 0;
                this.biproducts = [[new Item("vardanianPotOfBovineMilk", false), 1]];
                this.ingredients = [["Vardanian Pot of Mandrake", 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25; // at max, buy for 25.
            this.sellValue = 25; // at max, sell for 25.
        }
        else if (this.type == "gojiiBerries")
        {
            //For All Items
            this.identity = "Gojii Berries";
            this.weight = 0.5;
            this.size = 7;
            this.description = "Sweet smelling light green berries dotted with three red spots.";
            this.intForDes = 44;
            this.intDescription = "The Gojii berry contains one of the most poisonous compounds in the world...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gojii";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 400 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 300.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "gojiiFlower")
        {
            //For All Items
            this.identity = "Gojii Flower";
            this.weight = 0.85;
            this.size = 8;
            this.description = "A Sweet smelling pink flower.";
            this.intForDes = 40;
            this.intDescription = "The Gojii plant, including the flower, contains one of the most poisonous compounds in the world...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35 - Math.floor(player.getCharisma() / 3); // at max, buy for 20.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 3); // at max, sell for 20.
        }
        else if (this.type == "healingSalve")
        {
            //For All Items
            this.identity = "Jar of Healing Salve";
            this.weight = 3;
            this.size = 6;
            this.description = "An expertly devised alchemic mixture that can be used to heal minor wounds.";
            this.intForDes = 6;
            this.intDescription = "Healing salve is the most commonly used medicine in the lands.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 3; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "healthI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Glass Jar", 1], ["Naaprid Butter", 1], ["Culpris Leaf", 8], ["Lizard Tail", 1], ["Blubber", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 70 - Math.floor(player.getCharisma() / 2); // at max, buy for 45.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 3); // at max, sell for 45.
        }
        else if (this.type == "trollsBlood")
        {
            //For All Items
            this.identity = "Jar of Tempered Troll's Blood";
            this.weight = 3;
            this.size = 6;
            this.description = "Troll's blood that has been tempered at a perfect temperature over the course of several days.";
            this.intForDes = 24;
            this.intDescription = "Trolls' blood is responsible for their uncanny ability to regenerate from injuries.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 20; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "healthVI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 49;
            this.ingredients = [["Jar of Troll's Blood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1000.
            this.sellValue = 500 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 700.
        }
        else if (this.type == "rawTrollsBlood")
        {
            //For All Items
            this.identity = "Jar of Troll's Blood";
            this.weight = 4;
            this.size = 6;
            this.description = "The blood of a troll stored in a jar.";
            this.intForDes = 20;
            this.intDescription = "Troll's have a slight natural magic resistance; their raw blood exhibits this feature!";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -4; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = -20; //restores will.

            //ability
            this.ability = "trollPoison";

            //Crafting
            this.yield = 1;
            this.intForCraft = 27;
            this.ingredients = [["Glass Jar", 1], ["Troll Flesh", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 690 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 590.
            this.sellValue = 185 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 285.
        }
        else if (this.type == "bahabLeaf")
        {
            //For All Items
            this.identity = "Bahab Leaf";
            this.weight = 1.2;
            this.size = 10;
            this.description = "The colourful leaf of a bahab.";
            this.intForDes = 0;
            this.intDescription = "It has a fairly toxic and stringent smell so it is best not to eat it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.6; //satisfies hunger.
            this.thirst = 0.8; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "bahabPod")
        {
            //For All Items
            this.identity = "Bahab Pod";
            this.weight = 3;
            this.size = 11;
            this.description = "The pink gas producing and storing pod of a bahab.";
            this.intForDes = 3;
            this.intDescription = "This is mildly acidic and has long-lasting hallucinagenic properties that are triggered upon consumption.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -3; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 3; //restores will.

            //ability
            this.ability = "bahabI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 15); // at max, buy for 13.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 25); // at max, sell for 12.
        }
        else if (this.type == "driedBahabPod")
        {
            //For All Items
            this.identity = "Dried Bahab Pod";
            this.weight = 1;
            this.size = 9;
            this.description = "The withered and dried out pod of a Bahab.";
            this.intForDes = 3;
            this.intDescription = "This has strong long-lasting hallucinagenic properties that are triggered upon consumption.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.5; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 6; //restores will.

            //ability
            this.ability = "bahabII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Bahab Pod", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 15); // at max, buy for 17.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 15); // at max, sell for 17.
        }
        else if (this.type == "jarOfUlgoyNectar")
        {
            //For All Items
            this.identity = "Jar of Ulgoy Nectar";
            this.weight = 3.5;
            this.size = 6;
            this.description = "The sweet yet sharply sour nectar of the ulgoy plant.";
            this.intForDes = 9;
            this.intDescription = "This nectar also acts as the Ulgoy plant's stomach acid so it is best not to eat it.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -46; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "foodpoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 3); // at max, buy for 30.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 3); // at max, sell for 30.
        }
        else if (this.type == "jarOfPixiBlood")
        {
            //For All Items
            this.identity = "Jar of Pixi Blood";
            this.weight = 2.5;
            this.size = 6;
            this.description = "The thick liquid tastes like a buzzing insect in your throat.";
            this.intForDes = 19;
            this.intDescription = "Pixi blood is a potent base used to make certain potions, it is also a powerful former.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassJar", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 10; //warms player.
            this.heal = -5; //heals health.
            this.generation = 15; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 75 - Math.floor(player.getCharisma() / 3); // at max, buy for 60.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 1); // at max, sell for 60.
        }
        else if (this.type == "vardanianBowlOfNaapridMilk") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Naaprid Milk";
            this.weight = 3.5;
            this.size = 12;
            this.description = "An iron bowl filled with the thick creamy milk of a naaprid.";
            this.intForDes = 3;
            this.intDescription = "The Kellish were the first people to tame and farm naaprids for milk and meat.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 17.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0.5; //restores will.
            this.cooling = 10; //cools player.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Naaprid Milk", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 8); // at max, buy for 15.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 12); // at max, sell for 15.
        }
        else if (this.type == "vardanianBowlOfWaantiMilk")
        {
            //For All Items
            this.identity = "Vardanian Bowl of Waanti Milk";
            this.weight = 3.5;
            this.size = 12;
            this.description = "An iron bowl filled with the sour, gamey milk of a waanti.";
            this.intForDes = 3;
            this.intDescription = "Waanti are generally herded by the Freydic, and used for both milk and meat.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 14; //quenches thirst.
            this.warmth = 0.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 9; //cools player.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Waanti Milk", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 8); // at max, sell for 14.
        }
        else if (this.type == "vardanianBowlOfSourCream")
        {
            //For All Items
            this.identity = "Vardanian Bowl of Sour Cream";
            this.weight = 8;
            this.size = 12;
            this.description = "Thick creamy milk curd that has a mild sour flavour.";
            this.intForDes = 6;
            this.intDescription = "Sour cream is formed by letting bovine milk sit at room temperature.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 18; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Sour Cream", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 6); // at max, buy for 17.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 10); // at max, sell for 17.
        }
        else if (this.type == "vardanianBowlOfMandrake")
        {
            //For All Items
            this.identity = "Vardanian Bowl of Mandrake";
            this.weight = 10;
            this.size = 12;
            this.description = "An iron bowl that contains a mandrake soaking in bovine milk.";
            this.intForDes = 12;
            this.intDescription = "The only way to avoid a mandrake's lethal cry is to soak it in bovine milk.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1], [new Item("vardanianBowlOfBovineMilk", false), 3]];
            this.ingredients = [["Vardanian Pot of Mandrake", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28; // at max, buy for 28.
            this.sellValue = 28; // at max, sell for 28.
        }
        else if (this.type == "bucketOfMandrake")
        {
            //For All Items
            this.identity = "Bucket of Mandrake";
            this.weight = 10;
            this.size = 12;
            this.description = "A bucket that contains a mandrake soaking in bovine milk.";
            this.intForDes = 12;
            this.intDescription = "The only way to avoid a mandrake's lethal cry is to soak it in bovine milk.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28; // at max, buy for 28.
            this.sellValue = 28; // at max, sell for 28.
        }
        else if (this.type == "kellishClayPotOfMandrake")
        {
            //For All Items
            this.identity = "Kellish Clay Pot of Mandrake";
            this.weight = 51;
            this.size = 15;
            this.description = "A kellish style of pot that contains a mandrake soaking in bovine milk.";
            this.intForDes = 12;
            this.intDescription = "The only way to avoid a mandrake's lethal cry is to soak it in bovine milk.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 37; // at max, buy for 37.
            this.sellValue = 37; // at max, sell for 37.
        }
        else if (this.type == "vardanianBowlOfMushroomStrogonoff") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Mushroom Strogonoff and Spaetzle";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with mushrooms and spaetzle in a lightly spiced sour cream sauce.";
            this.intForDes = 0;
            this.intDescription = "It is savoury and creamy and the spaetzle gives it some texture.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Mushroom Strogonoff and Spaetzle", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 50); // at max, buy for 15.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 25); // at max, sell for 15.
        }
        else if (this.type == "vardanianPotOfMushroomStrogonoff") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Mushroom Strogonoff and Spaetzle";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with mushrooms and spaetzle in a lightly spiced sour cream sauce.";
            this.intForDes = 0;
            this.intDescription = "It is savoury and creamy and the spaetzle gives it some texture.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.biproducts = [[new Item("vardanianBowl", false), 2]];
            this.ingredients = [["Vardanian Pot", 1], ["Kozlyak Mushrooms", 5], ["Vardanian Bowl of Sour Cream", 2], ["Wheat Flour", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 80; // at max, buy for 80.
            this.sellValue = 78; // at max, sell for 78.
        }
        else if (this.type == "vardanianBowlOfBorshtSoup") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Borsht Soup";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with chopped borsht in broth with a hefty dallop of sour cream.";
            this.intForDes = 0;
            this.intDescription = "It is brothy and sweet, and the sour cream adds a bit of sour and fat.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 8; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Borsht Soup", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //3
            this.buyValue = 12 - Math.floor(player.getCharisma() / 50); // at max, buy for 11.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 50); // at max, sell for 11.
        }
        else if (this.type == "vardanianPotOfBorshtSoup") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Borsht Soup";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with chopped borsht in broth with a lot of sour cream.";
            this.intForDes = 0;
            this.intDescription = "It is brothy and sweet, and the sour cream adds a bit of sour and fat.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.biproducts = [[new Item("vardanianBowl", false), 1]];
            this.ingredients = [["Vardanian Pot of Water", 1], ["Borsht", 14], ["Vardanian Bowl of Sour Cream", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //14
            this.buyValue = 55; // at max, buy for 55.
            this.sellValue = 53; // at max, sell for 53.
        }
        else if (this.type == "vardanianBowlOfCabbageSoup") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Cabbage Soup";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with broth, cabbage, and potatoes.";
            this.intForDes = 0;
            this.intDescription = "It is warming, brothy, and wholesome.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 11; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Cabbage Soup", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //3
            this.buyValue = 10 - Math.floor(player.getCharisma() / 50); // at max, buy for 9.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "vardanianPotOfCabbageSoup") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Cabbage Soup";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with broth, cabbage, and potatoes.";
            this.intForDes = 0;
            this.intDescription = "It is warming, brothy, and wholesome.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Vardanian Pot of Water", 1], ["Cabbage", 9], ["Potato", 8]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //14
            this.buyValue = 42; // at max, buy for 42.
            this.sellValue = 36; // at max, sell for 36.
        }
        else if (this.type == "vardanianBowlOfCreamyVenisonStew") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Creamy Venison Stew";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with a creamy stew of venison, cabbage, and potatoes.";
            this.intForDes = 0;
            this.intDescription = "It is hearty, creamy, and gamey.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 19; //satisfies hunger.
            this.thirst = 9; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Creamy Venison Stew", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //3
            this.buyValue = 21 - Math.floor(player.getCharisma() / 50); // at max, buy for 20.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 50); // at max, sell for 20.
        }
        else if (this.type == "vardanianPotOfCreamyVenisonStew") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Creamy Venison Stew";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with a creamy stew of venison, cabbage, and potatoes.";
            this.intForDes = 0;
            this.intDescription = "It is hearty, creamy, and gamey.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 24;
            this.biproducts = [[new Item("vardanianBowl", false), 1]];
            this.ingredients = [["Vardanian Pot of Water", 1], ["Vardanian Bowl of Sour Cream", 1], ["Cabbage", 7], ["Potato", 7], ["Raw Venison", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //14
            this.buyValue = 70; // at max, buy for 70.
            this.sellValue = 66; // at max, sell for 66.
        }
        else if (this.type == "vardanianBowlOfBovineAndPierogiStew") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Bovine and Pierogi Stew";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with a stew of stuffed pierogis and tender chunks of bovine meat.";
            this.intForDes = 0;
            this.intDescription = "The smokey bovodo cheese and potato stuffed pierogi with the thick savoury bovine broth has a gloriously rich flavour.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 35; //satisfies hunger.
            this.thirst = 15; //quenches thirst.
            this.warmth = 13; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1.5; //recoops lost energy.
            this.replenish = 0.5; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Bovine and Pierogi Stew", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //3
            this.buyValue = 43 - Math.floor(player.getCharisma() / 15); // at max, buy for 40.
            this.sellValue = 27 + Math.floor(player.getCharisma() / 15); // at max, sell for 30.
        }
        else if (this.type == "vardanianPotOfBovineAndPierogiStew") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Bovine and Pierogi Stew";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with a stew of stuffed pierogis and tender chunks of bovine meat.";
            this.intForDes = 0;
            this.intDescription = "The smokey bovodo cheese and potato stuffed pierogi with the thick savoury bovine broth has a gloriously rich flavour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Vardanian Pot of Water", 1], ["Wedge of Smoked Bovodo Cheese", 3], ["Potato", 9], ["Raw Bovine Ribs", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for) //14
            this.buyValue = 137; // at max, buy for 117.
            this.sellValue = 109; // at max, sell for 109.
        }
        else if (this.type == "vardanianBowlOfBovineStrogonoff") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Bovine Strogonoff and Spaetzle";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with chunks of bovine and spaetzle in a lightly spiced sour cream sauce.";
            this.intForDes = 0;
            this.intDescription = "It is savoury, meaty, and creamy and the spaetzle gives it some texture.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = 8; //quenches thirst.
            this.warmth = 9; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Bovine Strogonoff and Spaetzle", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 25); // at max, buy for 20.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 50); // at max, sell for 20.
        }
        else if (this.type == "vardanianPotOfBovineStrogonoff") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Bovine Strogonoff and Spaetzle";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with chunks of bovine and spaetzle in a lightly spiced sour cream sauce.";
            this.intForDes = 0;
            this.intDescription = "It is savoury, meaty, and creamy and the spaetzle gives it some texture.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.biproducts = [[new Item("vardanianBowl", false), 2]];
            this.ingredients = [["Vardanian Pot", 1], ["Raw Bovine Ribs", 3], ["Vardanian Bowl of Sour Cream", 2], ["Wheat Flour", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 96; // at max, buy for 96.
            this.sellValue = 88; // at max, sell for 88.
        }
        else if (this.type == "vardanianBowlOfTagglerStew") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Taggler Stew";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with broth, sliced taggler, borsht, potato, and cabbage.";
            this.intForDes = 0;
            this.intDescription = "It has a wholesome, warming, and hearty flavour.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 16; //satisfies hunger.
            this.thirst = 16; //quenches thirst.
            this.warmth = 12; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0.25; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Taggler Stew", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 15); // at max, buy for 17.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 15); // at max, sell for 15.
        }
        else if (this.type == "vardanianPotOfTagglerStew") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Taggler Stew";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with broth, sliced taggler, borsht, potato, and cabbage.";
            this.intForDes = 0;
            this.intDescription = "It has a wholesome, warming, and hearty flavour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 21;
            this.ingredients = [["Vardanian Pot of Water", 1], ["Raw Taggler", 4], ["Borsht", 6], ["Potato", 6], ["Cabbage", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 68; // at max, buy for 68.
            this.sellValue = 60; // at max, sell for 60.
        }
        else if (this.type == "vardanianBowlOfMulstishStew") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Mulstish Stew";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with broth, chopped mulstish, and cabbage.";
            this.intForDes = 0;
            this.intDescription = "It has an extremely strong savoury flavour with a moderate amount of fishiness.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 8; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = 0.15; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Mulstish Stew", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 25); // at max, buy for 16.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 25); // at max, sell for 12.
        }
        else if (this.type == "vardanianPotOfMulstishStew") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Mulstish Stew";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with broth, chopped mulstish, and cabbage.";
            this.intForDes = 0;
            this.intDescription = "It has an extremely strong savoury flavour with a moderate amount of fishiness.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Vardanian Pot of Water", 1], ["Sliced Raw Mulstish", 5], ["Cabbage", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50; // at max, buy for 50.
            this.sellValue = 40; // at max, sell for 40.
        }
        else if (this.type == "vardanianBowlOfToadStew") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Toad Stew";
            this.weight = 4; //1
            this.size = 12;
            this.description = "An iron bowl filled with broth, toad meat, cabbage, and borsht.";
            this.intForDes = 0;
            this.intDescription = "The toad meat has a bit of a rubberiness to it which makes it a bit of an effort to chew.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Toad Stew", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 50); // at max, buy for 9.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "vardanianPotOfToadStew") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Toad Stew";
            this.weight = 26; //14
            this.size = 14;
            this.description = "An iron pot filled with broth, toad meat, cabbage, and borsht.";
            this.intForDes = 0;
            this.intDescription = "The toad meat has a bit of a rubberiness to it which makes it a bit of an effort to chew.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Vardanian Pot of Water", 1], ["Toad Meat", 4], ["Cabbage", 6], ["Borsht", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 47; // at max, buy for 47.
            this.sellValue = 45; // at max, sell for 45.
        }
        else if (this.type == "vardanianBowlOfSlowBraisedKoivaya") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Slow Braised Koivaya";
            this.weight = 2.7; //1
            this.size = 12;
            this.description = "An iron bowl filled with cheesey bovodo potatoes, cabbage, and a large helping of slow braised koivaya meat topped with a dollop of sour cream.";
            this.intForDes = 0;
            this.intDescription = "It tastes amazing!";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 30; //satisfies hunger.
            this.thirst = 0.75; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0.3; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Slow Braised Koivaya", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 27 - Math.floor(player.getCharisma() / 25); // at max, buy for 25.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 25); // at max, sell for 24.
        }
        else if (this.type == "vardanianPotOfSlowBraisedKoivaya") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Slow Braised Koivaya";
            this.weight = 20.8; //14
            this.size = 14;
            this.description = "An iron pot filled with cheesey bovodo potatoes, cabbage, and a large helping of slow braised koivaya meat topped with a dollop of sour cream";
            this.intForDes = 0;
            this.intDescription = "It tastes amazing!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 28;
            this.biproducts = [[new Item("vardanianBowl", false), 1]];
            this.ingredients = [["Vardanian Pot", 1], ["Raw Koivaya Flesh", 4], ["Vardanian Bowl of Sour Cream", 1], ["Cabbage", 3], ["Potato", 5], ["Wedge of Bovodo Cheese", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 110; // at max, buy for 110.
            this.sellValue = 100; // at max, sell for 100.
        }
        else if (this.type == "vardanianBowlOfBovineMilk")
        {
            //For All Items
            this.identity = "Vardanian Bowl of Bovine Milk";
            this.weight = 5;
            this.size = 12;
            this.description = "An iron bowl filled with the thin watery milk of a bovine.";
            this.intForDes = 3;
            this.intDescription = "The Vardanians were the first people to tame and farm bovines for milk and meat.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 16; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.1; //restores will.
            this.cooling = 12; //cools player.

            this.decayable = true;
            this.decayLimit = 20;
            this.decayObjective = "vardanianBowlOfSourCream";

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Bovine Milk", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 12); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "kellishClayPotOfBovineMilk")
        {
            //For All Items
            this.identity = "Kellish Clay Pot of Bovine Milk";
            this.weight = 49;
            this.size = 15;
            this.description = "A kellish style of pot filled with the milk of a bovine.";
            this.intForDes = 8;
            if (player.raceName == "Kel")
            {
                this.intForDes = 0;
            }
            this.intDescription = "This type of pot is traditionally used by the kellish to collect milk from the local naaprids.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 57; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0.375; //restores will.
            this.cooling = 24; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 48 - Math.floor(player.getCharisma() / 3.125); // at max, buy for 32.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 5); // at max, sell for 32.
        }
        else if (this.type == "bucketOfBovineMilk")
        {
            //For All Items
            this.identity = "Bucket of Bovine Milk";
            this.weight = 8;
            this.size = 12;
            this.description = "An iron bucket filled with the thin watery milk of a bovine.";
            this.intForDes = 3;
            this.intDescription = "The Vardanians were the first people to tame and farm bovines for milk and meat.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 32; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = 0.2; //restores will.
            this.cooling = 18; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 6); // at max, buy for 12.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
        }
        else if (this.type == "bucketOfNaapridMilk")
        {
            //For All Items
            this.identity = "Bucket of Naaprid Milk";
            this.weight = 6;
            this.size = 12;
            this.description = "An iron bucket filled with the thick creamy milk of a naaprid.";
            this.intForDes = 3;
            this.intDescription = "The Kellish were the first people to tame and farm naaprids for milk and meat.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 35; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 2; //recoops lost energy.
            this.replenish = 1; //restores will.
            this.cooling = 12; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 38 - Math.floor(player.getCharisma() / 4); // at max, buy for 26.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 6); // at max, sell for 26.
        }
        else if (this.type == "bucketOfWaantiMilk")
        {
            //For All Items
            this.identity = "Bucket of Waanti Milk";
            this.weight = 6;
            this.size = 12;
            this.description = "An iron bucket filled with the sour, gamey milk of a waanti.";
            this.intForDes = 3;
            this.intDescription = "Waanti are generally herded by the Freydic, and used for both milk and meat.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 28; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 11; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 10); // at max, buy for 24.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 5); // at max, sell for 23.
        }
        else if (this.type == "bucketOfWater")
        {
            //For All Items
            this.identity = "Bucket of Water";
            this.weight = 10;
            this.size = 12;
            this.description = "An iron bucket filled to the brim with water.";
            this.intForDes = 1;
            this.intDescription = "Buckets of water are only used in recipes that require a lot of water.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 35; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 1; //restores will.
            this.cooling = 20; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 10); // at max, buy for 5.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "vardanianBowlOfWater") //a vardanian bowl holds half as much as a bucket
        {
            //For All Items
            this.identity = "Vardanian Bowl of Water";
            this.weight = 4.5;
            this.size = 12;
            this.description = "An iron bowl filled to the brim with water.";
            this.intForDes = 1;
            this.intDescription = "If the water spills out of the bowl the water will still be wet...";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["vardanianBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 17.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0.5; //restores will.
            this.cooling = 14; //cools player.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianPot", false), 1]];
            this.ingredients = [["Vardanian Pot of Water", 1], ["Vardanian Bowl", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "bucketOfTechiTea")
        {
            //For All Items
            this.identity = "Bucket of Techi Tea";
            this.weight = 6;
            this.size = 12;
            this.description = "An iron bucket filled to the brim with hot leave juice.";
            this.intForDes = 1;
            this.intDescription = "Techi weed is the standard base for almost all tea in the lands.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 35; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 2.5; //recoops lost energy.
            this.replenish = 4; //restores will.
            this.wake = 5; //awakens player.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Bucket of Water", 1], ["Dried Techi Leaf", 9]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue =  45 - Math.floor(player.getCharisma() / 2); // at max, buy for 20.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 6); // at max, sell for 20.
        }
        else if (this.type == "techiTea")
        {
            //For All Items
            this.identity = "Techi Tea";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with plain unflavoured techi tea.";
            this.intForDes = 2;
            this.intDescription = "It is a hot drink that is both energizing and calming.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.5; //restores will.
            this.wake = 0.5; //awakens player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 10], ["Bucket of Techi Tea", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "bucketOfErguerPaste")
        {
            //For All Items
            this.identity = "Bucket of Erguer Paste";
            this.weight = 12.71;
            this.size = 12;
            this.description = "An iron bucket filled to the brim with mashed erguer flower.";
            this.intForDes = 7;
            this.intDescription = "At this stage erguer paste is usually fermented and made into an artisan wine.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 41; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 6; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Bucket", 1], ["Erguer Paste", 17]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 119; // at max, buy for 119.
            this.sellValue = 85 + Math.floor(player.getCharisma() / 3); // at max, sell for 100.
        }
        else if (this.type == "bucketOfCranberryJuice")
        {
            //For All Items
            this.identity = "Bucket of Cranberry Juice";
            this.weight = 9;
            this.size = 12;
            this.description = "An iron bucket filled to the brim with fresh squeezed cranberry juice.";
            this.intForDes = 0;
            this.intDescription = "Cranberry juice is extremely bitter and sour.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 10; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -2; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;

            this.ingredients = [["Bucket", 1], ["Cranberries", 30]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16; // at max, buy for 16.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 15); // at max, sell for 16.
        }
        else if (this.type == "cranberryJuicePintGlass")
        {
            //For All Items
            this.identity = "Pint Glass of Cranberry Juice";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with fresh squeezed cranberry juice.";
            this.intForDes = 0;
            this.intDescription = "It is absurdly bitter, and very sour.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.5; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = -0.5; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 10], ["Bucket of Cranberry Juice", 1]];
            this.biproducts = [[[new Item("bucket", false), 1]]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "bucketOfChyoulJuice")
        {
            //For All Items
            this.identity = "Bucket of Chyoul Juice";
            this.weight = 7;
            this.size = 12;
            this.description = "An iron bucket filled to the brim with fresh squeezed chyoul berry juice.";
            this.intForDes = 0;
            this.intDescription = "Chyoul juice is sweet with a thick throat coating fruity aftertaste.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 42; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 2; //recoops lost energy.
            this.replenish = 3; //restores will.

            //ability
            this.ability = "bigQuench";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Bucket", 1], ["Chyoul Berries", 20]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 80 - Math.floor(player.getCharisma() / 5); // at max, buy for 70.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 1.66667); // at max, sell for 70.
        }
        else if (this.type == "chyoulJuicePintGlass")
        {
            //For All Items
            this.identity = "Pint Glass of Chyoul Juice";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with fresh squeezed chyoul berry juice.";
            this.intForDes = 0;
            this.intDescription = "It has a thick throat coating fruityness and a smooth sweet flavour.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.8; //satisfies hunger.
            this.thirst = 7; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.4; //restores will.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 10;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 10], ["Bucket of Chyoul Juice", 1]];
            this.biproducts = [[[new Item("bucket", false), 1]]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 50); // at max, sell for 12.
        }
        else if (this.type == "bucketOfPluttJuice")
        {
            //For All Items
            this.identity = "Bucket of Plutt Juice";
            this.weight = 7;
            this.size = 12;
            this.description = "An iron bucket filled to the brim with fresh squeezed plutt berry juice.";
            if (player.raceName == "Freynor")
            {
                this.intForDes = 1;
            }
            else
            {
                this.intForDes = 11;
            }
            this.intDescription = "Hot plutt berry cider, a freydic specialty, can be made by heating plutt berry juice with some ground ogard.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 40; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 2; //restores will.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Freynor")
            {
                this.intForCraft = 0;
            }
            else
            {
                this.intForCraft = 4;
            }
            this.ingredients = [["Bucket", 1], ["Plutt Berries", 14]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 75 - Math.floor(player.getCharisma() / 5); // at max, buy for 65.
            this.sellValue = 35 + Math.floor(player.getCharisma() / 3); // at max, sell for 50.
        }
        else if (this.type == "pluttJuicePintGlass")
        {
            //For All Items
            this.identity = "Pint Glass of Plutt Juice";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with fresh squeezed plutt berry juice.";
            this.intForDes = 0;
            this.intDescription = "It has a pulpy somewhat viscous texture and a strong natural sweetness.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.4; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 10], ["Bucket of Plutt Juice", 1]];
            this.biproducts = [[[new Item("bucket", false), 1]]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 50); // at max, buy for 8.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "bucketOfHotPluttBerryCider")
        {
            //For All Items
            this.identity = "Bucket of Hot Plutt Berry Cider";
            this.weight = 7;
            this.size = 12;
            this.description = "An iron bucket filled to the brim with sweet spiced plutt berry cider.";
            this.intForDes = 0;
            this.intDescription = "The cider fills the air around it with a hot, nutty and sweet berry scent.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bucket", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 40; //quenches thirst.
            this.warmth = 40; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 2; //restores will.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Freynor")
            {
                this.intForDes = 1;
            }
            else
            {
                this.intForDes = 11;
            }
            this.ingredients = [["Bucket of Plutt Juice", 1], ["Ground Ogard", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100 - Math.floor(player.getCharisma() / 5); // at max, buy for 90.
            this.sellValue = 55 + Math.floor(player.getCharisma() / 3); // at max, sell for 70.
        }
        else if (this.type == "pluttCiderPintGlass")
        {
            //For All Items
            this.identity = "Pint Glass of Hot Plutt Berry Cider";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with spiced plutt berry cider.";
            this.intForDes = 0;
            this.intDescription = "Plutt berry cider has a strong spicy and nutty aroma that accompanies that of the plutt berries.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 10], ["Bucket of Hot Plutt Berry Cider", 1]];
            this.biproducts = [[[new Item("bucket", false), 1]]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 15); // at max, buy for 11.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 12); // at max, sell for 9.
        }
        else if (this.type == "theGrailOfEternity")
        {
            //For All Items
            this.identity = "The Grail of Eternity";
            this.weight = 7;
            this.size = 10;
            this.description = "A legendary golden grail engraved with rubies sapphires and emeralds; full of the water of life.";
            this.intForDes = 0;
            this.intDescription = "To drink the water of life from this grail grants the embiber youth and good health."; //All liquid held in this grail magically becomes the water of life.

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["grailOfEternity", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1000; //satisfies hunger.
            this.thirst = 1000; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 1000; //heals health.
            this.generation = 1000; //recoops lost energy.
            this.replenish = 1000; //restores will.
            this.cooling = 1000; //cools player.

            //ability
            this.ability = "eternity";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000000; // at max, buy for 1000000.
            this.sellValue = 1000000; // at max, sell for 1000000.
        }
        else if (this.type == "grailOfEternity")
        {
            //For All Items
            this.identity = "The Grail of Eternity";
            this.weight = 6;
            this.size = 10;
            this.description = "A legendary golden grail engraved with rubies sapphires and emeralds.";
            this.intForDes = 0;
            this.intDescription = "All liquid held in this grail magically becomes the water of life.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000000; // at max, buy for 1000000.
            this.sellValue = 1000000; // at max, sell for 1000000.
        }
        else if (this.type == "theBloodyChalice")
        {
            //For All Items
            this.identity = "The Bloody Chalice";
            this.weight = 190;
            this.size = 13;
            this.description = "A cursed chalice that is marked with the signs of a powerful arch demon.";
            this.intForDes = 0;
            this.intDescription = "The chalice is filled with the blood of the innocent. To drink from it is to make an eternal pact with an arch demon...";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["bloodyChalice", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1000; //satisfies hunger.
            this.thirst = 1000; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 1000; //heals health.
            this.generation = 1000; //recoops lost energy.
            this.replenish = 1000; //restores will.
            this.cooling = 1000; //cools player.

            //ability
            this.ability = "vamprism";

            //Crafting
            //this.yield = 1;
            //this.intForCraft = 0;
            //this.ingredients = [["Baby", 1], ["The Bloody Chalice", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20000; // at max, buy for 20000.
            this.sellValue = 20000; // at max, sell for 20000.
        }
        else if (this.type == "bloodyChalice")
        {
            //For All Items
            this.identity = "The Bloody Chalice";
            this.weight = 180;
            this.size = 13;
            this.description = "A cursed chalice that is marked with the signs of a powerful arch demon.";
            this.intForDes = 0;
            this.intDescription = "It is said that if one drinks the blood of the innocent from this chalice they will be granted immense power.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20000; // at max, buy for 20000.
            this.sellValue = 20000; // at max, sell for 20000.
        }
        else if (this.type == "naapridDrinkinghorn")
        {
            //For All Items
            this.identity = "Naaprid Drinkinghorn";
            this.weight = 0.65;
            this.size = 8;
            this.description = "A hollowed out horn from a naaprid used for storing liquids.";
            this.intForDes = 0;
            this.intDescription = "This is currently empty.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "naapridDrinkinghorn1")
        {
            //For All Items
            this.identity = "Naaprid Drinkinghorn (1)";
            this.weight = 2.15;
            this.size = 8;
            this.description = "A hollowed out horn from a naaprid used for storing liquids.";
            this.intForDes = 0;
            this.intDescription = "This is half full of water.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["naapridDrinkinghorn", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 2; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "naapridDrinkinghornFull")
        {
            //For All Items
            this.identity = "Naaprid Drinkinghorn (full)";
            this.weight = 3.65;
            this.size = 8;
            this.description = "A hollowed out horn from a naaprid used for storing liquids.";
            this.intForDes = 0;
            this.intDescription = "This is full of water.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["naapridDrinkinghorn1", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 2; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "naapridMilkhorn1")
        {
            //For All Items
            this.identity = "Naaprid Drinkinghorn (1)";
            this.weight = 2.15;
            this.size = 8;
            this.description = "A hollowed out horn from a naaprid used for storing liquids.";
            this.intForDes = 0;
            this.intDescription = "This is half full of naaprid milk.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["naapridDrinkinghorn", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.025; //restores will.
            this.cooling = 2; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "naapridMilkhornFull")
        {
            //For All Items
            this.identity = "Naaprid Drinkinghorn (full)";
            this.weight = 3.65;
            this.size = 8;
            this.description = "A hollowed out horn from a naaprid used for storing liquids.";
            this.intForDes = 0;
            this.intDescription = "This is full of naaprid milk.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["naapridMilkhorn1", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.025; //restores will.
            this.cooling = 2; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13; // at max, buy for 13.
            this.sellValue = 13; // at max, sell for 13.
        }
        else if (this.type == "walrusLeatherWaterskinFull")
        {
            //For All Items
            this.identity = "Walrus Leather Waterskin (full)";
            this.weight = 3;
            this.size = 8;
            this.description = "A water skin made from walrus hide.";
            this.intForDes = 0;
            this.intDescription = "The walrus skin holds the water well.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["walrusLeatherWaterskinTwo", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 1.5; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 15); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "walrusLeatherWaterskinTwo")
        {
            //For All Items
            this.identity = "Walrus Leather Waterskin (2)";
            this.weight = 2;
            this.size = 8;
            this.description = "A water skin made from walrus hide.";
            this.intForDes = 0;
            this.intDescription = "The walrus skin holds the water well.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["walrusLeatherWaterskinOne", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 1.5; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "walrusLeatherWaterskinOne")
        {
            //For All Items
            this.identity = "Walrus Leather Waterskin (1)";
            this.weight = 1;
            this.size = 8;
            this.description = "A water skin made from walrus hide.";
            this.intForDes = 0;
            this.intDescription = "There's about one good drink left in it.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["walrusLeatherWaterskin", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 1.5; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "harstAle")
        {
            //For All Items
            this.identity = "Harst Ale";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of harst ale.";
            this.intForDes = 1;
            this.intDescription = "This ale is made from harst grain and hops.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.35; //recoops lost energy.
            this.replenish = -2; //restores will.
            this.alcohol = 27; //intoxicates the mind.
            this.wake = -0.25;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 200;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 200], ["Barrel of Harst Ale", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "santhAle")
        {
            //For All Items
            this.identity = "Santh Ale";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of santh ale.";
            this.intForDes = 1;
            this.intDescription = "This ale is made from Santh grain.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = -3; //restores will.
            this.alcohol = 40; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 200;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 200], ["Barrel of Santh Ale", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 10); // at max, sell for 6.
        }
        else if (this.type == "ashaiWoodBarrel")
        {
            //For All Items
            this.identity = "Ashai Wood Barrel";
            this.weight = 20;
            this.size = 18;
            this.description = "A barrel made of Ashai Wood.";
            this.intForDes = 0;
            this.intDescription = "Its empty.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Ashai Wood", 8], ["Ashai", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40; // at max, buy for 40.
            this.sellValue = 40; // at max, sell for 40.
        }
        else if (this.type == "ashaiWoodBarrelOfWater")
        {
            //For All Items
            this.identity = "Ashai Wood Barrel Of Water";
            this.weight = 20;
            this.size = 18;
            this.description = "A water filled barrel made of Ashai Wood.";
            this.intForDes = 0;
            this.intDescription = "Its empty.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40; // at max, buy for 40.
            this.sellValue = 40; // at max, sell for 40.
        }
        else if (this.type == "barrel")
        {
            //For All Items
            this.identity = "Barrel";
            this.weight = 15;
            this.size = 18;
            this.description = "A wooden barrel.";
            this.intForDes = 0;
            this.intDescription = "Its empty.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Wood", 6], ["Adhesive", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35; // at max, buy for 35.
            this.sellValue = 35; // at max, sell for 35.
        }
        else if (this.type == "barrelOfWater")
        {
            //For All Items
            this.identity = "Barrel of Water";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel full of water.";
            this.intForDes = 29;
            this.intDescription = "From the standpoint of water, this is one of the wettest...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50; // at max, buy for 50.
            this.sellValue = 50; // at max, sell for 50.
        }
        else if (this.type == "barrelOfWheatBeer")
        {
            //For All Items
            this.identity = "Barrel of Wheat Beer";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of wheat beer.";
            this.intForDes = 1;
            this.intDescription = "This beer is made from wheat and it has a lot of residual fermented wheat bits floating around in it.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Barrel of Water", 1], ["Wheat", 200]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 300; // at max, buy for 300.
            this.sellValue = 300; // at max, sell for 300.
        }
        else if (this.type == "barrelOfCider")
        {
            //For All Items
            this.identity = "Barrel of Cider";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of hard apple cider.";
            this.intForDes = 6;
            this.intDescription = "Many apples are too sour to eat so they are fermented into alcoholic cider.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Barrel of Water", 1], ["Apple", 60]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 260; // at max, buy for 260.
            this.sellValue = 260; // at max, sell for 260.
        }
        else if (this.type == "barrelOfHarstAle")
        {
            //For All Items
            this.identity = "Barrel of Harst Ale";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of harst ale.";
            this.intForDes = 1;
            this.intDescription = "This ale is made from harst grain and hops.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Barrel of Water", 1], ["Harst Grain", 160], ["Hops", 25]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 341; // at max, buy for 341.
            this.sellValue = 341; // at max, sell for 341.
        }
        else if (this.type == "barrelOfSanthAle")
        {
            //For All Items
            this.identity = "Barrel of Santh Ale";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of santh ale.";
            this.intForDes = 1;
            this.intDescription = "This ale is made from Santh grain.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Barrel of Water", 1], ["Santh Grain", 150]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1300; // at max, buy for 1300.
            this.sellValue = 1300; // at max, sell for 1300.
        }
        else if (this.type == "barrelOfMead")
        {
            //For All Items
            this.identity = "Barrel of Mead";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of mead.";
            this.intForDes = 1;
            this.intDescription = "Mead is made from honey.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Barrel of Water", 1], ["Honey", 50]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1100; // at max, buy for 1050.
            this.sellValue = 1100; // at max, sell for 1050.
        }
        else if (this.type == "caskOfPluttWine")
        {
            //For All Items
            this.identity = "Cask of Plutt Wine";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of plutt wine.";
            this.intForDes = 1;
            this.intDescription = "Plutt wine is made from plutt berries.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 41;
            this.ingredients = [["Barrel", 1], ["Plutt Berries", 500]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2000; // at max, buy for 2000.
            this.sellValue = 2000; // at max, sell for 2000.
        }
        else if (this.type == "caskOfCranberryWine")
        {
            //For All Items
            this.identity = "Cask of Cranberry Wine";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of cranberry wine.";
            this.intForDes = 1;
            this.intDescription = "Cranberry wine is made from cranberries... just in case you were curious.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Barrel", 1], ["Cranberries", 600]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 900; // at max, buy for 900.
            this.sellValue = 900; // at max, sell for 900.
        }
        else if (this.type == "caskOfChyoulWine")
        {
            //For All Items
            this.identity = "Cask of Chyoul Wine";
            this.weight = 220;
            this.size = 18;
            this.description = "A wooden barrel of chyoul wine.";
            this.intForDes = 1;
            this.intDescription = "Chyoul wine is made from chyoul berries.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 42;
            this.ingredients = [["Ashai Wood Barrel", 1], ["Chyoul Berries", 720]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2605; // at max, buy for 2605.
            this.sellValue = 2605; // at max, sell for 2605.
        }
        else if (this.type == "caskOfErguerWine")
        {
            //For All Items
            this.identity = "Cask of Erguer Wine";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of erguer wine.";
            this.intForDes = 40;
            this.intDescription = "Erguer wine is fermented such that it consistently requires more erguer paste in order for the yeast to continue breaking it down.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Barrel", 1], ["Bucket of Erguer Paste", 151]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17000; // at max, buy for 17000.
            this.sellValue = 17000; // at max, sell for 17000.
        }
        else if (this.type == "barrelOfGin")
        {
            //For All Items
            this.identity = "Barrel of Gin";
            this.weight = 215;
            this.size = 18;
            this.description = "A wooden barrel of distilled harst ale that has been soaked with juniper for flavour.";
            this.intForDes = 25;
            this.intDescription = "The head cut of a distillation is poisonous, so it should be removed from the batch before filling the barrel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Barrel of Harst Ale", 1], ["Juniper Berries", 90]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4900; // at max, buy for 4900.
            this.sellValue = 4900; // at max, sell for 4900.
        }
        else if (this.type == "mead")
        {
            //For All Items
            this.identity = "Mead";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of mead.";
            this.intForDes = 1;
            this.intDescription = "A strong alcoholic beverage brewed from honey.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.75; //recoops lost energy.
            this.replenish = -4; //restores will.
            this.alcohol = 60; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 200;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 200], ["Barrel of Mead", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
        }
        else if (this.type == "wheatBeer")
        {
            //For All Items
            this.identity = "Wheat Beer";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of wheat Beer.";
            this.intForDes = 1;
            this.intDescription = "A wheaty, yeasty dark beer that is primarily drunk in Vardania.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = -3; //restores will.
            this.alcohol = 25; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 200;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 200], ["Barrel of Wheat Beer", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "cranberryWine")
        {
            //For All Items
            this.identity = "Pint of Cranberry Wine";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of cranberry wine.";
            this.intForDes = 1;
            this.intDescription = "A sour alcoholic beverage made from cranberries.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -8; //restores will.
            this.alcohol = 65; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.ingredients = [["Bottle of Cranberry Wine", 1], ["Pint Glass", 4]];
            this.biproducts = [[new Item("glassBottle", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 15; // at max, sell for 15.
        }
        else if (this.type == "chyoulWine")
        {
            //For All Items
            this.identity = "Pint of Chyoul Wine";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of chyoul berry wine.";
            this.intForDes = 0;
            this.intDescription = "This smokey smelling wine is made from chyoul berries and it is is aged in Ashai Wood.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.125; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.9; //recoops lost energy.
            this.replenish = -2.5; //restores will.
            this.alcohol = 70; //intoxicates the mind.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.ingredients = [["Bottle of Chyoul Wine", 1], ["Pint Glass", 4]];
            this.biproducts = [[new Item("glassBottle", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 27 - Math.floor(player.getCharisma() / 25); // at max, buy for 25.
            this.sellValue = 24 + Math.floor(player.getCharisma() / 50); // at max, sell for 25.
        }
        else if (this.type == "cider")
        {
            //For All Items
            this.identity = "Pint of Cider";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of hard apple cider.";
            this.intForDes = 0;
            this.intDescription = "This tastes mildly sweet and has a pleasant acidity.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = -1.5; //restores will.
            this.alcohol = 40; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.ingredients = [["Bottle of Cider", 1], ["Pint Glass", 4]];
            this.biproducts = [[new Item("glassBottle", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "gin")
        {
            //For All Items
            this.identity = "Gin";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of gin.";
            this.intForDes = 0;
            this.intDescription = "It is dry, burns the throat, and tastes of juniper.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = -5; //restores will.
            this.alcohol = 90; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.ingredients = [["Bottle of Gin", 1], ["Pint Glass", 4]];
            this.biproducts = [[new Item("glassBottle", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 25); // at max, buy for 28.
            this.sellValue = 26 + Math.floor(player.getCharisma() / 25); // at max, sell for 28.
        }
        else if (this.type == "pluttWine")
        {
            //For All Items
            this.identity = "Pint of Plutt Wine";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of plutt wine.";
            this.intForDes = 1;
            this.intDescription = "This wine is made from plutt berries.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.25; //satisfies hunger.
            this.thirst = 4.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.65; //recoops lost energy.
            this.replenish = -3.5; //restores will.
            this.alcohol = 50; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.ingredients = [["Bottle of Plutt Wine", 1], ["Pint Glass", 4]];
            this.biproducts = [[new Item("glassBottle", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 15); // at max, buy for 19.
            this.sellValue = 17 + Math.floor(player.getCharisma() / 25); // at max, sell for 19.
        }
        else if (this.type == "erguerWine")
        {
            //For All Items
            this.identity = "Pint of Erguer Wine";
            this.weight = 1;
            this.size = 6;
            this.description = "A glass pint of erguer wine.";
            this.intForDes = 3;
            this.intDescription = "This wine is made from the fermented mash of a sweet northeastern flower.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.15; //satisfies hunger.
            this.thirst = 3.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.75; //recoops lost energy.
            this.replenish = -4.25; //restores will.
            this.alcohol = 84; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 0;
            this.ingredients = [["Bottle of Erguer Wine", 1], ["Pint Glass", 4]];
            this.biproducts = [[new Item("glassBottle", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100 - Math.floor(player.getCharisma() / 25); // at max, buy for 98.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 6); // at max, sell for 98.
        }
        else if (this.type == "glassBottleOfErguerWine")
        {
            //For All Items
            this.identity = "Bottle of Erguer Wine";
            this.weight = 4;
            this.size = 6;
            this.description = "A bottle of wine that was made from the fermented mash of a sweet northeastern flower.";
            this.intForDes = 0;
            this.intDescription = "It is a fairly dry wine with a high alcohol content and a floral aroma.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassBottle", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 13; //quenches thirst.
            this.warmth = 0.6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 3; //recoops lost energy.
            this.replenish = -17; //restores will.
            this.alcohol = 336; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 50;
            this.intForCraft = 0;
            this.ingredients = [["Glass Bottle", 50], ["Cask of Erguer Wine", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 390 - Math.floor(player.getCharisma() / 5); // at max, buy for 380.
            this.sellValue = 365 + Math.floor(player.getCharisma() / 3); // at max, sell for 380.
        }
        else if (this.type == "glassBottleOfCranberryWine")
        {
            //For All Items
            this.identity = "Bottle of Cranberry Wine";
            this.weight = 4;
            this.size = 6;
            this.description = "A bottle of cranberry wine.";
            this.intForDes = 0;
            this.intDescription = "It is a very bitter, and sour wine that tastes of leather, cranberries, and dirt.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassBottle", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 8; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -20; //recoops lost energy.
            this.replenish = -40; //restores will.
            this.alcohol = 260; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 50;
            this.intForCraft = 0;
            this.ingredients = [["Glass Bottle", 50], ["Cask of Cranberry Wine", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55; // at max, buy for 55.
            this.sellValue = 55; // at max, sell for 55.
        }
        else if (this.type == "glassBottleOfCider")
        {
            //For All Items
            this.identity = "Bottle of Cider";
            this.weight = 4;
            this.size = 6;
            this.description = "A glass bottle of hard apple cider.";
            this.intForDes = 0;
            this.intDescription = "This tastes mildly sweet and has a pleasant acidity.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassBottle", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 18; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 2; //recoops lost energy.
            this.replenish = -6; //restores will.
            this.alcohol = 160; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 50;
            this.intForCraft = 0;
            this.ingredients = [["Glass Bottle", 50], ["Barrel of Cider", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 10); // at max, buy for 20.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 25); // at max, sell for 20.
        }
        else if (this.type == "glassBottleOfPluttWine")
        {
            //For All Items
            this.identity = "Bottle of Plutt Wine";
            this.weight = 4;
            this.size = 6;
            this.description = "A bottle of plutt berry wine.";
            this.intForDes = 0;
            this.intDescription = "It is a fairly sweet wine with notes of honey, spice and a butteryness attained by aging in wood.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassBottle", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 16; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 2.5; //recoops lost energy.
            this.replenish = -12; //restores will.
            this.alcohol = 200; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 50;
            this.intForCraft = 0;
            this.ingredients = [["Glass Bottle", 50], ["Cask of Plutt Wine", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 82 - Math.floor(player.getCharisma() / 5); // at max, buy for 72.
            this.sellValue = 66 + Math.floor(player.getCharisma() / 8); // at max, sell for 72.
        }
        else if (this.type == "glassBottleOfChyoulWine")
        {
            //For All Items
            this.identity = "Bottle of Chyoul Wine";
            this.weight = 4;
            this.size = 6;
            this.description = "A bottle of Chyoul berry wine.";
            this.intForDes = 0;
            this.intDescription = "It is a dry, and particularly viscous wine that has a throat coating dried fruit flavour, and a hint of smokiness.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassBottle", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 20; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 4; //recoops lost energy.
            this.replenish = -10; //restores will.
            this.alcohol = 280; //intoxicates the mind.

            //ability
            this.ability = "quench";

            //Crafting
            this.yield = 50;
            this.intForCraft = 0;
            this.ingredients = [["Glass Bottle", 50], ["Cask of Chyoul Wine", 1]];
            this.biproducts = [[new Item("ashaiWoodBarrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 93 - Math.floor(player.getCharisma() / 3.846153846); // at max, buy for 80.
            this.sellValue = 72 + Math.floor(player.getCharisma() / 6); // at max, sell for 80.
        }
        else if (this.type == "glassBottleOfGin")
        {
            //For All Items
            this.identity = "Bottle of Gin";
            this.weight = 4;
            this.size = 6;
            this.description = "A bottle of gin.";
            this.intForDes = 0;
            this.intDescription = "It is dry, burns the throat, and tastes of juniper.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassBottle", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 12; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 2; //recoops lost energy.
            this.replenish = -20; //restores will.
            this.alcohol = 360; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 50;
            this.intForCraft = 0;
            this.ingredients = [["Glass Bottle", 50], ["Barrel of Gin", 1]];
            this.biproducts = [[new Item("barrel", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 110 - Math.floor(player.getCharisma() / 5); // at max, buy for 100.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 5); // at max, sell for 100.
        }
        else if (this.type == "glassBottleOfWater")
        {
            //For All Items
            this.identity = "Bottle of Water";
            this.weight = 4;
            this.size = 6;
            this.description = "A bottle of water.";
            this.intForDes = 0;
            this.intDescription = "The water inside the bottle is wet... be careful.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["glassBottle", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 16; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.4; //restores will.
            this.cooling = 12; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
            this.sellValue = 2; // at max, sell for 72.
        }
        else if (this.type == "glassBottle")
        {
            //For All Items
            this.identity = "Glass Bottle";
            this.weight = 0.5;
            this.size = 6;
            this.description = "An empty bottle made of glass.";
            this.intForDes = 0;
            this.intDescription = "Usually this type of container is used to hold wine or other fancy alcoholic drinks.";

            //Define Utility
            this.utility = "Material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Glass", 1]];


            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "waterPintGlass")
        {
            //For All Items
            this.identity = "Pint Glass of Water";
            this.weight = 1;
            this.size = 6;
            this.description = "A pint glass filled with water.";
            this.intForDes = 0;
            this.intDescription = "A less intoxicating alternative to alcohol!";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pintGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.1; //restores will.
            this.cooling = 1.5; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 0;
            this.ingredients = [["Pint Glass", 10], ["Bucket of Water", 1]];
            this.biproducts = [[[new Item("bucket", false), 1]]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "clayBowl")
        {
            //For All Items
            this.identity = "Clay Bowl";
            this.weight = 0.5;
            this.size = 6;
            this.description = "A bowl made of clay.";
            this.intForDes = 1;
            this.intDescription = "You can eat things out of it!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Clay", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "woodenBowl")
        {
            //For All Items
            this.identity = "Wooden Bowl";
            this.weight = 0.25;
            this.size = 6;
            this.description = "A bowl made of wood.";
            this.intForDes = 1;
            this.intDescription = "You can eat things out of it!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 5;
            this.ingredients = [["Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "vardanianBowl")
        {
            //For All Items
            this.identity = "Vardanian Bowl";
            this.weight = 1;
            this.size = 9;
            this.description = "A bowl made of iron.";
            this.intForDes = 1;
            this.intDescription = "You can eat things out of it!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 8;
            this.ingredients = [["Iron", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "vardanianPot") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot";
            this.weight = 14;
            this.size = 14;
            this.description = "A pot made of iron.";
            this.intForDes = 1;
            this.intDescription = "You can use it to make large amounts of food or to store things in.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Iron", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "vardanianPotOfWaantiMilk") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Waanti Milk";
            this.weight = 24;
            this.size = 14;
            this.description = "An iron pot full up with waanti milk.";
            this.intForDes = 3;
            this.intDescription = "Thats a lot of nipple juice in one pot!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianBowl", false), 4]];
            this.ingredients = [["Vardanian Pot", 1], ["Vardanian Bowl of Waanti Milk", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 69; // at max, buy for 69.
            this.sellValue = 37; // at max, sell for 37.
        }
        else if (this.type == "vardanianPotOfBovineMilk") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Bovine Milk";
            this.weight = 28;
            this.size = 14;
            this.description = "An iron pot full up with bovine milk.";
            this.intForDes = 3;
            this.intDescription = "Bovine milk is thin and watery... but still nutricious.";

            //Define Utility
            this.utility = "material";

            this.decayable = true;
            this.decayLimit = 20;
            this.decayObjective = "vardanianPotOfSourCream";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianBowl", false), 4]];
            this.ingredients = [["Vardanian Pot", 1], ["Vardanian Bowl of Bovine Milk", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 51; // at max, buy for 51.
            this.sellValue = 25; // at max, sell for 25.
        }
        else if (this.type == "vardanianPotOfMandrake") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Mandrake";
            this.weight = 30;
            this.size = 14;
            this.description = "An iron pot that contains a mandrake soaking in bovine milk.";
            this.intForDes = 12;
            this.intDescription = "The only way to avoid a mandrake's lethal cry is to soak it in bovine milk.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianBowl", false), 4]];
            this.ingredients = [["Vardanian Bowl of Mandrake", 1], ["Vardanian Bowl of Bovine Milk", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 39; // at max, buy for 39.
            this.sellValue = 39; // at max, sell for 39.
        }
        else if (this.type == "vardanianPotOfNaapridMilk") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Naaprid Milk";
            this.weight = 24;
            this.size = 14;
            this.description = "An iron pot full up with Naaprid milk.";
            this.intForDes = 1;
            this.intDescription = "Mmmm, thick n' creamy goodness!!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianBowl", false), 4]];
            this.ingredients = [["Vardanian Pot", 1], ["Vardanian Bowl of Naaprid Milk", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 87; // at max, buy for 87.
            this.sellValue = 44; // at max, sell for 44.
        }
        else if (this.type == "vardanianPotOfWater") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Water";
            this.weight = 32;
            this.size = 14;
            this.description = "A water filled pot made of iron.";
            this.intForDes = 1;
            this.intDescription = "A lot of water in a pot...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianBowl", false), 4]];
            this.ingredients = [["Vardanian Pot", 1], ["Vardanian Bowl of Water", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "vardanianPotOfSourCream") //holds 2 buckets of content or 4 vardanian bowls or approximately 1 kellish clay pot
        {
            //For All Items
            this.identity = "Vardanian Pot of Sour Cream";
            this.weight = 32;
            this.size = 14;
            this.description = "An iron pot filled with sour cream.";
            this.intForDes = 1;
            this.intDescription = "Sour cream is formed when bovine milk sits out at room temperature...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.biproducts = [[new Item("vardanianBowl", false), 4]];
            this.ingredients = [["Vardanian Pot", 1], ["Vardanian Bowl of Water", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 58; // at max, buy for 58.
            this.sellValue = 36; // at max, sell for 36.
        }
        else if (this.type == "bowlOfMushroomStew")
        {
            //For All Items
            this.identity = "Bowl of Mushroom Stew";
            this.weight = 3;
            this.size = 6;
            this.description = "A bowl of brothy stew made with mushrooms, potatoes, and harst grain.";
            this.intForDes = 0;
            this.intDescription = "A flavourful and hearty stew that warms the soul.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["clayBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "sensational";

            //Crafting
            this.yield = 12;
            this.intForCraft = 0;
            this.biproducts = [[new Item("kellishClayPot", false), 1]];
            this.ingredients = [["Kellish Clay Pot of Mushroom Stew", 1], ["Clay Bowl", 24]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "bowlOfCreamyHarst")
        {
            //For All Items
            this.identity = "Bowl of Creamy Harst";
            this.weight = 2.5;
            this.size = 6;
            this.description = "A bowl of boiled harst grain cooked in boiled cream.";
            this.intForDes = 0;
            this.intDescription = "A creamy and chewy grain experience!";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["woodenBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 1;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Bucket of Naaprid Milk", 1], ["Wooden Bowl", 10], ["Harst Grain", 10]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "bowlOfSanthPorridge")
        {
            //For All Items
            this.identity = "Bowl of Santh Porridge";
            this.weight = 3;
            this.size = 6;
            this.description = "A bowl of boiled santh grain cooked in boiled cream and mixed with honey and butter.";
            this.intForDes = 0;
            this.intDescription = "A creamy and chewy grain experience!";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["woodenBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.3; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 14;
            this.intForCraft = 8;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Bucket of Naaprid Milk", 1], ["Wooden Bowl", 14], ["Santh Grain", 14], ["Honey", 1], ["Naaprid Butter", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17; // at max, buy for 17.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 15); // at max, sell for 17.
        }
        else if (this.type == "bowlOfBoiledHarst")
        {
            //For All Items
            this.identity = "Bowl of Boiled Harst";
            this.weight = 2.5;
            this.size = 6;
            this.description = "A bowl of boiled harst grain.";
            this.intForDes = 0;
            this.intDescription = "A bland and chewy, but affordable, breakfast.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["woodenBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 1;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Bucket of Water", 1], ["Wooden Bowl", 6], ["Harst Grain", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "kellishClayPotOfNaapridMilk")
        {
            //For All Items
            this.identity = "Kellish Clay Pot of Naaprid Milk";
            this.weight = 40;
            this.size = 12;
            this.description = "A kellish style of pot filled with the milk of a naaprid.";
            this.intForDes = 8;
            if (player.raceName == "Kel")
            {
                this.intForDes = 0;
            }
            this.intDescription = "This type of pot is traditionally used by the kellish to collect milk from the local naaprids.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 18; //satisfies hunger.
            this.thirst = 60; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 3; //recoops lost energy.
            this.replenish = 2; //restores will.
            this.cooling = 22; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 85 - Math.floor(player.getCharisma() / 5); // at max, buy for 75.
            this.sellValue = 48 + Math.floor(player.getCharisma() / 2); // at max, sell for 73.
        }
        else if (this.type == "kellishClayPotOfWaantiMilk")
        {
            //For All Items
            this.identity = "Kellish Clay Pot of Waanti Milk";
            this.weight = 40;
            this.size = 12;
            this.description = "A kellish style of pot filled with the sour, gamey milk of a waanti.";
            this.intForDes = 8;
            if (player.raceName == "Kel")
            {
                this.intForDes = 0;
            }
            this.intDescription = "This type of pot is not traditionally used to hold such a milk.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 45; //quenches thirst.
            this.warmth = 1.7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 20; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 54 - Math.floor(player.getCharisma() / 5); // at max, buy for 44.
            this.sellValue = 28 + Math.floor(player.getCharisma() / 3); // at max, sell for 43.
        }
        else if (this.type == "kellishClayPotOfMushroomStew")
        {
            //For All Items
            this.identity = "Kellish Clay Pot of Mushroom Stew";
            this.weight = 45;
            this.size = 12;
            this.description = "A kellish style of pot filled with a brothy stew of mushrooms, potatoes, and harst grain.";
            this.intForDes = 3;
            if (player.raceName == "Kel")
            {
                this.intForDes = 1;
            }
            this.intDescription = "This stew can be portioned into smaller servings if you have clay bowls at hand.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 60; //satisfies hunger.
            this.thirst = 60; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 2; //restores will.

            //ability
            this.ability = "sensational";

            //Crafting
            this.yield = 2;
            this.intForCraft = 23;
            if (player.raceName == "Kel")
            {
                this.intForCraft = 9;
            }
            this.ingredients = [["Kellish Clay Pot of Water", 1], ["Boiled Glin Mushrooms", 8], ["Potato", 12], ["Harst Grain", 9]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 154 - Math.floor(player.getCharisma() / 2); // at max, buy for 129.
            this.sellValue = 87 + Math.floor(player.getCharisma() / 2); // at max, sell for 112.
        }
        else if (this.type == "kellishClayPotOfWater")
        {
            //For All Items
            this.identity = "Kellish Clay Pot of Water";
            this.weight = 40;
            this.size = 12;
            this.description = "A kellish style of pot filled with water.";
            this.intForDes = 2;
            this.intDescription = "This style of pot holds a lot of water.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["kellishClayPot", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 60; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 2; //restores will.
            this.cooling = 32; //cools player.

            //ability
            this.ability = "quench";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
        }
        else if (this.type == "pintGlass")
        {
            //For All Items
            this.identity = "Pint Glass";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A glass that can hold up to a pint of liquid.";
            this.intForDes = 0;
            this.intDescription = "This type of container is most oftenly used for alcohol such as beer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 5;
            this.ingredients = [["Glass", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "walrusLeatherWaterskin")
        {
            //For All Items
            this.identity = "Walrus Leather Waterskin (empty)";
            this.weight = 0.1;
            this.size = 8;
            this.description = "A water skin made from walrus hide.";
            this.intForDes = 0;
            this.intDescription = "It seems to be empty right now.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 8;
            this.intForCraft = 15;
            this.ingredients = [["Walrus Hide", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "kellishClayPot")
        {
            //For All Items
            this.identity = "Kellish Clay Pot";
            this.weight = 15;
            this.size = 15;
            this.description = "A kellish style of pot made from from clay.";
            this.intForDes = 7;
            if (player.raceName == "Kel")
            {
                this.intForDes = 0;
            }
            this.intDescription = "This is used for holding huge amounts of liquids, as well as for cooking soups and stews in.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            if (player.raceName == "Kel")
            {
                this.intForCraft = 5;
            }
            this.ingredients = [["Clay", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
        }
        else if (this.type == "bucket")
        {
            //For All Items
            this.identity = "Bucket";
            this.weight = 2;
            this.size = 12;
            this.description = "An iron bucket.";
            this.intForDes = 4;
            this.intDescription = "This is used for holding large amounts of liquids.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 10); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "glassJar")
        {
            //For All Items
            this.identity = "Glass Jar";
            this.weight = 1;
            this.size = 6;
            this.description = "A jar made of glass sealed tighly with a metal lid.";
            this.intForDes = 4;
            this.intDescription = "This can be used to contain magical substances and other such commodities that should be stored in a vaccum sealed container.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Glass", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "jarOfOil")
        {
            //For All Items
            this.identity = "Jar of Oil";
            this.weight = 2;
            this.size = 6;
            this.description = "A glass jar full to the brim with flammable oil.";
            this.intForDes = 9;
            this.intDescription = "This can be used to fuel torches and lamps as well as to set flammable traps or craft flammable arrows.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Blubber", 1], ["Glass Jar", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 12); // at max, buy for 20.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 5); // at max, sell for 19.
        }
        else if (this.type == "jarOfButterMellowOil")
        {
            //For All Items
            this.identity = "Jar of Butter-Mellow Oil";
            this.weight = 4;
            this.size = 7;
            this.description = "A glass jar full to the brim with highly alchemically reactive oil that smells of butter.";
            this.intForDes = 9;
            this.intDescription = "This is an incredibly potent alchemic agent that acts as both an amplifier and a changer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Butter-Mellow Flower", 200], ["Glass Jar", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 745 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 645.
            this.sellValue = 220 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 620.
        }
        else if (this.type == "potionGlass")
        {
            //For All Items
            this.identity = "Potion Glass";
            this.weight = 0.2;
            this.size = 6;
            this.description = "A glass container specifically designed for holding liquid alchemic mixtures.";
            this.intForDes = 1;
            this.intDescription = "This type of container is necessary in order to make most potions.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 6;
            this.ingredients = [["Glass", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "emptyVialOfGojiiPoison")
        {
            //For All Items
            this.identity = "Empty vile of Gojii Poison";
            this.weight = 0.2;
            this.size = 6;
            this.description = "The vile was labeled as a poison...";
            this.intForDes = 2;
            this.intDescription = "It was sort of dumb of them to leave the label on, it would be impossible to tell that it was poison otherwise...";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";


            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "vialOfGojiiPoison")
        {
            //For All Items
            this.identity = "Gojii Poison";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A vile of one of the most deadly poisons in the lands.";
            this.intForDes = 4;
            this.intDescription = "As this is perfectly clear it is the poison of choice for poisoning somebody's food...";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gojii";

            //Crafting
            this.yield = 4;
            this.intForCraft = 2;
            this.ingredients = [["Gojii Berries", 1], ["Vial of Water", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 150 - Math.floor(player.getCharisma() / 1); // at max, buy for 100.
            this.sellValue = 25; // at max, sell for 10.
        }
        else if (this.type == "vialOfWater")
        {
            //For All Items
            this.identity = "Vial of Water";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A potion glass full of water.";
            this.intForDes = 4;
            this.intDescription = "Most potions require water as their base.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0.5; //cools player.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "wyrExtract")
        {
            //For All Items
            this.identity = "Wyr Leaf Extract";
            this.weight = 0.6;
            this.size = 5;
            this.description = "An intensely bitter dark Green Liquid extracted from wyr Leaves.";
            this.intForDes = 14;
            this.intDescription = "Wyr leaf extract is an antidote for basic poisons; the immune system reacts negatively to wyr extract.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -5; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = -1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -3; //restores will.

            //ability
            this.ability = "rawwyr";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Potion Glass", 1], ["Wyr Leaf", 33]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 73 - Math.floor(player.getCharisma() / 50); // at max, buy for 72.
            this.sellValue = 67 + Math.floor(player.getCharisma() / 10); // at max, sell for 72.
        }
        else if (this.type == "elcheExtract")
        {
            //For All Items
            this.identity = "Elche Leaf Extract";
            this.weight = 0.7;
            this.size = 6;
            this.description = "A bland and grassy tasting light Green Liquid extracted from elche Leaves.";
            this.intForDes = 20;
            this.intDescription = "Elche leaf extract is an antidote for low and medium potency poisons.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "antidoteIII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Potion Glass", 1], ["Elche Leaves", 100]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 125 - Math.floor(player.getCharisma() / 15); // at max, buy for 122.
            this.sellValue = 120 + Math.floor(player.getCharisma() / 25); // at max, sell for 122.
        }
        else if (this.type == "neevBlood")
        {
            //For All Items
            this.identity = "Neev Blood";
            this.weight = 0.7;
            this.size = 5;
            this.description = "A pure black tar-like black blood.";
            this.intForDes = 20;
            this.intDescription = "Neev blood is an immensely powerful base used to make certain potions.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -6; //satisfies hunger.
            this.thirst = -6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -3; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -14; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 2;
            this.intForCraft = 12;
            this.ingredients = [["Potion Glass", 2], ["Neev Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 66 - Math.floor(player.getCharisma() / 3); // at max, buy for 51.
            this.sellValue = 27 + Math.floor(player.getCharisma() / 3); // at max, sell for 42.
        }
        else if (this.type == "stomwikCream")
        {
            //For All Items
            this.identity = "Stomwik Cream";
            this.weight = 1.4;
            this.size = 9;
            this.description = "Rub this thin textured black cream into your bare skin in order to disuade certain insects from attacking you.";
            this.intForDes = 19;
            this.intDescription = "This is particularly useful against mosquitos and brain flies.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "repelente";

            //Crafting
            this.yield = 3;
            this.intForCraft = 13;
            this.ingredients = [["Vial of Water", 3], ["Naaprid Butter", 1], ["Ogard Pollen", 1], ["Fermented Viper Venom Gland", 1], ["Stomwik Leaf", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35 - Math.floor(player.getCharisma() / 50); // at max, buy for 34.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 34.
        }
        else if (this.type == "ogardPerfume")
        {
            //For All Items
            this.identity = "Ogard Perfume";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A liquid perfume with the scent of ogard spice.";
            this.intForDes = 0;
            this.intDescription = "It smells sweet and wild, with a hot, nutty aroma.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "ogardPerfume";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Vial of Water", 1], ["Ogard Pollen", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 34 - Math.floor(player.getCharisma() / 6); // at max, buy for 26.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 8); // at max, sell for 26.
        }
        else if (this.type == "poegroonOil")
        {
            //For All Items
            this.identity = "Poegroon Oil";
            this.weight = 0.8;
            this.size = 5;
            this.description = "A whitish oil extracted from the poegroon mushroom. It smells pungent, and musty.";
            this.intForDes = 5;
            this.intDescription = "This is both a base and a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Potion Glass", 1], ["Dried Poegroon Mushrooms", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 88 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 84.
            this.sellValue = 82 + Math.floor(player.getCharisma() / 25); // at max, sell for 84.
        }
        else if (this.type == "ameloyPerfume")
        {
            //For All Items
            this.identity = "Ameloy Perfume";
            this.weight = 1;
            this.size = 5;
            this.description = "A liquid perfume with the scent of sweet ameloy blossoms.";
            this.intForDes = 0;
            this.intDescription = "It smells sweet, soothing, and floral.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "ameloyPerfume";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Vial of Water", 1], ["Ameloy Flower", 18]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 8); // at max, buy for 34.
            this.sellValue = 28 + Math.floor(player.getCharisma() / 8); // at max, sell for 34.
        }
        else if (this.type == "muonPerfume")
        {
            //For All Items
            this.identity = "Muon Perfume";
            this.weight = 1;
            this.size = 5;
            this.description = "A white liquid perfume with the scent of sweet and creamy tropical muon fruit.";
            this.intForDes = 0;
            this.intDescription = "It smells sweet and creamy like muon.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "muonPerfume";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Vial of Water", 1], ["Muon Shell", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 25); // at max, buy for 20.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 50); // at max, sell for 20.
        }
        else if (this.type == "palggaPerfume")
        {
            //For All Items
            this.identity = "Palgga Perfume";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A smooth pink liquid extract of palgga flowers; it smells strongly of floral sweetness";
            this.intForDes = 0;
            this.intDescription = "Applying perfume makes you more openly embraced when interacting with others.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "palggaPerfume";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Potion Glass", 1], ["Palgga Flowers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "laicaumExtract")
        {
            //For All Items
            this.identity = "Laicaum Extract";
            this.weight = 2.2;
            this.size = 5;
            this.description = "A thin transparent liquid that has a nose burning aroma; it is used for healing.";
            this.intForDes = 0;
            this.intDescription = "Applying this to an open wound or even just to bare skin is accompanied by a short-lasting painful burning sensation.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 8; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Potion Glass", 1], ["Laicaum Branch", 22]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 15); // at max, buy for 27.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 25); // at max, sell for 27.
        }
        else if (this.type == "cleansingPotion")
        {
            //For All Items
            this.identity = "Potion of Cleansing";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A light coloured liquid that is both tasteless and odorless.";
            this.intForDes = 41;
            this.intDescription = "This potion causes the player to become sick with a magical illness that cures poisons and other biological afflictions.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -2; //satisfies hunger.
            this.thirst = -10; //quenches thirst.
            this.warmth = -10; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 1; //restores will.

            //ability
            this.ability = "cleansing";

            //Crafting
            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Wyr Leaf Extract", 1], ["Neprilne Berries", 2], ["Bear Tongue", 1], ["Neev Flesh", 1], ["Palnt Flower", 8], ["Fermented Viper Venom Gland", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 925 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 725.
            this.sellValue = 495 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 695.
        }
        else if (this.type == "mandrakeJuice")
        {
            //For All Items
            this.identity = "Mandrake Juice";
            this.weight = 2;
            this.size = 5;
            this.description = "A light coloured liquid that is thick and creamy; there is a bit of an iron-like flavour.";
            this.intForDes = 41;
            this.intDescription = "This acts as a general antidote for a wide range of harmful compounds.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 3; //cools player.

            //ability
            this.ability = "mj";

            //Crafting
            this.yield = 3;
            this.intForCraft = 11;
            this.ingredients = [["Vial of Water", 3], ["Soaked Mandrake", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26 - Math.floor(player.getCharisma() / 3); // at max, buy for 11.
            this.sellValue = 11; // at max, sell for 11.
        }
        else if (this.type == "wobeaExtract")
        {
            //For All Items
            this.identity = "Wobea Extract";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A light coloured liquid that is extremely bitter.";
            this.intForDes = 2;
            this.intDescription = "This is used as anesthesia. In other words it enhances the effect of things that restore your health, and also puts you to sleep.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 10; //warms player.
            this.heal = 0; //heals health.
            this.generation = -60; //recoops lost energy.
            this.replenish = 1; //restores will.
            this.wake = -30; //awakens player.

            //ability
            this.ability = "wobeaNumbIII";

            //Crafting
            this.yield = 2;
            this.intForCraft = 18;
            this.ingredients = [["Vial of Water", 2], ["Wobea Needles", 21]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 65 - Math.floor(player.getCharisma() / 10); // at max, buy for 60.
            this.sellValue = 55 + Math.floor(player.getCharisma() / 10); // at max, sell for 60.
        }
        else if (this.type == "silverbloodPotion")
        {
            //For All Items
            this.identity = "Silverblood Potion";
            this.weight = 3;
            this.size = 5;
            this.description = "A foul tasting, salty, metallic liquid that saturates the blood of the embiber with silver.";
            this.intForDes = 9;
            this.intDescription = "This can poison certain monsters, and can protect oneself from those that fear the essence of silver.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = -10; //warms player.
            this.heal = 0; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = -10; //restores will.

            //ability
            this.ability = "silverblood";

            //Crafting
            this.yield = 2;
            this.intForCraft = 29;
            this.ingredients = [["Ut Extract", 2], ["Silver", 1], ["Acidified Drile Kidney", 1], ["Swamp Lily", 2], ["Marigold Flower", 5], ["Thadine branch", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250 - Math.floor(player.getCharisma() / 2); // at max, buy for 225.
            this.sellValue = 220 + Math.floor(player.getCharisma() / 10); // at max, sell for 225.
        }
        else if (this.type == "mana")
        {
            //For All Items
            this.identity = "Mana";
            this.weight = 2.2;
            this.size = 5;
            this.description = "The shiny, purple, liquid substance in the vial swirls back and forth like a calm tide.";
            this.intForDes = 32;
            this.intDescription = "This sweet and creamy potion instantly restores magical will.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 9; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 32; //restores will.
            this.cooling = 4; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 44;
            this.ingredients = [["Mandrake Juice", 1], ["Dried Bahab Pod", 2], ["Thalis Leaf", 1], ["Honey", 1], ["Steugiurne Flower", 1], ["Tylun Flower", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 600 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 500.
            this.sellValue = 400 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 500.
        }
        else if (this.type == "energyPotionI")
        {
            //For All Items
            this.identity = "Potion of Energizing";
            this.weight = 0.5;
            this.size = 5;
            this.description = "The smooth syrupy thick yellow liquid ripples quickly; you can feel the vibrations it makes through its glass container.";
            this.intForDes = 41;
            this.intDescription = "This potion restores your energy slowly over time.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "energyI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Vial of Water", 1], ["Raw Wolf Liver", 1], ["Palnt Flower", 1], ["Honey", 1], ["Fermented Narthwarp Mouth", 1], ["Lizard Tail", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 140 - Math.floor(player.getCharisma() / 1); // at max, buy for 90.
            this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
        }
        else if (this.type == "energyPotionII")
        {
            //For All Items
            this.identity = "Potion of Energizing II";
            this.weight = 0.5;
            this.size = 5;
            this.description = "The smooth syrupy thick yellow liquid ripples rapidly; you can feel the sharp vibrations it makes through the glass.";
            this.intForDes = 41;
            this.intDescription = "This potion restores your energy over time.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "energyII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Vial of Water", 1], ["Neprilne Berries", 2], ["Raw Wolf Liver", 1], ["Tylun Flower", 1], ["Honey", 1], ["Fermented Narthwarp Mouth", 1], ["Lizard Tail", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 300 - Math.floor(player.getCharisma() / 1); // at max, buy for 250.
            this.sellValue = 200 + Math.floor(player.getCharisma() / 1); // at max, sell for 250.
        }
        else if (this.type == "energyPotionIII")
        {
            //For All Items
            this.identity = "Potion of Energizing III";
            this.weight = 0.5;
            this.size = 5;
            this.description = "The smooth syrupy thick yellow liquid ripples rapidly; you can feel the sharp vibrations it makes through the glass.";
            this.intForDes = 41;
            this.intDescription = "This potion restores your energy over time.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "energyIII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Vial of Water", 1], ["Neprilne Berries", 3], ["Raw Wolf Liver", 1], ["Tylun Flower", 3], ["Honey", 1], ["Fermented Narthwarp Mouth", 1], ["Lizard Tail", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 450 - Math.floor(player.getCharisma() / 1); // at max, buy for 400.
            this.sellValue = 350 + Math.floor(player.getCharisma() / 1); // at max, sell for 400.
        }
        else if (this.type == "energilPotionI")
        {
            //For All Items
            this.identity = "Syrum of Tirelessness";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A thick and glistening pink liquid with a slight opaqueness to it.";
            this.intForDes = 35;
            this.intDescription = "This potion reduces the cost of all actions that would normally consume energy.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "energilI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Potion Glass", 1], ["Ulgoy Leaf", 2], ["Lizard Tail", 1], ["Honey", 1], ["Palnt Flower", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 208 - Math.floor(player.getCharisma() / 1); // at max, buy for 158.
            this.sellValue = 96 + Math.floor(player.getCharisma() / 2); // at max, sell for 121.
        }
        else if (this.type == "energilPotionII")
        {
            //For All Items
            this.identity = "Syrum of Tirelessness II";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A thick and glistening pink liquid with a slight opaqueness to it.";
            this.intForDes = 35;
            this.intDescription = "This potion reduces the cost of all actions that would normally consume energy.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["Potion Glass", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "energilII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Potion Glass", 1], ["Ulgoy Leaf", 2], ["Mofu Foot", 1], ["Lizard Tail", 1], ["Honey", 1], ["Palnt Flower", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 349 - Math.floor(player.getCharisma() / 1); // at max, buy for 299.
            this.sellValue = 199 + Math.floor(player.getCharisma() / 1); // at max, sell for 249.
        }
        else if (this.type == "antiMothfearPotion")
        {
            //For All Items
            this.identity = "Mothfear Antidote";
            this.weight = 0.75;
            this.size = 5;
            this.description = "A rancid smelling, still, foamy brown liquid.";
            this.intForDes = 0;
            this.intDescription = "This potion counteracts the psychodelic fear compound found in motylekh dust.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = -2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "speedI";

            //Crafting
            this.yield = 2;
            this.intForCraft = 26;
            this.ingredients = [["Vial of Water", 1], ["Chervstrakha Stomach", 1], ["Swamp Lily", 1], ["Lizard Tail", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 10); // at max, buy for 35.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 10); // at max, sell for 35.
        }
        else if (this.type == "speedPotionI")
        {
            //For All Items
            this.identity = "Elixer of Dexterity";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A glimmering yellow liquid swirls around rapidly in the glass as if it itself is restless.";
            this.intForDes = 0;
            this.intDescription = "This potion magically enhances your dexterity.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "speedI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Vial of Water", 1], ["Raw Wolf Liver", 1], ["Tylun Flower", 1], ["Viper Snake Skin", 1], ["Honey", 1], ["Fermented Narthwarp Mouth", 1], ["Lizard Tail", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 225 - Math.floor(player.getCharisma() / 1); // at max, buy for 175.
            this.sellValue = 95 + Math.floor(player.getCharisma() / 2); // at max, sell for 120.
        }
        else if (this.type == "speedPotionII")
        {
            //For All Items
            this.identity = "Elixer of Dexterity II";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A glimmering yellow liquid swirls around rapidly in the glass as if it itself is restless.";
            this.intForDes = 0;
            this.intDescription = "This potion magically enhances your dexterity.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "speedII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Vial of Water", 1], ["Raw Wolf Liver", 1], ["Tylun Flower", 2], ["Viper Snake Skin", 2], ["Honey", 1], ["Fermented Narthwarp Mouth", 1], ["Lizard Tail", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 325 - Math.floor(player.getCharisma() / 1); // at max, buy for 275.
            this.sellValue = 195 + Math.floor(player.getCharisma() / 2); // at max, sell for 220.
        }
        else if (this.type == "speedPotionIII")
        {
            //For All Items
            this.identity = "Elixer of Dexterity III";
            this.weight = 0.4;
            this.size = 5;
            this.description = "A glimmering yellow liquid swirls around rapidly in the glass as if it itself is restless.";
            this.intForDes = 0;
            this.intDescription = "This potion magically enhances your dexterity.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "speedIII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Vial of Water", 1], ["Raw Wolf Liver", 1], ["Tylun Flower", 2], ["Viper Snake Skin", 1], ["Honey", 1], ["Fermented Narthwarp Mouth", 1], ["Cruorcca Needle", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 600 - Math.floor(player.getCharisma() / 1); // at max, buy for 550.
            this.sellValue = 500 + Math.floor(player.getCharisma() / 1); // at max, sell for 550.
        }
        else if (this.type == "reconstructionPotion")
        {
            //For All Items
            this.identity = "Elixer of Reconstruction";
            this.weight = 2;
            this.size = 5;
            this.description = "A light blue liquid substance that refuses to ripple or swirl no matter how much you move it around.";
            this.intForDes = 0;
            this.intDescription = "This potion allows a mage to unfocus their magics in order to refocus them differently.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 3; //cools player.

            //ability
            this.ability = "magicalReconstruction";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Vial of Water", 1], ["Tylun Flower", 1], ["Honey", 1], ["Duende Esophagus", 1], ["Soaked Mandrake", 1], ["Swamp Lily", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 220 - Math.floor(player.getCharisma() / 1); // at max, buy for 170.
            this.sellValue = 120 + Math.floor(player.getCharisma() / 1); // at max, sell for 170.
        }
        else if (this.type == "tunskBloodPotion")
        {
            //For All Items
            this.identity = "Elixir of Resistance to Petrification";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A murky brown liquid that seems thinner than water and smells of butter.";
            this.intForDes = 11;
            this.intDescription = "It temporarily courses through your veins supplementing your blood so as to imitate the blood of a tunsk.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "tunskBlood";

            //Crafting
            this.yield = 1;
            this.intForCraft = 39;
            this.ingredients = [["Potion Glass", 1], ["Raw Tunsk Flesh", 3], ["Jar of Butter-Mellow Oil", 1], ["Salt", 1], ["Iron", 1], ["Culpris Leaf", 5], ["Kofke Leaves", 3], ["Steugiurne Flower", 2]];
            this.biproducts = [["glassJar", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000; // at max, buy for 1000.
            this.sellValue = 850 + Math.floor(player.getCharisma() / 0.35); // at max, sell for 992.
        }
        else if (this.type == "waterwalkingPotion")
        {
            //For All Items
            this.identity = "Waterwalking Potion";
            this.weight = 2;
            this.size = 5;
            this.description = "An extremely salty blue liquid that rests lethargically in its vial.";
            this.intForDes = 0;
            this.intDescription = "This potion magically allows its embiber to walk upon the surface of a body of water.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = -6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -1; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "waterwalking";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Vial of Water", 1], ["Kelp", 2], ["Salt", 2], ["Neprilne Berries", 4], ["Honey", 1], ["Tylun Flower", 1], ["Turquoise", 6], ["Fermented Viper Venom Gland", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 340 - Math.floor(player.getCharisma() / 1); // at max, buy for 290.
            this.sellValue = 240 + Math.floor(player.getCharisma() / 1); // at max, sell for 290.
        }
        else if (this.type == "tascalSalve")
        {
            //For All Items
            this.identity = "Tascal Salve";
            this.weight = 0.65;
            this.size = 6;
            this.description = "A thick red pasty salve that is primarily used for extracting flesh mites from one's skin.";
            this.intForDes = 0;
            this.intDescription = "The salve gives you an uncomfortable tingling sensation when it is applied to bare skin.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -0.25; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMiteAway";

            //Crafting
            this.yield = 1;
            this.intForCraft = 24;
            this.ingredients = [["Vial of Water", 1], ["Borgal Eye", 1], ["Marigold Flower", 2], ["Swamp Lily", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 10); // at max, buy for 45.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 10); // at max, sell for 45.
        }
        else if (this.type == "mightPotionI")
        {
            //For All Items
            this.identity = "Elixer of Might";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A thick red liquid that swirls slowly throughout the glass.";
            this.intForDes = 0;
            this.intDescription = "This potion magically enhances your strength and your toughness.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "mightI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Vial of Water", 1], ["Viper Snake Skin", 1], ["Lizard Tail", 1], ["Raw Bear Tongue", 1], ["Raw Wolf Liver", 1], ["Steugiurne Flower", 2], ["Kofke Leaves", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 310 - Math.floor(player.getCharisma() / 1); // at max, buy for 260.
            this.sellValue = 210 + Math.floor(player.getCharisma() / 1); // at max, sell for 260.
        }
        else if (this.type == "mightPotionII")
        {
            //For All Items
            this.identity = "Elixer of Might II";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A thick red liquid that spirals stubbornly within the glass.";
            this.intForDes = 0;
            this.intDescription = "This potion magically enhances your strength and your toughness.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "mightII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Vial of Water", 1], ["Viper Snake Skin", 2], ["Fletter Wing", 3], ["Raw Bear Tongue", 2], ["Raw Wolf Liver", 1], ["Steugiurne Flower", 2], ["Kofke Leaves", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 550 - Math.floor(player.getCharisma() / 1); // at max, buy for 500.
            this.sellValue = 450 + Math.floor(player.getCharisma() / 1); // at max, sell for 500.
        }
        else if (this.type == "mindPotionI")
        {
            //For All Items
            this.identity = "Mind Elixer";
            this.weight = 0.5;
            this.size = 5;
            this.description = "The liquid seems almost to float within the glass, softly bubbling.";
            this.intForDes = 0;
            this.intDescription = "This potion magically enhances your intelligence as well as your willpower and memory.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 6; //restores will.

            //ability
            this.ability = "mindI";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Ut Extract", 1], ["Tylun Flower", 1], ["Honey", 1], ["Lizard Tail", 1], ["Sesre Stamen", 1], ["Palnt Flower", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 900.
            this.sellValue = 700 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 900.
        }
        else if (this.type == "mindPotionII")
        {
            //For All Items
            this.identity = "Mind Elixer II";
            this.weight = 0.5;
            this.size = 5;
            this.description = "The liquid seems almost to float within the glass, softly bubbling.";
            this.intForDes = 0;
            this.intDescription = "This potion magically enhances your intelligence as well as your willpower and memory.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 8; //restores will.

            //ability
            this.ability = "mindII";

            //Crafting
            this.yield = 1;
            this.intForCraft = 42;
            this.ingredients = [["Ut Extract", 1], ["Tylun Flower", 3], ["Honey", 1], ["Lizard Tail", 2], ["Sesre Stamen", 1], ["Palnt Flower", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1100 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1000.
            this.sellValue = 800 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1000.
        }
        else if (this.type == "utExtract")
        {
            //For All Items
            this.identity = "Ut Extract";
            this.weight = 0.5;
            this.size = 5;
            this.description = "A yellowish brown viscous liquid that smells absolutely horrendous.";
            this.intForDes = 20;
            this.intDescription = "This extract serves as a base for some of the more peculiar and powerful potions.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["potionGlass", 1]];

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -49; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -1/2 * player.healthMAX; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 12; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Potion Glass", 1], ["Fermented Ut Tentacle", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 12); // at max, buy for 26.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 4); // at max, sell for 26.
        }
        else if (this.type == "etyrHide")
        {
            //For All Items
            this.identity = "Etyr Hide";
            this.weight = 1;
            this.size = 11;
            this.description = "Scaley hide from an Etyr.";
            this.intForDes = 6;
            this.intDescription = "This looks like it could sell for about 2 coins, but if I haggle I might be able to raise that to 5.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 15); // at max, buy for 6.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
        }
        else if (this.type == "wormz")
        {
            //For All Items
            this.identity = "Fish Bait";
            this.weight = 0.12;
            this.size = 6;
            this.description = "A handful of gut worms.";
            this.intForDes = 0;
            if (player.getIntelligence() >= 1)
            {
                this.intDescription = "This type of worm is known for its parasitic inhabitance within human digestive tracts; clicking this item separates the worms apart for use.";
            }
            else
            {
                this.intDescription = "Clicking this item separates the worms apart for use.";
            }

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["worms", 3]];

            //Utility Focused
            this.isRegenerative = false;
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Gut Worms", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "worms")
        {
            //For All Items
            this.identity = "Gut Worms";
            this.weight = 0.04;
            this.size = 3;
            this.description = "A couple of gut worms.";
            this.intForDes = 1;
            this.intDescription = "These are used as bait for fishing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "ardilPelt")
        {
            //For All Items
            this.identity = "Ardil Pelt";
            this.weight = 0.4;
            this.size = 6;
            this.description = "The redish brown furred, three tailed pelt of an ardil.";
            this.intForDes = 2;
            this.intDescription = "Ardil pelts are a cheap commodity used to make basic fur clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction != "Freynor" && shopkeeper.ultra.faction != "Kel" && shopkeeper.ultra.faction != "Nirwaden" && shopkeeper.ultra.faction != "EstolGang")
                {
                    this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
                    this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
                }
                else if (shopkeeper.ID == "Furs Vendor")
                {
                    this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
                    this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
                }
                else if (shopkeeper.ultra.faction == "Nirwaden" || shopkeeper.ultra.faction == "EstolGang")
                {
                    this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                    this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
                }
                else
                {
                    this.intDescription = "Ardil pelts are a cheap commodity used to make basic fur clothing.";
                    this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
                    this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
                }
            }
            else
            {
                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.intDescription = "Ardil pelts are a cheap commodity used to make basic fur clothing.";
                this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
        }
        else if (this.type == "lizardTail")
        {
            //For All Items
            this.identity = "Lizard Tail";
            this.weight = 0.15;
            this.size = 5;
            this.description = "The green scaled tail of a lizard.";
            this.intForDes = 5;
            this.intDescription = "Lizard tails can be used to make alchemic potions. They serve as minor amplifiers and also as formers.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "neevFur")
        {
            //For All Items
            this.identity = "Neev Fur";
            this.weight = 0.5;
            this.size = 15;
            this.description = "The soft matted greyish brown fur of a neev.";
            this.intForDes = 9;
            this.intDescription = "The fur is incredibly soft, durable, and it has high elasticity.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 268 - Math.floor(player.getCharisma() / 0.35); // at max, buy for 126.
            this.sellValue = 75 + Math.floor(player.getCharisma() / 1); // at max, sell for 125.
        }
        else if (this.type == "grewbleGuts")
        {
            //For All Items
            this.identity = "Grewble Guts";
            this.weight = 3;
            this.size = 10;
            this.description = "The putrid and gooey innards of a grewble.";
            this.intForDes = 5;
            this.intDescription = "It is possible to use this in alchemy, though it is hard to imagine ingesting anything that smells this awful. It serves as a former.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "beachMiteInnards")
        {
            //For All Items
            this.identity = "Beach Mite Innards";
            this.weight = 0.6;
            this.size = 7;
            this.description = "The semi-translucent gelatinous specled innards of a beach mite. They smell of decaying flesh and death.";
            this.intForDes = 25;
            this.intDescription = "They are used as an amplifier and a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "sesreStamen")
        {
            //For All Items
            this.identity = "Sesre Stamen";
            this.weight = 2.5;
            this.size = 11;
            this.description = "The stamen of this type of plant glows during the night.";
            this.intForDes = 13;
            this.intDescription = "Small insects are attracted to the glow and get stuck in the plant's sticky pollen, they are then slowly dissolved into the plant.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 10); // at max, sell for 14.
        }
        else if (this.type == "sesreLeaf")
        {
            //For All Items
            this.identity = "Sesre Leaf";
            this.weight = 1.5;
            this.size = 10;
            this.description = "The leaves are not hard nor soft, they feel smooth but also lumpy, and when squeezed their is a hint of elasticity.";
            this.intForDes = 13;
            this.intDescription = "The plant covers its self with its leaves during the day so it can save energy and digest.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "lorkWeed")
        {
            //For All Items
            this.identity = "Lork Weed";
            this.weight = 1;
            this.size = 10;
            this.description = "A prickly bush with numerous little leaves.";
            this.intForDes = 18;
            this.intDescription = "It is commonly found in bog-like environments, usually right beside a source of stagnant water.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "nogSkin")
        {
            //For All Items
            this.identity = "Nog Skin";
            this.weight = 0.5;
            this.size = 10;
            this.description = "The thick leathery green skin of a nog.";
            this.intForDes = 4;
            this.intDescription = "This hide has semi-fire-resistant qualities.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "duendeEsophagus")
        {
            //For All Items
            this.identity = "Duende Esophagus";
            this.weight = 2;
            this.size = 15;
            this.description = "The mucousy respiratory system of a duende.";
            this.intForDes = 4;
            this.intDescription = "This has magical properties when it is dried out.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 10.
            this.sellValue = 11; // at max, sell for 10.
        }
        else if (this.type == "driedDuendeEsophagus")
        {
            //For All Items
            this.identity = "Dried Duende Esophagus";
            this.weight = 1.65;
            this.size = 10;
            this.description = "The pale and dessicated respiratory system of a duende.";
            this.intForDes = 4;
            this.intDescription = "Alchemical recipes require that this be powdered.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 26;
            this.ingredients = [["Duende Esophagus", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "duendePowder")
        {
            //For All Items
            this.identity = "Duende Powder";
            this.weight = 0.55;
            this.size = 9;
            this.description = "The pale powder made of the ground respiratory system of a duende.";
            this.intForDes = 4;
            this.intDescription = "This is a key former in producing the effect of teleportation.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 30;
            this.ingredients = [["Dried Duende Esophagus", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 7; // at max, sell for 7.
        }
        else if (this.type == "rawLamb")
        {
            //For All Items
            this.identity = "Raw Lamb";
            this.weight = 2;
            this.size = 10;
            this.description = "The raw flesh of a young sheep.";
            this.intForDes = 4;
            this.intDescription = "Lamb is only obtained from young sheep and is much more tender than the mutton of older sheep.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "lamb")
        {
            //For All Items
            this.identity = "Lamb";
            this.weight = 2;
            this.size = 10;
            this.description = "Butter drizzled lamb roasted over an open flame and finished with salt.";
            this.intForDes = 0;
            this.intDescription = "It is tender, hearty, rich, and has a strong sheepy flavor.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = -0.25; //quenches thirst.
            this.warmth = 20; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Lamb", 1], ["Waanti Butter", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 25); // at max, buy for 43.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 15); // at max, sell for 43.
        }
        else if (this.type == "rawMutton")
        {
            //For All Items
            this.identity = "Raw Mutton";
            this.weight = 2;
            this.size = 10;
            this.description = "The raw flesh of an adult sheep.";
            this.intForDes = 4;
            this.intDescription = "Mutton is obtained from older sheep and is more sinewous then lamb which is from younger sheep.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
        }
        else if (this.type == "mutton")
        {
            //For All Items
            this.identity = "Mutton";
            this.weight = 2;
            this.size = 10;
            this.description = "Roasted sheep meat.";
            this.intForDes = 0;
            this.intDescription = "It has a very pronounced sheepy flavor, and is thick and hearty.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 20; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 10; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Raw Mutton", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 25); // at max, buy for 17.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 12); // at max, sell for 17.
        }
        else if (this.type == "hops")
        {
            //For All Items
            this.identity = "Hops";
            this.weight = 0.07;
            this.size = 10;
            this.description = "A handful of hops.";
            this.intForDes = 0;
            this.intDescription = "Hops make you sleepy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "hoffalgreTendrils")
        {
            //For All Items
            this.identity = "Hoffalgre Tendrils";
            this.weight = 0.2;
            this.size = 6;
            this.description = "The gelatinous worm-like mouth feelers of a hoffalgre.";
            this.intForDes = 6;
            this.intDescription = "The tendrils are used to pull food into its mouth, to sense things kinostetically, and for males they are the sex organ.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "agedHoffalgreTendrils")
        {
            //For All Items
            this.identity = "Aged Hoffalgre Tendrils";
            this.weight = 0.2;
            this.size = 6;
            this.description = "The mushy discoulored mouth feelers of a hoffalgre.";
            this.intForDes = 6;
            this.intDescription = "This is the main ingredient and former in a certain potion known to be an aphrodisiac.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Hoffalgre Tendrils", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "hoffalgrePelt")
        {
            //For All Items
            this.identity = "Hoffalgre Pelt";
            this.weight = 1;
            this.size = 12;
            this.description = "The tan and black striped pelt of a hoffalgre.";
            this.intForDes = 6;
            this.intDescription = "This can be made into lower-middle socioeconomic status clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 12); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "rawHoffalgreFlesh")
        {
            //For All Items
            this.identity = "Raw Hoffalgre Flesh";
            this.weight = 1.3;
            this.size = 12;
            this.description = "The raw flesh of a Hoffalgre.";
            this.intForDes = 6;
            this.intDescription = "A commonly eaten type of meat in the lands of Thengaria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 12); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "hoffalgreMeat")
        {
            //For All Items
            this.identity = "Hoffalgre Meat";
            this.weight = 1.2;
            this.size = 8;
            this.description = "A tender and juicy but rather simple tasting meat.";
            this.intForDes = 6;
            this.intDescription = "A commonly eaten type of meat in the lands of Thengaria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Raw Hoffalgre Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 8); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "anemoneTentacle")
        {
            //For All Items
            this.identity = "Anemone Tentacle";
            this.weight = 2.5;
            this.size = 9;
            this.description = "The slimy toxic tentacle of an anemone.";
            this.intForDes = 19;
            this.intDescription = "This is used as both a former and a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 25); // at max, sell for 6.
        }
        else if (this.type == "frichPelt")
        {
            //For All Items
            this.identity = "Frich Pelt";
            this.weight = 1;
            this.size = 12;
            this.description = "The foul smelling, mangy, grey pelt of a Frich.";
            this.intForDes = 4;
            this.intDescription = "This can be made into inexpensive clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 15); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "varminPelt")
        {
            //For All Items
            this.identity = "Varmin Pelt";
            this.weight = 2.75;
            this.size = 19;
            this.description = "The musky smelling, fuzzy grey pelt of a varmin.";
            this.intForDes = 3;
            this.intDescription = "This is used to make Southern Vardanian clothing and rugs.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "rawVarminLeg")
        {
            //For All Items
            this.identity = "Raw Varmin Leg";
            this.weight = 4;
            this.size = 20;
            this.description = "The severed leg of a varmin.";
            this.intForDes = 1;
            this.intDescription = "This can be skinned then cooked, varmin is a fairly common poor-man's food in Southern Vardania.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "deadRat")
        {
            //For All Items
            this.identity = "Dead Rat";
            this.weight = 0.4;
            this.size = 6;
            this.description = "A dead rat.";
            this.intForDes = 2;
            this.intDescription = "This can be skinned, skewered and cooked up.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "vreckPelt")
        {
            //For All Items
            this.identity = "Vreck Pelt";
            this.weight = 1.4;
            this.size = 12;
            this.description = "The ratty grey furred pelt of a vreck. It has an offputting smell to it, somewhere between a wolf and a rat";
            this.intForDes = 5;
            this.intDescription = "Vreck pelts can be made into clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "vreckTail")
        {
            //For All Items
            this.identity = "Vreck Tail";
            this.weight = 1.2;
            this.size = 12;
            this.description = "The scaley but slightly hairy tail of a vreck.";
            this.intForDes = 19;
            this.intDescription = "Vreck tail is used in alchemy as a stabilizer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "orangeDartFrogSkin")
        {
            //For All Items
            this.identity = "Dart Frog Skin";
            this.weight = 0.011;
            this.size = 4;
            this.description = "The poisonous skin of an orange poison dart frog.";
            this.intForDes = 1;
            this.intDescription = "Make sure not to pick up dart frogs with your bare hands...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "greenDartFrogSkin")
        {
            //For All Items
            this.identity = "Dart Frog Skin";
            this.weight = 0.011;
            this.size = 4;
            this.description = "The poisonous skin of a green poison dart frog.";
            this.intForDes = 1;
            this.intDescription = "Make sure not to pick up dart frogs with your bare hands...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "koivayaPelt")
        {
            //For All Items
            this.identity = "Koivaya Pelt";
            this.weight = 1.25;
            this.size = 13;
            this.description = "The brown furred pelt of a koivaya.";
            this.intForDes = 3;
            this.intDescription = "This can be made into basic clothing and tailored goods.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "molteHead")
        {
            //For All Items
            this.identity = "Molte Head";
            this.weight = 4;
            this.size = 14;
            this.description = "The bloody decapitated head of a molte.";
            this.intForDes = 7;
            this.intDescription = "This needs to be stuffed and made into a wall mounted trophy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 15; // at max, sell for 15.
        }
        else if (this.type == "moltePaw")
        {
            //For All Items
            this.identity = "Molte Paw";
            this.weight = 2;
            this.size = 9;
            this.description = "The mangled and severed paw of a molte.";
            this.intForDes = 0;
            this.intDescription = "This trophy is a testament to your ability and strength.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "molteHide")
        {
            //For All Items
            this.identity = "Molte Hide";
            this.weight = 5;
            this.size = 20;
            this.description = "The thick smooth skinned hide of a molte.";
            this.intForDes = 6;
            this.intDescription = "This can be made into armour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 15); // at max, buy for 16.
            this.sellValue = 21 + Math.floor(player.getCharisma() / 10); // at max, sell for 16.
        }
        else if (this.type == "koobuPelt")
        {
            //For All Items
            this.identity = "Koobu Pelt";
            this.weight = 0.5;
            this.size = 7;
            this.description = "The sleek short white furred pelt of a koobu.";
            this.intForDes = 13;
            this.intDescription = "These are used to make some types of elegant clothing, they are especially saught after for their use in making fine pillows.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "boulchomPelt")
        {
            //For All Items
            this.identity = "Boulchom Pelt";
            this.weight = 3;
            this.size = 18;
            this.description = "The sleek dark brown furred pelt of a boulchom.";
            this.intForDes = 3;
            this.intDescription = "This material is prized for the high quality clothing that can be made from it.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 15); // at max, buy for 13.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 12); // at max, sell for 12.
        }
        else if (this.type == "mountainFrichPelt")
        {
            //For All Items
            this.identity = "Mountain Frich Pelt";
            this.weight = 2.35;
            this.size = 12;
            this.description = "The foul smelling, mangy, black pelt of a mountain-frich.";
            this.intForDes = 4;
            this.intDescription = "This can be made into inexpensive clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "boreaLeg")
        {
            //For All Items
            this.identity = "Borea Leg";
            this.weight = 1.6;
            this.size = 17;
            this.description = "The long skinny yellow black-striped leg of a spitting borea.";
            this.intForDes = 6;
            this.intDescription = "Borea leg can be used in alchemy as a moderately potent amplifier.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 50); // at max, buy for 12.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
        }
        else if (this.type == "gorgonLeg")
        {
            //For All Items
            this.identity = "Gorgon Leg";
            this.weight = 102;
            this.size = 35;
            this.description = "The long green exo-skeletal leg of a gorgon.";
            this.intForDes = 2;
            this.intDescription = "This is full of edible flesh that can be accessed if the shell is broken off with a hammer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35 - Math.floor(player.getCharisma() / 5); // at max, buy for 25.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 10); // at max, sell for 25.
        }
        else if (this.type == "rawGorgonFlesh")
        {
            //For All Items
            this.identity = "Raw Gorgon Flesh";
            this.weight = 1;
            this.size = 8;
            this.description = "The raw flesh of a gorgon.";
            this.intForDes = 0;
            this.intDescription = "The meat is tender and has a sweet but somewhat bitter flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = -1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 64;
            this.intForCraft = 6;
            this.biproducts = [[new Item("hammer", false), 1]];
            this.ingredients = [["Hammer", 1], ["Gorgon Leg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "gorgonMeat")
        {
            //For All Items
            this.identity = "Gorgon Meat";
            this.weight = 1;
            this.size = 8;
            this.description = "The cooked meat of a gorgon.";
            this.intForDes = 0;
            this.intDescription = "The meat is juicy and tender with a mild sweetness and a strange, buggy aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Gorgon Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "gorgonTail")
        {
            //For All Items
            this.identity = "Gorgon Tail Plates";
            this.weight = 2;
            this.size = 35;
            this.description = "Thin tail plates that flush with blood whenever a gorgon acts aggressively.";
            this.intForDes = 16;
            this.intDescription = "These can be used to make a fan used by Cephrian noble ladies.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 1.470588235294118); // at max, buy for 11.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
        }
        else if (this.type == "saliseaFur")
        {
            //For All Items
            this.identity = "Salisea Fur";
            this.weight = 0.75;
            this.size = 14;
            this.description = "The orange and black striped short haired pelt of a leaping salisea.";
            this.intForDes = 3;
            this.intDescription = "Salisea fur is made into rugs, or dehaired and tanned to make leather.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 25); // at max, sell for 14.
        }
        else if (this.type == "saliseaLeather")
        {
            //For All Items
            this.identity = "Salisea Leather";
            this.weight = 0.7;
            this.size = 14;
            this.description = "The tanned leather made from a salisea hide.";
            this.intForDes = 3;
            this.intDescription = "Salisea leather is used for padding, or making durable clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28 - Math.floor(player.getCharisma() / 25); // at max, buy for 26.
            this.sellValue = 24 + Math.floor(player.getCharisma() / 25); // at max, sell for 26.
        }
        else if (this.type == "treatedSaliseaHide")
        {
            //For All Items
            this.identity = "Treated Salisea Hide";
            this.weight = 1.4;
            this.size = 10;
            this.description = "The treated hide of a leaping salisea.";
            this.intForDes = 4;
            this.intDescription = "After scraping the flesh off and dehairing it, the hide must now soak in a tanic acid tea made from selva wood.";

            //Define Utility
            this.utility = "material";

            this.decayable = true;
            this.decayLimit = 140;
            this.decayObjective = "saliseaLeather";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Salisea Fur", 1], ["Bucket of Water", 1], ["Selva Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 25); // at max, buy for 18.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 25); // at max, sell for 18.
        }
        else if (this.type == "bovineHide")
        {
            //For All Items
            this.identity = "Raw Bovine Hide";
            this.weight = 4;
            this.size = 14;
            this.description = "The black and white splotched hide of a bovine.";
            this.intForDes = 3;
            this.intDescription = "This must be first treated, then tanned before it can be made into anything.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "treatedBovineHide")
        {
            //For All Items
            this.identity = "Treated Bovine Hide";
            this.weight = 4;
            this.size = 14;
            this.description = "The treated hide of a bovine.";
            this.intForDes = 3;
            this.intDescription = "After scraping the flesh off and dehairing it, the hide must now soak in a tanic acid tea made from ashai wood.";

            //Define Utility
            this.utility = "material";

            this.decayable = true;
            this.decayLimit = 60;
            this.decayObjective = "tannedBovineHide";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.biproducts = [[new Item("vardanianBowl", false), 1]];
            this.ingredients = [["Raw Bovine Hide", 1], ["Vardanian Bowl of Water", 1], ["Ashai Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 15); // at max, buy for 12.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 15); // at max, sell for 12.
        }
        else if (this.type == "tannedBovineHide")
        {
            //For All Items
            this.identity = "Bovine Hide";
            this.weight = 4;
            this.size = 14;
            this.description = "The tanned hide of a bovine.";
            this.intForDes = 3;
            this.intDescription = "This hide can be made into durable apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 25); // at max, buy for 20.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 25); // at max, sell for 20.
        }
        else if (this.type == "chupacabrasHead")
        {
            //For All Items
            this.identity = "Chupacabras Head";
            this.weight = 8;
            this.size = 12;
            this.description = "The severed head of a chupacabras.";
            this.intForDes = 0;
            this.intDescription = "This trophy is a testimate to having slain the fearsome chupacabras.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 33; // at max, buy for 33.
            this.sellValue = 33; // at max, sell for 33.
        }
        else if (this.type == "chupacabrasPelt")
        {
            //For All Items
            this.identity = "Chupacabras Pelt";
            this.weight = 9;
            this.size = 29;
            this.description = "The brisley pelt of a chupacabras.";
            this.intForDes = 29;
            this.intDescription = "The pelt of a chupacabras is slightly heat resistant and extremely flexible.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90; // at max, buy for 90.
            this.sellValue = 90; // at max, sell for 90.
        }
        else if (this.type == "changelingSkull")
        {
            //For All Items
            this.identity = "Changling Skull";
            this.weight = 1.55;
            this.size = 12;
            this.description = "The skull of a changeling.";
            this.intForDes = 0;
            this.intDescription = "This is nothing more than a trophy...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "changelingHeart")
        {
            //For All Items
            this.identity = "Changling Heart";
            this.weight = 1.55;
            this.size = 12;
            this.description = "The tightly clenched, but still beating, heart of a changling... the beat is faint, but it is clear that the changeling's essence is still linked to it.";
            this.intForDes = 12;
            this.intDescription = "This is a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50; // at max, buy for 50.
            this.sellValue = 50; // at max, sell for 50.
        }
        else if (this.type == "changelingFur")
        {
            //For All Items
            this.identity = "Changling Fur";
            this.weight = 1.55;
            this.size = 12;
            this.description = "The fur is thin and soft, yet with a somewhat bristly texture.";
            this.intForDes = 12;
            this.intDescription = "This can be used to make clothing, but it does not have any special properties...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "horseHair")
        {
            //For All Items
            this.identity = "Horse Hair";
            this.weight = 1.25;
            this.size = 14;
            this.description = "The strong silky strands of hair from a horse's mane.";
            this.intForDes = 7;
            this.intDescription = "This functions as a changer in alchemy, and can also be used to make certain outfits.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "garlic")
        {
            //For All Items
            this.identity = "Garlic";
            this.weight = 0.19;
            this.size = 3;
            this.description = "A white bulb used as a pungeant but savoury aromatic in cooking.";
            this.intForDes = 5;
            this.intDescription = "Garlic can be used in alchemy for its antifungal properties.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "waantiPelt")
        {
            //For All Items
            this.identity = "Waanti Pelt";
            this.weight = 1.25;
            this.size = 14;
            this.description = "The soft long brown furred pelt of a waanti.";
            this.intForDes = 5;
            this.intDescription = "Waanti fur is a staple product when it comes to Freydic outfitting.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 12); // at max, buy for 9.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 10); // at max, sell for 9.
        }
        else if (this.type == "rawWaantiFlesh")
        {
            //For All Items
            this.identity = "Raw Waanti Flesh";
            this.weight = 1.4;
            this.size = 9;
            this.description = "The raw flesh of a waanti.";
            this.intForDes = 1;
            this.intDescription = "Waanti meat is particularly gamey and often favored in the north for its fat marbled flesh, making it one of the few tender meats available. ";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
        }
        else if (this.type == "waantiMeat")
        {
            //For All Items
            this.identity = "Waanti Meat";
            this.weight = 1.35;
            this.size = 9;
            this.description = "The tender, and strongly gamey tasting cooked meat of a waanti.";
            this.intForDes = 2;
            this.intDescription = "Waanti meat is one of the most sought after meats in the north for its enchanting wild flavor and its tenderness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = 0.25; //restores will.


            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Raw Waanti Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 10); // at max, buy for 10.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, sell for 10.
        }
        else if (this.type == "rawKoivayaFlesh")
        {
            //For All Items
            this.identity = "Raw Koivaya Flesh";
            this.weight = 1.85;
            this.size = 9;
            this.description = "The meaty wet flesh of a koivaya.";
            this.intForDes = 3;
            this.intDescription = "Eating this raw would be bad for you.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 2.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "gutworms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "koivayaMeat")
        {
            //For All Items
            this.identity = "Koivaya Meat";
            this.weight = 1.8;
            this.size = 9;
            this.description = "A moist meaty cut of koivaya meat.";
            this.intForDes = 0;
            this.intDescription = "It has a mouth-wateringly savory flavour with a hint of sweet and fattiness";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 13; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0; //restores will.


            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Koivaya Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 50); // at max, buy for 15.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 50); // at max, sell for 15.
        }
        else if (this.type == "rhinocerosHorn")
        {
            //For All Items
            this.identity = "Rhinoceros Horn";
            this.weight = 4.8;
            this.size = 11;
            this.description = "The large, sharp, curved horn of a rhinoceros.";
            this.intForDes = 15;
            this.intDescription = "This can be ground into a powder.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 15); // at max, buy for 27.
            this.sellValue = 23 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 27.
        }
        else if (this.type == "powderedRhinocerosHorn")
        {
            //For All Items
            this.identity = "Powdered Rhinoceros Horn";
            this.weight = 0.75;
            this.size = 7;
            this.description = "The finely ground grey powder derived from the horn of a Rhinoceros.";
            this.intForDes = 17;
            this.intDescription = "This can be used in certain alchemy recipes as a changer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 15;
            this.ingredients = [["Rhinoceros Horn", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
        }
        else if (this.type == "neculaisEar")
        {
            //For All Items
            this.identity = "Neculai's Ear";
            this.weight = 0.05;
            this.size = 6;
            this.description = "After killing Neculai you cut off his ear.";
            this.intForDes = 1;
            this.intDescription = "Without his ear he can't hear, oh dear!";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "natureCall")
        {
            //For All Items
            this.identity = "Nature Totem";
            this.weight = 10;
            this.size = 10;
            if (player.getKnowledge() >= 1 && player.getWillpower() >= 1)
            {
                this.description = "This stone channels nature spirits, though the essence has chosen to commune only with Irene.";
            }
            else
            {
                this.description = "This must be the source of the 'nature call'.";
            }
            this.intForDes = 35;
            this.intDescription = "This totem was crafted centuries ago, most likely by an ancient nature worshipping Kellish tribe.";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100; // at max, buy for 100.
            this.sellValue = 100; // at max, sell for 100.
        }
        else if (this.type == "svehnsShipment")
        {
            //For All Items
            this.identity = "Svehn's Shipment";
            this.weight = 138;
            this.size = 21;
            this.description = "A crate of goods from the kingdom of Nirwaden.";
            this.intForDes = 0;
            this.intDescription = "Speak to Svehn the Smith to deliver the shipment.";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1500; // at max, buy for 1500.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "svehnsLoot")
        {
            //For All Items
            this.identity = "Svehn's Shipment";
            this.weight = 138;
            this.size = 21;
            this.description = "A crate of goods from the kingdom of Nirwaden.";
            this.intForDes = 0;
            this.intDescription = "You decided to keep the loot for yourself...";

            //Define Utility
            this.utility = "package";
            this.store = [[new Item("svehnsLootEmpty", false, false), 1], [new Item("nirineseSpear", false, false), 10], [new Item("nirineseSabre", false, false), 10], [new Item("thriceForgedSteel", false, false), 4]];

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1500; // at max, buy for 1500.
            if (shopID != "Svehn the Smith")
            {
                this.sellValue = 1100; // at max, sell for 1100.
            }
            else
            {
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "svehnsLootEmpty")
        {
            //For All Items
            this.identity = "Svehn's Shipment (Empty)";
            this.weight = 42;
            this.size = 21;
            this.description = "An empty crate that once held goods from the kingdom of Nirwaden.";
            this.intForDes = 0;
            this.intDescription = "You have looted the merchandise...";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22; // at max, buy for 1500.
            this.sellValue = 17; // at max, sell for 0.
        }
        else if (this.type == "wellAxle")
        {
            //For All Items
            this.identity = "Wooden Well Axle";
            this.weight = 4;
            this.size = 18;
            this.description = "A long wooden cylindrical axle that is spun in order to wrap or unwrap cord as a means of pullying a bucket up or down.";
            this.intForDes = 0;
            this.intDescription = "";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "wellCord")
        {
            //For All Items
            this.identity = "Long Metal Cord";
            this.weight = 7;
            this.size = 14;
            this.description = "A long cord fashioned of many woven strands of steel.";
            this.intForDes = 1;
            this.intDescription = "This is an incredibly durable type of cord.";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "wellWinch")
        {
            //For All Items
            this.identity = "Well Winch";
            this.weight = 4;
            this.size = 19;
            this.description = "A steel winch forged in style and size to fit the design of a well.";
            this.intForDes = 0;
            this.intDescription = "The winch is the part that is manually turned in order to operate the pully system.";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22; // at max, buy for 22.
            this.sellValue = 17; // at max, sell for 17.
        }
        else if (this.type == "wellStone")
        {
            //For All Items
            this.identity = "Chiseled Encircling Stone";
            this.weight = 1;
            this.size = 6;
            this.description = "A stone cut in a manner that would allow a number of them to be fit overlapping to form a relatively smooth empty cylinder of stone.";
            this.intForDes = 0;
            this.intDescription = "Stone cut like this is used to build wells.";

            //Define Utility
            this.utility = "questItem";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "beesWax")
        {
            //For All Items
            this.identity = "Wax";
            this.weight = 1.8;
            this.size = 12;
            this.description = "A hefty glob of bee's wax.";
            this.intForDes = 0;
            this.intDescription = "It has an enchanting aroma of honey.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "torperWax")
        {
            //For All Items
            this.identity = "Torper Wax";
            this.weight = 1.6;
            this.size = 12;
            this.description = "A hefty glob of torper wax.";
            this.intForDes = 15;
            this.intDescription = "It can be crystalized in a forge and crafted into vessels for holding powerful magics.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20; // at max, buy for 20.
            this.sellValue = 17 + Math.floor(player.getCharisma() / 15); // at max, sell for 20.
        }
        else if (this.type == "candle")
        {
            //For All Items
            this.identity = "Candle";
            this.weight = 0.6;
            this.size = 12;
            this.description = "A stick of wax with a wick, usually referred to as a candle.";
            this.intForDes = 0;
            this.intDescription = "This candle has not been used yet.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["candle2", 1]];

            //ability
            this.ability = "lighter";

            //Crafting
            this.yield = 3;
            this.intForCraft = 7;
            this.ingredients = [["Wax", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "candle2")
        {
            //For All Items
            this.identity = "Candle (2)";
            this.weight = 0.4;
            this.size = 12;
            this.description = "A stick of wax with a wick, usually referred to as a candle.";
            this.intForDes = 0;
            this.intDescription = "This candle has been worn in.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["candle1", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "candle1")
        {
            //For All Items
            this.identity = "Candle (1)";
            this.weight = 0.2;
            this.size = 12;
            this.description = "A stick of wax with a wick, usually referred to as a candle.";
            this.intForDes = 0;
            this.intDescription = "This candle is almost all the way melted.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "jackOLantern")
        {
            //For All Items
            this.identity = "Jack O Lantern";
            this.weight = 7;
            this.size = 12;
            this.description = "A decoratively carved pumpkin lit with several candles.";
            this.intForDes = 0;
            this.intDescription = "All of its candles are unused as of this point.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["jackOLantern2", 1]];

            //ability
            this.ability = "lighter";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Burnt Out Jack O Lantern", 1], ["Candle", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 23 - Math.floor(player.getCharisma() / 10); // at max, buy for 18.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 8); // at max, sell for 18.
        }
        else if (this.type == "jackOLantern2")
        {
            //For All Items
            this.identity = "Jack O Lantern (2)";
            this.weight = 7;
            this.size = 12;
            this.description = "A decoratively carved pumpkin lit with several candles.";
            this.intForDes = 0;
            this.intDescription = "Its candles are all somewhat melted.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["jackOLantern1", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 10); // at max, buy for 16.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 8); // at max, sell for 16.
        }
        else if (this.type == "jackOLantern1")
        {
            //For All Items
            this.identity = "Jack O Lantern (1)";
            this.weight = 7;
            this.size = 12;
            this.description = "A decoratively carved pumpkin lit with several candles.";
            this.intForDes = 0;
            this.intDescription = "Its candles are almost completely melted.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["jackOLanternEmpty", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 8); // at max, sell for 14.
        }
        else if (this.type == "jackOLanternEmpty")
        {
            //For All Items
            this.identity = "Burnt Out Jack O Lantern";
            this.weight = 7;
            this.size = 12;
            this.description = "A decoratively carved pumpkin.";
            this.intForDes = 0;
            this.intDescription = "Its candles are all of the way melted.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Kel")
            {
                this.intForCraft = 0;
            }
            else
            {
                this.intForCraft = 3;
            }
            this.ingredients = [["Pumpkin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 10); // at max, buy for 11.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 8); // at max, sell for 11.
        }
        else if (this.type == "pumpkin")
        {
            //For All Items
            this.identity = "Pumpkin";
            this.weight = 11;
            this.size = 12;
            this.description = "A large rounded orange squash.";
            this.intForDes = 0;
            this.intDescription = "Pumpkins are primarily cultivated by the kellish tribes; they are used as food and for carving.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 12); // at max, buy for 7.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "roastedPumpkin")
        {
            //For All Items
            this.identity = "Roasted Pumpkin";
            this.weight = 10;
            this.size = 6;
            this.description = "A stringy textured mildly sweet roasted pumpkin squash.";
            this.intForDes = 10;
            this.intDescription = "Cooked pumpkin is best used in pumpkin bread or pumpkin pie.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Kel")
            {
                this.intForCraft = 4;
            }
            else
            {
                this.intForCraft = 10;
            }
            this.ingredients = [["Pumpkin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
        }
        else if (this.type == "vardanianLamp")
        {
            //For All Items
            this.identity = "Vardanian Oil Lamp";
            this.weight = 4;
            this.size = 12;
            this.description = "An oil burning lamp of vardanian design.";
            this.intForDes = 0;
            this.intDescription = "The lamp is full of oil.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["vardanianLamp2", 1]];

            //ability
            this.ability = "lighter";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Empty Vardanian Oil Lamp", 1], ["Jar of Oil", 1]];
            this.biproducts = [[new Item("glassJar", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 5); // at max, buy for 30.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
        }
        else if (this.type == "vardanianLamp2")
        {
            //For All Items
            this.identity = "Vardanian Oil Lamp (2)";
            this.weight = 3.6;
            this.size = 12;
            this.description = "An oil burning lamp of vardanian design.";
            this.intForDes = 0;
            this.intDescription = "There is a fair amount of oil in this lamp.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["vardanianLamp1", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 34 - Math.floor(player.getCharisma() / 5); // at max, buy for 24.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 10); // at max, sell for 24.
        }
        else if (this.type == "vardanianLamp1")
        {
            //For All Items
            this.identity = "Vardanian Oil Lamp (1)";
            this.weight = 3.2;
            this.size = 12;
            this.description = "An oil burning lamp of vardanian design.";
            this.intForDes = 0;
            this.intDescription = "This lamp is almost out of oil.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["vardanianLampEmpty", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28 - Math.floor(player.getCharisma() / 5); // at max, buy for 18.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 10); // at max, sell for 18.
        }
        else if (this.type == "vardanianLampEmpty")
        {
            //For All Items
            this.identity = "Empty Vardanian Oil Lamp";
            this.weight = 2.8;
            this.size = 12;
            this.description = "An oil burning lamp of vardanian design.";
            this.intForDes = 0;
            this.intDescription = "This lamp is out of oil.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "lighter";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Iron", 2], ["Glass", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 5); // at max, buy for 12.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
        }
        else if (this.type == "oilLamp")
        {
            //For All Items
            this.identity = "Oil Lamp";
            this.weight = 3;
            this.size = 12;
            this.description = "An oil burning lamp.";
            this.intForDes = 0;
            this.intDescription = "The lamp is full of oil.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLamp2", 1]];

            //ability
            this.ability = "lighter";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Empty Oil Lamp", 1], ["Jar of Oil", 1]];
            this.biproducts = [[new Item("glassJar", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 6); // at max, buy for 42.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 4); // at max, sell for 42.
        }
        else if (this.type == "oilLamp2")
        {
            //For All Items
            this.identity = "Oil Lamp (2)";
            this.weight = 2.6;
            this.size = 12;
            this.description = "An oil burning lamp.";
            this.intForDes = 0;
            this.intDescription = "There is a fair amount of oil in this lamp.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLamp1", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 44 - Math.floor(player.getCharisma() / 6); // at max, buy for 36.
            this.sellValue = 24 + Math.floor(player.getCharisma() / 4); // at max, sell for 36.
        }
        else if (this.type == "oilLamp1")
        {
            //For All Items
            this.identity = "Oil Lamp (1)";
            this.weight = 2.3;
            this.size = 12;
            this.description = "An oil burning lamp.";
            this.intForDes = 0;
            this.intDescription = "This lamp is almost out of oil.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLampEmpty", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 6); // at max, buy for 32.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 4); // at max, sell for 32.
        }
        else if (this.type == "oilLampEmpty")
        {
            //For All Items
            this.identity = "Empty Oil Lamp";
            this.weight = 2;
            this.size = 12;
            this.description = "An oil burning lamp.";
            this.intForDes = 0;
            this.intDescription = "This lamp is out of oil.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Iron", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 38 - Math.floor(player.getCharisma() / 6); // at max, buy for 30.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 4); // at max, sell for 30.
        }
        else if (this.type == "oilLantern")
        {
            //For All Items
            this.identity = "Oil Lantern";
            this.weight = 4;
            this.size = 12;
            this.description = "A finely crafted lantern that runs on oil.";
            this.intForDes = 0;
            this.intDescription = "The lantern is full of oil.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLantern4", 1]];

            //ability
            this.ability = "lighter";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Empty Oil Lantern", 1], ["Jar of Oil", 1]];
            this.biproducts = [[new Item("glassJar", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 82 - Math.floor(player.getCharisma() / 3); // at max, buy for 67.
            this.sellValue = 48 + Math.floor(player.getCharisma() / 3); // at max, sell for 63.
        }
        else if (this.type == "oilLantern4")
        {
            //For All Items
            this.identity = "Oil Lantern (4)";
            this.weight = 3.8;
            this.size = 12;
            this.description = "A finely crafted lantern that runs on oil.";
            this.intForDes = 0;
            this.intDescription = "Most of the oil in the lantern remains.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLantern3", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 78 - Math.floor(player.getCharisma() / 3); // at max, buy for 63.
            this.sellValue = 44 + Math.floor(player.getCharisma() / 3); // at max, sell for 59.
        }
        else if (this.type == "oilLantern3")
        {
            //For All Items
            this.identity = "Oil Lantern (3)";
            this.weight = 3.6;
            this.size = 12;
            this.description = "A finely crafted lantern that runs on oil.";
            this.intForDes = 0;
            this.intDescription = "The lantern has just over half of its oil.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLantern2", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 74 - Math.floor(player.getCharisma() / 3); // at max, buy for 59.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 3); // at max, sell for 55.
        }
        else if (this.type == "oilLantern2")
        {
            //For All Items
            this.identity = "Oil Lantern (2)";
            this.weight = 3.4;
            this.size = 12;
            this.description = "A finely crafted lantern that runs on oil.";
            this.intForDes = 0;
            this.intDescription = "The lantern has just under half of its oil.";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLantern1", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 72 - Math.floor(player.getCharisma() / 3); // at max, buy for 57.
            this.sellValue = 38 + Math.floor(player.getCharisma() / 3); // at max, sell for 53.
        }
        else if (this.type == "oilLantern1")
        {
            //For All Items
            this.identity = "Oil Lantern (1)";
            this.weight = 3.2;
            this.size = 12;
            this.description = "A finely crafted lantern that runs on oil.";
            this.intForDes = 0;
            this.intDescription = "The lantern is running low on oil..";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "reusable";
            this.refund = [["oilLanternEmpty", 1]];

            //ability
            this.ability = "lighter";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 71 - Math.floor(player.getCharisma() / 3); // at max, buy for 56.
            this.sellValue = 38 + Math.floor(player.getCharisma() / 3); // at max, sell for 53.
        }
        else if (this.type == "oilLanternEmpty")
        {
            //For All Items
            this.identity = "Empty Oil Lantern";
            this.weight = 3;
            this.size = 12;
            this.description = "A finely crafted lantern that runs on oil.";
            this.intForDes = 0;
            this.intDescription = "The Lantern has run out of oil.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 22;
            this.ingredients = [["Wood", 1], ["Iron", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 70 - Math.floor(player.getCharisma() / 3); // at max, buy for 55.
            this.sellValue = 38 + Math.floor(player.getCharisma() / 3); // at max, sell for 53.
        }
        else if (this.type == "grewbleEgg")
        {
            //For All Items
            this.identity = "Grewble Egg";
            this.weight = 2.5;
            this.size = 5;
            this.description = "One of many eggs laid by a grewble.";
            this.intForDes = 2;
            this.intDescription = "Leave it on the ground and it will hatch into a baby grewble.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "grewbleHatch";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "peacockFeather")
        {
            //For All Items
            this.identity = "Peacock Feather";
            this.weight = 0.045;
            this.size = 16;
            this.description = "The illustrious and colorful feather of a peacock.";
            this.intForDes = 5;
            if (player.title == "Nobility" || player.title == "Royalty" || player.title == "Highfolk")
            {
                this.intDescription = "It is an alchemical former.";
            }
            else
            {
                this.intDescription = "It is an alchemical former; its price is inflated because only nobles are allowed to hunt peacocks.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (player.title == "Nobility" || player.title == "Royalty" || player.title == "Highfolk" || shopkeeper.ultra.faction != "Nirwaden" && shopkeeper.ultra.faction != "EstolGang")
                {
                    this.buyValue = 20; // at max, buy for 20.
                    this.sellValue = 20; // at max, sell for 20.
                }
                else
                {
                    this.buyValue = 20; // at max, buy for 20.
                    this.sellValue = 0; // at max, sell for 0.
                }
            }
        }
        else if (this.type == "mofuFeather")
        {
            //For All Items
            this.identity = "Mofu Feather";
            this.weight = 0.001;
            this.size = 8;
            this.description = "A feather from a mofu bird.";
            this.intForDes = 2;
            this.intDescription = "Mofu feathers can be used in many creations.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "thadineBranch")
        {
            //For All Items
            this.identity = "Thadine branch";
            this.weight = 0.9;
            this.size = 11;
            this.description = "A branch from a thadine bush covered in its numerous black leaves.";
            this.intForDes = 17;
            this.intDescription = "It can be used to stabilize a volitile mixture in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "ameloyFlower")
        {
            //For All Items
            this.identity = "Ameloy Flower";
            this.weight = 0.04;
            this.size = 3;
            this.description = "A small white and black flower that has a sweet and soothing aroma.";
            this.intForDes = 6;
            this.intDescription = "It can be used to make a desirable perfume.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "varonoiFeather")
        {
            //For All Items
            this.identity = "Varonoi Feather";
            this.weight = 0.06;
            this.size = 9;
            this.description = "A feather from a varonoi bird.";
            this.intForDes = 7;
            this.intDescription = "The feather of a varonoi can be used as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 15); // at max, buy for 6.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 12); // at max, sell for 6.
        }
        else if (this.type == "thegolThornSml")
        {
            //For All Items
            this.identity = "Thegol Thorn";
            this.weight = 2.6;
            this.size = 9;
            this.description = "The thorny stalk and acidic blue flower of a thegolthorn plant.";
            this.intForDes = 12;
            this.intDescription = "This can be used as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Vardan")
                {
                    this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
                    this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
                }
                else if (shopkeeper.ultra.race == "Thengar")
                {
                    this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
                    this.sellValue = 6 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
                }
                else
                {
                    this.buyValue = 20 - Math.floor(player.getCharisma() / 8); // at max, buy for 14.
                    this.sellValue = 12 + Math.floor(player.getCharisma() / 25); // at max, sell for 14.
                }
            }
            else
            {
                this.buyValue = 20 - Math.floor(player.getCharisma() / 8); // at max, buy for 14.
                this.sellValue = 12 + Math.floor(player.getCharisma() / 25); // at max, sell for 14.
            }
        }
        else if (this.type == "thegolThornLrg")
        {
            //For All Items
            this.identity = "Thegol Thorn";
            this.weight = 3.7;
            this.size = 14;
            this.description = "The thorny stalk and acidic blue flower of a thegolthorn plant.";
            this.intForDes = 12;
            this.intDescription = "This can be used as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Vardan")
                {
                    this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
                    this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
                }
                else if (shopkeeper.ultra.race == "Thengar")
                {
                    this.buyValue = 12 - Math.floor(player.getCharisma() / 15); // at max, buy for 9.
                    this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
                }
                else
                {
                    this.buyValue = 23 - Math.floor(player.getCharisma() / 8); // at max, buy for 17.
                    this.sellValue = 15 + Math.floor(player.getCharisma() / 25); // at max, sell for 17.
                }
            }
            else
            {
                this.buyValue = 23 - Math.floor(player.getCharisma() / 8); // at max, buy for 17.
                this.sellValue = 15 + Math.floor(player.getCharisma() / 25); // at max, sell for 17.
            }
        }
        else if (this.type == "cheshirePelt")
        {
            //For All Items
            this.identity = "Cheshire Pelt";
            this.weight = 1.7;
            this.size = 17;
            this.description = "The long haired black and white striped pelt of a cheshire.";
            this.intForDes = 2;
            this.intDescription = "This can be used to make clothing and other such tailored accessories.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28 - Math.floor(player.getCharisma() / 8); // at max, buy for 22.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 6); // at max, sell for 22.
        }
        else if (this.type == "cheshirePaw")
        {
            //For All Items
            this.identity = "Cheshire Paw";
            this.weight = 0.9;
            this.size = 10;
            this.description = "The severed paw of a cheshire.";
            this.intForDes = 0;
            this.intDescription = "This trophy is a testimate to the might of the one who slayed the cheshire it once belonged to.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "cheshireTongue")
        {
            //For All Items
            this.identity = "Cheshire Tongue";
            this.weight = 0.6;
            this.size = 6;
            this.description = "The thin, course tongue of a cheshire.";
            this.intForDes = 8;
            this.intDescription = "Cheshire tongue acts as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "batWing")
        {
            //For All Items
            this.identity = "Bat Wing";
            this.weight = 0.25;
            this.size = 4;
            this.description = "The thin fleshy webbed wing of a bat.";
            this.intForDes = 3;
            this.intDescription = "Wing of bat acts as a weak amplifier in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "mofuEgg")
        {
            //For All Items
            this.identity = "Mofu Egg";
            this.weight = 0.001;
            this.size = 5;
            this.description = "An egg laid by a mofu bird.";
            this.intForDes = 2;
            this.intDescription = "Mofu eggs can either be cooked or left to hatch.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "mofuHatch";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "dalgerEgg")
        {
            //For All Items
            this.identity = "Dalger Egg";
            this.weight = 3;
            this.size = 9;
            this.description = "An egg laid by a dalger.";
            this.intForDes = 2;
            this.intDescription = "Dalger eggs can either be cooked or left to hatch; if you hatch a dalger egg the emergent baby will see you as its parent.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "dalgerHatch";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 10.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, sell for 10.
        }
        else if (this.type == "mofuFoot")
        {
            //For All Items
            this.identity = "Mofu Foot";
            this.weight = 0.001;
            this.size = 8;
            this.description = "A hard rough bird foot from a mofu.";
            this.intForDes = 7;
            this.intDescription = "Mofu feet can be used in some alchemy recipes. They serve as formers.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawMofflingFlesh")
        {
            //For All Items
            this.identity = "Raw Moffling Flesh";
            this.weight = 0.1;
            this.size = 6;
            this.description = "The defeathered, eviscerated, whole body of a moffling ";
            this.intForDes = 3;
            this.intDescription = "Moffling is a commonly used name to refer to a baby mofu bird. Oh by the way... don't eat this raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "blackTrollPelt")
        {
            //For All Items
            this.identity = "Black Troll Pelt";
            this.weight = 3.5;
            this.size = 16;
            this.description = "The thick fuzzy black furred pelt from a jungle dwelling black troll.";
            this.intForDes = 2;
            this.intDescription = "This can be made into apparel and/or decorations.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30; // at max, buy for 30.
            this.sellValue = 30; // at max, sell for 30.
        }
        else if (this.type == "blackTrollSkull")
        {
            //For All Items
            this.identity = "Black Troll Skull";
            this.weight = 8.7;
            this.size = 15;
            this.description = "The skull of a jungle dwelling black troll.";
            this.intForDes = 8;
            this.intDescription = "Because black trolls are not particularly uncommon in Cephrite, this is not held to be a very popular trophy among most Cephrians.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite")
                {
                    this.buyValue = 5;
                    this.sellValue = 5;
                }
                else
                {
                    this.buyValue = 25; // at max, buy for 8.
                    this.sellValue = 25; // at max, sell for 8.
                }
            }
            else
            {
                this.buyValue = 25; // at max, buy for 8.
                this.sellValue = 25; // at max, sell for 8.
            }
        }
        else if (this.type == "naagSpine")
        {
            //For All Items
            this.identity = "Na'ag Spine";
            this.weight = 2.6;
            this.size = 9;
            this.description = "The sharp, tan coloured, boney spine from the back of a na'ag.";
            this.intForDes = 6;
            this.intDescription = "This can be used to embellish armour or to make weapons.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 7; // at max, sell for 7.
        }
        else if (this.type == "rawNaagFlesh")
        {
            //For All Items
            this.identity = "Raw Na'ag Flesh";
            this.weight = 100;
            this.size = 23;
            this.description = "A massive hunk of flesh from a na'ag.";
            this.intForDes = 1;
            this.intDescription = "This can be either cured or cooked...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55; // at max, buy for 55.
            this.sellValue = 50; // at max, sell for 50.
        }
        else if (this.type == "wholeCuredDriedNaag")
        {
            //For All Items
            this.identity = "Whole Cured Dried Na'ag";
            this.weight = 111;
            this.size = 24;
            this.description = "A massive hunk of cured dried meat from a na'ag.";
            this.intForDes = 1;
            this.intDescription = "This can be broken apart into smaller pieces...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 37;
            this.ingredients = [["Raw Na'ag Flesh", 1], ["Salt", 17]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 230; // at max, buy for 230.
            this.sellValue = 225; // at max, sell for 225.
        }
        else if (this.type == "curedDriedNaag")
        {
            //For All Items
            this.identity = "Cured Dried Na'ag";
            this.weight = 5.3;
            this.size = 9;
            this.description = "A good helping of cured dried naag meat.";
            this.intForDes = 0;
            this.intDescription = "Cured dried na'ag meat is salty, chewy, meaty and tastes distinctly na'ag-like: think sweaty goat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = -3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.6; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0; //cools player.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 15;
            this.intForCraft = 3;
            this.ingredients = [["Whole Cured Dried Na'ag", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 17; // at max, sell for 17.
        }
        else if (this.type == "naagMeat")
        {
            //For All Items
            this.identity = "Na'ag Meat";
            this.weight = 97;
            this.size = 23;
            this.description = "A massive hunk of meat from a na'ag.";
            this.intForDes = 0;
            this.intDescription = "Na'ag meat tastes hearty, and meaty, but most of all it has a very strong flavour that tastes very uniquely like na'ag: think sweaty goat";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 133; //satisfies hunger.
            this.thirst = 13; //quenches thirst.
            this.warmth = 56; //warms player.
            this.heal = 0; //heals health.
            this.generation = 5; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0; //cools player.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Raw Na'ag Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 103; // at max, buy for 103.
            this.sellValue = 96; // at max, sell for 96.
        }
        else if (this.type == "naagMeatChunk")
        {
            //For All Items
            this.identity = "Chunk of Na'ag Meat";
            this.weight = 4.7;
            this.size = 9;
            this.description = "A good helping of meat from a na'ag.";
            this.intForDes = 0;
            this.intDescription = "Na'ag meat tastes hearty, and meaty, but most of all it has a very strong flavour that tastes very uniquely like na'ag: think sweaty goat";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.4; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 0; //cools player.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 15;
            this.intForCraft = 3;
            this.ingredients = [["Na'ag Meat", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "voaiiCarapace")
        {
            //For All Items
            this.identity = "Voaii Carapace";
            this.weight = 3.25;
            this.size = 12;
            this.description = "The hard, jagged, red carapace, and sharp black stinger of a voaii.";
            this.intForDes = 5;
            this.intDescription = "This can be used to craft zetian weapons.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "voaiiWing")
        {
            //For All Items
            this.identity = "Voaii Wing";
            this.weight = 0.3;
            this.size = 15;
            this.description = "The thin, glistening, transparent, delicately veined, orangish reddish brown wing of a voaii.";
            this.intForDes = 3;
            this.intDescription = "This can be broken into bits and used to make blow darts or pillow stuffing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "voaiiWingFragments")
        {
            //For All Items
            this.identity = "Voaii Wing Fragments";
            this.weight = 0.04;
            this.size = 6;
            this.description = "Pieces of broken up voaii wing.";
            this.intForDes = 3;
            this.intDescription = "This is used as a stuffing for pillows and as the guiding tail for blowdarts.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 2;
            this.ingredients = [["Voaii Wing", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawVoaiiFlesh")
        {
            //For All Items
            this.identity = "Raw Voaii Flesh";
            this.weight = 1.5;
            this.size = 10;
            this.description = "The spongey yellow flesh of a voaii.";
            this.intForDes = 9;
            this.intDescription = "Voaii flesh has toxic compounds in it that are lethal for humans to consume.";


            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 2.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 1; //cools player.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "voaiiSponge")
        {
            //For All Items
            this.identity = "Voaii Sponge";
            this.weight = 0.75;
            this.size = 10;
            this.description = "The dried out spongey flesh of a voaii.";
            this.intForDes = 0;
            this.intDescription = "This can be used to soak up liquid like a sponge.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Raw Voaii Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "raedBeetleShell")
        {
            //For All Items
            this.identity = "Raed Beetle Shell";
            this.weight = 8.5;
            this.size = 13;
            this.description = "The thick red shell of a raed beetle.";
            this.intForDes = 8;
            this.intDescription = "This can be used to make armour, and can be used to make things.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 50); // at max, buy for 5.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
        }
        else if (this.type == "raedBeetleLeg")
        {
            //For All Items
            this.identity = "Raed Beetle Leg";
            this.weight = 1.2;
            this.size = 8;
            this.description = "The spined dark red leg of a raed beetle.";
            this.intForDes = 5;
            this.intDescription = "Raed beetle legs are used as a crafting material for making things.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "raedBeetleMeat")
        {
            //For All Items
            this.identity = "Raed Beetle Meat";
            this.weight = 2.15;
            this.size = 10;
            this.description = "The discoloured coagulated mush that once was the flesh of a raed beetle.";
            this.intForDes = 0;
            this.intDescription = "This smells gross and is likely not safe to eat...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Raw Raed Beetle Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "fermentedRaedBeetleFlesh")
        {
            //For All Items
            this.identity = "Fermented Raed Beetle Flesh";
            this.weight = 2.3;
            this.size = 12;
            this.description = "The strong smelly, slightly sweet, sour, and savoury hot fermented mash of raed beetle flesh.";
            this.intForDes = 0;
            if (player.raceName != "Zetian" && player.raceName != "Cephrite")
            {
                this.intDescription = "This has a powerful fermented buggy odor.";
            }
            else
            {
                this.intDescription = "For those who are not accustomed to eating giant fermented insect flesh, eating this may upset their stomach...";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = -0.9; //restores will.
            this.cooling = 2.5; //cools player.
            this.alcohol = 17;

            //ability
            if (player.raceName != "Zetian" && player.raceName != "Cephrite")
            {
                this.ability = "none";
            }
            else
            {
                this.ability = "foodPoisoning";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Raw Raed Beetle Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "raedBeetleFlesh")
        {
            //For All Items
            this.identity = "Raed Beetle Flesh";
            this.weight = 2.25;
            this.size = 12;
            this.description = "The thick, juicy, orangish coloured flesh of a raed beetle.";
            this.intForDes = 0;
            if (player.raceName != "Zetian" && player.raceName != "Cephrite")
            {
                this.intDescription = "This smells buggy...";
            }
            else
            {
                this.intDescription = "For those who are not accustomed to eating giant fermented insect flesh, eating this may upset their stomach...";
            }

            if (elevation <= -5)
            {
                this.decayable = true;
                this.decayLimit = 55;
                this.decayObjective = "fermentedRaedBeetleFlesh";
            }
            else
            {
                this.decayable = false;
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 1.5; //cools player.

            //ability
            if (player.raceName != "Zetian" && player.raceName != "Cephrite")
            {
                this.ability = "none";
            }
            else
            {
                this.ability = "foodPoisoning";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "xerocolePelt")
        {
            //For All Items
            this.identity = "Xerocole Pelt";
            this.weight = 5;
            this.size = 18;
            this.description = "The fluffy brown pelt of a xerocole.";
            this.intForDes = 7;
            this.intDescription = "This can be used to make rugs, decorations, and apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 50); // at max, buy for 9.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "naagPelt")
        {
            //For All Items
            this.identity = "Na'ag Pelt";
            this.weight = 19;
            this.size = 40;
            this.description = "A giant stretch of fluffy tan Na'ag pelt.";
            this.intForDes = 4;
            this.intDescription = "Na'ag means sand swallower in the ancient Zetian tongue. Na'ag pelt is used to make rugs, apparel, and other cozy furnishings.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 86 - Math.floor(player.getCharisma() / 10); // at max, buy for 81.
            this.sellValue = 79 + Math.floor(player.getCharisma() / 25); // at max, sell for 81.
        }
        else if (this.type == "kigariiPelt")
        {
            //For All Items
            this.identity = "Kigarii Pelt";
            this.weight = 1;
            this.size = 17;
            this.description = "The black and red, spiked pelt of a kigarii.";
            this.intForDes = 5;
            this.intDescription = "This can be used as a decoration or to make apparel with.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 7.142857142857); // at max, buy for 23.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 23.
        }
        else if (this.type == "rawKigariiFlesh")
        {
            //For All Items
            this.identity = "Raw Kigarii Flesh";
            this.weight = 0.9;
            this.size = 10;
            this.description = "The spikey rib cut of a kigarii.";
            this.intForDes = 4;
            this.intDescription = "The flesh is unsafe to eat raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "kigariiRibs")
        {
            //For All Items
            this.identity = "Kigarii Ribs";
            this.weight = 0.8;
            this.size = 10;
            this.description = "The cooked rib meat of a kigarii.";
            this.intForDes = 0;
            this.intDescription = "Though it is firm in texture, it has a desirable meaty flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Raw Kigarii Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 15); // at max, sell for 12.
        }
        else if (this.type == "sonjaGlazedKigariiRibs")
        {
            //For All Items
            this.identity = "Sonja Glazed Kigarii Ribs";
            this.weight = 0.8;
            this.size = 10;
            this.description = "The grilled rib meat of a kigarii glazed with a sweet tropical sonja fruit sap.";
            this.intForDes = 0;
            this.intDescription = "Sweet Kigarii ribs are a tasty snack to eat if you like sweet and savoury together...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 11; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Raw Kigarii Flesh", 1], ["Sonja Bubble", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 15); // at max, sell for 14.
        }
        else if (this.type == "dalgerHide")
        {
            //For All Items
            this.identity = "Dalger Hide";
            this.weight = 11.5;
            this.size = 19;
            this.description = "The extremely thick spikey black hide of a dalger.";
            this.intForDes = 3;
            this.intDescription = "This can be used to make apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 25); // at max, buy for 18.
            this.sellValue = 18; // at max, sell for 18.
        }
        else if (this.type == "rawDalgerFlesh")
        {
            //For All Items
            this.identity = "Raw Dalger Flesh";
            this.weight = 3.2;
            this.size = 10;
            this.description = "The raw green flesh of a dalger.";
            this.intForDes = 5;
            this.intDescription = "Dalger flesh is often home to fleshmites.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "dalgerMeat")
        {
            //For All Items
            this.identity = "Dalger Meat";
            this.weight = 3.1;
            this.size = 10;
            this.description = "The cooked greenish meat of a dalger.";
            this.intForDes = 5;
            this.intDescription = "Dalger meat tastes bitter, but sort of fatty.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7.5; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = -0.5; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -0.15; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Dalger Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 10); // at max, buy for 9.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
        }
        else if (this.type == "cookedDalgerEgg")
        {
            //For All Items
            this.identity = "Fried Dalger Egg";
            this.weight = 2.3;
            this.size = 8;
            this.description = "A cooked egg from a dalger.";
            this.intForDes = 1;
            this.intDescription = "Dalger eggs have lots of good nutrients in them!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Dalger Egg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 15); // at max, buy for 9.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
        }
        else if (this.type == "cookedMofuEgg")
        {
            //For All Items
            this.identity = "Egg";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A cooked egg from a mofu bird.";
            this.intForDes = 1;
            this.intDescription = "Eggs are a good source of protein... and fat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Mofu Egg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
        }
        else if (this.type == "fermentedMofuEgg")
        {
            //For All Items
            this.identity = "Fermented Egg";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A fermented egg from a mofu bird.";
            this.intForDes = 9;
            this.intDescription = "Fermented egg is popular in Orgish cuisine, but it is also used in some alchemy recipes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = -0.25; //restores will.
            this.alcohol = 6; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Mofu Egg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
        }
        else if (this.type == "humptyChalaza")
        {
            //For All Items
            this.identity = "Humpty Chalaza";
            this.weight = 1;
            this.size = 7;
            this.description = "The Spiral band that connected the humpty's yolk to its inner membrane.";
            this.intForDes = 25;
            this.intDescription = "This is a powful magical ingredient used in the making of Cephrian tinctures.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.00; //recoops lost energy.
            this.replenish = 2; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 50); // at max, buy for 17.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 25); // at max, sell for 17.
        }
        else if (this.type == "mofflingMeat")
        {
            //For All Items
            this.identity = "Moffling Meat";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A whole roasted moffling.";
            this.intForDes = 1;
            this.intDescription = "In freydic tradition moffling is sometimes served as a delicacy served with fine berry sauce.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Raw Moffling Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 15); // at max, buy for 15.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 10); // at max, sell for 15.
        }
        else if (this.type == "pluttMoffling")
        {
            //For All Items
            this.identity = "Moffling Meat in Plutt Berry Sauce";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A whole roasted moffling served with a thick sweet plutt berry sauce poured over it.";
            this.intForDes = 1;
            this.intDescription = "Moffling with plutt berry sauce is a delicacy enjoyed even by freydic nobles.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Moffling Meat", 1], ["Plutt Berries", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 10); // at max, sell for 25.
        }
        else if (this.type == "akerMoffling")
        {
            //For All Items
            this.identity = "Moffling Meat in Aker Berry Sauce";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A whole roasted moffling served with a tart aker berry sauce poured over it.";
            this.intForDes = 1;
            this.intDescription = "Moffling with aker berry sauce is a delicacy enjoyed even by freydic nobles.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5.5; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Moffling Meat", 1], ["Aker Berries", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 10); // at max, buy for 20.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 10); // at max, sell for 20.
        }
        else if (this.type == "rawMofuFlesh")
        {
            //For All Items
            this.identity = "Raw Mofu Flesh";
            this.weight = 3;
            this.size = 8;
            this.description = "The defeathered, eviscerated, whole body of a matured mofu bird. ";
            this.intForDes = 3;
            this.intDescription = "Mofu birds flesh is not safe to eat raw, be sure to cook it thoroughly.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 12); // at max, buy for 9.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
        }
        else if (this.type == "rawPeacockFlesh")
        {
            //For All Items
            this.identity = "Raw Peacock Flesh";
            this.weight = 5;
            this.size = 14;
            this.description = "The defeathered, eviscerated, whole body of a peacock. ";
            this.intForDes = 3;
            if (player.title == "Nobility" || player.title == "Royalty" || player.title == "Highfolk")
            {
                this.intDescription = "Only those of noble blood have the priviledge of hunting peacocks. Don't eat this raw.";
            }
            else
            {
                this.intDescription = "Common people are not supposed to hunt peacocks, so merchants will not purchase this. Don't eat this raw.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            if (player.title == "Nobility" || player.title == "Royalty" || player.title == "Highfolk")
            {
                this.sellValue = 10 + Math.floor(player.getCharisma() / 3); // at max, sell for 25.
            }
            else
            {
                this.sellValue = 0;
            }
        }
        else if (this.type == "mofuMeat")
        {
            //For All Items
            this.identity = "Mofu Meat";
            this.weight = 3;
            this.size = 8;
            this.description = "A whole roasted mofu.";
            this.intForDes = 0;
            this.intDescription = "Mofu is always a beloved addition to any meal!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Raw Mofu Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 6); // at max, buy for 22.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 12); // at max, sell for 22.
        }
        else if (this.type == "peacockMeat")
        {
            //For All Items
            this.identity = "Peacock Meat";
            this.weight = 5;
            this.size = 14;
            this.description = "A whole roasted peacock.";
            this.intForDes = 0;
            this.intDescription = "Peacocks are usually only eaten by those of aristocratic lineage.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 19; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 9; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Raw Peacock Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 10); // at max, buy for 45.
            if (player.title == "Nobility" || player.title == "Royalty" || player.title == "Highfolk")
            {
                this.sellValue = 20 + Math.floor(player.getCharisma() / 2); // at max, sell for 45.
            }
            else
            {
                this.sellValue = 0;
            }
        }
        else if (this.type == "rawLargeMofuFlesh")
        {
            //For All Items
            this.identity = "Raw Large Mofu Flesh";
            this.weight = 5;
            this.size = 19;
            this.description = "The defeathered, eviscerated, whole body of a a large mofu bird. ";
            this.intForDes = 3;
            this.intDescription = "Mofu birds can grow huge when there is enough food available to permit them to. Oh and by the way, Don't eat the meat raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26 - Math.floor(player.getCharisma() / 10); // at max, buy for 21.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 10); // at max, sell for 21.
        }
        else if (this.type == "largeMofuMeat")
        {
            //For All Items
            this.identity = "Large Mofu Meat";
            this.weight = 5;
            this.size = 19;
            this.description = "A whole, slow roasted, and exceptionally large mofu.";
            this.intForDes = 3;
            this.intDescription = "Mofu this large is more often served at a noble's feast than a peasant's table.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 33; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.35; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 26;
            this.ingredients = [["Raw Large Mofu Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 5); // at max, buy for 40.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 5); // at max, sell for 40.
        }
        else if (this.type == "fattyMofuLiver")
        {
            //For All Items
            this.identity = "Fatty Mofu Liver";
            this.weight = 3;
            this.size = 9;
            this.description = "Tender and creamy but firm mofu bird liver, known well as a culinary extravagence.";
            this.intForDes = 4;
            this.intDescription = "It is proper to eat fatty mofu liver raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0.05; //heals health.
            this.generation = 0.3; //recoops lost energy.
            this.replenish = 0.5; //restores will.

            //ability
            this.ability = "satiate";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 157 - Math.floor(player.getCharisma() / 5); // at max, buy for 147.
            this.sellValue = 134 + Math.floor(player.getCharisma() / 5); // at max, sell for 144.
        }
        else if (this.type == "golgemoffFeelers")
        {
            //For All Items
            this.identity = "Golgemoff Feelers";
            this.weight = 1;
            this.size = 8;
            this.description = "The long fleshy slimy feelers of a golgemoff.";
            this.intForDes = 15;
            this.intDescription = "The slime covering on the feelers has a toxic component that causes temporary blindness almost imediately upon contact with the skin.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
        }
        else if (this.type == "rawGolgemoffFlesh")
        {
            //For All Items
            this.identity = "Raw Golgemoff Flesh";
            this.weight = 0.7;
            this.size = 7;
            this.description = "The thick sticky and jell-like yet solid raw flesh of a golgemoff.";
            this.intForDes = 13;
            this.intDescription = "The flesh of a golgemoff can be made into adhesive, but eating it is poisoness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = -5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -2; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "golgemoffMeat")
        {
            //For All Items
            this.identity = "Golgemoff Meat";
            this.weight = 0.4;
            this.size = 7;
            this.description = "A hardened dry and discoloured hunk of what was once the flesh of a golgemoff.";
            this.intForDes = 13;
            this.intDescription = "This can be powdered and used as an ingredient in some alchemy recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Raw Golgemoff Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "adhesive")
        {
            //For All Items
            this.identity = "Adhesive";
            this.weight = 0.6;
            this.size = 10;
            this.description = "A sticky white substance used to stick things together.";
            this.intForDes = 5;
            this.intDescription = "This substance is somewhat toxic so it is advisable that shield your breathing around it until it has dried.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 14;
            this.ingredients = [["Raw Golgemoff Flesh", 3], ["Tenic Paste", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 7; // at max, sell for 7.
        }
        else if (this.type == "grushFur")
        {
            //For All Items
            this.identity = "Grush Fur";
            this.weight = 1;
            this.size = 10;
            this.description = "A section of green plant-like bristly fur.";
            this.intForDes = 36;
            this.intDescription = "Grushes natural developed this strange fur to hide among patches of grushweed unnoticed.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 12); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "rawGrushFlesh")
        {
            //For All Items
            this.identity = "Raw Grush Flesh";
            this.weight = 2;
            this.size = 9;
            this.description = "The raw earthy flesh of a grush.";
            this.intForDes = 6;
            this.intDescription = "If you eat it raw you may find yourself with a bit of indigestion.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gassiness";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "grushMeat")
        {
            //For All Items
            this.identity = "Grush Meat";
            this.weight = 2;
            this.size = 9;
            this.description = "The cooked meat of a grush.";
            this.intForDes = 0;
            this.intDescription = "The meat has a natural and earthy flavor, and it is also juicy and tender.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Grush Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "avrakHide")
        {
            //For All Items
            this.identity = "Avrak Hide";
            this.weight = 2.5;
            this.size = 14;
            this.description = "A thick redish-brown hide from an avrak.";
            this.intForDes = 36;
            this.intDescription = "This can be tanned and made into leather armour or it can be made into fiber.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 10); // at max, buy for 15.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 5); // at max, sell for 15.
        }
        else if (this.type == "evrakHide")
        {
            //For All Items
            this.identity = "Evrak Hide";
            this.weight = 3;
            this.size = 15;
            this.description = "A thick dark-brown hide from an evrak.";
            this.intForDes = 36;
            this.intDescription = "This can be tanned and made into leather armour or it can be made into fiber.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 10); // at max, buy for 20.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 4); // at max, sell for 20.
        }
        else if (this.type == "varnFiber")
        {
            //For All Items
            this.identity = "Fiber";
            this.weight = 0.1;
            this.size = 10;
            this.description = "Strong thin strands of fiber.";
            this.intForDes = 1;
            this.intDescription = "Fiber is a basic material used in many crafting recipies.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 20;
            this.ingredients = [["Varn Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "hoffalgreFiber")
        {
            //For All Items
            this.identity = "Fiber";
            this.weight = 0.1;
            this.size = 10;
            this.description = "Strong thin strands of fiber.";
            this.intForDes = 1;
            this.intDescription = "Fiber is a basic material used in many crafting recipies.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 14;
            this.ingredients = [["Hoffalgre Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rabbitPelt")
        {
            //For All Items
            this.identity = "Rabbit Pelt";
            this.weight = 0.5;
            this.size = 9;
            this.description = "The pelt of a rabbit.";
            this.intForDes = 2;
            this.intDescription = "Rabbit fur can be used to make clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "rabbitFoot")
        {
            //For All Items
            this.identity = "Rabbit Foot";
            this.weight = 0.125;
            this.size = 3;
            this.description = "The bloody severed foot of a rabbit.";
            this.intForDes = 1;
            this.intDescription = "Rabbit feet bring good luck or something like that.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawRabbitFlesh")
        {
            //For All Items
            this.identity = "Raw Rabbit Flesh";
            this.weight = 1;
            this.size = 9;
            this.description = "The raw flesh of a Rabbit.";
            this.intForDes = 1;
            this.intDescription = "Rabbit meat is not very filling, it has very little fat overall.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";


            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rabbitMeat")
        {
            //For All Items
            this.identity = "Rabbit Meat";
            this.weight = 1;
            this.size = 9;
            this.description = "The cooked meat of a Rabbit.";
            this.intForDes = 0;
            this.intDescription = "The meat has an inherent peppery aftertaste and is overall fairly gamey.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Raw Rabbit Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "rawTunskFlesh")
        {
            //For All Items
            this.identity = "Raw Tunsk Flesh";
            this.weight = 0.9;
            this.size = 9;
            this.description = "The raw flesh of a tunsk.";
            this.intForDes = 2;
            this.intDescription = "When cooked tunsk meat is rather tasty, if you don't mind its gamey flavour. Eating this raw may result in vomiting.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.75; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "potentialFoodPoisoning";


            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "tunskMeat")
        {
            //For All Items
            this.identity = "Tunsk Meat";
            this.weight = 0.85;
            this.size = 9;
            this.description = "The cooked meat of a tunsk.";
            this.intForDes = 1;
            this.intDescription = "The meat is tender, moist, and gamey.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.5; //satisfies hunger.
            this.thirst = 0.05; //quenches thirst.
            this.warmth = 0.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Raw Tunsk Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "rawAvrakFlesh")
        {
            //For All Items
            this.identity = "Raw Avrak Flesh";
            this.weight = 3.5;
            this.size = 12;
            this.description = "A strange tender flesh with a good deal of fat.";
            this.intForDes = 1;
            this.intDescription = "Avrak flesh can be eaten raw as a delicacy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";


            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 12); // at max, buy for 14.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 10); // at max, sell for 14.
        }
        else if (this.type == "rawEvrakFlesh")
        {
            //For All Items
            this.identity = "Raw Evrak Flesh";
            this.weight = 3.5;
            this.size = 12;
            this.description = "A strange tender flesh with a good deal of fat.";
            this.intForDes = 1;
            this.intDescription = "Evrak flesh can be eaten raw as a delicacy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";


            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 12); // at max, buy for 14.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 10); // at max, sell for 14.
        }
        else if (this.type == "rawBorgalFlesh")
        {
            //For All Items
            this.identity = "Raw Borgal Flesh";
            this.weight = 0.75;
            this.size = 10;
            this.description = "The tough and lean flesh of a borgal.";
            this.intForDes = 0;
            if (player.getIntelligence() >= 5)
            {
                this.intDescription = "It has a somewhat wild and gamey smell to it. This flesh is crawling with flesh mites.";
            }
            else
            {
                this.intDescription = "It has a somewhat wild and gamey smell to it.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Crafting
            this.yield = 22;
            this.intForCraft = 3;
            this.ingredients = [["Borgal Leg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "borgalMeat")
        {
            //For All Items
            this.identity = "Borgal Meat";
            this.weight = 0.7;
            this.size = 10;
            this.description = "The tough, gamey, and lean meat of a borgal.";
            this.intForDes = 0;
            this.intDescription = "It has a particular strong, wild, and gamey aroma that unique to borgals.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Borgal Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "avrakMeat")
        {
            //For All Items
            this.identity = "Avrak Meat";
            this.weight = 3;
            this.size = 12;
            this.description = "The strangely tender and fatty cooked meat of an avrak.";
            this.intForDes = 1;
            this.intDescription = "Due to the fact that it is fatty, rich and exotic tasting tender meat avrak meat is highly sought after.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 24; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 22;
            this.ingredients = [["Raw Avrak Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 32 - Math.floor(player.getCharisma() / 6); // at max, buy for 24.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 10); // at max, sell for 24.
        }
        else if (this.type == "evrakMeat")
        {
            //For All Items
            this.identity = "Evrak Meat";
            this.weight = 0.1;
            this.size = 6;
            this.description = "The strangely tender and fatty cooked meat of an evrak.";
            this.intForDes = 1;
            this.intDescription = "Due to the fact that it is fatty, rich and exotic tasting tender meat evrak meat is highly sought after.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 24; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 22;
            this.ingredients = [["Raw Evrak Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 32 - Math.floor(player.getCharisma() / 6); // at max, buy for 24.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 10); // at max, sell for 24.
        }
        else if (this.type == "blubber")
        {
            //For All Items
            this.identity = "Blubber";
            this.weight = 1;
            this.size = 10;
            this.description = "A glob of fat...";
            this.intForDes = 9;
            this.intDescription = "This can be used to make oil which is a highly valued commodity.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 10); // at max, buy for 9.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 10); // at max, sell for 9.
        }
        else if (this.type == "walrusTusks")
        {
            //For All Items
            this.identity = "Walrus Tusks";
            this.weight = 2;
            this.size = 12;
            this.description = "The tusks of a land walrus.";
            this.intForDes = 12;
            this.intDescription = "Walrus tusks are used in the creation of several Freydic weapons and armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 6); // at max, buy for 9.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 7.
        }
        else if (this.type == "balkurFang")
        {
            //For All Items
            this.identity = "Balkur Fang";
            this.weight = 0.25;
            this.size = 7;
            this.description = "The fang of a balkur.";
            this.intForDes = 5;
            this.intDescription = "Balkurs have two large fangs each one as sharp as a sword.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "barbolSkin")
        {
            //For All Items
            this.identity = "Barbol Skin";
            this.weight = 10.5;
            this.size = 17;
            this.description = "The thick scaley hide of a barbol.";
            this.intForDes = 7;
            this.intDescription = "Barbol skin can be made into apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17; // at max, buy for 17.
            this.sellValue = 17; // at max, sell for 17.
        }
        else if (this.type == "miterHide")
        {
            //For All Items
            this.identity = "Miter Hide";
            this.weight = 3;
            this.size = 11;
            this.description = "The spined thick grey hide of a miter.";
            this.intForDes = 6;
            this.intDescription = "Miter hide can be used to make a durable leather.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "emptyMiterBloodSac")
        {
            //For All Items
            this.identity = "Empty Miter Blood Sac";
            this.weight = 2;
            this.size = 9;
            this.description = "The organ of the miter used for storing the blood sucked from its victims.";
            this.intForDes = 2;
            this.intDescription = "The miter has not fed recently or this would be full of blood.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "miterBloodSac")
        {
            //For All Items
            this.identity = "Miter Blood Sac";
            this.weight = 4;
            this.size = 9;
            this.description = "The organ of the miter used for storing the blood that it sucks out of its prey.";
            this.intForDes = 0;
            this.intDescription = "It is swollen full with blood sucked from the miter's victims.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "fireStarter")
        {
            //For All Items
            this.identity = "Fire-Starter";
            this.weight = 1;
            this.size = 12;
            this.description = "A box of flints with an iron side to strike them against.";
            this.intForDes = 1;
            this.intDescription = "If this tool is in your inventory you can click on wood to place it as a campfire and then double click the campfire to light it!";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Iron", 1], ["Flint", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 15); // at max, buy for 10.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "lockpick")
        {
            //For All Items
            this.identity = "Lockpick";
            this.weight = 0.05;
            this.size = 6;
            this.description = "An skinny iron device used for picking locks.";
            this.intForDes = 1;
            this.intDescription = "If this tool is in your inventory you can double click on doors and have achance to unlock them. Dexterity improves your effectiveness at lockpicking.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 9;
            this.intForCraft = 5;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "shears")
        {
            //For All Items
            this.identity = "Shears";
            this.weight = 1;
            this.size = 10;
            this.description = "A pair of iron shears.";
            this.intForDes = 2;
            this.intDescription = "This tool is used to obtain wool or fur from a variety of animals, most notably sheep. Shears are also necessary to pick certain plants.";

            //Define Utility
            this.utility = "tool";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "tent")
        {
            //For All Items
            this.identity = "Tent";
            this.weight = 6;
            this.size = 15;
            this.description = "A quick-to-set-up inhabitance that provides safe and comfortable rest.";
            this.intForDes = 0;
            if (campout)
            {
                this.intDescription = "If you have a hammer equipped click the tent in your inventory to place it, and double click on the placed tent to disassemble it.";
            }
            else
            {
                this.intDescription = "You are not permitted to use a tent in this location.";
            }

            //Define Utility
            this.utility = "tool";
            this.subUtility = "tent";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Cloth", 6], ["Iron", 1], ["Fiber", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 2); // at max, buy for 30.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
        }
        else if (this.type == "vardanianTent")
        {
            //For All Items
            this.identity = "Vardanian Tent";
            this.weight = 5;
            this.size = 15;
            this.description = "A quick-to-set-up inhabitance that puts a thin layer of cloth between you and the beasts of the night...";
            this.intForDes = 0;
            if (campout)
            {
                this.intDescription = "Use a hammer to set up and take down the tent.";
            }
            else
            {
                this.intDescription = "You are not permitted to use a tent in this location.";
            }

            //Define Utility
            this.utility = "tool";
            this.subUtility = "vardanianTent";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Vardan")
            {
                this.intForCraft = 12;
            }
            else
            {
                this.intForCraft = 18;
            }
            this.ingredients = [["Cloth", 5], ["Iron", 1], ["Fiber", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 2.6315789); // at max, buy for 26.
            this.sellValue = 21 + Math.floor(player.getCharisma() / 10); // at max, sell for 26.
        }
        else if (this.type == "nomadTent")
        {
            //For All Items
            this.identity = "Nomad Tent";
            this.weight = 4;
            this.size = 16;
            this.description = "A quick-to-set-up inhabitance that provides safe and comfortable rest.";
            this.intForDes = 0;
            if (campout)
            {
                this.intDescription = "If you have a hammer equipped click the tent in your inventory to place it, and double click on the placed tent to disassemble it.";
            }
            else
            {
                this.intDescription = "You are not permitted to use a tent in this location.";
            }

            //Define Utility
            this.utility = "tool";
            this.subUtility = "nomadTent";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Hyena Pelt", 7], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 60 - Math.floor(player.getCharisma() / 10); // at max, buy for 55.
            this.sellValue = 52 + Math.floor(player.getCharisma() / 15); // at max, sell for 55.
        }
        else if (this.type == "brokenLockpick")
        {
            //For All Items
            this.identity = "Broken Lockpick";
            this.weight = 0.05;
            this.size = 7;
            this.description = "A broken lockpick.";
            this.intForDes = 1;
            this.intDescription = "Lockpicks can break if picklocking goes wrong...";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "beartrap")
        {
            //For All Items
            this.identity = "Bear-Trap";
            this.weight = 1;
            this.size = 10;
            this.description = "A sharp toothed metal trap the clamps shut when pressure is put on its center.";
            this.intForDes = 0;
            this.intDescription = "Advice: Don't spring your own trap!";

            //Define Utility
            this.utility = "trap";
            //subUtility
            this.subUtility = "beartrap";

            //Utility Focused
            this.damage = Math.floor(5 + 30/50 * player.getSurvivalism());
            this.negate = 1;
            this.range = 13.5;
            this.survReq = 2;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 27;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 10); // at max, sell for 25.
        }
        else if (this.type == "clawtrap")
        {
            //For All Items
            this.identity = "Claw-Trap";
            this.weight = 2.5;
            this.size = 16;
            this.description = "A three spiked metal trap that swings shut on whatever sets off the burried pressure plate in front of it.";
            this.intForDes = 0;
            this.intDescription = "Advice: Don't spring your own trap!";

            //Define Utility
            this.utility = "trap";
            //subUtility
            this.subUtility = "clawtrap";

            //Utility Focused
            this.damage = Math.floor(9 + 34 / 50 * player.getSurvivalism());
            this.negate = 3;
            this.range = 14;
            this.survReq = 4;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Iron", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 10); // at max, buy for 45.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 10); // at max, sell for 45.
        }
        else if (this.type == "floortrap")
        {
            //For All Items
            this.identity = "Floor-Trap";
            this.weight = 20;
            this.size = 25;
            this.description = "A buried spiked trap that propels sharpened rods upwards into the prey.";
            this.intForDes = 0;
            this.intDescription = "Advice: Don't spring your own trap!";

            //Define Utility
            this.utility = "trap";
            //subUtility
            this.subUtility = "floortrap";

            //Utility Focused
            this.damage = Math.floor(15 + 40 / 50 * player.getSurvivalism());
            this.negate = 5;
            this.range = 25;
            this.survReq = 18;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 38;
            this.ingredients = [["Iron", 18], ["Steel", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 142 - Math.floor(player.getCharisma() / 5); // at max, buy for 132.
            this.sellValue = 122 + Math.floor(player.getCharisma() / 5); // at max, sell for 132.
        }
        else if (this.type == "firetrap")
        {
            //For All Items
            this.identity = "Fire-Trap";
            this.weight = 1.5;
            this.size = 9;
            this.description = "An oil based igniter that draws in air to spit flames out toward the prey.";
            this.intForDes = 0;
            this.intDescription = "Advice: Don't spring your own trap!";

            //Define Utility
            this.utility = "trap";
            //subUtility
            this.subUtility = "firetrap";

            //Utility Focused
            this.damage = "fire";
            this.negate = "n/a";
            this.range = 23;
            this.survReq = 13;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 0;
            this.biproducts = [[new Item("glassJar", false), 1]];
            this.ingredients = [["Fire-Trap (empty)", 2], ["Jar of Oil", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 70 - Math.floor(player.getCharisma() / 5); // at max, buy for 60.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 60.
        }
        else if (this.type == "firetrapEmpty")
        {
            //For All Items
            this.identity = "Fire-Trap (empty)";
            this.weight = 1;
            this.size = 9;
            this.description = "A fire-trap that has no fuel.";
            this.intForDes = 3;
            this.intDescription = "A fire-trap needs a half of a jar of oil in order to be able to function.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 45;
            this.ingredients = [["Iron", 2], ["Fire Starter", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 60 - Math.floor(player.getCharisma() / 5); // at max, buy for 50.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 0.4); // at max, sell for 50.
        }
        else if (this.type == "jacks")
        {
            //For All Items
            this.identity = "Jacks";
            this.weight = 0.25;
            this.size = 8;
            this.description = "Spiky metal balls that are spread across the ground to injure those who step on them.";
            this.intForDes = 0;
            this.intDescription = "Someone without sufficient trapping knowledge likely would scatter them ineffectively or too visibly.";

            //Define Utility
            this.utility = "trap";
            //subUtility
            this.subUtility = "jacks";

            //Utility Focused
            this.damage = Math.floor(1 + 3 / 50 * player.getSurvivalism());
            this.negate = 1;
            this.range = 25;
            this.survReq = 1;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 50;
            this.intForCraft = 9;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "spindletrap")
        {
            //For All Items
            this.identity = "Spindle-Trap";
            this.weight = 11;
            this.size = 26;
            this.description = "Four curved blades attached to a mechanical contraption made of gears, springs, and wire.";
            this.intForDes = 1;
            this.intDescription = "The trap spins around cutting all nearby it into pieces.";

            //Define Utility
            this.utility = "trap";
            //subUtility
            this.subUtility = "spindletrap";

            //Utility Focused
            this.damage = Math.floor(1 + 3 / 50 * player.getSurvivalism());
            this.negate = 13;
            this.range = 58;
            this.survReq = 15;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Iron", 15]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 300 - Math.floor(player.getCharisma() / 1); // at max, buy for 250.
            this.sellValue = 150 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 250.
        }
        else if (this.type == "yeolWood")
        {
            //For All Items
            this.identity = "Yeol Wood";
            this.weight = 2;
            this.size = 12;
            this.description = "The timber from a yeol tree.";
            this.intForDes = 3;
            this.intDescription = "Yeol trees grow in the savannah and other hot regions, their wood is particularly soft and flexible for wood.";

            //Define Utility
            this.utility = "material";
            //subUtility
            this.subUtility = "yeolCampFire";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "wood") //woodwood
        {
            //For All Items
            this.identity = "Wood";
            this.weight = 2;
            this.size = 12;
            this.description = "Timber from trees.";
            this.intForDes = 3;
            this.intDescription = "This is an important raw material used in the crafting of many different things.";

            //Define Utility
            this.utility = "material";
            //subUtility
            this.subUtility = "campFire";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.race == "Vardan")
                {
                    this.buyValue = 9 - Math.floor(player.getCharisma() / 15); // at max, buy for 6.
                    this.sellValue = 4 + Math.floor(player.getCharisma() / 25); // at max, sell for 6.
                }
                else
                {
                    this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                    this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
                }
            }
            else
            {
                this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
        }
        else if (this.type == "ashaiWood") //ashaiashai
        {
            //For All Items
            this.identity = "Ashai Wood";
            this.weight = 1.5;
            this.size = 12;
            this.description = "Timber from ashai trees.";
            this.intForDes = 3;
            this.intDescription = "This is an important raw material used in the crafting of many different things.";

            //Define Utility
            this.utility = "material";
            //subUtility
            this.subUtility = "ashaiCampFire";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "acaciaWood") //acaciaacacia
        {
            //For All Items
            this.identity = "Acacia Wood";
            this.weight = 24;
            this.size = 20;
            this.description = "Timber from an acacia tree.";
            this.intForDes = 3;
            this.intDescription = "This is an important raw material used in the crafting of many different things.";

            //Define Utility
            this.utility = "material";
            //subUtility
            this.subUtility = "acaciaCampFire";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite")
                {
                    this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
                    this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
                }
                else if (shopkeeper.ultra.faction == "Aldrek")
                {
                    this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
                    this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
                }
                else if (shopkeeper.ultra.faction == "Orgell")
                {
                    this.buyValue = 6 - Math.floor(player.getCharisma() / 50); // at max, buy for 5.
                    this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
                }
                else if (shopkeeper.ultra.faction == "Nirwaden" || shopkeeper.ultra.faction == "Kel")
                {
                    this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
                    this.sellValue = 4 + Math.floor(player.getCharisma() / 25); // at max, sell for 6.
                }
                else
                {
                    this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
                    this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
                }
            }
            else
            {
                this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
            }
        }
        else if (this.type == "ashai") //ashaiashaiashai
        {
            //For All Items
            this.identity = "Ashai";
            this.weight = 2;
            this.size = 12;
            this.description = "A hard but somewhat plyable substance much like wood.";
            this.intForDes = 1;
            this.intDescription = "This is made from hardened ashai powder.";

            //Define Utility
            this.utility = "material";
            //subUtility
            this.subUtility = "ashaiCampFire";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.biproducts = [[new Item("vardanianBowl", false), 1]];
            this.ingredients = [["Ashai Powder", 3], ["Vardanian Bowl of Water", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "ashaiPowder")
        {
            //For All Items
            this.identity = "Ashai Powder";
            this.weight = 0.6;
            this.size = 12;
            this.description = "Powdered ashai bark.";
            this.intForDes = 2;
            this.intDescription = "When water is added it solidifies into a hard wood-like substance that is slightly more durable than wood.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 16;
            this.intForCraft = 2;
            this.ingredients = [["Ashai Wood", 10], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "clay")
        {
            //For All Items
            this.identity = "Clay";
            this.weight = 1.8;
            this.size = 8;
            this.description = "A hunk of clay.";
            this.intForDes = 4;
            this.intDescription = "Clay is used to make pottery of all sorts.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "stone")
        {
            //For All Items
            this.identity = "Stone";
            this.weight = 3;
            this.size = 8;
            this.description = "A chunk of rock.";
            this.intForDes = 6;
            this.intDescription = "Stone is used for either constructing or carving.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "darkStone")
        {
            //For All Items
            this.identity = "Stone";
            this.weight = 2.8;
            this.size = 8;
            this.description = "A chunk of rock.";
            this.intForDes = 30;
            this.intDescription = "This type of stone usually has a higher coal and iron content and sometimes but rarely also contains trace amounts of ruby.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "ashStone")
        {
            //For All Items
            this.identity = "Stone";
            this.weight = 2.2;
            this.size = 8;
            this.description = "A chunk of rock.";
            this.intForDes = 30;
            this.intDescription = "This type of stone is particularly weak. It often contains large amounts of cole, as well as metaphorphosed ash.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "alcaStone")
        {
            //For All Items
            this.identity = "Stone";
            this.weight = 3.3;
            this.size = 8;
            this.description = "A chunk of rock.";
            this.intForDes = 30;
            this.intDescription = "This type of stone has a high copper content. It also can contain higher amounts of gold than most rocks.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "brightStone")
        {
            //For All Items
            this.identity = "Bright Stone";
            this.weight = 7;
            this.size = 8;
            this.description = "A chunk of glowing rock.";
            this.intForDes = 7;
            this.intDescription = "Some say that these stones contain malevolent spirits that sap your life away.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //radioactive in world
            if (this.X !== false)
            {
                if (player.radProof != true)
                {
                    var pluyaDista = (X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y);
                    if (pluyaDista <= (53 * 53))
                    {
                        player.radiation += 0.05;
                    }
                }

                for (var iiiii = 0; iiiii < ArtificialIntelligenceAccess.length; iiiii++)
                {
                    if (ArtificialIntelligenceAccess[iiiii].radProof != true)
                    {
                        var pluyaDista = (ArtificialIntelligenceAccess[iiiii].X - this.X) * (ArtificialIntelligenceAccess[iiiii].X - this.X) + (ArtificialIntelligenceAccess[iiiii].Y - this.Y) * (ArtificialIntelligenceAccess[iiiii].Y - this.Y);
                        if (pluyaDista <= (53 * 53))
                        {
                            ArtificialIntelligenceAccess[iiiii].radiation += 0.05;
                        }
                    }
                }
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13; // at max, buy for 13.
            this.sellValue = 13; // at max, sell for 13.
        }
        else if (this.type == "copperOre")
        {
            //For All Items
            this.identity = "Copper Ore";
            this.weight = 3.2;
            this.size = 7;
            this.description = "A lump of unrefined copper.";
            this.intForDes = 25;
            this.intDescription = "Copper is used to construct leading edge technology; it is highly conductive.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 25); // at max, buy for 11.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
        }
        else if (this.type == "copper")
        {
            //For All Items
            this.identity = "Copper";
            this.weight = 3.5;
            this.size = 13;
            this.description = "Pure, refined copper.";
            this.intForDes = 25;
            this.intDescription = "Copper is used to construct leading edge technology; it is highly conductive.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 10;
            this.ingredients = [["Copper Ore", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 23 - Math.floor(player.getCharisma() / 10); // at max, buy for 18.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 15); // at max, sell for 18.
        }
        else if (this.type == "copperWire")
        {
            //For All Items
            this.identity = "Copper Wire";
            this.weight = 0.9;
            this.size = 10;
            this.description = "Wire made from refined copper.";
            this.intForDes = 9;
            this.intDescription = "Copper wire conducts electricity well, and can be used in various technilogical applications.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 13;
            this.ingredients = [["Copper", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
        }
        else if (this.type == "copperDust")
        {
            //For All Items
            this.identity = "Copper Dust";
            this.weight = 1.8;
            this.size = 10;
            this.description = "Copper pulverized into a fine metallic dust.";
            this.intForDes = 9;
            this.intDescription = "This acts as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 16;
            this.ingredients = [["Copper", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 50); // at max, buy for 15.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 12); // at max, sell for 15.
        }
        else if (this.type == "coal")
        {
            //For All Items
            this.identity = "Coal";
            this.weight = 1.2;
            this.size = 7;
            this.description = "A chunk of coal.";
            this.intForDes = 10;
            this.intDescription = "Coal is used in the forging of steel, but it also has other uses as both a fuel source and an alchemic ingredient.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "emerald")
        {
            //For All Items
            this.identity = "Emerald";
            this.weight = 0.3;
            this.size = 7;
            this.description = "A greatly valued grandiose green gem stone.";
            this.intForDes = 18;
            this.intDescription = "Emerald is an an imperfection in the mineral beryl that is extremely rare; emeralds are though to bring insight and clarity to the beholder.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 500; // at max, buy for 500.
            this.sellValue = 400 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 500.
        }
        else if (this.type == "turquoise")
        {
            //For All Items
            this.identity = "Turquoise";
            this.weight = 1;
            this.size = 7;
            this.description = "A beautiful waxy blue mineral.";
            this.intForDes = 6;

            if (player.getIntelligence() >= 18)
            {
                this.intDescription = "Turquoise is used to make jewelry, particularly in Freydic culture. It is also said to offer protection from evil spirits.";
            }
            else
            {
                this.intDescription = "Turquoise is used to make jewelry, particularly in Freydic culture.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 8); // at max, buy for 12.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 25); // at max, sell for 12.
        }
        else if (this.type == "aquamarine")
        {
            //For All Items
            this.identity = "Aquamarine";
            this.weight = 0.25;
            this.size = 7;
            this.description = "The extravagant blues of the ocean trapped in a vibrant gem stone.";
            this.intForDes = 18;
            this.intDescription = "Aquamarine is a blue form of the mineral beryl. It is thought to purify, cleanse and bring about a state of tranquility in its bearer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 400; // at max, buy for 400.
            this.sellValue = 350 + Math.floor(player.getCharisma() / 1); // at max, sell for 400.
        }
        else if (this.type == "ruby")
        {
            //For All Items
            this.identity = "Ruby";
            this.weight = 0.55;
            this.size = 7;
            this.description = "A magnificent and rare gemstone shining a rich shade of blazing red.";
            this.intForDes = 18;
            this.intDescription = "Ruby is a red variety of the mineral corundum, it is highly valued and is believed to enhance the effects of magics.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 390; // at max, buy for 390.
            this.sellValue = 340 + Math.floor(player.getCharisma() / 1); // at max, sell for 390.
        }
        else if (this.type == "sapphire")
        {
            //For All Items
            this.identity = "Sapphire";
            this.weight = 2;
            this.size = 7;
            this.description = "A magnificent and rare gemstone that gleems a deep shade of blue.";
            this.intForDes = 18;
            this.intDescription = "Sapphire is a non-red variety of the mineral corundum, it is highly valued and is believed to enable certain magics.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 210; // at max, buy for 210.
            this.sellValue = 160 + Math.floor(player.getCharisma() / 1); // at max, sell for 210.
        }
        else if (this.type == "rawSilver")
        {
            //For All Items
            this.identity = "Raw Silver";
            this.weight = 2;
            this.size = 7;
            this.description = "A piece of unrefined silver.";
            this.intForDes = 3;
            this.intDescription = "Silver is a highly valued mineral that is used in many fine creations as well as in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 82 - Math.floor(player.getCharisma() / 8); // at max, buy for 76.
            this.sellValue = 61 + Math.floor(player.getCharisma() / 3); // at max, sell for 76.
        }
        else if (this.type == "silver")
        {
            //For All Items
            this.identity = "Silver";
            this.weight = 4;
            this.size = 10;
            this.description = "A forged bar of silver.";
            this.intForDes = 2;
            this.intDescription = "Silver is a highly valued mineral that is used in many fine creations as well as in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 21;
            this.ingredients = [["Raw Silver", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 226 - Math.floor(player.getCharisma() / 8); // at max, buy for 220.
            this.sellValue = 200 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 220.
        }
        else if (this.type == "silverStake")
        {
            //For All Items
            this.identity = "Silver Stake";
            this.weight = 1.3;
            this.size = 10;
            this.description = "A sharpened stake made of silver.";
            this.intForDes = 33;
            this.intDescription = "A stake of silver is one of the few weapons that can be used to kill a vampire.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 28;
            this.ingredients = [["Silver", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100 - Math.floor(player.getCharisma() / 5); // at max, buy for 90.
            this.sellValue = 75 + Math.floor(player.getCharisma() / 3); // at max, sell for 90.
        }
        else if (this.type == "jvostranOre")
        {
            //For All Items
            this.identity = "Jvostran Ore";
            this.weight = 5;
            this.size = 10;
            this.description = "Jvostran diluted with other unimportant minerals.";
            this.intForDes = 25;
            this.intDescription = "Jvostran must be doubly purified in order to produce the famous metal it is commonly known for.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 150 - Math.floor(player.getCharisma() / 2); // at max, buy for 125.
            this.sellValue = 100 + Math.floor(player.getCharisma() / 2); // at max, sell for 125.
        }
        else if (this.type == "pureJvostranOre")
        {
            //For All Items
            this.identity = "Pure Jvostran Ore";
            this.weight = 8;
            this.size = 10;
            this.description = "Purified jvostran ore.";
            this.intForDes = 25;
            this.intDescription = "At this stage the jvostran still needs to be purified once more to be ready for use.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Jvostran Ore", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 325 - Math.floor(player.getCharisma() / 1); // at max, buy for 275.
            this.sellValue = 250 + Math.floor(player.getCharisma() / 2); // at max, sell for 275.
        }
        else if (this.type == "jvostran")
        {
            //For All Items
            this.identity = "Jvostran";
            this.weight = 15;
            this.size = 10;
            this.description = "A forged jvostran bar.";
            this.intForDes = 25;
            this.intDescription = "Jvostran is the most powerful non-magical metalic substance in known existence.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 43;
            this.ingredients = [["Pure Jvostran Ore", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 750 - Math.floor(player.getCharisma() / 1); // at max, buy for 700.
            this.sellValue = 600 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 700.
        }
        else if (this.type == "nechroviteOre")
        {
            //For All Items
            this.identity = "Nechrovite Ore";
            this.weight = 6;
            this.size = 7;
            this.description = "A chunk of nechrovite ore.";
            this.intForDes = 10;
            this.intDescription = "Nechrovite is a sturdy Vardanian metal that is slightly stronger than steel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 62 - Math.floor(player.getCharisma() / 5); // at max, buy for 52.
            this.sellValue = 37 + Math.floor(player.getCharisma() / 3); // at max, sell for 52.
        }
        else if (this.type == "nechrovite")
        {
            //For All Items
            this.identity = "Nechrovite";
            this.weight = 11.8;
            this.size = 9;
            this.description = "A forged bar of shimmering black metal.";
            this.intForDes = 10;
            this.intDescription = "Nechrovite is a sturdy Vardanian metal that is slightly stronger than steel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 30;
            this.ingredients = [["Nechrovite Ore", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 88 - Math.floor(player.getCharisma() / 3); // at max, buy for 73.
            this.sellValue = 58 + Math.floor(player.getCharisma() / 3); // at max, sell for 73.
        }
        else if (this.type == "rawGold")
        {
            //For All Items
            this.identity = "Raw Gold";
            this.weight = 12;
            this.size = 7;
            this.description = "A piece of unrefined gold.";
            this.intForDes = 1;
            this.intDescription = "Gold is one of the most prized minerals in the lands.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250; // at max, buy for 250.
            this.sellValue = 200 + Math.floor(player.getCharisma() / 1); // at max, sell for 250.
        }
        else if (this.type == "gold")
        {
            //For All Items
            this.identity = "Gold";
            this.weight = 25;
            this.size = 10;
            this.description = "A forged bar of gold.";
            this.intForDes = 0;
            this.intDescription = "Gold is one of the most prized minerals in the lands.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Raw Gold", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 600; // at max, buy for 600.
            this.sellValue = 550 + Math.floor(player.getCharisma() / 1); // at max, sell for 600.
        }
        else if (this.type == "ironOre")
        {
            //For All Items
            this.identity = "Iron Ore";
            this.weight = 2;
            this.size = 10;
            this.description = "Iron mixed with other less important minerals.";
            this.intForDes = 2;
            this.intDescription = "Iron is an important raw material used in the crafting of many different weapons and armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "iron")
        {
            //For All Items
            this.identity = "Iron";
            this.weight = 4;
            this.size = 10;
            this.description = "A forged iron bar.";
            this.intForDes = 2;
            this.intDescription = "This is an important raw material used in the crafting of many different weapons and armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Iron Ore", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "steel") //realsteel
        {
            //For All Items
            this.identity = "Steel";
            this.weight = 4;
            this.size = 10;
            this.description = "A forged steel bar.";
            this.intForDes = 2;
            this.intDescription = "This is an important raw material used in the crafting of many different weapons and armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Iron", 1], ["Coal", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 5); // at max, sell for 25.
        }
        else if (this.type == "twiceForgedSteel") //real steel
        {
            //For All Items
            this.identity = "Twice Forged Steel";
            this.weight = 4;
            this.size = 10;
            this.description = "A twice forged steel bar.";
            this.intForDes = 2;
            this.intDescription = "Steel that has been refined using ancient techniques.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35 - Math.floor(player.getCharisma() / 10); // at max, buy for 30.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 5); // at max, sell for 30.
        }
        else if (this.type == "thriceForgedSteel") //realSteel
        {
            //For All Items
            this.identity = "Thrice Forged Steel";
            this.weight = 4;
            this.size = 10;
            this.description = "A thrice forged steel bar.";
            this.intForDes = 2;
            this.intDescription = "Steel that has been refined to perfection using ancient techniques.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Twice Forged Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopID == "Svehn the Smith")
            {
                this.buyValue = 75 - Math.floor(player.getCharisma() / 10); // at max, buy for 65.
                this.sellValue = 50 + Math.floor(player.getCharisma() / 5); // at max, sell for 60.
            }
            else
            {
                this.buyValue = 55 - Math.floor(player.getCharisma() / 10); // at max, buy for 50.
                this.sellValue = 40 + Math.floor(player.getCharisma() / 5); // at max, sell for 50.
            }
        }
        else if (this.type == "spiritTalisman")
        {
            //For All Items
            this.identity = "Talisman of the Eternal Spirit";
            this.weight = 25;
            this.size = 15;
            this.description = "A religious artifact for the worship of the eternal spirit.";
            this.intForDes = 0;
            this.intDescription = "It is thought to channel the eternal spirits essences in a more focused way allowing for more direct communication.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 39;
            this.ingredients = [["Gold", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 800; // at max, buy for 600.
            this.sellValue = 750 + Math.floor(player.getCharisma() / 1); // at max, sell for 800.
        }
        else if (this.type == "elderWalrusTusks")
        {
            //For All Items
            this.identity = "Elder Walrus Tusks";
            this.weight = 7;
            this.size = 20;
            this.description = "The tusks of an elder walrus.";
            this.intForDes = 16;
            this.intDescription = "Elder Walrus tusks can sell for up to 37 coins and can be used to make specialized Freydic weapons and armour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 59 - Math.floor(player.getCharisma() / 3); // at max, buy for 40.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 3); // at max, sell for 37.
        }
        else if (this.type == "walrusHide")
        {
            //For All Items
            this.identity = "Walrus Hide";
            this.weight = 14;
            this.size = 35;
            this.description = "The hide of a walrus.";
            this.intForDes = 15;
            this.intDescription = "Walrus hide is particularly thick and can be made into a number of different items!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 12.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
        }
        else if (this.type == "sealSkin")
        {
            //For All Items
            this.identity = "Seal Skin";
            this.weight = 2.5;
            this.size = 24;
            this.description = "The thick skin of a seal.";
            this.intForDes = 3;
            this.intDescription = "Seal skin can be made into clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Baby Seal Skin", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "babySealSkin")
        {
            //For All Items
            this.identity = "Baby Seal Skin";
            this.weight = 1.25;
            this.size = 13;
            this.description = "The thick skin of a baby seal.";
            this.intForDes = 2;
            this.intDescription = "Sew together two baby seal skins to make one larger one.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "cloimidPearl")
        {
            //For All Items
            this.identity = "Cloimid Pearl";
            this.weight = 10;
            this.size = 10;
            this.description = "A smooth, glistening, orange sphere.";
            this.intForDes = 15;
            this.intDescription = "Some large chunk of non-dissolvable material got stuck in the cloimid and became coated with layer after layer of mother of pearl.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2000 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1900.
            this.sellValue = 1700 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1900.
        }
        else if (this.type == "blinkOrb")
        {
            //For All Items
            this.identity = "Blink Orb";
            this.weight = 5;
            this.size = 10;
            this.description = "A small black orb that buzzes with a low magical hum.";
            this.intForDes = 5;
            this.intDescription = "Using this orb allows you to teleport at a short range if the user has 2+ eminence.";

            //Define Utility
            this.utility = "trinket";

            //ability
            if (player.getEminence() >= 2)
            {
                this.ability = "blinkOrb";
            }
            else
            {
                this.ability = "none";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 200 - Math.floor(player.getCharisma() / 1); // at max, buy for 150.
            this.sellValue = 50 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 150.
        }
        else if (this.type == "wool")
        {
            //For All Items
            this.identity = "Wool";
            this.weight = 1.5;
            this.size = 9;
            this.description = "A fluffy bunch of woolen fleece.";
            this.intForDes = 15;
            this.intDescription = "It is thick, soft, and very fluffy! Wool is used to make extremely warm northern clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "vomit")
        {
            //For All Items
            this.identity = "Vomit";
            this.weight = 1;
            this.size = 17;
            this.description = "This is well, vomit... Maybe I shouldn't be carrying this.";
            this.intForDes = 4;
            this.intDescription = "Vomiting usually occurs when a disease or poison affects hunger. A massive loss of hunger usually accompanies vomiting.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "bloodyVomit")
        {
            //For All Items
            this.identity = "Bloody Vomit";
            this.weight = 4;
            this.size = 18;
            this.description = "This is bloody vomit... Why am I carrying this!?";
            this.intForDes = 5;
            this.intDescription = "Bloody vomiting usually occurs when one has a horrible illness, or parasitic infection.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "adolfsNewSword")
        {
            //For All Items
            this.identity = "Adolf's New Sword";
            this.weight = 3;
            this.size = 30;
            this.description = "A brand new longsword made for a man named Adolf who is a pit fighter.";
            this.intForDes = 8;
            this.intDescription = "The sword is forged from good thengan steel.";

            //Define Utility
            this.utility = "questItem";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 4); // at max, buy for 18.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "desertLizardSml")
        {
            //For All Items
            this.identity = "Desert Lizard";
            this.weight = 1.75;
            this.size = 10;
            this.description = "A desert lizard.";
            this.intForDes = 5;
            this.intDescription = "There are diseases that will make you feel very ill if you eat this without cooking it first.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "roastedDesertLizardSml")
        {
            //For All Items
            this.identity = "Roasted Desert Lizard";
            this.weight = 1.5;
            this.size = 10;
            this.description = "A roasted desert lizard.";
            this.intForDes = 0;
            this.intDescription = "It tastes good but it's a bit crunchy...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Desert Lizard", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "desertLizardLrg")
        {
            //For All Items
            this.identity = "Large Desert Lizard";
            this.weight = 4.5;
            this.size = 14;
            this.description = "A large desert lizard.";
            this.intForDes = 5;
            this.intDescription = "There are diseases that will make you feel very ill if you eat this without cooking it first.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0.75; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "roastedDesertLizardLrg")
        {
            //For All Items
            this.identity = "Large Roasted Desert Lizard";
            this.weight = 4;
            this.size = 14;
            this.description = "A large roasted desert lizard.";
            this.intForDes = 0;
            this.intDescription = "It tastes good but it's a bit crunchy...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Large Desert Lizard", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "rawXerocoleFlesh")
        {
            //For All Items
            this.identity = "Raw Xerocole Belly";
            this.weight = 5.5;
            this.size = 12;
            this.description = "The raw belly cut from a xerocole.";
            this.intForDes = 4;
            this.intDescription = "Eating this raw may infect you with gut worms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "xerocoleMeat")
        {
            //For All Items
            this.identity = "Xerocole Belly Roast";
            this.weight = 5;
            this.size = 12;
            this.description = "The roasted belly cut of meat from a xerocole.";
            this.intForDes = 0;
            this.intDescription = "The belly roast is fatty, tender, and has a rich flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 10; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0.15; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Xerocole Belly", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 18; // at max, sell for 18.
        }
        else if (this.type == "rawXerocoleRibs")
        {
            //For All Items
            this.identity = "Raw Xerocole Ribs";
            this.weight = 7;
            this.size = 12;
            this.description = "The raw ribs cut from a xerocole.";
            this.intForDes = 4;
            this.intDescription = "Eating this raw may infect you with gut worms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "xerocoleRibs")
        {
            //For All Items
            this.identity = "Xerocole Ribs";
            this.weight = 6.5;
            this.size = 12;
            this.description = "The roasted ribs of a xerocole.";
            this.intForDes = 0;
            this.intDescription = "The juicy, and meaty ribs are so tender that the meat barely clings to the bones.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 22; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 18; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 24;
            this.ingredients = [["Raw Xerocole Ribs", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25; // at max, buy for 25.
            this.sellValue = 25; // at max, sell for 25.
        }
        else if (this.type == "rawBarbolFlesh")
        {
            //For All Items
            this.identity = "Raw Barbol Flesh";
            this.weight = 2.3;
            this.size = 12;
            this.description = "The raw flesh of a barbol.";
            this.intForDes = 6;
            this.intDescription = "Eating barbol flesh raw is unsanitary and may result in a flesh mites infection.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "barbolMeat")
        {
            //For All Items
            this.identity = "Barbol Meat";
            this.weight = 2.3;
            this.size = 12;
            this.description = "The cooked meat of a barbol.";
            this.intForDes = 0;
            this.intDescription = "Barbol meat is tough and mostly bland, but with a sort of distinct aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Barbol Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "brokenHyelingCleaver")
        {
            //For All Items
            this.identity = "Shattered Hyeling Cleaver";
            this.weight = 1.5;
            this.size = 10;
            this.description = "A cleaver once made from hyeling claws now broken in several shards.";
            this.intForDes = 1;
            this.intDescription = "Clearly this cleaver was not of very high quality, if it was it wouldn't have broken...";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "hyelingClaws")
        {
            //For All Items
            this.identity = "Hyeling Claws";
            this.weight = 0.3;
            this.size = 5;
            this.description = "The sharp light blue claws of a hyeling.";
            this.intForDes = 3;
            this.intDescription = "Hyelings shed their claws and often use them for forging weapons.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "rawHyelingFlesh")
        {
            //For All Items
            this.identity = "Raw Hyeling Flesh";
            this.weight = 1.2;
            this.size = 7;
            this.description = "The raw flesh of a hyeling.";
            this.intForDes = 29;
            this.intDescription = "A substance in the blood seems to prevent any freezing of the flesh by cold weather conditions.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.25; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = -2; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 15); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "hyelingMeat")
        {
            //For All Items
            this.identity = "Hyeling Meat";
            this.weight = 1.15;
            this.size = 18;
            this.description = "The cooked meat of a Hyeling.";
            this.intForDes = 6;
            this.intDescription = "Cooked hyeling meat is completely safe to eat, but it doesn't taste particularly good.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Hyeling Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawHyenaFlesh")
        {
            //For All Items
            this.identity = "Raw Hyena Flesh";
            this.weight = 1.5;
            this.size = 10;
            this.description = "The raw flesh of a spotted hyena.";
            this.intForDes = 5;
            this.intDescription = "Hyenas are a feliform animal that are distinct from both felines and canines. Their flesh, though not safe to eat raw, is used in alchemy as a former.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.1; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite" || shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 2; // at max, buy for 2.
                    this.sellValue = 2; // at max, sell for 2.
                }
                else
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 1; // at max, sell for 1.
                }
            }
            else
            {
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
        }
        else if (this.type == "hyenaMeat")
        {
            //For All Items
            this.identity = "Hyena Meat";
            this.weight = 1.5;
            this.size = 10;
            this.description = "The cooked flesh of a spotted hyena.";
            this.intForDes = 0;

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.

            this.intDescription = "Hyena flesh tastes funky and stringy with an offputting odor like boiled rotten flesh.";
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Hyena Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawDogFlesh")
        {
            //For All Items
            this.identity = "Raw Dog Flesh";
            this.weight = 0.9;
            this.size = 9;
            this.description = "The raw flesh of a dog.";
            this.intForDes = 0;
            this.intDescription = "Dog flesh often has gut worms in it in its raw form.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite" || shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 1; // at max, buy for 1.
                    this.sellValue = 1; // at max, sell for 1.
                }
                else
                {
                    this.buyValue = 0; // at max, buy for 0.
                    this.sellValue = 0; // at max, sell for 0.
                }
            }
            else
            {
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "rawGiraffeFlesh")
        {
            //For All Items
            this.identity = "Raw Giraffe Flesh";
            this.weight = 6;
            this.size = 15;
            this.description = "The raw flesh of a giraffe.";
            this.intForDes = 3;
            this.intDescription = "Cooking with giraffe flesh is classic in Cephrian cooking.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite" || shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 10; // at max, buy for 10.
                    this.sellValue = 10; // at max, sell for 10.
                }
                else
                {
                    this.buyValue = 2; // at max, buy for 2.
                    this.sellValue = 1; // at max, sell for 1.
                }
            }
            else
            {
                this.buyValue = 2; // at max, buy for 2.
                this.sellValue = 1; // at max, sell for 1.
            }
        }
        else if (this.type == "giraffeMeat")
        {
            //For All Items
            this.identity = "Giraffe Meat";
            this.weight = 6;
            this.size = 15;
            this.description = "The tender, slowcooked meat of a giraffe.";
            this.intForDes = 0;
            this.intDescription = "It tastes gamey and has a poignant savoury flavour that bounces onto your palate.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.raceName == "Cephrite")
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 20; //satisfies hunger.
                this.thirst = 2; //quenches thirst.
                this.warmth = 10; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = 0.1; //restores will.

                //ability
                this.ability = "satiation";

                //Crafting
                this.yield = 1;
                this.intForCraft = 19;
                this.ingredients = [["Raw Giraffe Flesh", 1]];
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 16; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 8; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.05; //recoops lost energy.
                this.replenish = 0.05; //restores will.

                //ability
                this.ability = "satiation";

                //Crafting
                this.yield = 1;
                this.intForCraft = 26;
                this.ingredients = [["Raw Giraffe Flesh", 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite" || shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 30; // at max, buy for 30.
                    this.sellValue = 30; // at max, sell for 30.
                }
                else
                {
                    this.buyValue = 23 - Math.floor(player.getCharisma() / 15); // at max, buy for 20.
                    this.sellValue = 15 + Math.floor(player.getCharisma() / 10); // at max, sell for 20.
                }
            }
            else
            {
                this.buyValue = 23 - Math.floor(player.getCharisma() / 15); // at max, buy for 20.
                this.sellValue = 15 + Math.floor(player.getCharisma() / 10); // at max, sell for 20.
            }
        }
        else if (this.type == "dogMeat")
        {
            //For All Items
            this.identity = "Dog Meat";
            this.weight = 0.9;
            this.size = 9;
            this.description = "The cooked meat of a dog.";
            this.intForDes = 0;
            this.intDescription = "Dog meat actually tastes pretty good, but most cultures aside from Cephrite don't approve of eating it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Raw Dog Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Cephrite" || shopkeeper.ultra.race == "Cephrite")
                {
                    this.buyValue = 6; // at max, buy for 6.
                    this.sellValue = 5; // at max, sell for 5.
                }
                else
                {
                    this.buyValue = 0; // at max, buy for 0.
                    this.sellValue = 0; // at max, sell for 0.
                }
            }
            else
            {
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "rawTermiteFlesh")
        {
            //For All Items
            this.identity = "Raw Killer Termite Flesh";
            this.weight = 0.4;
            this.size = 7;
            this.description = "The raw flesh of a killer termite.";
            this.intForDes = 9;
            this.intDescription = "It is completely safe to eat raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "termiteMeat")
        {
            //For All Items
            this.identity = "Killer Termite Meat";
            this.weight = 0.4;
            this.size = 7;
            this.description = "The cooked meat of a killer termite.";
            this.intForDes = 0;
            this.intDescription = "It has a smooth, tender texture with a mildly meaty and sort of buggy flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Killer Termite Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "wholeRoastedTermite")
        {
            //For All Items
            this.identity = "Whole Roasted Killer Termite";
            this.weight = 13.5;
            this.size = 20;
            this.description = "A whole giant killer termite roasted in its shell with onions, zaf spice, and saffron.";
            this.intForDes = 0;
            this.intDescription = "The meat is moist, tender and has a smooth texture; it has soft meaty spicy flavour with a buggy aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 29; //satisfies hunger.
            this.thirst = 4.5; //quenches thirst.
            this.warmth = 11; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            if (player.raceName == "Cephrite")
            {
                this.ability = "satiation";
            }
            else
            {
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Raw Killer Termite Flesh", 10], ["Chopped Onion", 1], ["Saffron", 1], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28; // at max, buy for 28.
            this.sellValue = 28; // at max, sell for 28.
        }
        else if (this.type == "wholeStuffedTermite")
        {
            //For All Items
            this.identity = "Stuffed Whole Killer Termite";
            this.weight = 14;
            this.size = 20;
            this.description = "A whole giant killer termite stuffed with eggplant, onions, zaf spice, saffron, and marinated termite meat.";
            this.intForDes = 0;
            this.intDescription = "The meat is moist, tender and has a smooth texture; it has soft meaty spicy flavour with a buggy aftertaste.";
            this.smallText = true;

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 33; //satisfies hunger.
            this.thirst = 5; //quenches thirst.
            this.warmth = 12; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            if (player.raceName == "Cephrite")
            {
                this.ability = "satiation";
            }
            else
            {
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Raw Killer Termite Flesh", 11], ["Chopped Eggplant", 2], ["Chopped Onion", 2], ["Saffron", 1], ["Zaf Beetle Whiskers", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35; // at max, buy for 35.
            this.sellValue = 35; // at max, sell for 35.
        }
        else if (this.type == "gnollIntestines")
        {
            //For All Items
            this.identity = "Gnoll Intestines";
            this.weight = 2.3;
            this.size = 12;
            this.description = "The rank and terrible smelling, dripping intestines of a gnoll.";
            this.intForDes = 3;
            this.intDescription = "Eating gnoll intestines is a disgusting notion first of all, and second of all they have gut worms...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -10; //recoops lost energy.
            this.replenish = -4; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "roastedGnollIntestines")
        {
            //For All Items
            this.identity = "Roasted Gnoll Intestines";
            this.weight = 2.1;
            this.size = 12;
            this.description = "The cleaned and drained roasted intestines of a gnoll.";
            this.intForDes = 0;
            this.intDescription = "They are smelly and meaty and a bit bitter, but they are nutritionally good for you...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 8; //warms player.
            this.heal = 0.05; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "exp+5";

            //Crafting
            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Gnoll Intestines", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "wholeRoastedKol")
        {
            //For All Items
            this.identity = "Whole Roasted Kol";
            this.weight = 55;
            this.size = 32;
            this.description = "A whole roasted kol served over a bed of onions and seasoned thoroughly with zaf spice and saffron.";
            this.intForDes = 0;
            this.intDescription = "The meat is super fatty, fairly meaty, and spicy with an insecty aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 50; //satisfies hunger.
            this.thirst = 7; //quenches thirst.
            this.warmth = 17; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.35; //recoops lost energy.
            this.replenish = 0.15; //restores will.

            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Raw Kol Flesh", 8], ["Chopped Onion", 3], ["Saffron", 1], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 75; // at max, buy for 75.
            this.sellValue = 75; // at max, sell for 75.
        }
        else if (this.type == "fermentedTermite")
        {
            //For All Items
            this.identity = "Fermented Killer Termite Meat";
            this.weight = 0.4;
            this.size = 7;
            this.description = "The fermented flesh of a killer termite.";
            this.intForDes = 0;
            this.intDescription = "It has a smooth meaty sour flavour with a prickly buggy aftertaste. Eat enough and you may get intoxicated.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = -1; //restores will.
            this.alcohol = 8; //intoxicates the mind.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Raw Killer Termite Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "spicedFermentedTermite")
        {
            //For All Items
            this.identity = "Spiced Fermented Killer Termite Meat";
            this.weight = 0.4;
            this.size = 7;
            this.description = "The fermented flesh of a killer termite heavily spiced with zaf spice.";
            this.intForDes = 0;
            this.intDescription = "It has a meaty sour flavour with a prickly buggy aftertaste. It is extremely spicy and sort of alcoholic!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = -1; //restores will.
            this.alcohol = 9; //intoxicates the mind.

            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "none";
            }
            else
            {
                this.intDescription = "It has a meaty sour flavour with a prickly buggy aftertaste. It is way too spicy for you to handle...";
                this.heal = -2; //heals health.
                this.generation = -5; //recoops lost energy.
                this.replenish = -3; //restores will.
                this.ability = "foodPoisoning";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Fermented Killer Termite Meat", 1], ["Zaf Beetle Whiskers", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "stuffedOnion")
        {
            //For All Items
            this.identity = "Stuffed Roasted Onion";
            this.weight = 1.85;
            this.size = 13;
            this.description = "An onion stuffed with chopped and seasoned kol meat that is roasted thoroughly.";
            this.intForDes = 0;
            this.intDescription = "It is sweet spicy, meaty, saffron-y, and fatty; it has an insecty aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10.5; //satisfies hunger.
            this.thirst = 0.55; //quenches thirst.
            this.warmth = 6.5; //warms player.
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.heal = 0; //heals health.this.ability = "satiation";
            }
            else
            {
                this.heal = -0.15; //heals health.this.ability = "none";
            }
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 11;
            this.ingredients = [["Onion", 3], ["Raw Kol Flesh", 1], ["Saffron", 1], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 15); // at max, buy for 10
            this.sellValue = 7 + Math.floor(player.getCharisma() / 15); // at max, sell for 10.
        }
        else if (this.type == "stuffedEggplant")
        {
            //For All Items
            this.identity = "Stuffed Eggplant";
            this.weight = 4.25;
            this.size = 15;
            this.description = "A whole roasted eggplant stuffed with giraffe meat, chopped onion, and artichoke. It is seasoned with zaf spice and saffron.";
            this.intForDes = 0;
            this.intDescription = "It has a rich poignant spicy flavour with a slightly insecty aftertaste; it is very tender.";
            this.smallText = true;

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 32; //satisfies hunger.
            this.thirst = 2.75; //quenches thirst.
            this.warmth = 14; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.ability = "none";
            }


            //Crafting
            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Eggplant", 1], ["Raw Giraffe Flesh", 1], ["Chopped Onion", 1], ["Artichoke", 1], ["Saffron", 1], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 48 - Math.floor(player.getCharisma() / 10); // at max, buy for 43
            this.sellValue = 43; // at max, sell for 43.
        }
        else if (this.type == "artichokePlatter")
        {
            //For All Items
            this.identity = "Artichoke with Spiced Kwom Sauce";
            this.weight = 1.45;
            this.size = 13;
            this.description = "Steamed Artichoke drizzled with a very sour and spicy sauce.";
            if (player.raceName == "Cephrite")
            {
                this.intForDes = 0;
            }
            else
            {
                this.intForDes = 4;
            }
            this.intDescription = "This is eaten as a side dish in Cephrite, it is not meant to be the main course.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 16; //satisfies hunger.
            this.thirst = 2.75; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "none";
            }
            else
            {
                this.intForDes = 0;
                this.intDescription = "This dish is too spicy for you to handle...";
                this.heal = -2; //heals health.
                this.generation = -5; //recoops lost energy.
                this.replenish = -3; //restores will.
                this.ability = "foodPoisoning";
            }

            //Crafting
            this.yield = 5;
            this.intForCraft = 8;
            this.ingredients = [["Steamed Artichoke", 5], ["Kwom", 1], ["Zaf Beetle Whiskers", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "suuliMelon")
        {
            //For All Items
            this.identity = "Suuli Melon";
            this.weight = 0.1;
            this.size = 13;
            this.description = "A green striped melon native to the more northern climates.";
            this.intForDes = 2;
            this.intDescription = "Although this type of melon grows in cold climates it can not survive the snowy tundras of the far north.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 12; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 10); // at max, buy for 19.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 5); // at max, sell for 19.
        }
        else if (this.type == "suuliMelonSlice")
        {
            //For All Items
            this.identity = "Suuli Melon Slice";
            this.weight = 0.1;
            this.size = 13;
            this.description = "A slice of suuli melon; it has a light green colour and is incredibly juicy and sweet.";
            this.intForDes = 2;
            this.intDescription = "Shops prefer to buy melons whole rather than cut up.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 2;
            this.ingredients = [["Suuli Melon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "wobeaFruit")
        {
            //For All Items
            this.identity = "Wobea";
            this.weight = 1.3;
            this.size = 13;
            this.description = "The tender pinkish orange jello-like fruit inside can be slurped out if you puncture the wobea fruit's shell.";
            this.intForDes = 5;
            this.intDescription = "Wobea fruit can be used during surgery as a form of anesthesia.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = -3; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = -15.5; //recoops lost energy.
            this.replenish = 0.75; //restores will.
            this.wake = -3; //awakens player.

            //ability
            this.ability = "wobeaNumbII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 8); // at max, sell for 9.
        }
        else if (this.type == "wobeaSlice")
        {
            //For All Items
            this.identity = "Wobea Slice";
            this.weight = 0.1;
            this.size = 13;
            this.description = "A slice of wobea fruit; it has a light orangish pink colour and is numbs your entire body after you bite into it.";
            this.intForDes = 0;
            this.intDescription = "It tastes salty and mildly bitter, it is tender and soft with a fluid jello-like wigglyness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = -1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0.25; //restores will.
            this.wake = -1; //awakens player.

            //ability
            this.ability = "wobeaNumbI";

            //Crafting
            this.yield = 3;
            this.intForCraft = 1;
            this.ingredients = [["Wobea", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "naapricha")
        {
            //For All Items
            this.identity = "Wheel of Naapricha Cheese";
            this.weight = 4;
            this.size = 15;
            this.description = "Cheese made from naaprid milk.";
            this.intForDes = 0;
            this.intDescription = "It is a mild and creamy cheese with a hint of nuttiness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 40; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 22;
            this.ingredients = [["Bucket of Naaprid Milk", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 3); // at max, buy for 40.
            this.sellValue = 32 + Math.floor(player.getCharisma() / 6); // at max, sell for 40.
        }
        else if (this.type == "naaprichaWedge")
        {
            //For All Items
            this.identity = "Wedge of Naapricha Cheese";
            this.weight = 0.5;
            this.size = 15;
            this.description = "A portion of naapricha cheese.";
            this.intForDes = 0;
            this.intDescription = "It is a mild and creamy cheese with a hint of nuttiness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 8;
            this.intForCraft = 0;
            this.ingredients = [["Wheel of Naapricha Cheese", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
        }
        else if (this.type == "termiteWings")
        {
            //For All Items
            this.identity = "Killer Termite Wings";
            this.weight = 0.08;
            this.size = 12;
            this.description = "The thin glossy wings of a killer termite.";
            this.intForDes = 11;
            this.intDescription = "Termite wings are not particularly useful for anything.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "cattail")
        {
            //For All Items
            this.identity = "Cattails";
            this.weight = 0.33;
            this.size = 9;
            this.description = "Cattails grow in the Vardanian Swamplands, and serve in part to filter the water.";
            this.intForDes = 9;
            this.intDescription = "Cattails can be used in certain herbal remedies.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "swampLily")
        {
            //For All Items
            this.identity = "Swamp Lily";
            this.weight = 0.12;
            this.size = 9;
            this.description = "Swamp Lilies grow from the lilypads in the Vardanian Swamplands.";
            this.intForDes = 9;
            this.intDescription = "Aside from being stunning in appearance, they are also a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "carrot")
        {
            //For All Items
            this.identity = "Carrot";
            this.weight = 0.1;
            this.size = 9;
            this.description = "A ripe orange carrot.";
            this.intForDes = 5;
            this.intDescription = "Carrots can be used in some recipes to create more complex dishes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            if (player.gamemode == "protagonist")
            {
                this.description = "Carrots contain the ancient souls of your predecessors.";
                this.intForDes = 0;
                this.intDescription = "You are the Carrotborn!! To eat a carrot is to call upon the talent and wisdom of those who have been carrotborn before you.";
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1000; //satisfies hunger.
                this.thirst = 1000; //quenches thirst.
                this.warmth = 1000; //warms player.
                this.heal = 1000; //heals health.
                this.generation = 1000; //recoops lost energy.
                this.replenish = 1000; //restores will.

                //ability
                this.ability = "soul";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 10; // at max, sell for 10.
            }
            else
            {
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1.5; //satisfies hunger.
                this.thirst = 0.1; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -0.2; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2; // at max, buy for 2.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
        }
        else if (this.type == "cabbage")
        {
            //For All Items
            this.identity = "Cabbage";
            this.weight = 1.1;
            this.size = 9;
            this.description = "A ball of tightly encircled green leaves.";
            this.intForDes = 0;
            this.intDescription = "The leaves are somewhat crunchy to eat raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "yumNotYuk";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "borsht")
        {
            //For All Items
            this.identity = "Borsht";
            this.weight = 0.7;
            this.size = 9;
            this.description = "A red tuber that grows in the Vardanian Swamplands.";
            this.intForDes = 6;
            this.intDescription = "It takes the nutrients it needs to survive from the water; It can be roasted.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.2; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "roastedBorsht")
        {
            //For All Items
            this.identity = "Roasted Borsht";
            this.weight = 0.6;
            this.size = 9;
            this.description = "A roasted borsht.";
            this.intForDes = 0;
            this.intDescription = "It has a bit of a bite to it but it is tender; it tastes sweet, with an earthy aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.6; //satisfies hunger.
            this.thirst = 0.26; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Borsht", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "slicedBorsht")
        {
            //For All Items
            this.identity = "Sliced Borsht";
            this.weight = 0.3;
            this.size = 9;
            this.description = "Two slices of roasted borsht.";
            this.intForDes = 0;
            this.intDescription = "It has a bit of a bite to it but it is tender; it tastes sweet, with an earthy aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 1;
            this.ingredients = [["Roasted Borsht", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "tropicalFruitPlatter")
        {
            //For All Items
            this.identity = "Tropical Fruit Platter";
            this.weight = 9.06;
            this.size = 25;
            this.description = "A decorative assortment of Sonja, and Tchafula.";
            this.intForDes = 0;
            this.intDescription = "It is is eaten with sonja sap by plucking the bubbles off of the centerpiece and popping them over the fruit.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["sonjaFruit", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 29; //satisfies hunger.
            this.thirst = 7.9; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.4; //recoops lost energy.
            this.replenish = 0.4; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Sonja", 1], ["Sonja Slice", 3], ["Tchafula Half", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 42; // at max, buy for 42.
            this.sellValue = 42; // at max, sell for 42.
        }
        else if (this.type == "tchafula")
        {
            //For All Items
            this.identity = "Tchafula";
            this.weight = 1.4;
            this.size = 8;
            this.description = "A tender and juicy fruit with a deep reddish pink flesh.";
            this.intForDes = 0;
            this.intDescription = "It tastes sweet and tropical with a subtle acidity and fruitiness.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["tchafulaHalf", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.01; //recoops lost energy.
            this.replenish = 0.01; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "tchafulaHalf")
        {
            //For All Items
            this.identity = "Tchafula Half";
            this.weight = 0.7;
            this.size = 7;
            this.description = "Half of a tender and juicy fruit with a deep reddish pink flesh.";
            this.intForDes = 0;
            this.intDescription = "It tastes sweet and tropical with a subtle acidity and fruitiness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.01; //recoops lost energy.
            this.replenish = 0.01; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 0;
            this.ingredients = [["Tchafula", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "saugRoot")
        {
            //For All Items
            this.identity = "Saug Root";
            this.weight = 1.25;
            this.size = 9;
            this.description = "A sort of bland and sort of parsnip-like starchy tuber.";
            this.intForDes = 0;
            this.intDescription = "Saug roots release trapped moisture and develop a mild sweetness when they are cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "roastedSaugRoot")
        {
            //For All Items
            this.identity = "Roasted Saug Root";
            this.weight = 1.2;
            this.size = 9;
            this.description = "A mildly sweet and sort of parsnip-like starchy tuber that is tender to bite into.";
            this.intForDes = 0;
            this.intDescription = "This can be eaten in two stages: (2/2)";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["roastedSaugRootHalf", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.75; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Saug Root", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "roastedSaugRootHalf")
        {
            //For All Items
            this.identity = "Roasted Saug Root";
            this.weight = 0.6;
            this.size = 7;
            this.description = "A mildly sweet and sort of parsnip-like starchy tuber that is tender to bite into.";
            this.intForDes = 0;
            this.intDescription = "This can be eaten in two stages: (1/2)";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.75; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "potato")
        {
            //For All Items
            this.identity = "Potato";
            this.weight = 0.2;
            this.size = 9;
            this.description = "A starchy dry variety of potato.";
            this.intForDes = 5;
            this.intDescription = "This is the standard variety of potato and is the most common variety to be grown in farms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "cookedPotato")
        {
            //For All Items
            this.identity = "Roasted Potato";
            this.weight = 0.2;
            this.size = 9;
            this.description = "A cooked potato; be careful it's hot don't drop it.";
            this.intForDes = 1;
            this.intDescription = "Eating Potatoes is a good way to restore hunger.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Potato", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "ghoulPelt")
        {
            //For All Items
            this.identity = "Ghoul Pelt";
            this.weight = 9;
            this.size = 40;
            this.description = "The pelt of a ghoul.";
            this.intForDes = 6;
            this.intDescription = "Ghoul pelt can be made into clothing and apparel, as well as other tailored goods.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 15); // at max, buy for 22.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 50); // at max, sell for 22.
        }
        else if (this.type == "gnollPelt")
        {
            //For All Items
            this.identity = "Gnoll Pelt";
            this.weight = 1.8;
            this.size = 23;
            this.description = "The pelt of a gnoll.";
            this.intForDes = 6;
            this.intDescription = "Gnoll pelts are often kept as a sort of trophy, however they can also be used to make rugs and apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 25); // at max, buy for 11.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 25); // at max, sell for 11.
        }
        else if (this.type == "berulnPelt")
        {
            //For All Items
            this.identity = "Beruln Pelt";
            this.weight = 7;
            this.size = 38;
            this.description = "The pelt of a beruln.";
            this.intForDes = 23;
            this.intDescription = "Beruln fur can be used to make warm clothing as well as to line fine Thengan Armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 116 - Math.floor(player.getCharisma() / 1); // at max, buy for 66.
            this.sellValue = 24 + Math.floor(player.getCharisma() / 1.25); // at max, sell for 64.
        }
        else if (this.type == "bigBerulnPelt")
        {
            //For All Items
            this.identity = "Large Beruln Pelt";
            this.weight = 10;
            this.size = 43;
            this.description = "The pelt of a beruln.";
            this.intForDes = 23;
            this.intDescription = "Beruln fur can be used to make warm clothing as well as to line fine Thengan Armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 136 - Math.floor(player.getCharisma() / 1); // at max, buy for 86.
            this.sellValue = 34 + Math.floor(player.getCharisma() / 1.25); // at max, sell for 74.
        }
        else if (this.type == "bigBlackBerulnPelt")
        {
            //For All Items
            this.identity = "Large Black Beruln Pelt";
            this.weight = 6;
            this.size = 33;
            this.description = "The pelt of a black beruln.";
            this.intForDes = 19;
            this.intDescription = "Black beruln fur can be used to make warm clothing as well as to line Thengan Armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 2); // at max, buy for 21.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 25); // at max, sell for 21.
        }
        else if (this.type == "blackBerulnPelt")
        {
            //For All Items
            this.identity = "Black Beruln Pelt";
            this.weight = 5;
            this.size = 26;
            this.description = "The pelt of a black beruln.";
            this.intForDes = 19;
            this.intDescription = "Black beruln fur can be used to make warm clothing as well as to line Thengan Armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 37 - Math.floor(player.getCharisma() / 0.46); // at max, buy for 14.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 15); // at max, sell for 14.
        }
        else if (this.type == "berulnSkull")
        {
            //For All Items
            this.identity = "Beruln Skull";
            this.weight = 3;
            this.size = 11;
            this.description = "The skull of a beruln.";
            this.intForDes = 1;
            this.intDescription = "This beruln is not going to hurt anyone anymore...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 98 - Math.floor(player.getCharisma() / 1); // at max, buy for 48.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 2); // at max, sell for 38.
        }
        else if (this.type == "hydraHead")
        {
            //For All Items
            this.identity = "Hydra Head";
            this.weight = 12;
            this.size = 12;
            this.description = "The tentacly blue scaled head of a hydra.";
            this.intForDes = 1;
            this.intDescription = "A testiment to having pissed off a hydra.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 50); // at max, buy for 9.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "marigoldFlower")
        {
            //For All Items
            this.identity = "Marigold Flower";
            this.weight = 0.06;
            this.size = 8;
            this.description = "An orange flower that grows in Thengan woodlands.";
            this.intForDes = 8;
            this.intDescription = "Marigold flowers act as a moderate amplifier in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "bleedingHeartBranch")
        {
            //For All Items
            this.identity = "Bleeding Heart Branch";
            this.weight = 0.8;
            this.size = 8;
            this.description = "A branch with a number of small heart shaped flowers hanging down from it.";
            this.intForDes = 16;
            this.intDescription = "Bleeding heart flowers can be used in remedies that support old and weary joints.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "cirmusidicCompound")
        {
            //For All Items
            this.identity = "Cirmusidic Compound";
            this.weight = 0.6;
            this.size = 7;
            this.description = "The chemically deformed ooze remains from a cirmusid.";
            this.intForDes = 7;
            this.intDescription = "The ooze of cirmusids can negatively alter one's mental state.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "wildDogPelt")
        {
            //For All Items
            this.identity = "Wild Dog Pelt";
            this.weight = 0.6;
            this.size = 9;
            this.description = "The reddish brown fur of a southern savannah dwelling wild dog.";
            this.intForDes = 3;
            this.intDescription = "Wild dog pelts can be used to make clothing and is used as common material in Cephrite.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "hyenaPelt")
        {
            //For All Items
            this.identity = "Hyena Pelt";
            this.weight = 1;
            this.size = 11;
            this.description = "The scraggly, furry pelt of a spotted hyena.";
            this.intForDes = 4;
            this.intDescription = "Hyena pelts are used to make cephrian clothing, outfits, dresses, and rugs.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
        }
        else if (this.type == "gazellePelt")
        {
            //For All Items
            this.identity = "Gazelle Pelt";
            this.weight = 2;
            this.size = 11;
            this.description = "The smooth, short furred pelt of a gazelle.";
            this.intForDes = 5;
            this.intDescription = "Gazelle pelt is a desirable middle-wealth commodity that can be used to make certain outfits.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 8.
        }
        else if (this.type == "gazelleHorn")
        {
            //For All Items
            this.identity = "Gazelle Horn";
            this.weight = 0.7;
            this.size = 7;
            this.description = "The hard, dark, curved, boney horn of a gazelle.";
            this.intForDes = 2;
            this.intDescription = "These are used as an aphrodesiac... for some reason.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "holnArms")
        {
            //For All Items
            this.identity = "Holn Lappets";
            this.weight = 9;
            this.size = 14;
            this.description = "The flat glassy, slimy electrified lappets of a holn.";
            this.intForDes = 34;
            this.intDescription = "These are an important ingrediant in the production of spell oil.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22; // at max, buy for 22.
            this.sellValue = 22; // at max, sell for 22.
        }
        else if (this.type == "borgalLeg")
        {
            //For All Items
            this.identity = "Borgal Leg";
            this.weight = 22.75;
            this.size = 16;
            this.description = "The bloody, muscular, severed leg, of a borgal.";
            this.intForDes = 3;
            this.intDescription = "This should be cut into smaller pieces before being cooked into anything.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20; // at max, buy for 20.
            this.sellValue = 20; // at max, sell for 20.
        }
        else if (this.type == "borgalEye")
        {
            //For All Items
            this.identity = "Borgal Eye";
            this.weight = 0.55;
            this.size = 16;
            this.description = "The eye of a borgal.";
            this.intForDes = 6;
            this.intDescription = "Borgal eye can be mixed with herbs to make a traditional Thengan cure for flesh mites.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "borgalPelt")
        {
            //For All Items
            this.identity = "Borgal Pelt";
            this.weight = 10;
            this.size = 16;
            this.description = "The dark thick fur of a borgal on a tough somewhat wrinkly skin.";
            this.intForDes = 2;
            this.intDescription = "This can be used to make rugs and apparel.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 5); // at max, buy for 30.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 3); // at max, sell for 30.
        }
        else if (this.type == "borgalHead")
        {
            //For All Items
            this.identity = "Borgal Head";
            this.weight = 108.5;
            this.size = 26;
            this.description = "The lifeless severed head of a borgal.";
            this.intForDes = 1;
            this.intDescription = "This is a testament to having killed a borgal of gargantuan proportions.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 57 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 53.
            this.sellValue = 50 + Math.floor(player.getCharisma() / 15); // at max, sell for 53.
        }
        else if (this.type == "haeflower")
        {
            //For All Items
            this.identity = "Haeflower";
            this.weight = 0.16;
            this.size = 8;
            this.description = "A pointed-petaled blue flower with yellow pollen; it is found in cold mountainous landscapes.";
            this.intForDes = 30;
            this.intDescription = "It produces a toxin that leads to a psychodelic death upon its consumption.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 130; //recoops lost energy.
            this.replenish = 13; //restores will.

            //ability
            this.ability = "haeDeath";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 15); // at max, buy for 17.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 3); // at max, sell for 17.
        }
        else if (this.type == "haeflowerPollen")
        {
            //For All Items
            this.identity = "Haeflower Pollen";
            this.weight = 0.001;
            this.size = 3;
            this.description = "The pollen of a haeflower.";
            this.intForDes = 9;
            this.intDescription = "The inhalation of this pollen will result in a energizing, body-numbing, mind-expanding psychodelic experience.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 100; //recoops lost energy.
            this.replenish = 10; //restores will.

            //ability
            this.ability = "haeflower";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Haeflower", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 8); // at max, buy for 10.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 6); // at max, sell for 10.
        }
        else if (this.type == "kolumPowder")
        {
            //For All Items
            this.identity = "Kolum Powder";
            this.weight = 0.001;
            this.size = 3;
            this.description = "A soft white powdery substance.";
            this.intForDes = 6;
            this.intDescription = "The inhalation of this powder causes the user to become full of energy and euphoria, however it is highly addictive, and damaging long-term.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = -5; //satisfies hunger.
            this.thirst = -2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -3; //heals health.
            this.generation = Math.max(1, 80 - player.kolumTolerance); //recoops lost energy.
            this.replenish = -20; //restores will.

            //ability
            this.ability = "kolum";

            //Crafting
            this.yield = 30;
            this.intForCraft = 27;
            this.ingredients = [["Desert Poppy Seed Mash", 6], ["Cirmusidic Compound", 2], ["Bloch Extract", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            if (shopkeeper != "none")
            {
                if (shopkeeper.ultra.faction == "Nirwaden")
                {
                    this.buyValue = 0;
                    this.sellValue = 0;
                    if (player.title != "Nobility" && player.title != "Royalty")
                    {
                        for (var ii = 0; ii < Inventory.length; ii++)
                        {
                            if (Inventory[ii][0].type == "kolum")
                            {
                                shopkeeper.disturbed = true;
                            }
                        }
                    }
                }
                else
                {
                    this.buyValue = 8; // at max, buy for 8.
                    this.sellValue = 8; // at max, sell for 8.
                }
            }
            else
            {
                this.buyValue = 8; // at max, buy for 8.
                this.sellValue = 8; // at max, sell for 8.
            }
        }
        else if (this.type == "tepprekliaFungus")
        {
            //For All Items
            this.identity = "Teppreklia Fungus";
            this.weight = 0.5;
            this.size = 10;
            this.description = "A yellowish fungal growth picked off of the tip of a vine.";
            this.intForDes = 11;
            this.intDescription = "Teppreklia is a fungus. It grows throughout the inner veination of a vine and then sprouts bulbous yellowish pertrusions from the tips.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = -1; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -6; //restores will.

            //ability
            this.ability = "teppreklia";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "toadstools")
        {
            //For All Items
            this.identity = "Toadstools";
            this.weight = 0.8;
            this.size = 8;
            this.description = "Swamp mushrooms that grow in south and central Vardania.";
            this.intForDes = 4;
            this.intDescription = "They are poisonous to eat, so don't eat them!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "thimblecapMushrooms")
        {
            //For All Items
            this.identity = "Thimblecap Mushrooms";
            this.weight = 0.02;
            this.size = 8;
            this.description = "Tiny orangish capped white stemmed mushrooms that glow dimmly while attached to their mycelium.";
            this.intForDes = 6;
            this.intDescription = "They are edible and most commonly eaten raw. They have a nutty taste to them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "maleotMushroom")
        {
            //For All Items
            this.identity = "Maleot Mushroom";
            this.weight = 4;
            this.size = 14;
            this.description = "A large dark grey mushroom that grows in the Vardanian woods.";
            this.intForDes = 2;
            this.intDescription = "It is poisonous as is, but it can be dried and used in alchemy as a changer.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7; // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "poegroonMushrooms")
        {
            //For All Items
            this.identity = "Poegroon Mushrooms";
            this.weight = 2.3;
            this.size = 13;
            if (player.areGlovesEquipped == true)
            {
                this.description = "Grey speckled mushrooms with lighter stringy grey stalks. Their leathery caps are coving in a thin layer of light coloured oil.";
            }
            else
            {
                this.description = "Grey speckled mushrooms with lighter stringy grey stalks. It stings your fingers to touch their greesy, slick, leathery mushroom caps.";
            }
            this.intForDes = 5;
            this.intDescription = "They are host to a lethal poison.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -5.5; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 8); // at max, sell for 7.
        }
        else if (this.type == "driedPoegroonMushrooms")
        {
            //For All Items
            this.identity = "Dried Poegroon Mushrooms";
            this.weight = 2.1;
            this.size = 13;
            if (player.areGlovesEquipped == true)
            {
                this.description = "The coarse and stringy textured dried mushrooms are drenched in a whitish coloured oil.";
            }
            else
            {
                this.description = "Grey speccled mushrooms with lighter stringy grey stalks. It stings your fingers to touch their greesy, slick, leathery mushroom caps.";
            }
            this.intForDes = 10;
            this.intDescription = "They oil they produce is valued as an alchemical ingredient; it is used as a base..";

            //Define Utility
            this.utility = "material";
            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13; // at max, buy for 10.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 25); // at max, sell for 13.
        }
        else if (this.type == "iodFungi")
        {
            //For All Items
            this.identity = "Iod Fungi";
            this.weight = 2;
            this.size = 15;
            this.description = "Round-headed, green-stalked fungi that actively work to decompose corpses that fall within reach of their mycelium..";
            this.intForDes = 4;
            this.intDescription = "They are poisonous to eat; they can be fermented for alchemic purposes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = -1; //warms player.
            this.heal = -1; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = -5; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "fermentedIod")
        {
            //For All Items
            this.identity = "Fermented Iod";
            this.weight = 2;
            this.size = 15;
            this.description = "Fermented iod fungi; they smell sour and strange.";
            this.intForDes = 4;
            this.intDescription = "They are poisonous alone, but in combination with other substances can be rendered safe to consume. They act as a catalyst in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = -2; //warms player.
            this.heal = -2; //heals health.
            this.generation = -6; //recoops lost energy.
            this.replenish = -10; //restores will.

            //ability
            this.ability = "poisonIII";

            this.yield = 1;
            this.intForCraft = 27;
            this.ingredients = [["Iod Fungi", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "driedMaleotMushroom")
        {
            //For All Items
            this.identity = "Dried Maleot Mushroom";
            this.weight = 3.7;
            this.size = 14;
            this.description = "A large, dry, and withered dark grey mushroom.";
            this.intForDes = 2;
            this.intDescription = "It can be used as a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Maleot Mushroom", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
        }
        else if (this.type == "kozlyakMushrooms")
        {
            //For All Items
            this.identity = "Kozlyak Mushrooms";
            this.weight = 0.45;
            this.size = 7;
            this.description = "A greyish brown mushroom that grows in dark, damp areas, most often in the Vardanian woods.";
            this.intForDes = 1;
            this.intDescription = "Kozlyak mushrooms are delectable in both their cooked and raw forms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.15; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "gribnoyMushroom")
        {
            //For All Items
            this.identity = "Gribnoy Mushroom";
            this.weight = 0.95;
            this.size = 10;
            this.description = "A light brown mushroom that grows along the trunks of trees.";
            this.intForDes = 2;
            this.intDescription = "Gribnoy mushrooms are safe to eat, but they taste much better cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "roastedGribnoyMushroom")
        {
            //For All Items
            this.identity = "Roasted Gribnoy Mushroom";
            this.weight = 0.9;
            this.size = 10;
            this.description = "They have a distinct savory flavor.";
            this.intForDes = 0;
            this.intDescription = "They are somewhat chewy to eat, but in a totally manageable way.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Gribnoy Mushroom", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "halgomMushrooms")
        {
            //For All Items
            this.identity = "Halgom Mushrooms";
            this.weight = 0.87;
            this.size = 11;
            this.description = "Yellowish brown mushrooms that grow from a dark tan mycelium that lies below the soil.";
            this.intForDes = 6;
            this.intDescription = "Halgom mushrooms are edible raw, but they taste much better cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
        }
        else if (this.type == "roastedHalgomMushrooms")
        {
            //For All Items
            this.identity = "Roasted Halgom Mushrooms";
            this.weight = 0.5;
            this.size = 10;
            this.description = "The roasted mushrooms are savoury, juicy, and filling.";
            this.intForDes = 3;
            this.intDescription = "Halgom mushrooms are most commonly found in forested eastern temperate regions.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0.6; //quenches thirst.
            this.warmth = 2.3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Halgom Mushrooms", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 12); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "cerebrisMushrooms")
        {
            //For All Items
            this.identity = "Cerebris Mushrooms";
            this.weight = 1.8;
            this.size = 10;
            this.description = "Yellow mushrooms that use particular beings as hosts to spread their spores across their native jungle habitat.";
            this.intForDes = 1;
            this.intDescription = "Eating them will cause you to become infected with venandification.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "venandification";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "xiumMushroom")
        {
            //For All Items
            this.identity = "Xium Mushroom";
            this.weight = 4.4;
            this.size = 11;
            this.description = "A tall and very poisonous light blue mushroom.";
            this.intForDes = 0;
            this.intDescription = "It releases spores and sticky pods in order to infect the trees, which it uses to create a massive network of raised mycelium in the jungle canopy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = -12; //quenches thirst.
            this.warmth = -20; //warms player.
            this.heal = -2; //heals health.
            this.generation = -40; //recoops lost energy.
            this.replenish = -22; //restores will.

            //ability
            this.ability = "poisonIV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "driedAthergmMushrooms")
        {
            //For All Items
            this.identity = "Dried Athergm Mushrooms";
            this.weight = 0.4;
            this.size = 8;
            this.description = "Dried white mushrooms with red speckles with a hard powdery red substance on top of each.";
            this.intForDes = 1;
            this.intDescription = "These mushrooms are extremely poisonous, and are a former in alchemy.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonIV";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Athergm Mushrooms", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 11; // at max, sell for 11.
        }
        else if (this.type == "athergmMushrooms")
        {
            //For All Items
            this.identity = "Athergm Mushrooms";
            this.weight = 0.4;
            this.size = 8;
            this.description = "White mushrooms with red speckles, that have a hollow indent on top filled with red paste.";
            this.intForDes = 1;
            this.intDescription = "These mushrooms are extremely poisonous.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.8; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonIV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "aberdomMushrooms")
        {
            //For All Items
            this.identity = "Aberdom Mushrooms";
            this.weight = 0.2;
            this.size = 7;
            this.description = "A mushroom with a flattish black and white striped cap.";
            this.intForDes = 3;
            this.intDescription = "These are poisonous to touch, eating them would just be overkill.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.66; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -66; //recoops lost energy.
            this.replenish = -22; //restores will.

            //ability
            this.ability = "poisonIV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 50); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "beunumMushroom")
        {
            //For All Items
            this.identity = "Beunum Mushroom";
            this.weight = 0.45;
            this.size = 5;
            this.description = "A thick black capped mushroom with white spots.";
            this.intForDes = 2;
            this.intDescription = "This is poisonous to eat.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.28; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "ciprinMushroom")
        {
            //For All Items
            this.identity = "Ciprin Mushroom";
            this.weight = 0.45;
            this.size = 5;
            this.description = "A white capped mushroom with black speckles and a long black stalk.";
            this.intForDes = 5;
            if (player.getIntelligence() < 12)
            {
                this.intDescription = "This is poisonous... you can eat it if you want, but you'll probably die if you do.";
            }
            else
            {
                this.intDescription = "This is poisonous... However its poison can be nuetralized in certain alchemic combinations; it acts as a former in alchemy.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.9; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "glinMushrooms")
        {
            //For All Items
            this.identity = "Glin Mushrooms";
            this.weight = 0.5;
            this.size = 10;
            this.description = "Light brown mushrooms that grow from a spongy white mycelium that rests just below the surface of the soil.";
            this.intForDes = 5;
            this.intDescription = "Glin mushrooms are poisonous but they are edible when boiled.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 15); // at max, buy for 6.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 12); // at max, sell for 6.
        }
        else if (this.type == "halcifMushroom")
        {
            //For All Items
            this.identity = "Halcif Mushroom";
            this.weight = 0.01;
            this.size = 5;
            this.description = "A ghostly white mushroom.";
            if (player.getIntelligence() >= 0 && player.getIntelligence() < 25)
            {
                this.intForDes = 10;
                this.intDescription = "Halcif mushrooms are so poisonous that if you touch them with your bare skin you may die.";
            }
            else
            {
                this.intForDes = 25;
                this.intDescription = "Although even touching a halcif mushroom can kill someone, when combined with other reactants the poison can be easily neutralized.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 4; //restores will.

            //ability
            this.ability = "poisonIV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 3); // at max, buy for 30.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 4); // at max, sell for 30.
        }
        else if (this.type == "krogiMushroom")
        {
            //For All Items
            this.identity = "Krogi Mushroom";
            this.weight = 1.5;
            this.size = 11;
            this.description = "A blackish grey mushroom with a flattish ringdomed cap. The smell is rank, and tickles your nose with a slight burning sensation.";
            this.intForDes = 9;
            this.intDescription = "Eating this mushroom may cause near-permanent paralysis.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 10; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "permaParalysis";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "cookedKrogiMushroom")
        {
            //For All Items
            this.identity = "Cooked Krogi Mushroom";
            this.weight = 1.5;
            this.size = 11;
            this.description = "The blackish grey pigment of the krogi mushroom turns brown when exposed to heat. It has a sour and mildly savoury smell.";
            this.intForDes = 6;
            this.intDescription = "Eating this mushroom causes your whole body to go numb... This is traditionally eated by the residents of Blacklake and The Hollows.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 1.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 10; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "krogiNumb";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Krogi Mushroom", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "cyrinthilimMushroom")
        {
            //For All Items
            this.identity = "Cyrinthilim Mushroom";
            this.weight = 0.4;
            this.size = 10;
            this.description = "A red mushroom with white specles that grows upon a bed of buried light-pink mycelium.";
            this.intForDes = 28;
            this.intDescription = "When dried, cyrinthilim mushrooms' toxins are somewhat neutralized.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = -3; //restores will.

            //ability
            this.ability = "undriedCyrinthilim";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 12); // at max, buy for 10.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 12); // at max, sell for 7.
        }
        else if (this.type == "driedCyrinthilimMushroom")
        {
            //For All Items
            this.identity = "Dried Cyrinthilim Mushroom";
            this.weight = 0.2;
            this.size = 10;
            this.description = "A dried cyrinthilim mushroom.";
            this.intForDes = 28;
            this.intDescription = "Dried cyrinthilim mushrooms contain a toxin that causes intense visual halucinations and sometimes even death when it is consumed.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = -1.5; //restores will.

            //ability
            this.ability = "cyrinthilim";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Cyrinthilim Mushroom", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 15); // at max, buy for 15.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 10); // at max, sell for 11.
        }
        else if (this.type == "boiledGlinMushrooms")
        {
            //For All Items
            this.identity = "Boiled Glin Mushrooms";
            this.weight = 0.5;
            this.size = 10;
            this.description = "The boiled mushrooms have a firm texture and a savory taste.";
            this.intForDes = 5;
            this.intDescription = "Glin mushrooms that have been boiled for hours to remove their poison.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 5;
            this.ingredients = [["Glin Mushrooms", 6], ["Bucket of Water", 1]];
            this.biproducts = [[new Item("bucket", false), 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 12); // at max, buy for 7.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 12); // at max, sell for 7.
        }
        else if (this.type == "mustardGreens")
        {
            //For All Items
            this.identity = "Mustard Greens";
            this.weight = 0.08;
            this.size = 7;
            this.description = "The leafy greens of a mustard plant.";
            this.intForDes = 1;
            this.intDescription = "When cooked these have a subtle spiciness to them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.55; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "wiltedMustardGreens")
        {
            //For All Items
            this.identity = "Wilted Mustard Greens";
            this.weight = 0.06;
            this.size = 8;
            this.description = "The lightly cooked leafy greens of a mustard plant.";
            this.intForDes = 0;
            this.intDescription = "These have a subtle spicy taste that is by no means overpowering.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Mustard Greens", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "mustardSeedPods")
        {
            //For All Items
            this.identity = "Mustard Seed Pods";
            this.weight = 0.2;
            this.size = 8;
            this.description = "Numerous pods each filled with small dark round seeds.";
            this.intForDes = 1;
            this.intDescription = "It takes effort to remove all of the seeds from the pods...";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["mustardSeeds", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mustardSeeds")
        {
            //For All Items
            this.identity = "Mustard Seeds";
            this.weight = 0.15;
            this.size = 8;
            this.description = "The tiny little dark round seeds of a mustard plant.";
            this.intForDes = 1;
            this.intDescription = "These can be ground up to make mustard, but can also be used as a spice to flavour various dishes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "mustard")
        {
            //For All Items
            this.identity = "Mustard";
            this.weight = 0.1;
            this.size = 6;
            this.description = "A paste made from the coarsely ground seeds of a mustard plant.";
            this.intForDes = 0;
            this.intDescription = "It has a pungent and spicy aroma.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.05; //quenches thirst.
            this.warmth = 0.05; //warms player.
            this.heal = -0.05; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 3;
            this.ingredients = [["Mustard Seeds", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "sauerkraut")
        {
            //For All Items
            this.identity = "Sauerkraut";
            this.weight = 0.333;
            this.size = 7;
            this.description = "A sour tasting shredded vegetable condiment.";
            this.intForDes = 4;
            this.intDescription = "Sauerkraut is made by fermenting cabbage.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.4; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = -0.5; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            if (player.raceName == "Thengar")
            {
                this.intForCraft = 4;
            }
            else
            {
                this.intForCraft = 10;
            }
            this.ingredients = [["Cabbage", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawHoffalgreSausageChain")
        {
            //For All Items
            this.identity = "Raw Hoffalgre Sausage Chain";
            this.weight = 1.8;
            this.size = 13;
            this.description = "Intestinal lining packed with finely chopped Hoffalgre flesh.";
            this.intForDes = 3;
            this.intDescription = "Sausage chains are made by twisting the casing after a section of it is filled.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Thengar")
            {
                this.intForCraft = 10;
            }
            else
            {
                this.intForCraft = 18;
            }
            this.ingredients = [["Raw Hoffalgre Flesh", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 50); // at max, buy for 13.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 15); // at max, sell for 13.
        }
        else if (this.type == "rawHoffalgreSausage")
        {
            //For All Items
            this.identity = "Raw Hoffalgre Sausage";
            this.weight = 0.3;
            this.size = 6;
            this.description = "A section of raw sausage made with hoffalgre flesh.";
            this.intForDes = 1;
            this.intDescription = "Sausages are a classic part of Thengan cuisine.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 1;
            this.ingredients = [["Raw Hoffalgre Sausage Chain", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "hoffalgreSausage")
        {
            //For All Items
            this.identity = "Hoffalgre Sausage";
            this.weight = 0.3;
            this.size = 6;
            this.description = "A cooked sausage made with well marbled hoffalgre meat.";
            this.intForDes = 0;
            this.intDescription = "Hoffalgre sausages are rich in flavour and have a nice fattiness to them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5.5; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 3.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Hoffalgre Sausage", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 50); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "sausageCombo")
        {
            //For All Items
            this.identity = "Classic Sausage Platter";
            this.weight = 0.7;
            this.size = 9;
            this.description = "A juicy hoffalgre sausage served with fresh sauerkraut and coarsly ground mustard.";
            this.intForDes = 1;
            this.intDescription = "This is considered to be the most classical Thengan meal.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 0.6; //quenches thirst.
            this.warmth = 6.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.075; //recoops lost energy.
            this.replenish = 0.075; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Hoffalgre Sausage", 1], ["Mustard", 1], ["Sauerkraut", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 10); // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "hetlaukWormPlatter")
        {
            //For All Items
            this.identity = "Hetlauk Worm Platter";
            this.weight = 1.3;
            this.size = 8;
            this.description = "A roasted hetlauk worm served with fresh sauerkraut and coarsly ground mustard.";
            this.intForDes = 1;
            this.intDescription = "This is a lower class imitation of the famous classic dish made with sausage.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            if (player.raceName == "Thengar")
            {
                this.generation = -0.5; //recoops lost energy.
            }
            else
            {
                this.generation = -1; //recoops lost energy.
            }
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Hetlauk Worm", 1], ["Mustard", 1], ["Sauerkraut", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 50); // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "hetlaukWorm")
        {
            //For All Items
            this.identity = "Hetlauk Worm";
            this.weight = 0.9;
            this.size = 8;
            this.description = "A roasted hetlauk worm.";
            this.intForDes = 0;
            this.intDescription = "If you close your eyes and pretend... you can imagine you are eating sausage.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.5; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            if (player.raceName == "Thengar")
            {
                this.generation = -1; //recoops lost energy.
            }
            else
            {
                this.generation = -2; //recoops lost energy.
            }
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Live Hetlauk Worm", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "rawHetlaukWorm")
        {
            //For All Items
            this.identity = "Live Hetlauk Worm";
            this.weight = 1;
            this.size = 10;
            this.description = "An aquatic worm that inhabits lakes, rivers, and sewage.";
            this.intForDes = 2;
            this.intDescription = "They spoil quickly once they are dead so, people tend to keep hetlauk worms alive until they cook them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            if (player.raceName == "Thengar")
            {
                this.generation = -12; //recoops lost energy.
            }
            else
            {
                this.generation = -20; //recoops lost energy.
            }
            this.replenish = 0; //restores will.

            //ability
            if (player.raceName == "Thengar")
            {
                this.ability = "none";
            }
            else
            {
                this.ability = "foodPoisoning";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "sewerHetlaukWorm")
        {
            //For All Items
            this.identity = "Live Hetlauk Worm";
            this.weight = 1;
            this.size = 10;
            this.description = "An aquatic worm that inhabits lakes, rivers, and sewage.";
            this.intForDes = 2;
            this.intDescription = "They spoil quickly once they are dead so, people tend to keep hetlauk worms alive until they cook them.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -4; //heals health.
            if (player.raceName == "Thengar")
            {
                this.generation = -12; //recoops lost energy.
            }
            else
            {
                this.generation = -20; //recoops lost energy.
            }
            this.replenish = 0; //restores will.

            //ability
            this.ability = "acidIII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "rawGulb")
        {
            //For All Items
            this.identity = "Raw Gulb";
            this.weight = 3;
            this.size = 10;
            this.description = "A green fish with white stripes that lives in temperate waters primarily around Thengaria.";
            this.intForDes = 4;
            this.intDescription = "They are unsafe to eat raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.85; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "gulbFillet")
        {
            //For All Items
            this.identity = "Gulb Fillet";
            this.weight = 1.75;
            this.size = 10;
            this.description = "A sizable cut of cooked gulb.";
            this.intForDes = 4;
            this.intDescription = "Gulb has a tender pinkish coloured flesh that has a desirable flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 0.6; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.025; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Gulb", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 25); // at max, buy for 9.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 50); // at max, sell for 9.
        }
        else if (this.type == "gulbPlatter")
        {
            //For All Items
            this.identity = "Gulb Platter";
            this.weight = 1.75;
            this.size = 10;
            this.description = "Two thin fillets of roasted gulb rubbed with coarsely ground mustard and served over a bed of Sauerkraut.";
            this.intForDes = 1;
            this.intDescription = "This is a very strongly flavoured dish.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 11; //satisfies hunger.
            this.thirst = 0.9; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.03; //recoops lost energy.
            this.replenish = 0.015; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Raw Gulb", 1], ["Mustard", 1], ["Sauerkraut", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 50); // at max, buy for 11.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 50); // at max, sell for 11.
        }
        else if (this.type == "sausageAndGreens")
        {
            //For All Items
            this.identity = "Sausage and Greens";
            this.weight = 0.5;
            this.size = 9;
            this.description = "Chopped hoffalgre sausage served over a bed of wilted greens with mustard.";
            this.intForDes = 1;
            this.intDescription = "This is a common dish in Thengaria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7.5; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.015; //recoops lost energy.
            this.replenish = 0.015; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Hoffalgre Sausage", 1], ["Mustard", 1], ["Wilted Mustard Greens", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 50); // at max, buy for 9.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
        }
        else if (this.type == "rawHob")
        {
            //For All Items
            this.identity = "Raw Hob";
            this.weight = 2;
            this.size = 10;
            this.description = "A slimey greyish pink fish that is native to Thengaria. It smells like someone had diarrea after eating rotten fish.";
            this.intForDes = 0;
            this.intDescription = "Just the smell alone makes you gag, don't you dare put this in your mouth hole.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = -3; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "hob")
        {
            //For All Items
            this.identity = "Hob";
            this.weight = 2;
            this.size = 10;
            this.description = "A crisp but slick greyish pink fish with a red flesh that smells like a ripe fishy fart.";
            this.intForDes = 0;
            this.intDescription = "Why would someone cook this? That would imply they were going to eat it... that's just gross!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0.4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3.5; //recoops lost energy.
            this.replenish = -2; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawCres")
        {
            //For All Items
            this.identity = "Raw Cres";
            this.weight = 1.2;
            this.size = 9;
            this.description = "A delectable blue fish native to Thengaria that is known for its buttery smooth taste.";
            this.intForDes = 2;
            this.intDescription = "This type of fish is safe to eat raw, but it tastes even better cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "cresFillet")
        {
            //For All Items
            this.identity = "Fillet of Cres";
            this.weight = 1;
            this.size = 9;
            this.description = "A fine fillet of buttery smooth white flesh from a cres.";
            this.intForDes = 0;
            this.intDescription = "This type of fish is widely sought after for its natural creamy flavour.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 1.25; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.01; //recoops lost energy.
            this.replenish = 0.01; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Raw Cres", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 50); // at max, sell for 15.
        }
        else if (this.type == "cresAndGreens")
        {
            //For All Items
            this.identity = "Fillet of Cres with greens";
            this.weight = 1.1;
            this.size = 9;
            this.description = "Two halves of a fillet of cres served over a bed of wilted mustard greens.";
            this.intForDes = 0;
            this.intDescription = "The spicyness of the mustard greens compliments the smooth creamyness of the fish.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = 1.4; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.015; //recoops lost energy.
            this.replenish = 0.015; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Raw Cres", 1], ["Mustard Greens", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 50); // at max, sell for 15.
        }
        else if (this.type == "hoffalgreRoast")
        {
            //For All Items
            this.identity = "Hoffalgre Roast";
            this.weight = 20;
            this.size = 20;
            this.description = "A whole roasted hoffalgre with an apple in its trunk.";
            this.intForDes = 7;
            this.intDescription = "Hoffalgre roast is usually the centerpiece of a Lordly feast in Thengaria.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 74; //satisfies hunger.
            this.thirst = 9; //quenches thirst.
            this.warmth = 40; //warms player.
            this.heal = 0; //heals health.
            this.generation = 5; //recoops lost energy.
            this.replenish = 3; //restores will.

            //ability
            this.ability = "satiate";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 150 - Math.floor(player.getCharisma() / 3); // at max, buy for 135.
            this.sellValue = 120 + Math.floor(player.getCharisma() / 3); // at max, sell for 135.
        }
        else if (this.type == "rawTilmuk")
        {
            //For All Items
            this.identity = "Raw Tilmuk";
            this.weight = 1.3;
            this.size = 8;
            this.description = "A red fish with a black head and tail that is native to the temperate waters around Thengaria.";
            this.intForDes = 6;
            this.intDescription = "Do not eat this fish raw, it is unsafe.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "tilmuk")
        {
            //For All Items
            this.identity = "Tilmuk";
            this.weight = 1.15;
            this.size = 8;
            this.description = "Sliced roasted tilmuk; its flesh is pinkish in colour.";
            this.intForDes = 0;
            this.intDescription = "It is somewhat fishy, but has a pleasant taste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Tilmut", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 15.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "rawTaggler")
        {
            //For All Items
            this.identity = "Raw Taggler";
            this.weight = 1.5;
            this.size = 8;
            this.description = "A greyish-black bottom feeder native to Vardania.";
            this.intForDes = 4;
            this.intDescription = "Eating these raw is not safe because the flesh may be host to gut worms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1.5; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutworms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "taggler")
        {
            //For All Items
            this.identity = "Taggler";
            this.weight = 1.5;
            this.size = 8;
            this.description = "A cooked and sliced greyish-black bottom feeding fish with light pink flesh.";
            this.intForDes = 0;
            this.intDescription = "It has a watery and bland flavour, with just a hint of fishiness.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 1.9; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Raw Taggler", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
        }
        else if (this.type == "smokedTaggler")
        {
            //For All Items
            this.identity = "Smoked Taggler";
            this.weight = 1.5;
            this.size = 8;
            this.description = "A cooked and sliced greyish-black bottom feeding fish with light pink flesh.";
            this.intForDes = 0;
            this.intDescription = "It has a watery and bland flavour, and it has a strong smokiness to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Raw Taggler", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 50); // at max, buy for 11.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 25); // at max, sell for 11.
        }
        else if (this.type == "rawApoi")
        {
            //For All Items
            this.identity = "Raw Apoi";
            this.weight = 3.5;
            this.size = 8;
            this.description = "A small cartilaginous marine mammal that inhabits Vardanian rivers, lakes, and ponds.";
            this.intForDes = 6;
            this.intDescription = "Their flesh has a bacteria that causes food poisoning, so it must be cooked before being eaten.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 1.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "apoi")
        {
            //For All Items
            this.identity = "Apoi";
            this.weight = 3.4;
            this.size = 8;
            this.description = "A large cut of white meat from an apoi";
            this.intForDes = 0;
            this.intDescription = "The meat has a firm texture, and a mostly bland flavour except for its unique aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 13; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 18;
            this.ingredients = [["Raw Apoi", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 50); // at max, buy for 14.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 14.
        }
        else if (this.type == "smokedApoi")
        {
            //For All Items
            this.identity = "Smoked Apoi";
            this.weight = 3.4;
            this.size = 8;
            this.description = "A large cut of smoked white meat from an apoi";
            this.intForDes = 0;
            this.intDescription = "The meat has a firm texture, a smokey flavour, and a unique aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 15; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 6; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Apoi", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 50); // at max, buy for 16.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 15); // at max, sell for 16.
        }
        else if (this.type == "rawSkig")
        {
            //For All Items
            this.identity = "Raw Skig";
            this.weight = 0.9;
            this.size = 6;
            this.description = "A small darkish green fish that is common in Vardanian waters all the way west to the coast. It has a strongly fishy smell to it.";
            this.intForDes = 5;
            this.intDescription = "It is unsafe to eat raw due to gut worms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.75; //satisfies hunger.
            this.thirst = 0.15; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutworms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "skig")
        {
            //For All Items
            this.identity = "Skig";
            this.weight = 0.8;
            this.size = 6;
            this.description = "A small roasted Vardanian fish that has an orangish pink flesh. It has a moderately fishy smell to it.";
            this.intForDes = 0;
            this.intDescription = "It has a strong flavour with a sharp fishiness to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Skig", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "rawCrilp")
        {
            //For All Items
            this.identity = "Raw Crilp";
            this.weight = 0.9;
            this.size = 6;
            this.description = "A Vardanian crustacean that tends to crawl about the bottom of lakes and streams eating bugs and detritus.";
            this.intForDes = 5;
            this.intDescription = "It is bound to pinch you if you try to eat it live... plus it doesn't taste very good raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.9; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -2; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "crilp")
        {
            //For All Items
            this.identity = "Crilp";
            this.weight = 0.9;
            this.size = 6;
            this.description = "A roasted Vardanian crustacean that has been delimbed and decapitated for your eating pleasure...";
            this.intForDes = 0;
            this.intDescription = "The meat has a moist, tender and stringy mouthfeel, and its flesh has a tinge of sweetness to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Raw Crilp", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "smokedCrilp")
        {
            //For All Items
            this.identity = "Smoked Crilp";
            this.weight = 0.9;
            this.size = 6;
            this.description = "A smoked Vardanian crustacean that has been delimbed and decapitated for your eating pleasure...";
            this.intForDes = 0;
            this.intDescription = "The meat has a moist, tender and stringy mouthfeel, and its smokey tasting flesh has a tinge of sweetness to it.";
            this.smallText = true;

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Raw Crilp", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "rawMulstish")
        {
            //For All Items
            this.identity = "Raw Mulstish";
            this.weight = 2.4;
            this.size = 6;
            this.description = "A Vardanian freshwater eel. Its skin exudes a dark oil that is particularly savoury and fishy.";
            this.intForDes = 0;
            this.intDescription = "It can be eaten raw; It has a certain fattiness and it tastes extremely savoury.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiation";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "slicedRawMulstish")
        {
            //For All Items
            this.identity = "Sliced Raw Mulstish";
            this.weight = 1.2;
            this.size = 6;
            this.description = "A slice of Vardanian eel. Its skin exudes a dark oil that is particularly savoury and fishy.";
            this.intForDes = 0;
            this.intDescription = "It can be eaten raw; It has a certain fattiness and it tastes extremely savoury.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.065; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Mulstish", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "slicedMulstish")
        {
            //For All Items
            this.identity = "Sliced Mulstish";
            this.weight = 1.2;
            this.size = 6;
            this.description = "A slice of roasted Vardanian eel that smells strongly of savoury fish essence.";
            this.intForDes = 0;
            this.intDescription = "It is fatty and tender, and it tastes extremely savoury.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 9; //satisfies hunger.
            this.thirst = 0.2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.075; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Sliced Raw Mulstish", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 7; // at max, sell for 7.
        }
        else if (this.type == "slicedSmokedMulstish")
        {
            //For All Items
            this.identity = "Sliced Smoked Mulstish";
            this.weight = 1.2;
            this.size = 6;
            this.description = "A slice of roasted Vardanian eel that smells strongly of savoury fish essence and smoke.";
            this.intForDes = 0;
            this.intDescription = "It is fatty, tender and smokey, and it tastes extremely savoury.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Raw Sliced Mulstish", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "dyedMufCloth")
        {
            //For All Items
            this.identity = "Cloth";
            this.weight = 0.5;
            this.size = 12;
            this.description = "Muf cloth dyed white with tenic paste.";
            this.intForDes = 1;
            this.intDescription = "Dyed muf cloth can be used for manufacture just as any other cloth can.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Muf Cloth", 1], ["Tenic Paste", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "horseCloth")
        {
            //For All Items
            this.identity = "Cloth";
            this.weight = 0.65;
            this.size = 12;
            this.description = "Cloth of woven horsehair dyed white with tenic paste.";
            this.intForDes = 1;
            this.intDescription = "Horse hair cloth is used just like cloth is.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Horse Hair", 4], ["Tenic Paste", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13; // at max, buy for 13.
            this.sellValue = 13; // at max, sell for 13.
        }
        else if (this.type == "boggartSpine")
        {
            //For All Items
            this.identity = "Boggart Spine";
            this.weight = 4;
            this.size = 12;
            this.description = "The curled spinal chord of a nefarious fairy being.";
            this.intForDes = 1;
            this.intDescription = "This can be used in alchemy as a changer.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 53; // at max, buy for 53.
            this.sellValue = 53; // at max, sell for 53.
        }
        else if (this.type == "cloth") //clothcloth
        {
            //For All Items
            this.identity = "Cloth";
            this.weight = 0.5;
            this.size = 12;
            this.description = "Thin fibers sewn together to form a smooth and consistent fabric.";
            this.intForDes = 1;
            this.intDescription = "Cloth is a basic material used in many crafting recipies.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Fiber", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 15); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "laicaumBandage")
        {
            //For All Items
            this.identity = "Bandage";
            this.weight = 0.48;
            this.size = 3;
            this.description = "A strip of cloth soaked in laicaum leaf juice; it has a strong scent that burns your nose.";
            this.intForDes = 5;
            this.intDescription = "Bandages can only be used while above 1/5 health (20%), 1/3 energy (33%), and 1/3 hunger and thirst (33%).";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "bandage";

            //ability
            this.ability = "bandageII";

            //Crafting
            this.yield = 4;
            this.intForCraft = 3;
            this.ingredients = [["Laicaum Branch", 41], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 50); // at max, buy for 14.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 50); // at max, sell for 14.
        }
        else if (this.type == "culprisBandage")
        {
            //For All Items
            this.identity = "Bandage";
            this.weight = 0.05;
            this.size = 3;
            this.description = "A strip of cloth rubbed with culpris.";
            this.intForDes = 5;
            this.intDescription = "Bandages can only be used effectively when you are above 1/5 health (20%), your energy is above (33%), and you have basic water and food needs met (33%).";

            //Define Utility
            this.utility = "tool";
            this.subUtility = "bandage";

            //ability
            this.ability = "bandageI";

            //Crafting
            this.yield = 4;
            this.intForCraft = 2;
            this.ingredients = [["Culpris Leaf", 3], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "ancientFragment")
        {
            //For All Items
            this.identity = "Ancient Fragment";
            this.weight = 2;
            this.size = 7;
            this.description = "A withered boney otherworldly material.";
            this.intForDes = 38;
            this.intDescription = "Ancient fragments can be used to forge a powerful armour.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15; // at max, buy for 15.
            this.sellValue = 15; // at max, sell for 15.
        }
        else if (this.type == "soul")
        {
            //For All Items
            this.identity = "Soul";
            this.weight = 0;
            this.size = 12;
            this.description = "A physical stagnation of raw soul.";
            this.intForDes = 40;
            this.intDescription = "Soul can be absorbed giving the player a skillpoint.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 5; //recoops lost energy.
            this.replenish = 20; //restores will.

            //ability
            this.ability = "soul";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "memory")
        {
            //For All Items
            this.identity = "Memory";
            this.weight = 0;
            this.size = 5;
            this.description = "A physical stagnation of raw memory.";
            this.intForDes = 40;
            this.intDescription = "Memory can be absorbed giving the player a point of memory.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 1; //restores will.

            //ability
            this.ability = "memory";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "garldsMemories")
        {
            //For All Items
            this.identity = "Garld's Memories";
            this.weight = 0;
            this.size = 5;
            this.description = "The physical stagnation of the raw memories of a Sage named Garld.";
            this.intForDes = 30;
            this.intDescription = "To separate ones memories from their being requires extremely powerful magic.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["garldsMemories", 1]];

            this.questy = true;

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "garldsMemories";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "naapridFiber")
        {
            //For All Items
            this.identity = "Fiber";
            this.weight = 0.1;
            this.size = 10;
            this.description = "Strong thin strands of fiber.";
            this.intForDes = 1;
            this.intDescription = "Fiber is a basic material used in many crafting recipies.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 16;
            this.ingredients = [["Naaprid Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "shotgunAmmo")
        {
            //For All Items
            this.identity = "Shotgun Ammo";
            this.weight = 0.15;
            this.size = 4;
            this.description = "A box of ammo that contains 8 shotgun rounds when full.";
            this.intForDes = 0;
            if (player.weaponEquipped == "shotgun" && magAmmo <= 8)
            {
                this.intDescription = "Rounds left in box: " + magAmmo;
            }
            else
            {
                this.intDescription = "Rounds left in box: 8";
            }

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "mag";
            this.subUtilityName = "Ammo Box";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "m16CarbineClip")
        {
            //For All Items
            this.identity = "M16 Carbine Clip";
            this.weight = 0.25;
            this.size = 4;
            this.description = "A 30 round magazine fitted for 5.56 mm rounds.";
            this.intForDes = 0;
            if (player.weaponEquipped == "m16Carbine")
            {
                this.intDescription = "Rounds left in current clip: " + magAmmo;
            }
            else
            {
                this.intDescription = "Rounds left in current clip: 30";
            }

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "mag";
            this.subUtilityName = "Mag";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 10; // at max, sell for 10.
        }
        else if (this.type == "m16Carbine")
        {
            //For All Items
            this.identity = "M16 Carbine";
            this.weight = 3.3;
            this.size = 15;
            if (player.name == "Uncle Sam" || player.name == "Aunt Sue" || player.name == "Big Brother" || player.name == "Big Sister")
            {
                this.description = "A standard USA military grade rifle that fires 5.56 mm rounds.";
                this.intForDes = 0;
                this.intDescription = "This is second ammendment!!!";
            }
            else
            {
                this.description = "A standard military grade rifle that fires 5.56 mm rounds.";
                this.intForDes = 3000;
                this.intDescription = "";
            }

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "assaultRifle";

            //Utility Focused
            this.range = 4000;
            this.rate = 1;
            this.speed = 9;
            this.negateArmour = 200;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2000;
            this.ingredients = [["Pre-manufactured Rifle Parts", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2000; // at max, buy for 2000.
            this.sellValue = 1800; // at max, sell for 1800.
        }
        else if (this.type == "shotgun")
        {
            //For All Items
            this.identity = "Combat Shotgun";
            this.weight = 4;
            this.size = 16;
            if (player.name == "Uncle Sam" || player.name == "Aunt Sue" || player.name == "Big Brother" || player.name == "Big Sister")
            {
                this.description = "A standard USA military grade shotgun.";
                this.intForDes = 0;
                this.intDescription = "This is second ammendment!!!";
            }
            else
            {
                this.description = "A standard military grade shotgun.";
                this.intForDes = 3000;
                this.intDescription = "";
            }

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "shotgun";

            //Utility Focused
            this.range = 1190;
            this.rate = 150;
            this.speed = 8;
            this.negateArmour = 190;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2000;
            this.ingredients = [["Pre-manufactured Shotgun Parts", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1900; // at max, buy for 1900.
            this.sellValue = 1700; // at max, sell for 1700.
        }
        else if (this.type == "balkurPelt")
        {
            //For All Items
            this.identity = "Balkur Pelt";
            this.weight = 2.25;
            this.size = 19;
            this.description = "The thick and soft furry pelt of a balkur.";
            this.intForDes = 6;
            this.intDescription = "Balkur fur is used by the freydic to make warm clothing and armours.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 15); // at max, buy for 26.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 3); // at max, sell for 26.
        }
        else if (this.type == "winterWolfPelt")
        {
            //For All Items
            this.identity = "Winter Wolf Pelt";
            this.weight = 2;
            this.size = 16;
            this.description = "The pale white fur of a winter wolf.";
            this.intForDes = 17;
            this.intDescription = "Winter wolf fur is used to make fine Freydic clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 8); // at max, buy for 20.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 3); // at max, sell for 20.
        }
        else if (this.type == "greyWolfPelt")
        {
            //For All Items
            this.identity = "Grey Wolf Pelt";
            this.weight = 2;
            this.size = 16;
            this.description = "The ragged fur of a grey wolf.";
            this.intForDes = 8;
            this.intDescription = "Grey wolf fur can be used to make basic clothing and tailored goods.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 15); // at max, buy for 9.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 8); // at max, sell for 9.
        }
        else if (this.type == "massiveGreyWolfPelt")
        {
            //For All Items
            this.identity = "Massive Grey Wolf Pelt";
            this.weight = 6;
            this.size = 24;
            this.description = "The ragged fur of a monstrously huge grey wolf.";
            this.intForDes = 13;
            this.intDescription = "Giant grey wolf fur is a valuable commodity, as grey wolves are hardly found so large.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 70 - Math.floor(player.getCharisma() / 5); // at max, buy for 60.
            this.sellValue = 45 + Math.floor(player.getCharisma() / 3); // at max, sell for 60.
        }
        else if (this.type == "greyTrollFur")
        {
            //For All Items
            this.identity = "Grey Troll Fur";
            this.weight = 10;
            this.size = 24;
            this.description = "The thick matted grey fur of a grey troll.";
            this.intForDes = 5;
            this.intDescription = "Grey Troll fur is exclusively coveted by the royal family of Thengaria.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 106 - Math.floor(player.getCharisma() / 8); // at max, buy for 100.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 5); // at max, sell for 100.
        }
        else if (this.type == "massiveWinterWolfPelt")
        {
            //For All Items
            this.identity = "Massive Winter Wolf Pelt";
            this.weight = 6;
            this.size = 24;
            this.description = "The pale white fur of a monstrously huge winter wolf.";
            this.intForDes = 17;
            this.intDescription = "The fur from this rare breed of winter wolf is often made into clothing for those of higher class in Freydic society.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 115 - Math.floor(player.getCharisma() / 2); // at max, buy for 90.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 2); // at max, sell for 85.
        }
        else if (this.type == "skolPelt")
        {
            //For All Items
            this.identity = "Skol Pelt";
            this.weight = 2.5;
            this.size = 16;
            this.description = "The thick rugged fur of a skol.";
            this.intForDes = 1;
            this.intDescription = "This can be used to make armour and clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 6.
        }
        else if (this.type == "rawWinterWolfFlesh")
        {
            //For All Items
            this.identity = "Raw Winter Wolf Flesh";
            this.weight = 1;
            this.size = 14;
            this.description = "A tough slab of meat cut from a winter wolf.";
            this.intForDes = 2;
            this.intDescription = "Winter wolf flesh is a commonly used commodity in the land of the Freynor.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            if (player.raceName == "Freynor")
            {
                this.generation = 0; //recoops lost energy.
            }
            else
            {
                this.generation = -1; //recoops lost energy.
            }
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "winterWolfMeat")
        {
            //For All Items
            this.identity = "Winter Wolf Meat";
            this.weight = 1;
            this.size = 14;
            this.description = "The cooked meat of a winter wolf.";
            this.intForDes = 4;
            this.intDescription = "The Freynor have adapted to this tough meat after many generations of traditional meals and recipes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.thirst = 0; //quenches thirst.
            this.heal = 0; //heals health.
            this.replenish = 0; //restores will.
            if (player.raceName == "Freynor")
            {
                this.hunger = 8; //satisfies hunger.
                this.warmth = 2; //warms player.
                this.generation = 0; //recoops lost energy.
                //ability
                this.ability = "satiate";
            }
            else
            {
                this.hunger = 5; //satisfies hunger.
                this.warmth = 0; //warms player.
                this.generation = -1; //recoops lost energy.
                //ability
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Raw Winter Wolf Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 8); // at max, sell for 8.
        }
        else if (this.type == "rawSkolFlesh")
        {
            //For All Items
            this.identity = "Raw Skol Flesh";
            this.weight = 1;
            this.size = 14;
            this.description = "A tough bit of flesh cut from a skol.";
            this.intForDes = 2;
            this.intDescription = "Eating this raw will lead to getting gut worms.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "skolMeat")
        {
            //For All Items
            this.identity = "Skol Meat";
            this.weight = 1;
            this.size = 14;
            this.description = "The cooked meat of a skol.";
            this.intForDes = 0;
            this.intDescription = "This meat is particularly tough and it doesn't taste very good.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.thirst = 0; //quenches thirst.
            this.heal = 0; //heals health.
            this.replenish = 0; //restores will.
            this.hunger = 4; //satisfies hunger.
            this.warmth = 0; //warms player.
            this.generation = -2; //recoops lost energy.
            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Skol Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 3.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
        }
        else if (this.type == "cephrianStew")
        {
            //For All Items
            this.identity = "Cephrian Stew";
            this.weight = 1.6;
            this.size = 15;
            this.description = "Stewed Kol meat with eggplant, artichokes, onions, zaf spice, and saffron.";
            this.intForDes = 0;
            this.intDescription = "It is tender and has a deep rich spicy flavour with an insecty aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.thirst = 0.25; //quenches thirst.
            this.heal = 0; //heals health.
            this.replenish = 0; //restores will.
            this.hunger = 17; //satisfies hunger.
            this.warmth = 4; //warms player.
            this.generation = 0.15; //recoops lost energy.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 25;
            this.ingredients = [["Raw Kol Flesh", 1], ["Artichoke", 2], ["Chopped Onion", 2], ["Chopped Eggplant", 2], ["Saffron", 1], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 25); // at max, buy for 17.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 50); // at max, sell for 17.
        }
        else if (this.type == "rawGreyWolfFlesh")
        {
            //For All Items
            this.identity = "Raw Grey Wolf Flesh";
            this.weight = 1;
            this.size = 14;
            this.description = "A tough hunk of meat cut from a grey wolf.";
            this.intForDes = 2;
            this.intDescription = "Grey wolf flesh is rarely eaten by humans. Some hunters have tried it, but only as a means of survival.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "fleshMites";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 15); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "greyWolfMeat")
        {
            //For All Items
            this.identity = "Grey Wolf Meat";
            this.weight = 1;
            this.size = 14;
            this.description = "The cooked meat of a grey wolf.";
            this.intForDes = 1;
            this.intDescription = "This meat is not particularly desirable as a food product.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.thirst = 0; //quenches thirst.
            this.heal = 0; //heals health.
            this.replenish = 0; //restores will.
            this.hunger = 4; //satisfies hunger.
            this.warmth = 0; //warms player.
            this.generation = -1; //recoops lost energy.
            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 4;
            this.ingredients = [["Raw Grey Wolf Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "rawWolfLiver")
        {
            //For All Items
            this.identity = "Raw Wolf Liver";
            this.weight = 0.5;
            this.size = 9;
            this.description = "The liver organ of a wolf.";
            this.intForDes = 6;
            this.intDescription = "Wolf Livers can make a wholesome food when cooked and has alchemical properties while raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 25); // at max, buy for 9.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 10); // at max, sell for 9.
        }
        else if (this.type == "wolfLiver")
        {
            //For All Items
            this.identity = "Wolf Liver";
            this.weight = 0.5;
            this.size = 9;
            this.description = "Cooked liver from a wolf.";
            this.intForDes = 3;
            this.intDescription = "High iron content!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Raw Wolf Liver", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
        }
        else if (this.type == "elderWalrusHide")
        {
            //For All Items
            this.identity = "Elder Walrus Hide";
            this.weight = 40;
            this.size = 45;
            this.description = "The hide of an elder walrus.";
            this.intForDes = 20;
            this.intDescription = "Elder Walrus hide can be made into a unique freydic armor!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 120 - Math.floor(player.getCharisma() / 1); // at max, buy for 70.
            this.sellValue = 43 + Math.floor(player.getCharisma() / 3); // at max, sell for 59.
        }
        else if (this.type == "gulfreyShell")
        {
            //For All Items
            this.identity = "Gulfrey Shell Section";
            this.weight = 3;
            this.size = 17;
            this.description = "A piece of a gulfrey's shell plating.";
            this.intForDes = 30;
            this.intDescription = "Gulfreys are hot blooded and their shell helps to retain their heat in the frozen climates they inhabit.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 59 - Math.floor(player.getCharisma() / 2); // at max, buy for 34.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 5); // at max, sell for 18.
        }
        else if (this.type == "kerShell")
        {
            //For All Items
            this.identity = "Ker Shell";
            this.weight = 7;
            this.size = 20;
            this.description = "A portion of the shell of a ker.";
            this.intForDes = 6;
            this.intDescription = "Ker are a white shelled lobster-like creature that lives in the Vardanian swamps.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 15.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 8); // at max, sell for 15.
        }
        else if (this.type == "kerClaw")
        {
            //For All Items
            this.identity = "Ker Claw";
            this.weight = 5.5;
            this.size = 20;
            this.description = "a hollowed claw from a ker.";
            this.intForDes = 6;
            this.intDescription = "This is a trophy that shows that one has bested a ker.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 20.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 8); // at max, sell for 20.
        }
        else if (this.type == "gulfreyMandibles")
        {
            //For All Items
            this.identity = "Gulfrey Mandibles";
            this.weight = 3;
            this.size = 17;
            this.description = "The mandibles of a gulfrey.";
            this.intForDes = 2;
            this.intDescription = "Gulfreys use their mandibles to grab and devour their prey.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 5); // at max, buy for 19.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 5); // at max, sell for 15.
        }
        else if (this.type == "rawGulfreyFlesh")
        {
            //For All Items
            this.identity = "Raw Gulfrey Flesh";
            this.weight = 1;
            this.size = 17;
            this.description = "The slick and tender meat of a gulfrey. It has a sweet and meaty flavor.";
            this.intForDes = 12;
            this.intDescription = "The meat is supposed to be eaten raw, because when it is cooked it curdles and darkens.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 10); // at max, buy for 9.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 10); // at max, sell for 8.
        }
        else if (this.type == "gulfreyMeat")
        {
            //For All Items
            this.identity = "Gulfrey Meat";
            this.weight = 1;
            this.size = 17;
            this.description = "The cooked gulfrey meat is curdled, gooey, and quite frankly, disgusting!";
            this.intForDes = 8;
            this.intDescription = "Gulfrey meat is not meant to be cooked; cooking the meat ruins it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 0;
            this.ingredients = [["Raw Gulfrey Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "rawMudflyFlesh")
        {
            //For All Items
            this.identity = "Raw Mudfly Flesh";
            this.weight = 0.6;
            this.size = 9;
            this.description = "The horrible smelling green mush-sac like flesh of a mudfly.";
            this.intForDes = 8;
            this.intDescription = "Nobody who doesn't have to eat mudfly meat will, especially not raw.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.25; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mudflyMeat")
        {
            //For All Items
            this.identity = "Mudfly Meat";
            this.weight = 0.5;
            this.size = 9;
            this.description = "A snot green meat that has the texture of lubricated, jello-soft, rubber.";
            this.intForDes = 8;
            this.intDescription = "This is almost certainly one of the most disgusting 'foods' ever.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Raw Mudfly Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mudflyMold")
        {
            //For All Items
            this.identity = "White Mud Rot";
            this.weight = 0.5;
            this.size = 9;
            this.description = "This smells so terrible that you are tempted to pull the face off of your skull.";
            this.intForDes = 8;
            this.intDescription = "Mudfly flesh when kept properly can host a specific mold that is useful in alchemy and extremely deadly.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = -(7/10 * player.health); //heals health.
            this.generation = -55; //recoops lost energy.
            this.replenish = 14; //restores will.

            //ability
            this.ability = "poisonIV";

            //Crafting
            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Raw Mudfly Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 43; // at max, buy for 43.
            this.sellValue = 43; // at max, sell for 43.
        }
        else if (this.type == "rawTorperFlesh")
        {
            //For All Items
            this.identity = "Raw Torper Flesh";
            this.weight = 1;
            this.size = 14;
            this.description = "The slick and rubbery flesh of a Torper.";
            this.intForDes = 9;
            this.intDescription = "Although the meat has no negative properties raw, it tastes much better cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 10); // at max, buy for 6.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 25); // at max, sell for 6.
        }
        else if (this.type == "torperMeat")
        {
            //For All Items
            this.identity = "Torper Meat";
            this.weight = 1;
            this.size = 14;
            this.description = "The mild, yet scrumptious meat of a Torper.";
            this.intForDes = 2;
            this.intDescription = "The meat is a bit chewy, but not tough at all, perhaps it would go well with some honey...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Raw Torper Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 25); // at max, buy for 15.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 15); // at max, sell for 13.
        }
        else if (this.type == "varnMeat")
        {
            //For All Items
            this.identity = "Varn Meat";
            this.weight = 1;
            this.size = 14;
            this.description = "The cooked flesh of a varn.";
            this.intForDes = 0;
            this.intDescription = "This meat is actually pretty good tasting!";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Raw Varn Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
        }
        else if (this.type == "rawVarnFlesh")
        {
            //For All Items
            this.identity = "Raw Varn Flesh";
            this.weight = 1;
            this.size = 14;
            this.description = "The raw flesh of a varn.";
            this.intForDes = 7;
            this.intDescription = "There is not much demand for varn flesh raw, but cooked, that is another story.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "crabFlesh")
        {
            //For All Items
            this.identity = "Crab Flesh";
            this.weight = 0.9;
            this.size = 11;
            this.description = "The raw flesh of a crab.";
            this.intForDes = 4;
            this.intDescription = "Crab flesh is safe to eat raw, but is especially tasty when cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = -1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 10); // at max, sell for 7.
        }
        else if (this.type == "crabMeat")
        {
            //For All Items
            this.identity = "Crab Meat";
            this.weight = 0.9;
            this.size = 11;
            this.description = "Poached crab meat.";
            this.intForDes = 3;
            this.intDescription = "Crab meat is eaten commonly throughout the freydic north, but is highly valued in some traditional dishes.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 5;
            this.intForCraft = 10;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Crab Flesh", 5], ["Bucket of Water", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 50); // at max, buy for 14.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 4.54545454); // at max, sell for 14.
        }
        else if (this.type == "rawCrabClaw")
        {
            //For All Items
            this.identity = "Raw Crab Claw";
            this.weight = 5.2;
            this.size = 19;
            this.description = "A raw crab claw full of fresh crab flesh.";
            this.intForDes = 4;
            this.intDescription = "Crab flesh is safe to eat raw, but is especially tasty when cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = -2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 25); // at max, buy for 18.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 15); // at max, sell for 15.
        }
        else if (this.type == "crabClaw")
        {
            //For All Items
            this.identity = "Crab Claw";
            this.weight = 5.2;
            this.size = 19;
            this.description = "A roasted crab claw full of fresh crab meat.";
            this.intForDes = 9;
            this.intDescription = "Crab claw is considered a luxurious way to eat crab in freydic culture.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 17; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Crab Claw", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 10); // at max, buy for 35.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
        }
        else if (this.type == "butteredCrab")
        {
            //For All Items
            this.identity = "Buttered Crab";
            this.weight = 0.9;
            this.size = 11;
            this.description = "A bowl of crab meat enriched with melted waanti butter.";
            this.intForDes = 0;
            this.intDescription = "The rich creamy flavor of the butter compliments the oceanic flavors in the crab meat, though the gamey taste is a bit strange.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["woodenBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 10; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.125; //recoops lost energy.
            this.replenish = 0.075; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 3;
            this.intForCraft = 10;
            this.ingredients = [["Crab Meat", 2], ["Waanti Butter", 1], ["Wooden Bowl", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 25); // at max, buy for 18.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 25); // at max, sell for 18.
        }
        else if (this.type == "crabChowder")
        {
            //For All Items
            this.identity = "Crab Chowder";
            this.weight = 1.5;
            this.size = 11;
            this.description = "A gamey chowder of thickened waanti milk, crab and potatoes.";
            this.intForDes = 1;
            this.intDescription = "This is a considered a delicacy in freydic culture, though it is eaten rather commonly among members of the merchant class.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["woodenBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 3; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 16;
            this.intForCraft = 20;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Crab Meat", 2], ["Potato", 3], ["Waanti Butter", 1], ["Bucket of Waanti Milk", 1], ["Harst Flour", 2], ["Salt", 1], ["Wooden Bowl", 16]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 25); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "crabBisque")
        {
            //For All Items
            this.identity = "Crab Bisque";
            this.weight = 1.5;
            this.size = 11;
            this.description = "A grain thickened soup flavored with crab.";
            this.intForDes = 1;
            this.intDescription = "This style of soup is eaten commonly along the various freydic coastlines.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["woodenBowl", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0.05; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 14;
            this.intForCraft = 11;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Crab Meat", 2], ["Harst Grain", 4], ["Bucket of Water", 1], ["Wooden Bowl", 14]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "crawdid")
        {
            //For All Items
            this.identity = "Crawdid";
            this.weight = 0.4;
            this.size = 8;
            this.description = "A live crawdid.";
            this.intForDes = 0;
            this.intDescription = "Crawdids are hardshelled arthropods with two pincers, six eyes, and a pair of antennea.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1;
        }
        else if (this.type == "crawdidTail")
        {
            //For All Items
            this.identity = "Crawdid Tail";
            this.weight = 0.4;
            this.size = 11;
            this.description = "The cleaned veined and poached tail of a crawdid drizzled with naaprid butter.";
            this.intForDes = 0;
            this.intDescription = "Crawdid meat is tender and has a particular spiceyness to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 2.5; //satisfies hunger.
            this.thirst = 0.25; //quenches thirst.
            this.warmth = 2.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.025; //recoops lost energy.
            this.replenish = 0.01; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 8;
            this.intForCraft = 7;
            this.biproducts = [[new Item("bucket", false), 1]];
            this.ingredients = [["Crawdid", 8], ["Naaprid Butter", 1], ["Bucket of Water", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "viperMeat")
        {
            //For All Items
            this.identity = "Viper Meat";
            this.weight = 1;
            this.size = 14;
            this.description = "The cooked flesh of a viper.";
            this.intForDes = 0;
            this.intDescription = "It is chewy and sort of rubbery in texture and has a mild meaty bland taste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3.5; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0.1; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.05; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Raw Viper Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "rawViperFlesh")
        {
            //For All Items
            this.identity = "Raw Viper Flesh";
            this.weight = 1;
            this.size = 14;
            this.description = "The raw flesh of a viper.";
            this.intForDes = 3;
            this.intDescription = "Although Vipers are poisonous their flesh is not.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -0.5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "viperVenomGland")
        {
            //For All Items
            this.identity = "Viper Venom Gland";
            this.weight = 0.05;
            this.size = 7;
            this.description = "The gland within a viper that allows it to produce its venom.";
            this.intForDes = 14;
            this.intDescription = "Certain reactants in this venom could be used for alchemic practices if they were to be fermented.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 31 - Math.floor(player.getCharisma() / 10); // at max, buy for 26.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 5); // at max, sell for 19.
        }
        else if (this.type == "fermentedViperVenomGland")
        {
            //For All Items
            this.identity = "Fermented Viper Venom Gland";
            this.weight = 1;
            this.size = 9;
            this.description = "The sour smelling bulged swolen fermented venom gland from a viper.";
            this.intForDes = 13;
            this.intDescription = "The poison becomes slightly less toxic after fermentation; this acts as a changer.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonI";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 34 - Math.floor(player.getCharisma() / 10); // at max, buy for 29.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 5); // at max, sell for 23.
        }
        else if (this.type == "viperSnakeSkin")
        {
            //For All Items
            this.identity = "Viper Snake Skin";
            this.weight = 0.85;
            this.size = 13;
            this.description = "The green scaled skin of a viper.";
            this.intForDes = 11;
            this.intDescription = "This snake skin can be sewn into outfits and it can also be used as an alchemy ingredient for making potions.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "rattlerVenomGland")
        {
            //For All Items
            this.identity = "Rattler Venom Gland";
            this.weight = 0.05;
            this.size = 4;
            this.description = "The gland within a rattler that allows it to produce its venom.";
            this.intForDes = 4;
            this.intDescription = "Rattler venom is often used to coat the tips of blow darts.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonIII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "taipanSnakeSkin")
        {
            //For All Items
            this.identity = "Taipan Snake Skin";
            this.weight = 0.85;
            this.size = 13;
            this.description = "The thin light green scaled skin of a taipan.";
            this.intForDes = 13;
            this.intDescription = "This type of snake skin can be used as weak amplifier in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 15); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "taipanVenomGland")
        {
            //For All Items
            this.identity = "Taipan Venom Gland";
            this.weight = 0.05;
            this.size = 4;
            this.description = "The gland within a taipan that allows it to produce its venom.";
            this.intForDes = 2;
            this.intDescription = "This is very poisonous, what might happen if it were to find its way into someone's wine?.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonIV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 25); // at max, buy for 9.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
        }
        else if (this.type == "taipanMeat")
        {
            //For All Items
            this.identity = "Taipan Meat";
            this.weight = 0.55;
            this.size = 7;
            this.description = "The cooked meat from a taipan.";
            this.intForDes = 0;
            this.intDescription = "It has a meaty texture and a delectable taste to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 7; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 2; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Raw Taipan Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "rawTaipanFlesh")
        {
            //For All Items
            this.identity = "Raw Taipan Flesh";
            this.weight = 0.6;
            this.size = 14;
            this.description = "The raw flesh of a taipan.";
            this.intForDes = 3;
            this.intDescription = "When cooked, taipan flesh makes for a tasty snack.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 0.3; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "rawBloodwormFlesh")
        {
            //For All Items
            this.identity = "Raw Bloodworm Flesh";
            this.weight = 2;
            this.size = 9;
            this.description = "The limp raw flesh of a bloodworm.";
            this.intForDes = 0;
            this.intDescription = "This smells absolutely putrid... It likely will not stay in your belly long if you eat it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0.9; //satisfies hunger.
            this.thirst = 0.75; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2.5; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "foodPoisoning";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "bloodwormMeat")
        {
            //For All Items
            this.identity = "Bloodworm Meat";
            this.weight = 1.25;
            this.size = 9;
            this.description = "The bloated cooked meat of a bloodworm. It is rubbery and bland with a muddy, fishy aftertaste.";
            this.intForDes = 2;
            this.intDescription = "When the meat is cooked it bloats.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6.5; //satisfies hunger.
            this.thirst = 0.1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1.5; //recoops lost energy.
            this.replenish = -0.5; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "motylekhLeg")
        {
            //For All Items
            this.identity = "Motylekh Leg";
            this.weight = 6.6;
            this.size = 20;
            this.description = "The leg of a motylekh filled with its tender raw flesh.";
            this.intForDes = 0;
            this.intDescription = "Eating this raw tastes slimey and unappetizing...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -4; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 25); // at max, buy for 9.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
        }
        else if (this.type == "roastedMotylekhLeg")
        {
            //For All Items
            this.identity = "Roasted Motylekh Leg";
            this.weight = 6.4;
            this.size = 20;
            this.description = "The roasted leg of a motylekh filled with tender creamy meat.";
            this.intForDes = 0;
            this.intDescription = "This meat is considered a delicacy and it is customary to eat it plain in order to savour its subtle flavours.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 23; //satisfies hunger.
            this.thirst = 6; //quenches thirst.
            this.warmth = 8; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.2; //restores will.

            //ability
            this.ability = "satiation";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Motylekh Leg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 12); // at max, buy for 20.
            this.sellValue = 16 + Math.floor(player.getCharisma() / 12); // at max, sell for 20.
        }
        else if (this.type == "rawTurkeyFlesh")
        {
            //For All Items
            this.identity = "Raw Turkey Carcass";
            this.weight = 18;
            this.size = 20;
            this.description = "The raw carcass of a turkey.";
            this.intForDes = 2;
            this.intDescription = "Eating this raw would give you gut worms, and it is pale, moist and slimy. Cook it first... if you can.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 3; //satisfies hunger.
            this.thirst = 0.9; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -5; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "gutWorms";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 15); // at max, buy for 10.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 15); // at max, sell for 10.
        }
        else if (this.type == "turkeyMeat")
        {
            //For All Items
            this.identity = "Turkey Roast";
            this.weight = 17;
            this.size = 20;
            this.description = "A tender slow roasted whole turkey that is well basted and caramelized.";
            this.intForDes = 2;
            this.intDescription = "Turkey is relatively common in Thengaria, but it is eaten at lordly feasts all the same. No traditional Thengan feast is complete without a large roasted turkey...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 55; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 20; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1.5; //recoops lost energy.
            this.replenish = 0.5; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Raw Turkey Carcass", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 73 - Math.floor(player.getCharisma() / 10); // at max, buy for 68.
            this.sellValue = 63 + Math.floor(player.getCharisma() / 10); // at max, sell for 68.
        }
        else if (this.type == "rawBoaFlesh")
        {
            //For All Items
            this.identity = "Raw Boa Flesh";
            this.weight = 3.7;
            this.size = 15;
            this.description = "A large cut of raw flesh from a boa constrictor.";
            if (player.raceName == "Cephrite")
            {
                this.intForDes = 0;
                this.intDescription = "Boa is a traditional Cephrian food; it is sometimes eaten raw, but more often eaten cooked.";
            }
            else
            {
                this.intForDes = 2;
                this.intDescription = "Boa is traditionally eaten by the Cephrian people. it can safely be eaten raw, but it tastes better cooked.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -1; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 50); // at max, buy for 5.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
        }
        else if (this.type == "boaMeat")
        {
            //For All Items
            this.identity = "Boa Meat";
            this.weight = 3.5;
            this.size = 15;
            this.description = "A large cooked section of meat from a boa constrictor.";
            if (player.raceName == "Cephrite")
            {
                this.intForDes = 0;
                this.intDescription = "Boa is a traditional Cephrian food. It has a relatively bland, savoury flavour and is a little chewy.";
            }
            else
            {
                this.intForDes = 2;
                this.intDescription = "Boa is traditionally eaten by the Cephrian people. It has a relatively bland, savoury flavour and is a little chewy.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 14; //satisfies hunger.
            this.thirst = 0.45; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            if (player.raceName == "Cephrite")
            {
                this.ability = "satiate";
            }
            else
            {
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Raw Boa Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 50); // at max, buy for 12.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 25); // at max, sell for 12.
        }
        else if (this.type == "marinatedGazelle")
        {
            //For All Items
            this.identity = "Marinated Gazelle Roast";
            this.weight = 3;
            this.size = 13;
            this.description = "The sensuous rich well marble meat of a gazelle marinated with zaf spice and saffron.";
            this.intForDes = 3;
            this.intDescription = "It is gamey, fatty, and saffron-y, and it has a highly potent mouth numbing insecty spiciness to it.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 23; //satisfies hunger.
            this.thirst = 1.25; //quenches thirst.
            this.warmth = 13; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.025; //restores will.

            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.intDescription = "This is so spicy that the smell burns your nose; eating it is out of the question.";
                this.heal = -4; //heals health.
                this.generation = -8; //recoops lost energy.
                this.replenish = -6; //restores will.
                this.ability = "foodPoisoning";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Raw Gazelle Flesh", 1], ["Saffron", 2], ["Zaf Beetle Whiskers", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 47; // at max, buy for 47.
            this.sellValue = 47; // at max, sell for 47.
        }
        else if (this.type == "boaPlatter")
        {
            //For All Items
            this.identity = "Marinated Boa Roast";
            this.weight = 5;
            this.size = 15;
            this.description = "Boa meat marinated with onions, zaf spice, and saffron that is served over a bed of sliced eggplant.";
            this.intForDes = 0;
            this.intDescription = "The eggplant soaks up the flavour of the spices and the slight savoury flavour of the boa.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 32; //satisfies hunger.
            this.thirst = 2.45; //quenches thirst.
            this.warmth = 13; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "satiate";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Boa Flesh", 1], ["Sliced Eggplant", 2], ["Chopped Onion", 2], ["Saffron", 1], ["Zaf Beetle Whiskers", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 32 - Math.floor(player.getCharisma() / 25); // at max, buy for 30.
            this.sellValue = 29 + Math.floor(player.getCharisma() / 50); // at max, sell for 30.
        }
        else if (this.type == "piranhaPlatter")
        {
            //For All Items
            this.identity = "Marinated Sliced Piranha";
            this.weight = 3;
            this.size = 14;
            this.description = "Sliced piranha meat flavoured with zaf spice and saffron.";
            this.intForDes = 0;
            this.intDescription = "The fish is fatty and spicy with a buggy aftertaste.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 13; //satisfies hunger.
            this.thirst = 0.9; //quenches thirst.
            this.warmth = 7; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.1; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            if (player.raceName == "Kel" || player.raceName == "Nirwaden" || player.raceName == "Orgell" || player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.ability = "satiation";
            }
            else
            {
                this.ability = "none";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Piranha", 1], ["Saffron", 1], ["Zaf Beetle Whiskers", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 15); // at max, sell for 13.
        }
        else if (this.type == "araneaFang")
        {
            //For All Items
            this.identity = "Aranea Fang";
            this.weight = 0.9;
            this.size = 7;
            this.description = "The long dark fang of an aranea.";
            this.intForDes = 9;
            this.intDescription = "Aside from being a neat trophy, this can be used in alchemy as a catalyst.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 50); // at max, buy for 10.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 50); // at max, sell for 10.
        }
        else if (this.type == "viudaFang")
        {
            //For All Items
            this.identity = "Viuda Fang";
            this.weight = 0.06;
            this.size = 6;
            this.description = "The curved black fang of a viuda.";
            this.intForDes = 1;
            this.intDescription = "This is used to administer the viuda's extremely deadly venom.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
        }
        else if (this.type == "viudaVenomSac")
        {
            //For All Items
            this.identity = "Viuda Venom Sac";
            this.weight = 0.57;
            this.size = 5;
            this.description = "Viuda venom swells within the thin fleshy sac; it is one of the most deadly venoms produced by an animal.";
            this.intForDes = 1;
            this.intDescription = "Don't eat it; it is very fragile so it is hard to harvest intact.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 66 - Math.floor(player.getCharisma() / 3); // at max, buy for 51.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 2); // at max, sell for 44.
        }
        else if (this.type == "saliseaVenomSac")
        {
            //For All Items
            this.identity = "Salisea Venom Sac";
            this.weight = 2;
            this.size = 7;
            this.description = "A leaping salisea's venom producing gland that is swolen with the venom it has created so far.";
            this.intForDes = 1;
            this.intDescription = "If you like the taste of your own melted organs, go ahead and eat it...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonIV";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 5); // at max, buy for 40.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 2); // at max, sell for 40.
        }
        else if (this.type == "torperVenomSac")
        {
            //For All Items
            this.identity = "Torper Venom Sac";
            this.weight = 1;
            this.size = 10;
            this.description = "A torper's venom producing gland that is swolen with the venom it has created so far.";
            this.intForDes = 0;
            this.intDescription = "Oh by the way, don't eat it...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 0; //satisfies hunger.
            this.thirst = 0; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "poisonIII";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 3); // at max, buy for 29.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 29.
        }
        else if (this.type == "rawGhoulFlyStomach")
        {
            //For All Items
            this.identity = "Raw Ghoul Fly Stomach";
            this.weight = 4;
            this.size = 15;
            this.description = "The raw dripping stomach of a ghoul fly. It is full of digestive gasses that allow ghoul flies to float on the water.";
            this.intForDes = 5;
            this.intDescription = "Ghoul fly stomach can be made brittle by drying it with salt.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "brittleGhoulFlyStomach")
        {
            //For All Items
            this.identity = "Brittle Ghoul Fly Stomach";
            this.weight = 3;
            this.size = 15;
            this.description = "The course, dry, and brittle stomach of a ghoul fly.";
            this.intForDes = 1;
            this.intDescription = "This can be crushed and powdered.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 14;
            this.intForCraft = 5;
            this.ingredients = [["Raw Ghoul Fly Stomach", 14], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "ghoulFlyPowder")
        {
            //For All Items
            this.identity = "Ghoul Fly Powder";
            this.weight = 1.5;
            this.size = 14;
            this.description = "A powder made from crushed ghoul fly stomach.";
            this.intForDes = 1;
            this.intDescription = "This can be used as an amplifier and a changer in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 1;
            this.ingredients = [["Brittle Ghoul Fly Stomach", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "ghoulFlyWings")
        {
            //For All Items
            this.identity = "Ghoul Fly Wings";
            this.weight = 1.5;
            this.size = 14;
            this.description = "The wings of a ghoul fly.";
            this.intForDes = 2;
            this.intDescription = "Severed ghoul fly wings have no practical use.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "torperFuzz")
        {
            //For All Items
            this.identity = "Torper Fuzz";
            this.weight = 1;
            this.size = 15;
            this.description = "The fur from a torper.";
            this.intForDes = 44;
            this.intDescription = "Torper fuzz is highly valuable and used in expensive clothing manufacture. Not only must the fuzz be procured from a torper, a giant deadly flying insect, the individual harvesting it must be extremely skilled or else it will come off in shreds.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 1.63); // at max, buy for 60.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 1.63); // at max, sell for 60.
        }
        else if (this.type == "fletterWing")
        {
            //For All Items
            this.identity = "Fletter Wing";
            this.weight = 0.2;
            this.size = 9;
            this.description = "The sleek partially transparent wing of a fletter.";
            this.intForDes = 2;
            this.intDescription = "Fletters have four wings; this can be used as an amplifier in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "xormidRemainsLarge")
        {
            //For All Items
            this.identity = "Xormid Remains";
            this.weight = 20;
            this.size = 14;
            this.description = "The black coagulated ooze of a xormid.";
            this.intForDes = 11;
            this.intDescription = "This black ooze radiates evil and should be avoided.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 11; // at max, sell for 11.
        }
        else if (this.type == "xormidRemainsSmall")
        {
            //For All Items
            this.identity = "Xormid Remains";
            this.weight = 14;
            this.size = 14;
            this.description = "The black coagulated ooze of a xormid.";
            this.intForDes = 11;
            this.intDescription = "This black ooze radiates evil and should be avoided.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "smlGlutidOoze")
        {
            //For All Items
            this.identity = "Glutid Ooze";
            this.weight = 30;
            this.size = 14;
            this.description = "The sticky, super-toxic, highly-acidic, blue ooze of a glutid.";
            this.intForDes = 25;
            this.intDescription = "The ooze will boil if held in a temperature warmer than freezing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 10); // at max, buy for 20.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 5); // at max, sell for 20.
        }
        else if (this.type == "medGlutidOoze")
        {
            //For All Items
            this.identity = "Glutid Ooze";
            this.weight = 50;
            this.size = 14;
            this.description = "The sticky, super-toxic, highly-acidic, blue ooze of a glutid.";
            this.intForDes = 25;
            this.intDescription = "The ooze will boil if held in a temperature warmer than freezing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35 - Math.floor(player.getCharisma() / 10); // at max, buy for 30.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 5); // at max, sell for 30.
        }
        else if (this.type == "lrgGlutidOoze")
        {
            //For All Items
            this.identity = "Glutid Ooze";
            this.weight = 90;
            this.size = 14;
            this.description = "The sticky, super-toxic, highly-acidic, blue ooze of a glutid.";
            this.intForDes = 25;
            this.intDescription = "The ooze will boil if held in a temperature warmer than freezing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 10); // at max, buy for 50.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 5); // at max, sell for 50.
        }
        else if (this.type == "pelcridOozeRemains")
        {
            //For All Items
            this.identity = "Pelcrid Ooze Remains";
            this.weight = 3.5;
            this.size = 17;
            this.description = "The discoloured and deformed remains of a pelcrid.";
            this.intForDes = 17;
            this.intDescription = "The energy in the living ooze affects its state, when it dies it changes into a completely different substance.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 10); // at max, buy for 15.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 15); // at max, sell for 15.
        }
        else if (this.type == "crenidRemains")
        {
            //For All Items
            this.identity = "Crenid Ooze Remains";
            this.weight = 5.5;
            this.size = 9;
            this.description = "The coagulated lifeless remains of a crenid.";
            this.intForDes = 17;
            this.intDescription = "The energy in the living ooze affects its consistency, and when it dies it thickens and bubbles up.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "smlOolidOozeRemains")
        {
            //For All Items
            this.identity = "Oolid Ooze Remains";
            this.weight = 6.6;
            this.size = 14;
            this.description = "The discoloured lifeless remains of an oolid.";
            this.intForDes = 15;
            this.intDescription = "The energy in the living ooze affects its colour, and when it dies the ooz's colour fades.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 15); // at max, buy for 9.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "medOolidOozeRemains")
        {
            //For All Items
            this.identity = "Oolid Ooze Remains";
            this.weight = 20.1;
            this.size = 20;
            this.description = "The discoloured lifeless remains of an oolid.";
            this.intForDes = 15;
            this.intDescription = "The energy in the living ooze affects its colour, and when it dies the ooz's colour fades.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 12); // at max, buy for 12.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 12); // at max, sell for 7.
        }
        else if (this.type == "lrgOolidOozeRemains")
        {
            //For All Items
            this.identity = "Oolid Ooze Remains";
            this.weight = 74.3;
            this.size = 28;
            this.description = "The discoloured lifeless remains of an oolid.";
            this.intForDes = 15;
            this.intDescription = "The energy in the living ooze affects its colour, and when it dies the ooz's colour fades.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 42 - Math.floor(player.getCharisma() / 5); // at max, buy for 32.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 5); // at max, sell for 32.
        }
        else if (this.type == "mornidOozeRemains")
        {
            //For All Items
            this.identity = "Mornid Ooze Remains";
            this.weight = 11;
            this.size = 14;
            this.description = "A hunk of lifeless grey ooze.";
            this.intForDes = 15;
            this.intDescription = "Mornids are one of the few oozes that are completely safe to touch; they produce acid as needed to digest prey, but otherwise are not acidic.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "shehidOozeSml")
        {
            //For All Items
            this.identity = "Shehid Ooze";
            this.weight = 9;
            this.size = 15;
            this.description = "The toxic gelatinous body of a shehid.";
            this.intForDes = 10;
            this.intDescription = "From whats left among the goo it looks like the primary diet of this creature was lizards and insects.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 47 - Math.floor(player.getCharisma() / 3); // at max, buy for 32.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 2); // at max, sell for 32.
        }
        else if (this.type == "shehidShellSml")
        {
            //For All Items
            this.identity = "Shehid Shell";
            this.weight = 21;
            this.size = 16;
            this.description = "The shell of a shehid; it is extremely durable and hard.";
            this.intForDes = 1;
            this.intDescription = "The inside of the shell has developed a marvelous coating that glimmers beautifully in even the dimmest lighting.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 56 - Math.floor(player.getCharisma() / 3); // at max, buy for 41.
            this.sellValue = 26 + Math.floor(player.getCharisma() / 3); // at max, sell for 41.
        }
        else if (this.type == "shehidOozeLrg")
        {
            //For All Items
            this.identity = "Shehid Ooze";
            this.weight = 29;
            this.size = 25;
            this.description = "The toxic gelatinous body of a large shehid.";
            this.intForDes = 4;
            this.intDescription = "From the melted carcasses left among the goo it looks like it would be harder to figure out what this creature doesn't eat.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 102 - Math.floor(player.getCharisma() / 1.5); // at max, buy for 69.
            this.sellValue = 35 + Math.floor(player.getCharisma() / 1.5); // at max, sell for 68.
        }
        else if (this.type == "shehidShellLrg")
        {
            //For All Items
            this.identity = "Shehid Shell";
            this.weight = 65;
            this.size = 16;
            this.description = "The shell of a large shehid; it is extremely durable and hard.";
            this.intForDes = 1;
            this.intDescription = "The inside of the shell has developed a marvelous coating that glimmers beautifully in even the dimmest lighting.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 135 - Math.floor(player.getCharisma() / 1); // at max, buy for 85.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 2); // at max, sell for 85.
        }
        else if (this.type == "salt")
        {
            //For All Items
            this.identity = "Salt";
            this.weight = 0.2;
            this.size = 6;
            this.description = "A salty mineral.";
            this.intForDes = 5;
            this.intDescription = "Salt is found in oceanic water, and in some mineral deposits.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "varnPelt")
        {
            //For All Items
            this.identity = "Varn Pelt";
            this.weight = 1;
            this.size = 15;
            this.description = "The fur of a wild varn.";
            this.intForDes = 2;
            this.intDescription = "This can be used to make leather armour and fur clothing.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "cruorccaNeedle")
        {
            //For All Items
            this.identity = "Cruorcca Needle";
            this.weight = 0.06;
            this.size = 5;
            this.description = "An extremely sharp and hard orangish yellow needle of the cruorcca plant.";
            this.intForDes = 18;
            this.intDescription = "It can be used in alchemy as a strong amplifier for certain recipes.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 5); // at max, buy for 8.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 25); // at max, sell for 8.
        }
        else if (this.type == "sciltArm")
        {
            //For All Items
            this.identity = "Scilt Arm";
            this.weight = 0.9;
            this.size = 7;
            this.description = "The long pointed arm of a scilt plant.";
            this.intForDes = 18;
            this.intDescription = "The sap inside can be dried into a chewy gum-like substance.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "armadiiLeg")
        {
            //For All Items
            this.identity = "Armadii Leg";
            this.weight = 1.6;
            this.size = 8;
            this.description = "The thick stubby leg of an armadii desert isopod.";
            this.intForDes = 1;
            this.intDescription = "This can be roasted and eaten.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "roastedArmadiiLeg")
        {
            //For All Items
            this.identity = "Roasted Armadii Leg";
            this.weight = 1.6;
            this.size = 8;
            this.description = "The roasted leg of an armadii desert isopod.";
            this.intForDes = 0;
            this.intDescription = "It is crunchy on the outside and chewy on the inside, with a natural sweet spiciness that comes along with the meatiness of it...";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 5; //satisfies hunger.
            this.thirst = 0.5; //quenches thirst.
            this.warmth = 3.5; //warms player.
            this.heal = 0; //heals health.
            this.generation = -3; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Armadii Leg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "whipScorpionFang")
        {
            //For All Items
            if (player.raceName == "Zetian")
            {
                this.identity = "Arachnis Fang";

                this.weight = 1.1;
                this.size = 5;
                this.description = "A long black fang from an arachnis.";
                this.intForDes = 11;
                this.intDescription = "The tender marrow inside of this fang can be used as a changer in alchemy.";
            }
            else
            {
                this.identity = "Whip Scorpion Fang";

                this.weight = 1.1;
                this.size = 5;
                this.description = "A long black fang from a whip scorpion.";
                this.intForDes = 11;
                this.intDescription = "The tender marrow inside of this fang can be used as a changer in alchemy.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "scorpionClaw")
        {
            //For All Items
            this.identity = "Scorpion Claw";
            this.weight = 16;
            this.size = 14;
            this.description = "The large armoured claw of a giant black scorpion.";
            this.intForDes = 1;
            this.intDescription = "This is much too hard to break into with one's hands, you will need a tool to get the meat out...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 18; // at max, sell for 18.
        }
        else if (this.type == "whipScorpionTail")
        {
            //For All Items
            if (player.raceName == "Zetian")
            {
                this.identity = "Arachnis Tail";

                this.weight = 40;
                this.size = 20;
                this.description = "The large armoured tail of an arachnis.";
                this.intForDes = 1;
                this.intDescription = "In order to access the flesh one would have to break away the shell with a tool.";
            }
            else
            {
                this.identity = "Whip Scorpion Tail";

                this.weight = 40;
                this.size = 20;
                this.description = "The large armoured tail of a whip scorpion.";
                this.intForDes = 1;
                this.intDescription = "In order to access the flesh one would have to break away the shell with a tool.";
            }

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11; // at max, buy for 11.
            this.sellValue = 11; // at max, sell for 11.
        }
        else if (this.type == "rawWhipScorpionFlesh")
        {
            //For All Items
            if (player.raceName == "Zetian")
            {
                this.identity = "Raw Arachnis Flesh";

                this.weight = 15;
                this.size = 20;
                this.description = "The large fleshy tail of an arachnis.";
                this.intForDes = 3;
                this.intDescription = "Though it is safe to eat raw, it is much better cooked.";
            }
            else
            {
                this.identity = "Raw Whip Scorpion Flesh";
                this.weight = 15;
                this.size = 20;
                this.description = "The large fleshy tail of a whip scorpion.";
                this.intForDes = 3;
                this.intDescription = "Though it is safe to eat raw, it is much better cooked.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 4; //satisfies hunger.
            this.thirst = 2; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = -9; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            if (player.raceName == "Zetian")
            {
                this.ingredients = [["Arachnis Tail", 1], ["Zetian War Pick", 1]];
                this.biproducts = [[new Item("zetianWarPick", false), 1]];
            }
            else
            {
                this.ingredients = [["Whip Scorpion Tail", 1], ["Hammer", 1]];
                this.biproducts = [[new Item("hammer", false), 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12; // at max, buy for 12.
            this.sellValue = 12; // at max, sell for 12.
        }
        else if (this.type == "whipScorpionMeat")
        {
            //For All Items
            if (player.raceName == "Zetian")
            {
                this.identity = "Arachnis Meat";

                this.weight = 14.5;
                this.size = 20;
                this.description = "The large roasted meaty tail of an arachnis.";
                this.intForDes = 0;
                this.intDescription = "It has a thick and sort of chewy texture and a meaty, but mildly sweet flavour.";
            }
            else
            {
                this.weight = 14.5;
                this.size = 20;
                this.description = "The large roasted meaty tail of a whip scorpion.";
                this.intForDes = 0;
                this.intDescription = "It has a thick and sort of chewy texture and a meaty, but mildly sweet flavour.";
            }

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 25; //satisfies hunger.
            this.thirst = 2.5; //quenches thirst.
            this.warmth = 19; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Zetian")
            {
                this.intForCraft = 22;
                this.ingredients = [["Raw Arachnis Flesh", 1]];
            }
            else
            {
                this.intForCraft = 27;
                this.ingredients = [["Raw Whip Scorpion Flesh", 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29; // at max, buy for 29.
            this.sellValue = 29; // at max, sell for 29.
        }
        else if (this.type == "scorpionClawFeast")
        {
            //For All Items
            this.identity = "Roasted Scorpion Claw";
            this.weight = 16;
            this.size = 16;
            this.description = "The giant roasted claw of a black scorpion.";
            this.intForDes = 4;
            this.intDescription = "The heat from roasting the claw whole caused the shell to crack apart revealing the tender meat inside.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 31; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 15; //warms player.
            this.heal = 0; //heals health.
            this.generation = 1.25; //recoops lost energy.
            this.replenish = 0; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Scorpion Claw", 1], ["Salt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 36; // at max, buy for 36.
            this.sellValue = 36; // at max, sell for 36.
        }
        else if (this.type == "rawScorpionFlesh")
        {
            //For All Items
            this.identity = "Raw Scorpion Flesh";
            this.weight = 1.4;
            this.size = 9;
            this.description = "The smooth and tender flesh of a giant black scorpion.";
            this.intForDes = 5;
            this.intDescription = "Scorpion flesh is a delicacy raw, but it is also tasty cooked.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 6; //satisfies hunger.
            this.thirst = 4; //quenches thirst.
            this.warmth = 0; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.15; //recoops lost energy.
            this.replenish = 0; //restores will.
            this.cooling = 3; //cools player.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 5;
            this.intForCraft = 2;
            if (player.raceName == "Zetian")
            {
                this.ingredients = [["Scorpion Claw", 1], ["Zetian War Pick", 1]];
                this.biproducts = [[new Item("zetianWarPick", false), 1]];
            }
            else
            {
                this.ingredients = [["Scorpion Claw", 1], ["Hammer", 1]];
                this.biproducts = [[new Item("hammer", false), 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5; // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "scorpionMeat")
        {
            //For All Items
            this.identity = "Scorpion Meat";
            this.weight = 1.3;
            this.size = 9;
            this.description = "The toasty, crisped, outer skin gives way to the smooth and tender cream coloured flesh.";
            this.intForDes = 5;
            this.intDescription = "Scorpion meat is always cooked between rare and medium rare, otherwise it would taste tough and unseemly.";

            //Define Utility
            this.utility = "food";

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 8; //satisfies hunger.
            this.thirst = 3; //quenches thirst.
            this.warmth = 4; //warms player.
            this.heal = 0; //heals health.
            this.generation = 0.2; //recoops lost energy.
            this.replenish = 0.1; //restores will.

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Raw Scorpion Flesh", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9; // at max, buy for 9.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "shotShooter")
        {
            //For All Items
            this.identity = "Nirwaden Fusil Prototype";
            this.weight = 2.6;
            this.size = 15;
            this.description = "The idea was based on the outlanders' powder guns.";
            this.intForDes = 35;
            this.intDescription = "This invention is not functional as it uses powdered coal instead of black powder.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30; // at max, buy for 30.
            this.sellValue = 20; // at max, sell for 20.
        }
        else if (this.type == "shomeDust")
        {
            //For All Items
            this.identity = "Shome Dust";
            this.weight = 0.0001;
            this.size = 4;
            this.description = "A bright blue dust that affects people such that they temporarily become crazy and violent.";
            this.intForDes = 40;
            this.intDescription = "The dust is made by melting a thick adhesive into glutid ooze then transfiguring it at a high temperature.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 40;
            this.ingredients = [["Glutid Ooze", 3], ["Salt", 1], ["Iron", 1], ["Raw Golgemoff Flesh", 4], ["White Mud Rot", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 52; // at max, buy for 52.
            this.sellValue = 52; // at max, sell for 52.
        }
        else if (this.type == "pimberDust")
        {
            //For All Items
            this.identity = "Pimber Dust";
            this.weight = 0.0001;
            this.size = 4;
            this.description = "A green dust that turns into a corrosive liquid acid once disturbed.";
            this.intForDes = 24;
            this.intDescription = "The dust is made by melting the ingredients into shehid ooze, heating it up to an extreme temperature to harden it, then grinding it.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 24;
            this.ingredients = [["Shehid Ooze", 1], ["Tylun Flower", 1], ["Stomwik Leaf", 2], ["Walrus Tusks", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29; // at max, buy for 29.
            this.sellValue = 29; // at max, sell for 29.
        }
        else if (this.type == "irilDust")
        {
            //For All Items
            this.identity = "Iril Dust";
            this.weight = 0.0001;
            this.size = 4;
            this.description = "A greyish-brown dust that numbs and paralyzes to the touch.";
            this.intForDes = 15;
            this.intDescription = "Iril dust is perfect as an anesthesia for surgeries, though most doctors don't care enough to seek it out.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 8;
            this.intForCraft = 34;
            this.ingredients = [["Oolid Ooze Remains", 1], ["Torper Venom Sac", 1], ["Viper Snake Skin", 1], ["Clay", 1], ["Teppreklia Fungus", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "vrezinDust")
        {
            //For All Items
            this.identity = "Vrezin Dust";
            this.weight = 0.0001;
            this.size = 4;
            this.description = "A sensitive red dust that catches aflame at the slightest disturbance.";
            this.intForDes = 22;
            this.intDescription = "The dust is made by transfiguring pelcrid ooze with salt while simultaneously melting iron into the mixture at high heat.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 22;
            this.ingredients = [["Pelcrid Ooze Remains", 1], ["Salt", 4], ["Iron", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 37; // at max, buy for 8.
            this.sellValue = 37; // at max, sell for 8.
        }
        else if (this.type == "glowDust")
        {
            //For All Items
            this.identity = "Glow Dust";
            this.weight = 0.0001;
            this.size = 4;
            this.description = "A golden dust that shines brightly.";
            this.intForDes = 11;
            this.intDescription = "The dust is made by blending all of the ingredients and then letting the mixture dry and finally grinding it.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 45;
            this.intForCraft = 11;
            this.ingredients = [["Sesre Stamen", 2], ["Fletter Wing", 1], ["Raw Wolf Liver", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "dustPouch")
        {
            //For All Items
            this.identity = "Dust Pouch";
            this.weight = 0.1498;
            this.size = 6;
            this.description = "A small cloth pouch for holding alchemic dusts and powders.";
            this.intForDes = 4;
            this.intDescription = "Throwing dust of various kinds is the non-mage's alternative to spellcasting.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 4;
            this.ingredients = [["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "cutlass")
        {
            //For All Items
            this.identity = "Cutlass";
            this.weight = 1.5;
            this.size = 15;
            if (player.raceName != "Outlander")
            {
                this.description = "A strange blade of foreign design, clearly not of the known world.";
            }
            else
            {
                this.description = "A standard issue iron cutlass.";
            }
            this.intForDes = 8;
            this.intDescription = "This type of weapon was created in the unknown lands of the outlanders, and is primarily used by sailors.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2;
            this.distance = 25 + (this.range * 7);
            this.range = 3 + 3/7;
            this.rate = 125 - (35 * player.getDexterity() / 50);
            this.damage = ((3.5) * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength()) + ((2/50) * player.getDexterity())) * (1 + 0.2 * this.superStealthNum(1));
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(3);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            if (player.raceName == "Outlander")
            {
                this.intForCraft = 8;
            }
            else
            {
                this.intForCraft = 30;
            }
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 6); // at max, buy for 17.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 10); // at max, sell for 17.
        }
        else if (this.type == "mace")
        {
            //For All Items
            this.identity = "Mace";
            this.weight = 4;
            this.size = 19;
            this.description = "An average sized iron mace.";
            this.intForDes = 4;
            this.intDescription = "This looks like it could do some good against light armoured enemies.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2;
            this.distance = 24 + (this.range * 7);
            this.range = 1;
            this.rate = 155;
            this.damage = (3.5 - (this.damageHandicap * 1.5)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 6.5;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18 - Math.floor(player.getCharisma() / 6); // at max, buy for 12.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
        }
        else if (this.type == "cephrianBlade")
        {
            //For All Items
            this.identity = "Cephrian Blade";
            this.weight = 1.25;
            this.size = 16;
            this.description = "A blade of cephrian design with a hook on the end.";
            this.intForDes = 1;
            this.intDescription = "Cephrian farmers use this type of blade to harvest grain.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2;
            this.distance = 42 + (this.range * 7);
            this.range = 4 + 2/7;
            this.rate = 140;
            this.damage = (3 - (this.damageHandicap * 1.5)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 13;
            this.ingredients = [["Iron", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 50); // at max, buy for 8.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 25); // at max, sell for 8.
        }
        else if (this.type == "cephrianDagger")
        {
            //For All Items
            this.identity = "Cephrian Dagger";
            this.weight = 1;
            this.size = 16;
            this.description = "A sharpened pointy dagger of Cephrian design.";
            this.intForDes = 2;
            this.intDescription = "A finely forged dagger that is used for gouging people through their armour.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1.5;
            this.distance = 45 + (this.range * 7);
            this.range = 2 + 2/7;
            this.rate = 125;
            this.damage = (3.5 - (this.damageHandicap * 1)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength()) * (1 + this.superStealthNum(3));
            this.magicalDamage = 0;
            this.negateArmour = 4.5 + this.superStealthNum(11);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 25;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 50); // at max, buy for 8.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 25); // at max, sell for 8.
        }
        else if (this.type == "cephrianRapier")
        {
            //For All Items
            this.identity = "Cephrian Rapier";
            this.weight = 1.75;
            this.size = 20;
            this.description = "A fine rapier with a decorative bronze basket hilt.";
            this.intForDes = 3;
            this.intDescription = "Dueling with rapiers is how gentlemen settle their differences in Cephrite if one besmirches the honour of the other.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 3.5;
            this.distance = 79 + (this.range * 7);
            this.range = 2;
            this.rate = 145;
            this.damage = (5.5 - (this.damageHandicap * 1.5)) * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 7.5;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Steel", 1], ["Bronze", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 6); // at max, buy for 82.
            this.sellValue = 76 + Math.floor(player.getCharisma() / 8); // at max, sell for 82.
        }
        else if (this.type == "cephrianFlail")
        {
            //For All Items
            this.identity = "Cephrian Flail";
            this.weight = 2.6;
            this.size = 16;
            this.description = "A spiky metal ball attached to a wooden handle by a chain.";
            this.intForDes = 1;
            this.intDescription = "This is a common weapon in Cephrite.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 28 + (this.range * 7);
            this.range = 3 + 1/7;
            this.rate = 110;
            this.damage = (3 - (this.damageHandicap * 0.5)) * (this.leveledDamageMultiple / 25) + ((3/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 4;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Selva Wood", 1], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 10); // at max, sell for 13.
        }
        else if (this.type == "fishingpole")
        {
            //For All Items
            this.identity = "Fishing Pole";
            this.weight = 1;
            this.size = 12;
            this.description = "Used for catching fish.";
            this.intForDes = 0;
            this.intDescription = "In order to fish: use your attack on a rippling spot in the water and wait 41 seconds without moving or switching your weapon. There is a 50% chance to catch a fish.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 24 + (this.range * 7);
            this.range = 1;
            this.rate = 500;
            this.damage = 0.25;
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 10;
            this.ingredients = [["Wood", 1], ["Fiber", 2], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 10); // at max, buy for 15.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 5); // at max, sell for 15.
        }
        else if (this.type == "staff")
        {
            //For All Items
            this.identity = "Staff";
            this.weight = 1.5;
            this.size = 22;
            this.description = "An average sized wooden staff.";
            this.intForDes = 0;
            this.intDescription = "Smacking things with a long stick can be fun...";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1.5;
            this.distance = 22 + (this.range * 7);
            this.range = 3 + 2/7;
            this.rate = 120;
            this.damage = (1.5 - (this.damageHandicap * 0.5)) * (this.leveledDamageMultiple / 25) + ((0.5/50) * player.getStrength()) + ((0.5/50) * player.getDexterity());
            this.magicalDamage = 0;
            this.negateArmour = 1.5;

            //ability
            this.ability = "none";

            //Crafting
            if (player.getIntelligence() < 12)
            {
                this.yield = 1;
            }
            else
            {
                this.yield = 2;
            }
            this.intForCraft = 3;
            this.ingredients = [["Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
        }
        else if (this.type == "lightningCorseque")
        {
            //For All Items
            this.identity = "Lightning Corseque";
            this.weight = 14;
            this.size = 19;
            this.description = "An electrically imbued corseque; it has one long electrified blade and four smaller blades.";
            this.intForDes = 1;
            this.intDescription = "The essence of electricity inhabits this weapon.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 5;
            this.distance = 70 + (this.range * 7);
            this.range = 2 + 4/7;
            this.rate = 175;
            this.damage = (7 - (this.damageHandicap * 2)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 5;
            this.negateArmour = 4 + ((1/10) * player.getStrength());

            //ability
            this.ability = "shock";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Steel", 1], ["Iron", 3], ["Sphere of Electricity", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1200; // at max, buy for 1200.
            this.sellValue = 1000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1200.
        }
        else if (this.type == "chainsaw")
        {
            //For All Items
            this.identity = "Chainsaw";
            this.weight = 38;
            this.size = 20;
            this.description = "A smoke puffing coal powered saw made for cutting trees down efficiently.";
            this.intForDes = 1;
            this.intDescription = "This creation represents the beginning of a new age of nirwaden technology.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 8;
            this.distance = 39 + (this.range * 7);
            this.range = 3;
            this.rate = 400;
            this.damage = 20 + ((6/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Steel", 1], ["Iron", 3], ["Copper", 1], ["Copper Wire", 1], ["Coal", 60]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 800; // at max, buy for 800.
            this.sellValue = 800; // at max, sell for 800.
        }
        else if (this.type == "cero")
        {
            //For All Items
            this.identity = "Cero";
            this.weight = 0.5;
            this.size = 12;
            this.description = "A glowing blue blade that seems to hum and exude a certain radiance.";
            this.intForDes = 16;
            this.intDescription = "This blade is most likely either forged by a powerful mage or it is from out of this world.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0;
            this.distance = 23 + (this.range * 7);
            this.range = 6 + 4/7;
            this.rate = 40;
            this.damage = (4 + (16/50) * player.getDexterity()) * (1 + this.superStealthNum(1)) ;
            this.magicalDamage = 1;
            this.negateArmour = 30 + this.superStealthNum(10);

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16000; // at max, buy for 16000.
            this.sellValue = 16000; // at max, sell for 16000.
        }
        else if (this.type == "smashStick")
        {
            //For All Items
            this.identity = "Heavy Spiked Club";
            this.weight = 12;
            this.size = 19;
            this.description = "A huge metal club reinforced with sturdy, sharp, steel spikes.";
            this.intForDes = 5;
            this.intDescription = "For the most part heavy, spiked, and blunt styles of weapons are good against armoured foes.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getStrength() >= 20)
            {
                this.energyCost = 10;
            }
            else
            {
                this.energyCost = 12;
            }
            this.distance = 24 + (this.range * 7);
            this.range = 4;
            this.rate = 260;
            if (player.getStrength() >= 8)
            {
                this.damage = (13) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength());
            }
            else
            {
                this.damage = (12 - (this.damageHandicap * 4)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 10;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 130 - Math.floor(player.getCharisma() / 5); // at max, buy for 120.
            this.sellValue = 95 + Math.floor(player.getCharisma() / 2); // at max, sell for 120.
        }
        else if (this.type == "longSpikedMorningStar")
        {
            //For All Items
            this.identity = "Long-Spiked Morning Star";
            this.weight = 8;
            this.size = 19;
            this.description = "A morning star build with long steel spikes for piercing armour. ";
            this.intForDes = 1;
            this.intDescription = "This weapon is meant to be used to pierce well-armoured enemies.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 12;
            this.distance = 31 + (this.range * 7);
            this.range = 1 + 4/7;
            this.rate = 240;
            this.damage = (10 - (this.damageHandicap * 2)) * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 14;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 129 - Math.floor(player.getCharisma() / 3); // at max, buy for 114.
            this.sellValue = 92 + Math.floor(player.getCharisma() / 3); // at max, sell for 107.
        }
        else if (this.type == "burningSmashStick")
        {
            //For All Items
            this.identity = "Heavy Flaming Spiked Club";
            this.weight = 12;
            this.size = 19;
            this.description = "A spiked huge metal club enchanted with fire magic to always be aflame.";
            this.intForDes = 1;
            this.intDescription = "The essence of fire inhabits this weapon.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getStrength() >= 20)
            {
                this.energyCost = 8;
            }
            else
            {
                this.energyCost = 10;
            }
            this.distance = 24 + (this.range * 7);
            this.range = 4;
            this.rate = 260;
            if (player.getStrength() >= 8)
            {
                this.damage = (13) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength());
            }
            else
            {
                this.damage = (12 - (this.damageHandicap * 4)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength());
            }
            this.magicalDamage = 2;
            this.negateArmour = 10;

            //ability
            this.ability = "burning";

            //Crafting
            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Steel", 3], ["Sphere of Flames", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 830 - Math.floor(player.getCharisma() / 5); // at max, buy for 820.
            this.sellValue = 795 + Math.floor(player.getCharisma() / 2); // at max, sell for 820.
        }
        else if (this.type == "hammer")
        {
            //For All Items
            this.identity = "Hammer";
            this.weight = 2;
            this.size = 15;
            this.description = "A multipurpose tool, it can be used for battle as well as for smithing.";
            this.intForDes = 1;
            this.intDescription = "This must be equipped in order to perform metalwork at an anvil.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 10 + (this.range * 7);
            this.range = 3 + 5/7;
            this.rate = 125 - (1/2 * player.getDexterity());
            this.damage = (2 - 1 * this.damageHandicap) * (this.leveledDamageMultiple / 25);
            this.magicalDamage = 0;
            this.negateArmour = 2;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 25); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "warHammer")
        {
            //For All Items
            this.identity = "War Hammer";
            this.weight = 7;
            this.size = 19;
            this.description = "A heavy iron maul built for war.";
            this.intForDes = 3;
            this.intDescription = "Heavy blunt weapons such as this are remarkable for bashing through an enemies armour and delivering large sums of damage.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 6;
            this.distance = 10 + (this.range * 7);
            this.range = 4; // + 7/7;
            this.rate = 225 - player.getDexterity();
            this.damage = (8 - 2 * this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 8;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Iron", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 37 - Math.floor(player.getCharisma() / 6); // at max, buy for 29.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 3); // at max, sell for 29.
        }
        else if (this.type == "freydicSword")
        {
            //For All Items
            this.identity = "Longsword";
            this.weight = 4;
            this.size = 16;
            this.description = "A longsword made of mostly steel but forged with just a hint of jvostran ore.";
            this.intForDes = 1;
            this.intDescription = "This sword looks to be Freynor in origin.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 5;
            this.distance = 29 + (this.range * 7);
            this.range = 5;
            this.rate = 145;
            this.damage = (6.5 - this.damageHandicap * 1.5) * (this.leveledDamageMultiple / 25) + ((9/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 22;
            this.ingredients = [["Steel", 2], ["Jvostran Melt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 92 - Math.floor(player.getCharisma() / 8); // at max, buy for 86.
            this.sellValue = 80 + Math.floor(player.getCharisma() / 8); // at max, sell for 86.
        }
        else if (this.type == "vardanSword")
        {
            //For All Items
            this.identity = "Longsword";
            this.weight = 4;
            this.size = 16;
            this.description = "A longsword of sharpened steel.";
            this.intForDes = 1;
            this.intDescription = "This sword looks to be Vardanian in origin.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 6;
            this.distance = 37 + (this.range * 7);
            this.range = 3 + 1/7;
            this.rate = 125;
            this.damage = (6 - this.damageHandicap * 1) * (this.leveledDamageMultiple / 25) + ((8/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 77 - Math.floor(player.getCharisma() / 10); // at max, buy for 72.
            this.sellValue = 71 + Math.floor(player.getCharisma() / 50); // at max, sell for 72.
        }
        else if (this.type == "spade")
        {
            //For All Items
            this.identity = "Spade";
            this.weight = 1.5;
            this.size = 15;
            this.description = "An iron spade used for digging.";
            this.intForDes = 1;
            this.intDescription = "A spade is required for digging.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2;
            this.distance = 45 + (this.range * 7);
            this.range = 2 + 2/7;
            this.rate = 135;
            this.damage = 1.5 * (this.leveledDamageMultiple / 25);
            this.magicalDamage = 0;
            this.negateArmour = 2;

            //ability
            this.ability = "maybeblind";

            //Crafting
            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 6); // at max, buy for 12.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, sell for 10.
        }
        else if (this.type == "pickaxe")
        {
            //For All Items
            this.identity = "Pickaxe";
            this.weight = 2;
            this.size = 15;
            this.description = "An iron pickaxe used for mining.";
            this.intForDes = 4;
            this.intDescription = "A pickaxe is required for mining ore.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2.5;
            this.distance = 18 + (this.range * 7);
            this.range = 3;
            this.rate = 135;
            this.damage = 2 * (this.leveledDamageMultiple / 25);
            this.magicalDamage = 0;
            this.negateArmour = 4;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26 - Math.floor(player.getCharisma() / 5); // at max, buy for 16.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 10); // at max, sell for 14.
        }
        else if (this.type == "vardanianClub")
        {
            //For All Items
            this.identity = "Club";
            this.weight = 1.5;
            this.size = 14;
            this.description = "Sharpened iron spikes attached to the end of a wooden handle.";
            this.intForDes = 1;
            this.intDescription = "It is for smacking with...";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = Math.max(1, 2 - (player.getEndurance() / 50));
            this.distance = 15 + (this.range * 7);
            this.range = 4;
            this.rate = Math.max(85, 100 - (30 * player.getDexterity() / 50));
            this.damage = (4 - this.damageHandicap) * (this.leveledDamageMultiple / 25);
            this.magicalDamage = 0;
            this.negateArmour = 3;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 15;
            this.ingredients = [["Iron", 1], ["Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 12); // at max, sell for 12.
        }
        else if (this.type == "iceBlade")
        {
            //THIS IS A SUMMONED WEAPON AND CAN NOT BE USED AS A REGULAR ITEM.

            //These do not matter for summoned magical weapons.
            this.identity = "Ice Claymore";
            this.weight = 0;
            this.size = 1;
            this.description = "A claymore magically formed at your will; it is made purely of mystical ice, and it is unforgivingly sharp.";
            this.intForDes = 0;
            this.intDescription = "This is only attainable by the use of a spell, and it doesn't show up as an item only as an equipped weapon.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = Math.max(0, 6 - (player.getEminence() / 10));
            this.distance = 41 + (this.range * 7);
            this.range = 6 + 5/7;
            this.rate = Math.max(0, 175 - (75 * player.getConcentration() / 50));
            this.damage = 6 * (this.leveledDamageMultiple / 25) + ((1/5) * player.getStrength());
            this.magicalDamage = 3 + ((1/6) * player.getConcentration());
            this.negateArmour = 0;

            //ability
            this.ability = "freeze";
        }
        else if (this.type == "timberAxe")
        {
            //For All Items
            this.identity = "Timber Axe";
            this.weight = 3;
            this.size = 15;
            this.description = "An iron axe used for cutting down trees.";
            this.intForDes = 2;
            this.intDescription = "This is one of the few weapons that you can use to collect timber.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 3.5;
            this.distance = 12 + (this.range * 7);
            this.range = 5;
            this.rate = 155;
            this.damage = (7 - (this.damageHandicap * 2.5)) * (this.leveledDamageMultiple / 25);
            this.magicalDamage = 0;
            this.negateArmour = 1.5;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Iron", 2], ["Wood", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 3); // at max, buy for 30.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 3); // at max, sell for 27.
        }
        else if (this.type == "meatCleaver")
        {
            //For All Items
            this.identity = "Meat Cleaver";
            this.weight = 0.65;
            this.size = 15;
            this.description = "A large culinary knife used for cutting meat.";
            this.intForDes = 4;
            this.intDescription = "Cleavers are the best type of knife for cutting through bone.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 21 + (this.range * 7);
            this.range = 1 + 3/7;
            this.rate = (170 - player.getDexterity());
            this.damage = (1.5 - this.damageHandicap * 0.5) * (this.leveledDamageMultiple / 25) + ((5/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 1;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 31 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 27.
            this.sellValue = 26 + Math.floor(player.getCharisma() / 50); // at max, sell for 27.
        }
        else if (this.type == "vardanianGlaive")
        {
            //For All Items
            this.identity = "Vardanian Glaive";
            this.weight = 5;
            this.size = 19;
            this.description = "A sword blade at the end of a spear shaft.";
            this.intForDes = 2;
            this.intDescription = "A polearm meant for fighting one's enemies from afar.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 7;
            this.distance = 64 + (this.range * 7);
            this.range = 3 + 5/7;
            this.rate = (180 - (player.getDexterity() / 2));
            this.damage = (10 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((4/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 1 + ((1/50) * player.getStrength());

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Steel", 2], ["Iron", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100 - Math.floor(player.getCharisma() / 5); // at max, buy for 90.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 1.666666); // at max, sell for 90.
        }
        else if (this.type == "vardanianHalberd")
        {
            //For All Items
            this.identity = "Vardanian Halberd";
            this.weight = 7;
            this.size = 25;
            this.description = "A polearm meant for fighting armoured adversaries from afar.";
            this.intForDes = 5;
            this.intDescription = "Halberds are one of the most popular types of weapons among the knights of Vardania.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 11;
            this.distance = 94 + (this.range * 7);
            this.range = 2 + 3/7;
            this.rate = (200);
            this.damage = (13 - (this.damageHandicap * 2)) * (this.leveledDamageMultiple / 25) + ((8/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 13 + ((5/50) * player.getStrength());

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 38;
            this.ingredients = [["Steel", 2], ["Nechrovite", 1], ["Wood", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 172 - Math.floor(player.getCharisma() / 2.27272727); // at max, buy for 149.
            this.sellValue = 99 + Math.floor(player.getCharisma() / 1); // at max, sell for 149.
        }
        else if (this.type == "nirwadenLance")
        {
            //For All Items
            this.identity = "Nirwaden Lance";
            this.weight = 49;
            this.size = 29;
            this.description = "A massive lance for jousting at enemies from horseback.";
            this.intForDes = 0;
            this.intDescription = "The thrice forged steel tip of the lance is painted with the royal colours of Nirwaden.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 12;
            this.distance = 176 + (this.range * 7);
            this.range = 4;
            this.rate = (400);
            if (wKey == true)
            {
                for (var k = 0; k < ArtificialIntelligenceAccess.length; k++)
                {
                    if (ArtificialIntelligenceAccess[k].mounted == true)
                    {
                        if (ArtificialIntelligenceAccess[k].suspendConflictingPointSystems)
                        {
                            this.negateArmour = 0 + ((17/50) * player.getStrength());
                            this.damage = 2 + (1/50) * player.getStrength();
                        }
                        else
                        {
                            this.negateArmour = (10 / 6) * (ArtificialIntelligenceAccess[k].speed * ArtificialIntelligenceAccess[k].stunned) + ((17/50) * player.getStrength());
                            this.damage = (12 + ((20 / 6) * (ArtificialIntelligenceAccess[k].speed * ArtificialIntelligenceAccess[k].stunned) - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/50) * player.getStrength()));
                        }
                        break;
                    }
                }
            }
            else
            {
                this.negateArmour = 0 + ((12/50) * player.getStrength());
                this.damage = 1 + (1/50) * player.getStrength();
            }
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 41;
            this.ingredients = [["Thrice Forged Steel", 3], ["Wood", 12]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 300 - Math.floor(player.getCharisma() / 1); // at max, buy for 250.
            this.sellValue = 200 + Math.floor(player.getCharisma() / 1); // at max, sell for 250.
        }
        else if (this.type == "pitchfork")
        {
            //For All Items
            this.identity = "Pitchfork";
            this.weight = 2.5;
            this.size = 16;
            this.description = "An iron pitchfork.";
            this.intForDes = 1;
            this.intDescription = "Pitchforks are often used for moving hay bails, but they are also sometimes used by angry peasants for more violent means...";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 5;
            this.distance = 64 + (this.range * 7);
            this.range = 2;
            this.rate = 200;
            this.damage = (3.5 - this.damageHandicap * 1) * (this.leveledDamageMultiple / 25) + ((4/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 6 + ((4/50) * player.getStrength());

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Iron", 1], ["Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 14.
        }
        else if (this.type == "cultistScythe")
        {
            //For All Items
            this.identity = "Cultist Scythe";
            this.weight = 1.5;
            this.size = 14;
            this.description = "A scythe used by the the followers of the cult of the Radiant Spirit.";
            this.intForDes = 5;
            this.intDescription = "It is made with a withered bog troll rib.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2.5;
            this.distance = 26 + (this.range * 7);
            this.range = 3;
            if (player.getDexterity() >= 9)
            {
                this.rate = 95;
            }
            else
            {
                this.rate = 110;
            }
            this.damage = (3 - this.damageHandicap * 1) * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0.5;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 10); // at max, sell for 25.
        }
        else if (this.type == "sceptreOfRadiance")
        {
            //For All Items
            this.identity = "Sceptre Of Radiance";
            this.weight = 6;
            this.size = 17;
            this.description = "The high priest of the cult of the Radiant Spirit wields this holy sceptre.";
            this.intForDes = 0;
            if (player.getIntelligence() > 6)
            {
                this.intDescription = "According to the cult, the sceptre contains within it the glowing presence of the Radiant Spirit.";
            }
            else
            {
                this.intDescription = "The sceptre contains within it the glowing presence of the Radiant Spirit. You should venerate this holy relic and treat it with care.";
            }

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 9;
            this.distance = 26 + (this.range * 7);
            this.range = 5 + 3/7;
            this.rate = 300;
            this.damage = (6 - this.damageHandicap * 2) * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 6.5;

            //ability
            this.ability = "radiate";

            //radioactive in world
            if (this.X !== false)
            {
                if (player.radProof != true)
                {
                    var pluyaDista = (X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y);
                    if (pluyaDista <= (113 * 113))
                    {
                        player.radiation += 0.05;
                    }
                }

                for (var iiiii = 0; iiiii < ArtificialIntelligenceAccess.length; iiiii++)
                {
                    if (ArtificialIntelligenceAccess[iiiii].radProof != true)
                    {
                        var pluyaDista = (ArtificialIntelligenceAccess[iiiii].X - this.X) * (ArtificialIntelligenceAccess[iiiii].X - this.X) + (ArtificialIntelligenceAccess[iiiii].Y - this.Y) * (ArtificialIntelligenceAccess[iiiii].Y - this.Y);
                        if (pluyaDista <= (113 * 113))
                        {
                            ArtificialIntelligenceAccess[iiiii].radiation += 0.05;
                        }
                    }
                }
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 60 - Math.floor(player.getCharisma() / 10); // at max, buy for 55.
            this.sellValue = 45 + Math.floor(player.getCharisma() / 5); // at max, sell for 55.
        }
        else if (this.type == "longBone")
        {
            //For All Items
            this.identity = "Long Bone";
            this.weight = 0.5;
            this.size = 17;
            this.description = "A hollow withered piece of rib bone from a bog troll.";
            this.intForDes = 2;
            this.intDescription = "This was more than likely scavenged from the corpse of a rotting bog troll.";


            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 24 + (this.range * 7);
            this.range = 3;
            this.rate = 100;
            this.damage = (2 - this.damageHandicap * 0.5) * (this.leveledDamageMultiple / 25) + ((3/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 1;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "redFan")
        {
            //For All Items
            this.identity = "Red Fan";
            this.weight = 0.1;
            this.size = 9;
            this.description = "A finely crafted elaborately decorated handheld fan of orgish design.";
            this.intForDes = 3;
            this.intDescription = "Fans of this quality are almost exlusively used by the noble classes.";


            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0;
            this.distance = 0 + (this.range * 7);
            this.range = 0;
            this.rate = 100;
            this.damage = 0;
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 15); // at max, buy for 87.
            this.sellValue = 84 + Math.floor(player.getCharisma() / 15); // at max, sell for 87.
        }
        else if (this.type == "purpleFan")
        {
            //For All Items
            this.identity = "Purple Fan";
            this.weight = 0.1;
            this.size = 9;
            this.description = "A finely crafted elaborately decorated handheld fan of orgish design.";
            this.intForDes = 3;
            this.intDescription = "Fans of this quality are almost exlusively used by the noble classes.";


            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0;
            this.distance = 0 + (this.range * 7);
            this.range = 0;
            this.rate = 100;
            this.damage = 0;
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 92 - Math.floor(player.getCharisma() / 15); // at max, buy for 89.
            this.sellValue = 86 + Math.floor(player.getCharisma() / 15); // at max, sell for 89.
        }
        else if (this.type == "theWendigosCleaver")
        {
            //For All Items
            this.identity = "The Wendigo's Cleaver";
            this.weight = 3.25;
            this.size = 16;
            this.description = "A steel blade that curves into a spike toward the end.";
            this.intForDes = 0;
            if (player.gamemode != "protagonist")
            {
                this.intDescription = "The bandit chieftain known as The Wendigo used to use this to carve and butcher his many victims' flesh in order to make his supper.";
            }
            else
            {
                this.intDescription = "This is a little large for cutting turnips... but it will do.";
            }

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (new Date().getTime() - player.timeSinceHumanFleshConsumed < 1000 * 30) //weapon bonus after cannibalizing
            {
                this.energyCost = 4.5;
                this.distance = 24 + (this.range * 7);
                this.range = 7 + 2/7;
                this.rate = Math.max(0.9, (125 - player.getDexterity()));
                this.damage = (8 - this.damageHandicap * 3) * (this.leveledDamageMultiple / 25) + ((14/50) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 7 + ((4/50) * player.getStrength());
            }
            else
            {
                this.distance = 24 + (this.range * 7);
                this.range = 7 + 2/7;
                if (player.cannibalism == true && player.cannibal == true) //if hungering for a cannibals supper the cleaver gets a slight buff
                {
                    this.energyCost = 5;
                    this.damage = (7.5 - this.damageHandicap * 1) * (this.leveledDamageMultiple / 25) + ((10/50) * player.getStrength());
                    this.negateArmour = 5.5 + ((3/50) * player.getStrength());
                    this.rate = Math.max(0.95, (130 - player.getDexterity()));
                }
                else //otherwise these are the cleaver's base stats
                {
                    this.energyCost = 6;
                    this.damage = (7 - this.damageHandicap * 2) * (this.leveledDamageMultiple / 25) + ((9/50) * player.getStrength());
                    this.negateArmour = 5 + ((2/50) * player.getStrength());
                    this.rate = Math.max(1, (135 - player.getDexterity()));
                }

                this.magicalDamage = 0;
            }

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35000 - Math.floor(player.getCharisma() / 0.1); // at max, buy for 34500.
            this.sellValue = 34000 + Math.floor(player.getCharisma() / 0.1); // at max, sell for 34500.
        }
        else if (this.type == "beulingerrPike")
        {
            //For All Items
            this.identity = "The Silver Pike of House Beulingerr";
            this.weight = 12;
            this.size = 19;
            this.description = "A decorative silver pike inlaid with rubies, polished amethysts, and gold.";
            this.intForDes = 0;
            this.intDescription = "This pike has been passed down through the male line in the Beulingerr family for generations; it is strictly decorative.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 10;
            this.distance = 115 + (this.range * 7);
            this.range = 3 + 2/7;
            this.rate = (320 - player.getDexterity());
            this.damage = (6 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 14 + ((6/50) * player.getStrength());

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35000 - Math.floor(player.getCharisma() / 0.1); // at max, buy for 34500.
            this.sellValue = 34000 + Math.floor(player.getCharisma() / 0.1); // at max, sell for 34500.
        }
        else if (this.type == "sackmansSword")
        {
            //For All Items

            this.identity = "Mr. Sackman's Sword";
            this.weight = 2;
            this.size = 15;
            this.description = "A steel sword that once belonged to a mysterious hooded man with a large unweildy sack.";
            this.intForDes = 0;
            this.intDescription = "If the sack doesn't stop crying this sword would make it stop...";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 3.5;
            this.distance = 62 + (this.range * 7);
            this.range = 2;
            this.rate = (125 - player.getDexterity());
            if (player.energy <= 7 || player.energy <= 1/4 * player.energyMAX)
            {
                this.identity = "The Sword of Recompense";
                this.intDescription = "Those poor young souls who were killed by this blade now owe you a favour for ending the sackman...";
                this.damage = (5 - this.damageHandicap * 0.5) * (this.leveledDamageMultiple / 25) + ((7/50) * player.getStrength());
            }
            else
            {
                this.damage = (3.5 - this.damageHandicap * 0.5) * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength());
            }

            this.magicalDamage = 0;
            this.negateArmour = 14 + ((5/50) * player.getStrength());

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 5); // at max, buy for 19.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 10); // at max, sell for 19.
        }
        else if (this.type == "nirineseSpear")
        {
            //For All Items
            this.identity = "Nirinese Spear";
            this.weight = 4;
            this.size = 15;
            this.description = "A steel spear forged by the Nirinese.";
            this.intForDes = 2;
            this.intDescription = "A long metal polearm with a fancy steel guard and a sharp point made for piercing armour.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 5;
            this.distance = 56.5 + (this.range * 7);
            this.range = 1.5;
            this.rate = (150 - player.getDexterity());
            this.damage = (4 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 10 + ((7/50) * player.getStrength());

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 5); // at max, buy for 20.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 5); // at max, sell for 20.
        }
        else if (this.type == "estoc")
        {
            //For All Items
            this.identity = "Estoc";
            this.weight = 2;
            this.size = 24;
            this.description = "A nirinese sword made for piercing through plate armour.";
            this.intForDes = 0;
            this.intDescription = "It's edges are not sharp, as the sword is meant for stabbing.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 10)
            {
                this.energyCost = 5;
            }
            else if (player.getEndurance() >= 5)
            {
                this.energyCost = 6;
            }
            else
            {
                this.energyCost = 8;
            }
            this.distance = 43 + (this.range * 7);
            this.range = 3;
            this.rate = 170;
            this.damage = (6 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((3/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 20 + 20/50 * player.getStrength();

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Thrice Forged Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 95 - Math.floor(player.getCharisma() / 3); // at max, buy for 80.
            this.sellValue = 65 + Math.floor(player.getCharisma() / 3); // at max, sell for 80.
        }
        else if (this.type == "yari")
        {
            //For All Items
            this.identity = "Yari";
            this.weight = 3;
            this.size = 18;
            this.description = "A bamboo shafted spear of orgish design.";
            this.intForDes = 2;
            this.intDescription = "This is a weapon meant to be used to fight against cavalry.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 4;
            this.distance = 86 + (this.range * 7);
            this.range = 2 + 4/7;
            this.rate = (130 - 4/5 * player.getDexterity());
            this.damage = (4 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((7/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 8 + ((2/50) * player.getStrength());

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Bamboo", 1], ["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 41 - Math.floor(player.getCharisma() / 5); // at max, buy for 31.
            this.sellValue = 17 + Math.floor(player.getCharisma() / 5); // at max, sell for 27.
        }
        else if (this.type == "kama")
        {
            //For All Items
            this.identity = "Kama";
            this.weight = 1;
            this.size = 7;
            this.description = "A bamboo shafted sickle of orgish design.";
            this.intForDes = 1;
            this.intDescription = "This weapon's primary use is reaping crops.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 10 + (this.range * 7);
            this.range = 4 + 1/7;
            this.rate = (100 - 1/2 * player.getDexterity());
            this.damage = ((2.25 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((3/50) * player.getDexterity()) + ((1/50) * player.getStrength())) * (1 + 0.6 * this.superStealthNum(1));
            this.magicalDamage = 0;
            this.negateArmour = 0.75 + this.superStealthNum(1);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 32;
            this.ingredients = [["Bamboo", 1], ["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 10); // at max, buy for 12.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 15); // at max, sell for 12.
        }
        else if (this.type == "rasper")
        {
            //For All Items
            if (player.health < player.healthMAX / 3 && player.getEndurance() >= 14 && player.energy < 2 || player.health < player.healthMAX / 3 && player.getDexterity() >= 14 || player.health < player.healthMAX / 3 && player.getStrength() >= 14)
            {
                this.identity = "The Blade of Psychotic Rage";
                this.weight = 2;
                this.size = 16;
                this.description = "There will be blood.";
                this.intForDes = 10;
                this.intDescription = "When you have achieved 14 points in Dexterity, Endurance, or Strength you unlock for each a unique bonus for this blade while you are below 1/3 health.";
            }
            else
            {
                this.identity = "Rasp";
                this.weight = 2;
                this.size = 16;
                this.description = "A curved steel blade with a hooked pommel.";
                this.intForDes = 4;
                this.intDescription = "The notorious bandit Chieftain Nelgref often used Rasp's hook to gouge out the eyes of his victims.";
            }

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.health < player.healthMAX / 3 && player.getEndurance() >= 14 && player.energy < 2)
            {
                this.energyCost = 0;
            }
            else
            {
                this.energyCost = 2;
            }
            this.distance = 22 + (this.range * 7);
            this.range = 3 + 2/7;
            if (player.health < player.healthMAX / 3 && player.getDexterity() >= 14)
            {
                this.rate = 40;
            }
            else
            {
                this.rate = (100 - (player.getDexterity() / 5));
            }
            if (player.health < player.healthMAX / 3 && player.getStrength() >= 14)
            {
                this.damage = 6 * (this.leveledDamageMultiple / 25) + ((9 / 50) * player.getStrength());
            }
            else
            {
                this.damage = 5 * (this.leveledDamageMultiple / 25) + ((4 / 25) * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 76 - Math.floor(player.getCharisma() / 5); // at max, buy for 66.
            this.sellValue = 46 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 66.
        }
        else if (this.type == "blunderbuss")
        {
            //For All Items
            this.identity = "Blunderbuss";
            this.weight = 6;
            this.size = 20;
            this.description = "A steel flint-lock blunderbuss.";
            this.intForDes = 0;
            this.intDescription = "This gun combusts black-powder in order to propel several projectiles in the targets generalish direction at high velocity.";

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "gun";

            //Utility Focused
            this.range = 1100 + (400 * player.getRanged() / 50);
            this.rate = 100;
            this.speed = 8 + 1/3; //guns shoot triple their noted speed.
            this.negateArmour = 25;

            //ability
            this.ability = "none";

            if (player.raceName != "Outlander")
            {
                //Crafting
                this.yield = 1;
                this.intForCraft = 50;
                this.ingredients = [["Steel", 6], ["Flint", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1100 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1000.
                this.sellValue = 900 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 1000.
            }
            else
            {
                //Crafting
                this.yield = 1;
                this.intForCraft = 26;
                this.ingredients = [["Steel", 6], ["Flint", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 191 - Math.floor(player.getCharisma() / 3); // at max, buy for 176.
                this.sellValue = 125 + Math.floor(player.getCharisma() / 1); // at max, sell for 175.
            }
        }
        else if (this.type == "musket")
        {
            //For All Items
            this.identity = "Musket";
            this.weight = 5;
            this.size = 20;
            this.description = "A steel flint-lock musket.";
            this.intForDes = 0;
            this.intDescription = "This gun combusts black-powder in order to propel a thick steel ball towards the target at high velocity.";

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "gun";

            //Utility Focused
            this.range = 3000 + (350 * player.getRanged() / 50);
            this.rate = 82;
            this.speed = 8 + 1/3; //guns shoot triple their noted speed.
            this.negateArmour = 20;

            //ability
            this.ability = "none";

            if (player.raceName != "Outlander")
            {
                //Crafting
                this.yield = 1;
                this.intForCraft = 50;
                this.ingredients = [["Steel", 5], ["Flint", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 800.
                this.sellValue = 700 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 800.
            }
            else
            {
                //Crafting
                this.yield = 1;
                this.intForCraft = 20;
                this.ingredients = [["Steel", 5], ["Flint", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 115 - Math.floor(player.getCharisma() / 10); // at max, buy for 110.
                this.sellValue = 84 + Math.floor(player.getCharisma() / 2); // at max, sell for 109.
            }
        }
        else if (this.type == "bullet")
        {
            //For All Items
            this.identity = "Bullet";
            this.weight = 0.05;
            this.size = 2;
            this.description = "A smooth ball of steel.";
            this.intForDes = 1;
            this.intDescription = "When Propelled at extreme speeds this metal ball can cause a lot of damage.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "bullet";
            this.subUtilityName = "Bullet";

            //Utility Focused
            if (player.weaponEquipped == "musket")
            {
                this.damage = 92;
            }
            else if (player.weaponEquipped == "blunderbuss")
            {
                this.damage = 32;
            }
            else if (player.weaponEquipped == "pistol")
            {
                this.damage = 43;
            }
            else
            {
                this.damage = 0;
            }
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 36;
            this.intForCraft = 5;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "blackPowder")
        {
            //For All Items
            this.identity = "Black-Powder";
            this.weight = 0.001;
            this.size = 4;
            this.description = "A gritty black powder.";
            this.intForDes = 36;
            this.intDescription = "An alchemic mixture of coal, nitre, and sulfur, all boiled in alcohol; It happens to be massively combustible.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 200;
            this.intForCraft = 36;
            this.ingredients = [["Coal", 3], ["Nitre", 15], ["Sulfur", 2], ["Alcohol", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "pyromothPowder")
        {
            //For All Items
            this.identity = "Black-Powder";
            this.weight = 0.0001;
            this.size = 4;
            this.description = "The combustible residue from the wings of a pyromoth.";
            this.intForDes = 0;
            this.intDescription = "It is a fine grained powder that is highly flammable.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "pyromothSilkweb")
        {
            //For All Items
            this.identity = "Pyromoth Web";
            this.weight = 0.05;
            this.size = 8;
            this.description = "The flame resistant web of a pyromoth.";
            this.intForDes = 10;
            this.intDescription = "This can be woven into pyromoth silk.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "pyromothSilk")
        {
            //For All Items
            this.identity = "Pyromoth Silk";
            this.weight = 3;
            this.size = 14;
            this.description = "A roll of pyromoth silk.";
            this.intForDes = 5;
            this.intDescription = "This delicate and beautiful black silk is completely fire proof.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 22;
            this.ingredients = [["Pyromoth Web", 60]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 155 - Math.floor(player.getCharisma() / 5.55555555); // at max, buy for 146.
            this.sellValue = 140 + Math.floor(player.getCharisma() / 8.333); // at max, sell for 146.
        }
        else if (this.type == "palinsydaFlesh")
        {
            //For All Items
            this.identity = "Palinsyda Flesh";
            this.weight = 5;
            this.size = 13;
            this.description = "The body of a palinsyda worm that has been decapitated and has had its thick skin peeled from it.";
            this.intForDes = 2;
            this.intDescription = "This can be used in in alchemy as a former.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 50); // at max, sell for 7.
        }
        else if (this.type == "palinsydaTongues")
        {
            //For All Items
            this.identity = "Palinsyda Tongues";
            this.weight = 0.3;
            this.size = 7;
            this.description = "The three tongues of a palinsyda.";
            this.intForDes = 2;
            this.intDescription = "This can be used in alchemy as a former.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 3; // at max, sell for 3.
        }
        else if (this.type == "cursedBoneMeal")
        {
            //For All Items
            this.identity = "Cursed Bone Meal";
            this.weight = 0.75;
            this.size = 8;
            this.description = "Powdered bone fragments from a reanimated skeleton.";
            this.intForDes = 10;
            this.intDescription = "It acts as a catalyst, a changer, and a former depending on the alchemic recipe it is used in: it is a rare and sought after ingredient.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 3); // at max, buy for 6.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
        }
        else if (this.type == "corpseGolemHeart")
        {
            //For All Items
            this.identity = "Corpse Golem Heart";
            this.weight = 2.9;
            this.size = 7;
            this.description = "A skull that was hexed to unite bone and form a magical being from the inanimate.";
            this.intForDes = 29;
            this.intDescription = "Unlike most other golems, corpse golems are not alive, they are simply inhabited by a bewitched soul.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "sowtFlemGland")
        {
            //For All Items
            this.identity = "Sowt Flem Gland";
            this.weight = 0.9;
            this.size = 7;
            this.description = "The flem gland of an armoured waste dwelling tripedal Sowt.";
            this.intForDes = 9;
            this.intDescription = "Sowts' flem hardens into a sharp brittle substance when it is combined with a certain compound that is also produced by this gland.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 25); // at max, buy for 18.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 8); // at max, sell for 18.
        }
        else if (this.type == "crowFeather")
        {
            //For All Items
            this.identity = "Crow Feather";
            this.weight = 0.001;
            this.size = 4;
            this.description = "The sleek black feather of a crow.";
            this.intForDes = 1;
            this.intDescription = "Crow feathers are often used as quills for writing with, they may also be used decoratively.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "trubkaStalk")
        {
            //For All Items
            this.identity = "Trubka Stalk";
            this.weight = 9;
            this.size = 12;
            this.description = "The slick, moist stalk of a trubka plant.";
            this.intForDes = 1;
            this.intDescription = "Trubka stalks are poisonous, but they can be used as a former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14; // at max, buy for 14.
            this.sellValue = 14; // at max, sell for 14.
        }
        else if (this.type == "velidShell")
        {
            //For All Items
            this.identity = "Velid Shell";
            this.weight = 3.5;
            this.size = 7;
            this.description = "The shell of a velid, rich with colourful, shimmering mother of pearl.";
            this.intForDes = 1;
            this.intDescription = "Velid shells are valued as an ornamental decoration.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9 - Math.floor(player.getCharisma() / 25); // at max, buy for 7.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "starfishBig")
        {
            //For All Items
            this.identity = "Starfish";
            this.weight = 0.7;
            this.size = 7;
            this.description = "The desicated body of a large starfish.";
            this.intForDes = 1;
            this.intDescription = "This is useless but for ornamental purposes.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "starfishSmall")
        {
            //For All Items
            this.identity = "Starfish";
            this.weight = 0.3;
            this.size = 4;
            this.description = "The desicated body of a starfish.";
            this.intForDes = 1;
            this.intDescription = "This is useless but for ornamental purposes.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "chervstrakhaStomach")
        {
            //For All Items
            this.identity = "Chervstrakha Stomach";
            this.weight = 0.9;
            this.size = 7;
            this.description = "Its stomach digests the multitude of tough fibrous plant materials that it ingests.";
            this.intForDes = 26;
            this.intDescription = "An enzyme located in this can be used to make an antidote for the psychodelic dust of its mature form.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 0 + Math.floor(player.getCharisma() / 50); // at max, sell for 1.
        }
        else if (this.type == "pokinutyyShell")
        {
            //For All Items
            this.identity = "Pokinutyy Shell";
            this.weight = 14;
            this.size = 7;
            this.description = "The shelled body of a pokinutyy.";
            this.intForDes = 1;
            this.intDescription = "It is a neat decoration but not much more.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "pokinutyyLeg")
        {
            //For All Items
            this.identity = "Hollow Pokinutyy Leg";
            this.weight = 1.5;
            this.size = 7;
            this.description = "The hollow leg of a pokinutyy.";
            this.intForDes = 1;
            this.intDescription = "It is a neat decoration but not much more.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "ostryyGrass")
        {
            //For All Items
            this.identity = "Ostryy Grass";
            this.weight = 0.2;
            this.size = 11;
            this.description = "Clippings of a grey Vardanian wild grass with grass blades as sharp as a blade.";
            this.intForDes = 1;
            this.intDescription = "Unless you like getting cut by razor sharp blades of grass, there is not much that can be done with this...";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "pokinutyyLegFull")
        {
            //For All Items
            this.identity = "Pokinutyy Leg";
            this.weight = 2.25;
            this.size = 7;
            this.description = "The leg of a pokinutyy full of soft bitter tasting flesh.";
            this.intForDes = 4;
            this.intDescription = "There is not much flesh and it does not taste great, but it is perfectly edible.";

            //Define Utility
            this.utility = "food";
            this.subUtility = "reusable";
            this.refund = [["pokinutyyLeg", 1]];

            //Utility Focused
            this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
            this.hunger = 1; //satisfies hunger.
            this.thirst = 1; //quenches thirst.
            this.warmth = -1; //warms player.
            this.heal = 0; //heals health.
            this.generation = -2; //recoops lost energy.
            this.replenish = -1; //restores will.

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "pixiWing")
        {
            //For All Items
            this.identity = "Pixi Wing";
            this.weight = 0.11;
            this.size = 7;
            this.description = "The wing of a pixi.";
            this.intForDes = 1;
            this.intDescription = "This has no other use but to serve as a testiment to having slain a pixi.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "pixiBrain")
        {
            //For All Items
            this.identity = "Pixi Brain";
            this.weight = 0.02;
            this.size = 7;
            this.description = "The neural tissue of a pixi.";
            this.intForDes = 5;
            this.intDescription = "This is a powerful former in alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25; // at max, buy for 25.
            this.sellValue = 25; // at max, sell for 25.
        }
        else if (this.type == "anglerAntennae")
        {
            //For All Items
            this.identity = "Angler Antennae";
            this.weight = 20;
            this.size = 22;
            this.description = "The antennae of an angler.";
            this.intForDes = 20;
            this.intDescription = "This has special properties as a former that are highly sought after for some of the more obscure, but extremely potent creations in advanced alchemy.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 275; // at max, buy for 275.
            this.sellValue = 275; // at max, sell for 275.
        }
        else if (this.type == "turkeyFeathers")
        {
            //For All Items
            this.identity = "Turkey Feathers";
            this.weight = 0.05;
            this.size = 8;
            this.description = "Feathers from a turkey.";
            this.intForDes = 1;
            this.intDescription = "Turkey feathers are used both to make elaborate floor decorations and to make a Thengan sage outfit...";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "turkeyEgg")
        {
            //For All Items
            this.identity = "Turkey Egg";
            this.weight = 0.25;
            this.size = 8;
            this.description = "The speckled yellowish tan egg of a turkey.";
            this.intForDes = 1;
            this.intDescription = "You can hatch it to make a baby turkey!";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "turkeyHatch";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "zetianBlowgun")
        {
            //For All Items
            this.identity = "Zetian Blowgun";
            this.weight = 2.3;
            this.size = 25;
            this.description = "A zetian style blowgun.";
            this.intForDes = 3;
            this.intDescription = "It is made from the carved carapace of a Voaii.";

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "blowgun";

            //Utility Focused
            this.range = 600 + (300 * player.getRanged() / 50);
            //this.rate = Math.max(0.1, 35 - (34 * player.getRanged() / 50));
            this.speed = 6 + (2 * player.getRanged() / 50);
            this.negateArmour = 4 + (2 * player.getRanged() / 50);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 26;
            this.ingredients = [["Voaii Carapace", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 15.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 50); // at max, sell for 15.
        }
        else if (this.type == "zetianBlowdart")
        {
            //For All Items
            this.identity = "Zetian Blowdart";
            this.weight = 0.01;
            this.size = 4;
            this.description = "A sharpened fragment of riod beetle leg with voaii wing bits for stability.";
            this.intForDes = 3;
            this.intDescription = "Zetian weaponry is made entirely of insect parts...";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "dart";
            this.subUtilityName = "Dart";

            //Utility Focused
            this.damage = (1.5) * (1 + player.getRanged() / 50);
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 5;
            this.ingredients = [["Riod Beetle Leg", 1], ["Voaii Wing Fragments", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "zetianRattlerBlowdart")
        {
            //For All Items
            this.identity = "Rattler Venom Dipped Zetian Blowdart";
            this.weight = 0.01;
            this.size = 4;
            this.description = "A zetian style blowdart dipped in the red venom of a rattler.";
            this.intForDes = 1;
            this.intDescription = "Zetians use this kind of blowdart to exaust and slowly kill their prey or their enemies.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "dart";
            this.subUtilityName = "Dart";

            //Utility Focused
            this.damage = (1.5) * (1 + player.getRanged() / 50);
            this.magicalDamage = 0;

            //ability
            this.ability = "poisonII";

            //Crafting
            this.yield = 2;
            this.intForCraft = 1;
            this.ingredients = [["Zetian Blowdart", 2], ["Rattler Venom Gland", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "zetianRattlerBlowdartThick")
        {
            //For All Items
            this.identity = "Thick Rattler Venom Dipped Zetian Blowdart";
            this.weight = 0.01;
            this.size = 4;
            this.description = "A zetian style blowdart twice dipped in the red venom of a rattler and dried after each time.";
            this.intForDes = 1;
            this.intDescription = "Zetians use this kind of blowdart to exaust and slowly kill their prey or their enemies.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "dart";
            this.subUtilityName = "Dart";

            //Utility Focused
            this.damage = (1.5) * (1 + player.getRanged() / 50);
            this.magicalDamage = 0;

            //ability
            this.ability = "poisonIII";

            //Crafting
            this.yield = 2;
            this.intForCraft = 2;
            this.ingredients = [["Zetian Blowdart", 2], ["Rattler Venom Gland", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10; // at max, buy for 10.
            this.sellValue = 9; // at max, sell for 9.
        }
        else if (this.type == "vardanianCrossbow")
        {
            //For All Items
            this.identity = "Repeater Crossbow";
            this.weight = 4;
            this.size = 23;
            this.description = "A wooden crossbow of Vardanian design that can fire repeatedly.";
            this.intForDes = 6;
            this.intDescription = "The bolts are stored in the top section of the crossbow so that they fall into place and replace the last bolt fired.";

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "repeaterCrossbow";

            //Utility Focused
            this.range = 800 + (200 * player.getRanged() / 50);
            //this.rate = Math.max(0.1, 35 - (34 * player.getRanged() / 50));
            this.speed = 3 + (2 * player.getRanged() / 50);
            this.negateArmour = 5.5 + (1 * player.getRanged() / 50);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 26;
            this.ingredients = [["Ashai Wood", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 12); // at max, buy for 46.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 8); // at max, sell for 46.
        }
        else if (this.type == "ironBolt")
        {
            //For All Items
            this.identity = "Iron Bolt";
            this.weight = 0.04;
            this.size = 8;
            this.description = "An iron pointed bolt with red feathers";
            this.intForDes = 1;
            this.intDescription = "A bolt of Vardanian design; it was first introduced to Vardanian warfair as a measure against cavalry.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "repeaterBolt";
            this.subUtilityName = "Bolt";

            //Utility Focused
            this.damage = (2) * (1 + player.getRanged() / 50); //4 damage at max!
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 26;
            this.intForCraft = 6;
            this.ingredients = [["Ashai Wood", 1], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "crossbow")
        {
            //For All Items
            this.identity = "Crossbow";
            this.weight = 4;
            this.size = 23;
            this.description = "A sturdy crank-loaded steel crossbow.";
            this.intForDes = 6;
            this.intDescription = "This type of crossbow is of Nirinese design.";

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "crossbow";

            //Utility Focused
            this.range = 2500 + (500 * player.getRanged() / 50);
            //this.rate = Math.max(0.1, 35 - (34 * player.getRanged() / 50));
            this.speed = 5 + (2 * player.getRanged() / 50);
            this.negateArmour = 13 + (5 * player.getRanged() / 50);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Steel", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 640 - Math.floor(player.getCharisma() / 2); // at max, buy for 615.
            this.sellValue = 565 + Math.floor(player.getCharisma() / 1); // at max, sell for 615.
        }
        else if (this.type == "steelBolt")
        {
            //For All Items
            this.identity = "Steel Bolt";
            this.weight = 0.1;
            this.size = 8;
            this.description = "A crossbow bolt made of steel.";
            this.intForDes = 1;
            this.intDescription = "Don't touch the tip, it's extremely sharp!";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "bolt";
            this.subUtilityName = "Bolt";

            //Utility Focused
            this.damage = (13 + 1/3) * (1 + player.getRanged() / 25); //40 damage at max!
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 5;
            this.intForCraft = 27;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 50); // at max, buy for 7.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
        }
        else if (this.type == "longbow")
        {
            //For All Items
            this.identity = "Long Bow";
            this.weight = 2;
            this.size = 23;
            this.description = "A well crafted long bow carved from fine and flexible wood and strung with an equally durable bowstring.";
            this.intForDes = 4;
            this.intDescription = "Long bows are known for their superior range!";

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "bow";

            //Utility Focused
            this.range = 2000 + (500 * player.getRanged() / 50);
            this.rate = Math.max(0.1, 35 - (34 * player.getRanged() / 50));
            this.speed = 5 + (3 * player.getRanged() / 50);
            this.negateArmour = 7 + (4 * player.getRanged() / 50);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Wood", 1], ["Fiber", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 44 - Math.floor(player.getCharisma() / 8); // at max, buy for 38.
            this.sellValue = 23 + Math.floor(player.getCharisma() / 3); // at max, sell for 38.
        }
        else if (this.type == "aldrekiiLongbow")
        {
            //For All Items
            this.identity = "Aldrekii Long Bow";
            this.weight = 1.25;
            this.size = 24;
            this.description = "A well crafted long bow carved from fine and flexible wood and strung with an equally durable bowstring.";
            this.intForDes = 4;
            this.intDescription = "Long bows are known for their superior range!";

            //Define Utility
            this.utility = "ranged";
            //Sub Utility
            this.subUtility = "bow";

            //Utility Focused
            this.range = 2550 + (500 * player.getRanged() / 50);
            this.rate = Math.max(0.1, 35 - (34 * player.getRanged() / 50));
            this.speed = 6 + (4 * player.getRanged() / 50);
            this.negateArmour = 9 + (6 * player.getRanged() / 50);

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Wood", 1], ["Fiber", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 95 - Math.floor(player.getCharisma() / 10); // at max, buy for 90.
            this.sellValue = 75 + Math.floor(player.getCharisma() / 3); // at max, sell for 90.
        }
        else if (this.type == "oiledArrow")
        {
            //For All Items
            this.identity = "Oiled Arrow";
            this.weight = 0.05;
            this.size = 8;
            this.description = "An arrow with a sharp iron pointed tip dipped in flammable oil.";
            this.intForDes = 12;
            this.intDescription = "The arrow will only be lit on fire when shot if a tinderbox is in your inventory.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 4 * (1 + player.getRanged() / 25);
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 90;
            this.intForCraft = 8;
            this.ingredients = [["Iron Arrow", 90], ["Jar of Oil", 1]];
            this.biproducts = [[new Item("glassJar", false), 1]]; //these are the accompanying items that come along with the main item being crafted.

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 12); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "lifeLeachArrow")
        {
            //For All Items
            this.identity = "Life Leach Arrow";
            this.weight = 0.1;
            this.size = 8;
            this.description = "A steel arrow infused with nechromantic magic.";
            this.intForDes = 6;
            this.intDescription = "Upon piercing its victim the life drains out of it into the one who shot the arrow.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 6 * (1 + player.getRanged() / 25);
            this.magicalDamage = 0;

            //ability
            this.ability = "leach";

            //Crafting
            this.yield = 7;
            this.intForCraft = 45;
            this.ingredients = [["Steel", 1], ["Sphere of Nechromancy", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 200.
            this.sellValue = 100 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 200.
        }
        else if (this.type == "freezingArrow")
        {
            //For All Items
            this.identity = "Freezing Arrow";
            this.weight = 0.1;
            this.size = 8;
            this.description = "A steel arrow infused with ice magic.";
            this.intForDes = 6;
            this.intDescription = "This arrow has magical ice sharpness and freezes its target upon piercing.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 6 * (1 + player.getRanged() / 25);
            this.magicalDamage = 7;

            //ability
            this.ability = "freeze";

            //Crafting
            this.yield = 7;
            this.intForCraft = 45;
            this.ingredients = [["Steel", 1], ["Sphere of Ice", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 200.
            this.sellValue = 100 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 200.
        }
        else if (this.type == "windArrow")
        {
            //For All Items
            this.identity = "Wind Arrow";
            this.weight = 0.1;
            this.size = 8;
            this.description = "A steel arrow infused with wind magic.";
            this.intForDes = 6;
            this.intDescription = "This arrow throws its target through the air upon impact.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 7 * (1 + player.getRanged() / 25);
            this.magicalDamage = 2;

            //ability
            this.ability = "knockbackII";

            //Crafting
            this.yield = 7;
            this.intForCraft = 45;
            this.ingredients = [["Steel", 1], ["Sphere of Wind", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 350 - Math.floor(player.getCharisma() / 1); // at max, buy for 300.
            this.sellValue = 200 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 300.
        }
        else if (this.type == "fireArrow")
        {
            //For All Items
            this.identity = "Fire Arrow";
            this.weight = 0.1;
            this.size = 8;
            this.description = "A steel arrow infused with Fiery magic.";
            this.intForDes = 6;
            this.intDescription = "Simply impact with a target will engulf it in long burning flames.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 6 * (1 + player.getRanged() / 25);
            this.magicalDamage = 1;

            //ability
            this.ability = "longBurning";

            //Crafting
            this.yield = 7;
            this.intForCraft = 45;
            this.ingredients = [["Steel", 1], ["Sphere of Flames", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 200.
            this.sellValue = 100 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 200.
        }
        else if (this.type == "shehidToxinArrow")
        {
            //For All Items
            this.identity = "Shehid Toxin Arrow";
            this.weight = 0.07;
            this.size = 8;
            this.description = "An arrow with a sharp iron pointed tip dipped in shehid ooze and dried.";
            this.intForDes = 6;
            this.intDescription = "The dried shehid ooze will temporarily paralyze most targets upon successfully penetrating the flesh.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 4 * (1 + player.getRanged() / 25);
            this.magicalDamage = 0;

            //ability
            this.ability = "stunIII";

            //Crafting
            this.yield = 180;
            this.intForCraft = 8;
            this.ingredients = [["Iron Arrow", 180], ["Shehid Ooze", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6 - Math.floor(player.getCharisma() / 12); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "arrow")
        {
            //For All Items
            this.identity = "Iron Arrow";
            this.weight = 0.05;
            this.size = 8;
            this.description = "An arrow with a sharp iron pointed tip";
            this.intForDes = 4;
            this.intDescription = "It is the arrow that determines the damage, not the bow.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 4 * (1 + player.getRanged() / 25);
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 18;
            this.intForCraft = 5;
            this.ingredients = [["Wood", 1], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "steelArrow")
        {
            //For All Items
            this.identity = "Steel Arrow";
            this.weight = 0.1;
            this.size = 8;
            this.description = "An arrow with a long, sharp, steel pointed tip";
            this.intForDes = 4;
            this.intDescription = "It is the arrow that determines the damage, not the bow.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 6 * (1 + player.getRanged() / 25);
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 10;
            this.intForCraft = 15;
            this.ingredients = [["Wood", 1], ["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 4; // at max, sell for 4.
        }
        else if (this.type == "aldrekiiArrow")
        {
            //For All Items
            this.identity = "Aldrekii Arrow";
            this.weight = 0.05;
            this.size = 8;
            this.description = "A meticulously and skillfully crafted arrow of Aldrekii design.";
            this.intForDes = 4;
            this.intDescription = "The Aldrekii are famed for their talent in archery, but also for their expertly crafted bows and arrows.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 7 * (1 + player.getRanged() / 25);
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 30;
            this.ingredients = [["Wood", 1], ["Ikrinium", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 10); // at max, buy for 15.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, sell for 10.
        }
        else if (this.type == "timeArrow")
        {
            //For All Items
            this.identity = "Time Arrow";
            this.weight = 0.05;
            this.size = 8;
            this.description = "An arrow that penetrates the time continuum and so can not be affected by time manipulation.";
            this.intForDes = 40;
            this.intDescription = "An ancient group of aldrekii sages long ago forged these in order to save the world from a horrible demon.";

            //Define Utility
            this.utility = "ammunition";
            //Sub Utility
            this.subUtility = "arrow";
            this.subUtilityName = "Arrow";

            //Utility Focused
            this.damage = 7 * (1 + player.getRanged() / 25);
            this.magicalDamage = 1;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1920 - Math.floor(player.getCharisma() / 10); // at max, buy for 1915.
            this.sellValue = 1905 + Math.floor(player.getCharisma() / 10); // at max, sell for 1910.
        }
        else if (this.type == "balkurLeatherGloves")
        {
            //For All Items
            this.identity = "Balkur Leather Gloves";
            this.weight = 0.4;
            this.size = 11;
            this.description = "Gloves sewn from tanned balkur pelt and balkur fur for warmth.";
            this.intForDes = 0;
            this.intDescription = "These gloves are very comfortable!";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.085 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.35;
            this.thirstRetention = -0.085;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 4;
            this.intForCraft = 19;
            this.ingredients = [["Balkur Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 6); // at max, buy for 9.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 9.
        }
        else if (this.type == "balkurLeatherBoots")
        {
            //For All Items
            this.identity = "Balkur Leather Boots";
            this.weight = 1.6;
            this.size = 11;
            this.description = "Boots sewn from tanned balkur pelt and balkur fur for warmth.";
            this.intForDes = 4;
            this.intDescription = "These boots are ideal for trudging through harsh snowy conditions!";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.125 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.85;
            this.thirstRetention = -0.085;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 24;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 23;
            this.ingredients = [["Balkur Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28 - Math.floor(player.getCharisma() / 6); // at max, buy for 20.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 5); // at max, sell for 20.
        }
        else if (this.type == "balkurLeatherArmour")
        {
            //For All Items
            this.identity = "Balkur Leather Armour";
            this.weight = 3;
            this.size = 25;
            this.description = "A leather armour made from balkur pelts.";
            this.intForDes = 1;
            this.intDescription = "This armour is commonly worn by freydic warriors to strike fear into the hearts of their enemies.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 1.1 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3;
            this.thirstRetention = -0.6;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 2;
            this.enduranceBonus = 0;
            this.toughnessBonus = 1;
            this.intelligenceBonus = 0;
            this.charismaBonus = 10;
            this.rangedBonus = 0;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 40;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Balkur Pelt", 3], ["Balkur Fang", 8]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 102 - Math.floor(player.getCharisma() / 6); // at max, buy for 94.
            this.sellValue = 79 + Math.floor(player.getCharisma() / 3); // at max, sell for 94.
        }
        else if (this.type == "engineerOutfit")
        {
            //For All Items
            this.identity = "Engineer Outfit";
            this.weight = 20;
            this.size = 25;
            this.description = "A thick leather outfit used by engineers.";
            this.intForDes = 1;
            this.intDescription = "The leather helps keep Nirwaden engineers safe from burns and scratches and helps them notice tiny details.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 4;
            this.thirstRetention = 0.2;
            this.shockResist = 0.5;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 4;
            this.charismaBonus = -10;
            this.rangedBonus = -6;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = -10;
            this.survivalismBonus = -5;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 40;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 389 - Math.floor(player.getCharisma() / 1); // at max, buy for 339.
            this.sellValue = 326 + Math.floor(player.getCharisma() / 4); // at max, sell for 338.
        }
        else if (this.type == "frichFurMittens")
        {
            //For All Items
            this.identity = "Frich Fur Mittens";
            this.weight = 0.2;
            this.size = 11;
            this.description = "Mittens sewn from frich fur.";
            this.intForDes = 1;
            this.intDescription = "Frich clothing is associated with the low class.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = -0.05;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 3;
            this.intForCraft = 12;
            this.ingredients = [["Frich Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
        }
        else if (this.type == "ardilFurGloves")
        {
            //For All Items
            this.identity = "Ardil Fur Gloves";
            this.weight = 0.25;
            this.size = 11;
            this.description = "Gloves sewn from the pelt of an ardil.";
            this.intForDes = 1;
            this.intDescription = "Ardil gloves are soft, comfortable, and warm.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.3;
            this.thirstRetention = -0.06;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Ardil Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
        }
        else if (this.type == "berulnToothNecklace")
        {
            //For All Items
            this.identity = "Beruln Tooth Necklace";
            this.weight = 0.1;
            this.size = 11;
            this.description = "A necklace made with the tooth of a beruln.";
            this.intForDes = 1;
            this.intDescription = "Either you are a fearless adventurer who slayed a beruln and put its tooth onto a string, or you bought this at a shop.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "necklace";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 34;
            this.intForCraft = 25;
            this.ingredients = [["Fiber", 9], ["Beruln Skull", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 6); // at max, buy for 8.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
        }
        else if (this.type == "rabbitFootNecklace")
        {
            //For All Items
            this.identity = "Rabbit Foot Necklace";
            this.weight = 0.2;
            this.size = 11;
            this.description = "A necklace with a rabbit's severed foot as the centerpiece.";
            this.intForDes = 1;
            this.intDescription = "Everyone knows that wearing rabbit feet makes you lucky, why would anyone question that?";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "necklace";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 10;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = -1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";
            if (player.getEminence() >= 10)
            {
                this.ability = "luck";
                this.rangedBonus = 1;
                this.staminaBonus = 1;
                this.dexterityBonus = 1;
                this.survivalismBonus = 1;
                this.hungerBonus = 1;
            }

            this.yield = 7;
            this.intForCraft = 2;
            this.ingredients = [["Fiber", 1], ["Rabbit Foot", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 15); // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "theCorpseRing")
        {
            //For All Items
            this.identity = "The Corpse Ring";
            this.weight = 0.01;
            this.size = 3;
            this.description = "A tar-black ring with a miniature whithered skull embedded in it as the centerpiece.";
            this.intForDes = 22;
            if (player.getEminence() < 5)
            {
                this.intDescription = "This ring will drain your life force if you do not have the power to control it.";
            }
            else
            {
                this.intDescription = "This ring feeds off of souls that still cling to their corpses, healing the wearer.";
            }

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "ring";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 5;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.getEminence() < 5)
            {
                this.ability = "drainPlayer";
            }
            else
            {
                this.ability = "drainCorpse";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3090 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 2890.
            if (player.getEminence() < 5)
            {
                this.sellValue = 0; // at max, sell for 0.
            }
            else
            {
                this.sellValue = 2200 + Math.floor(player.getCharisma() / 0.1); // at max, sell for 2700.
            }
        }
        else if (this.type == "ironRing")
        {
            //For All Items
            this.identity = "Iron Ring";
            this.weight = 0.025;
            this.size = 3;
            this.description = "A thick ring of iron.";
            this.intForDes = 0;
            this.intDescription = "Just a simple boring old ring.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "ring";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //crafting
            this.yield = 8;
            this.intForCraft = 11;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "mofuFive")
        {
            //For All Items
            this.identity = "Mofu Feather Necklace";
            this.weight = 0.1;
            this.size = 11;
            this.description = "Five mofu feathers hanging from a thin cord of fiber.";
            this.intForDes = 1;
            this.intDescription = "You are one with the mofu...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "necklace";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //crafting
            this.yield = 4;
            this.intForCraft = 21;
            this.ingredients = [["Fiber", 1], ["mofuFeather", 20]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 63 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 43.
            this.sellValue = 43; // at max, sell for 6.
        }
        else if (this.type == "holuimTalisman")
        {
            //For All Items
            this.identity = "Holuim Talisman";
            this.weight = 0;
            this.size = 20;
            this.description = "A powerful talisman made of vorcadium.";
            this.intForDes = 1;
            this.intDescription = "Whoever wears this will be transported to the primary source of vorcadium from which this talisman was designed in the moment that they close their eyes.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "necklace";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.eminenceRequirement = 6;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 2;
            this.charismaBonus = 12;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() > 6)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 20;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "holuim";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 44444; // at max, buy for 44444.
            this.sellValue = 44444; // at max, sell for 44444.
        }
        else if (this.type == "doctorOutfit")
        {
            //For All Items
            this.identity = "Doctor Outfit";
            this.weight = 9;
            this.size = 25;
            this.description = "The garb worn by the medical doctors of the Academy of Nirin.";
            this.intForDes = 1;
            this.intDescription = "This armour prevents airborne illness by filtering out the evil scents in the air with strong smelling herbs.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 10;
            this.magicalProtection = 0;
            this.warmthRetention = 3;
            this.thirstRetention = 0.1;
            this.shockResist = 0.15;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 2;
            this.charismaBonus = 24;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 6;
            this.hungerBonus = 2;
            this.thirstBonus = 2;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            if (player.getEminence() >= 10) //there is symbolic strength to intellectual power that can be tapped into
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 1;
                this.memoryBonus = 1;
            }

            //ability
            this.ability = "resistDisease";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 500 - Math.floor(player.getCharisma() / 3); // at max, buy for 485.
            this.sellValue = 475 + Math.floor(player.getCharisma() / 5); // at max, sell for 485.
        }
        else if (this.type == "jungleHunterOutfit")
        {
            //For All Items
            if (player.gender == "Male")
            {
                this.identity = "Jungle Huntsman Outfit";
            }
            else
            {
                this.identity = "Jungle Huntress Outfit";
            }
            this.weight = 60;
            this.size = 28;
            this.description = "A thick suit made of zaf shell reinforced salisea leather with a mask and filter.";
            this.intForDes = 1;
            this.intDescription = "This armour protects its wearer from deadly spores, gases, and aireborne bacteria.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 7 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 6;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = 0.35;
            this.shockResist = 2;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 1;
            this.intelligenceBonus = 0;
            this.charismaBonus = 5;
            this.rangedBonus = 0;
            this.constitutionBonus = 2;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 10;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 20;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "resistDisease";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Salisea Leather", 8], ["Zaf Beetle Shell", 1], ["Cloth", 5], ["Zaf Beetle Whiskers", 30]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 555 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 455.
            this.sellValue = 415 + Math.floor(player.getCharisma() / 1.25); // at max, sell for 455.
        }
        else if (this.type == "swampWalkerArmour")
        {
            //For All Items
            this.identity = "Swamp Walker Armour";
            this.weight = 3.5;
            this.size = 25;
            this.description = "Dark leather armour, a black hood that covers a metal mask which has stained glass eyes, and a blackish-green bandana.";
            this.intForDes = 13;
            this.intDescription = "This armour prevents airborne sickness.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 3;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.45;
            this.thirstRetention = -0.1;
            this.shockResist = -1;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 6;
            this.rangedBonus = 2;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 4;
            this.survivalismBonus = 3;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "resistDisease";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Mountain Frich Pelt", 3], ["Iron", 1], ["Cloth", 1], ["Glass", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 130 - Math.floor(player.getCharisma() / 2); // at max, buy for 105.
            this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
        }
        else if (this.type == "avrakLeatherArmour")
        {
            //For All Items
            this.identity = "Avrak Leather Armour";
            this.weight = 7;
            this.size = 26;
            this.description = "Armour made from the hide of an avrak.";
            this.intForDes = 1;
            this.intDescription = "Avrak hide is particularly thick and makes for a sturdy leather armour.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 6 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 5;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.05;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 3;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Avrak Hide", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 92 - Math.floor(player.getCharisma() / 2); // at max, buy for 67.
            this.sellValue = 42 + Math.floor(player.getCharisma() / 2); // at max, sell for 67.
        }
        else if (this.type == "evrakLeatherArmour")
        {
            //For All Items
            this.identity = "Evrak Leather Armour";
            this.weight = 8;
            this.size = 26;
            this.description = "Armour made from the hide of an evrak.";
            this.intForDes = 1;
            this.intDescription = "Evrak hide is particularly thick and makes for a sturdy leather armour.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 6 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 5;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.95;
            this.thirstRetention = 0.05;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 1;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 1;
            this.constitutionBonus = 1;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Evrak Hide", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 99 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 79.
            this.sellValue = 54 + Math.floor(player.getCharisma() / 2); // at max, sell for 79.
        }
        else if (this.type == "boulchomLeatherArmour")
        {
            //For All Items
            this.identity = "Boulchom Leather Armour";
            this.weight = 3;
            this.size = 25;
            this.description = "A leather armour made from boulchom pelts.";
            this.intForDes = 1;
            this.intDescription = "This armour is made to resemble the form of a boulchom.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 1.2 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.8;
            this.thirstRetention = 0.03;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 5;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 2;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 5;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Boulchom Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 73 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 53.
            this.sellValue = 33 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 53.
        }
        else if (this.type == "boulchomLeatherGloves")
        {
            //For All Items
            this.identity = "Boulchom Leather Gloves";
            this.weight = 0.9;
            this.size = 7;
            this.description = "Leather gloves made from boulchom pelt.";
            this.intForDes = 1;
            this.intDescription = "A good quality leather glove for both style and efficiency.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.1 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.1;
            this.thirstRetention = 0.01;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 4;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 6;
            this.intForCraft = 21;
            this.ingredients = [["Boulchom Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 3); // at max, buy for 5.
            this.sellValue = 5; // at max, sell for 5.
        }
        else if (this.type == "boulchomLeatherBoots")
        {
            //For All Items
            this.identity = "Boulchom Leather Boots";
            this.weight = 1.9;
            this.size = 10;
            this.description = "Leather boots made from boulchom pelt.";
            this.intForDes = 4;
            this.intDescription = "These are well made sturdy boots that are good for long hikes and stomping faces.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.15 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.15;
            this.thirstRetention = 0.01;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 2;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Boulchom Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 2); // at max, buy for 21.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 4); // at max, sell for 21.
        }
        else if (this.type == "drileLeatherBoots")
        {
            //For All Items
            this.identity = "Drile Leather Boots";
            this.weight = 2.8;
            this.size = 11;
            this.description = "Hefty boots made from drile skin.";
            this.intForDes = 2;
            this.intDescription = "These are durable boots, great for trogging through mud or whatever...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.25 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.1;
            this.thirstRetention = 0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 33;
            this.ingredients = [["Drile Skin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 49 - Math.floor(player.getCharisma() / 2); // at max, buy for 24.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 8); // at max, sell for 24.
        }
        else if (this.type == "drileLeatherGloves")
        {
            //For All Items
            this.identity = "Drile Leather Gloves";
            this.weight = 2;
            this.size = 8;
            this.description = "Protective gloves made from drile skin.";
            this.intForDes = 0;
            this.intDescription = "These scale laden gloves are great for putting on your hands...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.15 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.05;
            this.thirstRetention = 0.05;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 7;
            this.intForCraft = 32;
            this.ingredients = [["Drile Skin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 3.125); // at max, buy for 8.
            this.sellValue = 8; // at max, sell for 8.
        }
        else if (this.type == "grizzlyLeatherGloves")
        {
            //For All Items
            this.identity = "Grizzly Leather Gloves";
            this.weight = 1.6;
            this.size = 8;
            this.description = "Hardened leather gloves crafted from grizzy bear pelt.";
            this.intForDes = 2;
            this.intDescription = "These gloves will certainly keep your hands warm...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.1 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.25;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 5;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 39;
            this.ingredients = [["Grizzly Bear Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 56 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 26.
            this.sellValue = 26; // at max, sell for 26.
        }
        else if (this.type == "drileLeatherArmour")
        {
            //For All Items
            this.identity = "Drile Leather Armour";
            this.weight = 6.6;
            this.size = 26;
            this.description = "A leather armour made from drile skin.";
            this.intForDes = 4;
            this.intDescription = "This armour is somewhat fire-retardant.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 3;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.2;
            this.thirstRetention = 0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Drile Skin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 86 - Math.floor(player.getCharisma() / 2.777777777); // at max, buy for 68.
            this.sellValue = 53 + Math.floor(player.getCharisma() / 3); // at max, sell for 68.
        }
        else if (this.type == "cephrianArmour")
        {
            //For All Items
            this.identity = "Cephrian Armour";
            this.weight = 20;
            this.size = 27;
            this.description = "Steel plated leggings, a chain top with a tabard, and a pointed steel helmet line with fur.";
            this.intForDes = 1;
            this.intDescription = "The standard armour worn by the cephrian military.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 11.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 10;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.6;
            this.thirstRetention = 0.1;
            this.shockResist = -3;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 6;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 2;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.getStrength() > 8 || player.getDexterity() >= 13)
            {
                this.ability = "none";
            }
            else
            {
                this.ability = "hefty";
            }

            //Crafting
            this.yield = 3;
            this.intForCraft = 40;
            this.ingredients = [["Lion Pelt", 3], ["Hyena Pelt", 1], ["Steel", 20]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 350 - Math.floor(player.getCharisma() / 2); // at max, buy for 325.
            this.sellValue = 300 + Math.floor(player.getCharisma() / 2); // at max, sell for 325.
        }
        else if (this.type == "stagArmour")
        {
            //For All Items
            this.identity = "The Wendigo's Stag Armour";
            this.weight = 3;
            this.size = 26;
            this.description = "This armour once belonged to the bandit chieftain known as The Wendigo.";
            this.intForDes = 0;
            this.intDescription = "Rumors and superstition had convinced many that The Wendigo was a real wendigo, and that his crew were a herd of magical deermen who were beholden to him.";
            this.smallText = "tiny";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 2.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.45;
            this.thirstRetention = -0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 7;
            this.rangedBonus = 3;
            this.constitutionBonus = 0;
            this.staminaBonus = 2;
            this.dexterityBonus = 6;
            this.survivalismBonus = 5;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = -1;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 150 - Math.floor(player.getCharisma() / 2); // at max, buy for 125.
            this.sellValue = 100 + Math.floor(player.getCharisma() / 2); // at max, sell for 125.
        }
        else if (this.type == "deerHideArmour")
        {
            //For All Items
            this.identity = "Deer Hide Armour";
            this.weight = 3;
            this.size = 26;
            this.description = "This armour is worn by The Wendigo's deermen who live in the woods and are said to eat the passing travellers.";
            this.intForDes = 0;
            this.intDescription = "Though the tales of cannibalism are true in regard to The Wendigo and his deermen, the deermen are not actually half deer half man... they are just cannibals.";
            this.smallText = "micro";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 2 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.25;
            this.thirstRetention = -0.23;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 5;
            this.rangedBonus = 2;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 3;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = -1;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 110 - Math.floor(player.getCharisma() / 3); // at max, buy for 95.
            this.sellValue = 80 + Math.floor(player.getCharisma() / 3); // at max, sell for 95.
        }
        else if (this.type == "skolLeatherArmour")
        {
            //For All Items
            this.identity = "Skol Leather Armour";
            this.weight = 5;
            this.size = 26;
            this.description = "A leather armour made from hardened skol pelts.";
            this.intForDes = 3;
            this.intDescription = "The armour is barbed so as to strike fear in your enemies.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 2 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.35;
            this.shockResist = -0.2;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 4;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 5;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Skol Pelt", 2], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 88 - Math.floor(player.getCharisma() / 5); // at max, buy for 78.
            this.sellValue = 53 + Math.floor(player.getCharisma() / 2); // at max, sell for 78.
        }
        else if (this.type == "skolLeatherGloves")
        {
            //For All Items
            this.identity = "Skol Leather Gloves";
            this.weight = 1.4;
            this.size = 10;
            this.description = "Iron barbed leather gloves made from skol pelt.";
            this.intForDes = 2;
            this.intDescription = "Punching does more damage since these gloves are barbed.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.2 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.1;
            this.thirstRetention = -0.09;
            this.shockResist = -0.05;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "spikedHandsI";

            //Crafting
            this.yield = 3;
            this.intForCraft = 37;
            this.ingredients = [["Skol Pelt", 1], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 5); // at max, buy for 19.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 5); // at max, sell for 19.
        }
        else if (this.type == "skolLeatherBoots")
        {
            //For All Items
            this.identity = "Skol Leather Boots";
            this.weight = 3.3;
            this.size = 10;
            this.description = "Iron barbed leather boots made from skol pelt.";
            this.intForDes = 1;
            this.intDescription = "A pair of sharpened boots?";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.3 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.15;
            this.thirstRetention = -0.11;
            this.shockResist = -0.08;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -4;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Skol Pelt", 1], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 56 - Math.floor(player.getCharisma() / 5); // at max, buy for 46.
            this.sellValue = 36 + Math.floor(player.getCharisma() / 5); // at max, sell for 46.
        }
        else if (this.type == "grizzlyLeatherBoots")
        {
            //For All Items
            this.identity = "Grizzly Leather Boots";
            this.weight = 2.2;
            this.size = 10;
            this.description = "Thick and warm leather boots made from grizzly bear pelt.";
            this.intForDes = 2;
            this.intDescription = "Sturdy survivalist boots that are great for tromping and trudging...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.15 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.25;
            this.thirstRetention = -0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 1;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 8;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 38;
            this.ingredients = [["Grizzly Bear Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 60 - Math.floor(player.getCharisma() / 5); // at max, buy for 50.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 5); // at max, sell for 50.
        }
        else if (this.type == "walrusLeatherArmour")
        {
            //For All Items
            this.identity = "Walrus Leather Armour";
            this.weight = 3;
            this.size = 26;
            this.description = "Armour made from the hide of a land walrus.";
            this.intForDes = 3;
            this.intDescription = "This armour helps you to retain warmth and endure cold climates!";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 4;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 5.5;
            this.thirstRetention = -0.8;
            this.shockResist = 5;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 25;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 24;
            this.ingredients = [["Walrus Hide", 1], ["Walrus Tusks", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 71 - Math.floor(player.getCharisma() / 3); // at max, buy for 56.
            this.sellValue = 29 + Math.floor(player.getCharisma() / 2); // at max, sell for 54.
        }
        else if (this.type == "skinAndBones")
        {
            //For All Items
            this.identity = "Worn Skin and Bones";
            this.weight = 11;
            this.size = 29;
            this.description = "Made from skinned human skin, and decorated with their bones.";
            this.intForDes = 11;
            this.intDescription = "This ghastly outfit belonged to the bandit chieftain Nelgref who would skin his victims and patch the new pieces onto this creation.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 4 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 11;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = -0.15;
            this.shockResist = 1;
            //Main Stat Bonuses
            this.strengthBonus = 3;
            this.enduranceBonus = 3;
            this.toughnessBonus = 6;
            this.intelligenceBonus = 0;
            this.charismaBonus = 11;
            this.rangedBonus = 0;
            this.constitutionBonus = 6;
            this.staminaBonus = -3;
            this.dexterityBonus = -11;
            this.survivalismBonus = -11;
            //Extra Stat Bonuses
            this.sleepBonus = 6;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000 - Math.floor(player.getCharisma() / 0.1); // at max, buy for 500.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "blackBearMediumArmour")
        {
            //For All Items
            this.identity = "Black Bear Armour";
            this.weight = 11;
            this.size = 26;
            this.description = "An armour composed of steel and black bear leather.";
            this.intForDes = 2;
            this.intDescription = "This armour is Vardanian by design.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 8 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 7;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.35;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 4;
            this.rangedBonus = 2;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 8;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "resistDisease";

            //Crafting
            this.yield = 1;
            this.intForCraft = 26;
            this.ingredients = [["Steel", 2], ["Black Bear Pelt", 1], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 87 - Math.floor(player.getCharisma() / 10); // at max, buy for 82.
            this.sellValue = 80 + Math.floor(player.getCharisma() / 25); // at max, sell for 82.
        }
        else if (this.type == "blackBearLeatherArmour")
        {
            //For All Items
            this.identity = "Black Bear Leather Armour";
            this.weight = 3;
            this.size = 26;
            this.description = "Armour made from the tanned hardened pelts of blackbears.";
            this.intForDes = 3;
            this.intDescription = "This armour is meant to be worn by woodland rangers who are skilled in survivalism and archery.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 5;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.2;
            this.thirstRetention = -0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Black Bear Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 64 - Math.floor(player.getCharisma() / 12); // at max, buy for 60.
            this.sellValue = 45 + Math.floor(player.getCharisma() / 3); // at max, sell for 60.
        }
        else if (this.type == "grizzlyLeatherArmour")
        {
            //For All Items
            this.identity = "Grizzly Leather Armour";
            this.weight = 5;
            this.size = 26;
            this.description = "Armour made from the tanned hardened pelts of a grizzly bear.";
            this.intForDes = 3;
            this.intDescription = "This armour is often worn by Thengan warriors and mercenaries.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 6;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3.5;
            this.thirstRetention = -0.55;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 3;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 11;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 3;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 30;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Grizzly Bear Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 85 - Math.floor(player.getCharisma() / 5); // at max, buy for 75.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 1); // at max, sell for 75.
        }
        else if (this.type == "balgurMercArmour")
        {
            //For All Items
            this.identity = "Balgur Mercenary Armour";
            this.weight = 4;
            this.size = 26;
            this.description = "The standard design for all armour worn by members of the balgur mercenary crew.";
            this.intForDes = 3;
            this.intDescription = "The Balgur Mercenaries are feared and respected throughout Thengaria and the surrounding regions.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 3;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.75;
            this.thirstRetention = -0.02;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 5;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 80 - Math.floor(player.getCharisma() / 3); // at max, buy for 65.
            this.sellValue = 35 + Math.floor(player.getCharisma() / 2); // at max, sell for 60.
        }
        else if (this.type == "balgurCaptainArmour")
        {
            //For All Items
            this.identity = "Balgur Mercenary Captain Armour";
            this.weight = 7;
            this.size = 26;
            this.description = "This design of armour is specially made for only the captains of The Balgur Mercenaries.";
            this.intForDes = 3;
            this.intDescription = "The captains among The Balgur Mercenaries did not attain their ranks with ease; they are some of the most fearsome warriors you would meet.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 6 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 3;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.9;
            this.thirstRetention = -0.03;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 2;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 8;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 2;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 145 - Math.floor(player.getCharisma() / 3); // at max, buy for 130.
            this.sellValue = 100 + Math.floor(player.getCharisma() / 2); // at max, sell for 125.
        }
        else if (this.type == "hetmerArmour")
        {
            //For All Items
            this.identity = "Wild Tusked Walrus Leather Armour";
            this.weight = 6;
            this.size = 26;
            this.description = "Armour made from the hide of a land Walrus.";
            this.intForDes = 0;
            this.intDescription = "This armour was made by the bandit chieftain Hetmer who reinforced it with sharpened walrus tusks and teeth to put fear into the hearts of his enemies.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 5.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 5;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 5.5;
            this.thirstRetention = -0.8;
            this.shockResist = 6;
            //Main Stat Bonuses
            this.strengthBonus = 4;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 9;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 25;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            //this armour can not be crafted -- it is unique and only Hetmer the bandit chieftain can drop it.

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 111 - Math.floor(player.getCharisma() / 3); // at max, buy for 96.
            this.sellValue = 71 + Math.floor(player.getCharisma() / 2); // at max, sell for 96.
        }
        else if (this.type == "anterShellArmour")
        {
            //For All Items
            this.identity = "Anter Shell Plate Armour";
            this.weight = 43;
            this.size = 28;
            this.description = "Armour made from the shells of anters.";
            this.intForDes = 1;
            this.intDescription = "This armour is heavy and not at all easy to move around in...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 8 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 6;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0.3;
            this.shockResist = 2;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = -8;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -22;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "heavy";

            //Crafting
            this.yield = 1;
            this.intForCraft = 24;
            this.ingredients = [["Anter Mandibles", 1], ["Anter Shell", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 99; // at max, buy for 99.
            this.sellValue = 95 + Math.floor(player.getCharisma() / 12); // at max, sell for 99.
        }
        else if (this.type == "gulfreyShellArmour")
        {
            //For All Items
            this.identity = "Gulfrey Shell Plate Armour";
            this.weight = 12;
            this.size = 26;
            this.description = "Armour made from the shell sections of a gulfrey.";
            this.intForDes = 6;
            this.intDescription = "This armour is particularly light compared to metal plate armours.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 10 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 10;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0.12;
            this.shockResist = 3;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = -3;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -1;
            this.survivalismBonus = -12;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Gulfrey Mandibles", 1], ["Gulfrey Shell Section", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 194 - Math.floor(player.getCharisma() / 1); // at max, buy for 144.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 1); // at max, sell for 140.
        }
        else if (this.type == "nirwadenMorionArmour")
        {
            //For All Items
            this.identity = "Nirwaden Guard Armour";
            this.weight = 19;
            this.size = 27;
            this.description = "Gambeson, chain mail and a morion helmet.";
            this.intForDes = 1;
            this.intDescription = "This armour is the standard armour worn by the Nirwaden Military.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 9.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 8;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.25;
            this.thirstRetention = 0.08;
            this.shockResist = -2;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Steel", 4], ["Gambeson", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 175 - Math.floor(player.getCharisma() / 2); // at max, buy for 150.
            this.sellValue = 125 + Math.floor(player.getCharisma() / 2); // at max, sell for 150.
        }
        else if (this.type == "nirwadenGambeson")
        {
            //For All Items
            this.identity = "Gambeson";
            this.weight = 2.5;
            this.size = 25;
            this.description = "Thick body padding made from horse hair.";
            this.intForDes = 1;
            this.intDescription = "A good gambeson serves as the basis for most other armours; it provides padding and protection.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 1.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.25;
            this.thirstRetention = -0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Horse Hair", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 26.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 6); // at max, sell for 26.
        }
        else if (this.type == "saltBloodArmour")
        {
            //For All Items
            this.identity = "Salt-Blood Armour";
            this.weight = 57;
            this.size = 26;
            this.description = "An armour made from crab limbs and hard pieces of crab shell; it has the stench of the sea about it.";
            this.intForDes = 6;
            this.intDescription = "This armour belonged to Captain Jalmari Salt-blood, a fearsome pirate of the northern sea.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 14 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 14;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.6;
            this.thirstRetention = -0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 2;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = -1;
            this.charismaBonus = 8;
            this.rangedBonus = -6;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = -33;
            this.survivalismBonus = 5;
            //Extra Stat Bonuses
            this.sleepBonus = 7;
            this.hungerBonus = 8;
            this.thirstBonus = -3;
            this.warmthBonus = 12;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else
            {
                this.ability = "hefty";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 257 - Math.floor(player.getCharisma() / 2); // at max, buy for 232.
            this.sellValue = 163 + Math.floor(player.getCharisma() / 1); // at max, sell for 213.
        }
        else if (this.type == "jvostranPlateArmour")
        {
            //For All Items
            this.identity = "Jvostran Plate Armour";
            this.weight = 172;
            this.size = 38;
            this.description = "Expertly forged armour made from refined jvostran ore.";
            this.intForDes = 12;
            this.intDescription = "Jvostran Plate armour is light blue compared to the dark blue of most jvostran because it is actually extremely thin.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 24 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 40;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.9;
            this.shockResist = -10;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 25;
            this.rangedBonus = -20;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -55;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "heavy";

            //Crafting
            this.yield = 1;
            this.intForCraft = 47;
            this.ingredients = [["Jvostran", 22]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24000 - Math.floor(player.getCharisma() / 0.01); // at max, buy for 19000.
            this.sellValue = 18000 + Math.floor(player.getCharisma() / 0.05); // at max, sell for 80.
        }
        else if (this.type == "cephrianPaladinArmour")
        {
            //For All Items
            this.identity = "Cephrian Paladin Armour";
            this.weight = 105;
            this.size = 38;
            this.description = "A large bronze suit of plate armour with a frog helm.";
            this.intForDes = 4;
            this.intDescription = "Paladin is a title conferred to distinguished Cephrians that fight valiently, skillfully, and honourably in the name of a noble Cephrian house.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 20 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 38;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.4;
            this.shockResist = -15;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 20;
            this.rangedBonus = -15;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -50;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "heavy";

            //Crafting
            this.yield = 1;
            this.intForCraft = 39;
            this.ingredients = [["Bronze", 23], ["Lion Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 7400 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 7200.
            this.sellValue = 7000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 7200.
        }
        else if (this.type == "chainArmour")
        {
            //For All Items
            this.identity = "Chain Mail Armour";
            this.weight = 15;
            this.size = 26;
            this.description = "Armour made from many small interconnected steel rings.";
            this.intForDes = 2;
            this.intDescription = "This armour is often used by a kingdom's soldiers because it is effective yet cheap enough to equip an army with.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 8 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 7;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0;
            this.shockResist = -5;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = -2;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -15;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 27;
            this.ingredients = [["Steel", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 95 - Math.floor(player.getCharisma() / 3); // at max, buy for 80.
            this.sellValue = 65 + Math.floor(player.getCharisma() / 3); // at max, sell for 80.
        }
        else if (this.type == "boarArmour")
        {
            //For All Items
            this.identity = "Boar Armour";
            this.weight = 15;
            this.size = 26;
            this.description = "A specially made gambeson of boar pelt, armoured with a ragged coat of plates.";
            this.intForDes = 3;
            this.intDescription = "This armour is often used by sellswords or bandits in the northern kingdom of the Nirwaden Empire.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 6.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 5;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.9;
            this.thirstRetention = -0.26;
            this.shockResist = -1;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting //boar pelt does not exist as an item in game...
            //this.yield = 1;
            //this.intForCraft = 25;
            //this.ingredients = [["Boar Pelt", 2], ["Iron", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 88 - Math.floor(player.getCharisma() / 3); // at max, buy for 73.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 8); // at max, sell for 66.
        }
        else if (this.type == "thenganPlateArmour")
        {
            //For All Items
            this.identity = "Steel Plate Armour";
            this.weight = 80;
            this.size = 26;
            this.description = "Forged steel plate armour with elaborate enlayed patterns.";
            this.intForDes = 16;
            this.intDescription = "This armour is designed in the Thengan style and its enlayed patterns honor royal Thengan heraldry.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 14 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 15;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.4;
            this.shockResist = -8;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 15;
            this.rangedBonus = -20;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -35;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Steel", 18]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 640 - Math.floor(player.getCharisma() / 3); // at max, buy for 625.
            this.sellValue = 600 + Math.floor(player.getCharisma() / 2); // at max, sell for 625.
        }
        else if (this.type == "thenganBascinetArmour")
        {
            //For All Items
            this.identity = "Bascinet Plate Armour";
            this.weight = 80;
            this.size = 26;
            this.description = "Forged steel plate armour with a bascinet.";
            this.intForDes = 12;
            this.intDescription = "This armour is uniquely Thengan in design.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 16.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 19;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.45;
            this.shockResist = -8;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 18;
            this.rangedBonus = -15;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -25;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Steel", 18], ["Skol Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1100 - Math.floor(player.getCharisma() / 1); // at max, buy for 1050.
            this.sellValue = 1000 + Math.floor(player.getCharisma() / 1); // at max, sell for 1050.
        }
        else if (this.type == "alitkaArmour")
        {
            //For All Items
            this.identity = "Bandit Chieftainess Alitka's Plate Armour";
            this.weight = 80;
            this.size = 26;
            this.description = "Forged steel plate armour draped in worn skol fur.";
            this.intForDes = 0;
            this.intDescription = "It is said that Alitka's bandits captured and killed a noble knight and that this was his armour.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 16.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 19;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = -0.6;
            this.shockResist = -7;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 21;
            this.rangedBonus = -10;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = -20;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 2;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 14;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 1400.
            this.sellValue = 1300 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 1400.
        }
        else if (this.type == "greatPlateArmour")
        {
            //For All Items
            this.identity = "Great Plate Armour";
            this.weight = 86;
            this.size = 26;
            this.description = "Forged steel plate armour with a great helm.";
            this.intForDes = 10;
            this.intDescription = "This armour is designed in the Thengan style.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 17 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 20;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3;
            this.thirstRetention = -0.5;
            this.shockResist = -10;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 20;
            this.rangedBonus = -25;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = -35;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Steel", 22], ["Black Bear Pelt", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1200 - Math.floor(player.getCharisma() / 1); // at max, buy for 1150.
            this.sellValue = 1100 + Math.floor(player.getCharisma() / 1); // at max, sell for 1150.
        }
        else if (this.type == "wolthgarPlateArmour")
        {
            //For All Items
            this.identity = "Wolthgar's Plate Armour";
            this.weight = 88;
            this.size = 26;
            this.description = "Forged steel plate armour lined with grey troll fur with a horned great helm.";
            this.intForDes = 0;
            this.intDescription = "This armour belonged to the late King Wolthgar the Great.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 18 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 21;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3;
            this.thirstRetention = -0.7;
            this.shockResist = -10;
            //Main Stat Bonuses
            this.strengthBonus = 3;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 41;
            this.rangedBonus = -25;
            this.constitutionBonus = 4;
            this.staminaBonus = 0;
            this.dexterityBonus = -35;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 25;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10000 - Math.floor(player.getCharisma() / 1); // at max, buy for 9950.
            this.sellValue = 9900 + Math.floor(player.getCharisma() / 1); // at max, sell for 9950.
        }
        else if (this.type == "northernPlateArmour")
        {
            //For All Items
            this.identity = "Steel Plate Armour";
            this.weight = 80;
            this.size = 26;
            this.description = "Forged steel plate armour with a cloak made from waanti fur.";
            this.intForDes = 1;
            this.intDescription = "This armour is strong and keeps the cold away.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 13 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 14;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3.5;
            this.thirstRetention = -0.7;
            this.shockResist = -8;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 17;
            this.rangedBonus = -20;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -35;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Steel", 17], ["Waanti Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 600 - Math.floor(player.getCharisma() / 1); // at max, buy for 550.
            this.sellValue = 500 + Math.floor(player.getCharisma() / 1); // at max, sell for 550.
        }
        else if (this.type == "nirwadenPlateArmour")
        {
            //For All Items
            this.identity = "Steel Plate Armour";
            this.weight = 75;
            this.size = 28;
            this.description = "A full nirwaden style set of plate armour made from thrice forged steel.";
            this.intForDes = 0;
            this.intDescription = "This armour is fit for knights and lords.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 16.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 16;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.5;
            this.thirstRetention = -0.08;
            this.shockResist = -9;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 23;
            this.rangedBonus = -15;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Thrice Forged Steel", 16], ["Gambeson", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1300 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1100.
            this.sellValue = 900 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1100.
        }
        else if (this.type == "barracoPlateArmour")
        {
            //For All Items
            this.identity = "Ser Barraco Kein's Tusked Plate Armour";
            this.weight = 75;
            this.size = 28;
            this.description = "The custom made set of armour once belonged to Ser Barraco Kein, whose band would mostly steal from the rich and would often give some of their spoils to the poor.";
            this.intForDes = 10000;
            this.intDescription = "Everyone in Nirwaden's north country know of him. He was exiled after he could no longer stand serving the rich who lived extravegently at the expense of the poor.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 17 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 17;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.6;
            this.thirstRetention = -0.09;
            this.shockResist = -9;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 28;
            this.rangedBonus = -20;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 8;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1800 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1600.
            this.sellValue = 1400 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1600.
        }
        else if (this.type == "mrbTacticalArmour")
        {
            //For All Items
            this.identity = "MRB Tactical Armour";
            this.weight = 26;
            this.size = 30;
            this.description = "The standard issue armour for the agents of the Magical Retention Bureau.";
            this.intForDes = 3;
            this.intDescription = "Features: tactical sensing, air filtration, optional ranged targeting, optional night vision, (Q key) - toggle optional modes.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 14 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 4;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 20;
            this.thirstRetention = 20;
            this.shockResist = -2;
            //Main Stat Bonuses
            this.strengthBonus = 2;
            this.enduranceBonus = 2;
            this.toughnessBonus = 2;
            this.intelligenceBonus = 0;
            this.charismaBonus = 40;
            this.rangedBonus = 2;
            this.constitutionBonus = 3;
            this.staminaBonus = 5;
            this.dexterityBonus = 10;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            this.ability = "cyborg";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 6000.
            this.sellValue = 5500 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 5900.
        }
        else if (this.type == "plumedBoroyePlateArmour" || this.type == "plumedMorrowPlateArmour" || this.type == "morrowPlateArmour" || this.type == "boroyePlateArmour")
        {
            //For All Items
            if (this.type == "plumedBoroyePlateArmour")
            {
                this.identity = "Plumed Krovhyuzka Plate Armour";
                this.weight = 80;
                this.size = 28;
                this.description = "A plumed and painted vardanian plate armour decorated in the fashion of the noble house Krovhyuzka.";
                this.intForDes = 6;
                this.intDescription = "This armour is worn by the most esteemed knights sworn to house Krovhyuzka.";
            }
            else if (this.type == "plumedMorrowPlateArmour")
            {
                this.identity = "Plumed Vorcaneous Plate Armour";
                this.weight = 80;
                this.size = 28;
                this.description = "A plumed and painted vardanian plate armour decorated in the fashion of the noble house Vorcaneous.";
                this.intForDes = 6;
                this.intDescription = "This armour is worn by the most esteemed knights sworn to house Vorcaneous.";
            }
            else if (this.type == "morrowPlateArmour")
            {
                this.identity = "Vorcaneous Plate Armour";
                this.weight = 80;
                this.size = 28;
                this.description = "A painted vardanian plate armour decorated in the fashion of the noble house Vorcaneous.";
                this.intForDes = 6;
                this.intDescription = "This armour is worn by knights sworn to house Vorcaneous.";
            }
            else if (this.type == "boroyePlateArmour")
            {
                this.identity = "Steel Plate Armour";
                this.weight = 84;
                this.size = 28;
                this.description = "A painted vardanian plate armour decorated in the fashion of the noble house Krovhyuzka.";
                this.intForDes = 6;
                this.intDescription = "This armour is worn by knights sworn to house Krovhyuzka.";
            }

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            if (this.type == "plumedBoroyePlateArmour" || this.type == "plumedMorrowPlateArmour")
            {
                this.protection = 15 * ((player.toughness / 100) + 1);
            }
            else
            {
                this.protection = 14.5 * ((player.toughness / 100) + 1);
            }
            this.toughnessRequirement = 14;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.3;
            this.shockResist = -9;
            //Main Stat Bonuses
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (this.type == "plumedBoroyePlateArmour" || this.type == "plumedMorrowPlateArmour")
            {
                this.staminaBonus = 1;
                this.constitutionBonus = 1;
                this.strengthBonus = 1;
                this.charismaBonus = 29;
            }
            else
            {
                this.strengthBonus = 0;
                this.charismaBonus = 24;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
            }
            this.rangedBonus = -14;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            if (this.type == "plumedBoroyePlateArmour" || this.type == "plumedMorrowPlateArmour")
            {
                this.ingredients = [["Steel", 22], ["Aketon", 1], ["Varonoi Feather", 3]];
            }
            else
            {
                this.ingredients = [["Steel", 22], ["Aketon", 1]];
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2600 - Math.floor(player.getCharisma() / 1); // at max, buy for 2550.
            this.sellValue = 2500 + Math.floor(player.getCharisma() / 1); // at max, sell for 2550.
        }
        else if (this.type == "vardanianPlateArmour")
        {
            //For All Items
            this.identity = "Steel Plate Armour";
            this.weight = 80;
            this.size = 28;
            this.description = "A vardanian plate armour often worn by the knights of the realm.";
            this.intForDes = 3;
            this.intDescription = "This is the most generic variety of vardanian plate armour.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 14 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 14;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.3;
            this.shockResist = -10;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 17;
            this.rangedBonus = -16;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 47;
            this.ingredients = [["Steel", 18], ["Aketon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 700 - Math.floor(player.getCharisma() / 1); // at max, buy for 650.
            this.sellValue = 600 + Math.floor(player.getCharisma() / 1); // at max, sell for 650.
        }
        else if (this.type == "vardanianPlateArmourBlackPlume")
        {
            //For All Items
            this.identity = "Steel Plate Armour";
            this.weight = 80;
            this.size = 28;
            this.description = "Vardanian plate armour with a black plume.";
            this.intForDes = 0;
            this.intDescription = "The black plume denotes alliegance to the high count of Vardania.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 14 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 14;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.3;
            this.shockResist = -10;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 19;
            this.rangedBonus = -16;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 47;
            this.ingredients = [["Steel", 18], ["Aketon", 1], ["Corvo Feather", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 720 - Math.floor(player.getCharisma() / 1); // at max, buy for 670.
            this.sellValue = 620 + Math.floor(player.getCharisma() / 1); // at max, sell for 670.
        }
        else if (this.type == "vardanianPlateArmourRedPlume")
        {
            //For All Items
            this.identity = "Steel Plate Armour";
            this.weight = 80;
            this.size = 28;
            this.description = "Vardanian plate armour with a red plume.";
            this.intForDes = 0;
            this.intDescription = "The red plume denotes alliegance to Count Visrigge, the nephew of the high count and pretender to his throne.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 14 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 14;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.3;
            this.shockResist = -10;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 19;
            this.rangedBonus = -16;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 47;
            this.ingredients = [["Steel", 18], ["Aketon", 1], ["Corvo Feather", 1], ["Red Dye", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 725 - Math.floor(player.getCharisma() / 1); // at max, buy for 675.
            this.sellValue = 625 + Math.floor(player.getCharisma() / 1); // at max, sell for 675.
        }
        else if (this.type == "nechrovitePlateArmour")
        {
            //For All Items
            this.identity = "Nechrovite Plate Armour";
            this.weight = 92;
            this.size = 28;
            this.description = "A vardanian plate armour often worn by the counts of Vardania.";
            this.intForDes = 3;
            this.intDescription = "Nechrovite plate armour usually is only worn by nobility or royalty in Vardania.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 15.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 15;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.35;
            this.shockResist = -13;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 22;
            this.rangedBonus = -16;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 49;
            this.ingredients = [["Nechrovite", 14], ["Aketon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1700 - Math.floor(player.getCharisma() / 1); // at max, buy for 1650.
            this.sellValue = 1600 + Math.floor(player.getCharisma() / 1); // at max, sell for 1650.
        }
        else if (this.type == "nechrovitePlateArmourBlackPlume")
        {
            //For All Items
            this.identity = "Nechrovite Plate Armour";
            this.weight = 92;
            this.size = 28;
            this.description = "A black plumed vardanian plate armour often worn by the counts of Vardania.";
            this.intForDes = 3;
            this.intDescription = "Nechrovite plate armour usually is only worn by nobility or royalty in Vardania.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 15.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 15;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.35;
            this.shockResist = -13;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 23;
            this.rangedBonus = -16;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 49;
            this.ingredients = [["Nechrovite", 14], ["Aketon", 1], ["Corvo Feather", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1720 - Math.floor(player.getCharisma() / 1); // at max, buy for 1670.
            this.sellValue = 1620 + Math.floor(player.getCharisma() / 1); // at max, sell for 1670.
        }
        else if (this.type == "nechrovitePlateArmourRedPlume")
        {
            //For All Items
            this.identity = "Nechrovite Plate Armour";
            this.weight = 92;
            this.size = 28;
            this.description = "A red plumed vardanian plate armour worn by the treasonous counts of the land.";
            this.intForDes = 0;
            this.intDescription = "The red plume denotes alliegance to Count Visrigge, the nephew of the high count and pretender to his throne.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 15.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 15;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.35;
            this.shockResist = -13;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 23;
            this.rangedBonus = -16;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -32;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 49;
            this.ingredients = [["Nechrovite", 14], ["Aketon", 1], ["Corvo Feather", 1], ["Red Dye", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1725 - Math.floor(player.getCharisma() / 1); // at max, buy for 1675.
            this.sellValue = 1625 + Math.floor(player.getCharisma() / 1); // at max, sell for 1675.
        }
        else if (this.type == "eliteNechrovitePlateArmour")
        {
            //For All Items
            this.identity = "Elite Nechrovite Plate Armour";
            this.weight = 100;
            this.size = 29;
            this.description = "Heavy Vardanian plate armour.";
            this.intForDes = 0;
            this.intDescription = "This style of armour carries a certain prestige in Vardania.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 17 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 16;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.4;
            this.shockResist = -13;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 29;
            this.rangedBonus = -18;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -40;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Nechrovite", 18], ["Aketon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3100 - Math.floor(player.getCharisma() / 1); // at max, buy for 3050.
            this.sellValue = 3000 + Math.floor(player.getCharisma() / 1); // at max, sell for 3050.
        }
        else if (this.type == "eliteNechrovitePlateArmourPlumed")
        {
            //For All Items
            this.identity = "Elite Nechrovite Plate Armour";
            this.weight = 100;
            this.size = 30;
            this.description = "Heavy Vardanian plate armour with black plumage.";
            this.intForDes = 0;
            this.intDescription = "This style of armour is the same which the high count woar when he directed his forces during the Vardanian Civil War.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 17 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 16;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.4;
            this.shockResist = -13;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 30;
            this.rangedBonus = -17;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -40;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Nechrovite", 18], ["Aketon", 1], ["Corvo Feather", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3150 - Math.floor(player.getCharisma() / 1); // at max, buy for 3100.
            this.sellValue = 3050 + Math.floor(player.getCharisma() / 1); // at max, sell for 3100.
        }
        else if (this.type == "fineNechrovitePlateArmour")
        {
            //For All Items
            this.identity = "Fine Nechrovite Plate Armour";
            this.weight = 100;
            this.size = 29;
            this.description = "A finely forged set of vardanian plate armour.";
            this.intForDes = 6;
            this.intDescription = "This is one of the more recently designed and more advanced Vardanian armours.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 17 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 17;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.25;
            this.shockResist = -13;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 28;
            this.rangedBonus = -10;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -30;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 4;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Nechrovite", 20], ["Aketon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2000 - Math.floor(player.getCharisma() / 1); // at max, buy for 1950.
            this.sellValue = 1900 + Math.floor(player.getCharisma() / 1); // at max, sell for 1950.
        }
        else if (this.type == "fineVardanianPlateArmour")
        {
            //For All Items
            this.identity = "Fine Vardanian Plate Armour";
            this.weight = 85;
            this.size = 29;
            this.description = "A finely forged set of vardanian plate armour.";
            this.intForDes = 6;
            this.intDescription = "This is one of the more recently designed and more advanced Vardanian armours.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 16 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 17;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.2;
            this.shockResist = -13;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 24;
            this.rangedBonus = -8;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -26;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 4;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Steel", 22], ["Aketon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1240 - Math.floor(player.getCharisma() / 1); // at max, buy for 1190.
            this.sellValue = 1140 + Math.floor(player.getCharisma() / 1); // at max, sell for 1190.
        }
        else if (this.type == "kerPlateArmour")
        {
            //For All Items
            this.identity = "Ker Plate Armour";
            this.weight = 75;
            this.size = 27;
            this.description = "Vardanian plate armour made out of forged ker shell.";
            this.intForDes = 3;
            this.intDescription = "It is forged in the style of elite vardanian armour.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 13 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 12;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = 0.06;
            this.shockResist = -10;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 17;
            this.rangedBonus = -13;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -28;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 5;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (player.strength >= 30 && player.dexterity >= 15)
            {
                this.ability = "none";
            }
            else if (player.strength >= 20 && player.dexterity >= 10)
            {
                this.ability = "hefty";
            }
            else
            {
                this.ability = "heavy";
            }

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Ker Shell", 11], ["Aketon", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 400 - Math.floor(player.getCharisma() / 3); // at max, buy for 385.
            this.sellValue = 370 + Math.floor(player.getCharisma() / 3); // at max, sell for 385.
        }
        else if (this.type == "ancientArmour")
        {
            //For All Items
            this.identity = "Ancient Armour";
            this.weight = 100;
            this.size = 26;
            this.description = "An eerily strange armour forged of otherworldly bone fragments.";
            this.intForDes = 16;
            this.intDescription = "This armour exudes a feeling of pure fear.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 17 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 20;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0.5;
            this.fireProofing = 10;
            this.shockResist = -8;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 25;
            this.rangedBonus = -40;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -50;
            this.survivalismBonus = -50;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 10;
            this.willpowerBonus = 10;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 10;

            //ability
            this.ability = "heavy";

            //Crafting
            this.yield = 1;
            this.intForCraft = 60;
            this.ingredients = [["Ancient Fragment", 100]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 2000.
            this.sellValue = 2000; // at max, sell for 2000.
        }
        else if (this.type == "orgishEliteArmour")
        {
            //For All Items
            this.identity = "Orgish Elite Armour";
            this.weight = 25;
            this.size = 26;
            this.description = "The armour worn by the nobles and those combat hardened warriors who are most highly ranked.";
            if (player.raceName == "Orgell")
            {
                this.intForDes = 0;
            }
            else
            {
                this.intForDes = 1;
            }
            this.intDescription = "The mask is meant to show the ferocity and valor of the warrior who wears it.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 13 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 16;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.4;
            this.shockResist = -3;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 30;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 1;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Steel", 5], ["Red Leather", 5], ["Cloth", 2], ["Gold", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 600 - Math.floor(player.getCharisma() / 1); // at max, buy for 550.
            this.sellValue = 450 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 550.
        }
        else if (this.type == "orgishRoyalArmour")
        {
            //For All Items
            this.identity = "Orgish Royal General Armour";
            this.weight = 38;
            this.size = 30;
            this.description = "The armour worn exclusively by the royal orgell general.";
            if (player.raceName == "Orgell")
            {
                this.intForDes = 0;
            }
            else
            {
                this.intForDes = 2;
            }
            this.intDescription = "In orgell society the king is in charge of society, domestic policy and tradition, while the royal general controls the military.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 14 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 20;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.4;
            this.shockResist = -3;
            //Main Stat Bonuses
            this.strengthBonus = 3;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 1;
            this.charismaBonus = 46;
            this.rangedBonus = 0;
            this.constitutionBonus = 1;
            this.staminaBonus = 1;
            this.dexterityBonus = 2;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 5;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Steel", 6], ["Red Leather", 8], ["Cloth", 3], ["Gold", 11]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3800 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 3500.
            this.sellValue = 3300 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 3500.
        }
        else if (this.type == "blackChainArmour")
        {
            //For All Items
            this.identity = "Black Chain Mail Armour";
            this.weight = 18;
            this.size = 26;
            this.description = "Armour made from many small interconnected rings of tempered nechrovite.";
            this.intForDes = 13;
            this.intDescription = "This armour is generally worn by mercenaries in Vardania due to the land's abundance of nechrovite.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 9 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 9;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = -0.15;
            this.shockResist = -6;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = -2;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -20;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Nechrovite", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 139 - Math.floor(player.getCharisma() / 3); // at max, buy for 124.
            this.sellValue = 100 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 120.
        }
        else if (this.type == "ghoulMercArmour")
        {
            //For All Items
            this.identity = "Ghoulhide Armour";
            this.weight = 15;
            this.size = 25;
            this.description = "A tough aketon sewn with multiple layers of ghoul pelt, and a large helmet made from a ghoul's exoskull.";
            this.intForDes = 1;
            this.intDescription = "This armour can be rather intimidating...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 5;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.7;
            this.thirstRetention = -0.4;
            this.shockResist = 0.13;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 13;
            this.rangedBonus = 2;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 3;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Ghoul Pelt", 3], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 120 - Math.floor(player.getCharisma() / 5); // at max, buy for 110.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 110.
        }
        else if (this.type == "vardanianCoatOfPlates")
        {
            //For All Items
            this.identity = "Vardanian Coat of Plates";
            this.weight = 16;
            this.size = 25;
            this.description = "This full armour set is worn by vardanian soldiers, deserters, and mercenaries alike.";
            this.intForDes = 0;
            this.intDescription = "This armour is designed to protect the wearer from inhaling particles of disease or swamp air.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 10 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 8;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.25;
            this.shockResist = -5;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -10;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "resistDisease";

            //Crafting
            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Iron", 6], ["Nechrovite", 1], ["Cloth", 2], ["Bovine Hide", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 95 - Math.floor(player.getCharisma() / 50); // at max, buy for 94.
            this.sellValue = 89 + Math.floor(player.getCharisma() / 10); // at max, sell for 94.
        }
        else if (this.type == "vardanianSoldierOutfit")
        {
            //For All Items
            this.identity = "Vardanian Soldier Outfit";
            this.weight = 1.4;
            this.size = 25;
            this.description = "Chainmail and an aketon with an iron helm.";
            this.intForDes = 5;
            this.intDescription = "This armour is commonly worn by town guards, but it is not necessarily worn in all Vardanian provinces.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 4 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = -0.2;
            this.shockResist = 0.1;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Aketon", 1], ["Bovine Hide", 1], ["Iron", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 25); // at max, buy for 44.
            this.sellValue = 43 + Math.floor(player.getCharisma() / 50); // at max, sell for 44.
        }
        else if (this.type == "vardanianEliteSoldierOutfit")
        {
            //For All Items
            this.identity = "Vardanian Elite Soldier Outfit";
            this.weight = 6.5;
            this.size = 28;
            this.description = "Chainmail, a ghoul fur decorated aketon, a steel helmet and some pieces of plated armour.";
            this.intForDes = 4;
            this.intDescription = "This armour is commonly worn by captains and more highly ranked soldiers.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 6 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 4;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.3;
            this.shockResist = 0.5;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Aketon", 1], ["Ghoul Hide", 1], ["Steel", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 146 - Math.floor(player.getCharisma() / 8); // at max, buy for 140.
            this.sellValue = 137 + Math.floor(player.getCharisma() / 15); // at max, sell for 140.
        }
        else if (this.type == "vardanianAketon")
        {
            //For All Items
            this.identity = "Aketon";
            this.weight = 1.4;
            this.size = 25;
            this.description = "A sewn aketon of elk fur and cloth.";
            this.intForDes = 0;
            this.intDescription = "This armour is a necessary padding for plate armour, but it also can serve as an armour in and of itself.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 1.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = -0.15;
            this.shockResist = 0.1;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Cloth", 3], ["Elk Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26 - Math.floor(player.getCharisma() / 25); // at max, buy for 24.
            this.sellValue = 23 + Math.floor(player.getCharisma() / 50); // at max, sell for 24.
        }
        else if (this.type == "naapridLeatherArmour")
        {
            //For All Items
            this.identity = "Naaprid Leather Armour";
            this.weight = 2;
            this.size = 26;
            this.description = "Leather armour made from the tanned hide of a Naaprid.";
            this.intForDes = 1;
            this.intDescription = "This armour provides moderate heat retention in cold climates.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 2;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.5;
            this.thirstRetention = -0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Naaprid Pelt", 1], ["Naaprid Horn", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 3); // at max, buy for 31.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 3); // at max, sell for 29.
        }
        else if (this.type == "zetianWarriorArmour")
        {
            //For All Items
            this.identity = "Zetian Warrior Armour";
            this.weight = 18;
            this.size = 28;
            this.description = "Armour made from the shells of raed beetles.";
            this.intForDes = 1;
            this.intDescription = "This is the armour that Zetian warriors wear when they go to battle.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 7 * ((player.toughness / 100) + 1);
            if (player.raceName == "Zetian")
            {
                this.toughnessRequirement = 3;
            }
            else
            {
                this.toughnessRequirement = 7;
            }
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.25;
            this.thirstRetention = 0.8;
            this.shockResist = 0.66;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 7;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 4;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            if (player.raceName == "Zetian")
            {
                this.intForCraft = 11;
            }
            else
            {
                this.intForCraft = 25;
            }

            this.ingredients = [["Raed Beetle Shell", 20], ["Raed Beetle Leg", 20], ["Voaii Wing Fragments", 2], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 51.
            this.sellValue = 45 + Math.floor(player.getCharisma() / 8); // at max, sell for 51.
        }
        else if (this.type == "freydicRoyalDress")
        {
            //For All Items
            this.identity = "Freydic Royal Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "The dress worn by the women in the freydic royal family.";
            this.intForDes = 5;
            this.intDescription = "This exquisite outfit is finely tailored from the fur of a massive winter wolf and lined with turquoise and sapphire engravings.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 30;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = -2;
            this.dexterityBonus = -10;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            //Crafting
            this.yield = 1;
            this.intForCraft = 43;
            this.ingredients = [["Sapphire", 1], ["Turquoise", 8], ["Massive Winter Wolf Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5500 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 5100.
            this.sellValue = 4700 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 5100.
        }
        else if (this.type == "fineFreydicOutfitF")
        {
            //For All Items
            this.identity = "Lady's Fine Freydic Outfit";
            this.weight = 1;
            this.size = 26;
            this.description = "Expertly tailored clothing suitable for the high class.";
            this.intForDes = 1;
            this.intDescription = "Sewn from waanti fur, delicately lined with cloth on the inside!";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = -0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 15;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 41;
            this.ingredients = [["Waanti Pelt", 2], ["Cloth", 3], ["Koobu Pelt", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250 - Math.floor(player.getCharisma() / 3); // at max, buy for 250.
            this.sellValue = 125 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 225.
        }
        else if (this.type == "fineFreydicOutfitM")
        {
            //For All Items
            this.identity = "Gent's Fine Freydic Outfit";
            this.weight = 1;
            this.size = 26;
            this.description = "Expertly tailored clothing suitable for the high class.";
            this.intForDes = 1;
            this.intDescription = "Sewn from waanti fur, delicately lined with cloth on the inside!";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = -0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 10;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 41;
            this.ingredients = [["Waanti Pelt", 2], ["Cloth", 2], ["Koobu Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250 - Math.floor(player.getCharisma() / 3); // at max, buy for 250.
            this.sellValue = 125 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 225.
        }
        else if (this.type == "freydicRoyalOutfit")
        {
            //For All Items
            this.identity = "Freydic Royal Outfit";
            this.weight = 4;
            this.size = 26;
            this.description = "A royal outfit tailored from the fur of a massive winter wolf: reinforced with fine steel, and embellished with numerous tiny Sapphires forming the shape of the royal Freynor coat of arms.";
            this.intForDes = 2;
            this.intDescription = "An outfit worn by the men in the Freynor royal family.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 8 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 6;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3;
            this.thirstRetention = -0.8;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 35;
            this.rangedBonus = 0;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 50;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 45;
            this.ingredients = [["Sapphire", 8], ["Steel", 5], ["Massive Winter Wolf Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8950 - Math.floor(player.getCharisma() / 0.0625); // at max, buy for 8150.
            this.sellValue = 6925 + Math.floor(player.getCharisma() / 0.0625); // at max, sell for 7725.
        }
        else if (this.type == "matadorOutfit")
        {
            //For All Items
            this.identity = "Matador Outfit";
            this.weight = 3;
            this.size = 26;
            this.description = "A fine outfit sewn from cloth and silk and embroidered with gold. It is topped off with golden shoulder coverings and a large decorative hat.";
            this.intForDes = 1;
            this.intDescription = "Boar fighting is a time honoured tradition in the northern most kingdom in the Nirwaden Empire.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.25;
            this.thirstRetention = 0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 25;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 39;
            this.ingredients = [["Silk", 5], ["Cloth", 7], ["Gold", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000; // at max, buy for 1000.
            this.sellValue = 900 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 1000.
        }
        else if (this.type == "beulingerrOutfit")
        {
            //For All Items
            this.identity = "Great Baron Outfit";
            this.weight = 2.6;
            this.size = 26;
            this.description = "A finely tailored and decorated lordly outfit of dyed velvet with inlaid gold and jewels.";
            this.intForDes = 1;
            this.intDescription = "This has the noble heraldry of the Great Baron of house Beulingerr who is known to be one of the wealthiest lords in the land.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.3;
            this.thirstRetention = 0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 37;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16000 - Math.floor(player.getCharisma() / 0.1); // at max, buy for 15500.
            this.sellValue = 15000 + Math.floor(player.getCharisma() / 0.1); // at max, sell for 15500.
        }
        else if (this.type == "beulingerrDress")
        {
            //For All Items
            this.identity = "Great Baroness Dress";
            this.weight = 4.6;
            this.size = 26;
            this.description = "An extravagent dress for noble ladies of house Beulingerr.";
            this.intForDes = 9;
            this.intDescription = "This dress was designed by an Aldrekii master tailor and was imported through an expensive, politically complicated process that involved no small amount of smuggling.";
            this.smallText = true;

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.5;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 45;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 2;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 23000 - Math.floor(player.getCharisma() / 0.1); // at max, buy for 22500.
            this.sellValue = 22000 + Math.floor(player.getCharisma() / 0.1); // at max, sell for 22500.
        }
        else if (this.type == "thenganNobleOutfitM")
        {
            //For All Items
            this.identity = "Great Baron Outfit";
            this.weight = 3;
            this.size = 26;
            this.description = "An elaborate heraldic outfit with a fox pelt that is worn as a scarf.";
            this.intForDes = 1;
            this.intDescription = "The lords of Thengaria are known as 'The Great Barons'.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.4;
            this.thirstRetention = -0.17;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 38;
            this.rangedBonus = 2;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9000 - Math.floor(player.getCharisma() / 0.1); // at max, buy for 8500.
            this.sellValue = 8000 + Math.floor(player.getCharisma() / 0.1); // at max, sell for 8500.
        }
        else if (this.type == "thenganNobleOutfitF")
        {
            //For All Items
            this.identity = "Great Baroness Dress";
            this.weight = 3;
            this.size = 26;
            this.description = "An elaborate Thengan noble lady dress with a fine flowered hat.";
            this.intForDes = 2;
            this.intDescription = "The great baronesses of Thengaria are known for their exquisite taste in fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.9;
            this.thirstRetention = 0.08;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 40;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13000 - Math.floor(player.getCharisma() / 0.1); // at max, buy for 12500.
            this.sellValue = 12000 + Math.floor(player.getCharisma() / 0.1); // at max, sell for 12500.
        }
        else if (this.type == "jesterOutfit")
        {
            //For All Items
            this.identity = "Jester Outfit";
            this.weight = 2;
            this.size = 26;
            this.description = "The garb worn by the comedians and hired clowns that perform for the upper classes.";
            this.intForDes = 4;
            this.intDescription = "A bad joke in the wrong court might mean a trip to the gallows.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.5;
            this.thirstRetention = 0.14;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = -15;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 2;
            this.survivalismBonus = -5;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Velvet", 3], ["Cloth", 8]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 110; // at max, buy for 110.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 1); // at max, sell for 110.
        }
        else if (this.type == "vardanianRoyalAttireM")
        {
            //For All Items
            this.identity = "Vardanian High Count Attire";
            this.weight = 6;
            this.size = 28;
            this.description = "A majestic golden crown, a regal suit studded with pearls and rubies, and a golden cape.";
            this.intForDes = 1;
            this.intDescription = "While the poor starve and suffer, the royal family spends liberally on fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.5;
            this.thirstRetention = 0.05;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 85;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 60;
            this.ingredients = [["Velvet", 25], ["Silk", 15], ["Gold", 8], ["Pearl", 100]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 56000; // at max, buy for 56000.
            this.sellValue = 56000; // at max, sell for 56000.
        }
        else if (this.type == "vardanianRoyalAttireF")
        {
            //For All Items
            this.identity = "Vardanian High Countess Dress";
            this.weight = 10;
            this.size = 28;
            this.description = "An extravagently decorated dress of fine materials with a crown of gold, rubies, and pearls.";
            this.intForDes = 1;
            this.intDescription = "While the poor starve and suffer, the royal family spends liberally on fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.5;
            this.thirstRetention = 0.07;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 85;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "heavy";

            this.yield = 1;
            this.intForCraft = 60;
            this.ingredients = [["Velvet", 35], ["Silk", 20], ["Gold", 20], ["Pearl", 40]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 56000; // at max, buy for 56000.
            this.sellValue = 56000; // at max, sell for 56000.
        }
        else if (this.type == "vardanianNobleOutfit")
        {
            //For All Items
            this.identity = "Vardanian Count Outfit";
            this.weight = 2.5;
            this.size = 26;
            this.description = "A red, black, and white velvet outfit with golden buttons, and a ruby embedded cap covered in pearls.";
            this.intForDes = 1;
            this.intDescription = "While the poor starve and suffer, the nobility spend liberally on fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.2;
            this.thirstRetention = 0.02;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 40;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Velvet", 17], ["Silk", 4], ["Gold", 2], ["Pearl", 50]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 10000.
            this.sellValue = 9800 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 10000.
        }
        else if (this.type == "boroyeNobleOutfit")
        {
            //For All Items
            this.identity = "Noble Krovhyuzka Suit";
            this.weight = 3.75;
            this.size = 26;
            this.description = "A white and black checkered suit of motylinka with a tall pearl-embellished cap.";
            this.intForDes = 1;
            this.intDescription = "House Krovhyuzka has ruled the great Vardanian city of Boroye for centuries...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.2;
            this.thirstRetention = -0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 43;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 20;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            // this.yield = 1;
            // this.intForCraft = 50;
            // this.ingredients = [["Motylinka", 6], ["Velvet", 7], ["Silk", 4], ["Pearl", 62]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 9200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 9000.
            this.sellValue = 8800 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 9000.
        }
        else if (this.type == "boroyeNobleDress")
        {
            //For All Items
            this.identity = "Noble Krovhyuzka Dress";
            this.weight = 14;
            this.size = 26;
            this.description = "An exquisite dress of motylinka, a gold embroidered shawl, and a headdress with elegant floral patterns.";
            this.intForDes = 9;
            this.intDescription = "Countess Katyusha of Boroye is the sister of the northern count, Count Gruzblou.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.75;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 39;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 33;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "heavy";

            // this.yield = 1;
            // this.intForCraft = 50;
            // this.ingredients = [["Motylinka", 12], ["Velvet", 6], ["Silk", 8], ["Gold", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4800 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 4600.
            this.sellValue = 4400 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 4600.
        }
        else if (this.type == "vardanianRoyalDress")
        {
            //For All Items
            this.identity = "Vardanian Countess Dress";
            this.weight = 6;
            this.size = 26;
            this.description = "A patterned red velvet dress, and a golden tiara with an embedded ruby and a cloth hair covering.";
            this.intForDes = 1;
            this.intDescription = "While the poor starve and suffer, the nobility spend liberally on fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.3;
            this.thirstRetention = 0.04;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 41;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "heavy";

            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Velvet", 20], ["Silk", 8], ["Gold", 4], ["Ruby", 3], ["Cloth", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 5000.
            this.sellValue = 4800 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 5000.
        }
        else if (this.type == "nirwadenNobleOutfit")
        {
            //For All Items
            this.identity = "Lordly Nirwaden Outfit";
            this.weight = 2;
            this.size = 26;
            this.description = "Gold embroidered velvet and silken clothing and a puffy beret adorned with a peacock feather.";
            this.intForDes = 1;
            this.intDescription = "The nirwaden aristocracy spares no expense on their fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 35;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 44;
            this.ingredients = [["Velvet", 3], ["Silk", 4], ["Gold", 1], ["Peacock Feather", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1400 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1300.
            this.sellValue = 1200 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1300.
        }
        else if (this.type == "nirwadenNobleDress")
        {
            //For All Items
            this.identity = "Nirwaden Noble Dress";
            this.weight = 5;
            this.size = 26;
            this.description = "A gold embroidered velvet and silk dress with an illustrious henin.";
            this.intForDes = 1;
            this.intDescription = "The nirwaden aristocracy spares no expense on their fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 39;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "heavy";

            this.yield = 1;
            this.intForCraft = 46;
            this.ingredients = [["Velvet", 12], ["Silk", 12], ["Gold", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2200 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 2100.
            this.sellValue = 2000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 2100.
        }
        else if (this.type == "hyelingArmour")
        {
            //For All Items
            this.identity = "Hyeling Battle Armour";
            this.weight = 7;
            this.size = 26;
            this.description = "A wood and fur armour commonly worn by hyeling soldiers.";
            this.intForDes = 2;
            this.intDescription = "The armour actually has four eye slits becuase hyelings have four eyes but only two of them are emphasized on the mask.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 1.6 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.75;
            this.thirstRetention = -0.65;
            this.shockResist = -0.1;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = -1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -2;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Wood", 3], ["Waanti Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 60 - Math.floor(player.getCharisma() / 5); // at max, buy for 50.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 5); // at max, sell for 50.
        }
        else if (this.type == "nirwadenPriestRobes")
        {
            //For All Items
            this.identity = "Priest Robes";
            this.weight = 2;
            this.size = 27;
            this.description = "Fine robes made of gold embroidered cloth.";
            this.intForDes = 0;
            this.intDescription = "This is the official preistly garment of the Nirwaden Church.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 10;
            this.warmthRetention = 0.5;
            this.thirstRetention = 0.5;
            this.shockResist = 1;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 16;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Cloth", 4], ["Gold", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 800.
            this.sellValue = 700 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 800.
        }
        else if (this.type == "vardanianPriestRobes")
        {
            //For All Items
            this.identity = "Priest Gown";
            this.weight = 6;
            this.size = 27;
            this.description = "Fine robes made of ghoul fur decorated with red velvet and gold.";
            this.intForDes = 0;
            this.intDescription = "This is the official preistly garment of the Vardanian Church.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 10;
            this.warmthRetention = 3.5;
            this.thirstRetention = -0.5;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 18;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 1;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 38;
            this.ingredients = [["Ghoul Pelt", 1], ["Red Dye", 3], ["Velvet", 3], ["Gold", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1200 - Math.floor(player.getCharisma() / 1); // at max, buy for 1150.
            this.sellValue = 1100 + Math.floor(player.getCharisma() / 1); // at max, sell for 1150.
        }
        else if (this.type == "witchHunterOutfit")
        {
            //For All Items
            this.identity = "Witch Hunter Outfit";
            this.weight = 2;
            this.size = 27;
            this.description = "The standard garb of The Royal Order of the Inquisition.";
            this.intForDes = 0;
            this.intDescription = "The Order of the Inquisition is a royally sanctioned guild of witch hunters that is tasked with eliminating the uncanny and the supernatural.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 1 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 5.5;
            this.warmthRetention = 0.75;
            this.thirstRetention = 0.35;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 8;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 1;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 500 - Math.floor(player.getCharisma() / 1); // at max, buy for 450.
            this.sellValue = 350 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 450.
        }
        else if (this.type == "winterWolfOutfit")
        {
            //For All Items
            this.identity = "Winter Wolf Outfit";
            this.weight = 1;
            this.size = 26;
            this.description = "An outfit made from a the fur of a winter wolf; the hood is made from the wolf's head.";
            this.intForDes = 2;
            this.intDescription = "An outfit traditionally worn by the upper class men in the kingdom of Freynor.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.65;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 9;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 20;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Winter Wolf Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 78 - Math.floor(player.getCharisma() / 2); // at max, buy for 53.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 5); // at max, sell for 40.
        }
        else if (this.type == "winterWolfClothing")
        {
            //For All Items
            this.identity = "Winter Wolf Clothing";
            this.weight = 1;
            this.size = 26;
            this.description = "Clothing made from the fur of a winter wolf.";
            this.intForDes = 1;
            this.intDescription = "This is particularly good for staying warm in freezing climates!";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.6;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 24;
            this.ingredients = [["Winter Wolf Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 51 - Math.floor(player.getCharisma() / 3); // at max, buy for 36.
            this.sellValue = 24 + Math.floor(player.getCharisma() / 5); // at max, sell for 34.
        }
        else if (this.type == "winterWolfDress")
        {
            //For All Items
            this.identity = "Winter Wolf Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "A finely crafted dress made from the fur of a winter wolf.";
            this.intForDes = 1;
            this.intDescription = "This type of dress is often worn by wealthy or titled women in the Freynor lands. ";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.25;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 7;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = -2;
            this.dexterityBonus = -10;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Winter Wolf Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 2); // at max, buy for 65.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 2); // at max, sell for 55.
        }
        else if (this.type == "vardanWearF")
        {
            //For All Items
            this.identity = "Vardanian Peasant Dress";
            this.weight = 2;
            this.size = 26;
            this.description = "A thick red dress with a white shawl.";
            this.intForDes = 2;
            this.intDescription = "A dress worn by the vardanian peasant women.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 3;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -3;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 16;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 3;
            this.intForCraft = 27;
            this.ingredients = [["Elk Pelt", 2], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 8); // at max, buy for 16.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 15); // at max, sell for 16.
        }
        else if (this.type == "vardanWearM")
        {
            //For All Items
            this.identity = "Vardanian Peasant Clothing";
            this.weight = 2;
            this.size = 26;
            this.description = "A thick elk fur gown and a pointed fur hat.";
            this.intForDes = 2;
            this.intDescription = "An outfit worn by the vardanian peasant men.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -1;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 16;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 23;
            this.ingredients = [["Elk Pelt", 1], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 15); // at max, buy for 13.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 25); // at max, sell for 13.
        }
        else if (this.type == "vardanOutfitF")
        {
            //For All Items
            this.identity = "Fine Vardanian Dress";
            this.weight = 1.5;
            this.size = 26;
            this.description = "A patterned silken magenta dress with an elk fur shawl.";
            this.intForDes = 2;
            this.intDescription = "A dress worn by the more wealthy vardanian women.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.1;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 6;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -3;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 8;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 34;
            this.ingredients = [["Elk Pelt", 1], ["Cloth", 2], ["Silk", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 110 - Math.floor(player.getCharisma() / 5); // at max, buy for 100.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 5); // at max, sell for 100.
        }
        else if (this.type == "vardanOutfitM")
        {
            //For All Items
            this.identity = "Fine Vardanian Outfit";
            this.weight = 1.5;
            this.size = 26;
            this.description = "A thick red and black gown.";
            this.intForDes = 2;
            this.intDescription = "An outfit worn by the more wealthy vardanian men.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.9;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 5;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -1;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Elk Pelt", 2], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 80 - Math.floor(player.getCharisma() / 5); // at max, buy for 70.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 5); // at max, sell for 70.
        }
        else if (this.type == "frichFurClothing")
        {
            //For All Items
            this.identity = "Frich Fur Clothing";
            this.weight = 1;
            this.size = 26;
            this.description = "Clothing sewn from the pelts of friches.";
            this.intForDes = 1;
            this.intDescription = "Frich clothing is associated with the low class.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = -0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = -1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Frich Pelt", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 10); // at max, buy for 9.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 12); // at max, sell for 9.
        }
        else if (this.type == "vardanianInformerUniform")
        {
            //For All Items
            this.identity = "Vardanian Informer Uniform";
            this.weight = 3;
            this.size = 26;
            this.description = "The uniform worn by operatives of the High Count's Royal Spy Core.";
            this.intForDes = 1;
            this.intDescription = "The royal informers are tasked with routing out any semblance of disloyalty among the elite and among the population.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.2;
            this.thirstRetention = 0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 2;
            this.enduranceBonus = 2;
            this.toughnessBonus = 2;
            this.intelligenceBonus = 0;
            this.charismaBonus = 25;
            this.rangedBonus = 4;
            this.constitutionBonus = 0;
            this.staminaBonus = 2;
            this.dexterityBonus = 2;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 50;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 500; // at max, buy for 500.
            this.sellValue = 500; // at max, sell for 500.
        }
        else if (this.type == "ratPrinceRegalia")
        {
            //For All Items
            this.identity = "Rat Prince Regalia";
            this.weight = 6;
            this.size = 27;
            this.description = "The royal garb of one of the five rat princes.";
            this.intForDes = 0;
            this.intDescription = "The rat king had five sons whom he raised as wild cannibal children.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = -10;
            this.charismaBonus = -50;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 3;
            this.dexterityBonus = 3;
            this.survivalismBonus = 3;
            //Extra Stat Bonuses
            this.sleepBonus = 5;
            this.hungerBonus = 2;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 21 - Math.floor(player.getCharisma() / 15); // at max, buy for 18.
            this.sellValue = 15 + Math.floor(player.getCharisma() / 15); // at max, sell for 18.
        }
        else if (this.type == "ratKingRegalia")
        {
            //For All Items
            this.identity = "The Regalia of the Rat King";
            this.weight = 8;
            this.size = 27;
            this.description = "The royal garb of the king of all of rat kind.";
            this.intForDes = 0;
            this.intDescription = "Once a constable in charge of a hamlet, he used his authority to systematically execute all of the villagers and then turned the soldiers on one another.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 3 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 1;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.3;
            this.thirstRetention = -0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 3;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 5;
            this.charismaBonus = -50;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 5;
            this.dexterityBonus = 5;
            this.survivalismBonus = 5;
            //Extra Stat Bonuses
            this.sleepBonus = 10;
            this.hungerBonus = 5;
            this.thirstBonus = 0;
            this.warmthBonus = 20;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 321 - Math.floor(player.getCharisma() / 15); // at max, buy for 318.
            this.sellValue = 315 + Math.floor(player.getCharisma() / 15); // at max, sell for 318.
        }
        else if (this.type == "thenganSageRobe")
        {
            //For All Items
            this.identity = "Thengan Sage Robe";
            this.weight = 1;
            this.size = 26;
            this.description = "The turkey feather robes worn by the Sages of the Thengan pantheon of Gods.";
            this.intForDes = 3;
            this.intDescription = "The turkey feathers symbolize Thengan ancestry, plentifulness, and fertility.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.45;
            this.thirstRetention = 0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 1;
            this.charismaBonus = 3;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 4;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["TurkeyFeathers", 9]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 3); // at max, buy for 75.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 3); // at max, sell for 75.
        }
        else if (this.type == "sackmansHood")
        {
            //For All Items
            this.identity = "The Sackman's Hood";
            this.weight = 1;
            this.size = 26;
            this.description = "A worn and somewhat ragged old hooded cloak that belonged to The Sackman.";
            this.intForDes = 0;
            this.intDescription = "The Sackman is a common legend in Cranheim: when the mysterious man with a big sack comes around, the children start to go missing...";
            this.smallText = true;

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.9;
            this.thirstRetention = 0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = -11;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 2;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 240;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            if (rKey == true)
            {
                this.ability = "fearI";
            }
            else
            {
                this.ability = "none";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 25); // at max, sell for 13.
        }
        else if (this.type == "littleRedRidingHood")
        {
            //For All Items
            this.identity = " Little Rosey Red's Riding Hood";
            this.weight = 1;
            this.size = 26;
            this.description = "A fine red cloak that is decorated with lively, beautiful smelling dark red roses.";
            this.intForDes = 0;
            this.intDescription = "The floral design is nothing short of charming.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.1;
            this.thirstRetention = 0.16;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 22;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 100 - Math.floor(player.getCharisma() / 10); // at max, buy for 95.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 10); // at max, sell for 95.
        }
        else if (this.type == "thenganCommonwear")
        {
            //For All Items
            this.identity = "Thengan Commonwear";
            this.weight = 1;
            this.size = 26;
            this.description = "An ordinary outfit worn by commoners and tradefolk in Thengaria.";
            this.intForDes = 1;
            this.intDescription = "The hat keeps the sun out of your eyes and protects you from the sun somewhat.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.3;
            this.thirstRetention = 0.13;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Cloth", 2], ["Deer Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 25); // at max, buy for 23.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 50); // at max, sell for 23.
        }
        else if (this.type == "badgerFurClothing")
        {
            //For All Items
            this.identity = "Badger Fur Clothing";
            this.weight = 1.1;
            this.size = 26;
            this.description = "Clothing sewn from the pelts of badgers.";
            this.intForDes = 1;
            this.intDescription = "badger fur clothing is cheap and comfortable.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.9;
            this.thirstRetention = -0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Badger Pelt", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 10); // at max, buy for 10.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 10.
        }
        else if (this.type == "thenganWorkmansApron")
        {
            //For All Items
            this.identity = "Thengan Workman's Apron";
            this.weight = 1.5;
            this.size = 26;
            this.description = "An outfit commonly worn by Thengan Artisans.";
            this.intForDes = 0;
            this.intDescription = "In Thengaria, artisanry, apart from tailoring, is regarded as a more masculine form of labour.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.8;
            this.thirstRetention = -0.04;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 3;
            if (player.gender == "Male")
            {
                this.charismaBonus = 0;
            }
            else
            {
                this.charismaBonus = -25;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 4;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 16;
            this.ingredients = [["Grizzly Bear Pelt", 1], ["Deer Pelt", 1], ["Cloth", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 24.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 24.
        }
        else if (this.type == "cultistRobes")
        {
            //For All Items
            this.identity = "Cultist Robes";
            this.weight = 1.9;
            this.size = 26;
            this.description = "A dark outfit with a silver mask that is worn by the followers of the Radiant Spirit.";
            this.intForDes = 7;
            this.intDescription = "Those who have true faith in the Radiant Spirit are protected from the light of its glow.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 2;
            this.magicalProtection = 1;
            this.warmthRetention = 0.2;
            this.thirstRetention = 0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 1;
            this.charismaBonus = 12;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 24;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 2)
            {
                this.eminenceBonus = 1;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 1;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "antiRad";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 152 - Math.floor(player.getCharisma() / 25); // at max, buy for 150.
            this.sellValue = 146 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 150.
        }
        else if (this.type == "cultistHighPriestRobes")
        {
            //For All Items
            if (player.gender == "Female")
            {
                this.identity = "Cultist High Priestess Robes";
            }
            else
            {
                this.identity = "Cultist High Priest Robes";
            }
            this.weight = 1.9;
            this.size = 26;
            this.description = "A dark outfit with a silver mask and a tall pointed cap that has a silver emblem of the everlasting spirit atop.";
            this.intForDes = 7;
            this.intDescription = "Those who have true faith in the Radiant Spirit are protected from the light of its glow.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 2;
            this.magicalProtection = 1;
            this.warmthRetention = 0.2;
            this.thirstRetention = 0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 2;
            this.charismaBonus = 22;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 48;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 2)
            {
                this.eminenceBonus = 2;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 4;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "antiRad";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 204 - Math.floor(player.getCharisma() / 25); // at max, buy for 202.
            this.sellValue = 198 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 202.
        }
        else if (this.type == "foxClothingM")
        {
            //For All Items
            this.identity = "Fox Clothing";
            this.weight = 1;
            this.size = 26;
            this.description = "Clothing sewn from deer skin and fox pelt.";
            this.intForDes = 4;
            this.intDescription = "Fox clothing is highly desirable in Thengaria, because it is considered wealthy to wear the pelt of a fox.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.65;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = 8;
            }
            else
            {
                this.charismaBonus = -25;
            }
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Fox Pelt", 1], ["Deer Pelt", 1], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 42 - Math.floor(player.getCharisma() / 15); // at max, buy for 39.
            this.sellValue = 34 + Math.floor(player.getCharisma() / 10); // at max, sell for 39.
        }
        else if (this.type == "foxClothingF")
        {
            //For All Items
            this.identity = "Fox Clothing";
            this.weight = 1;
            this.size = 26;
            this.description = "Clothing sewn from deer skin and fox pelt.";
            this.intForDes = 4;
            this.intDescription = "Fox clothing is highly desirable in Thengaria, because it is considered wealthy to wear the pelt of a fox.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.7;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 10;
            }
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Fox Pelt", 1], ["Deer Pelt", 1], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 10); // at max, buy for 40.
            this.sellValue = 36 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 40.
        }
        else if (this.type == "foxFurDress")
        {
            //For All Items
            this.identity = "Fox Fur Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "A dress sewn from fox pelts.";
            this.intForDes = 2;
            this.intDescription = "She who can afford to wear such a fine dress surely will garner some high level of prestige from her peers.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.8;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 16;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 21;
            this.ingredients = [["Fox Pelt", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 10); // at max, buy for 85.
            this.sellValue = 80 + Math.floor(player.getCharisma() / 10); // at max, sell for 85.
        }
        else if (this.type == "thenganHunterOutfit")
        {
            //For All Items
            this.identity = "Thengan Hunter Outfit";
            this.weight = 1;
            this.size = 26;
            this.description = "Clothing sewn from deer skin and fox pelt.";
            this.intForDes = 5;
            this.intDescription = "Many thengan hunters wear this sort of outfit in order to better hunt foxes.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.7;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 6;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Fox Pelt", 1], ["Deer Pelt", 1], ["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 10); // at max, buy for 40.
            this.sellValue = 36 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 40.
        }
        else if (this.type == "thenganArcticClothing")
        {
            //For All Items
            this.identity = "Thengan Arctic Clothing";
            this.weight = 2.2;
            this.size = 26;
            this.description = "Clothing sewn from deer skin and arctic fox pelts.";
            this.intForDes = 5;
            this.intDescription = "Many thengan hunters wear this sort of outfit in order to better hunt foxes.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3.6;
            this.thirstRetention = -0.65;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 1;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 18;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Arctic Fox Pelt", 2], ["Deer Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 44 - Math.floor(player.getCharisma() / 15); // at max, buy for 44.
            this.sellValue = 32 + Math.floor(player.getCharisma() / 5.555555555555555555555); // at max, sell for 41.
        }
        else if (this.type == "vreckFurClothing")
        {
            //For All Items
            this.identity = "Vreck Fur Clothing";
            this.weight = 1.5;
            this.size = 26;
            this.description = "Clothing sewn from the pelts of vrecks.";
            this.intForDes = 1;
            this.intDescription = "Vreck clothing has an offputting smell to it, somewhere between a wolf and a rat.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.8;
            this.thirstRetention = -0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = -2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 12;
            this.ingredients = [["Vreck Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 15); // at max, buy for 12.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 15); // at max, sell for 12.
        }
        else if (this.type == "orgishClothing")
        {
            //For All Items
            this.identity = "Orgish Clothing";
            this.weight = 1;
            this.size = 26;
            this.description = "A basic cloth outfit and a straw hat, in the style of the orgish people of the southwest.";
            this.intForDes = 1;
            this.intDescription = "The hat protects against the sun....";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.1;
            this.thirstRetention = 0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 15 - Math.floor(player.getCharisma() / 15); // at max, buy for 12.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 15); // at max, sell for 12.
        }
        else if (this.type == "alemanWWI")
        {
            //For All Items
            this.identity = "German Soldier Outfit";
            this.weight = 6;
            this.size = 25;
            this.description = "Standard issue german military fatigues from world war one.";
            this.intForDes = 3;
            this.intDescription = "The germans had to paint the camoflauge onto the helmets themselves.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.8;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = 3;
            this.constitutionBonus = 0;
            this.staminaBonus = 3;
            this.dexterityBonus = 3;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 13;
            this.hungerBonus = 2;
            this.thirstBonus = 2;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "resistDisease";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 25); // at max, buy for 17.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 10); // at max, sell for 17.
        }
        else if (this.type == "hazmatMarkI")
        {
            //For All Items
            this.identity = "Hazmat Suit Mark I";
            this.weight = 12;
            this.size = 27;
            this.description = "An airtight suit that protects the wearer from radiation and dangerous fumes or chemicals.";
            this.intForDes = 0;
            this.intDescription = "Trineum Technologies Incorporated will not be held liable for any loss of life due to misuse of this product.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0.2 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = 0.99;
            this.shockResist = 0.6;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 2;
            this.staminaBonus = 0;
            this.dexterityBonus = -6;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hazmat";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 819 - Math.floor(player.getCharisma() / 25); // at max, buy for 817.
            this.sellValue = 812 + Math.floor(player.getCharisma() / 10); // at max, sell for 817.
        }
        else if (this.type == "hazmatMarkII")
        {
            //For All Items
            this.identity = "Hazmat Suit Mark II";
            this.weight = 14;
            this.size = 27;
            this.description = "An airtight suit that protects the wearer from radiation and dangerous fumes or chemicals.";
            this.intForDes = 0;
            this.intDescription = "This has aquatic capabilities allowing the wearer to dive for extended periods without a need to emerge.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0.2 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = 0.99;
            this.shockResist = 0.6;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 2;
            this.staminaBonus = 0;
            this.dexterityBonus = -7;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "aquamat";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 920 - Math.floor(player.getCharisma() / 25); // at max, buy for 918.
            this.sellValue = 913 + Math.floor(player.getCharisma() / 10); // at max, sell for 918.
        }
        else if (this.type == "nirwadenClothingM")
        {
            //For All Items
            this.identity = "Nirwaden Commonwear";
            this.weight = 1;
            this.size = 26;
            this.description = "Clothing sewn from cloth and a straw hat.";
            this.intForDes = 1;
            this.intDescription = "The clothing is loosely fitted and baggy.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = 0.24;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = 1;
            }
            else
            {
                this.charismaBonus = -6;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 1;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 33 - Math.floor(player.getCharisma() / 8); // at max, buy for 27.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 10); // at max, sell for 27.
        }
        else if (this.type == "nirwadenClothingF")
        {
            //For All Items
            this.identity = "Nirwaden Bodice";
            this.weight = 1;
            this.size = 26;
            this.description = "A common bodice with a skirt and netting.";
            this.intForDes = 1;
            this.intDescription = "In Nirwaden people are expected to wear clothes suitable to their rank and gender.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.6;
            this.thirstRetention = 0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 6;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Cloth", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 41 - Math.floor(player.getCharisma() / 10); // at max, buy for 36.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 8); // at max, sell for 36.
        }
        else if (this.type == "aldrekiiHijab")
        {
            //For All Items
            this.identity = "Aldrekii Hijab";
            this.weight = 1;
            this.size = 26;
            this.description = "A cloth outfit with both a skirt and veil of silk and strands of silk decoratively adorning the sleeves.";
            this.intForDes = 0;
            this.intDescription = "This is the outfit that all females not of noble or royal ancestry are expected to wear.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = 0.75;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 5;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 2;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 24;
            this.ingredients = [["Cloth", 5], ["Silk", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 10); // at max, buy for 50.
            this.sellValue = 35 + Math.floor(player.getCharisma() / 3); // at max, sell for 50.
        }
        else if (this.type == "aldrekiiTurbanRed")
        {
            //For All Items
            this.identity = "Aldrekii Turban";
            this.weight = 1;
            this.size = 26;
            this.description = "A cloth outfit and a red turbin.";
            this.intForDes = 0;
            this.intDescription = "It is customary for men in aldrekii culture to wear a turbin while in public, but some exceptions are made...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.15;
            this.thirstRetention = 0.75;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 1;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Cloth", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 42.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 4); // at max, sell for 42.
        }
        else if (this.type == "aldrekiiTurbanPurple")
        {
            //For All Items
            this.identity = "Aldrekii Turban";
            this.weight = 1;
            this.size = 26;
            this.description = "A cloth outfit and a purple turbin.";
            this.intForDes = 0;
            this.intDescription = "It is customary for men in aldrekii culture to wear a turbin while in public, but some exceptions are made...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.15;
            this.thirstRetention = 0.75;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 1;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Cloth", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 46 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 42.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 4); // at max, sell for 42.
        }
        else if (this.type == "ardilFurClothing")
        {
            //For All Items
            this.identity = "Ardil Fur Clothing";
            this.weight = 1;
            this.size = 25;
            this.description = "Clothing sewn from the pelts of ardils.";
            this.intForDes = 1;
            this.intDescription = "Because ardils can be hard to catch and it takes numerous pelts to make an outfit, ardil clothing is prized.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Ardil Pelt", 9]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 33;
            this.sellValue = 28 + Math.floor(player.getCharisma() / 10); // at max, sell for 33.
        }
        else if (this.type == "ardilFurSkirt")
        {
            //For All Items
            this.identity = "Ardil Fur Skirt with Leggings";
            this.weight = 1;
            this.size = 25;
            this.description = "An artfully sewn skirt and leggings made using ardil pelts.";
            this.intForDes = 1;
            this.intDescription = "Because ardils can be hard to catch and it takes numerous pelts to make an outfit, ardil clothing is prized.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 4;
            }
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Ardil Pelt", 10]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 43 - Math.floor(player.getCharisma() / 12); // at max, buy for 39.
            this.sellValue = 33 + Math.floor(player.getCharisma() / 8); // at max, sell for 39.
        }
        else if (this.type == "hoffalgreFurCloak")
        {
            //For All Items
            this.identity = "Hoffalgre Fur Cloak";
            this.weight = 1;
            this.size = 25;
            this.description = "A cloak sewn from the pelts of hoffalgres.";
            this.intForDes = 1;
            this.intDescription = "A peculiar style of clothing worn by some thengan trappers.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.45;
            this.thirstRetention = -0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 11;
            this.ingredients = [["Hoffalgre Pelt", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 26 - Math.floor(player.getCharisma() / 12); // at max, buy for 22.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 5); // at max, sell for 22.
        }
        else if (this.type == "grushFurClothing")
        {
            //For All Items
            this.identity = "Grush Fur Clothing";
            this.weight = 1;
            this.size = 25;
            this.description = "Clothing sewn from the plant-like green bristly fur of a Grush.";
            this.intForDes = 1;
            this.intDescription = "Grushes use their fur to camoflauge with their surroundings, perhaps you will too.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.1;
            this.thirstRetention = 0.2;
            this.shockResist = 1;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = -3;
            this.intelligenceBonus = 0;
            this.charismaBonus = -6;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 4;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 18;
            this.ingredients = [["Grush Fur", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 39 - Math.floor(player.getCharisma() / 3); // at max, buy for 24.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 5); // at max, sell for 24.
        }
        else if (this.type == "blackBearFurClothing")
        {
            //For All Items
            this.identity = "Black Bear Fur Clothing";
            this.weight = 2;
            this.size = 25;
            this.description = "Clothing sewn from the pelt of a blackbear.";
            this.intForDes = 0;
            this.intDescription = "Black bear fur is soft, warm, and comfortable to wear.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.2;
            this.thirstRetention = -0.5;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Black Bear Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 38 - Math.floor(player.getCharisma() / 15); // at max, buy for 35.
            this.sellValue = 29 + Math.floor(player.getCharisma() / 8); // at max, sell for 35.
        }
        else if (this.type == "sealSkinClothing")
        {
            //For All Items
            this.identity = "Seal Skin Clothing";
            this.weight = 2.4;
            this.size = 26;
            this.description = "Clothing sewn from seal skins.";
            this.intForDes = 0;
            this.intDescription = "Seal skin clothing is a cheaper clothing that is worn in the arctic north.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.75;
            this.thirstRetention = -0.55;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 18;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 18;
            this.ingredients = [["Seal Skin", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 50); // at max, buy for 11.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 50); // at max, sell for 11.
        }
        else if (this.type == "sealSkinGloves")
        {
            //For All Items
            this.identity = "Seal Skin Gloves";
            this.weight = 0.55;
            this.size = 7;
            this.description = "Gloves made from seal skin.";
            this.intForDes = 0;
            this.intDescription = "Seal skin is good at keeping warmth in and it is fairly affordable.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = -0.07;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 9;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 4;
            this.intForCraft = 20;
            this.ingredients = [["Seal Skin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
        }
        else if (this.type == "sealSkinBoots")
        {
            //For All Items
            this.identity = "Seal Skin Boots";
            this.weight = 2.1;
            this.size = 10;
            this.description = "Boots sewn from seal skin.";
            this.intForDes = 0;
            this.intDescription = "Seal skin is good at keeping warmth in and it is fairly affordable.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.3;
            this.thirstRetention = -0.08;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 14;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 21;
            this.ingredients = [["Seal Skin", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4; // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "motylinkaBoots" || this.type == "redMotylinkaBoots")
        {
            //For All Items
            this.identity = "Motylinka Lined Boots";
            this.weight = 2;
            this.size = 10;
            this.description = "Boots sewn from bovine hide and lined throughout with motylinka.";
            this.intForDes = 0;
            this.intDescription = "These boots are very warm and comfortable.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.05 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.4;
            this.thirstRetention = -0.05;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 18;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 5;
            this.intForCraft = 46;
            this.ingredients = [["Motylinka", 1], ["Bovine Hide", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 36; // at max, buy for 36.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 2); // at max, sell for 36.
        }
        else if (this.type == "motylinkaGloves" || this.type == "redMotylinkaGloves")
        {
            //For All Items
            this.identity = "Motylinka Lined Gloves";
            this.weight = 1;
            this.size = 10;
            this.description = "Bovine leather gloves lined throughout with motylinka.";
            this.intForDes = 0;
            this.intDescription = "The gloves are very warm and comfortable.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.03 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = -0.01;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 7;
            this.intForCraft = 45;
            this.ingredients = [["Motylinka", 1], ["Bovine Hide", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16; // at max, buy for 16.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 6); // at max, sell for 16.
        }
        else if (this.type == "hideBoots")
        {
            //For All Items
            this.identity = "Hide Boots";
            this.weight = 1.8;
            this.size = 10;
            this.description = "Boots sewn from bovine hide.";
            this.intForDes = 0;
            this.intDescription = "The high laced boots cover much of the shins.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.05 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.15;
            this.thirstRetention = 0.01;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 8;
            this.intForCraft = 17;
            this.ingredients = [["Bovine Hide", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 3; // at max, buy for 2.
            this.sellValue = 3; // at max, sell for 2.
        }
        else if (this.type == "hideGloves")
        {
            //For All Items
            this.identity = "Hide Gloves";
            this.weight = 1;
            this.size = 10;
            this.description = "Gloves sewn from bovine hide.";
            this.intForDes = 0;
            this.intDescription = "The long gloves cover much of the forearm.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.03 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.1;
            this.thirstRetention = 0.01;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 11;
            this.intForCraft = 15;
            this.ingredients = [["Bovine Hide", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2; // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "elkBoots")
        {
            //For All Items
            this.identity = "Elk Boots";
            this.weight = 1.8;
            this.size = 10;
            this.description = "Boots sewn from elk pelt.";
            this.intForDes = 0;
            this.intDescription = "The boots are durable and keep your feet warm.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.25;
            this.thirstRetention = 0.01;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 2;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 43;
            this.ingredients = [["Elk Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 18; // at max, buy for 18.
            this.sellValue = 18; // at max, sell for 18.
        }
        else if (this.type == "elkGloves")
        {
            //For All Items
            this.identity = "Elk Gloves";
            this.weight = 1.2;
            this.size = 10;
            this.description = "Gloves sewn from elk pelt.";
            this.intForDes = 0;
            this.intDescription = "The gloves are long and cover much of the forearms.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.125;
            this.thirstRetention = -0.03;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 44;
            this.ingredients = [["Elk Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13; // at max, buy for 13.
            this.sellValue = 13; // at max, sell for 13.
        }
        else if (this.type == "longElkBoots")
        {
            //For All Items
            this.identity = "Long Elk Boots";
            this.weight = 2.2;
            this.size = 11;
            this.description = "Long boots sewn from elk pelt.";
            this.intForDes = 0;
            this.intDescription = "The boots are durable and well-fitted.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0.03 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.3;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 5;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 47;
            this.ingredients = [["Elk Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24; // at max, buy for 24.
            this.sellValue = 24; // at max, sell for 24.
        }
        else if (this.type == "longElkGloves")
        {
            //For All Items
            this.identity = "Long Elk Gloves";
            this.weight = 1.4;
            this.size = 11;
            this.description = "Long gloves sewn from elk pelt.";
            this.intForDes = 0;
            this.intDescription = "The gloves cover the forearms which makes them ideal for archery.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0.02 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.15;
            this.thirstRetention = -0.05;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 2;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 4;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 46;
            this.ingredients = [["Elk Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20; // at max, buy for 20.
            this.sellValue = 20; // at max, sell for 20.
        }
        else if (this.type == "zetianGloves")
        {
            //For All Items
            this.identity = "Zetian Gloves";
            this.weight = 0.7;
            this.size = 10;
            this.description = "Thick gloves of a Zetian style.";
            this.intForDes = 0;
            this.intDescription = "The gloves are intended for the practical use of picking spiny plants such as cacti.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.075;
            this.thirstRetention = 0.02;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 14;
            this.ingredients = [["Cloth", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 1; // at max, sell for 1.
        }
        else if (this.type == "jesterShoes")
        {
            //For All Items
            this.identity = "Jester Shoes";
            this.weight = 1;
            this.size = 10;
            this.description = "Curved pointy toed colorful slippers traditionally worn by a jester.";
            this.intForDes = 0;
            this.intDescription = "What funny shoes!";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.02;
            this.thirstRetention = 0.03;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = -15;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 2;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Cloth", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20; // at max, buy for 20.
            this.sellValue = 20; // at max, sell for 20.
        }
        else if (this.type == "thenganHose")
        {
            //For All Items
            this.identity = "Thengan Hose";
            this.weight = 0.9;
            this.size = 9;
            this.description = "Pointed shoes made with cloth and dyed deer hide.";
            this.intForDes = 1;
            this.intDescription = "Ordinary shoes for a Thengan commoner to wear.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.09;
            this.thirstRetention = 0.02;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 3;
            this.intForCraft = 12;
            this.ingredients = [["Cloth", 1], ["Deer Pelt", 1], ["Black Dye", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8; // at max, buy for 8.
            this.sellValue = 6; // at max, sell for 6.
        }
        else if (this.type == "northernClothing")
        {
            //For All Items
            this.identity = "Northern Clothing";
            this.weight = 3;
            this.size = 26;
            this.description = "Clothing sewn from the pelts of waanti and padded even more thickly with wool.";
            this.intForDes = 0;
            this.intDescription = "The standard clothing worn by the citizens of the kingdom of Freynor; it keeps northerners warm in the coldest of habitable regions.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 4.1;
            this.thirstRetention = -0.9;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 30;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 24;
            this.ingredients = [["Waanti Pelt", 2], ["Wool", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 38 - Math.floor(player.getCharisma() / 6); // at max, buy for 30.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 5); // at max, sell for 30.
        }
        else if (this.type == "northernGloves")
        {
            //For All Items
            this.identity = "Northern Gloves";
            this.weight = 0.55;
            this.size = 7;
            this.description = "Gloves made from waanti fur and wool.";
            this.intForDes = 0;
            this.intDescription = "These are especially able to keep hands warm in cold regions.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.55;
            this.thirstRetention = -0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 22;
            this.ingredients = [["Waanti Pelt", 1], ["Wool", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 25); // at max, buy for 15.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 25); // at max, sell for 15.
        }
        else if (this.type == "northernBoots")
        {
            //For All Items
            this.identity = "Northern Boots";
            this.weight = 2.1;
            this.size = 10;
            this.description = "Thick waanti fur boots layered with wool.";
            this.intForDes = 0;
            this.intDescription = "Highly effective boots for trudging through the snow in frozen northern climates.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.85;
            this.thirstRetention = -0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 20;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 26;
            this.ingredients = [["Waanti Pelt", 1], ["Wool", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 10); // at max, sell for 24.
        }
        else if (this.type == "waantiFurOutfit")
        {
            //For All Items
            this.identity = "Waanti Fur Outfit";
            this.weight = 2.5;
            this.size = 26;
            this.description = "Clothing sewn from the pelts of waanti.";
            this.intForDes = 0;
            this.intDescription = "Waanti fur is particularly good at holding in heat.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.1;
            this.thirstRetention = -0.5;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 7;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 16;
            this.ingredients = [["Waanti Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 22 - Math.floor(player.getCharisma() / 8); // at max, buy for 16.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 10); // at max, sell for 16.
        }
        else if (this.type == "druidGown")
        {
            //For All Items
            if (player.gender == "Male")
            {
                this.identity = "Druid Gown";
            }
            else
            {
                this.identity = "Druidess Gown";
            }
            this.weight = 1;
            this.size = 26;
            this.description = "A green robe that is imbued with nature magics.";
            this.intForDes = 15;
            this.intDescription = "When the wearer of the robe is in proximity to trees they are granted increased magical regeneration.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 1;
            this.magicalProtection = 0.25;
            this.warmthRetention = 0;
            this.thirstRetention = 0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 10;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -5;
            this.survivalismBonus = 3;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 1)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 1;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 3;

                //ability
                this.ability = "treeMana";
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";
            }

            if (player.getKnowledge() >= 5 || player.getEminence() >= 1)
            {
                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 925 - Math.floor(player.getCharisma() / 10); // at max, buy for 920.
                this.sellValue = 917 + Math.floor(player.getCharisma() / 15); // at max, sell for 920.
            }
            else
            {
                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 925 - Math.floor(player.getCharisma() / 10); // at max, buy for 920.
                this.sellValue = 47 + Math.floor(player.getCharisma() / 15); // at max, sell for 50.
            }
        }
        else if (this.type == "wizardGown")
        {
            //For All Items
            if (player.gender == "Male")
            {
                this.identity = "Wizard Gown";
            }
            else
            {
                this.identity = "Wizardess Gown";
            }
            this.weight = 1;
            this.size = 26;
            this.description = "A blue robe usually worn by a wizard or a wizardess.";
            this.intForDes = 1;
            this.intDescription = "The robe enhances the emanation of a magician's magical essence.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 1;
            this.magicalProtection = 0.1;
            this.warmthRetention = -0.15;
            this.thirstRetention = 0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -6;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 1)
            {
                this.eminenceBonus = 1;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 2;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            this.yield = 2;
            if (player.eminence >= 5)
            {
                this.intForCraft = 12;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 10); // at max, buy for 20.
            this.sellValue = 17 + Math.floor(player.getCharisma() / 15); // at max, sell for 20.
        }
        else if (this.type == "purpleMageRobe")
        {
            //For All Items
            this.identity = "Mage Robe";
            this.weight = 1;
            this.size = 26;
            this.description = "A purple robe of a sort that commonly would be worn by a spellcaster.";
            this.intForDes = 4;
            this.intDescription = "This is enchanted to enhance a mage's magical potential while worn.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 2;
            this.magicalProtection = 0;
            this.warmthRetention = -0.2;
            this.thirstRetention = 0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -6;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 2)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 4;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            this.yield = 2;
            if (player.eminence >= 7)
            {
                this.intForCraft = 13;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 15); // at max, sell for 25.
        }
        else if (this.type == "redMageRobe")
        {
            //For All Items
            this.identity = "Mage Robe";
            this.weight = 1;
            this.size = 26;
            this.description = "A red robe of a sort that commonly would be worn by a spellcaster.";
            this.intForDes = 4;
            this.intDescription = "This is enchanted to enhance a mage's magical potential while worn.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 2;
            this.magicalProtection = 0;
            this.warmthRetention = -0.2;
            this.thirstRetention = 0.55;
            if (player.getEminence() >= 2)
            {
                this.fireProofing = 5;
            }
            else
            {
                this.fireProofing = 0.25;
            }
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -6;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 2)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 3;
                this.memoryBonus = 0;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            this.yield = 2;
            if (player.eminence >= 7)
            {
                this.intForCraft = 13;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
            this.sellValue = 22 + Math.floor(player.getCharisma() / 15); // at max, sell for 25.
        }
        else if (this.type == "cyanMageRobe")
        {
            //For All Items
            this.identity = "Mage Robe";
            this.weight = 1;
            this.size = 26;
            this.description = "A cyan coloured robe of a sort that commonly would be worn by a spellcaster.";
            this.intForDes = 4;
            this.intDescription = "This is enchanted to enhance a mage's magical potential while worn.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 4;
            this.magicalProtection = 5;
            this.warmthRetention = -0.2;
            this.thirstRetention = 0.25;
            this.shockResist = 5;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -6;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 4)
            {
                this.eminenceBonus = 3;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            this.yield = 2;
            if (player.eminence >= 10)
            {
                this.intForCraft = 13;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 10); // at max, buy for 35.
            this.sellValue = 32 + Math.floor(player.getCharisma() / 15); // at max, sell for 35.
        }
        else if (this.type == "whiteMageRobe")
        {
            //For All Items
            this.identity = "Mage Robe";
            this.weight = 1;
            this.size = 26;
            this.description = "A pale white hooded robe of a sort commonly worn by mages.";
            this.intForDes = 4;
            this.intDescription = "This is enchanted to enhance a mage's magical potential while worn.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 3;
            this.magicalProtection = 0;
            this.warmthRetention = -0.2;
            this.thirstRetention = 0.35;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 4;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -6;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 3)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 7;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            this.yield = 2;
            if (player.eminence >= 12)
            {
                this.intForCraft = 13;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 10); // at max, buy for 35.
            this.sellValue = 32 + Math.floor(player.getCharisma() / 15); // at max, sell for 35.
        }
        else if (this.type == "blackMageRobe")
        {
            //For All Items
            this.identity = "Mage Robe";
            this.weight = 1;
            this.size = 26;
            this.description = "A fearsome black hooded robe of a sort commonly worn by practitioners of nechromancy.";
            this.intForDes = 4;
            this.intDescription = "If the wearer has 3+ eminence then this robe increases the effectiveness of life draining spells.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 6;
            this.magicalProtection = 0;
            this.warmthRetention = -0.2;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 4;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -6;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 6)
            {
                this.eminenceBonus = 1;
                this.willpowerBonus = 1;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 1;
                this.memoryBonus = 0;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            if (player.getEminence() >= 3)
            {
                this.ability = "nechroCombo";
            }
            else
            {
                this.ability = "none";
            }

            this.yield = 2;
            if (player.eminence >= 15)
            {
                this.intForCraft = 13;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 10); // at max, buy for 45.
            this.sellValue = 42 + Math.floor(player.getCharisma() / 15); // at max, sell for 45.
        }
        else if (this.type == "lichRobe")
        {
            //For All Items
            this.identity = "Lich Robe";
            this.weight = 1;
            this.size = 26;
            this.description = "A fearsome black hooded robe decorated with bones of the fallen.";
            this.intForDes = 5;
            this.intDescription = "This robe was worn by a lich: a mage who has achieved immortality through embodying an eternal state of undeath.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 9;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = -0.06;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 19;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -8;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 24;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 9)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 6;
                this.memoryBonus = 2;

                //ability
                this.ability = "nechroComboII";
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "hefty";
            }

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 200 - Math.floor(player.getCharisma() / 1.2); // at max, buy for 140.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 1); // at max, sell for 140.
        }
        else if (this.type == "pyromothSilkRobe")
        {
            //For All Items
            this.identity = "Pyromoth Silk Robe";
            this.weight = 3;
            this.size = 26;
            this.description = "A sleek black hooded robe sewn purely from pyromoth silk.";
            this.intForDes = 5;
            this.intDescription = "This robe shields its wearer from flames, as pyromoth silk is fire resistant.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0;
            this.thirstRetention = 0.5;
            this.shockResist = 0;
            this.fireProofing = 50;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 9;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -8;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Pyromoth Silk", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 216 - Math.floor(player.getCharisma() / 10); // at max, buy for 211.
            this.sellValue = 201 + Math.floor(player.getCharisma() / 5); // at max, sell for 211.
        }
        else if (this.type == "magusRobesF")
        {
            //For All Items
            this.identity = "Magus Robe";
            this.weight = 1.5;
            this.size = 28;
            this.description = "An exquisite robe of light purples and magenta that is imbued with magical power.";
            if (player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 0;
                this.intDescription = "This is worn by female councilors of Cephrite and their female relatives.";
            }
            else
            {
                this.intForDes = 4;
                this.intDescription = "This is worn by female councilors of Cephrite and their female relatives.";
            }

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 8;
            this.magicalProtection = 1;
            this.warmthRetention = 0.15;
            this.thirstRetention = 0.65;
            this.shockResist = 0.2;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 2;
            this.charismaBonus = 33;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -8;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 8)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 5;
                this.knowledgeBonus = 1;
                this.concentrationBonus = 0;
                this.memoryBonus = 5;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            this.yield = 1;
            if (player.eminence >= 20)
            {
                this.intForCraft = 25;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 11], ["Purple Dye", 2], ["Magenta Dye", 2], ["Amethyst", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2800 - Math.floor(player.getCharisma() / 1); // at max, buy for 2750.
            this.sellValue = 2700 + Math.floor(player.getCharisma() / 1); // at max, sell for 2750.
        }
        else if (this.type == "magusRobesM")
        {
            //For All Items
            this.identity = "Magus Robe";
            this.weight = 1.5;
            this.size = 28;
            this.description = "An exquisite robe of various dark purples that is imbued with magical power.";
            if (player.raceName == "Cephrite" || player.raceName == "Zetian")
            {
                this.intForDes = 0;
                this.intDescription = "This is worn by the male councilors of Cephrite and their male relatives.";
            }
            else
            {
                this.intForDes = 4;
                this.intDescription = "This is worn by the male councilors of Cephrite and their male relatives.";
            }

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 9;
            this.magicalProtection = 1;
            this.warmthRetention = 0.15;
            this.thirstRetention = 0.65;
            this.shockResist = 0.3;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 1;
            this.charismaBonus = 34;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -8;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            if (player.getEminence() >= 9)
            {
                this.eminenceBonus = 1;
                this.willpowerBonus = 5;
                this.knowledgeBonus = 1;
                this.concentrationBonus = 1;
                this.memoryBonus = 4;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            this.yield = 1;
            if (player.eminence >= 21)
            {
                this.intForCraft = 27;
            }
            else
            {
                this.intForCraft = 100;
            }
            this.ingredients = [["Cloth", 11], ["Purple Dye", 3], ["Black Dye", 1], ["Amethyst", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2900 - Math.floor(player.getCharisma() / 1); // at max, buy for 2850.
            this.sellValue = 2800 + Math.floor(player.getCharisma() / 1); // at max, sell for 2850.
        }
        else if (this.type == "assassinWrappings")
        {
            //For All Items
            this.identity = "Assassin Wrappings";
            this.weight = 1;
            this.size = 26;
            this.description = "An outfit worn by assassins.";
            this.intForDes = 0;
            this.intDescription = "The eye pieces allow the wearer some degree of night vision.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.5;
            this.thirstRetention = 0.5;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 2;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 5;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 8;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;


            //ability
            this.ability = "nightVision";

            this.yield = 1;
            this.intForCraft = 37;
            this.ingredients = [["Cloth", 9], ["Glass", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 10); // at max, buy for 85.
            this.sellValue = 70 + Math.floor(player.getCharisma() / 3); // at max, sell for 85.
        }
        else if (this.type == "vardanianGentryOutfitTan" || this.type == "vardanianGentryTanOutfit" || this.type == "vardanianGentryOutfitGrey" || this.type == "vardanianGentryGreyOutfit" || this.type == "vardanianGentryOutfitGreen" || this.type == "vardanianGentryGreenOutfit")
        {
            //For All Items
            this.identity = "Fine Vardanian Outfit";
            this.weight = 2.25;
            this.size = 26;
            this.description = "Extravagant clothing sewn from motylinka. This outfit is meant for men.";
            this.intForDes = 0;
            this.intDescription = "This sort of outfit is worn by wealthy Vardanian merchants and highfolk.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = -0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            if (player.gender == "Male")
            {
                this.intelligenceBonus = 3;
                this.charismaBonus = 20;
            }
            else
            {
                this.intelligenceBonus = 0;
                this.charismaBonus = -50;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 20;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "resistDisease";

            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Motylinka", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 145 - Math.floor(player.getCharisma() / 5); // at max, buy for 135.
            this.sellValue = 125 + Math.floor(player.getCharisma() / 5); // at max, sell for 135.
        }
        else if (this.type == "motylinkaCloak" || this.type == "redMotylinkaCloak")
        {
            //For All Items
            this.identity = "Fine Vardanian Cloak";
            this.weight = 3;
            this.size = 26;
            if (this.type == "redMotylinkaCloak")
            {
                this.description = "An extravagant cloak made of red dyed motylinka. This outfit is meant for women.";
            }
            else
            {
                this.description = "An extravagant cloak made of motylinka. This outfit is meant for women.";
            }
            this.intForDes = 0;
            this.intDescription = "Such cloaks are mainly worn by wealthy merchants and highfolk.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.65;
            this.thirstRetention = -0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            if (player.gender == "Female")
            {
                if (this.type == "redMotylinkaCloak")
                {
                    this.intelligenceBonus = 0;
                    this.rangedBonus = 2;
                    this.dexterityBonus = 3;
                    this.charismaBonus = 24;
                }
                else
                {
                    this.intelligenceBonus = 1;
                    this.rangedBonus = 2;
                    this.dexterityBonus = 3;
                    this.charismaBonus = 20;
                }
            }
            else
            {
                this.intelligenceBonus = 0;
                this.rangedBonus = 0;
                this.dexterityBonus = 0;
                this.charismaBonus = -50;
            }
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Varn Pelt", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 10); // at max, buy for 35.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 10); // at max, sell for 35.
        }
        else if (this.type == "koivayaFurClothing")
        {
            //For All Items
            this.identity = "Koivaya Fur Clothing";
            this.weight = 1.25;
            this.size = 26;
            this.description = "Clothing sewn from the pelts of koivayas.";
            this.intForDes = 2;
            this.intDescription = "Koivaya clothing is mostly worn by the commonfolk of Vardania.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.25;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 1;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Varn Pelt", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 10); // at max, buy for 35.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 10); // at max, sell for 35.
        }
        else if (this.type == "elkFurClothing")
        {
            //For All Items
            this.identity = "Elk Fur Clothing";
            this.weight = 1.1;
            this.size = 25;
            this.description = "Clothing sewn from cloth and the pelt of an elk.";
            this.intForDes = 3;
            this.intDescription = "Elk fur clothing is worn by all manner of lowborne vardanfolk.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.1;
            this.thirstRetention = -0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 2;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 4;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Cloth", 1], ["Elk Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 27 - Math.floor(player.getCharisma() / 25); // at max, buy for 25.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 10); // at max, sell for 25.
        }
        else if (this.type == "varminFurClothing")
        {
            //For All Items
            this.identity = "Varmin Fur Clothing";
            this.weight = 1.5;
            this.size = 24;
            this.description = "Clothing sewn from the pelt of a varmin.";
            this.intForDes = 0;
            this.intDescription = "Varmin fur clothing is regarded as filthy, cheap, and low class.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2;
            this.thirstRetention = -0.32;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = -6;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Varmin Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 50); // at max, sell for 6.
        }
        else if (this.type == "redClawThugOutfit")
        {
            //For All Items
            this.identity = "Red Hand Outfit";
            this.weight = 1.6;
            this.size = 25;
            this.description = "The standard outfit worn by low ranking members of The Red Hand Resistance.";
            this.intForDes = 1;
            this.intDescription = "Some might see the Red Hand as a resistance movement, others view it as just another brutal gang.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.1;
            this.thirstRetention = -0.24;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 3;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 5;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
            this.sellValue = 12 + Math.floor(player.getCharisma() / 25); // at max, sell for 14.
        }
        else if (this.type == "redClaw")
        {
            //For All Items
            this.identity = "Red Claw's Armour";
            this.weight = 19;
            this.size = 27;
            this.description = "The masked uniform worn by the leader of The Red Hand Resistance.";
            this.intForDes = 1;
            this.intDescription = "Red Claw was a commander of the Vardanian rebel forces but deserted after realizing that neither side of the war was fighting for the people.";
            this.smallText = true;

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 9 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 6;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = -0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 2;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 16;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 6;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 9;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 9;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 102 - Math.floor(player.getCharisma() / 8); // at max, buy for 96.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 8); // at max, sell for 96.
        }
        else if (this.type == "redClawArmour")
        {
            //For All Items
            this.identity = "Red Hand Armour";
            this.weight = 26;
            this.size = 27;
            this.description = "A partial set of plate armour paired with elk hide armour. This armour is worn by members of The Red Hand Resistance.";
            this.intForDes = 2;
            this.intDescription = "The helmet has a mask of chainmail and thick cloth that protects the wearer from disease and toxic swamp air.";
            this.smallText = true;

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "armour";
            //Utility Focused
            //protections
            this.protection = 10 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 9;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.5;
            this.thirstRetention = -0.1;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 2;
            this.enduranceBonus = 1;
            this.toughnessBonus = 1;
            this.intelligenceBonus = 0;
            this.charismaBonus = 7;
            this.rangedBonus = 0;
            this.constitutionBonus = 1;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 6;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "resistDisease";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 88 - Math.floor(player.getCharisma() / 25); // at max, buy for 86.
            this.sellValue = 80 + Math.floor(player.getCharisma() / 8); // at max, sell for 86.
        }
        else if (this.type == "pinkVardanianDupatta")
        {
            //For All Items
            this.identity = "Pink Floral Vardanian Headscarf";
            this.weight = 0.9;
            this.size = 26;
            this.description = "A slender green dress with a pink floral patterned headscarf.";
            this.intForDes = 1;
            this.intDescription = "In Vardanian society decent women are expected to wear head coverings in public.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.4;
            this.thirstRetention = 0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 5;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 33 - Math.floor(player.getCharisma() / 15); // at max, buy for 30.
            this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
        }
        else if (this.type == "cianVardanianDupatta")
        {
            //For All Items
            this.identity = "Cian Floral Vardanian Headscarf";
            this.weight = 0.9;
            this.size = 26;
            this.description = "A slender magenta dress with a cian floral patterned headscarf.";
            this.intForDes = 1;
            this.intDescription = "In Vardanian society decent women are expected to wear head coverings in public.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.4;
            this.thirstRetention = 0.15;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 6;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Cloth", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 39 - Math.floor(player.getCharisma() / 15); // at max, buy for 36.
            this.sellValue = 31 + Math.floor(player.getCharisma() / 10); // at max, sell for 36.
        }
        else if (this.type == "varnFurClothing")
        {
            //For All Items
            this.identity = "Varn Fur Clothing";
            this.weight = 1;
            this.size = 26;
            this.description = "Clothing sewn from the pelts of varns.";
            this.intForDes = 20;
            this.intDescription = "Varns are often found in temperate to cold forests and therefore much of the clothing produced from varns is near such regions.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.5;
            this.thirstRetention = -0.35;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 5;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 15;
            this.ingredients = [["Varn Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 10); // at max, sell for 14.
        }
        else if (this.type == "varnFurCloak")
        {
            //For All Items
            this.identity = "Varn Fur Cloak";
            this.weight = 1;
            this.size = 26;
            this.description = "A cloak sewn from varn fur.";
            this.intForDes = 20;
            this.intDescription = "Cloaks are an opportune clothing for a rogue because their design allows for easy sneaking as well as quick movements.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.5;
            this.thirstRetention = -0.35;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 5;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Varn Pelt", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 27 - Math.floor(player.getCharisma() / 8); // at max, buy for 21.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 6); // at max, sell for 21.
        }
        else if (this.type == "varnFurDress")
        {
            //For All Items
            this.identity = "Varn Fur Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "A dress sewn from varn fur.";
            this.intForDes = 2;
            this.intDescription = "The fabric is thick and durable but soft and comfortable, overall it makes for a good dress for the non-aristocratic classes.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.5;
            this.thirstRetention = -0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 2;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = -2;
            this.dexterityBonus = -10;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 5;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Varn Pelt", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 33 - Math.floor(player.getCharisma() / 8); // at max, buy for 27.
            this.sellValue = 17 + Math.floor(player.getCharisma() / 5); // at max, sell for 27.
        }
        else if (this.type == "koivayaFurDress")
        {
            //For All Items
            this.identity = "Koivaya Fur Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "A dress sewn from floral cloth and koivaya fur.";
            this.intForDes = 3;
            this.intDescription = "This outfit is worn by the ladies of the Vardanian middle class.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.45;
            this.thirstRetention = -0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 7;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -10;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Cloth", 4], ["Koivaya Pelt", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 58 - Math.floor(player.getCharisma() / 10); // at max, buy for 53.
            this.sellValue = 38 + Math.floor(player.getCharisma() / 3); // at max, sell for 53.
        }
        else if (this.type == "zetianOutfitM")
        {
            //For All Items
            this.identity = "Zetian Clothing";
            this.weight = 3;
            this.size = 28;
            this.description = "Traditional clothing worn by Zetian men.";
            this.intForDes = 5;
            this.intDescription = "The long beaked masks that Zetians wear is meant to keep sand out of their eyes during sandstorms, but they also have spiritual significance within Zetian culture.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0.5 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.5;
            this.thirstRetention = 0.9;
            this.shockResist = 0.25;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Female")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 2;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 7;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Voaii Wing Fragments", 6], ["Cloth", 3], ["Raed Beetle Shell", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 25); // at max, buy for 43.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 15); // at max, sell for 43.
        }
        else if (this.type == "zetianOutfitF")
        {
            //For All Items
            this.identity = "Zetian Clothing";
            this.weight = 1.15;
            this.size = 28;
            this.description = "Traditional clothing worn by Zetian women.";
            this.intForDes = 5;
            this.intDescription = "The long beaked masks that Zetians wear is meant to keep sand out of their eyes during sandstorms, but they also have spiritual significance within Zetian culture.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.7;
            this.thirstRetention = 0.9;
            this.shockResist = 0.05;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 4;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 6;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 18;
            this.ingredients = [["Voaii Wing Fragments", 8], ["Cloth", 8], ["Raed Beetle Shell", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 40 - Math.floor(player.getCharisma() / 25); // at max, buy for 38.
            this.sellValue = 35 + Math.floor(player.getCharisma() / 15); // at max, sell for 38.
        }
        else if (this.type == "cephrianOutfitF")
        {
            //For All Items
            this.identity = "Beaded Cephrian Outfit";
            this.weight = 2;
            this.size = 26;
            this.description = "A traditional Cephrian outfit worn by women.";
            this.intForDes = 2;
            this.intDescription = "The beads represent the cephrian people's inherent spiritual connection to the source of all reality.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.6;
            this.thirstRetention = 0.65;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 1;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 5;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 1;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Wild Dog Pelt", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 17 - Math.floor(player.getCharisma() / 50); // at max, buy for 16.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 25); // at max, sell for 16.
        }
        else if (this.type == "cephrianOutfitM")
        {
            //For All Items
            this.identity = "Cephrian Outfit";
            this.weight = 1;
            this.size = 26;
            this.description = "A traditional Cephrian outfit worn by men.";
            this.intForDes = 2;
            this.intDescription = "Cephrian men do not wear beads; it is seen as an extremely feminine fashion.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.6;
            this.thirstRetention = 0;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Female")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 1;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 17;
            this.ingredients = [["Wild Dog Pelt", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 50); // at max, buy for 13.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 25); // at max, sell for 13.
        }
        else if (this.type == "cephrianNomadOutfit")
        {
            //For All Items
            this.identity = "Cephrian Nomad Outfit";
            this.weight = 1;
            this.size = 26;
            this.description = "An outfit traditionally worn by certain clans of Cephrians that once were or still are nomadic.";
            this.intForDes = 1;
            this.intDescription = "The nomad clans of Cephria once roamed the savannah raiding and pillaging other clans that had a more sedentary lifestyle.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.9;
            this.thirstRetention = 0.45;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 2;
            this.intelligenceBonus = 0;
            if (player.gender == "Female")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 2;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 2;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Hyena Pelt", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 45 - Math.floor(player.getCharisma() / 5); // at max, buy for 35.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 10); // at max, sell for 35.
        }
        else if (this.type == "cephrianNomadDress")
        {
            //For All Items
            this.identity = "Cephrian Nomad Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "A dress traditionally worn by certain clans of Cephrians that once were or still are nomadic.";
            this.intForDes = 1;
            this.intDescription = "Women among the nomadic Cephrian clans were treated with high regard, and were often doted upon by their numerous husbands.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.1;
            this.thirstRetention = 0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 17;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = -2;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 2;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Hyena Pelt", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 94 - Math.floor(player.getCharisma() / 25); // at max, buy for 92.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 25); // at max, sell for 92.
        }
        else if (this.type == "shortCephrianNomadDress")
        {
            //For All Items
            this.identity = "Short Cephrian Nomad Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "A dress traditionally worn by certain clans of Cephrians that once were or still are nomadic.";
            this.intForDes = 1;
            this.intDescription = "Women among the nomadic Cephrian clans were treated with high regard, and were often doted upon by their numerous husbands.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 2;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 7;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 27;
            this.ingredients = [["Hyena Pelt", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 44 - Math.floor(player.getCharisma() / 25); // at max, buy for 42.
            this.sellValue = 40 + Math.floor(player.getCharisma() / 25); // at max, sell for 42.
        }
        else if (this.type == "lionClothing")
        {
            //For All Items
            this.identity = "Lion Clothing";
            this.weight = 3.5;
            this.size = 29;
            this.description = "A decorative and showy outfit made out of lion pelts.";
            this.intForDes = 3;
            this.intDescription = "This type of clothing is highly sought after by wealthy Cephrians.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 3.15;
            this.thirstRetention = 0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 3;
            this.enduranceBonus = 3;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 15;
            this.rangedBonus = 0;
            this.constitutionBonus = 3;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 10;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 45;
            this.ingredients = [["Lion Pelt", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 350 - Math.floor(player.getCharisma() / 2); // at max, buy for 325.
            this.sellValue = 300 + Math.floor(player.getCharisma() / 2); // at max, sell for 325.
        }
        else if (this.type == "twoDogOutfit")
        {
            //For All Items
            this.identity = "Two Dog's Outfit";
            this.weight = 1.5;
            this.size = 27;
            this.description = "This outfit once belonged to the bandit chieftan Two Dog who was infamous for robberies along the roads of Cephrite.";
            this.intForDes = 0;
            this.intDescription = "It would seem Two Dog was more bark than bite...";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.7;
            this.thirstRetention = 0.2;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 1;
            this.enduranceBonus = 1;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 3;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 3;
            //Extra Stat Bonuses
            this.sleepBonus = 2;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 6;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 10); // at max, buy for 50.
            this.sellValue = 45 + Math.floor(player.getCharisma() / 10); // at max, sell for 50.
        }
        else if (this.type == "giraffeClothing")
        {
            //For All Items
            this.identity = "Giraffe Clothing";
            this.weight = 1;
            this.size = 26;
            this.description = "A fine outfit sewn of giraffe pelt.";
            this.intForDes = 0;
            this.intDescription = "This type of clothing is worn by wealthy Cephrian men.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1.2;
            this.thirstRetention = 0.65;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Female")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 9;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 1;
            this.dexterityBonus = 0;
            this.survivalismBonus = 0;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 3;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Giraffe Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 210 - Math.floor(player.getCharisma() / 10); // at max, buy for 205.
            this.sellValue = 200 + Math.floor(player.getCharisma() / 10); // at max, sell for 205.
        }
        else if (this.type == "zarbuClothing")
        {
            //For All Items
            this.identity = "Zarbu Clothing";
            this.weight = 2;
            this.size = 26;
            this.description = "Clothing sewn from the pelt of a Zarbu.";
            this.intForDes = 20;
            this.intDescription = "Zarbu clothing is commonly worn by the members of the Karib tribe.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 5;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 25;
            this.ingredients = [["Zarbu Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 66 - Math.floor(player.getCharisma() / 10); // at max, buy for 61.
            this.sellValue = 55 + Math.floor(player.getCharisma() / 8); // at max, sell for 61.
        }
        else if (this.type == "zarbuTribalWear")
        {
            //For All Items
            this.identity = "Zarbu Outfit";
            this.weight = 2;
            this.size = 26;
            this.description = "A traditionally male Karib outfit sewn from the pelt of a zarbu.";
            this.intForDes = 20;
            this.intDescription = "This sort of outfit is commonly worn by the members of the Karib tribe who are delegated to be the matriarch's lovers.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.4;
            this.thirstRetention = 0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 1;
            this.intelligenceBonus = 0;
            this.charismaBonus = 6;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Zarbu Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 72 - Math.floor(player.getCharisma() / 25); // at max, buy for 70.
            this.sellValue = 60 + Math.floor(player.getCharisma() / 5); // at max, sell for 70.
        }
        else if (this.type == "zarbuDress")
        {
            //For All Items
            this.identity = "Zarbu Dress";
            this.weight = 2;
            this.size = 26;
            this.description = "A dress sewn from zarbu pelt.";
            this.intForDes = 9;
            this.intDescription = "A black and white striped dress customarily worn by the women of the Karib tribe.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 0.3;
            this.thirstRetention = 0.25;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 6;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = -3;
            this.dexterityBonus = -9;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 1;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 23;
            this.ingredients = [["Zarbu Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 52 - Math.floor(player.getCharisma() / 15); // at max, buy for 49.
            this.sellValue = 43 + Math.floor(player.getCharisma() / 8); // at max, sell for 49.
        }
        else if (this.type == "zarbuMatriarchDress")
        {
            //For All Items
            this.identity = "Zarbu Matriarch Dress";
            this.weight = 3;
            this.size = 26;
            this.description = "An elaborate dress sewn from zarbu pelt and finely woven zarbu tufts.";
            this.intForDes = 9;
            this.intDescription = "A black and white striped dress customarily worn by the matriarch of the Karib tribe.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 1;
            this.magicalProtection = 0;
            this.warmthRetention = 0.4;
            this.thirstRetention = 0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
            }
            else
            {
                this.charismaBonus = 14;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = -3;
            this.dexterityBonus = -9;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 1;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;
            if (player.getEminence() >= 1)
            {
                this.concentrationBonus = 1;
            }

            //ability
            this.ability = "hefty";

            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Zarbu Pelt", 1], ["Zarbu Tuft", 9]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 170 - Math.floor(player.getCharisma() / 1); // at max, buy for 120.
            this.sellValue = 110 + Math.floor(player.getCharisma() / 5); // at max, sell for 120.
        }
        else if (this.type == "neevFurCloak")
        {
            //For All Items
            this.identity = "Neev Fur Cloak";
            this.weight = 1;
            this.size = 26;
            this.description = "A cloak sewn from neev fur.";
            this.intForDes = 21;
            this.intDescription = "Neevs are a type of fairy and have magical fur that when worn obscures the wearer from the awareness of others.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 1;
            this.magicalProtection = 0;
            this.warmthRetention = 2.5;
            this.thirstRetention = -0.4;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 0;
            this.survivalismBonus = 6;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 15;
            //Magical Stat Bonuses
            if (player.getEminence() >= 1)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 1;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "obscurity";

            this.yield = 1;
            this.intForCraft = 19;
            this.ingredients = [["Neev Fur", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2000 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1800.
            this.sellValue = 300 + Math.floor(player.getCharisma() / 0.0333333333); // at max, sell for 1800.
        }
        else if (this.type == "neevFurBoots")
        {
            //For All Items
            this.identity = "Neev Fur Boots";
            this.weight = 0.5;
            this.size = 10;
            this.description = "Boots made of neev fur.";
            this.intForDes = 3;
            this.intDescription = "You can move about more quickly while wearing these boots.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "boots";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 3;
            this.magicalProtection = 0;
            this.warmthRetention = 0.3;
            this.thirstRetention = -0.12;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            if (player.getEminence() >= 3)
            {
                this.dexterityBonus = 4;
            }
            else
            {
                this.dexterityBonus = 3;
            }
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 3;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Neev Fur", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 300 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 200.
            this.sellValue = 150 + Math.floor(player.getCharisma() / 1); // at max, sell for 200.
        }
        else if (this.type == "neevFurGloves")
        {
            //For All Items
            this.identity = "Neev Fur Gloves";
            this.weight = 0.4;
            this.size = 7;
            this.description = "Gloves made from neev fur.";
            this.intForDes = 23;
            this.intDescription = "The fur is magical and it quickens your hands' muscle memory.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "gloves";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 2;
            this.magicalProtection = 0;
            this.warmthRetention = 0.2;
            this.thirstRetention = -0.08;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.intelligenceBonus = 0;
            this.charismaBonus = 0;
            this.rangedBonus = 1;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = 1;
            //Extra Stat Bonuses
            this.sleepBonus = 0;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 2;
            //Magical Stat Bonuses
            if (player.getEminence() >= 2)
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 1;
                this.memoryBonus = 0;
            }
            else
            {
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;
            }

            //ability
            this.ability = "none";

            //Crafting
            this.yield = 2;
            this.intForCraft = 18;
            this.ingredients = [["Neev Fur", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 66 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 46.
            this.sellValue = 46; // at max, sell for 46.
        }
        else if (this.type == "mofuMatriarchHeaddress")
        {
            //For All Items
            this.identity = "Alzkwaya Matriarch Dress";
            this.weight = 1;
            this.size = 26;
            this.description = "A dress tailored from dyed mofu feathers of different sizes for the ruling matriarch of the kellish Alzkwaya tribe.";
            this.intForDes = 25;
            this.intDescription = "The Alzkwaya believe that this outfit draws out wisdom from nature and the spirit realm.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.35;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            if (player.gender == "Male")
            {
                this.charismaBonus = -50;
                this.intelligenceBonus = 0;
            }
            else
            {
                this.charismaBonus = 20;
                this.intelligenceBonus = 2;
            }
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = -3;
            this.dexterityBonus = -24;
            this.survivalismBonus = 2;
            //Extra Stat Bonuses
            this.sleepBonus = 2;
            this.hungerBonus = 2;
            this.thirstBonus = 2;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 1;

            //ability
            this.ability = "hefty";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 828 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 628.
            this.sellValue = 345 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 545.
        }
        else if (this.type == "mofuTribalWear")
        {
            //For All Items
            this.identity = "Alzkwaya Outfit";
            this.weight = 1;
            this.size = 22;
            this.description = "The mofu feather tailored outfit worn by the kellish Alzkwaya tribe's members.";
            this.intForDes = 22;
            this.intDescription = "In Alzkwaya culture a mofu's feathers are seen as being able to enable a link to the spirit world.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.charismaBonus = 3;
            this.intelligenceBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 1;
            this.survivalismBonus = -1;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 20;
            this.ingredients = [["Mofu Feather", 30]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 105 - Math.floor(player.getCharisma() / 2); // at max, buy for 80.
            this.sellValue = 70 + Math.floor(player.getCharisma() / 5); // at max, sell for 80.
        }
        else if (this.type == "mofuRunnerOutfit")
        {
            //For All Items
            this.identity = "Alzkwaya Runner Outfit";
            this.weight = 1;
            this.size = 24;
            this.description = "An Alzkwayan outfit with a cape of mofu feathers; worn by the Alzkwaya tribe's messengers.";
            this.intForDes = 25;
            this.intDescription = "To the Alzkwaya a cape of feathers is seen as a means of calling forth speed from the spirit world.";

            //Define Utility
            this.utility = "worn";
            //the type of armour/clothing it is...
            this.subUtility = "clothing";
            //Utility Focused
            //protections
            this.protection = 0 * ((player.toughness / 100) + 1);
            this.toughnessRequirement = 0;
            this.eminenceRequirement = 0;
            this.magicalProtection = 0;
            this.warmthRetention = 1;
            this.thirstRetention = 0.3;
            this.shockResist = 0;
            //Main Stat Bonuses
            this.strengthBonus = 0;
            this.enduranceBonus = 0;
            this.toughnessBonus = 0;
            this.charismaBonus = 4;
            this.intelligenceBonus = 0;
            this.rangedBonus = 0;
            this.constitutionBonus = 0;
            this.staminaBonus = 0;
            this.dexterityBonus = 2;
            this.survivalismBonus = -2;
            //Extra Stat Bonuses
            this.sleepBonus = 1;
            this.hungerBonus = 0;
            this.thirstBonus = 0;
            this.warmthBonus = 0;
            //Magical Stat Bonuses
            this.eminenceBonus = 0;
            this.willpowerBonus = 0;
            this.knowledgeBonus = 0;
            this.concentrationBonus = 0;
            this.memoryBonus = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 21;
            this.ingredients = [["Mofu Feather", 40]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 155 - Math.floor(player.getCharisma() / 2); // at max, buy for 130.
            this.sellValue = 120 + Math.floor(player.getCharisma() / 5); // at max, sell for 130.
        }
        else if (this.type == "theUndyingEdge")
        {
            //For All Items
            this.identity = "The Undying Edge";
            this.weight = 1.75;
            this.size = 35;
            this.description = "A terrifying longsword forged of death and infused with the life force of the one who made it.";
            this.intForDes = 10;
            if (player.getEminence() >= 2)
            {
                this.intDescription = "Upon slaying a foe they are reborn anew and bound in undead service to you.";
            }
            else
            {
                this.intDescription = "Upon slaying a foe they are reborn anew and cursed to live undead until they kill you.";
            }


            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 7;
            this.distance = 35 + (this.range * 7);
            this.range = 4 + 1/7;
            this.rate = 120;
            this.damage = (9 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((4/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "undying";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2500 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 2100.
            this.sellValue = 2000 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 2100.
        }
        else if (this.type == "longsword")
        {
            //For All Items
            this.identity = "Longsword";
            this.weight = 3;
            this.size = 30;
            this.description = "A well forged longsword.";
            this.intForDes = 5;
            this.intDescription = "This style of longsword is made in the lands of Thengar.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 6;
            this.distance = 25 + (this.range * 7);
            this.range = 4.5;
            this.rate = 100;
            this.damage = (7 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 30;
            this.ingredients = [["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 28 - Math.floor(player.getCharisma() / 4); // at max, buy for 15.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 12.4); // at max, sell for 15.
        }
        else if (this.type == "thenganSwordAndShield")
        {
            //For All Items
            this.identity = "Sword and Shield";
            this.weight = 7;
            this.size = 31;
            this.description = "A sword and a shield designed for the soldiers of Thengar.";
            this.intForDes = 5;
            this.intDescription = "";

            //Define Utility
            this.utility = "weapon";
            this.subUtility = "shield";

            //Utility Focused
            this.energyCost = 5;
            this.distance = 34 + (this.range * 7);
            this.range = 3.5;
            this.rate = 100;
            this.damage = (6 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;
            this.blocking = 18 + (player.getToughness() / 5);
            this.blockCost = 3;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 36;
            this.ingredients = [["Steel", 8]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 113 - Math.floor(player.getCharisma() / 5); // at max, buy for 103.
            this.sellValue = 65  + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
        }
        else if (this.type == "freydicWarAxe")
        {
            //For All Items
            this.identity = "Freydic War Axe";
            this.weight = 8;
            this.size = 30;
            this.description = "A powerful Freynor great axe.";
            this.intForDes = 25;
            this.intDescription = "Used by the Freynor as both a hunting weapon and a weapon of war.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 10)
            {
                this.energyCost = 11;
            }
            else
            {
                this.energyCost = 13;
            }
            this.distance = 23 + (this.range * 7);
            this.range = 5.4;
            this.rate = 140;
            this.damage = (12 - this.damageHandicap * 2) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 2;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 32;
            this.ingredients = [["Steel", 3], ["Jvostran", 1], ["Walrus Tusks", 1], ["Walrus Hide", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 175 - Math.floor(player.getCharisma() / 1); // at max, buy for 125.
            this.sellValue = 75 + Math.floor(player.getCharisma() / 1); // at max, sell for 125.
        }
        else if (this.type == "freydicSpear")
        {
            //For All Items
            this.identity = "Freydic Spear";
            this.weight = 3;
            this.size = 30;
            this.description = "A Freydic spear used for hunting.";
            this.intForDes = 1;
            this.intDescription = "The Freydic spear is simply made with a wooden shaft wrapped in leather for the handle and a tip carved from bone.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2;
            this.distance = 38 + (this.range * 7);
            this.range = 2.8;
            this.rate = 140;
            this.damage = (4 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((5/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 3;

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 12;
            this.ingredients = [["Wood", 2], ["Walrus Tusks", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 19 - Math.floor(player.getCharisma() / 5); // at max, buy for 9.
            this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
        }
        else if (this.type == "vardanianThrowingSpear")
        {
            //For All Items
            this.identity = "Vardanian Throwing Spear";
            this.weight = 1.3;
            this.size = 24;
            this.description = "A Vardanian spear of wood and iron that is designed to be thrown.";
            this.intForDes = 1;
            this.intDescription = "Throwing weapons can be recollected once they have been thrown.";

            //Define Utility
            this.utility = "weapon";
            this.subUtility = "thrown";

            //Utility Focused
            this.energyCost = 5;
            this.range = 350 + (175 * player.getRanged() / 50) + (275 * player.getStrength() / 50);
            this.speed = 5 + (2 * player.getRanged() / 50) + (1 * player.getStrength() / 50);
            this.rate = (150 - Math.max(Math.min(30, 30 * player.getRanged() / 50), 0)) - Math.max(Math.min(20, 20 * player.getStrength() / 50), 0);
            if (player.getRanged() >= 25)
            {
                this.damage = (2.5 - this.damageHandicap * 2) * (this.leveledDamageMultiple / 25) + ((1/50) * player.getStrength()) + 5 + ((5/50) * player.getRanged());
                this.negateArmour = 8;
            }
            else
            {
                this.damage = (2 - this.damageHandicap * 2) * (this.leveledDamageMultiple / 25) + ((1/50) * player.getStrength()) + 5 + ((5/50) * player.getRanged());
                this.negateArmour = 6;
            }
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            this.yield = 3;
            this.intForCraft = 20;
            this.ingredients = [["Ashai Wood", 3], ["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 5); // at max, buy for 10.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 25); // at max, sell for 10.
        }
        else if (this.type == "spellOil")
        {
            //For All Items
            this.identity = "Spell Oil";
            this.weight = 4;
            this.size = 24;
            this.description = "A magical oil that is highly volitile, yet highly useful for use in advanced alchemic recipes.";
            this.intForDes = 10;
            this.intDescription = "The oil reacts to non-inert lifeforce with an extreme electrical generation, once a surge occurs the oil ignites at an extremely high temperature.";

            //Define Utility
            this.utility = "weapon";
            this.subUtility = "thrown";

            //Utility Focused
            this.energyCost = 4;
            this.range = 425 + (25 * player.getRanged() / 50) + (50 * player.getStrength() / 50);
            this.speed = 4.5 + (1 * player.getRanged() / 50) + (1 * player.getStrength() / 50);
            this.rate = 250;
            this.damage = 1;
            this.negateArmour = 1;
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            this.yield = 20;
            this.intForCraft = 20;
            this.ingredients = [["Glass Bottle", 20], ["Brightbloom Flower", 6], ["Jar of Butter-Mellow Oil", 4], ["Humpty Chalaza", 22], ["Swamp Lily", 9]];
            this.biproducts = [["glassJar", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 149 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 145.
            this.sellValue = 140 + Math.floor(player.getCharisma() / 10); // at max, sell for 145.
        }
        else if (this.type == "throwingKnife")
        {
            //For All Items
            this.identity = "Throwing Knife";
            this.weight = 0.65;
            this.size = 8;
            this.description = "A sharp-bladed, short, and aerodynamic knife meant for throwing.";
            this.intForDes = 1;
            this.intDescription = "Throwing weapons can be recollected once they have been thrown; this knife is of Cephrian design.";

            //Define Utility
            this.utility = "weapon";

            this.multiATK = true;

            //Utility Focused
            if (player.powerAttack == true)
            {
                this.energyCost = 0.75;
                this.distance = 25 + (this.range * 7);
                this.range = 2;
                this.rate = 100;
                this.damage = (1.5 - (this.damageHandicap * 0.5)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength()) * (1 + this.superStealthNum(5));
                this.magicalDamage = 0;
                this.negateArmour = 2.5 + this.superStealthNum(12);
            }
            else
            {
                this.subUtility = "thrown";
                if (player.getDexterity() < 9)
                {
                    this.energyCost = 2.5;
                }
                else if (player.getDexterity() < 22)
                {
                    this.energyCost = 1.5;
                }
                else
                {
                    this.energyCost = 1;
                }
                this.range = 275 + (100 * player.getRanged() / 50) + (300 * player.getDexterity() / 50);
                this.speed = 6 + (1 * player.getRanged() / 50) + (2 * player.getDexterity() / 50);
                this.rate = (125 - Math.max(Math.min(15, 15 * player.getRanged() / 50), 0)) - Math.max(Math.min(35, 35 * player.getDexterity() / 50), 0);
                if (player.getRanged() >= 25)
                {
                    this.damage = (3.5) + ((2.5/50) * player.getDexterity()) + ((2/50) * player.getRanged());
                    this.negateArmour = 2;
                }
                else
                {
                    this.damage = (2.5) + ((1.5/50) * player.getDexterity()) + ((1/50) * player.getRanged());
                    this.negateArmour = 1;
                }
                this.magicalDamage = 0;
            }


            //ability
            this.ability = "none";

            this.yield = 3;
            this.intForCraft = 26;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 14 - Math.floor(player.getCharisma() / 15); // at max, buy for 11.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
        }
        else if (this.type == "poisonCoatedThrowingKnife")
        {
            //For All Items
            this.identity = "Poison Coated Throwing Knife";
            this.weight = 0.65;
            this.size = 8;
            this.description = "A sharp-bladed, short, and aerodynamic knife meant for throwing that is coated with glazm.";
            this.intForDes = 1;
            this.intDescription = "Throwing weapons can be recollected once they have been thrown; this knife is of Cephrian design.";

            //Define Utility
            this.utility = "weapon";

            this.multiATK = true;

            //Utility Focused
            if (player.powerAttack == true)
            {
                this.energyCost = 0.75;
                this.distance = 25 + (this.range * 7);
                this.range = 2;
                this.rate = 100;
                this.damage = (1.5 - (this.damageHandicap * 0.5)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength()) * (1 + this.superStealthNum(5));
                this.magicalDamage = 0;
                this.negateArmour = 2.5 + this.superStealthNum(12);
            }
            else
            {
                this.subUtility = "thrown";
                if (player.getDexterity() < 9)
                {
                    this.energyCost = 2.5;
                }
                else if (player.getDexterity() < 22)
                {
                    this.energyCost = 1.5;
                }
                else
                {
                    this.energyCost = 1;
                }
                this.range = 275 + (100 * player.getRanged() / 50) + (300 * player.getDexterity() / 50);
                this.speed = 6 + (1 * player.getRanged() / 50) + (2 * player.getDexterity() / 50);
                this.rate = (125 - Math.max(Math.min(15, 15 * player.getRanged() / 50), 0)) - Math.max(Math.min(35, 35 * player.getDexterity() / 50), 0);
                if (player.getRanged() >= 25)
                {
                    this.damage = (3.5) + ((2.5/50) * player.getDexterity()) + ((2/50) * player.getRanged());
                    this.negateArmour = 2;
                }
                else
                {
                    this.damage = (2.5) + ((1.5/50) * player.getDexterity()) + ((1/50) * player.getRanged());
                    this.negateArmour = 1;
                }
                this.magicalDamage = 0;
            }

            //ability
            this.ability = "poisonIV";

            this.yield = 1;
            this.intForCraft = 2;
            this.ingredients = [["Throwing Knife", 1], ["Glazm", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 32 - Math.floor(player.getCharisma() / 15); // at max, buy for 29.
            this.sellValue = 21 + Math.floor(player.getCharisma() / 6); // at max, sell for 29.
        }
        else if (this.type == "throwingStar")
        {
            //For All Items
            this.identity = "Throwing Star";
            this.weight = 0.07;
            this.size = 6;
            this.description = "A flat steel aerodynamic circle with four sharp blades that is meant to be thrown.";
            this.intForDes = 1;
            this.intDescription = "Throwing weapons can be recollected once they have been thrown.";

            //Define Utility
            this.utility = "weapon";
            this.subUtility = "thrown";

            //Utility Focused
            if (player.getDexterity() < 11)
            {
                this.energyCost = 2;
            }
            else if (player.getDexterity() < 25)
            {
                this.energyCost = 1;
            }
            else
            {
                this.energyCost = 0.5;
            }
            this.range = 250 + (150 * player.getRanged() / 50) + (200 * player.getDexterity() / 50);
            this.speed = 7 + (2 * player.getRanged() / 50) + (2 * player.getDexterity() / 50);
            this.rate = (115 - Math.max(Math.min(20, 20 * player.getRanged() / 50), 0)) - Math.max(Math.min(20, 20 * player.getDexterity() / 50), 0);
            if (player.getRanged() >= 25)
            {
                this.damage = (2.5) + ((2/50) * player.getDexterity()) + ((1/50) * player.getRanged());
                this.negateArmour = 4;
            }
            else
            {
                this.damage = (1.5) + ((1.5/50) * player.getDexterity()) + ((0.5/50) * player.getRanged());
                this.negateArmour = 3;
            }
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            this.yield = 11;
            this.intForCraft = 25;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 50); // at max, sell for 4.
        }
        else if (this.type == "vardanianPolehammer")
        {
            //For All Items
            this.identity = "Vardanian Polehammer";
            this.weight = 5.5;
            this.size = 18;
            this.description = "A long hammer with a spike at the end.";
            this.intForDes = 1;
            this.intDescription = "For close range encounters one can use this for bashing. To keep ones enemies at bay this may also be used for stabbing.";

            //Define Utility
            this.utility = "weapon";

            this.multiATK = true;

            //Utility Focused
            if (player.powerAttack == true)
            {
                this.energyCost = 7;
                this.distance = 75 + (this.range * 7);
                this.range = 2 + 2/7;
                this.rate = 160;
                this.damage = (6.5 - (this.damageHandicap * 1.5)) * (this.leveledDamageMultiple / 25) + ((4/50) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 10 + ((3/50) * player.getStrength());
            }
            else
            {
                this.energyCost = 6;
                this.distance = 34 + (this.range * 7);
                this.range = 4 + 1/7;
                this.rate = 125;
                this.damage = (7.5 - (this.damageHandicap * 1.5)) * (this.leveledDamageMultiple / 25) + ((5/50) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 4 + ((3/50) * player.getStrength());
            }


            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 29;
            this.ingredients = [["Steel", 3], ["Ashai Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 110 - Math.floor(player.getCharisma() / 8); // at max, buy for 104.
            this.sellValue = 90 + Math.floor(player.getCharisma() / 3.57); // at max, sell for 104.
        }
        else if (this.type == "vardanianAxe")
        {
            //For All Items
            this.identity = "Small War Axe";
            this.weight = 1;
            this.size = 20;
            this.description = "A small axe forged for war.";
            this.intForDes = 1;
            this.intDescription = "This axe is of Vardanian design.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 16 + (this.range * 7);
            this.range = 2.5;
            this.rate = 115 - player.getDexterity();
            this.damage = (3 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 3;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 11 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 7.
            this.sellValue = 3 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 7.
        }
        else if (this.type == "vardanianAxeDual")
        {
            //For All Items
            this.identity = "Twin War Axes";
            this.weight = 2;
            this.size = 25;
            this.description = "Two small axes forged for war.";
            this.intForDes = 1;
            this.intDescription = "One axe per hand, that's how the Vardanians do it...";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 3;
            this.distance = 17 + (this.range * 7);
            this.range = 3.25;
            this.rate = 135 - player.getDexterity();
            this.damage = (6 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 5;
            this.ingredients = [["Iron", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 27 - Math.floor(player.getCharisma() / 5); // at max, buy for 17.
            this.sellValue = 8 + Math.floor(player.getCharisma() / 8); // at max, sell for 14.
        }
        else if (this.type == "nirineseSabre")
        {
            //For All Items
            this.identity = "Nirinese Sabre";
            this.weight = 4;
            this.size = 30;
            this.description = "A deadly Nirwaden sabre made from hardened twice forged steel.";
            this.intForDes = 3;
            this.intDescription = "The sabre is one of the most frequently used weapons by the Nirinese.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 7;
            this.distance = 28 + (this.range * 7);
            this.range = 5.4;
            this.rate = 85;
            if (player.getDexterity() < 4)
            {
                this.damage = 7 * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            }
            else
            {
                this.damage = 9 * (this.leveledDamageMultiple / 25) + ((7/50) * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Twice Forged Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 67 - Math.floor(player.getCharisma() / 5); // at max, buy for 57.
            this.sellValue = 32 + Math.floor(player.getCharisma() / 2); // at max, sell for 57.
        }
        else if (this.type == "nirwadenSabreAndShield")
        {
            //For All Items
            this.identity = "Nirwaden Sabre and Shield";
            this.weight = 21;
            this.size = 30;
            this.description = "A finely crafted Nirwaden sabre made from hardened thrice forged steel with a shield of the same quality.";
            this.intForDes = 4;
            this.intDescription = "This weapon is most commonly used by knights of the Nirwaden Empire.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 8;
            this.distance = 19 + (this.range * 7);
            this.range = 5.4;
            this.rate = 90;
            if (player.getDexterity() < 4)
            {
                this.damage = 8 * (this.leveledDamageMultiple / 25) + ((5/50) * player.getStrength());
            }
            else
            {
                this.damage = 10 * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 43;
            this.ingredients = [["Thrice Forged Steel", 9]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 249 - Math.floor(player.getCharisma() / 1); // at max, buy for 199.
            this.sellValue = 149 + Math.floor(player.getCharisma() / 1); // at max, sell for 199.
        }
        else if (this.type == "cephrianPikeAndShield")
        {
            //For All Items
            this.identity = "Cephrian Pike and Shield";
            this.weight = 55;
            this.size = 30;
            this.description = "A long pike of Cephrian design paired with a heavy metal shield.";
            this.intForDes = 6;
            this.intDescription = "This is the equipment most commonly used by the Paladins of Cephrite.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 30)
            {
                this.energyCost = 16;
            }
            else if (player.getEndurance() < 25)
            {
                this.energyCost = 15;
            }
            else
            {
                this.energyCost = 13;
            }
            this.distance = 118 + (this.range * 7);
            this.range = 3;
            this.rate = 333;
            if (player.getStrength() < 30)
            {
                this.damage = 8 * (this.leveledDamageMultiple / 25) + ((5/50) * player.getStrength());
                this.negateArmour = 5;
            }
            else
            {
                this.damage = 14 * (this.leveledDamageMultiple / 25) + ((8/50) * player.getStrength());
                this.negateArmour = 15;
            }
            this.magicalDamage = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 37;
            this.ingredients = [["Acacia Wood", 1], ["Steel", 1], ["Bronze", 7]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 400 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 300.
            this.sellValue = 240 + Math.floor(player.getCharisma() / 0.833333333); // at max, sell for 300.
        }
        else if (this.type == "silkAndDagger")
        {
            //For All Items
            this.identity = "Matador Silk and Dagger";
            this.weight = 1.55;
            this.size = 30;
            this.description = "A nirwaden blade of steel and silver with a gold pommel, paired with a gold embroidered red silken lure made from pyromoth silk.";
            this.intForDes = 15;
            this.intDescription = "The silken lure can be used to shield its weilder against flames...";

            //Define Utility
            this.utility = "weapon";
            this.subUtility = "alternate"; //this allows a non shield 'q' ability to be used

            //Utility Focused
            this.energyCost = 3;
            this.altCost = 0;
            this.distance = 37 + (this.range * 7);
            this.range = 1 + 6/7;
            this.rate = 85;
            this.damage = (3 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((4/50) * player.getDexterity()) * (1 + this.superStealthNum(2));
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(10);

            //ability
            this.ability = "silvered";

            this.yield = 3;
            this.intForCraft = 37;
            this.ingredients = [["Thrice Forged Steel", 3], ["Silver", 1], ["Gold", 1], ["Pyromoth Silk", 1], ["Red Dye", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 125 - Math.floor(player.getCharisma() / 10); // at max, buy for 120.
            this.sellValue = 115 + Math.floor(player.getCharisma() / 10); // at max, sell for 120.
        }
        else if (this.type == "blueBlade")
        {
            //For All Items
            this.identity = "Ruhn-kor-gren";
            this.weight = 23;
            this.size = 32;
            this.description = "A Freydic greatsword made out of pure jvostran ore.";
            this.intForDes = 36;
            this.intDescription = "pronounced: | Run | Kar | Gren | The name means strong, long and sharp in Ancient Freydic.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 35;
            this.distance = 45 + (this.range * 7);
            this.range = 7;
            this.rate = 325;
            this.damage = (31 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + ((3/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 47;
            this.ingredients = [["Jvostran", 6]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1040 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 940.
            this.sellValue = 619 + Math.floor(player.getCharisma() / 0.4); // at max, sell for 744.
        }
        else if (this.type == "thorn")
        {
            //For All Items
            this.identity = "Thorn";
            this.weight = 15;
            this.size = 30;
            this.description = "A bastard sword that has been deformed into a long club drowning in metal spikes.";
            this.intForDes = 0;
            this.intDescription = "The white band tied to the grip was a bow that Chieftainess Alitka once wore in her hair before she turned to banditry.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 15 && player.getStrength() < 15)
            {
                this.energyCost = 29;
            }
            else if (player.getEndurance() < 20 && player.getStrength() < 20)
            {
                this.energyCost = 25;
            }
            else if (player.getEndurance() < 25 && player.getStrength() < 25)
            {
                this.energyCost = 22;
            }
            else
            {
                this.energyCost = 19;
            }
            this.distance = 33 + (this.range * 7);
            this.range = 9;
            this.rate = 300;
            this.damage = (20 - (this.damageHandicap * 5)) * (this.leveledDamageMultiple / 25) + ((10/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 15;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 900 - Math.floor(player.getCharisma() / 1); // at max, buy for 850.
            this.sellValue = 800 + Math.floor(player.getCharisma() / 1); // at max, sell for 850.
        }
        else if (this.type == "vardanianBattleAxe")
        {
            //For All Items
            this.identity = "Vardanian Battle Axe";
            this.weight = 17;
            this.size = 32;
            this.description = "A finely forged nechrovite and steel battle axe of Vardanian origin.";
            this.intForDes = 5;
            this.intDescription = "It is common for the most wealthy Vardanians to use a weapon such as this.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 22;
            this.distance = 16 + (this.range * 7);
            this.range = 6;
            this.rate = 175 - (1/2 * player.getDexterity());
            this.damage = (20 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 5;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 50;
            this.ingredients = [["Steel", 1], ["Nechrovite", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 720 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 620.
            this.sellValue = 290 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 390.
        }
        else if (this.type == "dualVardanianBattleAxe")
        {
            //For All Items
            this.identity = "Vardanian Battle Axes";
            this.weight = 34;
            this.size = 32;
            this.description = "Two finely forged nechrovite and steel battle axes, one in each hand.";
            this.intForDes = 0;
            this.intDescription = "It is a true feat of strength to be able to fight with two Vardanian battle axes at once.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getStrength() >= 35)
            {
                this.energyCost = 50;
            }
            else
            {
                this.energyCost = 100;
            }
            this.distance = 25 + (this.range * 7);
            this.range = 10;
            this.rate = 350 - (player.getDexterity());
            this.damage = (36 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + ((2/25) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 5;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 56;
            this.ingredients = [["Vardanian Battle Axe", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1440 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1240.
            this.sellValue = 580 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 780.
        }
        else if (this.type == "flail")
        {
            //For All Items
            this.identity = "Flail";
            this.weight = 17;
            this.size = 24;
            this.description = "A heavy spiked metal ball attached to a handle by a chain.";
            this.intForDes = 3;
            this.intDescription = "Spikey crushy death death!";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 20;
            this.distance = 40 + (this.range * 7);
            this.range = 6;
            this.rate = 250;
            this.damage = (19 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + ((1/12.5) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 17;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 44;
            this.ingredients = [["Steel", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 435 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 235.
            this.sellValue = 195 + Math.floor(player.getCharisma() / 2); // at max, sell for 220.
        }
        else if (this.type == "thenganWarhammer")
        {
            //For All Items
            this.identity = "Thengan Warhammer";
            this.weight = 20;
            this.size = 25;
            this.description = "A massive steel hammer made for use on the battlefield.";
            this.intForDes = 1;
            this.intDescription = "The force of this weapon causes enemies to be knocked back.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 16;
            this.distance = 44 + (this.range * 7);
            this.range = 2;
            this.rate = 600;
            this.damage = (14 - this.damageHandicap * 4) * (this.leveledDamageMultiple / 25) + ((1/12.5) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 19;

            //ability
            this.ability = "knockbackIV";

            this.yield = 1;
            this.intForCraft = 48;
            this.ingredients = [["Steel", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1000 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 800.
            this.sellValue = 400 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 800.
        }
        else if (this.type == "longHammer")
        {
            //For All Items
            this.identity = "Long Hammer";
            this.weight = 9;
            this.size = 23;
            this.description = "A long steel hammer forged for war.";
            this.intForDes = 1;
            this.intDescription = "This weapon allows you to hit your foes from farther back.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 9;
            this.distance = 66 + (this.range * 7);
            this.range = 1 + 6/7;
            this.rate = 240;
            this.damage = (9 - this.damageHandicap * 3) * (this.leveledDamageMultiple / 25) + ((3/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 10;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 133 - Math.floor(player.getCharisma() / 3); // at max, buy for 118.
            this.sellValue = 86 + Math.floor(player.getCharisma() / 2); // at max, sell for 111.
        }
        else if (this.type == "aldrekiiBardiche")
        {
            //For All Items
            this.identity = "Aldrekii Bardiche";
            this.weight = 11;
            this.size = 32;
            this.description = "A long reaching pole axe forged by the Aldrekii.";
            this.intForDes = 2;
            this.intDescription = "This weapon is used to attack enemies whilst maintaining a safe distance from them.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 39)
            {
                this.energyCost = 12;
            }
            else if (player.getEndurance() > 32)
            {
                this.energyCost = 14;
            }
            else if (player.getEndurance() > 24)
            {
                this.energyCost = 15;
            }
            else
            {
                this.energyCost = 17;
            }
            this.distance = 55 + (this.range * 7);
            this.range = 3.6;
            this.rate = 165;
            this.damage = (14 - this.damageHandicap * 4) * (this.leveledDamageMultiple / 25) + Math.floor(((1/6.6) * player.getStrength()));
            this.magicalDamage = 0;
            this.negateArmour = 3;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Ikrinium", 1], ["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 274 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 174.
            this.sellValue = 118 + Math.floor(player.getCharisma() / 1); // at max, sell for 168.
        }
        else if (this.type == "sickle")
        {
            //For All Items
            this.identity = "Sickle";
            this.weight = 1;
            this.size = 19;
            this.description = "A blade used commonly by farmers to harvest grain.";
            this.intForDes = 13;
            this.intDescription = "This tool is used most commonly in southern regions and nirwaden.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1;
            this.distance = 18 + (this.range * 7);
            this.range = 5 + 4 / 7;
            this.rate = 100;
            this.damage = ((3 - (this.damageHandicap * 1.5)) * (this.leveledDamageMultiple / 25)) * (1 + 0.2 * this.superStealthNum(1));
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(1);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 13 - Math.floor(player.getCharisma() / 25); // at max, buy for 11.
            this.sellValue = 9 + Math.floor(player.getCharisma() / 25); // at max, sell for 11.
        }
        else if (this.type == "scimitar")
        {
            //For All Items
            this.identity = "Scimitar";
            this.weight = 1.25;
            this.size = 29;
            this.description = "A curved blade that broadens towards the point.";
            this.intForDes = 1;
            this.intDescription = "This weapon is of aldrekii design.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1.5;
            this.distance = 27 + (this.range * 7);
            this.range = 4 + 1/7;
            this.rate = 80;
            if (player.getDexterity() >= 3 && player.getDexterity() < 10)
            {
                this.damage = ((3.5 - this.damageHandicap) * (this.leveledDamageMultiple / 25)) * (1 + 0.2 * this.superStealthNum(2));
            }
            else if (player.getDexterity() >= 10)
            {
                this.damage = ((4.5 - this.damageHandicap) * (this.leveledDamageMultiple / 25)) * (1 + 0.2 * this.superStealthNum(2));
            }
            else
            {
                this.damage = ((3 - this.damageHandicap) * (this.leveledDamageMultiple / 25)) * (1 + 0.2 * this.superStealthNum(2));
            }
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(2);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Ikrinium", 1], ["Steel", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 55 - Math.floor(player.getCharisma() / 10); // at max, buy for 50.
            this.sellValue = 30 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 50.
        }
        else if (this.type == "aldrekiiBlade")
        {
            //For All Items
            this.identity = "Aldrekii War Blade";
            this.weight = 3;
            this.size = 32;
            this.description = "A deeply curved blade forged by the aldrekii.";
            this.intForDes = 13;
            this.intDescription = "This blade was designed to be used in a quick fighting style.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 1.5;
            this.distance = 18 + (this.range * 7);
            this.range = 5;
            this.rate = 70 - Math.floor(player.getEndurance() / 5);
            if (player.getDexterity() >= 8)
            {
                this.damage = ((4.25 - this.damageHandicap * 0.25) * (this.leveledDamageMultiple / 25)) + ((1/50) * player.getStrength()) + ((2/50) * player.getDexterity() + this.superStealthNum(1));
            }
            else if (player.getDexterity() >= 4)
            {
                this.damage = ((3.75) * (this.leveledDamageMultiple / 25)) + ((1/50) * player.getStrength()) + ((2/50) * player.getDexterity() + this.superStealthNum(1));
            }
            else
            {
                this.damage = ((3.25) * (this.leveledDamageMultiple / 25)) + ((1/50) * player.getStrength()) + ((2/50) * player.getDexterity() + this.superStealthNum(1));
            }
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(1);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 28;
            this.ingredients = [["Ikrinium", 1], ["Steel", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 35 - Math.floor(player.getCharisma() / 10); // at max, buy for 30.
            this.sellValue = 14 + Math.floor(player.getCharisma() / 3); // at max, sell for 29.
        }
        else if (this.type == "aldrekiiClaws")
        {
            //For All Items
            this.identity = "Aldrekii Battle Claws";
            this.weight = 2.8;
            this.size = 32;
            this.description = "Metal claws, made from ikrinium infused steel.";
            this.intForDes = 1;
            this.intDescription = "The swift claws are used to kill enemies before they even have time to draw their blades.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0.5;
            this.distance = 13 + (this.range * 7);
            this.range = 2 + 4/7;
            this.rate = Math.max(10, 50 - Math.floor(player.getDexterity() / 2));
            if (player.getDexterity() >= 3 && player.getDexterity() < 10)
            {
                this.damage = ((2.5 - this.damageHandicap) * (this.leveledDamageMultiple / 25)) * (1 + this.superStealthNum(1));
            }
            else if (player.getDexterity() >= 10)
            {
                this.damage = ((3.5 - this.damageHandicap) * (this.leveledDamageMultiple / 25)) * (1 + this.superStealthNum(1));
            }
            else
            {
                this.damage = ((2 - this.damageHandicap) * (this.leveledDamageMultiple / 25)) * (1 + this.superStealthNum(1));
            }
            this.magicalDamage = 0;
            this.negateArmour = 0.75 + this.superStealthNum(4.25);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Ikrinium", 1], ["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 68 - Math.floor(player.getCharisma() / 5); // at max, buy for 58.
            this.sellValue = 52 + Math.floor(player.getCharisma() / 8); // at max, sell for 58.
        }
        else if (this.type == "freydicGreatSword")
        {
            //For All Items
            this.identity = "Greatsword";
            this.weight = 12;
            this.size = 35;
            this.description = "A powerful steel great sword of Freydic design.";
            this.intForDes = 1;
            this.intDescription = "It takes some strength to swing this blade effectively.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 18;
            this.distance = 38 + (this.range * 7);
            this.range = 8; //was 8.3
            this.rate = 235;
            if (player.getStrength() < 8)
            {
                this.damage = (13 - (this.damageHandicap * 5)) * (this.leveledDamageMultiple / 25) + ((2/25) * player.getStrength());
            }
            else
            {
                this.damage = 17 * (this.leveledDamageMultiple / 25) + (9 / 50 * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 39;
            this.ingredients = [["Jvostran", 1], ["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 268 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 168.
            this.sellValue = 135 + Math.floor(player.getCharisma() / 2); // at max, sell for 160.
        }
        else if (this.type == "vardanGreatSword")
        {
            //For All Items
            this.identity = "Bastard Sword";
            this.weight = 11;
            this.size = 34;
            this.description = "A powerful steel bastard sword of Vardanian design.";
            this.intForDes = 1;
            this.intDescription = "A sword this large requires strength to swing effectively.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 14;
            this.distance = 41 + (this.range * 7);
            this.range = 7;
            this.rate = 200;
            if (player.getStrength() < 7)
            {
                this.damage = (12 - (this.damageHandicap * 5)) * (this.leveledDamageMultiple / 25) + ((3/25) * player.getStrength());
            }
            else
            {
                this.damage = 16 * (this.leveledDamageMultiple / 25) + (8 / 50 * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Steel", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 250 - Math.floor(player.getCharisma() / 3); // at max, buy for 235.
            this.sellValue = 125 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 225.
        }
        else if (this.type == "serratedNechroviteGreatBlade")
        {
            //For All Items
            this.identity = "Serrated Nechrovite Great Blade";
            this.weight = 13;
            this.size = 36;
            this.description = "A large serrated black blade made of nechrovite.";
            this.intForDes = 1;
            this.intDescription = "It takes some strength to swing this blade effectively.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 19;
            this.distance = 32 + (this.range * 7);
            this.range = 7 + 6/7;
            this.rate = 235;
            if (player.getStrength() < 8)
            {
                this.damage = (14 - (this.damageHandicap * 5)) * (this.leveledDamageMultiple / 25) + ((3/25) * player.getStrength());
            }
            else
            {
                this.damage = 18 * (this.leveledDamageMultiple / 25) + (11 / 50 * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 0.5;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 42;
            this.ingredients = [["Nechrovite", 5]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 308 - Math.floor(player.getCharisma() / 2); // at max, buy for 283.
            this.sellValue = 220 + Math.floor(player.getCharisma() / 1); // at max, sell for 270.
        }
        else if (this.type == "theNorthernGem")
        {
            //For All Items
            this.identity = "The Northern Gem";
            this.weight = 20;
            this.size = 35;
            this.description = "The blade of royal Freydic heritage passed down always to the heir of the kingdom of Freynor.";
            this.intForDes = 32;
            this.intDescription = "The inside of the blade is weighted with jvostran and the outside is the highest quality steel.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 14;
            this.distance = 50 + (this.range * 7);
            this.range = 6 + 6/7;
            this.rate = 200;
            if (player.getStrength() < 22)
            {
                this.damage = (15 - (this.damageHandicap * 3)) * (this.leveledDamageMultiple / 25);
            }
            else
            {
                this.damage = 18 * (this.leveledDamageMultiple / 25) + (10 / 50 * player.getStrength());
            }
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 60;
            this.ingredients = [["Jvostran", 3], ["Steel", 3], ["Gold", 1], ["Sapphire", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 2600 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 2500.
            this.sellValue = 2400 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 2500.
        }
        else if (this.type == "kellishClaymore")
        {
            //For All Items
            this.identity = "Kellish Claymore";
            this.weight = 14;
            this.size = 38;
            this.description = "A hardy iron claymore.";
            this.intForDes = 4;
            this.intDescription = "The claymore is the most appreciated weapon among the kellish.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 25)
            {
                this.energyCost = 13;
            }
            else if (player.getEndurance() >= 10)
            {
                this.energyCost = 14;
            }
            else if (player.getEndurance() >= 5)
            {
                this.energyCost = 17;
            }
            else
            {
                this.energyCost = 21;
            }
            this.distance = 66 + (this.range * 7);
            this.range = 7;
            this.rate = 185;
            this.damage = (14 - (this.damageHandicap * 3)) * (this.leveledDamageMultiple / 25) + ((7/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 40;
            this.ingredients = [["Iron", 6], ["Naaprid Pelt", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 160 - Math.floor(player.getCharisma() / 1); // at max, buy for 110.
            this.sellValue = 70 + Math.floor(player.getCharisma() / 1.25); // at max, sell for 110.
        }
        else if (this.type == "kellishSword")
        {
            //For All Items
            this.identity = "Longsword";
            this.weight = 3;
            this.size = 14;
            this.description = "A sharp iron longsword.";
            this.intForDes = 2;
            this.intDescription = "This sword is of kellish design.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 25)
            {
                this.energyCost = 2.5;
            }
            else if (player.getEndurance() >= 10)
            {
                this.energyCost = 3;
            }
            else
            {
                this.energyCost = 3.5;
            }
            this.distance = 35 + (this.range * 7);
            this.range = 3 + 5/7;
            this.rate = 100;
            if (player.getEndurance() >= 10)
            {
                this.rate = 95;
            }
            this.damage = (4.5 - (this.damageHandicap * 0.5)) * (this.leveledDamageMultiple / 25) + ((5/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 13;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 36 - Math.floor(player.getCharisma() / 8); // at max, buy for 30.
            this.sellValue = 20 + Math.floor(player.getCharisma() / 6); // at max, sell for 28.
        }
        else if (this.type == "kellishSpear")
        {
            //For All Items
            this.identity = "Kellish Spear";
            this.weight = 2;
            this.size = 14;
            this.description = "A wooden shafted iron spear decorated with mofu feathers.";
            this.intForDes = 3;
            this.intDescription = "Such spears are most commonly used by the Alzkwaya tribe.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 7)
            {
                this.energyCost = 1;
            }
            else
            {
                this.energyCost = 1.5;
            }
            this.distance = 60 + (this.range * 7);
            this.range = 1 + 4/7;
            this.rate = 90;
            if (player.getDexterity() >= 6)
            {
                this.rate = 80;
            }
            this.damage = (3.5 - (this.damageHandicap * 0.5)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength()) + ((2/50) * player.getDexterity());
            this.magicalDamage = 0;
            this.negateArmour = 6.5;

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 17;
            this.ingredients = [["Iron", 1], ["Wood", 2], ["Mofu Feather", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20 - Math.floor(player.getCharisma() / 10); // at max, buy for 15.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 15.
        }
        else if (this.type == "kellishSawClub")
        {
            //For All Items
            this.identity = "Kellish Saw Club";
            this.weight = 3;
            this.size = 17;
            this.description = "A flat wooden club reinforced with sharpened iron teeth on each side.";
            this.intForDes = 1;
            this.intDescription = "The iron spikes built into the sides can pierce light armour with ease.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 5)
            {
                this.energyCost = 1;
            }
            else
            {
                this.energyCost = 2;
            }
            this.distance = 24 + (this.range * 7);
            this.range = 4;
            this.rate = Math.max(10, 115 - 15/50 * player.getDexterity());
            this.damage = (4 - (this.damageHandicap * 2)) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 5;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 9;
            this.ingredients = [["Iron", 1], ["Wood", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 6); // at max, buy for 17.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 8); // at max, sell for 17.
        }
        else if (this.type == "toothedBludgeon")
        {
            //For All Items
            this.identity = "Toothed bludgeon";
            this.weight = 6;
            this.size = 24;
            this.description = "A long wooden club covered in sharpened wooden knobs.";
            this.intForDes = 1;
            this.intDescription = "The weapon is of Kellish design, specifically from the Karib tribe.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 20)
            {
                this.energyCost = 6;
            }
            else
            {
                this.energyCost = 8;
            }
            this.distance = 34 + (this.range * 7);
            this.range = 5;
            this.rate = Math.max(135, 220 - 80/50 * player.getDexterity());
            this.damage = (6 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((10/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 9;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Yeol Wood", 3], ["Zarbu Tail", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25 - Math.floor(player.getCharisma() / 5); // at max, buy for 15.
            this.sellValue = 10 + Math.floor(player.getCharisma() / 10); // at max, sell for 15.
        }
        else if (this.type == "zetianWarPick")
        {
            //For All Items
            this.identity = "Zetian War Pick";
            this.weight = 2.5;
            this.size = 14;
            this.description = "A sharp red war pick with insectoid spines.";
            this.intForDes = 5;
            this.intDescription = "It is made up of insect exoskeleton parts that have been fused together.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 25)
            {
                this.energyCost = 1.5;
            }
            else if (player.getEndurance() >= 10)
            {
                this.energyCost = 2;
            }
            else
            {
                this.energyCost = 2.5;
            }
            this.distance = 45 + (this.range * 7);
            this.range = 4;
            this.rate = 115;
            if (player.getEndurance() >= 10)
            {
                this.rate = 100;
            }
            this.damage = (3.5 - (this.damageHandicap * 0.5)) * (this.leveledDamageMultiple / 25) + ((3/50) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 3;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 6;
            this.ingredients = [["Voaii Carapace", 1], ["Riod Beetle Leg", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 25); // at max, buy for 8.
            this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
        }
        else if (this.type == "pouchOfGlowDust" || this.type == "pouchOfVrezinDust" || this.type == "pouchOfIrilDust" || this.type == "pouchOfPimberDust" || this.type == "pouchOfShomeDust")
        {
            //For All Items
            this.weight = 0.15;
            this.size = 6;

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 0;
            this.distance = 40 + (4 * 7);
            this.range = 0;
            this.rate = 75;
            this.damage = 0;
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            if (this.type == "pouchOfGlowDust")
            {
                this.identity = "Pouch of Glow Dust";
                this.description = "A cloth pouch of shining gold coloured dust for throwing in the eyes of one's foes.";
                this.intForDes = 0;
                this.intDescription = "It sucks to get something caught in your eye, but wouldn't it suck more to have something incredibly bright stuck in it?";
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Dust Pouch", 1], ["Glow Dust", 2]];
                this.buyValue = 3; // at max, buy for 3.
                this.sellValue = 3; // at max, sell for 3.
            }
            else if (this.type == "pouchOfVrezinDust")
            {
                this.identity = "Pouch of Vrezin Dust";
                this.description = "A cloth pouch of smoldering red dust for throwing at one's foes.";
                this.intForDes = 30;
                this.intDescription = "Be very careful to handle vrezin dust gently, as it catches aflame when it reaches a certain relative velocity to air-resistance.";
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Dust Pouch", 1], ["Vrezin Dust", 2]];
                this.buyValue = 75; // at max, buy for 75.
                this.sellValue = 50 + Math.floor(player.getCharisma() / 2); // at max, sell for 75.
            }
            else if (this.type == "pouchOfIrilDust")
            {
                this.identity = "Pouch of Iril Dust";
                this.description = "A cloth pouch of greyish-brown dust that numbs your fingers upon touching it.";
                this.intForDes = 1;
                this.intDescription = "Iril dust is absorbed through the skin or breathed in. It momentarily attacks the central nervous system causing paralisis and numbness.";
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Dust Pouch", 1], ["Iril Dust", 2]];
                this.buyValue = 13; // at max, buy for 13.
                this.sellValue = 12 + Math.floor(player.getCharisma() / 50); // at max, sell for 13.
            }
            else if (this.type == "pouchOfPimberDust")
            {
                this.identity = "Pouch of Pimber Dust";
                this.description = "A cloth pouch of green dust that turns into a corrosive acid.";
                this.intForDes = 26;
                this.intDescription = "The friction of throwing pimber dust through the air ripens it to chemically transform into a corrosive liquid.";
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Dust Pouch", 1], ["Pimber Dust", 2]];
                this.buyValue = 60; // at max, buy for 60.
                this.sellValue = 40 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 60.
            }
            else if (this.type == "pouchOfShomeDust")
            {
                this.identity = "Pouch of Shome Dust";
                this.description = "A cloth pouch of blue dust that upon being inhaled drives people to a raging madness.";
                this.intForDes = 26;
                this.intDescription = "The dest affects the judgement and emotion controlling parts of the brain and produces extreme irrational anger.";
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Dust Pouch", 1], ["Shome Dust", 2]];
                this.buyValue = 300; // at max, buy for 300.
                this.sellValue = 100 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 300.
            }
        }
        else if (this.type == "hyelingCleaver")
        {
            //For All Items
            this.identity = "Hyeling Battle Cleaver";
            this.weight = 2;
            this.size = 35;
            this.description = "A blue cleaver crafted from a strange non-metal material.";
            this.intForDes = 30;
            this.intDescription = "Hyelings shed their claws and use them to forge weaponry.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2.5;
            this.distance = 20 + (this.range * 7);
            this.range = 3 + 1/7;
            this.rate = 90;
            this.damage = (3 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getStrength() + (3/50) * player.getDexterity());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 35;
            this.ingredients = [["Hyeling Claws", 9]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 29 - Math.floor(player.getCharisma() / 10); // at max, buy for 24.
            this.sellValue = 19 + Math.floor(player.getCharisma() / 10); // at max, sell for 24.
        }
        else if (this.type == "vardanianCleaver")
        {
            //For All Items
            this.identity = "Vardanian War Cleaver";
            this.weight = 3.5;
            this.size = 35;
            this.description = "An expertly crafted steel war cleaver of Vardanian origin.";
            this.intForDes = 2;
            this.intDescription = "This weapon is used by the well equipped soldiers in Vardania.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 4.5;
            this.distance = 26 + (this.range * 7);
            this.range = 4;
            this.rate = 90;
            this.damage = (5.5 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 33;
            this.ingredients = [["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 50 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 30.
            this.sellValue = 18 + Math.floor(player.getCharisma() / 5); // at max, sell for 28.
        }
        else if (this.type == "vardanianHeavyCleaver")
        {
            //For All Items
            this.identity = "Heavy Vardanian War Cleaver";
            this.weight = 8;
            this.size = 17;
            this.description = "A large and fearsome battle cleaver of Vardanian design.";
            this.intForDes = 2;
            this.intDescription = "This weapon is brutally effective if wielded by one skilled enough to use it.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() >= 10)
            {
                this.energyCost = 10;
            }
            else
            {
                this.energyCost = 14;
            }
            this.distance = 38 + (this.range * 7);
            this.range = (5 + 6/7);
            this.rate = 181 - (32 / (51 - player.getDexterity()));

            if (player.getStrength() >= 26)
            {
                this.damage = (14) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            }
            else if (player.getStrength() >= 12)
            {
                this.damage = (13) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            }
            else if (player.getStrength() >= 7)
            {
                this.damage = (12) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            }
            else
            {
                this.damage = (11 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
            }

            this.magicalDamage = 0;
            this.negateArmour = 0;

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 44;
            this.ingredients = [["Steel", 2], ["Nechrovite", 4]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 336 - Math.floor(player.getCharisma() / 2); // at max, buy for 311.
            this.sellValue = 152 + Math.floor(player.getCharisma() / 0.33); // at max, sell for 303.
        }
        else if (this.type == "katana")
        {
            //For All Items
            this.identity = "Katana";
            this.weight = 2;
            this.size = 24;
            this.description = "A swift and deadly blade made of steel.";
            this.intForDes = 6;
            this.intDescription = "The more one trains their endurance and speed the more effective they become with the use of a katana.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 20)
            {
                this.energyCost = 4;
            }
            else
            {
                this.energyCost = 2;
            }
            this.distance = 26 + (this.range * 7);
            this.range = (7 + 1/7);
            if (player.getDexterity() < 25)
            {
                this.rate = 90;
            }
            else
            {
                this.rate = 55;
            }
            this.damage = ((5 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((10/50) * player.getDexterity())) * (1 + this.superStealthNum(1));
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(16);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 43;
            this.ingredients = [["Steel", 3]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 90 - Math.floor(player.getCharisma() / 5); // at max, buy for 65.
            this.sellValue = 32 + Math.floor(player.getCharisma() / 2); // at max, sell for 57.
        }
        else if (this.type == "dualCurvedDaggers")
        {
            //For All Items
            this.identity = "Dual Curved Daggers";
            this.weight = 1;
            this.size = 17;
            this.description = "Two curved steel daggers used in synchrony to produce a deadly fighting style.";
            this.intForDes = 6;
            this.intDescription = "The more one trains their endurance and speed the more effective they become with the use of these daggers.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 8)
            {
                this.energyCost = 2.5;
            }
            else
            {
                this.energyCost = 1.5;
            }
            this.distance = 26 + (this.range * 7);
            this.range = 3;
            if (player.getDexterity() < 7)
            {
                this.rate = 70;
            }
            else if (player.getDexterity() < 14)
            {
                this.rate = 60;
            }
            else
            {
                this.rate = 45;
            }
            this.damage = ((4.5 - (1.5 * this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getDexterity())) * (1 + this.superStealthNum(1));
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(12);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 14;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 24 - Math.floor(player.getCharisma() / 8); // at max, buy for 18.
            this.sellValue = 13 + Math.floor(player.getCharisma() / 10); // at max, sell for 18.
        }
        else if (this.type == "curvedDagger")
        {
            //For All Items
            this.identity = "Curved Dagger";
            this.weight = 0.5;
            this.size = 17;
            this.description = "A thin, light weight, and extremely sharp curved steel dagger.";
            this.intForDes = 6;
            this.intDescription = "The more one trains their endurance and speed the more effective they become with the use of this dagger.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 8)
            {
                this.energyCost = 2;
            }
            else
            {
                this.energyCost = 1;
            }
            this.distance = 26 + (this.range * 7);
            this.range = (2 + 4/7);
            if (player.getDexterity() < 7)
            {
                this.rate = 65;
            }
            else if (player.getDexterity() < 14)
            {
                this.rate = 55;
            }
            else
            {
                this.rate = 45;
            }
            this.damage = ((2 - (1/2 * this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/16) * player.getDexterity())) * (1 + this.superStealthNum(1));
            this.magicalDamage = 0;
            this.negateArmour = 0 + this.superStealthNum(10);

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 13;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 12 - Math.floor(player.getCharisma() / 15); // at max, buy for 9.
            this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
        }
        else if (this.type == "thenganDagger")
        {
            //For All Items
            this.identity = "Thengan Dagger";
            this.weight = 1.65;
            this.size = 15;
            this.description = "A heavy and rather sharp short blade designed in a Thengan fashion.";
            this.intForDes = 2;
            this.intDescription = "The design is rather crude, but it gets the job done.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 9)
            {
                this.energyCost = 2.5;
            }
            else if (player.getEndurance() < 12)
            {
                this.energyCost = 2;
            }
            else
            {
                this.energyCost = 1.5;
            }
            this.distance = 29 + (this.range * 7);
            this.range = (1 + 4/7);
            if (player.getDexterity() < 9)
            {
                this.rate = 95;
            }
            else if (player.getDexterity() < 12)
            {
                this.rate = 85;
            }
            else
            {
                this.rate = 75;
            }
            this.damage = ((2.75 - (0.75 * this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1.25/50) * player.getDexterity()) + ((1.25/50) * player.getStrength())) * (1 + this.superStealthNum(0.75));
            this.magicalDamage = 0;
            this.negateArmour = 3.5 + this.superStealthNum(6.5);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 8;
            this.ingredients = [["Iron", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
            this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
        }
        else if (this.type == "shortSword")
        {
            //For All Items
            this.identity = "Shortsword";
            this.weight = 1.7;
            this.size = 15;
            this.description = "A short sword forged of iron.";
            this.intForDes = 1;
            this.intDescription = "The design is crude and the grip is worn.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            this.energyCost = 2;
            this.distance = 50 + (this.range * 7);
            this.range = (2 + 5/7);
            if (player.getDexterity() < 5)
            {
                this.rate = 120;
            }
            else if (player.getDexterity() < 10)
            {
                this.rate = 115;
            }
            else
            {
                this.rate = 110;
            }
            this.damage = ((3) * (this.leveledDamageMultiple / 25) + ((1.5/50) * player.getDexterity()) + ((2.5/50) * player.getStrength())) * (1 + this.superStealthNum(0.9));
            this.magicalDamage = 0;
            this.negateArmour = 2 + this.superStealthNum(9);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 7;
            this.ingredients = [["Iron", 2]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 25); // at max, buy for 14.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 15); // at max, sell for 14.
        }
        else if (this.type == "silverDagger")
        {
            //For All Items
            this.identity = "Silver Dagger";
            this.weight = 3.2;
            this.size = 14;
            this.description = "A steel dagger with an outer coating of silver.";
            this.intForDes = 9;
            this.intDescription = "This is intended for slaying mythical beasts that are susceptible to silver.";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 8)
            {
                this.energyCost = 3.5;
            }
            else if (player.getEndurance() < 15)
            {
                this.energyCost = 3;
            }
            else if (player.getEndurance() < 20)
            {
                this.energyCost = 2.5;
            }
            else
            {
                this.energyCost = 2;
            }
            this.distance = 36 + (this.range * 7);
            this.range = 2;
            if (player.getDexterity() < 7)
            {
                this.rate = 140;
            }
            else if (player.getDexterity() < 16)
            {
                this.rate = 120;
            }
            else
            {
                this.rate = 100;
            }
            this.damage = ((3 - (0.5 * this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/50) * player.getDexterity()) + ((2/50) * player.getStrength())) * (1 + this.superStealthNum(1));
            this.magicalDamage = 0;
            this.negateArmour = 4 + this.superStealthNum(8);

            //ability
            this.ability = "none";

            this.yield = 2;
            this.intForCraft = 22;
            this.ingredients = [["Steel", 1], ["Silver", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 140 - Math.floor(player.getCharisma() / 3); // at max, buy for 125.
            this.sellValue = 120 + Math.floor(player.getCharisma() / 10); // at max, sell for 125.
        }
        else if (this.type == "vardanDagger")
        {
            //For All Items
            this.identity = "Vardanian Dagger";
            this.weight = 0.9;
            this.size = 13;
            this.description = "A skinny and rather pointy dagger designed for stabbing people with.";
            this.intForDes = 4;
            this.intDescription = "Shanky shanky shank shank shank...";

            //Define Utility
            this.utility = "weapon";

            //Utility Focused
            if (player.getEndurance() < 10)
            {
                this.energyCost = 2;
            }
            else if (player.getEndurance() < 17)
            {
                this.energyCost = 1.5;
            }
            else
            {
                this.energyCost = 1;
            }
            this.distance = 39 + (this.range * 7);
            this.range = (1 + 4/7);
            if (player.getDexterity() < 8)
            {
                this.rate = 130;
            }
            else if (player.getDexterity() < 14)
            {
                this.rate = 105;
            }
            else
            {
                this.rate = 90;
            }
            this.damage = ((2.5 - (0.5 * this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((2/50) * player.getDexterity()) + ((1/50) * player.getStrength())) * (1 + this.superStealthNum(2));
            this.magicalDamage = 0;
            this.negateArmour = 4 + this.superStealthNum(10);

            //ability
            this.ability = "none";

            this.yield = 1;
            this.intForCraft = 10;
            this.ingredients = [["Steel", 1]];

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 16 - Math.floor(player.getCharisma() / 15); // at max, buy for 13.
            this.sellValue = 11 + Math.floor(player.getCharisma() / 25); // at max, sell for 13.
        }
        else if (this.type == "freydicFolkTales")
        {
            //For All Items
            this.identity = "Freydic Folk Tales";
            this.weight = 0.5;
            this.size = 12;
            this.description = "A book of Freydic old freydic tales.";
            this.intForDes = 14;
            this.intDescription = "Many of the Freydic still believe in the reality of these stories.";

            //Define Utility
            this.utility = "book";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "inquisitorsBeastManual")
        {
            //For All Items
            this.identity = "The official Inquisition Beast Manual";
            this.weight = 0.5;
            this.size = 12;
            this.description = "A book with monster hunting info on a number of magical creatures.";
            this.intForDes = 0;
            this.intDescription = "It was written by the late High Inquisitor Evros, who was a renouned inquisitor in his day.";

            //Define Utility
            this.utility = "book";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 20; // at max, buy for 20.
            this.sellValue = 20; // at max, sell for 20.
        }
        else if (this.type == "lonersJournal")
        {
            //For All Items
            this.identity = "Adventurer's Log";
            this.weight = 0.5;
            this.size = 12;
            this.description = "A journal that was written by an ill fated traveler.";
            this.intForDes = 10;
            this.intDescription = "There are tooth sized holes throughout the man's crushed skull, an animal attack was likely.";

            //Define Utility
            this.utility = "book";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "madmanNote")
        {
            //For All Items
            this.identity = "Note of a Madman";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A hastily written note stained with blood, found on a corpse in the Wuncwer Woods";
            this.intForDes = 9;
            this.intDescription = "Mabye he is not mad, legends tell of ghosts that do as the note describes...";

            //Define Utility
            this.utility = "note";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "killDruid")
        {
            //For All Items
            this.identity = "Informant's Note";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A note addressed to a Nirwaden Inquisitor.";
            this.intForDes = 9;
            this.intDescription = "The note informs the Inquisition about a druid sighting.";

            //Define Utility
            this.utility = "note";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "ultherRIP")
        {
            //For All Items
            this.identity = "The Tale of Ulther the Brave";
            this.weight = 0.001;
            this.size = 12;
            this.description = "The tale of a great warrior who was among the first of the freydic to travel south from Freynor.";
            this.intForDes = 0;
            this.intDescription = "The note was left at the tomb of Ulther the Brave; it was kept dry beneath a seal skin.";

            //Define Utility
            this.utility = "note";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 6; // at max, buy for 6.
            this.sellValue = 2; // at max, sell for 2.
        }
        else if (this.type == "stolenTabletLetter")
        {
            //For All Items
            this.identity = "Dear Niilo";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A letter written to a Freydic man named Niilo.";
            this.intForDes = 0;
            this.intDescription = "You found this note at the side of a dead person, presumably the person this letter was adressed to.";

            //Define Utility
            this.utility = "note";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "paperwork")
        {
            //For All Items
            this.identity = "Paperwork";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A form filled out with a bunch of businessy stuff.";
            this.intForDes = 10;
            this.intDescription = "Everything looks to be in order.";

            //Define Utility
            this.utility = "material";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "estolPoisoningOrders")
        {
            //For All Items
            this.identity = "Estol Poisoning Orders";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A note with details concerning the poisoning of Lord Altezor from the estol gang.";
            this.intForDes = 1001;
            this.intDescription = "";

            //Define Utility
            this.utility = "note";
            this.questy = true;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "estolProof")
        {
            //For All Items
            this.identity = "Estol Gang Orders";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A note with instructions from the estol gang";
            this.intForDes = 1001;
            this.intDescription = "";

            //Define Utility
            this.utility = "note";
            this.questy = true;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "falseInventionPlans")
        {
            //For All Items
            this.identity = "Icharus Wings Schematic";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A scientific looking plan for how to construct wearable wings from wax and feathers.";
            this.intForDes = 20;
            this.intDescription = "This invention is bogus: if it were even able to take off the wax would melt in the sun and the wearer would die...";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 1; // at max, buy for 1.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "inventionPlans")
        {
            //For All Items
            this.identity = "Coal Powered Chainsaw Schematic";
            this.weight = 0.001;
            this.size = 12;
            this.description = "A scientific looking plan for how to construct a chainsaw that runs on coal power.";
            this.intForDes = 20;
            this.intDescription = "These plans look genuine.";

            //Define Utility
            this.utility = "material";
            this.questy = true;

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 25; // at max, buy for 25.
            this.sellValue = 25; // at max, sell for 25.
        }
        else if (this.type == "unitMarker")
        {
            //For All Items
            this.identity = "Marker";
            this.weight = 0;
            this.size = 12;
            this.description = "Place a marker to show where an item will be spawned in the future so that you don't get mixed up.";
            this.intForDes = 0;
            this.intDescription = "These are not a real game item.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "treeMarker")
        {
            //For All Items
            this.identity = "Marker";
            this.weight = 0;
            this.size = 12;
            this.description = "Place a marker to show where a tree will be spawned in the future so that you don't get mixed up.";
            this.intForDes = 0;
            this.intDescription = "These are not a real game item.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "marker")
        {
            //For All Items
            this.identity = "Marker";
            this.weight = 0;
            this.size = 10;
            this.description = "A miscellaneous marker used to represent anything.";
            this.intForDes = 0;
            this.intDescription = "These are not a real game item.";

            //Define Utility
            this.utility = "junk";

            //ability
            this.ability = "none";

            //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
            this.buyValue = 0; // at max, buy for 0.
            this.sellValue = 0; // at max, sell for 0.
        }
        else if (this.type == "mesekScalp")
        {
            if (player.gamemode == "protagonist")
            {
                //For All Items
                this.identity = "Bouncy Ball";
                this.weight = 0.5;
                this.size = 10;
                this.description = "A green and red rubber bouncy ball.";
                this.intForDes = 2;
                this.intDescription = "Who knew that an inflatable bouncy ball could be so green!?";

                //Define Utility
                this.utility = "junk";

                this.questy = true;

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 0; // at max, sell for 0.
            }
            else
            {
                //For All Items
                this.identity = "Mesek's Scalp";
                this.weight = 0.5;
                this.size = 10;
                this.description = "The scalp of a kellish runaway slave named Mesek.";
                this.intForDes = 5;
                this.intDescription = "The brand on the neck skin suggests that Mesek belonged to a Thengan man by the name of Hanz Beulingerr.";

                //Define Utility
                this.utility = "junk";

                this.questy = true;

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 0; // at max, sell for 0.
            }
        }
        else if (this.type == "plantMarker")
            {
                //For All Items
                this.identity = "Marker";
                this.weight = 0;
                this.size = 12;
                this.description = "Place a marker to show where a plant will be spawned in the future so that you don't get mixed up.";
                this.intForDes = 0;
                this.intDescription = "These are not a real game item.";

                //Define Utility
                this.utility = "junk";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 0; // at max, sell for 0.
            }
    };

    //This draws items onto the map.
    this.drawItem = function()
    {
        if (this.type == "coins")
        {
            for (var i = 0; i < worldItems.length; i++)
            {
                if (worldItems[i][0] === this)
                {
                    if (worldItems[i][1] <= 10)
                    {
                        XXX.beginPath();
                        XXX.drawImage(polyPNG, 405, 7, 6, 4, X - this.X + (1/2 * CCC.width) - (1/2 * 6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 4), 6, 4);
                        worldItems[i][0].size = 7;
                    }
                    else if (worldItems[i][1] > 10 && worldItems[i][1] <= 199)
                    {
                        XXX.beginPath();
                        XXX.drawImage(polyPNG, 405, 4, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 16, 17);
                        worldItems[i][0].size = 14;
                    }
                    else if (worldItems[i][1] > 199 && worldItems[i][1] <= 549)
                    {
                        XXX.beginPath();
                        XXX.drawImage(polyPNG, 482, 32, 22, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 22, 22);
                        worldItems[i][0].size = 21;
                    }
                    else if (worldItems[i][1] > 549 && worldItems[i][1] <= 2999)
                    {
                        XXX.beginPath();
                        XXX.drawImage(polyPNG, 418, 21, 27, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29), 27, 29);
                        worldItems[i][0].size = 28;
                    }
                    else if (worldItems[i][1] > 2999 && worldItems[i][1] < 10000)
                    {
                        XXX.beginPath();
                        XXX.drawImage(polyPNG, 948, 5, 56, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 56), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50), 56, 50);
                        worldItems[i][0].size = 32;
                    }
                    else if (worldItems[i][1] >= 10000  && worldItems[i][1] < 99999)
                    {
                        XXX.beginPath();
                        XXX.drawImage(freeverse, 137, 192, 110, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 110), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102), 110, 102);
                        worldItems[i][0].size = 50;
                    }
                    else if (worldItems[i][1] >= 100000)
                    {
                        XXX.beginPath();
                        XXX.drawImage(freeverse, 270, 200, 110, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 110), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102), 110, 102);
                        worldItems[i][0].size = 75;
                    }
                }
            }
        }
        else if (this.type == "unitMarker")
        {
            XXX.beginPath();
            XXX.fillStyle = "gold";
            XXX.arc(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height), 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "plantMarker")
        {
            XXX.beginPath();
            XXX.fillStyle = "turquoise";
            XXX.arc(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height), 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "treeMarker")
        {
            XXX.beginPath();
            XXX.fillStyle = "black";
            XXX.arc(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height), 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "marker")
        {
            XXX.beginPath();
            XXX.fillStyle = "#BF0000";
            XXX.arc(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height), 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "shotgunAmmo")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 714, 309, 17, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1), 17 * 1, 12 * 1);
        }
        else if (this.type == "shotgun")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 690, 182, 76, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 76 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1), 76 * 1, 50 * 1);
        }
        else if (this.type == "m16CarbineClip")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 342, 330, 12, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 12 * 1, 16 * 1);
        }
        else if (this.type == "m16Carbine")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 327, 359, 81, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 81 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 81 * 1, 21 * 1);
        }
        else if (this.type == "freydicFolkTales" || this.type == "lonersJournal" || this.type == "inquisitorsBeastManual")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1979, 12, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 17 * 1, 20 * 1);
        }
        else if (this.type == "madmanNote" || this.type == "ultherRIP" || this.type == "stolenTabletLetter" || this.type == "paperwork" || this.type == "falseInventionPlans" || this.type == "inventionPlans" || this.type == "estolProof" || this.type == "estolPoisoningOrders" || this.type == "killDruid")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 161, 77, 15, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1), 15 * 1, 23 * 1);
        }
        else if (this.type == "barrel" || this.type == "barrelOfWater" || this.type == "barrelOfHarstAle" || this.type == "barrelOfSanthAle" || this.type == "barrelOfMead" || this.type == "caskOfPluttWine" || this.type == "caskOfErguerWine" || this.type == "caskOfCranberryWine" || this.type == "barrelOfGin" || this.type == "barrelOfCider" || this.type == "barrelOfWheatBeer")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 60, 167, 27, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.5), 27 * 1.5, 29 * 1.5);
        }
        else if (this.type == "ashaiWoodBarrel" || this.type == "ashaiWoodBarrelOfWater" || this.type == "caskOfChyoulWine")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 752, 316, 42, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 0.8), 42 * 0.8, 44 * 0.8);
        }
        else if (this.type == "yari")
        {
            XXX.beginPath();
            XXX.drawImage(moonberry, 72, 410, 47, 149, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 149 * 1), 47 * 1, 149 * 1);
        }
        else if (this.type == "kama")
        {
            XXX.beginPath();
            XXX.drawImage(moonberry, 69, 569, 39, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 39 * 1, 38 * 1);
        }
        else if (this.type == "beholderStrands")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 746, 550, 37, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1), 37 * 1, 41 * 1);
        }
        else if (this.type == "yilotnyyFangs")
        {
            XXX.beginPath();
            XXX.drawImage(yil, 380, 308, 38, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 0.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.65), 38 * 0.65, 33 * 0.65);
        }
        else if (this.type == "yilotnyyPelt")
        {
            XXX.beginPath();
            XXX.drawImage(yil, 52, 291, 59, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1.2), 59 * 1.2, 50 * 1.2);
        }
        else if (this.type == "sutetchiLeg")
        {
            XXX.beginPath();
            XXX.drawImage(olg, 37, 298, 28, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 2.1), 28 * 2.1, 28 * 2.1);
        }
        else if (this.type == "reshidTooth")
        {
            XXX.beginPath();
            XXX.drawImage(olg, 760, 156, 16, 6, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 6 * 1.9), 16 * 1.9, 6 * 1.9);
        }
        else if (this.type == "scorpionClaw")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 92, 3, 56, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 1.15), 56 * 1.15, 44 * 1.15);
        }
        else if (this.type == "scorpionClawFeast")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 87, 71, 56, 48, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 48 * 1.15), 56 * 1.15, 48 * 1.15);
        }
        else if (this.type == "scorpionMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 118, 46, 22, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 22 * 1, 18 * 1);
        }
        else if (this.type == "rawScorpionFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 93, 45, 22, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 22 * 1, 18 * 1);
        }
        else if (this.type == "whipScorpionMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1654, 198, 50, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 50 * 1, 27 * 1);
        }
        else if (this.type == "rawWhipScorpionFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1602, 197, 50, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 50 * 1, 27 * 1);
        }
        else if (this.type == "whipScorpionTail")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1514, 481, 56, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1), 56 * 1, 41 * 1);
        }
        else if (this.type == "whipScorpionFang")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1601, 229, 28, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 28 * 1, 18 * 1);
        }
        else if (this.type == "armadiiLeg")
        {
            XXX.beginPath();
            XXX.drawImage(pill, 56, 475, 18, 43, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43 * 1), 18 * 1, 43 * 1);
        }
        else if (this.type == "roastedArmadiiLeg")
        {
            XXX.beginPath();
            XXX.drawImage(pill, 24, 474, 18, 43, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43 * 1), 18 * 1, 43 * 1);
        }
        else if (this.type == "rattlerVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 169, 165, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1), 13 * 1, 12 * 1);
        }
        else if (this.type == "barbolSkin")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 715, 175, 130, 82, X - this.X + (1/2 * CCC.width) - (1/2 * 130 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 82 * 1.2), 130 * 1.2, 82 * 1.2);
        }
        else if (this.type == "rawBarbolFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 697, 269, 48, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "barbolMeat")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 752, 270, 48, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "desertLizardSml")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 727, 544, 71, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 71 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1), 71 * 1, 32 * 1);
        }
        else if (this.type == "roastedDesertLizardSml")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 825, 545, 71, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 71 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1), 71 * 1, 32 * 1);
        }
        else if (this.type == "desertLizardLrg")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 727, 544, 71, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 71 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.2), 71 * 1.2, 32 * 1.2);
        }
        else if (this.type == "roastedDesertLizardLrg")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 825, 545, 71, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 71 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.2), 71 * 1.2, 32 * 1.2);
        }
        else if (this.type == "xerocoleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 180, 127, 42, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 42 * 1, 31 * 1);
        }
        else if (this.type == "rawXerocoleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 131, 127, 42, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 42 * 1, 31 * 1);
        }
        else if (this.type == "rawXerocoleRibs")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 232, 124, 48, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "xerocoleRibs")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 289, 124, 48, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "xerocolePelt")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 30, 120, 99, 56, X - this.X + (1/2 * CCC.width) - (1/2 * 99 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 56 * 1.1), 99 * 1.1, 56 * 1.1);
        }
        else if (this.type == "raedBeetleShell")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 0, 3, 46, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 46 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 46 * 1, 26 * 1);
        }
        else if (this.type == "raedBeetleLeg")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 171, 2, 14, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 14 * 1, 29 * 1);
        }
        else if (this.type == "raedBeetleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 60, 2, 32, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "fermentedRaedBeetleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 134, 4, 32, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "raedBeetleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 97, 2, 32, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "rawVoaiiFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 81, 37, 32, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "voaiiSponge")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 120, 38, 32, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "voaiiWingFragments")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 1105, 551, 33, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "voaiiWing")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 4, 35, 43, 84, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 84 * 1), 43 * 1, 84 * 1);
        }
        else if (this.type == "voaiiCarapace")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 1139, 561, 60, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 60 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1), 60 * 1, 22 * 1);
        }
        else if (this.type == "naagSpine")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 39, 8, 28, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 28 * 1, 25 * 1);
        }
        else if (this.type == "naagMeatChunk")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 49, 88, 31, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.3), 31 * 1.3, 22 * 1.3);
        }
        else if (this.type == "naagMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 45, 48, 42, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.85), 42 * 1.85, 37 * 1.85);
        }
        else if (this.type == "curedDriedNaag")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 2, 0, 30, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.3), 30 * 1.3, 18 * 1.3);
        }
        else if (this.type == "wholeCuredDriedNaag")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 2, 86, 42, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.85), 42 * 1.85, 37 * 1.85);
        }
        else if (this.type == "rawNaagFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 3, 47, 42, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.85), 42 * 1.85, 37 * 1.85);
        }
        else if (this.type == "naagPelt")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 26, 120, 79, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 79 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 1.85), 79 * 1.85, 54 * 1.85);
        }
        else if (this.type == "muon")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 685, 578, 51, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "muonShell")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 685, 610, 51, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "muonFruit")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 686, 637, 51, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "longElkGloves")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 420, 15, 54, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1), 54 * 1, 60 * 1);
        }
        else if (this.type == "longElkBoots")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 477, 15, 54, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1), 54 * 1, 60 * 1);
        }
        else if (this.type == "motylinkaBoots")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 549, 144, 48, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1), 48 * 1, 32 * 1);
        }
        else if (this.type == "motylinkaGloves")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 552, 175, 44, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40 * 1), 44 * 1, 40 * 1);
        }
        else if (this.type == "redMotylinkaBoots")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 549, 144, 48, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1), 48 * 1, 32 * 1);
        }
        else if (this.type == "redMotylinkaGloves")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 552, 175, 44, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40 * 1), 44 * 1, 40 * 1);
        }
        else if (this.type == "boroyeNobleDress")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 973, 21, 58, 131, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 131 * 0.9), 58 * 0.9, 131 * 0.9);
        }
        else if (this.type == "boroyeNobleOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 899, 16, 58, 131, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 131 * 1), 58 * 1, 131 * 1);
        }
        else if (this.type == "redMotylinkaCloak")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 685, 25, 55, 93, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 93 * 1), 55 * 1, 93 * 1);
        }
        else if (this.type == "motylinkaCloak")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 685, 25, 55, 93, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 93 * 1), 55 * 1, 93 * 1);
        }
        else if (this.type == "vardanianGentryOutfitTan")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1578, 355, 77, 191, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 0.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 191 * 0.65), 77 * 0.65, 191 * 0.65);
        }
        else if (this.type == "vardanianGentryTanOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1663, 355, 77, 191, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 0.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 191 * 0.65), 77 * 0.65, 191 * 0.65);
        }
        else if (this.type == "vardanianGentryOutfitGreen")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1577, 552, 77, 191, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 0.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 191 * 0.65), 77 * 0.65, 191 * 0.65);
        }
        else if (this.type == "vardanianGentryGreenOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1664, 553, 77, 191, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 0.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 191 * 0.65), 77 * 0.65, 191 * 0.65);
        }
        else if (this.type == "vardanianGentryOutfitGrey")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1575, 744, 77, 191, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 0.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 191 * 0.65), 77 * 0.65, 191 * 0.65);
        }
        else if (this.type == "vardanianGentryGreyOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1662, 743, 77, 191, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 0.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 191 * 0.65), 77 * 0.65, 191 * 0.65);
        }
        else if (this.type == "blackBearMediumArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1611, 214, 54, 107, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 107 * 1), 54 * 1, 107 * 1);
        }
        else if (this.type == "plumedBoroyePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 826, 19, 50, 125, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 125 * 1), 50 * 1, 125 * 1);
        }
        else if (this.type == "plumedMorrowPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 826, 19, 50, 125, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 125 * 1), 50 * 1, 125 * 1);
        }
        else if (this.type == "boroyePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 757, 22, 50, 125, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 125 * 1), 50 * 1, 125 * 1);
        }
        else if (this.type == "morrowPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 757, 22, 50, 125, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 125 * 1), 50 * 1, 125 * 1);
        }
        else if (this.type == "redClawArmour")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 335, 7, 68, 123, X - this.X + (1/2 * CCC.width) - (1/2 * 68 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 123 * 1.05), 68 * 1.05, 123 * 1.05);
        }
        else if (this.type == "pinkVardanianDupatta")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 521, 126, 66, 122, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 122 * 0.9), 66 * 0.9, 122 * 0.9);
        }
        else if (this.type == "cianVardanianDupatta")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 178, 28, 68, 123, X - this.X + (1/2 * CCC.width) - (1/2 * 68 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 123 * 0.9), 68 * 0.9, 123 * 0.9);
        }
        else if (this.type == "elkFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 432, 126, 66, 122, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 0.96), Y - this.Y + (1/2 * CCC.height) - (1/2 * 122 * 0.96), 66 * 0.96, 122 * 0.96);
        }
        else if (this.type == "varminFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 122, 117, 66, 122, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 122 * 1.3), 66 * 1.3, 122 * 1.3);
        }
        else if (this.type == "redClawThugOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 187, 114, 66, 122, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 122 * 1.05), 66 * 1.05, 122 * 1.05);
        }
        else if (this.type == "redClaw")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 314, 126, 66, 122, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 0.93), Y - this.Y + (1/2 * CCC.height) - (1/2 * 122 * 0.93), 66 * 0.93, 122 * 0.93);
        }
        else if (this.type == "koivayaFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(trea, 637, 1769, 51, 90, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 90 * 1), 51 * 1, 90 * 1);
        }
        else if (this.type == "koivayaFurDress")
        {
            XXX.beginPath();
            XXX.drawImage(trea, 638, 1881, 51, 98, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 98 * 1), 51 * 1, 98 * 1);
        }
        else if (this.type == "zetianGloves")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 693, 69, 24, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1), 24 * 1, 13 * 1);
        }
        else if (this.type == "chapulCactus")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1633, 229, 22, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.3), 22 * 1.3, 22 * 1.3);
        }
        else if (this.type == "chapulCactusPaste")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1661, 232, 27, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.3), 27 * 1.3, 22 * 1.3);
        }
        else if (this.type == "anjayCactus")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 608, 433, 24, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "despinedAnjayCactus")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 659, 433, 24, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "roastedAnjayCactus")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 687, 433, 24, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "anjayFlower")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 634, 433, 24, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "naibArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1384, 705, 40, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1.4), 40 * 1.4, 36 * 1.4);
        }
        else if (this.type == "inumClipping")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1503, 713, 40, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1.2), 40 * 1.2, 36 * 1.2);
        }
        else if (this.type == "maweHunk")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1136, 277, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 17 * 1.5, 18 * 1.5);
        }
        else if (this.type == "despinedMaweHunk")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1154, 277, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 17 * 1.5, 18 * 1.5);
        }
        else if (this.type == "maweFlower")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1168, 180, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 17 * 1.5, 18 * 1.5);
        }
        else if (this.type == "maleLyagushkaSkin")
        {
            XXX.beginPath();
            XXX.drawImage(cleen, 393, 50, 37, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1.1), 37 * 1.1, 33 * 1.1);
        }
        else if (this.type == "rawLyagushkaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(cleen, 36, 36, 28, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.1), 28 * 1.1, 17 * 1.1);
        }
        else if (this.type == "lyagushkaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(cleen, 38, 56, 28, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.1), 28 * 1.1, 17 * 1.1);
        }
        else if (this.type == "ostryyGrass")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1296, 431, 68, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 68 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 61 * 1), 68 * 1, 61 * 1);
        }
        else if (this.type == "vardanianInformerUniform")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1608, 51, 66, 132, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 0.87), Y - this.Y + (1/2 * CCC.height) - (1/2 * 132 * 0.87), 66 * 0.87, 132 * 0.87);
        }
        else if (this.type == "heskFungalPod")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 316, 72, 24, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.45), 24 * 1.45, 24 * 1.45);
        }
        else if (this.type == "heskFungus")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 251, 73, 54, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.1), 54 * 1.1, 20 * 1.1);
        }
        else if (this.type == "roylaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 144, 8, 26, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 0.8), 26 * 0.8, 30 * 0.8);
        }
        else if (this.type == "toadstools")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 294, 23, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.25), 16 * 1.25, 17 * 1.25);
        }
        else if (this.type == "thimblecapMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 129, 44, 20, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 0.8), 20 * 0.8, 22 * 0.8);
        }
        else if (this.type == "vardanianMardyl")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 841, 519, 55, 58, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 58 * 1), 55 * 1, 58 * 1);
        }
        else if (this.type == "orgishMardyl")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 40, 126, 55, 58, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 58 * 1.1), 55 * 1.1, 58 * 1.1);
        }
        else if (this.type == "prematureCauwLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1656, 994, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.3), 18 * 1.3, 20 * 1.3);
        }
        else if (this.type == "cauwLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1687, 997, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.3), 18 * 1.3, 20 * 1.3);
        }
        else if (this.type == "eisyncryneFruit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1618, 1026, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "splitEisyncryneFruit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1597, 1027, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "eisyncrynePlant")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1596, 1047, 41, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 1.4), 41 * 1.4, 45 * 1.4);
        }
        else if (this.type == "motylekhLeg")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 191, 261, 86, 58, X - this.X + (1/2 * CCC.width) - (1/2 * 86 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 58 * 1.2), 86 * 1.2, 58 * 1.2);
        }
        else if (this.type == "roastedMotylekhLeg")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 306, 262, 86, 58, X - this.X + (1/2 * CCC.width) - (1/2 * 86 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 58 * 1.2), 86 * 1.2, 58 * 1.2);
        }
        else if (this.type == "motylekhWing")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 400, 236, 127, 84, X - this.X + (1/2 * CCC.width) - (1/2 * 127 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 84 * 1.2), 127 * 1.2, 84 * 1.2);
        }
        else if (this.type == "motylekhWingBundle")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 367, 96, 146, 88, X - this.X + (1/2 * CCC.width) - (1/2 * 146 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 88 * 1.2), 146 * 1.2, 88 * 1.2);
        }
        else if (this.type == "bulkMotylinka")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 376, 7, 146, 88, X - this.X + (1/2 * CCC.width) - (1/2 * 146 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 88 * 1.2), 146 * 1.2, 88 * 1.2);
        }
        else if (this.type == "motylinka")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 376, 7, 146, 88, X - this.X + (1/2 * CCC.width) - (1/2 * 146 * 0.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 88 * 0.4), 146 * 0.4, 88 * 0.4);
        }
        else if (this.type == "chervstrakhaStomach")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 148, 270, 14, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1), 14 * 1, 12 * 1);
        }
        else if (this.type == "ratPrinceRegalia")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1442, 1023, 58, 120, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 120 * 1), 58 * 1, 120 * 1);
        }
        else if (this.type == "ratKingRegalia")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1514, 1021, 58, 120, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 120 * 1), 58 * 1, 120 * 1);
        }
        else if (this.type == "nomadTent")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 7, 162, 43, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 1.2), 43 * 1.2, 44 * 1.2);
        }
        else if (this.type == "anglerAntennae")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 779, 1296, 98, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 98 * 1.55), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1.55), 98 * 1.55, 34 * 1.55);
        }
        else if (this.type == "starfishSmall")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 633, 425, 70, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 70 * 0.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70 * 0.4), 70 * 0.4, 70 * 0.4);
        }
        else if (this.type == "starfishBig")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 633, 425, 70, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 70 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70 * 0.8), 70 * 0.8, 70 * 0.8);
        }
        else if (this.type == "rawBloodwormFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 540, 556, 35, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.2), 35 * 1.2, 27 * 1.2);
        }
        else if (this.type == "bloodwormMeat")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 591, 553, 35, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.2), 35 * 1.2, 27 * 1.2);
        }
        else if (this.type == "krogiMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 4, 238, 30, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 30 * 1, 27 * 1);
        }
        else if (this.type == "cookedKrogiMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 42, 241, 30, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 30 * 1, 27 * 1);
        }
        else if (this.type == "pixiWing")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 72, 101, 20, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.1), 20 * 1.1, 24 * 1.1);
        }
        else if (this.type == "pixiBrain")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 91, 128, 20, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.1), 20 * 1.1, 24 * 1.1);
        }
        else if (this.type == "jarOfPixiBlood")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 69, 156, 20, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 20 * 1.5, 24 * 1.5);
        }
        else if (this.type == "velidShell")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 69, 130, 20, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.3), 20 * 1.3, 24 * 1.3);
        }
        else if (this.type == "trubkaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 7, 267, 20, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.55), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.55), 20 * 1.55, 24 * 1.55);
        }
        else if (this.type == "trubkaStalk")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 806, 1328, 67, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 67 * 1.55), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.55), 67 * 1.55, 30 * 1.55);
        }
        else if (this.type == "pokinutyyShell")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 643, 631, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.3), 31 * 1.3, 29 * 1.3);
        }
        else if (this.type == "pokinutyyLegFull" || this.type == "pokinutyyLeg")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 575, 631, 51, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 51 * 1, 29 * 1);
        }
        else if (this.type == "gnollPelt")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 206, 309, 54, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40 * 1), 54 * 1, 40 * 1);
        }
        else if (this.type == "gnollIntestines")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 168, 257, 40, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 40 * 1, 36 * 1);
        }
        else if (this.type == "roastedGnollIntestines")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 208, 258, 40, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 40 * 1, 36 * 1);
        }
        else if (this.type == "holuimTalisman")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1173, 717, 24, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 24 * 1, 33 * 1);
        }
        else if (this.type == "varminPelt")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 433, 3, 81, 48, X - this.X + (1/2 * CCC.width) - (1/2 * 81 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 48 * 1), 81 * 1, 48 * 1);
        }
        else if (this.type == "deadRat")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 26, 1117, 62, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 62 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 0.6), 62 * 0.6, 34 * 0.6);
        }
        else if (this.type == "rawSkeweredRat")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 102, 1155, 97, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 97 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 0.6), 97 * 0.6, 34 * 0.6);
        }
        else if (this.type == "skeweredRat")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 14, 1156, 92, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 92 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 0.6), 92 * 0.6, 35 * 0.6);
        }
        else if (this.type == "rawVarminLeg")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 862, 897, 93, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 93 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "rawVarminHaunch")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 862, 937, 93, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 93 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "varminHaunch")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 861, 985, 93, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 93 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "vardanianPolehammer")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 14, 678, 84, 124, X - this.X + (1/2 * CCC.width) - (1/2 * 84 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 124 * 1), 84 * 1, 124 * 1);
        }
        else if (this.type == "pashaArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1135, 297, 33, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "despinedPashaArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1135, 325, 33, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "roastedPashaArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1135, 353, 33, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "cephrianPaladinArmour")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 76, 40, 65, 131, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 0.75), Y - this.Y + (1/2 * CCC.height) - (1/2 * 131 * 0.75), 65 * 0.75, 131 * 0.75);
        }
        else if (this.type == "tropicalFruitPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 948, 67, 39, 43, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43 * 1.4), 39 * 1.4, 43 * 1.4);
        }
        else if (this.type == "marinatedGazelle")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 838, 35, 30, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.1), 30 * 1.1, 30 * 1.1);
        }
        else if (this.type == "spicedSonjaSlices")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 935, 1, 28, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.5), 28 * 1.5, 30 * 1.5);
        }
        else if (this.type == "artichokePlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 911, 34, 28, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.3), 28 * 1.3, 30 * 1.3);
        }
        else if (this.type == "stuffedEggplant")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 939, 35, 28, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.5), 28 * 1.5, 30 * 1.5);
        }
        else if (this.type == "stuffedOnion")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 967, 33, 28, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.3), 28 * 1.3, 30 * 1.3);
        }
        else if (this.type == "wholeRoastedKol")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 902, 1, 33, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.5), 33 * 1.5, 30 * 1.5);
        }
        else if (this.type == "cephrianStew")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 864, 3, 33, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.5), 33 * 1.5, 30 * 1.5);
        }
        else if (this.type == "spicedFermentedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 834, 1, 30, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.2), 30 * 1.2, 30 * 1.2);
        }
        else if (this.type == "piranhaPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 731, 9, 45, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1), 45 * 1, 28 * 1);
        }
        else if (this.type == "boaPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 669, 4, 52, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 52 * 1, 31 * 1);
        }
        else if (this.type == "wholeStuffedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 778, 6, 52, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.25), 52 * 1.25, 31 * 1.25);
        }
        else if (this.type == "wholeRoastedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 778, 6, 52, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.2), 52 * 1.2, 31 * 1.2);
        }
        else if (this.type == "giraffePlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 587, 3, 31, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1.1), 31 * 1.1, 28 * 1.1);
        }
        else if (this.type == "sonjaGlazedKigariiRibs")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 623, 3, 31, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1.3), 31 * 1.3, 28 * 1.3);
        }
        else if (this.type == "spellOil")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1010, 2, 10, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 2), 10 * 2, 21 * 2);
        }
        else if (this.type == "druidGown")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 661, 145, 40, 74, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 74 * 1.5), 40 * 1.5, 74 * 1.5);
        }
        else if (this.type == "zetianWarriorArmour")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 721, 135, 62, 81, X - this.X + (1/2 * CCC.width) - (1/2 * 62 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 81 * 1.25), 62 * 1.25, 81 * 1.25);
        }
        else if (this.type == "lionClothing")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 736, 836, 58, 99, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 99 * 1.05), 58 * 1.05, 99 * 1.05);
        }
        else if (this.type == "giraffeClothing")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 614, 1000, 58, 99, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 99 * 1.05), 58 * 1.05, 99 * 1.05);
        }
        else if (this.type == "twoDogOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 679, 999, 58, 99, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 99 * 1.05), 58 * 1.05, 99 * 1.05);
        }
        else if (this.type == "cephrianNomadOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 620, 771, 58, 99, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 99 * 1.10), 58 * 1.10, 99 * 1.10);
        }
        else if (this.type == "cephrianNomadDress")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 625, 671, 58, 99, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 99 * 1), 58 * 1, 99 * 1);
        }
        else if (this.type == "shortCephrianNomadDress")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 632, 674, 47, 79, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 79 * 1), 47 * 1, 79 * 1);
        }
        else if (this.type == "cephrianOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 742, 940, 41, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80 * 1.25), 41 * 1.25, 80 * 1.25);
        }
        else if (this.type == "cephrianOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 688, 855, 41, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80 * 1.25), 41 * 1.25, 80 * 1.25);
        }
        else if (this.type == "zetianOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 683, 4, 43, 79, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 79 * 1.25), 43 * 1.25, 79 * 1.25);
        }
        else if (this.type == "zetianOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 730, 2, 43, 79, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 79 * 1.25), 43 * 1.25, 79 * 1.25);
        }
        else if (this.type == "vardanianEliteSoldierOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 15, 64, 46, 116, X - this.X + (1/2 * CCC.width) - (1/2 * 46 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 116 * 1), 46 * 1, 116 * 1);
        }
        else if (this.type == "cephrianBlade")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 219, 67, 17, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1), 17 * 1, 60 * 1);
        }
        else if (this.type == "cephrianDagger")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1073, 822, 23, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1), 23 * 1, 60 * 1);
        }
        else if (this.type == "cephrianRapier")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 148, 8, 20, 89, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 89 * 1), 20 * 1, 89 * 1);
        }
        else if (this.type == "throwingKnife")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1413, 809, 12, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 12 * 1, 39 * 1);
        }
        else if (this.type == "poisonCoatedThrowingKnife")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1414, 856, 12, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 12 * 1, 39 * 1);
        }
        else if (this.type == "cephrianPikeAndShield")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 606, 6, 150, 108, X - this.X + (1/2 * CCC.width) - (1/2 * 150 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 108 * 1), 150 * 1, 108 * 1);
        }
        else if (this.type == "rawVodkapaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1354, 230, 74, 62, X - this.X + (1/2 * CCC.width) - (1/2 * 74 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 62 * 1), 74 * 1, 62 * 1);
        }
        else if (this.type == "vodkapaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1354, 313, 74, 62, X - this.X + (1/2 * CCC.width) - (1/2 * 74 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 62 * 1), 74 * 1, 62 * 1);
        }
        else if (this.type == "vodkapaSpleen")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1456, 241, 32, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 1), 32 * 1, 46 * 1);
        }
        else if (this.type == "fermentedVodkapaSpleen")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1454, 323, 32, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 1), 32 * 1, 46 * 1);
        }
        else if (this.type == "cephrianArmour")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 172, 41, 48, 109, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 109 * 1), 48 * 1, 109 * 1);
        }
        else if (this.type == "blinkOrb")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 123, 67, 10, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1), 10 * 1, 9 * 1);
        }
        else if (this.type == "gazelleHorn")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1300, 838, 14, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.1), 14 * 1.1, 37 * 1.1);
        }
        else if (this.type == "gazellePelt")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2372, 880, 84, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 84 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1.1), 84 * 1.1, 41 * 1.1);
        }
        else if (this.type == "rawGazelleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2575, 892, 30, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1.1), 30 * 1.1, 26 * 1.1);
        }
        else if (this.type == "gazelleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2607, 894, 30, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1.1), 30 * 1.1, 26 * 1.1);
        }
        else if (this.type == "rawTaebjuurFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1409, 1150, 36, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.2), 36 * 1.2, 29 * 1.2);
        }
        else if (this.type == "taebjuurMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1373, 1150, 36, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.2), 36 * 1.2, 29 * 1.2);
        }
        else if (this.type == "holnArms")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 278, 365, 56, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1.2), 56 * 1.2, 41 * 1.2);
        }
        else if (this.type == "rawGiraffeFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 499, 1047, 30, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1.1), 30 * 1.1, 28 * 1.1);
        }
        else if (this.type == "giraffeMeat")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 530, 1048, 30, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1.1), 30 * 1.1, 28 * 1.1);
        }
        else if (this.type == "rawHyenaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 602, 257, 24, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.1), 24 * 1.1, 20 * 1.1);
        }
        else if (this.type == "hyenaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 628, 258, 24, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.1), 24 * 1.1, 20 * 1.1);
        }
        else if (this.type == "rawDogFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 607, 284, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.1), 20 * 1.1, 18 * 1.1);
        }
        else if (this.type == "dogMeat")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 628, 285, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.1), 20 * 1.1, 18 * 1.1);
        }
        else if (this.type == "hyenaPelt")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 225, 11, 54, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.1), 54 * 1.1, 29 * 1.1);
        }
        else if (this.type == "wildDogPelt")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 166, 12, 54, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.1), 54 * 1.1, 29 * 1.1);
        }
        else if (this.type == "giraffePelt")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 370, 13, 128, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 128 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1.1), 128 * 1.1, 41 * 1.1);
        }
        else if (this.type == "xiumMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(fect, 545, 38, 43, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 43 * 1, 27 * 1);
        }
        else if (this.type == "leafCutterAnterMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1998, 209, 25, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.05), 25 * 1.05, 19 * 1.05);
        }
        else if (this.type == "rawLeafCutterAnterFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1997, 190, 25, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.1), 25 * 1.1, 19 * 1.1);
        }
        else if (this.type == "elcheExtract")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1751, 183, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1), 10 * 1, 17 * 1);
        }
        else if (this.type == "elcheLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1990, 151, 39, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.1), 39 * 1.1, 35 * 1.1);
        }
        else if (this.type == "rawLionFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 241, 49, 19, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "lionMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 221, 50, 19, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "lionPelt")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 263, 48, 45, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1.5), 45 * 1.5, 25 * 1.5);
        }
        else if (this.type == "rawTermiteFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2385, 3, 18, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "termiteMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2386, 29, 18, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "fermentedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2385, 15, 18, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "termiteWings")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2289, 1, 36, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1.2), 36 * 1.2, 26 * 1.2);
        }
        else if (this.type == "acaciaWood")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 803, 725, 66, 71, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 71 * 1), 66 * 1, 71 * 1);
        }
        else if (this.type == "snowyOwlWing")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 304, 121, 23, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 23 * 1, 31 * 1);
        }
        else if (this.type == "snowyOwlWingLarge")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 304, 121, 23, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 3), 23 * 3, 31 * 3);
        }
        else if (this.type == "cebollaPicadaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 26, 308, 22, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "cebollaPicada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 4, 266, 22, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "cebollaHorneada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 21, 292, 15, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "cebolla")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 8, 291, 15, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "berenjenaRebanadaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 1, 442, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "berenjenaRebanada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 0, 462, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "berenjenaPicadaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 3, 357, 22, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.5), 22 * 1.5, 22 * 1.5);
        }
        else if (this.type == "berenjenaPicada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 2, 377, 22, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.5), 22 * 1.5, 22 * 1.5);
        }
        else if (this.type == "berenjena")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 1, 490, 22, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.5), 22 * 1.5, 27 * 1.5);
        }
        else if (this.type == "saffron")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 19, 459, 15, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "alcachofa")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 6, 221, 22, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "alcachofaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 6, 244, 22, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "tchafula")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 965, 6, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.4), 14 * 1.4, 16 * 1.4);
        }
        else if (this.type == "tchafulaHalf")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 981, 6, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.4), 14 * 1.4, 16 * 1.4);
        }
        else if (this.type == "tchafulaTuft")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 554, 0, 21, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.4), 21 * 1.4, 24 * 1.4);
        }
        else if (this.type == "glazaPowder")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 693, 41, 19, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "glazm")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 716, 40, 19, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "roastedGlazaRoot")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1, 98, 48, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.3), 48 * 1.3, 30 * 1.3);
        }
        else if (this.type == "glazaRoot")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1, 127, 48, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.3), 48 * 1.3, 30 * 1.3);
        }
        else if (this.type == "tchaltaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 666, 35, 25, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "tchaltaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 618, 33, 25, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "tchaltaGel")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 645, 32, 25, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "nupalaPuffs")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 590, 31, 29, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.55), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.55), 29 * 1.55, 19 * 1.55);
        }
        else if (this.type == "zwaleimBranches")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 558, 33, 29, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.55), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.55), 29 * 1.55, 19 * 1.55);
        }
        else if (this.type == "skriatokEssence")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 2199, 877, 55, 49, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 0.45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49 * 0.45), 55 * 0.45, 49 * 0.45);
        }
        else if (this.type == "cheshirePaw")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 901, 3, 35, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 35 * 1, 31 * 1);
        }
        else if (this.type == "worms")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 5, 716, 18, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 18 * 1, 16 * 1);
        }
        else if (this.type == "wormz")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 5, 716, 18, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1) + 1, Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1) + 2.5, 18 * 1, 16 * 1);
            XXX.drawImage(polyPNG, 5, 716, 18, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 18 * 1, 16 * 1);
            XXX.drawImage(polyPNG, 5, 716, 18, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1) + 4, Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1) - 3, 18 * 1, 16 * 1);
        }
        else if (this.type == "turkeyEgg")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 721, 184, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1), 19 * 1, 19 * 1);
        }
        else if (this.type == "cookedTurkeyEgg")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 713, 207, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.1), 19 * 1.1, 19 * 1.1);
        }
        else if (this.type == "turkeyFeathers")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 747, 305, 38, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 38 * 1, 26 * 1);
        }
        else if (this.type == "rawTurkeyFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 742, 190, 51, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55 * 1), 51 * 1, 55 * 1);
        }
        else if (this.type == "turkeyMeat")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 740, 248, 51, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55 * 1), 51 * 1, 55 * 1);
        }
        else if (this.type == "thenganSageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 633, 61, 57, 108, X - this.X + (1/2 * CCC.width) - (1/2 * 57 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 108 * 1), 57 * 1, 108 * 1);
        }
        else if (this.type == "sackmansHood")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 356, 3, 51, 43, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43 * 1), 51 * 1.2, 43 * 1);
            XXX.drawImage(pavo, 268, 0, 51, 43, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43 * 1), 51 * 0.9, 43 * 1);
        }
        else if (this.type == "littleRedRidingHood")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 70, 4, 36, 63, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 63 * 1.5), 36 * 1.5, 63 * 1.5);
        }
        else if (this.type == "sackmansSword")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 24, 131, 56, 67, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 67 * 1.4), 56 * 1.4, 67 * 1.4);
        }
        else if (this.type == "beulingerrDress")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 858, 153, 115, 140, X - this.X + (1/2 * CCC.width) - (1/2 * 115 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 140 * 1), 115 * 1, 140 * 1);
        }
        else if (this.type == "beulingerrOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 57, 3, 77, 127, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 0.88), Y - this.Y + (1/2 * CCC.height) - (1/2 * 127 * 0.88), 77 * 0.88, 127 * 0.88);
        }
        else if (this.type == "theWendigosCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 15, 8, 29, 79, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 79 * 1), 29 * 1, 79 * 1);
        }
        else if (this.type == "beulingerrPike")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 26, 140, 136, 90, X - this.X + (1/2 * CCC.width) - (1/2 * 136 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 90 * 1), 136 * 1, 90 * 1);
        }
        else if (this.type == "redFan")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 108, 463, 23, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 23 * 1, 24 * 1);
        }
        else if (this.type == "purpleFan")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 0, 103, 23, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 23 * 1, 24 * 1);
        }
        else if (this.type == "thenganHose")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 5, 116, 48, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 48 * 1, 26 * 1);
        }
        else if (this.type == "thenganCommonwear")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 0, 8, 57, 97, X - this.X + (1/2 * CCC.width) - (1/2 * 57 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 97 * 1.05), 57 * 1.05, 97 * 1.05);
        }
        else if (this.type == "thenganNobleOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 116, 8, 69, 115, X - this.X + (1/2 * CCC.width) - (1/2 * 69 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 115 * 1), 69 * 1, 115 * 1);
        }
        else if (this.type == "thenganNobleOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 202, 8, 69, 115, X - this.X + (1/2 * CCC.width) - (1/2 * 69 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 115 * 1), 69 * 1, 115 * 1);
        }
        else if (this.type == "foxClothingM")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 824, 417, 34, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 34 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1.4), 34 * 1.4, 78 * 1.4);
        }
        else if (this.type == "foxClothingF")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 785, 415, 34, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 34 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1.4), 34 * 1.4, 78 * 1.4);
        }
        else if (this.type == "thenganHunterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 59, 716, 42, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1.4), 42 * 1.4, 78 * 1.4);
        }
        else if (this.type == "thenganArcticClothing")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 13, 720, 43, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80 * 1.4), 43 * 1.4, 80 * 1.4);
        }
        else if (this.type == "foxFurDress")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 329, 569, 43, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80 * 2), 43 * 2, 80 * 2);
        }
        else if (this.type == "grizzlyLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 775, 505, 64, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102 * 1.1), 64 * 1.1, 102 * 1.1);
        }
        else if (this.type == "grizzlyLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 787, 643, 43, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40 * 1.1), 43 * 1.1, 40 * 1.1);
        }
        else if (this.type == "grizzlyLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 787, 614, 43, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.1), 43 * 1.1, 32 * 1.1);
        }
        else if (this.type == "thenganWorkmansApron")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 774, 359, 64, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1.0), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102 * 1.0), 64 * 1.0, 102 * 1.0);
        }
        else if (this.type == "deerHideArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 772, 197, 61, 91, X - this.X + (1/2 * CCC.width) - (1/2 * 61 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91 * 1.15), 61 * 1.15, 91 * 1.15);
        }
        else if (this.type == "stagArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 765, 51, 61, 91, X - this.X + (1/2 * CCC.width) - (1/2 * 61 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91 * 1.15), 61 * 1.15, 91 * 1.15);
        }
        else if (this.type == "badgerFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 706, 41, 56, 91, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91 * 1.3), 56 * 1.3, 91 * 1.3);
        }
        else if (this.type == "cultistRobes")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 786, 701, 45, 77, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 77 * 1.5), 45 * 1.5, 77 * 1.5);
        }
        else if (this.type == "cultistHighPriestRobes")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 783, 780, 45, 85, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 85 * 1.5), 45 * 1.5, 85 * 1.5);
        }
        else if (this.type == "crowFeather")
        {
            XXX.beginPath();
            XXX.drawImage(leshen, 389, 3, 26, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 0.9), 26 * 0.9, 29 * 0.9);
        }
        else if (this.type == "sowtFlemGland")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 43, 450, 17, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.1), 17 * 1.1, 22 * 1.1);
        }
        else if (this.type == "skindlerIntestines")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 31, 400, 45, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 0.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 0.7), 45 * 0.7, 45 * 0.7);
        }
        else if (this.type == "deerPelt")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 64, 788, 51, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1.1), 51 * 1.1, 25 * 1.1);
        }
        else if (this.type == "deerAntler")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 57, 831, 22, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1.1), 51 * 1.1, 25 * 1.1);
        }
        else if (this.type == "badgerPelt")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 5, 829, 28, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 28 * 1, 27 * 1);
        }
        else if (this.type == "rawBadgerFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 38, 835, 15, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1), 15 * 1, 13 * 1);
        }
        else if (this.type == "badgerMeat")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 38, 849, 15, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1), 15 * 1, 13 * 1);
        }
        else if (this.type == "stovolBeetleMandable")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 33, 1177, 43, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 43 * 1, 20 * 1);
        }
        else if (this.type == "sceptreOfRadiance")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 795, 1077, 37, 56, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 56 * 1), 37 * 1, 56 * 1);
            if (timeOfDay != "Day" || player.underground == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 100, extraStops: true, GRD: 0, Alpha: 0.3, showMe: false});
            }
        }
        else if (this.type == "cultistScythe")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 789, 1023, 37, 56, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 56 * 1), 37 * 1, 56 * 1);
        }
        else if (this.type == "longBone")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 771, 969, 37, 56, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 56 * 1), 37 * 1, 56 * 1);
        }
        else if (this.type == "pitchfork")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 786, 886, 41, 72, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 72 * 1), 41 * 1, 72 * 1);
        }
        else if (this.type == "jolleFlower")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 347, 1088, 30, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "kagsHead")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 72, 986, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.95), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.95), 31 * 1.95, 29 * 1.95);
        }
        else if (this.type == "raggedGrizzlyPelt")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 138, 912, 55, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1.95), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.95), 55 * 1.95, 37 * 1.95);
        }
        else if (this.type == "grizzlyBearPeltLarge")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 137, 872, 56, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.85), 56 * 1.85, 37 * 1.85);
        }
        else if (this.type == "grizzlyBearPeltSmall")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 137, 872, 56, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.75), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.75), 56 * 1.75, 37 * 1.75);
        }
        else if (this.type == "wendigoHead")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 784, 2075, 54, 75, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 75 * 1.1), 54 * 1.1, 75 * 1.1);
        }
        else if (this.type == "foxMeat")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 26, 670, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 0.9), 20 * 0.9, 18 * 0.9);
        }
        else if (this.type == "arcticFoxMeat")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 54, 670, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawArcticFoxFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 53, 647, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawFoxFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 25, 647, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 0.9), 20 * 0.9, 18 * 0.9);
        }
        else if (this.type == "foxPelt")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 2, 618, 86, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 86 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 86 * 1, 27 * 1);
        }
        else if (this.type == "arcticFoxPelt")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 10, 691, 86, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 86 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 86 * 1, 27 * 1);
        }
        else if (this.type == "cursedBoneMeal")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 270, 17, 22, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.4), 22 * 1.4, 16 * 1.4);
        }
        else if (this.type == "corpseGolemHeart")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 214, 14, 29, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.06), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.06), 29 * 1.06, 31 * 1.06);
        }
        else if (this.type == "horseArmourRemover")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 587, 35, 12, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 12 * 1, 16 * 1);
        }
        else if (this.type == "lichRobe")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 47, 675, 93, 127, X - this.X + (1/2 * CCC.width) - (1/2 * 93 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 127 * 0.8), 93 * 0.8, 127 * 0.8);
        }
        else if (this.type == "floortrap")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 257, 1, 38, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.5), 38 * 1.5, 35 * 1.5);
        }
        else if (this.type == "firetrap" || this.type == "firetrapEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 212, 88, 17, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 2), 17 * 2, 19 * 2);
        }
        else if (this.type == "salaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 339, 43, 10, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.25), 10 * 1.25, 14 * 1.25);
        }
        else if (this.type == "heyolBerries")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 367, 20, 10, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2), 10 * 2, 14 * 2);
        }
        else if (this.type == "steelHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 209, 1042, 176, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 176 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 61 * 1), 176 * 1, 61 * 1);
        }
        else if (this.type == "nechroviteHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 221, 1180, 148, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 148 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 61 * 1), 148 * 1, 61 * 1);
        }
        else if (this.type == "krovhyuzkaHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 1319, 410, 159, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 159 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1), 159 * 1, 78 * 1);
        }
        else if (this.type == "vardanianHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 542, 406, 159, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 159 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1), 159 * 1, 78 * 1);
        }
        else if (this.type == "blueHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 727, 410, 159, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 159 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1), 159 * 1, 78 * 1);
        }
        else if (this.type == "altezorHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 915, 406, 159, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 159 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1), 159 * 1, 78 * 1);
        }
        else if (this.type == "nirwadenHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 1108, 408, 159, 78, X - this.X + (1/2 * CCC.width) - (1/2 * 159 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 78 * 1), 159 * 1, 78 * 1);
        }
        else if (this.type == "ghoulHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 31, 851, 196, 75, X - this.X + (1/2 * CCC.width) - (1/2 * 196 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 75 * 1), 196 * 1, 75 * 1);
        }
        else if (this.type == "bovodo")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 846, 436, 20, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 20 * 1.5, 19 * 1.5);
        }
        else if (this.type == "smokedBovodo")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 913, 433, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "bovodoWedge")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 888, 433, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "smokedBovodoWedge")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 957, 431, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "vardanianPieDough")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 934, 451, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "uncookedChyoulBerryPie")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 916, 452, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "chyoulBerryPie")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 898, 453, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "chyoulBerryPieSlice")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 882, 458, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "bovineButter")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 867, 456, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "rawVenison")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 564, 496, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "venison")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 545, 497, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "smokedVenison")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 527, 498, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "elkAntler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 490, 508, 36, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.5), 36 * 1.5, 35 * 1.5);
        }
        else if (this.type == "elkPelt")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 534, 524, 41, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.5), 41 * 1.5, 22 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMushroomStrogonoff")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 474, 583, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBorshtSoup")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 540, 554, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfCabbageSoup")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 541, 580, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfCreamyVenisonStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 609, 554, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineAndPierogiStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 609, 580, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineStrogonoff")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 610, 611, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfTagglerStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 671, 581, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMulstishStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 671, 608, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfToadStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 740, 581, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfSlowBraisedKoivaya")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 741, 609, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "rawSkig")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 572, 117, 48, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1), 48 * 1, 23 * 1);
        }
        else if (this.type == "skig")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 720, 206, 48, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1), 48 * 1, 23 * 1);
        }
        else if (this.type == "rawMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 708, 118, 59, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 59 * 1, 30 * 1);
        }
        else if (this.type == "slicedRawMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 708, 188, 27, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "slicedMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 737, 187, 27, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "slicedSmokedMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 679, 190, 27, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "rawApoi")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 626, 148, 68, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 68 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1), 68 * 1, 42 * 1);
        }
        else if (this.type == "apoi")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 730, 161, 29, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 29 * 1, 21 * 1);
        }
        else if (this.type == "smokedApoi")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 696, 159, 29, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 29 * 1, 21 * 1);
        }
        else if (this.type == "rawTaggler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 631, 118, 60, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 60 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1), 60 * 1, 28 * 1);
        }
        else if (this.type == "taggler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 720, 229, 53, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1), 53 * 1, 19 * 1);
        }
        else if (this.type == "smokedTaggler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 721, 248, 53, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1), 53 * 1, 19 * 1);
        }
        else if (this.type == "rawCrilp")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 567, 152, 50, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 50 * 1, 34 * 1);
        }
        else if (this.type == "crilp")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 772, 230, 21, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 21 * 1, 36 * 1);
        }
        else if (this.type == "smokedCrilp")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 775, 193, 21, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 21 * 1, 36 * 1);
        }
        else if (this.type == "kerPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 613, 489, 68, 108, X - this.X + (1/2 * CCC.width) - (1/2 * 68 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 108 * 1), 68 * 1, 108 * 1);
        }
        else if (this.type == "eliteNechrovitePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 422, 485, 65, 115, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 115 * 1), 65 * 1, 115 * 1);
        }
        else if (this.type == "eliteNechrovitePlateArmourPlumed")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 517, 475, 65, 123, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 123 * 1), 65 * 1, 123 * 1);
        }
        else if (this.type == "rawRibbackFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 797, 35, 43, 51, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 843, 34, 43, 51, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackSpinneret")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 900, 31, 43, 51, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackFangs")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 955, 25, 43, 51, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "fegilPelt")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 14, 981, 30, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.1), 30 * 1.1, 10 * 1.1);
        }
        else if (this.type == "palinsydaTongues")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1, 163, 22, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.8), 22 * 1.8, 19 * 1.8);
        }
        else if (this.type == "palinsydaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1207, 477, 42, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 42 * 1, 25 * 1);
        }
        else if (this.type == "fegilRegurgitation")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 734, 876, 50, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 50 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 0.8), 50 * 0.8, 41 * 0.8);
        }
        else if (this.type == "mornidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 1024, 616, 41, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 41 * 1, 30 * 1);
        }
        else if (this.type == "borgalLeg")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 6, 593, 63, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 63 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.6), 63 * 1.6, 24 * 1.6);
        }
        else if (this.type == "borgalHead")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 32, 447, 31, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 2.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 2.5), 31 * 2.5, 27 * 2.5);
        }
        else if (this.type == "borgalEye")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 21, 570, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 22 * 1, 20 * 1);
        }
        else if (this.type == "borgalPelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 20, 490, 58, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1), 58 * 1, 37 * 1);
        }
        else if (this.type == "rawBorgalFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 10, 626, 15, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1), 15 * 1, 12 * 1);
        }
        else if (this.type == "borgalMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 28, 626, 15, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1), 15 * 1, 12 * 1);
        }
        else if (this.type == "cirmusidicCompound")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 649, 93, 33, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 0.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 0.85), 33 * 0.85, 25 * 0.85);
        }
        else if (this.type == "throwingStar")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 207, 402, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.4), 9 * 1.4, 9 * 1.4);
        }
        else if (this.type == "vardanianThrowingSpear")
        {
            XXX.beginPath();
            XXX.drawImage(mimi, 358, 324, 47, 90, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 90 * 1), 47 * 1, 90 * 1);
        }
        else if (this.type == "mustard")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 840, 115, 14, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1), 14 * 1, 13 * 1);
        }
        else if (this.type == "sauerkraut")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 838, 95, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawHoffalgreSausageChain")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 869, 87, 54, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 54 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 1), 54 * 1, 44 * 1);
        }
        else if (this.type == "hoffalgreRoast")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 921, 11, 70, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 70 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 1), 70 * 1, 45 * 1);
        }
        else if (this.type == "rawGulb")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 467, 14, 64, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "gulbFillet")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 539, 15, 64, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawHob")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 465, 68, 64, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "hob")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 535, 66, 64, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawTilmuk")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 328, 64, 64, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "tilmuk")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 386, 64, 64, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "palggaFlowers")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 250, 14, 64, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawCres")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 620, 15, 65, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 65 * 1, 30 * 1);
        }
        else if (this.type == "cresFillet")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 687, 16, 65, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 65 * 1, 30 * 1);
        }
        else if (this.type == "desertPoppySeedMash")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 512, 151, 47, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 47 * 1, 30 * 1);
        }
        else if (this.type == "opium")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 598, 152, 42, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "gulbPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 870, 133, 42, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "sausageAndGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 954, 135, 42, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "cresAndGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 914, 132, 42, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "rawHoffalgreSausage")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 841, 58, 42, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "hoffalgreSausage")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 882, 58, 42, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "sausageCombo")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 925, 61, 42, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "hetlaukWormPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 842, 135, 29, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardSeeds")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 810, 155, 29, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardSeedPods")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 780, 155, 29, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 744, 181, 29, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "wiltedMustardGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 773, 181, 29, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "hetlaukWorm")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 889, 18, 29, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "rawHetlaukWorm" || this.type == "sewerHetlaukWorm")
        {
            if (this.turn <= 2)
            {
                XXX.drawImage(floras, 852, 16, 29, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else if (this.turn <= 4)
            {
                XXX.drawImage(floras, 808, 14, 29, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else if (this.turn <= 6)
            {
                XXX.drawImage(floras, 764, 16, 29, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else
            {
                XXX.drawImage(floras, 808, 14, 29, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 29 * 1, 31 * 1);
                this.turn = 0;
            }
            this.turn += 0.4;
        }
        else if (this.type == "desertPoppyFlower")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 967, 401, 29, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "desertPoppyPods")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 966, 438, 29, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 29 * 1, 31 * 1);
        }
        else if (this.type == "falloryFlower")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 268, 63, 29, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 29 * 1, 36 * 1);
        }
        else if (this.type == "bleedingHeartBranch")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 651, 147, 37, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40 * 0.8), 37 * 0.8, 40 * 0.8);
        }
        else if (this.type == "marigoldFlower")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 403, 141, 28, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 0.6), 28 * 0.6, 44 * 0.6);
        }
        else if (this.type == "aberdomMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 882, 174, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 18 * 1, 18 * 1);
        }
        else if (this.type == "beunumMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 974, 235, 18, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 0.8), 18 * 0.8, 22 * 0.8);
        }
        else if (this.type == "ciprinMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 973, 202, 22, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 0.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 0.7), 22 * 0.7, 31 * 0.7);
        }
        else if (this.type == "thorn")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 338, 12, 112, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 112 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1.1), 112 * 1.1, 33 * 1.1);
        }
        else if (this.type == "alitkaArmour")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 783, 57, 43, 86, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 86 * 1.4), 43 * 1.4, 86 * 1.4);
        }
        else if (this.type == "thenganBascinetArmour")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 728, 57, 43, 86, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 86 * 1.4), 43 * 1.4, 86 * 1.4);
        }
        else if (this.type == "hydraHead")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 20, 361, 45, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "hydraHeart")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 104, 364, 45, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "roastedHydraHeart")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 66, 363, 45, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "smokedHydraHeart")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 143, 364, 45, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "wheat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 518, 303, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatFlour")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 491, 302, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatDough")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 495, 274, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 521, 277, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "butteredWheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 466, 289, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "velWheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 438, 288, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "borshtWheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 411, 288, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "juniperBerries")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 251, 371, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1), 13 * 1, 12 * 1);
        }
        else if (this.type == "apple")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 5, 542, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 18 * 1, 20 * 1);
        }
        else if (this.type == "glassBottleOfGin")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 315, 380, 8, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 2), 8 * 2, 8 * 2);
        }
        else if (this.type == "glassBottleOfCider")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 304, 410, 8, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 2), 8 * 2, 8 * 2);
        }
        else if (this.type == "wheatBeer")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 280, 385, 13, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 13 * 1.5, 10 * 1.5);
        }
        else if (this.type == "gin")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 267, 385, 13, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 13 * 1.5, 10 * 1.5);
        }
        else if (this.type == "cider")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 268, 417, 13, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 13 * 1.5, 10 * 1.5);
        }
        else if (this.type == "serratedNechroviteGreatBlade")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 353, 140, 95, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 95 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 95 * 1, 25 * 1);
        }
        else if (this.type == "vardanSword")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 265, 113, 66, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 66 * 1, 20 * 1);
        }
        else if (this.type == "vardanGreatSword")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 258, 157, 97, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 97 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1), 97 * 1, 22 * 1);
        }
        else if (this.type == "vardanDagger")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 451, 140, 43, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 43 * 1, 16 * 1);
        }
        else if (this.type == "silverDagger")
        {
            XXX.beginPath();
            XXX.drawImage(folw, 158, 246, 34, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 34 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 34 * 1, 39 * 1);
        }
        else if (this.type == "shortSword")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 493, 9, 58, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 57 * 1), 58 * 1, 57 * 1);
        }
        else if (this.type == "zetianWarPick")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1550, 706, 48, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 1), 48 * 1, 44 * 1);
        }
        else if (this.type == "zetianBlowgun")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 446, 90, 74, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 74 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1), 74 * 1, 50 * 1);
        }
        else if (this.type == "zetianBlowdart")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 525, 114, 12, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 12 * 1, 27 * 1);
        }
        else if (this.type == "zetianRattlerBlowdart" || this.type == "zetianRattlerBlowdartThick")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 542, 114, 12, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 12 * 1, 27 * 1);
        }
        else if (this.type == "longHammer")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 540, 203, 44, 83, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 83 * 1), 44 * 1, 83 * 1);
        }
        else if (this.type == "cephrianFlail")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 532, 301, 47, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 47 * 1, 38 * 1);
        }
        else if (this.type == "masterKey" || this.type == "holuimBankKey")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 760, 12, 22, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1), 22 * 1, 23 * 1);
        }
        else if (this.type == "masterKeyring")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 755, 31, 33, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 33 * 1, 39 * 1);
        }
        else if (this.type == "lockpick")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 0, 30, 17, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 17 * 1, 29 * 1);
        }
        else if (this.type == "brokenLockpick")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 0, 60, 24, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 24 * 1, 29 * 1);
        }
        else if (this.type == "garldsMemories" || this.type == "memory")
        {
            this.turn += 1;
            if (this.turn <= 3)
            {
                XXX.drawImage(cypher, 764, 184, 13, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 6)
            {
                XXX.drawImage(cypher, 764, 197, 13, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 9)
            {
                XXX.drawImage(cypher, 764, 210, 13, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 12)
            {
                XXX.drawImage(cypher, 764, 224, 13, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 15)
            {
                XXX.drawImage(cypher, 764, 237, 13, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else
            {
                this.turn = 0;
                XXX.drawImage(cypher, 764, 210, 13, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
        }
        else if (this.type == "magusRobesF")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 278, 628, 73, 133, X - this.X + (1/2 * CCC.width) - (1/2 * 73 * 0.94), Y - this.Y + (1/2 * CCC.height) - (1/2 * 133 * 0.94), 73 * 0.94, 133 * 0.94);
        }
        else if (this.type == "magusRobesM")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 739, 863, 60, 133, X - this.X + (1/2 * CCC.width) - (1/2 * 60 * 0.94), Y - this.Y + (1/2 * CCC.height) - (1/2 * 133 * 0.94), 60 * 0.94, 133 * 0.94);
        }
        else if (this.type == "greatPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 315, 192, 59, 118, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 0.93), Y - this.Y + (1/2 * CCC.height) - (1/2 * 118 * 0.93), 59 * 0.93, 118 * 0.93);
        }
        else if (this.type == "wolthgarPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 464, 176, 65, 135, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 0.93), Y - this.Y + (1/2 * CCC.height) - (1/2 * 135 * 0.93), 65 * 0.93, 135 * 0.93);
        }
        else if (this.type == "mimicHead")
        {
            XXX.beginPath();
            XXX.drawImage(mimi, 219, 309, 47, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 0.6), 47 * 0.6, 41 * 0.6);
        }
        else if (this.type == "mimicFilament")
        {
            XXX.beginPath();
            XXX.drawImage(mimi, 261, 311, 41, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 0.6), 41 * 0.6, 41 * 0.6);
        }
        else if (this.type == "vreckFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 59, 835, 52, 101, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 101 * 1.05), 52 * 1.05, 101 * 1.05);
        }
        else if (this.type == "ghoulMercArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 933, 209, 55, 101, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 101 * 1.05), 55 * 1.05, 101 * 1.05);
        }
        else if (this.type == "laicaumBranch")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 929, 55, 37, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 0.8), 37 * 0.8, 34 * 0.8);
        }
        else if (this.type == "laicaumBerries")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 898, 66, 26, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 26 * 1, 21 * 1);
        }
        else if (this.type == "vardanianTent")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1046, 109, 38, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.8), 38 * 1.8, 31 * 1.8);
        }
        else if (this.type == "mekleFrond")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 958, 6, 59, 47, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 0.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 47 * 0.25), 59 * 0.25, 47 * 0.25);
        }
        else if (this.type == "danzigFrond")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 764, 163, 33, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1), 33 * 1, 32 * 1);
        }
        else if (this.type == "rawVreckFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1021, 352, 30, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckMeat")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1055, 352, 30, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckTail")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1053, 273, 30, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckPelt")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1040, 308, 49, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.1), 49 * 1.1, 30 * 1.1);
        }
        else if (this.type == "nechroviteOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1591, 525, 27, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1), 27 * 1, 32 * 1);
        }
        else if (this.type == "nechrovite")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1492, 563, 33, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 33 * 1, 18 * 1);
        }
        else if (this.type == "fineVardanianPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 72, 249, 49, 98, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 98 * 1.15), 49 * 1.15, 98 * 1.15);
        }
        else if (this.type == "fineNechrovitePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 135, 249, 49, 98, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 98 * 1.15), 49 * 1.15, 98 * 1.15);
        }
        else if (this.type == "mesekScalp")
        {
            XXX.beginPath();
            XXX.fillStyle = "#BF0000";
            XXX.strokeStyle = "#901900";
            XXX.arc(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height), 10, 0, Math.PI * 2);
            XXX.fill();
            XXX.stroke();
        }
        else if (this.type == "korskBeetleStinkGland")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 311, 4, 38, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "rawKorskBeetleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 237, 5, 38, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "korskBeetleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 275, 5, 38, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "silterEggs")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 550, 277, 38, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "friedSilterEggs")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 549, 245, 38, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "korceidaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 239, 91, 31, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "korceidaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 275, 90, 31, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "laumin")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 313, 91, 31, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "xormidRemainsLarge")
        {
            XXX.beginPath();
            XXX.drawImage(blac, 279, 11, 41, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1.3), 41 * 1.3, 36 * 1.3);
        }
        else if (this.type == "xormidRemainsSmall")
        {
            XXX.beginPath();
            XXX.drawImage(blac, 279, 11, 41, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 41 * 1, 36 * 1);
        }
        else if (this.type == "rawSilterFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 313, 139, 23, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 23 * 1, 18 * 1);
        }
        else if (this.type == "silterMeat")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 314, 163, 23, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 23 * 1, 18 * 1);
        }
        else if (this.type == "sciltArm")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 241, 182, 58, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 58 * 1, 35 * 1);
        }
        else if (this.type == "eyewortLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 555, 474, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.4), 25 * 1.4, 24 * 1.4);
        }
        else if (this.type == "eyewortStalk")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 557, 338, 21, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.4), 21 * 1.4, 30 * 1.4);
        }
        else if (this.type == "brightStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1729, 525, 36, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 36 * 1, 29 * 1);
            if (timeOfDay != "Day" || player.underground == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 43, extraStops: true, GRD: 0.1, Alpha: 0.5, showMe: false});
            }
        }
        else if (this.type == "alemanWWI")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1023, 804, 56, 140, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 140 * 0.8), 56 * 0.8, 140 * 0.8);
        }
        else if (this.type == "hazmatMarkI")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 210, 812, 60, 132, X - this.X + (1/2 * CCC.width) - (1/2 * 60 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 132 * 0.9), 60 * 0.9, 132 * 0.9);
        }
        else if (this.type == "hazmatMarkII")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 270, 812, 60, 132, X - this.X + (1/2 * CCC.width) - (1/2 * 60 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 132 * 0.9), 60 * 0.9, 132 * 0.9);
        }
        else if (this.type == "ghoulPelt")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1006, 148, 78, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 78 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1), 78 * 1, 50 * 1);
        }
        else if (this.type == "rawGhoulFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 964, 161, 28, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 28 * 1, 26 * 1);
        }
        else if (this.type == "ghoulMeat")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 920, 161, 33, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 33 * 1, 26 * 1);
        }
        else if (this.type == "kozlyakMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 411, 559, 18, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 18 * 1, 16 * 1);
        }
        else if (this.type == "rawMudToad")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 945, 55, 44, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "mudToad")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 941, 100, 44, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "mudToadLeg")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 903, 102, 44, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "jinnDust")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 735, 595, 55, 67, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 67 * 1), 55 * 1, 67 * 1);
        }
        else if (this.type == "jinnCore")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 740, 483, 55, 67, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 67 * 1), 55 * 1, 67 * 1);
        }
        else if (this.type == "beholderTentacles")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 737, 550, 55, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 55 * 1, 39 * 1);
        }
        else if (this.type == "tinctureCup")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 610, 201, 13, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1), 13 * 1, 11 * 1);
        }
        else if (this.type == "cupOfFungicideTincture")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 610, 215, 13, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1), 13 * 1, 11 * 1);
        }
        else if (this.type == "cephrianTincturePot" || this.type == "cephrianTincturePotOfFungicideTincture" || this.type == "capturedJinn")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 595, 176, 42, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 42 * 1, 21 * 1);
        }
        else if (this.type == "humptyChalaza")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 657, 423, 41, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1), 41 * 1, 41 * 1);
        }
        else if (this.type == "crilkFruit")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 773, 786, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "pyromothSilk")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 4, 401, 19, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 19 * 1, 38 * 1);
        }
        else if (this.type == "pyromothSilkweb")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 649, 582, 37, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 0.64), 37 * 0.64, 28 * 0.64);
        }
        else if (this.type == "fermentedBabosaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 346, 289, 28, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.55), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.55), 28 * 1.55, 21 * 1.55);
        }
        else if (this.type == "babosaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 346, 240, 28, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.45), 28 * 1.45, 21 * 1.45);
        }
        else if (this.type == "rawBabosaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 346, 222, 28, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.5), 28 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonja")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 658, 1116, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 687, 1116, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaBubble")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 708, 1116, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaSlice")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 726, 1116, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "greenDartFrogSkin")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 766, 1100, 21, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 21 * 1, 15 * 1);
        }
        else if (this.type == "orangeDartFrogSkin")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 745, 1116, 21, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 21 * 1, 15 * 1);
        }
        else if (this.type == "rawBoaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 28, 1251, 67, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 67 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 67 * 1, 33 * 1);
        }
        else if (this.type == "boaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 28, 1289, 67, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 67 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 67 * 1, 33 * 1);
        }
        else if (this.type == "driedPoegroonMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 476, 698, 55, 52, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 52 * 1), 55 * 1, 52 * 1);
        }
        else if (this.type == "poegroonMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 475, 748, 55, 52, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 52 * 1), 55 * 1, 52 * 1);
        }
        else if (this.type == "maleotMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 624, 714, 42, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1.2), 42 * 1.2, 42 * 1.2);
        }
        else if (this.type == "driedMaleotMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 623, 753, 42, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1.2), 42 * 1.2, 42 * 1.2);
        }
        else if (this.type == "iodFungi")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 330, 719, 58, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1), 58 * 1, 60 * 1);
        }
        else if (this.type == "fermentedIod")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 272, 721, 58, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1), 58 * 1, 60 * 1);
        }
        else if (this.type == "gribnoyMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 769, 752, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 25 * 1, 24 * 1);
        }
        else if (this.type == "roastedGribnoyMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 792, 753, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 25 * 1, 24 * 1);
        }
        else if (this.type == "ashaiPowder")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 13, 656, 32, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 32 * 1, 33 * 1);
        }
        else if (this.type == "ashai")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 9, 764, 32, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 2), 32 * 2, 33 * 2);
        }
        else if (this.type == "ashaiWood")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 15, 733, 23, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 2), 23 * 2, 22 * 2);
        }
        else if (this.type == "porstolBerries")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 602, 231, 14, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1), 14 * 1, 11 * 1);
        }
        else if (this.type == "decipulaHead")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 760, 585, 40, 43, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43 * 1), 40 * 1, 43 * 1);
        }
        else if (this.type == "athergmMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 442, 1, 22, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1), 22 * 1, 17 * 1);
        }
        else if (this.type == "driedAthergmMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 469, 0, 22, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1), 22 * 1, 17 * 1);
        }
        else if (this.type == "crenidRemains")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 223, 5, 36, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 0.6), 36 * 0.6, 31 * 0.6);
        }
        else if (this.type == "kigariiPelt")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 445, 17, 52, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1.3), 52 * 1.3, 26 * 1.3);
        }
        else if (this.type == "rawKigariiFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 362, 56, 26, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1.3), 26 * 1.3, 28 * 1.3);
        }
        else if (this.type == "kigariiRibs")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 388, 56, 26, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1.3), 26 * 1.3, 28 * 1.3);
        }
        else if (this.type == "jungleHunterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 604, 1061, 47, 92, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 92 * 1), 47 * 1, 92 * 1);
        }
        else if (this.type == "morshPuff")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 935, 824, 26, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 26 * 1, 25 * 1);
        }
        else if (this.type == "dalgerEgg")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 115, 113, 21, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1), 21 * 1, 23 * 1);
        }
        else if (this.type == "cookedDalgerEgg")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 120, 78, 33, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "rawDalgerFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 101, 299, 33, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "dalgerMeat")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 102, 326, 33, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "dalgerHide")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 38, 785, 115, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 115 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 1), 115 * 1, 46 * 1);
        }
        else if (this.type == "blackTrollPelt")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 937, 20, 43, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1.4), 43 * 1.4, 36 * 1.4);
        }
        else if (this.type == "blackTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 938, 96, 43, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1.3), 43 * 1.3, 36 * 1.3);
        }
        else if (this.type == "cruorccaNeedle")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 948, 874, 8, 4, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 4 * 1), 8 * 1, 4 * 1);
        }
        else if (this.type == "gorgonTail")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 787, 5, 36, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 1), 36 * 1, 46 * 1);
        }
        else if (this.type == "gorgonLeg")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 837, 13, 80, 110, X - this.X + (1/2 * CCC.width) - (1/2 * 80 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 110 * 1), 80 * 1, 110 * 1);
        }
        else if (this.type == "rawGorgonFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 376, 292, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 25 * 1, 14 * 1);
        }
        else if (this.type == "gorgonMeat")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 139, 109, 26, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1), 25 * 1, 14 * 1);
        }
        else if (this.type == "bahabLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 436, 733, 27, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 27 * 1, 30 * 1);
        }
        else if (this.type == "bahabPod")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 465, 737, 21, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 21 * 1, 30 * 1);
        }
        else if (this.type == "driedBahabPod")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 415, 734, 21, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1), 21 * 1, 30 * 1);
        }
        else if (this.type == "gojiiFlower")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 335, 753, 21, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 21 * 1, 25 * 1);
        }
        else if (this.type == "cerebrisMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 211, 678, 32, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 32 * 1, 34 * 1);
        }
        else if (this.type == "vardanianCoatOfPlates")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 544, 8, 103, 209, X - this.X + (1/2 * CCC.width) - (1/2 * 103 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 209 * 0.6), 103 * 0.6, 209 * 0.6);
        }
        else if (this.type == "vardanianAketon")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 654, 12, 105, 143, X - this.X + (1/2 * CCC.width) - (1/2 * 105 * 0.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 143 * 0.7), 105 * 0.7, 143 * 0.7);
        }
        else if (this.type == "vardanianSoldierOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 638, 151, 49, 104, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 104 * 1.05), 49 * 1.05, 104 * 1.05);
        }
        else if (this.type == "orgishEliteArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 238, 11, 105, 207, X - this.X + (1/2 * CCC.width) - (1/2 * 105 * 0.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 207 * 0.7), 105 * 0.7, 207 * 0.7);
        }
        else if (this.type == "orgishRoyalArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 394, 2, 104, 214, X - this.X + (1/2 * CCC.width) - (1/2 * 104 * 0.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 214 * 0.7), 104 * 0.7, 214 * 0.7);
        }
        else if (this.type == "araneaFang")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 19, 448, 19, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1), 19 * 1, 9 * 1);
        }
        else if (this.type == "viudaFang")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 389, 297, 12, 6, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 6 * 1), 12 * 1, 6 * 1);
        }
        else if (this.type == "viudaVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 376, 292, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1), 12 * 1, 13 * 1);
        }
        else if (this.type == "boreaLeg")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 2470, 11, 43, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55 * 1), 43 * 1, 55 * 1);
        }
        else if (this.type == "saliseaVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 417, 1287, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 17 * 1, 20 * 1);
        }
        else if (this.type == "saliseaFur")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 406, 1263, 40, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 40 * 1, 25 * 1);
        }
        else if (this.type == "saliseaLeather" || this.type == "treatedSaliseaHide")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 406, 1308, 40, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 40 * 1, 25 * 1);
        }
        else if (this.type == "zafBeetleWhiskers")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 571, 976, 25, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1), 25 * 1, 23 * 1);
        }
        else if (this.type == "zafBeetleFeeler")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 572, 1002, 23, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 23 * 1, 36 * 1);
        }
        else if (this.type == "zafBeetleShell")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 490, 985, 75, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 75 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 75 * 1, 38 * 1);
        }
        else if (this.type == "vardanianPriestRobes")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 19, 77, 59, 111, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 111 * 0.9), 59 * 0.9, 111 * 0.9);
        }
        else if (this.type == "saugRoot")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 414, 6, 45, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 45 * 1, 16 * 1);
        }
        else if (this.type == "roastedSaugRoot")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 490, 6, 45, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 45 * 1, 16 * 1);
        }
        else if (this.type == "roastedSaugRootHalf")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 529, 5, 45, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 45 * 1, 16 * 1);
        }
        else if (this.type == "koivayaPelt")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 298, 285, 41, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1.1), 41 * 1.1, 33 * 1.1);
        }
        else if (this.type == "rawKoivayaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 352, 293, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.1), 20 * 1.1, 21 * 1.1);
        }
        else if (this.type == "koivayaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 384, 292, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.1), 20 * 1.1, 21 * 1.1);
        }
        else if (this.type == "toadHide")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 469, 828, 67, 69, X - this.X + (1/2 * CCC.width) - (1/2 * 67 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 69 * 1), 67 * 1, 69 * 1);
        }
        else if (this.type == "rawToadFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 781, 582, 26, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "toadMeat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 816, 583, 26, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "smokedToadMeat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 780, 607, 26, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "vardanianRoyalAttireM")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 102, 81, 65, 113, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 113 * 1.1), 65 * 1.1, 113 * 1.1);
        }
        else if (this.type == "vardanianRoyalAttireF")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 219, 65, 76, 125, X - this.X + (1/2 * CCC.width) - (1/2 * 76 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 125 * 1), 76 * 1, 125 * 1);
        }
        else if (this.type == "vardanianCrossbow")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 301, 624, 25, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1.1), 25 * 1.1, 26 * 1.1);
        }
        else if (this.type == "ironBolt")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 291, 602, 22, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 1), 22 * 1, 8 * 1);
        }
        else if (this.type == "bovineMammaryGlands")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 368, 518, 26, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 0.9), 26 * 0.9, 23 * 0.9);
        }
        else if (this.type == "rawBovineRibs")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 462, 519, 26, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "smokedBovineRibs")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 402, 520, 26, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "bovineRibs")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 432, 520, 26, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "bovineHide" || this.type == "treatedBovineHide")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 464, 164, 36, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1.9), 36 * 1.9, 26 * 1.9);
        }
        else if (this.type == "tannedBovineHide")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 512, 163, 36, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1.8), 36 * 1.8, 26 * 1.8);
        }
        else if (this.type == "borsht")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 46, 91, 48, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "roastedBorsht")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 88, 91, 48, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "slicedBorsht")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 125, 93, 48, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "swampLily")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 7, 134, 48, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1.2), 48 * 1.2, 50 * 1.2);
        }
        else if (this.type == "cattail")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 57, 48, 33, 43, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43 * 1.25), 33 * 1.25, 43 * 1.25);
        }
        else if (this.type == "cabbage")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 81, 11, 14, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.5), 14 * 1.5, 14 * 1.5);
        }
        else if (this.type == "soakedMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 812, 201, 24, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 1.5), 24 * 1.5, 44 * 1.5);
        }
        else if (this.type == "theBloodyChalice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 11, 525, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.5), 15 * 1.5, 16 * 1.5);
        }
        else if (this.type == "bloodyChalice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 35, 525, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.5), 15 * 1.5, 16 * 1.5);
        }
        else if (this.type == "vardanianPot" || this.type == "vardanianPotOfWater" || this.type == "vardanianPotOfBovineMilk" || this.type == "vardanianPotOfWaantiMilk" || this.type == "vardanianPotOfNaapridMilk" || this.type == "vardanianPotOfSourCream" || this.type == "vardanianPotOfMandrake" || this.type == "vardanianPotOfMushroomStrogonoff" || this.type == "vardanianPotOfBorshtSoup" || this.type == "vardanianPotOfCabbageSoup" || this.type == "vardanianPotOfCreamyVenisonStew" || this.type == "vardanianPotOfBovineAndPierogiStew" || this.type == "vardanianPotOfBovineStrogonoff" || this.type == "vardanianPotOfTagglerStew" || this.type == "vardanianPotOfMulstishStew" || this.type == "vardanianPotOfToadStew" || this.type == "vardanianPotOfSlowBraisedKoivaya")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 612, 527, 27, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.5), 27 * 1.5, 19 * 1.5);
        }
        else if (this.type == "vardanianBowl")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 477, 558, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 18 * 1.5, 18 * 1.5);
        }
        else if (this.type == "vardanianBowlOfWater")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 545, 613, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 18 * 1.5, 18 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineMilk" || this.type == "vardanianBowlOfWaantiMilk" || this.type == "vardanianBowlOfNaapridMilk")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 478, 615, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 18 * 1.5, 18 * 1.5);
        }
        else if (this.type == "vardanianBowlOfSourCream")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 907, 482, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.5), 17 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 857, 178, 30, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.5), 30 * 1.5, 32 * 1.5);
        }
        else if (this.type == "bucketOfBovineMilk")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 331, 389, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "bucketOfChyoulJuice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 389, 420, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "bucketOfCranberryJuice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 405, 420, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "bucketOfMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 353, 426, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "kellishClayPotOfBovineMilk")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 353, 365, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "kellishClayPotOfMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 330, 416, 18, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.7), 18 * 1.7, 31 * 1.7);
        }
        else if (this.type == "chyoulJuicePintGlass" || this.type == "chyoulWine" )
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 441, 420, 13, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 13 * 1.5, 10 * 1.5);
        }
        else if (this.type == "cranberryJuicePintGlass" || this.type == "cranberryWine" )
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 376, 385, 13, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 13 * 1.5, 10 * 1.5);
        }
        else if (this.type == "glassBottleOfChyoulWine")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 476, 413, 8, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 2), 8 * 2, 9 * 2);
        }
        else if (this.type == "glassBottleOfCranberryWine")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 411, 378, 8, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 2), 8 * 2, 9 * 2);
        }
        else if (this.type == "cranberries")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 781, 115, 15, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.2), 15 * 1.2, 13 * 1.2);
        }
        else if (this.type == "chyoulBerries")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 816, 169, 15, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 15 * 1.5, 13 * 1.5);
        }
        else if (this.type == "shears")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 855, 250, 32, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 32 * 1, 31 * 1);
        }
        else if (this.type == "jesterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 902, 632, 58, 98, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 98 * 1.2), 58 * 1.2, 98 * 1.2);
        }
        else if (this.type == "vardanianNobleOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 1073, 629, 58, 98, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 98 * 1.25), 58 * 1.25, 98 * 1.25);
        }
        else if (this.type == "vardanianRoyalDress")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 1014, 628, 58, 98, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 98 * 1.15), 58 * 1.15, 98 * 1.15);
        }
        else if (this.type == "jesterShoes")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 830, 697, 43, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1.3), 43 * 1.3, 33 * 1.3);
        }
        else if (this.type == "vardanWearM")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 803, 328, 49, 89, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 89 * 1.2), 49 * 1.2, 89 * 1.2);
        }
        else if (this.type == "vardanWearF")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 854, 331, 49, 89, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 89 * 1.2), 49 * 1.2, 89 * 1.2);
        }
        else if (this.type == "vardanOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 948, 331, 49, 89, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 89 * 1.25), 49 * 1.25, 89 * 1.25);
        }
        else if (this.type == "vardanOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 903, 331, 49, 89, X - this.X + (1/2 * CCC.width) - (1/2 * 49 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 89 * 1.2), 49 * 1.2, 89 * 1.2);
        }
        else if (this.type == "hideBoots")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 952, 226, 31, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.4), 31 * 1.4, 35 * 1.4);
        }
        else if (this.type == "elkBoots")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 901, 226, 45, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.3), 45 * 1.3, 35 * 1.3);
        }
        else if (this.type == "elkGloves")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 942, 259, 45, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.2), 45 * 1.2, 35 * 1.2);
        }
        else if (this.type == "hideGloves")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 902, 259, 45, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.2), 45 * 1.2, 35 * 1.2);
        }
        else if (this.type == "silverStake")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 301, 26, 18, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 18 * 1, 33 * 1);
        }
        else if (this.type == "rawCheshireFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 460, 534, 31, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "cheshireMeat")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 428, 532, 31, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "cheshireTongue")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 491, 534, 31, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "batWing")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 666, 9, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1), 17 * 1, 13 * 1);
        }
        else if (this.type == "cheshirePelt")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 530, 538, 43, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 43 * 1, 36 * 1);
        }
        else if (this.type == "ameloyPerfume" || this.type == "muonPerfume" || this.type == "poegroonOil")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1735, 201, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 10 * 1, 15 * 1);
        }
        else if (this.type == "thadineBranch")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 101, 106, 68, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 68 * 0.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70 * 0.4), 68 * 0.4, 70 * 0.4);
        }
        else if (this.type == "ameloyFlower")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 178, 9, 82, 87, X - this.X + (1/2 * CCC.width) - (1/2 * 82 * 0.19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 87 * 0.19), 82 * 0.19, 87 * 0.19);
        }
        else if (this.type == "thegolThornSml")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 424, 9, 43, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 57 * 1), 43 * 1, 57 * 1);
        }
        else if (this.type == "thegolThornLrg")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 424, 9, 43, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 57 * 1.17), 43 * 1.17, 57 * 1.17);
        }
        else if (this.type == "varonoiFeather")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 244, 552, 53, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 0.6), 53 * 0.6, 26 * 0.6);
        }
        else if (this.type == "kerShell")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 686, 25, 40, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1), 40 * 1, 41 * 1);
        }
        else if (this.type == "kerClaw")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 586, 21, 64, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 64 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1), 64 * 1, 42 * 1);
        }
        else if (this.type == "nirwadenSabreAndShield")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 376, 249, 48, 66, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 66 * 1), 48 * 1, 66 * 1);
        }
        else if (this.type == "silkAndDagger")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 169, 88, 28, 53, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 53 * 1), 28 * 1, 53 * 1);
        }
        else if (this.type == "chupacabrasHead")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 224, 738, 65, 63, X - this.X + (1/2 * CCC.width) - (1/2 * 65 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 63 * 1), 65 * 1, 63 * 1);
        }
        else if (this.type == "chupacabrasPelt")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 170, 809, 149, 67, X - this.X + (1/2 * CCC.width) - (1/2 * 149 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 67 * 1), 149 * 1, 67 * 1);
        }
        else if (this.type == "changelingSkull")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 157, 673, 21, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "changelingFur")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 126, 715, 21, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "changelingHeart")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 152, 716, 21, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "wobeaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 164, 9, 14, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 14 * 2, 13 * 2);
        }
        else if (this.type == "wobeaSlice")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 188, 11, 14, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 14 * 2, 13 * 2);
        }
        else if (this.type == "wobeaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 53, 5, 28, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 28 * 2, 13 * 2);
        }
        else if (this.type == "wobeaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 208, 8, 14, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 21 * 2, 13 * 2);
        }
        else if (this.type == "wobeaNeedles")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 49, 63, 24, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 2), 24 * 2, 25 * 2);
        }
        else if (this.type == "orgishClothing")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 121, 494, 57, 117, X - this.X + (1/2 * CCC.width) - (1/2 * 57 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 117 * 1), 57 * 1, 117 * 1);
        }
        else if (this.type == "matadorOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 93, 10, 59, 130, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 130 * 1), 59 * 1, 130 * 1);
        }
        else if (this.type == "boarArmour")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 41, 635, 68, 120, X - this.X + (1/2 * CCC.width) - (1/2 * 68 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 120 * 0.9), 68 * 0.9, 120 * 0.9);
        }
        else if (this.type == "barracoPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 244, 238, 91, 123, X - this.X + (1/2 * CCC.width) - (1/2 * 91 * 0.95), Y - this.Y + (1/2 * CCC.height) - (1/2 * 123 * 0.95), 91 * 0.95, 123 * 0.95);
        }
        else if (this.type == "sickle")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 64, 814, 30, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1.35), 30 * 1.35, 39 * 1.35);
        }
        else if (this.type == "rose")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 717, 530, 33, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "roseBoquet")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 684, 527, 33, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "darkRoseBoquet")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 685, 580, 33, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "darkRose")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 718, 583, 33, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "orangeStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 611, 681, 22, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "yellowStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 558, 682, 22, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "peachStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 584, 682, 22, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "blueStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 636, 683, 22, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "boggartSpine")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 410, 978, 51, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 0.8), 51 * 0.8, 45 * 0.8);
        }
        else if (this.type == "assassinWrappings")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 134, 791, 52, 96, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 96 * 1.2), 52 * 1.2, 96 * 1.2);
        }
        else if (this.type == "aldrekiiHijab")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 676, 1077, 38, 100, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 100 * 1.25), 38 * 1.25, 100 * 1.25);
        }
        else if (this.type == "aldrekiiTurbanRed")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 725, 1074, 38, 100, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 100 * 1.25), 38 * 1.25, 100 * 1.25);
        }
        else if (this.type == "aldrekiiTurbanPurple")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 735, 792, 38, 100, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 100 * 1.25), 38 * 1.25, 100 * 1.25);
        }
        else if (this.type == "hops")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 262, 26, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.25), 15 * 1.25, 15 * 1.25);
        }
        else if (this.type == "rawBoarChunks")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 702, 1835, 53, 51, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51 * 1), 53 * 1, 51 * 1);
        }
        else if (this.type == "boarChunks")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 701, 1886, 53, 51, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51 * 1), 53 * 1, 51 * 1);
        }
        else if (this.type == "porkAndHalgom")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 758, 1869, 35, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "iemaPork")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 759, 1902, 35, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "garlicTialoPork")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 700, 1954, 35, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "rawBoarChunksSmall")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 751, 1947, 27, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 27 * 1, 26 * 1);
        }
        else if (this.type == "boarChunksSmall")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 750, 1972, 27, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 27 * 1, 26 * 1);
        }
        else if (this.type == "searedFalder")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 664, 1981, 20, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1), 20 * 1, 19 * 1);
        }
        else if (this.type == "searedSalmon")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 634, 1979, 20, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1), 20 * 1, 19 * 1);
        }
        else if (this.type == "molteHide")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 489, 19, 48, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 48 * 2 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 2 * 1.25), 48 * 2 * 1.25, 29 * 2 * 1.25);
        }
        else if (this.type == "molteHead")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 508, 110, 24, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 2 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 2 * 1.2), 24 * 2 * 1.2, 24 * 2 * 1.2);
        }
        else if (this.type == "moltePaw")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 498, 51, 38, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 2 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2 * 1.2), 38 * 2 * 1.2, 17 * 2 * 1.2);
        }
        else if (this.type == "molteMeat")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 513, 154, 25, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 2 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2 * 1.2), 25 * 2 * 1.2, 17 * 2 * 1.2);
        }
        else if (this.type == "rawMolteFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 514, 138, 25, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 2 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2 * 1.2), 25 * 2 * 1.2, 17 * 2 * 1.2);
        }
        else if (this.type == "spade")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 573, 5, 52, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1), 52 * 1, 60 * 1);
        }
        else if (this.type == "sprite")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 2657, 21, 26, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1), 26 * 1, 22 * 1);
        }
        else if (this.type == "gargoyleHeart")
        {
            XXX.beginPath();
            XXX.drawImage(garg, 826, 414, 35, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1), 35 * 1, 36 * 1);
        }
        else if (this.type == "greyTrollFur")
        {
            XXX.beginPath();
            XXX.drawImage(garg, 848, 1745, 109, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 109 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80 * 1), 109 * 1, 80 * 1);
        }
        else if (this.type == "rawIemaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 585, 1981, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "rawChonaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 497, 1983, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "rawPolyapaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 538, 1982, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "iemaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 568, 1981, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "chonaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 481, 1982, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "polyapaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 522, 1983, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "mrbTacticalArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 102, 2, 83, 170, X - this.X + (1/2 * CCC.width) - (1/2 * 83 * 0.67), Y - this.Y + (1/2 * CCC.height) - (1/2 * 170 * 0.67), 83 * 0.67, 170 * 0.67);
        }
        else if (this.type == "doctorOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 738, 514, 53, 116, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 116 * 0.9), 53 * 0.9, 116 * 0.9);
        }
        else if (this.type == "vardanianHalberd")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(0.55);
            XXX.drawImage(gent, 622, 1823, 39, 151, 0 - (1/2 * 39 * 1), 0 - (1/2 * 151 * 1), 39 * 1, 151 * 1);
            XXX.restore();
        }
        else if (this.type == "windArrow")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 571, 1873, 31, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1), 31 * 1, 10 * 1);
        }
        else if (this.type == "halgomMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 454, 1903, 29, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 29 * 1, 29 * 1);
        }
        else if (this.type == "roastedHalgomMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 418, 1902, 29, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 29 * 1, 29 * 1);
        }
        else if (this.type == "tialoFrond")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 382, 1903, 21, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "steamedTialo")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 758, 1842, 27, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1), 27 * 1, 24 * 1);
        }
        else if (this.type == "iemaBerries")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 471, 1949, 22, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1), 22 * 1, 25 * 1);
        }
        else if (this.type == "erguerFlower")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 557, 1912, 21, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "erguerLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 585, 1916, 21, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "erguerPaste")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 586, 1945, 21, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "bucketOfErguerPaste")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 494, 1877, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 15 * 2, 15 * 2);
        }
        else if (this.type == "erguerWine")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 532, 1873, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.5), 15 * 1.5, 15 * 1.5);
        }
        else if (this.type == "glassBottleOfErguerWine")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 474, 1870, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 15 * 2, 15 * 2);
        }
        else if (this.type == "kolumPowder")
        {
            XXX.beginPath();
            XXX.drawImage(kolumIMG, 0, 0, 28, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 0.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 0.5), 28 * 0.5, 30 * 0.5);
        }
        else if (this.type == "vardanianPlateArmour" || this.type == "vardanianPlateArmourBlackPlume" || this.type == "vardanianPlateArmourRedPlume")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 552, 268, 71, 123, X - this.X + (1/2 * CCC.width) - (1/2 * 71 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 123 * 0.8), 71 * 1.2, 123 * 0.8);
        }
        else if (this.type == "nechrovitePlateArmour" || this.type == "nechrovitePlateArmourBlackPlume" || this.type == "nechrovitePlateArmourRedPlume")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 624, 267, 71, 123, X - this.X + (1/2 * CCC.width) - (1/2 * 71 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 123 * 0.8), 71 * 1.2, 123 * 0.8);
        }
        else if (this.type == "rawGhoulFlyStomach")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 482, 160, 34, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 34 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "brittleGhoulFlyStomach")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 434, 163, 34, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 34 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "ghoulFlyPowder")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 355, 165, 34, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 34 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "ghoulFlyWings")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 271, 164, 44, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1.1), 44 * 1.1, 34 * 1.1);
        }
        else if (this.type == "copperOre")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 930, 2193, 21, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 0.8), 21 * 0.8, 28 * 0.8);
        }
        else if (this.type == "copper")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 873, 2190, 37, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 0.68), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 0.68), 37 * 0.68, 34 * 0.68);
        }
        else if (this.type == "copperWire")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 893, 2240, 47, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 0.6), 47 * 0.6, 22 * 0.6);
        }
        else if (this.type == "copperDust")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 926, 2270, 41, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 0.69), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 0.69), 41 * 0.69, 39 * 0.69);
        }
        else if (this.type == "alcaStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1634, 467, 28, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 28 * 1, 26 * 1);
        }
        else if (this.type == "spiritTalisman")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 168, 3371, 61, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 61 * 0.55), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55 * 0.55), 61 * 0.55, 55 * 0.55);
        }
        else if (this.type == "engineerOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 901, 2388, 90, 133, X - this.X + (1/2 * CCC.width) - (1/2 * 90 * 0.76), Y - this.Y + (1/2 * CCC.height) - (1/2 * 133 * 0.76), 90 * 0.76, 133 * 0.76);
        }
        else if (this.type == "naapricha")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 1212, 2997, 20, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.15), 20 * 1.15, 17 * 1.15);
        }
        else if (this.type == "naaprichaWedge")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 1189, 2997, 24, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.15), 24 * 1.15, 12 * 1.15);
        }
        else if (this.type == "garlic")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 874, 2274, 25, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 0.27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 0.27), 25 * 0.27, 28 * 0.27);
        }
        else if (this.type == "chonaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 726, 2556, 16, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 16 * 1, 15 * 1);
        }
        else if (this.type == "polyapaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 748, 2553, 15, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1), 15 * 1, 17 * 1);
        }
        else if (this.type == "nirwadenLance")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 263, 532, 242, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 242 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 242 * 1, 34 * 1);
        }
        else if (this.type == "duendeEsophagus")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 9, 1938, 39, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 0.66), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 0.66), 39 * 0.66, 60 * 0.66);
        }
        else if (this.type == "driedDuendeEsophagus")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 62, 1939, 39, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 0.66), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 0.66), 39 * 0.66, 60 * 0.66);
        }
        else if (this.type == "duendePowder")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 113, 1955, 37, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 0.66), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.66), 37 * 0.66, 33 * 0.66);
        }
        else if (this.type == "bacon")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 677, 750, 42, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 0.64), 42 * 0.64, 37 * 0.64);
        }
        else if (this.type == "rawBacon")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 625, 751, 42, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 0.64), 42 * 0.64, 37 * 0.64);
        }
        else if (this.type == "porkbelly")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 709, 794, 51, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 0.64), 51 * 0.64, 31 * 0.64);
        }
        else if (this.type == "rawPorkbelly")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 643, 795, 51, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 0.64), 51 * 0.64, 31 * 0.64);
        }
        else if (this.type == "curedPork")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 103, 1318, 38, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 0.64), 38 * 0.64, 39 * 0.64);
        }
        else if (this.type == "boarMeat")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 13, 1318, 69, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 69 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.64), 69 * 0.64, 33 * 0.64);
        }
        else if (this.type == "rawBoarFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 13, 1275, 69, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 69 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.64), 69 * 0.64, 33 * 0.64);
        }
        else if (this.type == "chainsaw")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 844, 2059, 74, 116, X - this.X + (1/2 * CCC.width) - (1/2 * 74 * 0.64), Y - this.Y + (1/2 * CCC.height) - (1/2 * 116 * 0.64), 74 * 0.64, 116 * 0.64);
        }
        else if (this.type == "witchHunterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 705, 841, 96, 145, X - this.X + (1/2 * CCC.width) - (1/2 * 96 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 145 * 0.6), 96 * 0.6, 145 * 0.6);
        }
        else if (this.type == "nirwadenGambeson")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 107, 462, 96, 145, X - this.X + (1/2 * CCC.width) - (1/2 * 96 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 145 * 0.6), 96 * 0.6, 145 * 0.6);
        }
        else if (this.type == "nirwadenMorionArmour")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 103, 624, 96, 145, X - this.X + (1/2 * CCC.width) - (1/2 * 96 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 145 * 0.6), 96 * 0.6, 145 * 0.6);
        }
        else if (this.type == "peacockFeather")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 7, 1087, 73, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 73 * 1.45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.45), 73 * 1.45, 35 * 1.45);
        }
        else if (this.type == "peacockMeat")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 11, 1205, 73, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 73 * 0.575), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 0.575), 73 * 0.575, 35 * 0.575);
        }
        else if (this.type == "rawPeacockFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 14, 1164, 73, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 73 * 0.575), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 0.575), 73 * 0.575, 35 * 0.575);
        }
        else if (this.type == "nirwadenPriestRobes")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 534, 3458, 89, 173, X - this.X + (1/2 * CCC.width) - (1/2 * 89 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 173 * 0.6), 89 * 0.6, 173 * 0.6);
        }
        else if (this.type == "nirwadenClothingM")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 901, 837, 97, 149, X - this.X + (1/2 * CCC.width) - (1/2 * 97 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 149 * 0.6), 97 * 0.6, 149 * 0.6);
        }
        else if (this.type == "nirwadenClothingF")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 89, 999, 97, 149, X - this.X + (1/2 * CCC.width) - (1/2 * 97 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 149 * 0.6), 97 * 0.6, 149 * 0.6);
        }
        else if (this.type == "nirwadenNobleOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 98, 821, 98, 146, X - this.X + (1/2 * CCC.width) - (1/2 * 98 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 146 * 0.6), 98 * 0.6, 146 * 0.6);
        }
        else if (this.type == "nirwadenNobleDress")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 235, 795, 141, 182, X - this.X + (1/2 * CCC.width) - (1/2 * 141 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 182 * 0.6), 141 * 0.6, 182 * 0.6);
        }
        else if (this.type == "nirwadenPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 312, 642, 100, 145, X - this.X + (1/2 * CCC.width) - (1/2 * 100 * 0.63), Y - this.Y + (1/2 * CCC.height) - (1/2 * 145 * 0.63), 100 * 0.63, 145 * 0.63);
        }
        else if (this.type == "griffinPelt")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 746, 2602, 96, 53, X - this.X + (1/2 * CCC.width) - (1/2 * 96 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 53 * 1), 96 * 1, 53 * 1);
        }
        else if (this.type == "roastedGriffinHeart")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 778, 2545, 44, 49, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49 * 1), 44 * 1, 49 * 1);
        }
        else if (this.type == "griffinHeart")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 825, 2511, 44, 49, X - this.X + (1/2 * CCC.width) - (1/2 * 44 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49 * 1), 44 * 1, 49 * 1);
        }
        else if (this.type == "griffinHeadSml")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 853, 2574, 97, 103, X - this.X + (1/2 * CCC.width) - (1/2 * 97 * 0.75), Y - this.Y + (1/2 * CCC.height) - (1/2 * 103 * 0.75), 97 * 0.75, 103 * 0.75);
        }
        else if (this.type == "griffinHeadMed")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 853, 2574, 97, 103, X - this.X + (1/2 * CCC.width) - (1/2 * 97 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 103 * 1), 97 * 1, 103 * 1);
        }
        else if (this.type == "griffinHeadLrg")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 853, 2574, 97, 103, X - this.X + (1/2 * CCC.width) - (1/2 * 97 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 103 * 1.4), 97 * 1.4, 103 * 1.4);
        }
        else if (this.type == "horseMeat")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 912, 382, 45, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "rawHorseFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 912, 340, 45, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "horseHair")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 911, 423, 45, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 45 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "powderedRhinocerosHorn")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 721, 777, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 22 * 1, 20 * 1);
        }
        else if (this.type == "rhinocerosHorn")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 721, 754, 41, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1), 41 * 1, 20 * 1);
        }
        else if (this.type == "slol")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 461, 601, 78, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 78 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "rawSlol")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 458, 566, 78, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 78 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "rawRiulpo")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 660, 657, 52, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "riulpo")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 660, 701, 52, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "polxetp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 716, 699, 52, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "rawPolxetp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 715, 657, 52, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 52 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "redBelliedFalder")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 670, 603, 53, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 53 * 1, 26 * 1);
        }
        else if (this.type == "rawRedBelliedFalder")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 673, 565, 53, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 1), 53 * 1, 26 * 1);
        }
        else if (this.type == "rawDuskfish")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 728, 560, 78, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 78 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "duskfish")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 727, 598, 78, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 78 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "tridite")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 555, 762, 77, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 1), 77 * 1, 54 * 1);
        }
        else if (this.type == "rawTridite")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 447, 761, 77, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 1), 77 * 1, 54 * 1);
        }
        else if (this.type == "crawdid")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 624, 562, 37, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 37 * 1, 33 * 1);
        }
        else if (this.type == "crawdidTail")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 623, 601, 37, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1), 37 * 1, 33 * 1);
        }
        else if (this.type == "rawKalp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 551, 668, 78, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 78 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "kalp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 552, 709, 78, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 78 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "theGrailOfEternity")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 691, 797, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 18 * 1, 18 * 1);
        }
        else if (this.type == "grailOfEternity")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 671, 797, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 18 * 1, 18 * 1);
        }
        else if (this.type == "mugmulFur")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 13, 907, 27, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 27 * 1, 34 * 1);
        }
        else if (this.type == "mugmulMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 83, 915, 18, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 18 * 1, 21 * 1);
        }
        else if (this.type == "rawMugmulFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 55, 915, 18, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 18 * 1, 21 * 1);
        }
        else if (this.type == "mugmulBrain")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 188, 972, 21, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 21 * 1, 21 * 1);
        }
        else if (this.type == "rawSalmon")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 555, 563, 57, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 57 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1), 57 * 1, 37 * 1);
        }
        else if (this.type == "salmon")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 556, 603, 57, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 57 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1), 57 * 1, 37 * 1);
        }
        else if (this.type == "rawSaskriit")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 448, 663, 73, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 73 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "saskriit")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 452, 707, 73, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 73 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "drileLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 600, 50, 56, 91, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91 * 1.15), 56 * 1.15, 91 * 1.15);
        }
        else if (this.type == "drileLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 661, 87, 42, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 1.15), 42 * 1.15, 41 * 1.15);
        }
        else if (this.type == "drileLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 714, 50, 29, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.15), 29 * 1.15, 24 * 1.15);
        }
        else if (this.type == "zarbuTribalWear")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 836, 887, 55, 106, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 0.95), Y - this.Y + (1/2 * CCC.height) - (1/2 * 106 * 0.95), 55 * 0.95, 106 * 0.95);
        }
        else if (this.type == "zarbuClothing")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 767, 892, 55, 106, X - this.X + (1/2 * CCC.width) - (1/2 * 55 * 0.95), Y - this.Y + (1/2 * CCC.height) - (1/2 * 106 * 0.95), 55 * 0.95, 106 * 0.95);
        }
        else if (this.type == "zarbuMatriarchDress")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 764, 781, 46, 103, X - this.X + (1/2 * CCC.width) - (1/2 * 46 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 103 * 1.15), 46 * 1.15, 103 * 1.15);
        }
        else if (this.type == "zarbuDress")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 794, 656, 39, 84, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 84 * 1.15), 39 * 1.15, 84 * 1.15);
        }
        else if (this.type == "basiliskScale")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 204, 941, 14, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 14, 13);
        }
        else if (this.type == "basiliskEye")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 205, 959, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9), 9, 9);
        }
        else if (this.type == "basiliskFang")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 186, 944, 13, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27), 13, 27);
        }
        else if (this.type == "zarbuTuft")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 822, 10, 21, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "zarbuPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 903, 2, 89, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 89 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1), 89 * 1, 39 * 1);
        }
        else if (this.type == "zarbuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 873, 10, 25, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1.2), 25 * 1.2, 25 * 1.2);
        }
        else if (this.type == "rawZarbuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 847, 11, 25, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1.2), 25 * 1.2, 25 * 1.2);
        }
        else if (this.type == "acidifiedDrileKidney")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 717, 100, 27, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1), 27 * 1, 19 * 1);
        }
        else if (this.type == "drileKidney")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 718, 77, 27, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1), 27 * 1, 19 * 1);
        }
        else if (this.type == "drileMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 791, 15, 30, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 30 * 1, 31 * 1);
        }
        else if (this.type == "rawDrileFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 755, 14, 30, 31, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 31 * 1), 30 * 1, 31 * 1);
        }
        else if (this.type == "drileSkin")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 614, 9, 137, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 137 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1), 137 * 1, 38 * 1);
        }
        else if (this.type == "tunskBloodPotion" || this.type == "antiMothfearPotion")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1701, 201, 9, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 9, 15);
        }
        else if (this.type == "waterwalkingPotion")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1763, 184, 9, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 9, 15);
        }
        else if (this.type == "toothedBludgeon")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 231, 928, 74, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 74), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70), 74, 70);
        }
        else if (this.type == "lelBerries")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 455, 48, 8, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.8), 8 * 1.8, 13 * 1.8);
        }
        else if (this.type == "lelFlower")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 467, 50, 11, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.8), 11 * 1.8, 9 * 1.8);
        }
        else if (this.type == "naapridDrinkinghorn" || this.type == "naapridDrinkinghorn1" || this.type == "naapridMilkhorn1")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 539, 80, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "naapridMilkhornFull")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 522, 105, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "naapridDrinkinghornFull")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 466, 105, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "volaFlowers")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 439, 115, 15, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.4), 15 * 1.4, 13 * 1.4);
        }
        else if (this.type == "rawTamal" || this.type == "rawMofuTamal" || this.type == "wrappedTamal" || this.type == "wrappedMofuTamal")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 402, 50, 15, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal" || this.type == "mofuTamal")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 386, 51, 15, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal2" || this.type == "mofuTamal2")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 419, 50, 15, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal1" || this.type == "mofuTamal1")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 435, 50, 15, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "masa")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 392, 20, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.8), 11 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maizeFlour")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 393, 34, 14, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.8), 14 * 1.8, 14 * 1.8);
        }
        else if (this.type == "roastedMaize")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 399, 4, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.8), 10 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maizeHusk")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 408, 20, 9, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.8), 9 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maize")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 386, 5, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.8), 10 * 1.8, 10 * 1.8);
        }
        else if (this.type == "mazorca")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 377, 20, 11, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.8), 11 * 1.8, 14 * 1.8);
        }
        else if (this.type == "boiledFrijols")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 517, 79, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "latuku")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 498, 78, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "aktaltlSoup")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 478, 77, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "apotlPepper")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 481, 43, 13, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.4), 13 * 1.4, 18 * 1.4);
        }
        else if (this.type == "frijols")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 376, 36, 12, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.4), 12 * 1.4, 11 * 1.4);
        }
        else if (this.type == "clobeLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 325, 138, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "kwomFruit")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 398, 96, 11, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.4), 11 * 1.4, 9 * 1.4);
        }
        else if (this.type == "pochalPods")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 316, 86, 23, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.4), 23 * 1.4, 19 * 1.4);
        }
        else if (this.type == "boiledPochalPods")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 344, 86, 23, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.4), 23 * 1.4, 19 * 1.4);
        }
        else if (this.type == "karmFruit")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 108, 100, 20, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1), 20 * 1, 21 * 1);
        }
        else if (this.type == "aktaltlFrond")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 102, 51, 28, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.4), 28 * 1.4, 21 * 1.4);
        }
        else if (this.type == "boiledAktaltlFrond")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 106, 77, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.4), 22 * 1.4, 20 * 1.4);
        }
        else if (this.type == "aktaltlRoot")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 106, 11, 33, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1.4), 33 * 1.4, 33 * 1.4);
        }
        else if (this.type == "roastedAktaltlRoot")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 96, 123, 33, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1.4), 33 * 1.4, 33 * 1.4);
        }
        else if (this.type == "boat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 307, 477, 43, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80 * 1.4), 43 * 1.4, 80 * 1.4);
        }
        else if (this.type == "corneliusFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 235, 18, 8, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2), 8 * 2, 10 * 2);
        }
        else if (this.type == "rilthasiaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 248, 18, 8, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2), 8 * 2, 10 * 2);
        }
        else if (this.type == "yeolPod")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 333, 10, 8, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolPodHusk")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 352, 11, 8, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolNut")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 343, 10, 8, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolWood")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 359, 65, 19, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2), 19 * 2, 17 * 2);
        }
        else if (this.type == "rawTaipanFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 303, 120, 17, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "taipanMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 303, 134, 17, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "taipanSnakeSkin")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 300, 106, 26, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2), 26 * 2, 14 * 2);
        }
        else if (this.type == "taipanVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 305, 145, 17, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "rawYioshkFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 477, 122, 15, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 2.2), 15 * 2.2, 11 * 2.2);
        }
        else if (this.type == "yioshkMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 477, 133, 15, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 2.2), 15 * 2.2, 11 * 2.2);
        }
        else if (this.type == "cloimidMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 93, 228, 27, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 2.2), 27 * 2.2, 24 * 2.2);
        }
        else if (this.type == "rawCloimidFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 94, 204, 27, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 2.2), 27 * 2.2, 24 * 2.2);
        }
        else if (this.type == "cloimidPearl")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 126, 209, 11, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 2), 11 * 2, 11 * 2);
        }
        else if (this.type == "wool")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 933, 7, 22, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 2), 22 * 2, 19 * 2);
        }
        else if (this.type == "lamb" || this.type == "mutton")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 987, 4, 12, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 2), 12 * 2, 18 * 2);
        }
        else if (this.type == "rawLamb" || this.type == "rawMutton")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 970, 4, 12, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 2), 12 * 2, 18 * 2);
        }
        else if (this.type == "anemoneTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 652, 252, 12, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.6), 12 * 1.6, 16 * 1.6);
        }
        else if (this.type == "beachMiteInnards")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 98, 160, 10, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.2), 10 * 1.2, 9 * 1.2);
        }
        else if (this.type == "fishingpole")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 181, 486, 24, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.5), 24 * 1.5, 30 * 1.5);
        }
        else if (this.type == "kelp")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 126, 227, 19, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.25), 19 * 1.25, 24 * 1.25);
        }
        else if (this.type == "dryKelp")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 141, 204, 19, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.25), 19 * 1.25, 24 * 1.25);
        }
        else if (this.type == "rawRedCrombal")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 97, 254, 18, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.4), 18 * 1.4, 10 * 1.4);
        }
        else if (this.type == "redCrombal")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 97, 308, 18, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.4), 18 * 1.4, 10 * 1.4);
        }
        else if (this.type == "rawJuurgo")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 97, 263, 19, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 3.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 3.2), 19 * 3.2, 9 * 3.2);
        }
        else if (this.type == "juurgo")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 96, 320, 19, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 3.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 3.2), 19 * 3.2, 9 * 3.2);
        }
        else if (this.type == "rawRazorfin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 95, 273, 22, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 2), 22 * 2, 18 * 2);
        }
        else if (this.type == "razorfin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 93, 332, 22, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 2), 22 * 2, 18 * 2);
        }
        else if (this.type == "rawThab")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(2.5/8 * 2 * Math.PI);
            XXX.drawImage(norc, 92, 292, 32, 11, 0 - (1/2 * 32 * 3.5), 0 - (1/2 * 11 * 3.5), 32 * 3.5, 11 * 3.5);
            XXX.restore();
        }
        else if (this.type == "thab")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(2.5/8 * 2 * Math.PI);
            XXX.drawImage(norc, 92, 350, 32, 11, 0 - (1/2 * 32 * 3.5), 0 - (1/2 * 11 * 3.5), 32 * 3.5, 11 * 3.5);
            XXX.restore();
        }
        else if (this.type == "saltBloodArmour")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 130, 153, 30, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 2.1), 30 * 2.1, 46 * 2.1);
        }
        else if (this.type == "sealSkinClothing")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 37, 116, 20, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 2.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 2.35), 20 * 2.35, 36 * 2.35);
        }
        else if (this.type == "sealSkinGloves")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 66, 123, 15, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2.1), 12 * 2.1, 12 * 2.1);
        }
        else if (this.type == "sealSkinBoots")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 65, 139, 20, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2.1), 20 * 2.1, 15 * 2.1);
        }
        else if (this.type == "northernClothing")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 22, 2, 20, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 2.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 2.35), 20 * 2.35, 36 * 2.35);
        }
        else if (this.type == "northernGloves")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 94, 118, 15, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2.1), 12 * 2.1, 12 * 2.1);
        }
        else if (this.type == "northernBoots")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 90, 134, 20, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 2.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2.1), 20 * 2.1, 15 * 2.1);
        }
        else if (this.type == "tyrniBerries")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 67, 337, 13, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 2), 13 * 2, 9 * 2);
        }
        else if (this.type == "sealSkin" || this.type == "selkieSkin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 5, 39, 42, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.75), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.75), 42 * 1.75, 18 * 1.75);
        }
        else if (this.type == "babySealSkin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 5, 39, 42, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 0.9), 42 * 0.9, 18 * 0.9);
        }
        else if (this.type == "rawSealFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 9, 59, 10, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.85), 10 * 1.85, 14 * 1.85);
        }
        else if (this.type == "sealMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 21, 59, 10, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.85), 10 * 1.85, 14 * 1.85);
        }
        else if (this.type == "crabFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 850, 6, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "crabMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 850, 36, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "crabClaw")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 806, 26, 31, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.3), 31 * 1.3, 21 * 1.3);
        }
        else if (this.type == "rawCrabClaw")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 807, 3, 31, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.3), 31 * 1.3, 21 * 1.3);
        }
        else if (this.type == "butteredCrab")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 875, 16, 9, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 1.6), 9 * 1.6, 8 * 1.6);
        }
        else if (this.type == "crabChowder")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 890, 16, 9, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 1.6), 9 * 1.6, 8 * 1.6);
        }
        else if (this.type == "crabBisque")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 905, 16, 9, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 1.6), 9 * 1.6, 8 * 1.6);
        }
        else if (this.type == "hoilLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 63, 361, 23, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.6), 23 * 1.6, 17 * 1.6);
        }
        else if (this.type == "mudBeetleLeg")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 123, 258, 23, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1.75), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.75), 23 * 1.75, 16 * 1.75);
        }
        else if (this.type == "rawKoobuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 542, 743, 11, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 2), 11 * 2, 9 * 2);
        }
        else if (this.type == "koobuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 590, 742, 11, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.95), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.95), 11 * 1.95, 9 * 1.95);
        }
        else if (this.type == "koobuPelt")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 561, 742, 20, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.5), 20 * 1.5, 9 * 1.5);
        }
        else if (this.type == "emptyMiterBloodSac")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 96, 222, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1), 17 * 1, 17 * 1);
        }
        else if (this.type == "miterBloodSac")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 76, 223, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1), 17 * 1, 17 * 1);
        }
        else if (this.type == "miterHide")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 31, 223, 27, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.2), 27 * 1.2, 19 * 1.2);
        }
        else if (this.type == "balkurFang")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 9, 1, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 10 * 1, 15 * 1);
        }
        else if (this.type == "theUndyingEdge")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 8, 193, 22, 93, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 0.67), Y - this.Y + (1/2 * CCC.height) - (1/2 * 93 * 0.67), 22 * 0.67, 93 * 0.67);
        }
        else if (this.type == "spindletrap")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 148, 89, 27, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 2.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 2.5), 27 * 2.5, 27 * 2.5);
        }
        else if (this.type == "jacks")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 269, 45, 19, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1), 19 * 1, 18 * 1);
        }
        else if (this.type == "glowDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 3, 1, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "vrezinDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 22, 2, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "irilDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 43, 1, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "pimberDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 280, 109, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "shomeDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 280, 180, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "dustPouch" || this.type == "pouchOfGlowDust" || this.type == "pouchOfVrezinDust" || this.type == "pouchOfIrilDust" || this.type == "pouchOfPimberDust" || this.type == "pouchOfShomeDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 64, 3, 15, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.3), 15 * 1.3, 15 * 1.3);
        }
        else if (this.type == "neevFurCloak")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 681, 1161, 38, 73, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1.39), Y - this.Y + (1/2 * CCC.height) - (1/2 * 73 * 1.39), 38 * 1.39, 73 * 1.39);
        }
        else if (this.type == "neevFurBoots")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 723, 1171, 36, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.25), 36 * 1.25, 24 * 1.25);
        }
        else if (this.type == "neevFurGloves")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 745, 1199, 36, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.25), 36 * 1.25, 24 * 1.25);
        }
        else if (this.type == "balkurMeat")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 57, 1, 24, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 24, 16);
        }
        else if (this.type == "rawBalkurFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 28, 1, 24, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 24, 16);
        }
        else if (this.type == "balkurPelt")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 12, 31, 69, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 69), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33), 69, 33);
        }
        else if (this.type == "balkurLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 743, 388, 51, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 0.8), 51 * 0.8, 34 * 0.8);
        }
        else if (this.type == "balkurLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 738, 331, 61, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 61 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 0.8), 61 * 0.8, 42 * 0.8);
        }
        else if (this.type == "balkurLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 669, 310, 59, 111, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 111 * 1), 59 * 1, 111 * 1);
        }
        else if (this.type == "meatCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 605, 0, 23, 48, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 0.74), Y - this.Y + (1/2 * CCC.height) - (1/2 * 48 * 0.74), 23 * 0.74, 48 * 0.74);
        }
        else if (this.type == "vardanianGlaive")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 667, 2, 123, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 123 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1.05), 123 * 1.05, 42 * 1.05);
        }
        else if (this.type == "kellishSpear")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 503, 7, 79, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 79 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 79 * 1, 34 * 1);
        }
        else if (this.type == "scimitar")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 337, 14, 66, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 0.785), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.725), 66 * 0.785, 33 * 0.725);
            XXX.drawImage(balkur, 337, 14, 66, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 66 * 0.785), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.725), 66 * 0.785, 33 * 0.725);
        }
        else if (this.type == "estoc")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(-1/8 * 2 * Math.PI);
            XXX.drawImage(dolls, 578, 3, 18, 74, - (1/2 * 18), - (1/2 * 74), 18, 74);
            XXX.restore();
        }
        else if (this.type == "ancientFragment")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1423, 198, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 17 * 1.5, 18 * 1.5);
        }
        else if (this.type == "soul")
        {
            XXX.beginPath();
            this.turn -= 0.314;
            XXX.beginPath();
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(this.turn);
            XXX.drawImage(mofu, 23, 51, 22, 19, - (1/2 * 22), - (1/2 * 19), 22, 19);
            XXX.restore();
        }
        else if (this.type == "boulchomLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 98, 237, 25, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 25 * 1.5, 18 * 1.5);
        }
        else if (this.type == "boulchomLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 125, 240, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 17 * 1.5, 13 * 1.5);
        }
        else if (this.type == "skolLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 752, 1057, 37, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.3), 37 * 1.3, 32 * 1.3);
        }
        else if (this.type == "skolLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 701, 1074, 37, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.3), 37 * 1.3, 32 * 1.3);
        }
        else if (this.type == "skolLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 752, 993, 37, 59, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 59 * 1.65), 37 * 1.65, 59 * 1.65);
        }
        else if (this.type == "skolPelt")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 55, 97, 30, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.9), 30 * 1.9, 15 * 1.9);
        }
        else if (this.type == "rawSkolFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 10, 98, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.9), 17 * 1.9, 18 * 1.9);
        }
        else if (this.type == "skolMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 27, 97, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.9), 17 * 1.9, 18 * 1.9);
        }
        else if (this.type == "steugiurneFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 73, 348, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 3), 12 * 3, 13 * 3);
        }
        else if (this.type == "steugiurneFrond")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 32, 348, 27, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 3), 27 * 3, 13 * 3);
        }
        else if (this.type == "vorlymFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 139, 356, 13, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 2.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 2.5), 13 * 2.5, 18 * 2.5);
        }
        else if (this.type == "brightbloomFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 872, 330, 22, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 2.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 2.5), 22 * 2.5, 21 * 2.5);
        }
        else if (this.type == "galloshFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 10, 342, 10, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 2), 10 * 2, 11 * 2);
        }
        else if (this.type == "hydroraSalve")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 833, 402, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.5), 10 * 1.5, 15 * 1.5);
        }
        else if (this.type == "thalisLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 78, 321, 10, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 2), 10 * 2, 11 * 2);
        }
        else if (this.type == "kofkeLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 76, 296, 17, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 2), 17 * 2, 16 * 2);
        }
        else if (this.type == "blilArm")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 20, 269, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "rawRabbitFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 664, 172, 19, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 687, 171, 19, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitPelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 593, 174, 19, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitFoot")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 618, 176, 8, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7 * 1.4), 8 * 1.4, 7 * 1.4);
        }
        else if (this.type == "rabbitFootNecklace")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 635, 166, 19, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.4), 19 * 1.4, 21 * 1.4);
        }
        else if (this.type == "vel")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 756, 167, 12, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.6), 12 * 1.6, 11 * 1.6);
        }
        else if (this.type == "fletterWing")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 742, 165, 8, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 8 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.6), 8 * 1.6, 14 * 1.6);
        }
        else if (this.type == "etnaEggSac")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 834, 374, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 3.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 3.7), 10 * 3.7, 10 * 3.7);
        }
        else if (this.type == "etnaVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 831, 359, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.7), 12 * 1.7, 10 * 1.7);
        }
        else if (this.type == "rawBoulchomFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 61, 238, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.3), 15 * 2.3, 14 * 2.3);
        }
        else if (this.type == "boulchomMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 80, 238, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.3), 15 * 2.3, 14 * 2.3);
        }
        else if (this.type == "boulchomLung")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 44, 238, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.3), 15 * 2.3, 14 * 2.3);
        }
        else if (this.type == "boulchomPelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 12, 238, 26, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 26 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2.3), 26 * 2.3, 15 * 2.3);
        }
        else if (this.type == "clayBowl" || this.type == "woodenBowl")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 5, 15, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.6), 12 * 1.6, 10 * 1.6);
        }
        else if (this.type == "bowlOfMushroomStew")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 19, 15, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.6), 12 * 1.6, 10 * 1.6);
        }
        else if (this.type == "bowlOfSanthPorridge")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 36, 16, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.6), 12 * 1.6, 10 * 1.6);
        }
        else if (this.type == "bowlOfBoiledHarst" || this.type == "bowlOfCreamyHarst")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 5, 38, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.6), 12 * 1.6, 10 * 1.6);
        }
        else if (this.type == "haeflower")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 19, 274, 32, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 0.9), 32 * 0.9, 46 * 0.9);
        }
        else if (this.type == "haeflowerPollen")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 275, 215, 29, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 0.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 0.4), 29 * 0.4, 25 * 0.4);
        }
        else if (this.type == "stone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1698, 528, 29, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 29), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27), 29, 27);
        }
        else if (this.type == "darkStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1666, 466, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 25, 24);
        }
        else if (this.type == "ashStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1561, 529, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 25, 24);
        }
        else if (this.type == "turquoise")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1368, 526, 31, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 0.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 0.3), 31 * 0.3, 25 * 0.3);
        }
        else if (this.type == "aquamarine")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1248, 526, 21, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 0.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 0.3), 21 * 0.3, 28 * 0.3);
        }
        else if (this.type == "ruby")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1440, 527, 25, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 0.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26 * 0.3), 25 * 0.3, 26 * 0.3);
        }
        else if (this.type == "emerald")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1407, 523, 23, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 0.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 0.3), 23 * 0.3, 35 * 0.3);
        }
        else if (this.type == "sapphire")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1328, 524, 36, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 0.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.3), 36 * 0.3, 33 * 0.3);
        }
        else if (this.type == "coal")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1531, 529, 29, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 29), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27), 29, 27);
        }
        else if (this.type == "ironOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1761, 464, 38, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 38), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 38, 26);
        }
        else if (this.type == "rawSilver")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1471, 524, 27, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 27, 35);
        }
        else if (this.type == "rawGold")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1211, 522, 27, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 27, 35);
        }
        else if (this.type == "silver")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1359, 562, 29, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 29), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 29, 18);
        }
        else if (this.type == "gold")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1323, 562, 29, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 29), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 29, 18);
        }
        else if (this.type == "jvostranOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1623, 528, 29, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 29), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27), 29, 27);
        }
        else if (this.type == "pureJvostranOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1328, 524, 35, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 0.8), 35 * 0.8, 33 * 0.8);
        }
        else if (this.type == "jvostran")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1285, 563, 30, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 30, 17);
        }
        else if (this.type == "twiceForgedSteel")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1427, 561, 30, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 30, 20);
        }
        else if (this.type == "thriceForgedSteel")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1393, 561, 30, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 30, 20);
        }
        else if (this.type == "svehnsShipment" || this.type == "svehnsLoot")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 104, 213, 36, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 36 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.4), 36 * 1.4, 37 * 1.4);
        }
        else if (this.type == "svehnsLootEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 95, 260, 51, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 51 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 1.4), 51 * 1.4, 42 * 1.4);
        }
        else if (this.type == "cero")
        {
            XXX.beginPath();
            XXX.drawImage(zer0, 344, 8, 20, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 1.5), 20 * 1.5, 50 * 1.5);
        }
        else if (this.type == "rawTunskFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 130, 6, 10, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.85), 10 * 1.85, 9 * 1.85);
        }
        else if (this.type == "tunskMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 130, 15, 10, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.85), 10 * 1.85, 9 * 1.85);
        }
        else if (this.type == "anterInnards")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 77, 371, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "anterAcid")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 93, 371, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "anterShell")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 75, 530, 24, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.6), 24 * 1.6, 16 * 1.6);
        }
        else if (this.type == "anterMandibles")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 77, 548, 20, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.5), 20 * 1.5, 24 * 1.5);
        }
        else if (this.type == "anterShellArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 70, 389, 34, 52, X - this.X + (1/2 * CCC.width) - (1/2 * 34 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 52 * 2), 34 * 2, 52 * 2);
        }
        else if (this.type == "wegRoot")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 255, 58, 14, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 2), 14 * 2, 19 * 2);
        }
        else if (this.type == "roastedWegRoot")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 280, 83, 14, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 2), 14 * 2, 19 * 2);
        }
        else if (this.type == "roastedWegRootChunks")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 278, 60, 17, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "palntRoot")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 205, 473, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.4), 10 * 1.4, 15 * 1.4);
        }
        else if (this.type == "boiledPalntRoot")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 206, 478, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.5), 9 * 1.5, 9 * 1.5);
        }
        else if (this.type == "palntFlower")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 185, 472, 9, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 1.35), 9 * 1.35, 8 * 1.35);
        }
        else if (this.type == "vardanianClub")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 319, 453, 12, 38, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 38 * 1.4), 12 * 1.4, 38 * 1.4);
        }
        else if (this.type == "swampWalkerArmour")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 18, 581, 35, 65, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.325), Y - this.Y + (1/2 * CCC.height) - (1/2 * 65 * 1.325), 35 * 1.325, 65 * 1.325);
        }
        else if (this.type == "thenganPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 72, 581, 35, 65, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 65 * 1.5), 35 * 1.5, 65 * 1.5);
        }
        else if (this.type == "northernPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 38, 38, 35, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.95), Y - this.Y + (1/2 * CCC.height) - (1/2 * 57 * 1.95), 35 * 1.95, 57 * 1.95);
        }
        else if (this.type == "ancientArmour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1828, 225, 43, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 61 * 1.5), 43 * 1.5, 61 * 1.5);
        }
        else if (this.type == "wightbloomBerries")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 197, 528, 18, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.5), 18 * 1.5, 17 * 1.5);
        }
        else if (this.type == "ishBranch")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 865, 550, 18, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 18, 21);
        }
        else if (this.type == "itlinBranch")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 477, 103, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2), 12 * 2, 10 * 2);
        }
        else if (this.type == "butterMellowFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 256, 39, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 2), 14 * 2, 16 * 2);
        }
        else if (this.type == "mufBall")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 267, 19, 7, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 7 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7 * 2), 7 * 2, 7 * 2);
        }
        else if (this.type == "mufFiber")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 335, 23, 15, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 15 * 2, 12 * 2);
        }
        else if (this.type == "mufCloth")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 315, 10, 11, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 11 * 2, 13 * 2);
        }
        else if (this.type == "tenicFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 295, 23, 14, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2), 14 * 2, 14 * 2);
        }
        else if (this.type == "tenicLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 279, 24, 14, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2), 14 * 2, 14 * 2);
        }
        else if (this.type == "tenicPaste")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 302, 24, 4, 6, X - this.X + (1/2 * CCC.width) - (1/2 * 4 * 2.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 6 * 2.25), 4 * 2.35, 6 * 2.25);
        }
        else if (this.type == "ardilFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 49, 299, 30, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 2.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 2.35), 30 * 2.35, 42 * 2.35);
        }
        else if (this.type == "ardilFurSkirt")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 48, 256, 30, 42, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 2.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 42 * 2.35), 30 * 2.35, 42 * 2.35);
        }
        else if (this.type == "ardilFurGloves")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 58, 233, 15, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2.35), 15 * 2.35, 17 * 2.35);
        }
        else if (this.type == "mofuTribalWear")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 4, 137, 38, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 38 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1.6), 38 * 1.6, 60 * 1.6);
        }
        else if (this.type == "mofuRunnerOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 50, 137, 37, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60 * 1.6), 37 * 1.6, 60 * 1.6);
        }
        else if (this.type == "mofuMatriarchHeaddress")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 5, 43, 35, 67, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 67 * 1.4), 35 * 1.4, 67 * 1.4);
        }
        else if (this.type == "jarOfUlgoyNectar")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 287, 347, 11, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 17.5, 24);
        }
        else if (this.type == "ulgoyLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 305, 348, 18, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.25), 18 * 1.25, 14 * 1.25);
        }
        else if (this.type == "mofuFive")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 1, 1, 27, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.2), 27 * 1.2, 24 * 1.2);
        }
        else if (this.type == "theCorpseRing")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 48, 44, 13, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1), 13 * 1, 9 * 1);
        }
        else if (this.type == "ironRing")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 32, 22, 11, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1), 11 * 1, 11 * 1);
        }
        else if (this.type == "rawArdilFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 50, 687, 8, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8), 8, 8);
        }
        else if (this.type == "ardilMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 82, 686, 8, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8), 8, 8);
        }
        else if (this.type == "ardilPelt")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 928, 701, 29, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 29), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 29, 20);
        }
        else if (this.type == "lizardTail")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1544, 29, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12.5), 12.5, 12.5);
        }
        else if (this.type == "pumpkinDough")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 73, 4, 10, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 1.8), 10 * 1.8, 8 * 1.8);
        }
        else if (this.type == "pumpkinBread")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 56, 29, 16, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.8), 16 * 1.8, 11 * 1.8);
        }
        else if (this.type == "butteredPumpkinBread")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 70, 2, 19, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.8), 19 * 1.8, 18 * 1.8);
        }
        else if (this.type == "velPumpkinBread")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 604, 1202, 20, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.8), 20 * 1.8, 19 * 1.8);
        }
        else if (this.type == "harstBread")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1395, 12, 15, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.8), 15 * 1.8, 12 * 1.8);
        }
        else if (this.type == "butteredHarstBread")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1392, 27, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.8), 17 * 1.8, 17 * 1.8);
        }
        else if (this.type == "velHarstBread")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 601, 1125, 18, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.8), 18 * 1.8, 17 * 1.8);
        }
        else if (this.type == "harstDough")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1412, 11, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "harstFlour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1428, 12, 11, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 11, 15);
        }
        else if (this.type == "bagOfHarstFlour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1443, 11, 23, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 23), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29), 23, 29);
        }
        else if (this.type == "honey")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 34, 244, 18, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 18, 21);
        }
        else if (this.type == "bee")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 12, 338, 14, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 14, 13);
        }
        else if (this.type == "wyrExtract")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1722, 200, 13, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 13, 17);
        }
        else if (this.type == "blackBearLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 689, 2, 29, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 2), 29 * 2, 46 * 2);
        }
        else if (this.type == "blackBearFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 654, 2, 29, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 2), 29 * 2, 46 * 2);
        }
        else if (this.type == "wellAxle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 233, 350, 20, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.6), 20 * 1.6, 17 * 1.6);
        }
        else if (this.type == "wellCord")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 209, 326, 23, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.6), 23 * 1.6, 22 * 1.6);
        }
        else if (this.type == "wellStone")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 239, 332, 15, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.6), 15 * 1.6, 10 * 1.6);
        }
        else if (this.type == "wellWinch")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 213, 350, 17, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8 * 1.6), 17 * 1.6, 8 * 1.6);
        }
        else if (this.type == "blunderbuss")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1305, 12, 13, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.65), 13 * 1.65, 35 * 1.65);
        }
        else if (this.type == "musket")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1334, 11, 11, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1.65), 11 * 1.65, 36 * 1.65);
        }
        else if (this.type == "shotShooter")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1334, 11, 11, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28 * 1.6), 11 * 1.6, 28 * 1.6);
        }
        else if (this.type == "bullet")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1321, 16, 5, 5, X - this.X + (1/2 * CCC.width) - (1/2 * 8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 8), 8, 8);
        }
        else if (this.type == "blackPowder" || this.type == "pyromothPowder")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1350, 13, 13, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 13, 11);
        }
        else if (this.type == "cutlass")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1369, 10, 19, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1.65), 19 * 1.65, 37 * 1.65);
        }
        else if (this.type == "brokenHyelingCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 223, 83, 31, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1.6), 31 * 1.6, 34 * 1.6);
        }
        else if (this.type == "hyelingClaws")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 98, 53, 22, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.6), 22 * 1.6, 19 * 1.6);
        }
        else if (this.type == "rawHyelingFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 223, 600, 14, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.6), 14 * 1.6, 18 * 1.6);
        }
        else if (this.type == "hyelingMeat")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 241, 601, 14, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.6), 14 * 1.6, 18 * 1.6);
        }
        else if (this.type == "hyelingArmour")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 197, 30, 17, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 46 * 2), 17 * 2, 46 * 2);
        }
        else if (this.type == "golgemoffFeelers")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 965, 266, 17, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 17, 16);
        }
        else if (this.type == "golgemoffMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 983, 264, 17, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.4), 17 * 1.4, 16 * 1.4);
        }
        else if (this.type == "rawGolgemoffFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 999, 264, 17, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.4), 17 * 1.4, 16 * 1.4);
        }
        else if (this.type == "adhesive")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 999, 264, 17, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.6), 17 * 1.6, 16 * 1.6);
            XXX.beginPath();
            XXX.drawImage(candlewic, 23, 125, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 13 * 2, 12 * 2);
            XXX.beginPath();
            XXX.drawImage(mufmuf, 302, 24, 4, 6, X - this.X + (1/2 * CCC.width) - (1/2 * 4 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 6 * 2.1), 4 * 2.2, 6 * 2.1);
        }
        else if (this.type == "rawAvrakFlesh" || this.type == "rawEvrakFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 139, 2350, 39, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 0.8), 39 * 0.8, 29 * 0.8);
        }
        else if (this.type == "avrakMeat" || this.type == "evrakMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 141, 2394, 39, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 0.8), 39 * 0.8, 29 * 0.8);
        }
        else if (this.type == "avrakHide")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 142, 2287, 41, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 0.6), 41 * 0.6, 50 * 0.6);
        }
        else if (this.type == "evrakHide")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 62, 2314, 59, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 59 * 0.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50 * 0.6), 59 * 0.6, 50 * 0.6);
        }
        else if (this.type == "avrakLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 8, 2091, 66, 83, X - this.X + (1/2 * CCC.width) - (1/2 * 66), Y - this.Y + (1/2 * CCC.height) - (1/2 * 83), 66, 83);
        }
        else if (this.type == "evrakLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 18, 2002, 47, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 47 * 1.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80 * 1.05), 47 * 1.05, 80 * 1.05);
        }
        else if (this.type == "neevFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 148, 67, 21, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.25), 21 * 1.25, 17 * 1.25);
        }
        else if (this.type == "neevFur")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 176, 64, 35, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1.15), 35 * 1.15, 25 * 1.15);
        }
        else if (this.type == "ogardPerfume")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 50, 4, 15, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 15, 19);
        }
        else if (this.type == "driedTechiLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 35, 6, 11, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 11, 16);
        }
        else if (this.type == "ogard")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 36, 28, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.3), 15 * 1.3, 16 * 1.3);
        }
        else if (this.type == "groundOgard")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 37, 47, 16, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14), 16, 14);
        }
        else if (this.type == "ogardPollen")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 57, 50, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.3), 9 * 1.3, 9 * 1.3);
        }
        else if (this.type == "cloth" || this.type == "dyedMufCloth" || this.type == "horseCloth")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(5/8 * 2 * Math.PI);
            XXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 * 1.5), - (1/2 * 10 * 1.5), 29 * 1.5, 10 * 1.5);
            XXX.restore();
        }
        else if (this.type == "culprisBandage" || this.type == "laicaumBandage")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(3/8 * 2 * Math.PI);
            XXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 / 1.25), - (1/2 * 10 / 1.25), 29 / 1.25, 10 / 1.25);
            XXX.restore();
        }
        else if (this.type == "naapridFiber" || this.type == "varnFiber" || this.type == "hoffalgreFiber")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 85, 46, 10, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.65), 10 * 1.65, 18 * 1.65);
        }
        else if (this.type == "tent")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 1, 1, 32, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1.75), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.75), 32 * 1.75, 32 * 1.75);
        }
        else if (this.type == "neculaisEar")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 71, 48, 9, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.2), 9 * 1.2, 12 * 1.2);
        }
        else if (this.type == "natureCall")
        {
            XXX.beginPath();
            XXX.drawImage(horde1, 529, 36, 88, 84, X - this.X + (1/2 * CCC.width) - (1/2 * 88 * 0.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 84 * 0.2), 88 * 0.2, 84 * 0.2);
        }
        else if (this.type == "berulnToothNecklace")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 96, 3, 14, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.2), 14 * 1.2, 21 * 1.2);
        }
        else if (this.type == "techiLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 83, 147, 13, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 13, 15);
        }
        else if (this.type == "bucketOfPluttJuice" || this.type == "bucketOfHotPluttBerryCider" )
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 88, 93, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 12 * 2, 13 * 2);
        }
        else if (this.type == "pluttJuicePintGlass" || this.type == "pluttCiderPintGlass" )
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 2, 31, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.5), 9 * 1.5, 9 * 1.5);
        }
        else if (this.type == "glassBottle" || this.type == "glassBottleOfWater" || this.type == "glassBottleOfPluttWine")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 185, 36, 11, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 11 * 2, 12 * 2);
        }
        else if (this.type == "pluttWine")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 46, 196, 11, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.5), 11 * 1.5, 11 * 1.5);
        }
        else if (this.type == "bushkaBerries" || this.type == "salt")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 23, 125, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12), 13, 12);
        }
        else if (this.type == "bushkaLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 3, 118, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 14, 15);
        }
        else if (this.type == "beesWax" || this.type == "torperWax")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 1, 2, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.4), 12 * 1.4, 13 * 1.4);
        }
        else if (this.type == "oilLantern" || this.type == "oilLantern4" || this.type == "oilLantern3" || this.type == "oilLantern2" || this.type == "oilLantern1" || this.type == "oilLanternEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 26, 109, 16, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.2), 16 * 1.2, 16 * 1.2);
        }
        else if (this.type == "oilLamp" || this.type == "oilLamp2" || this.type == "oilLamp1" || this.type == "oilLampEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 51, 110, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.2), 14 * 1.2, 15 * 1.2);
        }
        else if (this.type == "vardanianLamp" || this.type == "vardanianLamp2" || this.type == "vardanianLamp1" || this.type == "vardanianLampEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 24, 217, 20, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 1), 20 * 1, 34 * 1);
        }
        else if (this.type == "jackOLantern" || this.type == "jackOLantern2" || this.type == "jackOLantern1" || this.type == "jackOLanternEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 4, 100, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.2), 17 * 1.2, 18 * 1.2);
        }
        else if (this.type == "pumpkin")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 4, 100, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.2), 17 * 1.2, 18 * 1.2);
        }
        else if (this.type == "roastedPumpkin")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 85, 44, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.2), 15 * 1.2, 16 * 1.2);
        }
        else if (this.type == "candle")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 14, 1, 11, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.2), 11 * 1.2, 16 * 1.2);
        }
        else if (this.type == "candle2")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 25, 1, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.2), 12 * 1.2, 13 * 1.2);
        }
        else if (this.type == "candle1")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 35, 1, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.2), 12 * 1.2, 10 * 1.2);
        }
        else if (this.type == "pluttMoffling")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 1, 211, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
        }
        else if (this.type == "akerMoffling")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 22, 211, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
        }
        else if (this.type == "rawMofflingFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 86, 110, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
        }
        else if (this.type == "mofflingMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 104, 111, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
        }
        else if (this.type == "rawMofuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 86, 110, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
        }
        else if (this.type == "mofuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 104, 111, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
        }
        else if (this.type == "rawLargeMofuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 86, 110, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
        }
        else if (this.type == "largeMofuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 104, 111, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
        }
        else if (this.type == "fattyMofuLiver")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 114, 67, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 2), 9 * 2, 9 * 2);
        }
        else if (this.type == "mofuFeather")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 139, 54, 11, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 11, 13);
        }
        else if (this.type == "mofuFoot")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 122, 56, 11, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7), 11, 7);
        }
        else if (this.type == "mofuEgg")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 109, 54, 8, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 8, 11);
        }
        else if (this.type == "cookedMofuEgg")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 96, 54, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10), 11, 10);
        }
        else if (this.type == "fermentedMofuEgg")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 96, 45, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10), 11, 10);
        }
        else if (this.type == "rawGrushFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1208, 27, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 14, 16);
        }
        else if (this.type == "grushMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1207, 43, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 14, 16);
        }
        else if (this.type == "grushFur")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1204, 7, 18, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 18, 16);
        }
        else if (this.type == "grushFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1249, 69, 31, 52, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 52 * 1.9), 31 * 1.9, 52 * 1.9);
        }
        else if (this.type == "iron")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1212, 561, 28, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 28), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 28, 18);
        }
        else if (this.type == "steel")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1461, 563, 28, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 28), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 28, 15);
        }
        else if (this.type == "santhGrain")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2943, 205, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 19, 19);
        }
        else if (this.type == "santhFlour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2977, 204, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 19, 19);
        }
        else if (this.type == "emptyBagSanth" || this.type == "emptyBagHarst")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 3016, 201, 22, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28), 22, 28);
        }
        else if (this.type == "bagOfSanthFlour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 3050, 200, 22, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28), 22, 28);
        }
        else if (this.type == "kellishSanthDough" || this.type == "nirwadenPastryDough")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2940, 230, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.6), 17 * 2.6, 14 * 2.6);
        }
        else if (this.type == "naapridButter" || this.type == "waantiButter")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2940, 230, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14), 17, 14);
        }
        else if (this.type == "santhBread")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2970, 225, 23, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 23), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23), 23, 23);
        }
        else if (this.type == "butteredSanthBread")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2965, 250, 32, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 32), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 32, 26);
        }
        else if (this.type == "velSanthBread")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 601, 1162, 29, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 29), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 29, 26);
        }
        else if (this.type == "healingSalve")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2943, 252, 11, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.5), 11 * 1.5, 17 * 1.5);
        }
        else if (this.type == "carrot")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2864, 68, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 18, 19);
        }
        else if (this.type == "suuliMelon")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2940, 67, 16, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 16, 22);
        }
        else if (this.type == "suuliMelonSlice")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2963, 68, 16, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 14, 20);
        }
        else if (this.type == "potato")
        {
            if (player.potatoInvisibility != true)
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2770, 1, 10, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 10, 16);
            }
        }
        else if (this.type == "cookedPotato")
        {
            if (player.potatoInvisibility != true)
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2782, 1, 10, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 10, 16);
            }
        }
        else if (this.type == "nechromanticDust")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 477, 922, 72, 66, X - this.X + (1/2 * CCC.width) - (1/2 * 72 * 0.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 66 * 0.35), 72 * 0.35, 66 * 0.35);
        }
        else if (this.type == "clay")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 1, 4, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2), 11 * 2, 10 * 2);
        }
        else if (this.type == "kellishClayPot")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3036, 1, 22, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.7), 22 * 1.7, 19 * 1.7);
        }
        else if (this.type == "kellishClayPotOfNaapridMilk" || this.type == "kellishClayPotOfWaantiMilk")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3017, 1, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.7), 20 * 1.7, 18 * 1.7);
        }
        else if (this.type == "kellishClayPotOfWater")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 359, 37, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "kellishClayPotOfMushroomStew")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 408, 25, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "rawViperFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 529, 64, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "viperMeat")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 543, 63, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "viperVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 529, 78, 10, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7 * 1.3), 10 * 1.3, 7 * 1.3);
        }
        else if (this.type == "fermentedViperVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 544, 77, 12, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.3), 12 * 1.3, 9 * 1.3);
        }
        else if (this.type == "viperSnakeSkin")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 530, 52, 28, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.3), 28 * 1.3, 10 * 1.3);
        }
        else if (this.type == "rasper")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 651, 45, 21, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 1.3), 21 * 1.3, 45 * 1.3);
        }
        else if (this.type == "jvostranPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 350, 660, 66, 106, X - this.X + (1/2 * CCC.width) - (1/2 * 66), Y - this.Y + (1/2 * CCC.height) - (1/2 * 106), 66, 106);
        }
        else if (this.type == "waterPintGlass")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 204, 17, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "sonjaPuree")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 769, 1134, 14, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.5), 14 * 1.5, 9 * 1.5);
        }
        else if (this.type == "spicedSonjaPuree")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 783, 1134, 14, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.5), 14 * 1.5, 9 * 1.5);
        }
        else if (this.type == "harstGrain")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 241, 45, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 12, 13);
        }
        else if (this.type == "harstAle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 247, 17, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 10 * 1.5, 10 * 1.5);
        }
        else if (this.type == "santhAle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 164, 19, 10, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.5), 10 * 1.5, 11 * 1.5);
        }
        else if (this.type == "mead")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 218, 17, 10, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.5), 10 * 1.5, 11 * 1.5);
        }
        else if (this.type == "techiTea")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 21, 48, 13, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 13 * 1.5, 13 * 1.5);
        }
        else if (this.type == "pintGlass")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 149, 19, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 10 * 1.5, 10 * 1.5);
        }
        else if (this.type == "energilPotionI" || this.type == "energilPotionII" || this.type == "energilPotionIII" || this.type == "energilPotionIV" || this.type == "energilPotionV" || this.type == "palggaPerfume")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1700, 180, 12, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 12, 19);
        }
        else if (this.type == "mindPotionI" || this.type == "mindPotionII" || this.type == "mindPotionIII" || this.type == "mindPotionIV" || this.type == "mindPotionV")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 431, 945, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
        }
        else if (this.type == "mana")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1775, 183, 9, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 9, 17);
        }
        else if (this.type == "mightPotionI" || this.type == "mightPotionII" || this.type == "mightPotionIII" || this.type == "mightPotionIV" || this.type == "mightPotionV" || this.type == "tascalSalve")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1788, 183, 9, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 9, 16);
        }
        else if (this.type == "neevBlood" || this.type == "stomwikCream")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1741, 183, 8, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 8, 16);
        }
        else if (this.type == "utExtract")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 431, 972, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
        }
        else if (this.type == "potionGlass" || this.type == "emptyVialOfGojiiPoison" || this.type == "laicaumExtract")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 419, 1, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
        }
        else if (this.type == "vialOfWater" || this.type == "vialOfGojiiPoison" || this.type == "reconstructionPotion")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 406, 1, 10, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 10, 16);
        }
        else if (this.type == "walrusLeatherWaterskin" || this.type == "walrusLeatherWaterskinOne" || this.type == "walrusLeatherWaterskinTwo" || this.type == "walrusLeatherWaterskinFull")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 79, 5, 19, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "bucket")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 101, 27, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "bucketOfWater")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 133, 27, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "bucketOfTechiTea")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 2, 61, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2), 17 * 2, 17 * 2);
        }
        else if (this.type == "bucketOfNaapridMilk" || this.type == "bucketOfWaantiMilk")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 118, 27, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "halcifMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 33, 62, 13, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 13, 15);
        }
        else if (this.type == "cyrinthilimMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 53, 27, 10, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14), 10, 14);
        }
        else if (this.type == "glinMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 5, 1, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 18, 18);
        }
        else if (this.type == "tepprekliaFungus")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 3011, 70, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 14, 16);
        }
        else if (this.type == "driedCyrinthilimMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 52, 45, 12, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 12, 11);
        }
        else if (this.type == "boiledGlinMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 56, 1, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 18, 18);
        }
        else if (this.type == "tylunFlower")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2155, 64, 28, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 28), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33), 28, 33);
        }
        else if (this.type == "stomwikLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2171, 44, 21, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 21, 16);
        }
        else if (this.type == "culprisLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2154, 160, 20, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 20, 13);
        }
        else if (this.type == "neprilneBerries")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2148, 516, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 15, 16);
        }
        else if (this.type == "hracklePod")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 462, 457, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14), 15, 14);
        }
        else if (this.type == "pluttBerries")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2111, 32, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 19, 19);
        }
        else if (this.type == "driedPluttBerries")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 104, 47, 17, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 17, 19);
        }
        else if (this.type == "driedPluttBerriesWithHoney")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 103, 72, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 19, 19);
        }
        else if (this.type == "akerBerries")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2170, 20, 22, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 22, 19);
        }
        else if (this.type == "callopBerries")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 76, 367, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2), 10 * 2, 10 * 2);
        }
        else if (this.type == "darbBerries")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 64, 386, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2), 10 * 2, 10 * 2);
        }
        else if (this.type == "bequonFruit")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2990, 70, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 17, 17);
        }
        else if (this.type == "luufBerries")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 367, 21, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10), 10, 10);
        }
        else if (this.type == "wyrLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 395, 167, 13, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.5), 13 * 1.5, 11 * 1.5);
        }
        else if (this.type == "kellishSawClub")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 645, 466, 17, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55), 17, 55);
        }
        else if (this.type == "kellishClaymore")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 600, 435, 22, 112, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 112), 22, 112);
        }
        else if (this.type == "gribPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1095, 155, 31, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.2), 31 * 1.2, 19 * 1.2);
        }
        else if (this.type == "rawGribFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1393, 196, 20, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 20, 22);
        }
        else if (this.type == "gribMeat")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1371, 197, 20, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 20, 22);
        }
        else if (this.type == "hammer")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 512, 514, 36, 49, X - this.X + (1/2 * CCC.width) - (1/2 * 36 / 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49 / 1.3), 36 / 1.3, 49 / 1.3);
        }
        else if (this.type == "thenganWarhammer")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 2, 120, 32, 62, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 62 * 1.15), 32 * 1.15, 62 * 1.15);
        }
        else if (this.type == "warHammer")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 535, 411, 40, 72, X - this.X + (1/2 * CCC.width) - (1/2 * 40 / 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 72 / 1.3), 40 / 1.3, 72 / 1.3);
        }
        else if (this.type == "tablet" || this.type == "stolenTablet" || this.type == "iceClaymore" || this.type == "leechingTouch" || this.type == "shadowport" || this.type == "theFrozenWord" || this.type == "shell")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1859, 36, 22, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27), 22, 27);
        }
        else if (this.type == "narthwarpMouth")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1901, 74, 30, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 30, 18);
        }
        else if (this.type == "lrgNarthwarpMouth")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1901, 74, 30, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 2), 30 * 2, 18 * 2);
        }
        else if (this.type == "fermentedNarthwarpMouth")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1844, 64, 37, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 37), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32), 37, 32);
        }
        else if (this.type == "embers" || this.type == "fireballI" || this.type == "flyingColours" || this.type == "iceSpikes" || this.type == "drainingI" || this.type == "fireHands" || this.type == "sorcerer'sRaincoat" || this.type == "summonWolf" || this.type == "healingPsalms" || this.type == "undyingWard" || this.type == "despell" || this.type == "scroll")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1967, 67, 33, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 33, 26);
        }
        else if (this.type == "repel" || this.type == "minorVortex" || this.type == "lifeTap" || this.type == "electricBolt" || this.type == "chargedTouch" || this.type == "shieldingIII" || this.type == "shieldingIV" || this.type == "summonFrich" || this.type == "shadowSwitch" || this.type == "corporalityWard" || this.type == "shadowCrow")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1922, 4, 23, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 23), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32), 23, 32);
        }
        else if (this.type == "magicMissiles" || this.type == "entanglement" || this.type == "summonGriffin" || this.type == "flamingMissiles" || this.type == "windBlast" || this.type == "antherPlague")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1804, 36, 26, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 26), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23), 26, 23);
        }
        else if (this.type == "iceberg" || this.type == "whirlwind" || this.type == "doppelganger")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 455, 455, 39, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.22), 39 * 1.22, 24 * 1.22);
        }
        else if (this.type == "repellingWard" || this.type == "slowTimeI" || this.type == "slowTimeII" || this.type == "slowTimeIII" || this.type == "slowTimeIV" || this.type == "slowTimeV" || this.type == "slowTimeVI" || this.type == "eruption")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 414, 461, 24, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.25), 24 * 1.25, 17 * 1.25);
        }
        else if (this.type == "sanctuary" || this.type == "mark" || this.type == "iceBlast" || this.type == "arcaneOrbs")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 521, 447, 30, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29 * 1.25), 30 * 1.25, 29 * 1.25);
        }
        else if (this.type == "vivification" || this.type == "freezingGrasp" || this.type == "shieldingV" || this.type == "charm" || this.type == "drakeBreath" || this.type == "spiritBear")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1928, 39, 40, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 40), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 40, 21);
        }
        else if (this.type == "frostWind" || this.type == "chasingLights" || this.type == "surge" || this.type == "shieldingI" || this.type == "shieldingII" || this.type == "summonDemon" || this.type == "potatoInvisibility" || this.type == "powerDraw" || this.type == "beholderRift")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1773, 3, 28, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 28), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 28, 30);
        }
        else if (this.type == "rawHumanFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 9, 25, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.5), 24, 16 * 1.5);
        }
        else if (this.type == "humanMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 27, 25, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.5), 24, 16 * 1.5);
        }
        else if (this.type == "rawBearFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 9, 25, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
        }
        else if (this.type == "bearMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 27, 25, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
        }
        else if (this.type == "rawBearTongue")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 757, 12, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
        }
        else if (this.type == "bearTongue")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 757, 29, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
        }
        else if (this.type == "smlBlackBearPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 558, 18, 53, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 53), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 53, 30);
        }
        else if (this.type == "medBlackBearPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 558, 18, 53, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.4), 53 * 1.4, 30 * 1.4);
        }
        else if (this.type == "lrgBlackBearPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 558, 18, 53, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 3.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 3.35), 53 * 3.35, 30 * 3.35);
        }
        else if (this.type == "vardanianHeavyCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 779, 1, 17, 68, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 68 * 1.1), 17 * 1.1, 68 * 1.1);
        }
        else if (this.type == "smlGlutidOoze")
        {
            var sizeMult = 1;
            if (Y > 6290 || Y > -3919 && currentSeason == "Frost")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 313, 268, 40, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * sizeMult), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
            }
            else
            {
                this.flashAnimate(100 + 100 * Math.random(), 0, 1, [{image: theCrack, imgX: 313, imgY: 268, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 250, imgY: 266, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 187, imgY: 270, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 123, imgY: 268, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}]);
            }
        }
        else if (this.type == "medGlutidOoze")
        {
            var sizeMult = 1.5;
            if (Y > 6290 || Y > -3919 && currentSeason == "Frost")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 313, 268, 40, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * sizeMult), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
            }
            else
            {
                this.flashAnimate(100 + 100 * Math.random(), 0, 1, [{image: theCrack, imgX: 313, imgY: 268, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 250, imgY: 266, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 187, imgY: 270, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 123, imgY: 268, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}]);
            }
        }
        else if (this.type == "lrgGlutidOoze")
        {
            var sizeMult = 2;
            if (Y > 6290 || Y > -3919 && currentSeason == "Frost")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 313, 268, 40, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 40 * sizeMult), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
            }
            else
            {
                this.flashAnimate(100 + 100 * Math.random(), 0, 1, [{image: theCrack, imgX: 313, imgY: 268, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 250, imgY: 266, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 187, imgY: 270, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}, {image: theCrack, imgX: 123, imgY: 268, portionW: 40, portionH: 37, adjX: - (1/2 * 40 * sizeMult), adjY: - (1/2 * 37 * sizeMult), width: 40 * sizeMult, height: 37 * sizeMult}]);
            }
        }
        else if (this.type == "pelcridOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 650, 95, 32, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 1.7), 32 * 1.7, 22 * 1.7);
        }
        else if (this.type == "smlOolidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 94, 171, 37, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 37), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 37, 35);
        }
        else if (this.type == "medOolidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 94, 171, 37, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 1.5), 37 * 1.5, 35 * 1.5);
        }
        else if (this.type == "lrgOolidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 94, 171, 37, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 37 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35 * 2), 37 * 2, 35 * 2);
        }
        else if (this.type == "shehidOozeSml")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1329, 19, 21, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 21, 22);
        }
        else if (this.type == "shehidOozeLrg")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1329, 19, 21, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 2), 21 * 2, 22 * 2);
        }
        else if (this.type == "shehidShellSml")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1358, 19, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 25, 24);
        }
        else if (this.type == "shehidShellLrg")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1358, 19, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 2), 25 * 2, 24 * 2);
        }
        else if (this.type == "timberAxe")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 294, 330, 29, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 1.4), 29 * 1.4, 45 * 1.4);
        }
        else if (this.type == "curvedDagger")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3538, 605, 10, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 10, 30);
        }
        else if (this.type == "dualCurvedDaggers")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3552, 605, 16, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 16, 30);
        }
        else if (this.type == "nirineseSpear")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 8, 1511, 13, 79, X - this.X + (1/2 * CCC.width) - (1/2 * 15.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 94.8), 15.6, 94.8);
        }
        else if (this.type == "crossbow")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3169, 118, 36, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 37.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35.7), 37.8, 35.7);
        }
        else if (this.type == "steelBolt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3152, 1, 19, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 22.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25.2), 22.8, 25.2);
        }
        else if (this.type == "varnFurDress")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 51, 387, 39, 52, X - this.X + (1/2 * CCC.width) - (1/2 * 60.45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80.6), 62.4, 83.2);
        }
        else if (this.type == "varnFurCloak")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 46, 439, 50, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 77.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 92.55), 77.5, 92.55);
        }
        else if (this.type == "varnFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 91, 380, 50, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 80), Y - this.Y + (1/2 * CCC.height) - (1/2 * 95.6), 80, 95.6);
        }
        else if (this.type == "waantiFurOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 216, 457, 43, 65, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 65 * 1.5), 43 * 1.5, 65 * 1.5);
        }
        else if (this.type == "frichFurMittens")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 386, 21, 19, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.2), 19 * 1.2, 11 * 1.2);
        }
        else if (this.type == "frichFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 258, 316, 37, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 59.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 96), 59.2, 96);
        }
        else if (this.type == "wizardGown")
        {
            XXX.beginPath();
            XXX.drawImage(zer0, 67, 254, 18, 41, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 2.85), Y - this.Y + (1/2 * CCC.height) - (1/2 * 41 * 2.85), 18 * 2.85, 41 * 2.85);
        }
        else if (this.type == "purpleMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 765, 98, 43, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 2.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 2.05), 43 * 2.05, 54 * 2.05);
        }
        else if (this.type == "redMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 643, 98, 43, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 2.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 2.05), 43 * 2.05, 54 * 2.05);
        }
        else if (this.type == "cyanMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 526, 95, 43, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 2.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 2.05), 43 * 2.05, 54 * 2.05);
        }
        else if (this.type == "whiteMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 884, 103, 43, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 2.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 2.05), 43 * 2.05, 54 * 2.05);
        }
        else if (this.type == "blackMageRobe" || this.type == "pyromothSilkRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 882, 213, 43, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 2.05), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54 * 2.05), 43 * 2.05, 54 * 2.05);
        }
        else if (this.type == "hetmerArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 150, 309, 52, 66, X - this.X + (1/2 * CCC.width) - (1/2 * 72.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 92.4), 72.8, 92.4);
        }
        else if (this.type == "vardanianBattleAxe")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 374, 354, 29, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 37.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 74.1), 37.7, 74.1);
        }
        else if (this.type == "dualVardanianBattleAxe")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 135, 682, 58, 64, X - this.X + (1/2 * CCC.width) - (1/2 * 58 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 64 * 1.4), 58 * 1.4, 64 * 1.4);
        }
        else if (this.type == "rawOlkrinFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3143, 290, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 46.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "olkrinMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3114, 290, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 46.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "olkrinSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3033, 290, 49, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 73.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54), 73.5, 54);
        }
        else if (this.type == "olkrinHorn")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3087, 287, 26, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 52), Y - this.Y + (1/2 * CCC.height) - (1/2 * 68), 52, 68);
        }
        else if (this.type == "goliathOlkrinSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3033, 290, 49, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 98), Y - this.Y + (1/2 * CCC.height) - (1/2 * 72), 98, 72);
        }
        else if (this.type == "olkrinArm")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3175, 287, 67, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 107.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 71.4), 107.2, 71.4);
        }
        else if (this.type == "olkrinMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3114, 290, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 46.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "vardanianCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 250, 359, 14, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 17.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 67.5), 17.5, 67.5);
        }
        else if (this.type == "hyelingCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 134, 3, 29, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33 * 1.6), 29 * 1.6, 33 * 1.6);
        }
        else if (this.type == "rawVarnFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3099, 1, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 27, 22.5);
        }
        else if (this.type == "varnMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3115, 1, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 27, 22.5);
        }
        else if (this.type == "varnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2994, 291, 27, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 40.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 40.5, 22.5);
        }
        else if (this.type == "beartrap")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 83, 8, 10, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.5), 10 * 1.5, 9 * 1.5);
        }
        else if (this.type == "clawtrap")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 96, 26, 32, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 32 * 1.5, 18 * 1.5);
        }
        else if (this.type == "fireStarter")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2922, 136, 14, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16.5), 21, 16.5);
        }
        else if (this.type == "wood")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2917, 174, 23, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 34.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 34.5, 34.5);
            XXX.drawImage(verse, 2917, 174, 23, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 34.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 34.5, 34.5);
        }
        else if (this.type == "katana")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 168, 364, 16, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 81), 25, 81);
        }
        else if (this.type == "winterWolfOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3126, 156, 40, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 72), Y - this.Y + (1/2 * CCC.height) - (1/2 * 90), 72, 90);
        }
        else if (this.type == "winterWolfClothing")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3223, 157, 40, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 68), Y - this.Y + (1/2 * CCC.height) - (1/2 * 85), 72, 90);
        }
        else if (this.type == "freydicRoyalOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2959, 151, 41, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 74.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 108), 74.2, 108);
        }
        else if (this.type == "fineFreydicOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 294, 298, 42, 65, X - this.X + (1/2 * CCC.width) - (1/2 * 42 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 65 * 1.6), 42 * 1.6, 65 * 1.6);
        }
        else if (this.type == "fineFreydicOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 286, 527, 41, 77, X - this.X + (1/2 * CCC.width) - (1/2 * 41 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 77 * 1.5), 41 * 1.5, 77 * 1.5);
        }
        else if (this.type == "naapridLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3171, 59, 34, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 61.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 101.6), 61.2, 101.6);
        }
        else if (this.type == "freydicRoyalDress")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3049, 148, 30, 47, X - this.X + (1/2 * CCC.width) - (1/2 * 57), Y - this.Y + (1/2 * CCC.height) - (1/2 * 87.3), 57, 87.3);
        }
        else if (this.type == "winterWolfDress")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3012, 147, 30, 47, X - this.X + (1/2 * CCC.width) - (1/2 * 57), Y - this.Y + (1/2 * CCC.height) - (1/2 * 87.3), 57, 87.3);
        }
        else if (this.type == "rawYoungNaapridFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3133, 10, 15, 9.5, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17.1), 27, 17.1);
        }
        else if (this.type == "youngNaapridMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3133, 1, 15, 9.5, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17.1), 27, 17.1);
        }
        else if (this.type == "rawNaapridFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2970, 1, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 38.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 38.5, 35);
        }
        else if (this.type == "naapridMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2995, 1, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 38.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 38.5, 35);
        }
        else if (this.type == "naapridPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2924, 1, 26, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40), 65, 40);
        }
        else if (this.type == "naapridHorn")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2951, 1, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 31.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29.4), 31.5, 29.4);
        }
        else if (this.type == "thenganSwordAndShield")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3515, 140, 48, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 61.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 48), 61.2, 48);
        }
        else if (this.type == "rawTrollsBlood")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 452, 33, 8, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 12, 21);
        }
        else if (this.type == "jarOfOil" || this.type == "jarOfButterMellowOil" || this.type == "jarOfSonjaSap")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 97, 3, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21.5), 15, 21.5);
        }
        else if (this.type == "glassJar" || this.type == "jarOfGlassworm" && player.sleep > 0)
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 465, 33, 8, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 12, 21);
        }
        else if (this.type == "jarOfGlassworm" && player.sleep <= 0)
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1013, 75, 9, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.5), 9 * 1.5, 14 * 1.5);
        }
        else if (this.type == "chainArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 38, 310, 40, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 60), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91.5), 60, 91.5);
        }
        else if (this.type == "blackChainArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 80, 310, 40, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 60), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91.5), 60, 91.5);
        }
        else if (this.type == "freydicGreatSword")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 126, 302, 16, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 19.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 84), 19.2, 84);
        }
        else if (this.type == "theNorthernGem")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 257, 436, 24, 73, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 1.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 73 * 1.35), 24 * 1.35, 73 * 1.35);
        }
        else if (this.type == "hugeBogTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 63, 264, 45, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 67.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54), 67.5, 54);
        }
        else if (this.type == "bogTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 63, 264, 45, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 49.5, 39.6);
        }
        else if (this.type == "babyBogTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 63, 264, 45, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 22.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 22.5, 18);
        }
        else if (this.type == "trollFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2875, 1, 19, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 38), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 38, 36);
        }
        else if (this.type == "trollMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2900, 1, 19, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 38), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 38, 36);
        }
        else if (this.type == "aldrekiiArrow" || this.type == "timeArrow")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2832, 3, 41, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 32), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12), 32, 12);
        }
        else if (this.type == "rawWolfLiver")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2769, 2, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 10, 15);
        }
        else if (this.type == "wolfLiver")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2782, 2, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 10, 15);
        }
        else if (this.type == "winterWolfMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2812, 1, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 21, 24);
        }
        else if (this.type == "rawWinterWolfFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2794, 1, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 21, 24);
        }
        else if (this.type == "winterWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2737, 2, 29, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 52.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28.8), 52.2, 28.8);
        }
        else if (this.type == "massiveWinterWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2737, 2, 29, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 92.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51.2), 92.8, 51.2);
        }
        else if (this.type == "greyWolfMeat")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2812, 1, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 21, 24);
        }
        else if (this.type == "rawGreyWolfFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2794, 1, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 21, 24);
        }
        else if (this.type == "greyWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2737, 2, 29, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 52.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28.8), 52.2, 28.8);
        }
        else if (this.type == "massiveGreyWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2737, 2, 29, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 92.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51.2), 92.8, 51.2);
        }
        else if (this.type == "energyPotionI" || this.type == "energyPotionII" || this.type == "energyPotionIII")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 38, 267, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
        }
        else if (this.type == "speedPotionI" || this.type == "speedPotionII" || this.type == "speedPotionIII")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 86, 134, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
        }
        else if (this.type == "cleansingPotion" || this.type == "wobeaExtract" || this.type == "mandrakeJuice" || this.type == "silverbloodPotion")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 35, 134, 11, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 11, 19);
        }
        else if (this.type == "freydicSword")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2089, 2, 13, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 16.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 57.5), 16.25, 57.5);
        }
        else if (this.type == "kellishSword")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 70, 1, 15, 49, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49 * 1.3), 15 * 1.3, 49 * 1.3);
        }
        else if (this.type == "pickaxe")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 103, 233, 22, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39), 33, 39);
        }
        else if (this.type == "aldrekiiBlade")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2057, 4, 20, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54), 24, 54);
        }
        else if (this.type == "aldrekiiClaws")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 268, 214, 22, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 2), 22 * 2, 23 * 2);
        }
        else if (this.type == "flail")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1995, 1, 37, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 55.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49.5), 55.5, 49.5);
        }
        else if (this.type == "torperVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 40, 226, 17, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 17, 16);
        }
        else if (this.type == "torperFuzz")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1867, 9, 23, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 23), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 23, 20);
        }
        else if (this.type == "rawTorperFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1894, 3, 18, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 18, 11);
        }
        else if (this.type == "torperMeat")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1895, 16, 18, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 18, 11);
        }
        else if (this.type == "gulfreyShellArmour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1, 157, 36, 63, X - this.X + (1/2 * CCC.width) - (1/2 * 36), Y - this.Y + (1/2 * CCC.height) - (1/2 * 63), 49.4, 90.6);
        }
        else if (this.type == "grewbleEgg")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 9, 29, 12, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 12 * 2, 12 * 2);
        }
        else if (this.type == "grewbleGuts")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 30, 1, 21, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 21, 16);
        }
        else if (this.type == "lorkWeed")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 106, 173, 20, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2), 20 * 2, 17 * 2);
        }
        else if (this.type == "sesreStamen")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 263, 110, 10, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 2), 10 * 2, 16 * 2);
        }
        else if (this.type == "sesreLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 282, 113, 15, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 15 * 2, 13 * 2);
        }
        else if (this.type == "hoffalgreFurCloak")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 730, 2, 24, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 2.585), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40 * 2.585), 24 * 2.585, 40 * 2.585);
        }
        else if (this.type == "hoffalgrePelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 5, 6, 24, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 24 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 2.2), 24 * 2.2, 9 * 2.2);
        }
        else if (this.type == "rawHoffalgreFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 5, 18, 14, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "hoffalgreMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 21, 18, 14, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "hoffalgreTendrils")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 33, 6, 14, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "agedHoffalgreTendrils")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 34, 16, 14, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 2.2), 14 * 1.6, 10 * 2.2);
        }
        else if (this.type == "frichPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 1832, 10, 31, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 31), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 31, 18);
        }
        else if (this.type == "mountainFrichPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1832, 10, 31, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.5), 31 * 1.5, 18 * 1.5);
        }
        else if (this.type == "rawFrichFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 65, 226, 10, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 20, 24);
        }
        else if (this.type == "frichMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 79, 227, 10, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 20, 24);
        }
        else if (this.type == "lombrisFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 865, 234, 19, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "rawThuegTripe")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 415, 96, 22, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.5), 22 * 1.5, 15 * 1.5);
        }
        else if (this.type == "thuegTripe")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 415, 116, 22, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.5), 22 * 1.5, 15 * 1.5);
        }
        else if (this.type == "waantiPelt")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 155, 62, 20, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27 * 1.6), 20 * 1.6, 27 * 1.6);
        }
        else if (this.type == "rawWaantiFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 128, 95, 14, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.6), 14 * 1.6, 19 * 1.6);
        }
        else if (this.type == "waantiMeat")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 109, 95, 14, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.6), 14 * 1.6, 19 * 1.6);
        }
        else if (this.type == "nogSkin")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 692, 143, 25, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 25, 21);
        }
        else if (this.type == "rawNogFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 724, 145, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 16, 17);
        }
        else if (this.type == "nogMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 740, 146, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 16, 17);
        }
        else if (this.type == "rawUtFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 233, 960, 29, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.25), 29 * 1.25, 24 * 1.25);
        }
        else if (this.type == "utMeat")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 277, 962, 29, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 1.25), 29 * 1.25, 24 * 1.25);
        }
        else if (this.type == "fermentedUtTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 375, 950, 32, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36 * 1.25), 32 * 1.25, 36 * 1.25);
        }
        else if (this.type == "utTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 318, 958, 43, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 43 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23 * 1.25), 43 * 1.25, 23 * 1.25);
        }
        else if (this.type == "rawMountainFrichFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 65, 226, 10, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 2.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 2), 20 * 2, 24 * 2);
        }
        else if (this.type == "mountainFrichMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 79, 227, 10, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 2.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 2), 20 * 2, 24 * 2);
        }
        else if (this.type == "vardanianAxe")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 53, 158, 37, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 37), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 37, 22);
        }
        else if (this.type == "vardanianAxeDual")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 48, 187, 31, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 31), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 31, 35);
        }
        else if (this.type == "gulfreyShell")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 48, 41, 31, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 31), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23), 31, 23);
        }
        else if (this.type == "freydicSpear")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 4, 227, 20, 75, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 75), 20, 75);
        }
        else if (this.type == "gulfreyMandibles")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2, 92, 33, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33), 33, 33);
        }
        else if (this.type == "rawGulfreyFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 37, 9, 20, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 20, 20);
        }
        else if (this.type == "gulfreyMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 66, 9, 20, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 20, 20);
        }
        else if (this.type == "mudflyMeat")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 209, 89, 14, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 14) * 2, Y - this.Y + (1/2 * CCC.height) - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "rawMudflyFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 209, 77, 14, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 14) * 2, Y - this.Y + (1/2 * CCC.height) - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "mudflyMold")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 209, 65, 14, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 14) * 2, Y - this.Y + (1/2 * CCC.height) - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "vomit")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 55, 135, 24, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 24, 21);
        }
        else if (this.type == "bloodyVomit")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 510, 432, 43, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 43), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37), 43, 37);
        }
        else if (this.type == "gojiiBerries")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 615, 3, 19, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 19, 15);
        }
        else if (this.type == "nirineseSabre")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 7, 7, 26, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 26), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80), 26, 80);
        }
        else if (this.type == "freezingArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 66, 73, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
        }
        else if (this.type == "fireArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 66, 80, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
        }
        else if (this.type == "lifeLeachArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 65, 88, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
        }
        else if (this.type == "oiledArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 67, 57, 19, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 28.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10.5), 28.5, 10.5);
        }
        else if (this.type == "shehidToxinArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 66, 21, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
        }
        else if (this.type == "steelArrow")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 182, 104, 23, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 34.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 23, 9);
        }
        else if (this.type == "arrow")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 432, 554, 20, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12), 20, 8);
        }
        else if (this.type == "ogoFruit")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 426, 4, 12, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 18, 22.5);
        }
        else if (this.type == "blueBlade")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 8, 531, 57, 63, X - this.X + (1/2 * CCC.width) - (1/2 * 68.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 75.6), 68.4, 75.6);
        }
        else if (this.type == "berulnSkull")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 446, 3, 15, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40), 30, 40);
        }
        else if (this.type == "rawBerulnFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 526, 6, 21, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 31.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 31.5, 34.5);
        }
        else if (this.type == "berulnMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 506, 38, 21, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 31.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 31.5, 34.5);
        }
        else if (this.type == "bigBerulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 465, 1, 51, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 117.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 69), 117.3, 69);
        }
        else if (this.type == "berulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 465, 1, 51, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 102), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60), 102, 60);
        }
        else if (this.type == "bigBlackBerulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 17, 721, 56, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 2 * 0.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 2 * 0.9), 56 * 2 * 0.9, 34 * 2 * 0.9);
        }
        else if (this.type == "blackBerulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 17, 721, 56, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 56 * 2 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34 * 2 * 0.8), 56 * 2 * 0.8, 34 * 2 * 0.8);
        }
        else if (this.type == "longbow")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 380, 593, 34, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 51), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51), 51, 51);
        }
        else if (this.type == "aldrekiiLongbow")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 17, 441, 71, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 71), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70), 71, 70);
        }
        else if (this.type == "walrusLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 734, 202, 52, 58, X - this.X + (1/2 * CCC.width) - (1/2 * 52), Y - this.Y + (1/2 * CCC.height) - (1/2 * 58), 72.8, 81.2);
        }
        else if (this.type == "skinAndBones")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 105, 172, 30, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 72), Y - this.Y + (1/2 * CCC.height) - (1/2 * 96), 72, 96);
            XXX.drawImage(polpol, 105, 172, 30, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 72), Y - this.Y + (1/2 * CCC.height) - (1/2 * 96), 72, 96);
        }
        else if (this.type == "balgurMercArmour")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 4, 105, 39, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70 * 1.5), 39 * 1.5, 70 * 1.5);
        }
        else if (this.type == "balgurCaptainArmour")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 97, 108, 39, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70 * 1.5), 39 * 1.5, 70 * 1.5);
        }
        else if (this.type == "rawWalrusFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 99, 4, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 26.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 26.5, 30);
        }
        else if (this.type == "aldrekiiBardiche")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 580, 253, 42, 137, X - this.X + (1/2 * CCC.width) - (1/2 * 42), Y - this.Y + (1/2 * CCC.height) - (1/2 * 137), 35.6, 109.6);
        }
        else if (this.type == "rawTilkFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 950, 236, 27, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 27, 21);
        }
        else if (this.type == "tilkMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 918, 236, 27, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 27, 21);
        }
        else if (this.type == "tilkTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 982, 238, 27, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 27, 21);
        }
        else if (this.type == "lrgTilkTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 982, 238, 27, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.4), 27 * 1.4, 21 * 1.4);
        }
        else if (this.type == "giantTilkTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 982, 238, 27, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 27 * 3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 3), 27 * 3, 21 * 3);
        }
        else if (this.type == "rawWalrusFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 99, 4, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 26.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 26.5, 30);
        }
        else if (this.type == "walrusMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 257, 1, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 26.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 26.5, 30);
        }
        else if (this.type == "walrusHide")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 287, 3, 45, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 112.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55), 103.5, 50.6);
        }
        else if (this.type == "elderWalrusHide")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 287, 3, 45, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 157.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 77), 148.5, 72.6);
        }
        else if (this.type == "blubber")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 368, 9, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 24, 26);
        }
        else if (this.type == "walrusTusks")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 341, 10, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 42.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32.5), 42.5, 32.5);
        }
        else if (this.type == "elderWalrusTusks")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 341, 10, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 68), Y - this.Y + (1/2 * CCC.height) - (1/2 * 52), 68, 52);
        }
        else if (this.type == "mace")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 554, 10, 61, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 61), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 61, 36);
        }
        else if (this.type == "staff")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 211, 111, 77, 5, X - this.X + (1/2 * CCC.width) - (1/2 * 77 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 5 * 1), 77 * 1, 5 * 1);
        }
        else if (this.type == "thenganDagger")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 86, 5, 17, 37, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 37 * 1), 17 * 1, 37 * 1);
        }
        else if (this.type == "lightningCorseque")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 247, 54, 33, 77, X - this.X + (1/2 * CCC.width) - (1/2 * 33 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 77 * 1.5), 33 * 1.5, 77 * 1.5);
        }
        else if (this.type == "smashStick" || this.type == "burningSmashStick")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 189, 86, 23, 44, X - this.X + (1/2 * CCC.width) - (1/2 * 23 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 44 * 1.5), 23 * 1.5, 44 * 1.5);
        }
        else if (this.type == "longSpikedMorningStar")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 151, 128, 39, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1.15), 39 * 1.15, 39 * 1.15);
        }
        else if (this.type == "longsword" || this.type == "adolfsNewSword")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 75, 366, 17, 47, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 47), 17, 64);
        }
        else if (this.type == "freydicWarAxe")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 17, 115, 113, 104, X - this.X + (1/2 * CCC.width) - (1/2 * 113), Y - this.Y + (1/2 * CCC.height) - (1/2 * 104), 113, 104);
        }
        else if (this.type == "rawEtyrFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 43, 684, 16, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 16, 13);
        }
        else if (this.type == "etyrMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 73, 684, 16, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 16, 13);
        }
        else if (this.type == "etyrHide")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 37, 720, 25, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 25, 18);
        }
        else if (this.type == "trollsBlood")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 385, 7, 11, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 16.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 16.5, 22.5);
        }
        else if (this.type == "yaihefBerries")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 62, 508, 16, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 16, 16);
        }
    };

    this.drawInventoryItem = function(type, invX, invY)
    {
        this.invX = invX;
        this.invY = invY;
        this.type = type;

        if (this.type == "coins")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 405, 4, 16, 17, this.invX - (1/2 * 32), this.invY - (1/2 * 34), 32, 34);
        }
        else if (this.type == "unitMarker")
        {
            LXX.beginPath();
            LXX.fillStyle = "gold";
            LXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            LXX.fill();
        }
        else if (this.type == "plantMarker")
        {
            LXX.beginPath();
            LXX.fillStyle = "turquoise";
            LXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            LXX.fill();
        }
        else if (this.type == "treeMarker")
        {
            LXX.beginPath();
            LXX.fillStyle = "black";
            LXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            LXX.fill();
        }
        else if (this.type == "marker")
        {
            LXX.beginPath();
            LXX.fillStyle = "#BF0000";
            LXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            LXX.fill();
        }
        else if (this.type == "shotgunAmmo")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 665, 301, 31, 29, this.invX - (1/2 * 31 * 0.6), this.invY - (1/2 * 29 * 0.6), 31 * 0.6, 29 * 0.6);
        }
        else if (this.type == "shotgun")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 690, 182, 76, 50, this.invX - (1/2 * 76 * 0.9), this.invY - (1/2 * 50 * 0.9), 76 * 0.9, 50 * 0.9);
        }
        else if (this.type == "m16CarbineClip")
        {
            LXX.beginPath();
            LXX.drawImage(troli, 342, 330, 12, 16, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 16 * 1), 12 * 1, 16 * 1);
        }
        else if (this.type == "m16Carbine")
        {
            LXX.beginPath();
            LXX.drawImage(troli, 327, 359, 81, 21, this.invX - (1/2 * 81 * 1), this.invY - (1/2 * 21 * 1), 81 * 1, 21 * 1);
        }
        else if (this.type == "freydicFolkTales" || this.type == "lonersJournal" || this.type == "inquisitorsBeastManual")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1979, 12, 17, 20, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 20 * 1), 17 * 1, 20 * 1);
        }
        else if (this.type == "madmanNote" || this.type == "ultherRIP" || this.type == "stolenTabletLetter" || this.type == "paperwork" || this.type == "falseInventionPlans" || this.type == "inventionPlans" || this.type == "estolProof" || this.type == "estolPoisoningOrders" || this.type == "killDruid")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 161, 77, 15, 23, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 23 * 1), 15 * 1, 23 * 1);
        }
        else if (this.type == "barrel" || this.type == "barrelOfWater" || this.type == "barrelOfHarstAle" || this.type == "barrelOfSanthAle" || this.type == "barrelOfMead" || this.type == "caskOfPluttWine" || this.type == "caskOfErguerWine" || this.type == "barrelOfGin" || this.type == "barrelOfCider" || this.type == "barrelOfWheatBeer")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 61, 201, 27, 29, this.invX - (1/2 * 27 * 1.5), this.invY - (1/2 * 29 * 1.5), 27 * 1.5, 29 * 1.5);
        }
        else if (this.type == "yari")
        {
            LXX.beginPath();
            LXX.drawImage(moonberry, 72, 410, 47, 149, this.invX - (1/2 * 47 * 0.55), this.invY - (1/2 * 149 * 0.55), 47 * 0.55, 149 * 0.55);
        }
        else if (this.type == "kama")
        {
            if (this.equipped == true)
            {
                LXX.beginPath();
                LXX.drawImage(moonberry, 118, 572, 36, 38, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 38 * 1), 36 * 1, 38 * 1);
            }
            else
            {
                LXX.beginPath();
                LXX.drawImage(moonberry, 70, 571, 36, 38, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 38 * 1), 36 * 1, 38 * 1);
            }
        }
        else if (this.type == "beholderStrands")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 746, 550, 37, 41, this.invX - (1/2 * 37 * 1), this.invY - (1/2 * 41 * 1), 37 * 1, 41 * 1);
        }
        else if (this.type == "yilotnyyFangs")
        {
            LXX.beginPath();
            LXX.drawImage(yil, 380, 308, 38, 33, this.invX - (1/2 * 38 * 0.65), this.invY - (1/2 * 33 * 0.65), 38 * 0.65, 33 * 0.65);
        }
        else if (this.type == "yilotnyyPelt")
        {
            LXX.beginPath();
            LXX.drawImage(yil, 52, 291, 59, 50, this.invX - (1/2 * 59 * 0.9), this.invY - (1/2 * 50 * 0.9), 59 * 0.9, 50 * 0.9);
        }
        else if (this.type == "sutetchiLeg")
        {
            LXX.beginPath();
            LXX.drawImage(olg, 37, 298, 28, 28, this.invX - (1/2 * 28 * 1.4), this.invY - (1/2 * 28 * 1.4), 28 * 1.4, 28 * 1.4);
        }
        else if (this.type == "reshidTooth")
        {
            LXX.beginPath();
            LXX.drawImage(olg, 760, 156, 16, 6, this.invX - (1/2 * 16 * 1.4), this.invY - (1/2 * 6 * 1.4), 16 * 1.4, 6 * 1.4);
        }
        else if (this.type == "scorpionClaw")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 92, 3, 56, 44, this.invX - (1/2 * 56 * 0.85), this.invY - (1/2 * 44 * 0.85), 56 * 0.85, 44 * 0.85);
        }
        else if (this.type == "scorpionClawFeast")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 87, 71, 56, 48, this.invX - (1/2 * 56 * 0.85), this.invY - (1/2 * 48 * 0.85), 56 * 0.85, 48 * 0.85);
        }
        else if (this.type == "scorpionMeat")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 118, 46, 22, 18, this.invX - (1/2 * 22 * 1.1), this.invY - (1/2 * 18 * 1.1), 22 * 1.1, 18 * 1.1);
        }
        else if (this.type == "rawScorpionFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 93, 45, 22, 18, this.invX - (1/2 * 22 * 1.1), this.invY - (1/2 * 18 * 1.1), 22 * 1.1, 18 * 1.1);
        }
        else if (this.type == "whipScorpionMeat")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1654, 198, 50, 27, this.invX - (1/2 * 50 * 0.9), this.invY - (1/2 * 27 * 0.9), 50 * 0.9, 27 * 0.9);
        }
        else if (this.type == "rawWhipScorpionFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1602, 197, 50, 27, this.invX - (1/2 * 50 * 0.9), this.invY - (1/2 * 27 * 0.9), 50 * 0.9, 27 * 0.9);
        }
        else if (this.type == "whipScorpionTail")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1514, 481, 56, 41, this.invX - (1/2 * 56 * 0.9), this.invY - (1/2 * 41 * 0.9), 56 * 0.9, 41 * 0.9);
        }
        else if (this.type == "whipScorpionFang")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1601, 229, 28, 18, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 18 * 1), 28 * 1, 18 * 1);
        }
        else if (this.type == "armadiiLeg")
        {
            LXX.beginPath();
            LXX.drawImage(pill, 56, 475, 18, 43, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 43 * 1), 18 * 1, 43 * 1);
        }
        else if (this.type == "roastedArmadiiLeg")
        {
            LXX.beginPath();
            LXX.drawImage(pill, 24, 474, 18, 43, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 43 * 1), 18 * 1, 43 * 1);
        }
        else if (this.type == "rattlerVenomGland")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 169, 165, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "barbolSkin")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 715, 175, 130, 82, this.invX - (1/2 * 130 * 0.65), this.invY - (1/2 * 82 * 0.65), 130 * 0.65, 82 * 0.65);
        }
        else if (this.type == "rawBarbolFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 697, 269, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "barbolMeat")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 752, 270, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "desertLizardSml")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 727, 544, 71, 32, this.invX - (1/2 * 71 * 1), this.invY - (1/2 * 32 * 1), 71 * 1, 32 * 1);
        }
        else if (this.type == "roastedDesertLizardSml")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 825, 545, 71, 32, this.invX - (1/2 * 71 * 1), this.invY - (1/2 * 32 * 1), 71 * 1, 32 * 1);
        }
        else if (this.type == "desertLizardLrg")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 727, 544, 71, 32, this.invX - (1/2 * 71 * 1.2), this.invY - (1/2 * 32 * 1.2), 71 * 1.2, 32 * 1.2);
        }
        else if (this.type == "roastedDesertLizardLrg")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 825, 545, 71, 32, this.invX - (1/2 * 71 * 1.2), this.invY - (1/2 * 32 * 1.2), 71 * 1.2, 32 * 1.2);
        }
        else if (this.type == "xerocoleMeat")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 180, 127, 42, 31, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 31 * 1), 42 * 1, 31 * 1);
        }
        else if (this.type == "rawXerocoleFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 131, 127, 42, 31, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 31 * 1), 42 * 1, 31 * 1);
        }
        else if (this.type == "rawXerocoleRibs")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 232, 124, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "xerocoleRibs")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 289, 124, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "xerocolePelt")
        {
            LXX.beginPath();
            LXX.drawImage(scorp, 30, 120, 99, 56, this.invX - (1/2 * 99 * 0.8), this.invY - (1/2 * 56 * 0.8), 99 * 0.8, 56 * 0.8);
        }
        else if (this.type == "raedBeetleShell")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 0, 3, 46, 26, this.invX - (1/2 * 46 * 0.9), this.invY - (1/2 * 26 * 0.9), 46 * 0.9, 26 * 0.9);
        }
        else if (this.type == "raedBeetleLeg")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 171, 2, 14, 29, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 29 * 1), 14 * 1, 29 * 1);
        }
        else if (this.type == "raedBeetleFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 60, 2, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "fermentedRaedBeetleFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 134, 4, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "raedBeetleMeat")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 97, 2, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "rawVoaiiFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 81, 37, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "voaiiSponge")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 120, 38, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "voaiiWingFragments")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 1105, 551, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "voaiiWing")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 4, 35, 43, 84, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 84 * 0.9), 43 * 0.9, 84 * 0.9);
        }
        else if (this.type == "voaiiCarapace")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 1139, 561, 60, 22, this.invX - (1/2 * 60 * 0.9), this.invY - (1/2 * 22 * 0.9), 60 * 0.9, 22 * 0.9);
        }
        else if (this.type == "naagSpine")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 39, 8, 28, 25, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 25 * 1), 28 * 1, 25 * 1);
        }
        else if (this.type == "naagMeatChunk")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 49, 88, 31, 22, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 22 * 1), 31 * 1, 22 * 1);
        }
        else if (this.type == "naagMeat")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 45, 48, 42, 37, this.invX - (1/2 * 42 * 0.95), this.invY - (1/2 * 37 * 0.95), 42 * 0.95, 37 * 0.95);
        }
        else if (this.type == "curedDriedNaag")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 2, 0, 30, 18, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 18 * 1), 30 * 1, 18 * 1);
        }
        else if (this.type == "wholeCuredDriedNaag")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 2, 86, 42, 37, this.invX - (1/2 * 42 * 0.95), this.invY - (1/2 * 37 * 0.95), 42 * 0.95, 37 * 0.95);
        }
        else if (this.type == "rawNaagFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 3, 47, 42, 37, this.invX - (1/2 * 42 * 0.95), this.invY - (1/2 * 37 * 0.95), 42 * 0.95, 37 * 0.95);
        }
        else if (this.type == "naagPelt")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 26, 120, 79, 54, this.invX - (1/2 * 79 * 0.7), this.invY - (1/2 * 54 * 0.7), 79 * 0.7, 54 * 0.7);
        }
        else if (this.type == "muon")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 685, 578, 51, 31, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "muonShell")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 685, 610, 51, 31, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "muonFruit")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 686, 637, 51, 31, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "longElkGloves")
        {
            LXX.beginPath();
            LXX.drawImage(negro, 420, 15, 54, 60, this.invX - (1/2 * 54 * 0.9), this.invY - (1/2 * 60 * 0.9), 54 * 0.9, 60 * 0.9);
        }
        else if (this.type == "longElkBoots")
        {
            LXX.beginPath();
            LXX.drawImage(negro, 477, 15, 54, 60, this.invX - (1/2 * 54 * 0.9), this.invY - (1/2 * 60 * 0.9), 54 * 0.9, 60 * 0.9);
        }
        else if (this.type == "motylinkaBoots")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 549, 144, 48, 32, this.invX - (1/2 * 48 * 0.9), this.invY - (1/2 * 32 * 0.9), 48 * 0.9, 32 * 0.9);
        }
        else if (this.type == "motylinkaGloves")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 552, 175, 44, 40, this.invX - (1/2 * 44 * 0.9), this.invY - (1/2 * 40 * 0.9), 44 * 0.9, 40 * 0.9);
        }
        else if (this.type == "redMotylinkaBoots")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 549, 144, 48, 32, this.invX - (1/2 * 48 * 0.9), this.invY - (1/2 * 32 * 0.9), 48 * 0.9, 32 * 0.9);
        }
        else if (this.type == "redMotylinkaGloves")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 552, 175, 44, 40, this.invX - (1/2 * 44 * 0.9), this.invY - (1/2 * 40 * 0.9), 44 * 0.9, 40 * 0.9);
        }
        else if (this.type == "boroyeNobleDress")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 973, 21, 58, 131, this.invX - (1/2 * 58 * 0.55), this.invY - (1/2 * 131 * 0.55), 58 * 0.55, 131 * 0.55);
        }
        else if (this.type == "boroyeNobleOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 899, 16, 58, 131, this.invX - (1/2 * 58 * 0.55), this.invY - (1/2 * 131 * 0.55), 58 * 0.55, 131 * 0.55);
        }
        else if (this.type == "redMotylinkaCloak")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 685, 25, 55, 93, this.invX - (1/2 * 55 * 0.7), this.invY - (1/2 * 93 * 0.7), 55 * 0.7, 93 * 0.7);
        }
        else if (this.type == "motylinkaCloak")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 685, 25, 55, 93, this.invX - (1/2 * 55 * 0.7), this.invY - (1/2 * 93 * 0.7), 55 * 0.7, 93 * 0.7);
        }
        else if (this.type == "vardanianGentryOutfitTan")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1578, 355, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryTanOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1663, 355, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryOutfitGreen")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1577, 552, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryGreenOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1664, 553, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryOutfitGrey")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1575, 744, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryGreyOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1662, 743, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "blackBearMediumArmour")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1611, 214, 54, 107, this.invX - (1/2 * 54 * 0.75), this.invY - (1/2 * 107 * 0.75), 54 * 0.75, 107 * 0.75);
        }
        else if (this.type == "plumedBoroyePlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 826, 19, 50, 125, this.invX - (1/2 * 50 * 0.7), this.invY - (1/2 * 125 * 0.7), 50 * 0.7, 125 * 0.7);
        }
        else if (this.type == "plumedMorrowPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 826, 19, 50, 125, this.invX - (1/2 * 50 * 0.7), this.invY - (1/2 * 125 * 0.7), 50 * 0.7, 125 * 0.7);
        }
        else if (this.type == "boroyePlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 757, 22, 50, 125, this.invX - (1/2 * 50 * 0.75), this.invY - (1/2 * 125 * 0.75), 50 * 0.75, 125 * 0.75);
        }
        else if (this.type == "morrowPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 757, 22, 50, 125, this.invX - (1/2 * 50 * 0.75), this.invY - (1/2 * 125 * 0.75), 50 * 0.75, 125 * 0.75);
        }
        else if (this.type == "redClawArmour")
        {
            LXX.beginPath();
            LXX.drawImage(negro, 335, 7, 68, 123, this.invX - (1/2 * 68 * 0.7), this.invY - (1/2 * 123 * 0.7), 68 * 0.7, 123 * 0.7);
        }
        else if (this.type == "pinkVardanianDupatta")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 521, 126, 66, 122, this.invX - (1/2 * 66 * 0.65), this.invY - (1/2 * 122 * 0.65), 66 * 0.65, 122 * 0.65);
        }
        else if (this.type == "cianVardanianDupatta")
        {
            LXX.beginPath();
            LXX.drawImage(negro, 178, 28, 68, 123, this.invX - (1/2 * 68 * 0.65), this.invY - (1/2 * 123 * 0.65), 68 * 0.65, 123 * 0.65);
        }
        else if (this.type == "elkFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 432, 126, 66, 122, this.invX - (1/2 * 66 * 0.75), this.invY - (1/2 * 122 * 0.75), 66 * 0.75, 122 * 0.75);
        }
        else if (this.type == "varminFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 122, 117, 66, 122, this.invX - (1/2 * 66 * 1.05), this.invY - (1/2 * 122 * 1.05), 66 * 1.05, 122 * 1.05);
        }
        else if (this.type == "redClawThugOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 187, 114, 66, 122, this.invX - (1/2 * 66 * 0.8), this.invY - (1/2 * 122 * 0.8), 66 * 0.8, 122 * 0.8);
        }
        else if (this.type == "redClaw")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 314, 126, 66, 122, this.invX - (1/2 * 66 * 0.68), this.invY - (1/2 * 122 * 0.68), 66 * 0.68, 122 * 0.68);
        }
        else if (this.type == "koivayaFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(trea, 637, 1769, 51, 90, this.invX - (1/2 * 51 * 0.75), this.invY - (1/2 * 90 * 0.75), 51 * 0.75, 90 * 0.75);
        }
        else if (this.type == "koivayaFurDress")
        {
            LXX.beginPath();
            LXX.drawImage(trea, 638, 1881, 51, 98, this.invX - (1/2 * 51 * 0.75), this.invY - (1/2 * 98 * 0.75), 51 * 0.75, 98 * 0.75);
        }
        else if (this.type == "zetianGloves")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 693, 69, 24, 13, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 13 * 1), 24 * 1, 13 * 1);
        }
        else if (this.type == "chapulCactus")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1633, 229, 22, 22, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 22 * 1.3), 22 * 1.3, 22 * 1.3);
        }
        else if (this.type == "chapulCactusPaste")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1661, 232, 27, 22, this.invX - (1/2 * 27 * 1.3), this.invY - (1/2 * 22 * 1.3), 27 * 1.3, 22 * 1.3);
        }
        else if (this.type == "anjayCactus")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 608, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "despinedAnjayCactus")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 659, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "roastedAnjayCactus")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 687, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "anjayFlower")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 634, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "naibArm")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1384, 705, 40, 36, this.invX - (1/2 * 40 * 1.1), this.invY - (1/2 * 36 * 1.1), 40 * 1.1, 36 * 1.1);
        }
        else if (this.type == "inumClipping")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1503, 713, 40, 36, this.invX - (1/2 * 40 * 1.2), this.invY - (1/2 * 36 * 1.2), 40 * 1.2, 36 * 1.2);
        }
        else if (this.type == "maweHunk")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1136, 277, 17, 18, this.invX - (1/2 * 17 * 1.3), this.invY - (1/2 * 18 * 1.3), 17 * 1.3, 18 * 1.3);
        }
        else if (this.type == "despinedMaweHunk")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1154, 277, 17, 18, this.invX - (1/2 * 17 * 1.3), this.invY - (1/2 * 18 * 1.3), 17 * 1.3, 18 * 1.3);
        }
        else if (this.type == "maweFlower")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1168, 180, 17, 18, this.invX - (1/2 * 17 * 1.3), this.invY - (1/2 * 18 * 1.3), 17 * 1.3, 18 * 1.3);
        }
        else if (this.type == "maleLyagushkaSkin")
        {
            LXX.beginPath();
            LXX.drawImage(cleen, 393, 50, 37, 33, this.invX - (1/2 * 37 * 1.1), this.invY - (1/2 * 33 * 1.1), 37 * 1.1, 33 * 1.1);
        }
        else if (this.type == "rawLyagushkaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(cleen, 36, 36, 28, 17, this.invX - (1/2 * 28 * 1.1), this.invY - (1/2 * 17 * 1.1), 28 * 1.1, 17 * 1.1);
        }
        else if (this.type == "lyagushkaMeat")
        {
            LXX.beginPath();
            LXX.drawImage(cleen, 38, 56, 28, 17, this.invX - (1/2 * 28 * 1.1), this.invY - (1/2 * 17 * 1.1), 28 * 1.1, 17 * 1.1);
        }
        else if (this.type == "ostryyGrass")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1296, 431, 68, 61, this.invX - (1/2 * 68 * 1), this.invY - (1/2 * 61 * 1), 68 * 1, 61 * 1);
        }
        else if (this.type == "vardanianInformerUniform")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1608, 51, 66, 132, this.invX - (1/2 * 66 * 0.62), this.invY - (1/2 * 132 * 0.62), 66 * 0.62, 132 * 0.62);
        }
        else if (this.type == "ashaiWoodBarrel" || this.type == "ashaiWoodBarrelOfWater" || this.type == "caskOfChyoulWine")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 648, 328, 37, 54, this.invX - (1/2 * 37 * 0.7), this.invY - (1/2 * 54 * 0.7), 37 * 0.7, 54 * 0.7);
        }
        else if (this.type == "roylaFlower")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 144, 8, 26, 30, this.invX - (1/2 * 26 * 0.8), this.invY - (1/2 * 30 * 0.8), 26 * 0.8, 30 * 0.8);
        }
        else if (this.type == "toadstools")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 294, 23, 16, 17, this.invX - (1/2 * 16 * 1.25), this.invY - (1/2 * 17 * 1.25), 16 * 1.25, 17 * 1.25);
        }
        else if (this.type == "thimblecapMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(negro, 129, 44, 20, 22, this.invX - (1/2 * 20 * 0.9), this.invY - (1/2 * 20 * 0.9), 20 * 0.9, 22 * 0.9);
        }
        else if (this.type == "vardanianMardyl")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 841, 519, 55, 58, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 58 * 1), 55 * 1, 58 * 1);
        }
        else if (this.type == "orgishMardyl")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 40, 126, 55, 58, this.invX - (1/2 * 55 * 1.1), this.invY - (1/2 * 58 * 1.1), 55 * 1.1, 58 * 1.1);
        }
        else if (this.type == "heskFungalPod")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 316, 72, 24, 24, this.invX - (1/2 * 24 * 1.45), this.invY - (1/2 * 24 * 1.45), 24 * 1.45, 24 * 1.45);
        }
        else if (this.type == "heskFungus")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 251, 73, 54, 20, this.invX - (1/2 * 54 * 1.1), this.invY - (1/2 * 20 * 1.1), 54 * 1.1, 20 * 1.1);
        }
        else if (this.type == "prematureCauwLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1656, 994, 18, 20, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 20 * 1.3), 18 * 1.3, 20 * 1.3);
        }
        else if (this.type == "cauwLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1687, 997, 18, 20, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 20 * 1.3), 18 * 1.3, 20 * 1.3);
        }
        else if (this.type == "eisyncryneFruit")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1618, 1026, 17, 17, this.invX - (1/2 * 17 * 1.4), this.invY - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "splitEisyncryneFruit")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1597, 1027, 17, 17, this.invX - (1/2 * 17 * 1.4), this.invY - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "eisyncrynePlant")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1596, 1047, 41, 45, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 45 * 1), 41 * 1, 45 * 1);
        }
        else if (this.type == "motylekhLeg")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 191, 261, 86, 58, this.invX - (1/2 * 86 * 1), this.invY - (1/2 * 58 * 1), 86 * 1, 58 * 1);
        }
        else if (this.type == "roastedMotylekhLeg")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 306, 262, 86, 58, this.invX - (1/2 * 86 * 1), this.invY - (1/2 * 58 * 1), 86 * 1, 58 * 1);
        }
        else if (this.type == "motylekhWing")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 400, 236, 127, 84, this.invX - (1/2 * 127 * 0.65), this.invY - (1/2 * 84 * 0.65), 127 * 0.65, 84 * 0.65);
        }
        else if (this.type == "motylekhWingBundle")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 367, 96, 146, 88, this.invX - (1/2 * 146 * 0.55), this.invY - (1/2 * 88 * 0.55), 146 * 0.55, 88 * 0.55);
        }
        else if (this.type == "bulkMotylinka")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 376, 7, 146, 88, this.invX - (1/2 * 146 * 0.55), this.invY - (1/2 * 88 * 0.55), 146 * 0.55, 88 * 0.55);
        }
        else if (this.type == "motylinka")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 376, 7, 146, 88, this.invX - (1/2 * 146 * 0.35), this.invY - (1/2 * 88 * 0.35), 146 * 0.35, 88 * 0.35);
        }
        else if (this.type == "chervstrakhaStomach")
        {
            LXX.beginPath();
            LXX.drawImage(moth, 148, 270, 14, 12, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 12 * 1), 14 * 1, 12 * 1);
        }
        else if (this.type == "ratPrinceRegalia")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1442, 1023, 58, 120, this.invX - (1/2 * 58 * 0.65), this.invY - (1/2 * 120 * 0.65), 58 * 0.65, 120 * 0.65);
        }
        else if (this.type == "ratKingRegalia")
        {
            LXX.beginPath();
            LXX.drawImage(mawt, 1514, 1021, 58, 120, this.invX - (1/2 * 58 * 0.65), this.invY - (1/2 * 120 * 0.65), 58 * 0.65, 120 * 0.65);
        }
        else if (this.type == "nomadTent")
        {
            LXX.beginPath();
            LXX.drawImage(gnoll, 7, 162, 43, 44, this.invX - (1/2 * 43 * 1.1), this.invY - (1/2 * 44 * 1.1), 43 * 1.1, 44 * 1.1);
        }
        else if (this.type == "anglerAntennae")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 779, 1296, 98, 34, this.invX - (1/2 * 98 * 0.9), this.invY - (1/2 * 34 * 0.9), 98 * 0.9, 34 * 0.9);
        }
        else if (this.type == "starfishSmall")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 633, 425, 70, 70, this.invX - (1/2 * 70 * 0.4), this.invY - (1/2 * 70 * 0.4), 70 * 0.4, 70 * 0.4);
        }
        else if (this.type == "starfishBig")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 633, 425, 70, 70, this.invX - (1/2 * 70 * 0.8), this.invY - (1/2 * 70 * 0.8), 70 * 0.8, 70 * 0.8);
        }
        else if (this.type == "rawBloodwormFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 540, 556, 35, 27, this.invX - (1/2 * 35 * 1.2), this.invY - (1/2 * 27 * 1.2), 35 * 1.2, 27 * 1.2);
        }
        else if (this.type == "bloodwormMeat")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 591, 553, 35, 27, this.invX - (1/2 * 35 * 1.2), this.invY - (1/2 * 27 * 1.2), 35 * 1.2, 27 * 1.2);
        }
        else if (this.type == "krogiMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 4, 238, 30, 27, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 27 * 1), 30 * 1, 27 * 1);
        }
        else if (this.type == "cookedKrogiMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 42, 241, 30, 27, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 27 * 1), 30 * 1, 27 * 1);
        }
        else if (this.type == "pixiWing")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 72, 101, 20, 24, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 24 * 1.1), 20 * 1.1, 24 * 1.1);
        }
        else if (this.type == "pixiBrain")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 91, 128, 20, 24, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 24 * 1.1), 20 * 1.1, 24 * 1.1);
        }
        else if (this.type == "jarOfPixiBlood")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 69, 156, 20, 24, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 24 * 1.5), 20 * 1.5, 24 * 1.5);
        }
        else if (this.type == "velidShell")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 69, 130, 20, 24, this.invX - (1/2 * 20 * 1.3), this.invY - (1/2 * 24 * 1.3), 20 * 1.3, 24 * 1.3);
        }
        else if (this.type == "trubkaLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 7, 267, 20, 24, this.invX - (1/2 * 20 * 1.2), this.invY - (1/2 * 24 * 1.2), 20 * 1.2, 24 * 1.2);
        }
        else if (this.type == "trubkaStalk")
        {
            LXX.beginPath();
            LXX.drawImage(pixi, 806, 1328, 67, 30, this.invX - (1/2 * 67 * 1.2), this.invY - (1/2 * 30 * 1.2), 67 * 1.2, 30 * 1.2);
        }
        else if (this.type == "pokinutyyShell")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 643, 631, 31, 29, this.invX - (1/2 * 31 * 1.5), this.invY - (1/2 * 29 * 1.5), 31 * 1.5, 29 * 1.5);
        }
        else if (this.type == "pokinutyyLegFull" || this.type == "pokinutyyLeg")
        {
            LXX.beginPath();
            LXX.drawImage(blud, 575, 631, 51, 29, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 29 * 1), 51 * 1, 29 * 1);
        }
        else if (this.type == "gnollPelt")
        {
            LXX.beginPath();
            LXX.drawImage(gnoll, 206, 309, 54, 40, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 40 * 1), 54 * 1, 40 * 1);
        }
        else if (this.type == "gnollIntestines")
        {
            LXX.beginPath();
            LXX.drawImage(gnoll, 168, 257, 40, 36, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 36 * 1), 40 * 1, 36 * 1);
        }
        else if (this.type == "roastedGnollIntestines")
        {
            LXX.beginPath();
            LXX.drawImage(gnoll, 208, 258, 40, 36, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 36 * 1), 40 * 1, 36 * 1);
        }
        else if (this.type == "holuimTalisman")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1173, 717, 24, 33, this.invX - (1/2 * 24 * 1.25), this.invY - (1/2 * 33 * 1.25), 24 * 1.25, 33 * 1.25);
        }
        else if (this.type == "varminPelt")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 433, 3, 81, 48, this.invX - (1/2 * 81 * 0.6), this.invY - (1/2 * 48 * 0.6), 81 * 0.6, 48 * 0.6);
        }
        else if (this.type == "deadRat")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 26, 1117, 62, 34, this.invX - (1/2 * 62 * 0.6), this.invY - (1/2 * 34 * 0.6), 62 * 0.6, 34 * 0.6);
        }
        else if (this.type == "rawSkeweredRat")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 102, 1155, 97, 34, this.invX - (1/2 * 97 * 0.6), this.invY - (1/2 * 34 * 0.6), 97 * 0.6, 34 * 0.6);
        }
        else if (this.type == "skeweredRat")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 14, 1156, 92, 35, this.invX - (1/2 * 92 * 0.6), this.invY - (1/2 * 35 * 0.6), 92 * 0.6, 35 * 0.6);
        }
        else if (this.type == "rawVarminLeg")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 862, 897, 93, 39, this.invX - (1/2 * 93 * 1), this.invY - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "rawVarminHaunch")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 862, 937, 93, 39, this.invX - (1/2 * 93 * 1), this.invY - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "varminHaunch")
        {
            LXX.beginPath();
            LXX.drawImage(ruin, 861, 985, 93, 39, this.invX - (1/2 * 93 * 1), this.invY - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "vardanianPolehammer")
        {
            LXX.beginPath();
            LXX.drawImage(wart, 14, 678, 84, 124, this.invX - (1/2 * 84 * 0.8), this.invY - (1/2 * 124 * 0.8), 84 * 0.8, 124 * 0.8);
        }
        else if (this.type == "pashaArm")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1135, 297, 33, 24, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "despinedPashaArm")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1135, 325, 33, 24, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "roastedPashaArm")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1135, 353, 33, 24, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "cephrianPaladinArmour")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 76, 40, 65, 131, this.invX - (1/2 * 65 * 0.55), this.invY - (1/2 * 131 * 0.55), 65 * 0.55, 131 * 0.55);
        }
        else if (this.type == "tropicalFruitPlatter")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 948, 67, 39, 43, this.invX - (1/2 * 39 * 1.4), this.invY - (1/2 * 43 * 1.4), 39 * 1.4, 43 * 1.4);
        }
        else if (this.type == "marinatedGazelle")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 838, 35, 30, 30, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 30 * 1.1), 30 * 1.1, 30 * 1.1);
        }
        else if (this.type == "spicedSonjaSlices")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 935, 1, 28, 30, this.invX - (1/2 * 28 * 1.5), this.invY - (1/2 * 30 * 1.5), 28 * 1.5, 30 * 1.5);
        }
        else if (this.type == "artichokePlatter")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 911, 34, 28, 30, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 30 * 1.3), 28 * 1.3, 30 * 1.3);
        }
        else if (this.type == "stuffedEggplant")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 939, 35, 28, 30, this.invX - (1/2 * 28 * 1.5), this.invY - (1/2 * 30 * 1.5), 28 * 1.5, 30 * 1.5);
        }
        else if (this.type == "stuffedOnion")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 967, 33, 28, 30, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 30 * 1.3), 28 * 1.3, 30 * 1.3);
        }
        else if (this.type == "wholeRoastedKol")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 902, 1, 33, 30, this.invX - (1/2 * 33 * 1.5), this.invY - (1/2 * 30 * 1.5), 33 * 1.5, 30 * 1.5);
        }
        else if (this.type == "cephrianStew")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 864, 3, 33, 30, this.invX - (1/2 * 33 * 1.5), this.invY - (1/2 * 30 * 1.5), 33 * 1.5, 30 * 1.5);
        }
        else if (this.type == "spicedFermentedTermite")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 834, 1, 30, 30, this.invX - (1/2 * 30 * 1.2), this.invY - (1/2 * 30 * 1.2), 30 * 1.2, 30 * 1.2);
        }
        else if (this.type == "piranhaPlatter")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 731, 9, 45, 28, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 28 * 1), 45 * 1, 28 * 1);
        }
        else if (this.type == "boaPlatter")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 669, 4, 52, 31, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 31 * 1), 52 * 1, 31 * 1);
        }
        else if (this.type == "wholeStuffedTermite")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 778, 6, 52, 31, this.invX - (1/2 * 52 * 1.25), this.invY - (1/2 * 31 * 1.25), 52 * 1.25, 31 * 1.25);
        }
        else if (this.type == "wholeRoastedTermite")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 778, 6, 52, 31, this.invX - (1/2 * 52 * 1.2), this.invY - (1/2 * 31 * 1.2), 52 * 1.2, 31 * 1.2);
        }
        else if (this.type == "giraffePlatter")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 587, 3, 31, 28, this.invX - (1/2 * 31 * 1.1), this.invY - (1/2 * 28 * 1.1), 31 * 1.1, 28 * 1.1);
        }
        else if (this.type == "sonjaGlazedKigariiRibs")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 623, 3, 31, 28, this.invX - (1/2 * 31 * 1.3), this.invY - (1/2 * 28 * 1.3), 31 * 1.3, 28 * 1.3);
        }
        else if (this.type == "spellOil")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 1010, 2, 10, 21, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 21 * 2), 10 * 2, 21 * 2);
        }
        else if (this.type == "druidGown")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 661, 145, 40, 74, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 74 * 1), 40 * 1, 74 * 1);
        }
        else if (this.type == "zetianWarriorArmour")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 721, 135, 62, 81, this.invX - (1/2 * 62 * 0.9), this.invY - (1/2 * 81 * 0.9), 62 * 0.9, 81 * 0.9);
        }
        else if (this.type == "lionClothing")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 736, 836, 58, 99, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 99 * 0.8), 58 * 0.8, 99 * 0.8);
        }
        else if (this.type == "giraffeClothing")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 614, 1000, 58, 99, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 99 * 0.8), 58 * 0.8, 99 * 0.8);
        }
        else if (this.type == "twoDogOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 679, 999, 58, 99, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 99 * 0.8), 58 * 0.8, 99 * 0.8);
        }
        else if (this.type == "cephrianNomadOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 620, 771, 58, 99, this.invX - (1/2 * 58 * 0.85), this.invY - (1/2 * 99 * 0.85), 58 * 0.85, 99 * 0.85);
        }
        else if (this.type == "cephrianNomadDress")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 625, 671, 58, 99, this.invX - (1/2 * 58 * 0.78), this.invY - (1/2 * 99 * 0.78), 58 * 0.78, 99 * 0.78);
        }
        else if (this.type == "shortCephrianNomadDress")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 632, 674, 47, 79, this.invX - (1/2 * 47 * 0.77), this.invY - (1/2 * 79 * 0.77), 47 * 0.77, 79 * 0.77);
        }
        else if (this.type == "cephrianOutfitF")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 742, 940, 41, 80, this.invX - (1/2 * 41 * 0.9), this.invY - (1/2 * 80 * 0.9), 41 * 0.9, 80 * 0.9);
        }
        else if (this.type == "cephrianOutfitM")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 688, 855, 41, 80, this.invX - (1/2 * 41 * 0.9), this.invY - (1/2 * 80 * 0.9), 41 * 0.9, 80 * 0.9);
        }
        else if (this.type == "zetianOutfitM")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 683, 4, 43, 79, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 79 * 0.9), 43 * 0.9, 79 * 0.9);
        }
        else if (this.type == "zetianOutfitF")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 730, 2, 43, 79, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 79 * 0.9), 43 * 0.9, 79 * 0.9);
        }
        else if (this.type == "vardanianEliteSoldierOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 15, 64, 46, 116, this.invX - (1/2 * 46 * 0.68), this.invY - (1/2 * 116 * 0.68), 46 * 0.68, 116 * 0.68);
        }
        else if (this.type == "cephrianBlade")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 219, 67, 17, 60, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 60 * 1), 17 * 1, 60 * 1);
        }
        else if (this.type == "cephrianDagger")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1073, 822, 23, 60, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 60 * 1), 23 * 1, 60 * 1);
        }
        else if (this.type == "cephrianRapier")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 148, 8, 20, 89, this.invX - (1/2 * 20 * 0.85), this.invY - (1/2 * 89 * 0.85), 20 * 0.85, 89 * 0.85);
        }
        else if (this.type == "throwingKnife")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1413, 809, 12, 39, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 39 * 1), 12 * 1, 39 * 1);
        }
        else if (this.type == "poisonCoatedThrowingKnife")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1414, 856, 12, 39, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 39 * 1), 12 * 1, 39 * 1);
        }
        else if (this.type == "cephrianPikeAndShield")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 606, 6, 150, 108, this.invX - (1/2 * 150 * 0.5), this.invY - (1/2 * 108 * 0.5), 150 * 0.5, 108 * 0.5);
        }
        else if (this.type == "rawVodkapaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(kapa, 1354, 230, 74, 62, this.invX - (1/2 * 74 * 1), this.invY - (1/2 * 62 * 1), 74 * 1, 62 * 1);
        }
        else if (this.type == "vodkapaMeat")
        {
            LXX.beginPath();
            LXX.drawImage(kapa, 1354, 313, 74, 62, this.invX - (1/2 * 74 * 1), this.invY - (1/2 * 62 * 1), 74 * 1, 62 * 1);
        }
        else if (this.type == "vodkapaSpleen")
        {
            LXX.beginPath();
            LXX.drawImage(kapa, 1456, 241, 32, 46, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 46 * 1), 32 * 1, 46 * 1);
        }
        else if (this.type == "fermentedVodkapaSpleen")
        {
            LXX.beginPath();
            LXX.drawImage(kapa, 1454, 323, 32, 46, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 46 * 1), 32 * 1, 46 * 1);
        }
        else if (this.type == "cephrianArmour")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 172, 41, 48, 109, this.invX - (1/2 * 48 * 0.65), this.invY - (1/2 * 109 * 0.65), 48 * 0.65, 109 * 0.65);
        }
        else if (this.type == "blinkOrb")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 123, 67, 10, 9, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 9 * 1), 10 * 1, 9 * 1);
        }
        else if (this.type == "gazelleHorn")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1300, 838, 14, 37, this.invX - (1/2 * 14 * 1.1), this.invY - (1/2 * 37 * 1.1), 14 * 1.1, 37 * 1.1);
        }
        else if (this.type == "gazellePelt")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 2372, 880, 84, 41, this.invX - (1/2 * 84 * 0.95), this.invY - (1/2 * 41 * 0.95), 84 * 0.95, 41 * 0.95);
        }
        else if (this.type == "rawGazelleFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 2575, 892, 30, 26, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 26 * 1.1), 30 * 1.1, 26 * 1.1);
        }
        else if (this.type == "gazelleMeat")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 2607, 894, 30, 26, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 26 * 1.1), 30 * 1.1, 26 * 1.1);
        }
        else if (this.type == "rawTaebjuurFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1409, 1150, 36, 29, this.invX - (1/2 * 36 * 1.1), this.invY - (1/2 * 29 * 1.1), 36 * 1.1, 29 * 1.1);
        }
        else if (this.type == "taebjuurMeat")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1373, 1150, 36, 29, this.invX - (1/2 * 36 * 1.1), this.invY - (1/2 * 29 * 1.1), 36 * 1.1, 29 * 1.1);
        }
        else if (this.type == "holnArms")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 278, 365, 56, 41, this.invX - (1/2 * 56 * 1), this.invY - (1/2 * 41 * 1), 56 * 1, 41 * 1);
        }
        else if (this.type == "rawGiraffeFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 499, 1047, 30, 28, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 28 * 1.1), 30 * 1.1, 28 * 1.1);
        }
        else if (this.type == "giraffeMeat")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 530, 1048, 30, 28, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 28 * 1.1), 30 * 1.1, 28 * 1.1);
        }
        else if (this.type == "rawHyenaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 602, 257, 24, 20, this.invX - (1/2 * 24 * 1.1), this.invY - (1/2 * 20 * 1.1), 24 * 1.1, 20 * 1.1);
        }
        else if (this.type == "hyenaMeat")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 628, 258, 24, 20, this.invX - (1/2 * 24 * 1.1), this.invY - (1/2 * 20 * 1.1), 24 * 1.1, 20 * 1.1);
        }
        else if (this.type == "rawDogFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 607, 284, 20, 18, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 18 * 1.1), 20 * 1.1, 18 * 1.1);
        }
        else if (this.type == "dogMeat")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 628, 285, 20, 18, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 18 * 1.1), 20 * 1.1, 18 * 1.1);
        }
        else if (this.type == "hyenaPelt")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 225, 11, 54, 29, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 29 * 1), 54 * 1, 29 * 1);
        }
        else if (this.type == "wildDogPelt")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 166, 12, 54, 29, this.invX - (1/2 * 54 * 1.1), this.invY - (1/2 * 29 * 1.1), 54 * 1.1, 29 * 1.1);
        }
        else if (this.type == "giraffePelt")
        {
            LXX.beginPath();
            LXX.drawImage(salem, 370, 13, 128, 41, this.invX - (1/2 * 128 * 0.6), this.invY - (1/2 * 41 * 0.6), 128 * 0.6, 41 * 0.6);
        }
        else if (this.type == "xiumMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(fect, 545, 38, 43, 27, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 27 * 1), 43 * 1, 27 * 1);
        }
        else if (this.type == "leafCutterAnterMeat")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1998, 209, 25, 19, this.invX - (1/2 * 25 * 1.05), this.invY - (1/2 * 19 * 1.05), 25 * 1.05, 19 * 1.05);
        }
        else if (this.type == "rawLeafCutterAnterFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1997, 190, 25, 19, this.invX - (1/2 * 25 * 1.1), this.invY - (1/2 * 19 * 1.1), 25 * 1.1, 19 * 1.1);
        }
        else if (this.type == "elcheExtract")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1751, 183, 10, 17, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 17 * 1), 10 * 1, 17 * 1);
        }
        else if (this.type == "elcheLeaves")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 1990, 151, 39, 35, this.invX - (1/2 * 39 * 1.1), this.invY - (1/2 * 35 * 1.1), 39 * 1.1, 35 * 1.1);
        }
        else if (this.type == "rawLionFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 241, 49, 19, 17, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "lionMeat")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 221, 50, 19, 17, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "lionPelt")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 263, 48, 45, 25, this.invX - (1/2 * 45 * 1.5), this.invY - (1/2 * 25 * 1.5), 45 * 1.5, 25 * 1.5);
        }
        else if (this.type == "rawTermiteFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 2385, 3, 18, 14, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "termiteMeat")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 2386, 29, 18, 14, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "fermentedTermite")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 2385, 15, 18, 14, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "termiteWings")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 2289, 1, 36, 26, this.invX - (1/2 * 36 * 1.2), this.invY - (1/2 * 26 * 1.2), 36 * 1.2, 26 * 1.2);
        }
        else if (this.type == "acaciaWood")
        {
            LXX.beginPath();
            LXX.drawImage(jeru, 803, 725, 66, 71, this.invX - (1/2 * 66 * 1), this.invY - (1/2 * 71 * 1), 66 * 1, 71 * 1);
        }
        else if (this.type == "snowyOwlWing")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 304, 121, 23, 31, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 31 * 1), 23 * 1, 31 * 1);
        }
        else if (this.type == "snowyOwlWingLarge")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 304, 121, 23, 31, this.invX - (1/2 * 23 * 2), this.invY - (1/2 * 31 * 2), 23 * 2, 31 * 2);
        }
        else if (this.type == "cebollaPicadaCocinada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 26, 308, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "cebollaPicada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 4, 266, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "cebollaHorneada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 21, 292, 15, 18, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "cebolla")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 8, 291, 15, 18, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "berenjenaRebanadaCocinada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 1, 442, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "berenjenaRebanada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 0, 462, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "berenjenaPicadaCocinada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 3, 357, 22, 22, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 22 * 1.5), 22 * 1.5, 22 * 1.5);
        }
        else if (this.type == "berenjenaPicada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 2, 377, 22, 22, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 22 * 1.5), 22 * 1.5, 22 * 1.5);
        }
        else if (this.type == "berenjena")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 1, 490, 22, 27, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 27 * 1.5), 22 * 1.5, 27 * 1.5);
        }
        else if (this.type == "saffron")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 19, 459, 15, 18, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "alcachofa")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 6, 221, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "alcachofaCocinada")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 6, 244, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "tchafula")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 965, 6, 14, 16, this.invX - (1/2 * 14 * 1.4), this.invY - (1/2 * 16 * 1.4), 14 * 1.4, 16 * 1.4);
        }
        else if (this.type == "tchafulaHalf")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 981, 6, 14, 16, this.invX - (1/2 * 14 * 1.4), this.invY - (1/2 * 16 * 1.4), 14 * 1.4, 16 * 1.4);
        }
        else if (this.type == "tchafulaTuft")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 554, 0, 21, 24, this.invX - (1/2 * 21 * 1.4), this.invY - (1/2 * 24 * 1.4), 21 * 1.4, 24 * 1.4);
        }
        else if (this.type == "glazaPowder")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 693, 41, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "glazm")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 716, 40, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "roastedGlazaRoot")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 1, 98, 48, 30, this.invX - (1/2 * 48 * 1.3), this.invY - (1/2 * 30 * 1.3), 48 * 1.3, 30 * 1.3);
        }
        else if (this.type == "glazaRoot")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 1, 127, 48, 30, this.invX - (1/2 * 48 * 1.3), this.invY - (1/2 * 30 * 1.3), 48 * 1.3, 30 * 1.3);
        }
        else if (this.type == "tchaltaFlower")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 666, 35, 25, 22, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "tchaltaLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 618, 33, 25, 22, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "tchaltaGel")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 645, 32, 25, 22, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "nupalaPuffs")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 590, 31, 29, 19, this.invX - (1/2 * 29 * 1.55), this.invY - (1/2 * 19 * 1.55), 29 * 1.55, 19 * 1.55);
        }
        else if (this.type == "zwaleimBranches")
        {
            LXX.beginPath();
            LXX.drawImage(cef, 558, 33, 29, 19, this.invX - (1/2 * 29 * 1.55), this.invY - (1/2 * 19 * 1.55), 29 * 1.55, 19 * 1.55);
        }
        else if (this.type == "skriatokEssence")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 2199, 877, 55, 49, this.invX - (1/2 * 55 * 0.45), this.invY - (1/2 * 49 * 0.45), 55 * 0.45, 49 * 0.45);
        }
        else if (this.type == "cheshirePaw")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 901, 3, 35, 31, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 31 * 1), 35 * 1, 31 * 1);
        }
        else if (this.type == "worms")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 16 * 1), 18 * 1, 16 * 1);
        }
        else if (this.type == "wormz")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1) + 1, this.invY - (1/2 * 16 * 1) + 2.5, 18 * 1, 16 * 1);
            LXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 16 * 1), 18 * 1, 16 * 1);
            LXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1) + 4, this.invY - (1/2 * 16 * 1) - 3, 18 * 1, 16 * 1);
        }
        else if (this.type == "turkeyEgg")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 721, 184, 19, 19, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 19 * 1), 19 * 1, 19 * 1);
        }
        else if (this.type == "cookedTurkeyEgg")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 713, 207, 19, 19, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 19 * 1.5), 19 * 1.5, 19 * 1.5);
        }
        else if (this.type == "turkeyFeathers")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 747, 305, 38, 26, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 26 * 1), 38 * 1, 26 * 1);
        }
        else if (this.type == "rawTurkeyFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 742, 190, 51, 55, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 55 * 1), 51 * 1, 55 * 1);
        }
        else if (this.type == "turkeyMeat")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 740, 248, 51, 55, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 55 * 1), 51 * 1, 55 * 1);
        }
        else if (this.type == "thenganSageRobe")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 633, 61, 57, 108, this.invX - (1/2 * 57 * 0.65), this.invY - (1/2 * 108 * 0.65), 57 * 0.65, 108 * 0.65);
        }
        else if (this.type == "sackmansHood")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 356, 3, 51, 43, this.invX - (1/2 * 51 * 1.2), this.invY - (1/2 * 43 * 1), 51 * 1.2, 43 * 1);
            LXX.drawImage(pavo, 268, 0, 51, 43, this.invX - (1/2 * 51 * 0.9), this.invY - (1/2 * 43 * 1), 51 * 0.9, 43 * 1);
        }
        else if (this.type == "littleRedRidingHood")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 70, 4, 36, 63, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 63 * 1), 36 * 1, 63 * 1);
        }
        else if (this.type == "sackmansSword")
        {
            LXX.beginPath();
            LXX.drawImage(pavo, 24, 131, 56, 67, this.invX - (1/2 * 56 * 1), this.invY - (1/2 * 67 * 1), 56 * 1, 67 * 1);
        }
        else if (this.type == "beulingerrDress")
        {
            LXX.beginPath();
            LXX.drawImage(abanico, 858, 153, 115, 140, this.invX - (1/2 * 115 * 0.5), this.invY - (1/2 * 140 * 0.5), 115 * 0.5, 140 * 0.5);
        }
        else if (this.type == "beulingerrOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(abanico, 57, 3, 77, 127, this.invX - (1/2 * 77 * 0.5), this.invY - (1/2 * 127 * 0.5), 77 * 0.5, 127 * 0.5);
        }
        else if (this.type == "theWendigosCleaver")
        {
            LXX.beginPath();
            LXX.drawImage(abanico, 15, 8, 29, 79, this.invX - (1/2 * 29 * 0.9), this.invY - (1/2 * 79 * 0.9), 29 * 0.9, 79 * 0.9);
        }
        else if (this.type == "beulingerrPike")
        {
            LXX.beginPath();
            LXX.drawImage(abanico, 26, 140, 136, 90, this.invX - (1/2 * 136 * 0.65), this.invY - (1/2 * 90 * 0.65), 136 * 0.65, 90 * 0.65);
        }
        else if (this.type == "redFan")
        {
            LXX.beginPath();
            LXX.drawImage(abanico, 108, 463, 23, 24, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 24 * 1), 23 * 1, 24 * 1);
        }
        else if (this.type == "purpleFan")
        {
            LXX.beginPath();
            LXX.drawImage(abanico, 0, 103, 23, 24, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 24 * 1), 23 * 1, 24 * 1);
        }
        else if (this.type == "thenganHose")
        {
            LXX.beginPath();
            LXX.drawImage(alfombra, 5, 116, 48, 26, this.invX - (1/2 * 48 * 0.9), this.invY - (1/2 * 26 * 0.9), 48 * 0.9, 26 * 0.9);
        }
        else if (this.type == "thenganCommonwear")
        {
            LXX.beginPath();
            LXX.drawImage(alfombra, 0, 8, 57, 97, this.invX - (1/2 * 57 * 0.7), this.invY - (1/2 * 97 * 0.7), 57 * 0.7, 97 * 0.7);
        }
        else if (this.type == "thenganNobleOutfitM")
        {
            LXX.beginPath();
            LXX.drawImage(alfombra, 116, 8, 69, 115, this.invX - (1/2 * 69 * 0.65), this.invY - (1/2 * 115 * 0.65), 69 * 0.65, 115 * 0.65);
        }
        else if (this.type == "thenganNobleOutfitF")
        {
            LXX.beginPath();
            LXX.drawImage(alfombra, 202, 8, 69, 115, this.invX - (1/2 * 69 * 0.65), this.invY - (1/2 * 115 * 0.65), 69 * 0.65, 115 * 0.65);
        }
        else if (this.type == "foxClothingM")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 824, 417, 34, 78, this.invX - (1/2 * 34 * 1), this.invY - (1/2 * 78 * 1), 34 * 1, 78 * 1);
        }
        else if (this.type == "foxClothingF")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 785, 415, 34, 78, this.invX - (1/2 * 34 * 1), this.invY - (1/2 * 78 * 1), 34 * 1, 78 * 1);
        }
        else if (this.type == "thenganHunterOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 59, 716, 42, 78, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 78 * 1), 42 * 1, 78 * 1);
        }
        else if (this.type == "thenganArcticClothing")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 13, 720, 43, 80, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 80 * 0.9), 43 * 0.9, 80 * 0.9);
        }
        else if (this.type == "foxFurDress")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 329, 569, 43, 80, this.invX - (1/2 * 43 * 1.55), this.invY - (1/2 * 80 * 1.55), 43 * 1.55, 80 * 1.55);
        }
        else if (this.type == "grizzlyLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 775, 505, 64, 102, this.invX - (1/2 * 64 * 0.8), this.invY - (1/2 * 102 * 0.8), 64 * 0.8, 102 * 0.8);
        }
        else if (this.type == "grizzlyLeatherBoots")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 787, 643, 43, 40, this.invX - (1/2 * 43 * 1.1), this.invY - (1/2 * 40 * 1.1), 43 * 1.1, 40 * 1.1);
        }
        else if (this.type == "grizzlyLeatherGloves")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 787, 614, 43, 32, this.invX - (1/2 * 43 * 1.15), this.invY - (1/2 * 32 * 1.15), 43 * 1.15, 32 * 1.15);
        }
        else if (this.type == "thenganWorkmansApron")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 774, 359, 64, 102, this.invX - (1/2 * 64 * 0.7), this.invY - (1/2 * 102 * 0.7), 64 * 0.7, 102 * 0.7);
        }
        else if (this.type == "deerHideArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 772, 197, 61, 91, this.invX - (1/2 * 61 * 0.85), this.invY - (1/2 * 91 * 0.85), 61 * 0.85, 91 * 0.85);
        }
        else if (this.type == "stagArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 765, 51, 61, 91, this.invX - (1/2 * 61 * 0.85), this.invY - (1/2 * 91 * 0.85), 61 * 0.85, 91 * 0.85);
        }
        else if (this.type == "badgerFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 706, 41, 56, 91, this.invX - (1/2 * 56 * 0.95), this.invY - (1/2 * 91 * 0.95), 56 * 0.95, 91 * 0.95);
        }
        else if (this.type == "cultistRobes")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 786, 701, 45, 77, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 77 * 1.15), 45 * 1.15, 77 * 1.15);
        }
        else if (this.type == "cultistHighPriestRobes")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 783, 780, 45, 85, this.invX - (1/2 * 45 * 0.95), this.invY - (1/2 * 85 * 0.95), 45 * 0.95, 85 * 0.95);
        }
        else if (this.type == "crowFeather")
        {
            LXX.beginPath();
            LXX.drawImage(leshen, 389, 3, 26, 29, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 29 * 1), 26 * 1, 29 * 1);
        }
        else if (this.type == "sowtFlemGland")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 43, 450, 17, 22, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 22 * 1.2), 17 * 1.2, 22 * 1.2);
        }
        else if (this.type == "skindlerIntestines")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 31, 400, 45, 45, this.invX - (1/2 * 45 * 0.7), this.invY - (1/2 * 45 * 0.7), 45 * 0.7, 45 * 0.7);
        }
        else if (this.type == "deerPelt")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 64, 788, 51, 25, this.invX - (1/2 * 51 * 0.9), this.invY - (1/2 * 25 * 0.9), 51 * 0.9, 25 * 0.9);
        }
        else if (this.type == "deerAntler")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 57, 831, 22, 25, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 25 * 1), 51 * 1, 25 * 1);
        }
        else if (this.type == "badgerPelt")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 5, 829, 28, 27, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 27 * 1), 28 * 1, 27 * 1);
        }
        else if (this.type == "rawBadgerFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 38, 835, 15, 13, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 13 * 1.2), 15 * 1.2, 13 * 1.2);
        }
        else if (this.type == "badgerMeat")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 38, 849, 15, 13, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 13 * 1.2), 15 * 1.2, 13 * 1.2);
        }
        else if (this.type == "stovolBeetleMandable")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 33, 1177, 43, 20, this.invX - (1/2 * 43 * 0.87), this.invY - (1/2 * 20 * 0.87), 43 * 0.87, 20 * 0.87);
        }
        else if (this.type == "sceptreOfRadiance")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 795, 1077, 37, 56, this.invX - (1/2 * 37 * 0.95), this.invY - (1/2 * 56 * 0.95), 37 * 0.95, 56 * 0.95);
        }
        else if (this.type == "cultistScythe")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 789, 1023, 37, 56, this.invX - (1/2 * 37 * 0.9), this.invY - (1/2 * 56 * 0.9), 37 * 0.9, 56 * 0.9);
        }
        else if (this.type == "longBone")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 771, 969, 37, 56, this.invX - (1/2 * 37 * 0.9), this.invY - (1/2 * 56 * 0.9), 37 * 0.9, 56 * 0.9);
        }
        else if (this.type == "pitchfork")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 786, 886, 41, 72, this.invX - (1/2 * 41 * 0.9), this.invY - (1/2 * 72 * 0.9), 41 * 0.9, 72 * 0.9);
        }
        else if (this.type == "jolleFlower")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 347, 1088, 30, 26, this.invX - (1/2 * 30 * 1.15), this.invY - (1/2 * 26 * 1.15), 30 * 1.15, 26 * 1.15);
        }
        else if (this.type == "kagsHead")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 72, 986, 31, 29, this.invX - (1/2 * 31 * 1.4), this.invY - (1/2 * 29 * 1.4), 31 * 1.4, 29 * 1.4);
        }
        else if (this.type == "raggedGrizzlyPelt")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 138, 912, 55, 37, this.invX - (1/2 * 55 * 1.15), this.invY - (1/2 * 37 * 1.15), 55 * 1.15, 37 * 1.15);
        }
        else if (this.type == "grizzlyBearPeltLarge")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 137, 872, 56, 37, this.invX - (1/2 * 56 * 1.10), this.invY - (1/2 * 37 * 1.10), 56 * 1.10, 37 * 1.10);
        }
        else if (this.type == "grizzlyBearPeltSmall")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 137, 872, 56, 37, this.invX - (1/2 * 56 * 1.05), this.invY - (1/2 * 37 * 1.05), 56 * 1.05, 37 * 1.05);
        }
        else if (this.type == "wendigoHead")
        {
            LXX.beginPath();
            LXX.drawImage(wendi, 784, 2075, 54, 75, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 75 * 1), 54 * 1, 75 * 1);
        }
        else if (this.type == "foxMeat")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 26, 670, 20, 18, this.invX - (1/2 * 20 * 0.9), this.invY - (1/2 * 18 * 0.9), 20 * 0.9, 18 * 0.9);
        }
        else if (this.type == "arcticFoxMeat")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 54, 670, 20, 18, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawArcticFoxFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 53, 647, 20, 18, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawFoxFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 25, 647, 20, 18, this.invX - (1/2 * 20 * 0.9), this.invY - (1/2 * 18 * 0.9), 20 * 0.9, 18 * 0.9);
        }
        else if (this.type == "foxPelt")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 2, 618, 86, 27, this.invX - (1/2 * 86 * 1) + 5, this.invY - (1/2 * 27 * 1), 86 * 1, 27 * 1);
        }
        else if (this.type == "arcticFoxPelt")
        {
            LXX.beginPath();
            LXX.drawImage(bloat, 10, 691, 86, 27, this.invX - (1/2 * 86 * 1) + 5, this.invY - (1/2 * 27 * 1), 86 * 1, 27 * 1);
        }
        else if (this.type == "cursedBoneMeal")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 270, 17, 22, 16, this.invX - (1/2 * 22 * 1.4), this.invY - (1/2 * 16 * 1.4), 22 * 1.4, 16 * 1.4);
        }
        else if (this.type == "corpseGolemHeart")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 214, 14, 29, 31, this.invX - (1/2 * 29 * 1.25), this.invY - (1/2 * 31 * 1.25), 29 * 1.25, 31 * 1.25);
        }
        else if (this.type == "horseArmourRemover")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 587, 35, 12, 16, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 16 * 1), 12 * 1, 16 * 1);
        }
        else if (this.type == "lichRobe")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 47, 675, 93, 127, this.invX - (1/2 * 93 * 0.6), this.invY - (1/2 * 127 * 0.6), 93 * 0.6, 127 * 0.6);
        }
        else if (this.type == "floortrap")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 257, 1, 38, 35, this.invX - (1/2 * 38 * 1.5), this.invY - (1/2 * 35 * 1.5), 38 * 1.5, 35 * 1.5);
        }
        else if (this.type == "firetrap" || this.type == "firetrapEmpty")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 212, 88, 17, 19, this.invX - (1/2 * 17 * 1.5), this.invY - (1/2 * 19 * 1.5), 17 * 1.5, 19 * 1.5);
        }
        else if (this.type == "salaFlower")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 339, 43, 10, 14, this.invX - (1/2 * 10 * 1.25), this.invY - (1/2 * 14 * 1.25), 10 * 1.25, 14 * 1.25);
        }
        else if (this.type == "heyolBerries")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 367, 20, 10, 14, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 14 * 2), 10 * 2, 14 * 2);
        }
        else if (this.type == "steelHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 209, 1042, 176, 61, this.invX - (1/2 * 176 * 0.5), this.invY - (1/2 * 61 * 0.5), 176 * 0.5, 61 * 0.5);
        }
        else if (this.type == "nechroviteHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 221, 1180, 148, 61, this.invX - (1/2 * 148 * 0.5), this.invY - (1/2 * 61 * 0.5), 148 * 0.5, 61 * 0.5);
        }
        else if (this.type == "krovhyuzkaHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wart, 1319, 410, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "vardanianHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wart, 542, 406, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "blueHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wart, 727, 410, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "altezorHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wart, 915, 406, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "nirwadenHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wart, 1108, 408, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "ghoulHorseArmour")
        {
            LXX.beginPath();
            LXX.drawImage(wart, 31, 851, 196, 75, this.invX - (1/2 * 196 * 0.5) - 3, this.invY - (1/2 * 75 * 0.5), 196 * 0.5, 75 * 0.5);
        }
        else if (this.type == "bovodo")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 846, 436, 20, 19, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 19 * 1.5), 20 * 1.5, 19 * 1.5);
        }
        else if (this.type == "smokedBovodo")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 913, 433, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "bovodoWedge")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 888, 433, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "smokedBovodoWedge")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 957, 431, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "vardanianPieDough")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 934, 451, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "uncookedChyoulBerryPie")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 916, 452, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "chyoulBerryPie")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 898, 453, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "chyoulBerryPieSlice")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 882, 458, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "bovineButter")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 867, 456, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "rawVenison")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 564, 496, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "venison")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 545, 497, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "smokedVenison")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 527, 498, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "elkAntler")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 490, 508, 36, 35, this.invX - (1/2 * 36 * 1.5), this.invY - (1/2 * 35 * 1.5), 36 * 1.5, 35 * 1.5);
        }
        else if (this.type == "elkPelt")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 534, 524, 41, 22, this.invX - (1/2 * 41 * 1.5), this.invY - (1/2 * 22 * 1.5), 41 * 1.5, 22 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMushroomStrogonoff")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 443, 583, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBorshtSoup")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 509, 554, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfCabbageSoup")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 510, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfCreamyVenisonStew")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 578, 554, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineAndPierogiStew")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 578, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineStrogonoff")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 579, 610, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfTagglerStew")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 640, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMulstishStew")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 640, 608, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfToadStew")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 709, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfSlowBraisedKoivaya")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 710, 609, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "rawSkig")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 572, 117, 48, 23, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 23 * 1), 48 * 1, 23 * 1);
        }
        else if (this.type == "skig")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 720, 206, 48, 23, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 23 * 1), 48 * 1, 23 * 1);
        }
        else if (this.type == "rawMulstish")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 708, 118, 59, 30, this.invX - (1/2 * 59 * 1), this.invY - (1/2 * 30 * 1), 59 * 1, 30 * 1);
        }
        else if (this.type == "slicedRawMulstish")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 708, 188, 27, 20, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "slicedMulstish")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 737, 187, 27, 20, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "slicedSmokedMulstish")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 679, 190, 27, 20, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "rawApoi")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 626, 148, 68, 42, this.invX - (1/2 * 68 * 1), this.invY - (1/2 * 42 * 1), 68 * 1, 42 * 1);
        }
        else if (this.type == "apoi")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 730, 161, 29, 21, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 21 * 1), 29 * 1, 21 * 1);
        }
        else if (this.type == "smokedApoi")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 696, 159, 29, 21, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 21 * 1), 29 * 1, 21 * 1);
        }
        else if (this.type == "rawTaggler")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 631, 118, 60, 28, this.invX - (1/2 * 60 * 1), this.invY - (1/2 * 28 * 1), 60 * 1, 28 * 1);
        }
        else if (this.type == "taggler")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 720, 229, 53, 19, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 19 * 1), 53 * 1, 19 * 1);
        }
        else if (this.type == "smokedTaggler")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 721, 248, 53, 19, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 19 * 1), 53 * 1, 19 * 1);
        }
        else if (this.type == "rawCrilp")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 567, 152, 50, 34, this.invX - (1/2 * 50 * 1), this.invY - (1/2 * 34 * 1), 50 * 1, 34 * 1);
        }
        else if (this.type == "crilp")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 772, 230, 21, 36, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 36 * 1), 21 * 1, 36 * 1);
        }
        else if (this.type == "smokedCrilp")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 775, 193, 21, 36, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 36 * 1), 21 * 1, 36 * 1);
        }
        else if (this.type == "kerPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 613, 489, 68, 108, this.invX - (1/2 * 68 * 0.7), this.invY - (1/2 * 108 * 0.7), 68 * 0.7, 108 * 0.7);
        }
        else if (this.type == "eliteNechrovitePlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 422, 485, 65, 115, this.invX - (1/2 * 65 * 0.7), this.invY - (1/2 * 115 * 0.7), 65 * 0.7, 115 * 0.7);
        }
        else if (this.type == "eliteNechrovitePlateArmourPlumed")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 517, 475, 65, 123, this.invX - (1/2 * 65 * 0.65), this.invY - (1/2 * 123 * 0.65), 65 * 0.65, 123 * 0.65);
        }
        else if (this.type == "rawRibbackFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(ribak, 797, 35, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackMeat")
        {
            LXX.beginPath();
            LXX.drawImage(ribak, 843, 34, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackSpinneret")
        {
            LXX.beginPath();
            LXX.drawImage(ribak, 900, 31, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackFangs")
        {
            LXX.beginPath();
            LXX.drawImage(ribak, 955, 25, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "fegilPelt")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 14, 981, 30, 10, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 10 * 1.1), 30 * 1.1, 10 * 1.1);
        }
        else if (this.type == "palinsydaTongues")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1, 163, 22, 19, this.invX - (1/2 * 22 * 1.8), this.invY - (1/2 * 19 * 1.8), 22 * 1.8, 19 * 1.8);
        }
        else if (this.type == "palinsydaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1207, 477, 42, 25, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 25 * 1), 42 * 1, 25 * 1);
        }
        else if (this.type == "fegilRegurgitation")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 734, 876, 50, 41, this.invX - (1/2 * 50 * 0.8), this.invY - (1/2 * 41 * 0.8), 50 * 0.8, 41 * 0.8);
        }
        else if (this.type == "mornidOozeRemains")
        {
            LXX.beginPath();
            LXX.drawImage(ribak, 1024, 616, 41, 30, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 30 * 1), 41 * 1, 30 * 1);
        }
        else if (this.type == "borgalLeg")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 6, 593, 63, 24, this.invX - (1/2 * 63 * 0.9), this.invY - (1/2 * 24 * 0.9), 63 * 0.9, 24 * 0.9);
        }
        else if (this.type == "borgalHead")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 32, 447, 31, 27, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 27 * 1.2), 31 * 1.2, 27 * 1.2);
        }
        else if (this.type == "borgalEye")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 21, 570, 22, 20, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 20 * 1), 22 * 1, 20 * 1);
        }
        else if (this.type == "borgalPelt")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 20, 490, 58, 37, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 37 * 1), 58 * 1, 37 * 1);
        }
        else if (this.type == "rawBorgalFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 10, 626, 15, 12, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 12 * 1), 15 * 1, 12 * 1);
        }
        else if (this.type == "borgalMeat")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 28, 626, 15, 12, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 12 * 1), 15 * 1, 12 * 1);
        }
        else if (this.type == "cirmusidicCompound")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 649, 93, 33, 25, this.invX - (1/2 * 33 * 0.85), this.invY - (1/2 * 25 * 0.85), 33 * 0.85, 25 * 0.85);
        }
        else if (this.type == "throwingStar")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 207, 402, 9, 9, this.invX - (1/2 * 9 * 1.4), this.invY - (1/2 * 9 * 1.4), 9 * 1.4, 9 * 1.4);
        }
        else if (this.type == "vardanianThrowingSpear")
        {
            LXX.beginPath();
            LXX.drawImage(mimi, 358, 324, 47, 90, this.invX - (1/2 * 47 * 0.8), this.invY - (1/2 * 90 * 0.8), 47 * 0.8, 90 * 0.8);
        }
        else if (this.type == "mustard")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 840, 115, 14, 13, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 13 * 1), 14 * 1, 13 * 1);
        }
        else if (this.type == "sauerkraut")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 838, 95, 20, 18, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawHoffalgreSausageChain")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 869, 87, 54, 44, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 44 * 1), 54 * 1, 44 * 1);
        }
        else if (this.type == "hoffalgreRoast")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 921, 11, 70, 45, this.invX - (1/2 * 70 * 1), this.invY - (1/2 * 45 * 1), 70 * 1, 45 * 1);
        }
        else if (this.type == "rawGulb")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 467, 14, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "gulbFillet")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 539, 15, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawHob")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 465, 68, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "hob")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 535, 66, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawTilmuk")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 328, 64, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "tilmuk")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 386, 64, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "palggaFlowers")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 250, 14, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawCres")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 620, 15, 65, 30, this.invX - (1/2 * 65 * 1), this.invY - (1/2 * 30 * 1), 65 * 1, 30 * 1);
        }
        else if (this.type == "cresFillet")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 687, 16, 65, 30, this.invX - (1/2 * 65 * 1), this.invY - (1/2 * 30 * 1), 65 * 1, 30 * 1);
        }
        else if (this.type == "desertPoppySeedMash")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 512, 151, 47, 30, this.invX - (1/2 * 47 * 1), this.invY - (1/2 * 30 * 1), 47 * 1, 30 * 1);
        }
        else if (this.type == "opium")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 598, 152, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "gulbPlatter")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 870, 133, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "sausageAndGreens")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 954, 135, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "cresAndGreens")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 914, 132, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "rawHoffalgreSausage")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 841, 58, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "hoffalgreSausage")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 882, 58, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "sausageCombo")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 925, 61, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "hetlaukWormPlatter")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 842, 135, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardSeeds")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 810, 155, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardSeedPods")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 780, 155, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardGreens")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 744, 181, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "wiltedMustardGreens")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 773, 181, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "hetlaukWorm")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 889, 18, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "rawHetlaukWorm" || this.type == "sewerHetlaukWorm")
        {
            if (this.turn <= 2)
            {
                LXX.drawImage(floras, 852, 16, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else if (this.turn <= 4)
            {
                LXX.drawImage(floras, 808, 14, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else if (this.turn <= 6)
            {
                LXX.drawImage(floras, 764, 16, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else
            {
                LXX.drawImage(floras, 808, 14, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
                this.turn = 0;
            }
            this.turn += 0.4;
        }
        else if (this.type == "desertPoppyFlower")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 967, 401, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "desertPoppyPods")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 966, 438, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
        }
        else if (this.type == "falloryFlower")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 268, 63, 29, 36, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 36 * 1), 29 * 1, 36 * 1);
        }
        else if (this.type == "bleedingHeartBranch")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 651, 147, 37, 40, this.invX - (1/2 * 37 * 0.8), this.invY - (1/2 * 40 * 0.8), 37 * 0.8, 40 * 0.8);
        }
        else if (this.type == "marigoldFlower")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 403, 141, 28, 44, this.invX - (1/2 * 28 * 0.6), this.invY - (1/2 * 44 * 0.6), 28 * 0.6, 44 * 0.6);
        }
        else if (this.type == "aberdomMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 882, 174, 18, 18, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 18 * 1), 18 * 1, 18 * 1);
        }
        else if (this.type == "beunumMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 974, 235, 18, 22, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 22 * 0.8), 18 * 0.8, 22 * 0.8);
        }
        else if (this.type == "ciprinMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 973, 202, 22, 31, this.invX - (1/2 * 22 * 0.7), this.invY - (1/2 * 31 * 0.7), 22 * 0.7, 31 * 0.7);
        }
        else if (this.type == "thorn")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 338, 12, 112, 33, this.invX - (1/2 * 112 * 0.7), this.invY - (1/2 * 33 * 0.7), 112 * 0.7, 33 * 0.7);
        }
        else if (this.type == "alitkaArmour")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 783, 57, 43, 86, this.invX - (1/2 * 43 * 0.95), this.invY - (1/2 * 86 * 0.95), 43 * 0.95, 86 * 0.95);
        }
        else if (this.type == "thenganBascinetArmour")
        {
            LXX.beginPath();
            LXX.drawImage(floras, 728, 57, 43, 86, this.invX - (1/2 * 43 * 0.95), this.invY - (1/2 * 86 * 0.95), 43 * 0.95, 86 * 0.95);
        }
        else if (this.type == "hydraHead")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 20, 361, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "hydraHeart")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 104, 364, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "roastedHydraHeart")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 66, 363, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "smokedHydraHeart")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 143, 364, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "wheat")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 518, 303, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25  * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatFlour")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 491, 302, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatDough")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 495, 274, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatBread")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 521, 277, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "butteredWheatBread")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 466, 289, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "velWheatBread")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 438, 288, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "borshtWheatBread")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 411, 288, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "apple")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 5, 542, 18, 20, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 20 * 1), 18 * 1, 20 * 1);
        }
        else if (this.type == "glassBottleOfGin")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 301, 373, 8, 19, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 19 * 2), 8 * 2, 19 * 2);
        }
        else if (this.type == "glassBottleOfCider")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 290, 403, 8, 19, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 19 * 2), 8 * 2, 19 * 2);
        }
        else if (this.type == "wheatBeer")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 280, 370, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "gin")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 267, 370, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "cider")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 267, 370, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "juniperBerries")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 251, 371, 13, 12, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 12 * 1), 13 * 1, 12 * 1);
        }
        else if (this.type == "serratedNechroviteGreatBlade")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 353, 140, 95, 25, this.invX - (1/2 * 95 * 0.85) + 2, this.invY - (1/2 * 25 * 0.85), 95 * 0.85, 25 * 0.85);
        }
        else if (this.type == "vardanSword")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 265, 113, 66, 20, this.invX - (1/2 * 66 * 1), this.invY - (1/2 * 20 * 1), 66 * 1, 20 * 1);
        }
        else if (this.type == "vardanGreatSword")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 258, 157, 97, 22, this.invX - (1/2 * 97 * 0.85), this.invY - (1/2 * 22 * 0.85), 97 * 0.85, 22 * 0.85);
        }
        else if (this.type == "vardanDagger")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 451, 140, 43, 16, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 16 * 1), 43 * 1, 16 * 1);
        }
        else if (this.type == "silverDagger")
        {
            LXX.beginPath();
            LXX.drawImage(folw, 127, 244, 21, 44, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 44 * 1), 21 * 1, 44 * 1);
        }
        else if (this.type == "shortSword")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 493, 9, 58, 57, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 57 * 1), 58 * 1, 57 * 1);
        }
        else if (this.type == "zetianWarPick")
        {
            LXX.beginPath();
            LXX.drawImage(ion, 1550, 706, 48, 44, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 44 * 1), 48 * 1, 44 * 1);
        }
        else if (this.type == "zetianBlowgun")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 446, 90, 74, 50, this.invX - (1/2 * 74 * 1), this.invY - (1/2 * 50 * 1), 74 * 1, 50 * 1);
        }
        else if (this.type == "zetianBlowdart")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 525, 114, 12, 27, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 27 * 1), 12 * 1, 27 * 1);
        }
        else if (this.type == "zetianRattlerBlowdart" || this.type == "zetianRattlerBlowdartThick")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 542, 114, 12, 27, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 27 * 1), 12 * 1, 27 * 1);
        }
        else if (this.type == "longHammer")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 540, 203, 44, 83, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 83 * 1), 44 * 1, 83 * 1);
        }
        else if (this.type == "cephrianFlail")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 532, 301, 47, 38, this.invX - (1/2 * 47 * 1), this.invY - (1/2 * 38 * 1), 47 * 1, 38 * 1);
        }
        else if (this.type == "masterKey" || this.type == "holuimBankKey")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 760, 12, 22, 23, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 23 * 1), 22 * 1, 23 * 1);
        }
        else if (this.type == "masterKeyring")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 755, 31, 33, 39, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 39 * 1), 33 * 1, 39 * 1);
        }
        else if (this.type == "lockpick")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 0, 30, 17, 29, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 29 * 1), 17 * 1, 29 * 1);
        }
        else if (this.type == "brokenLockpick")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 0, 60, 24, 29, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 29 * 1), 24 * 1, 29 * 1);
        }
        else if (this.type == "garldsMemories" || this.type == "memory")
        {
            this.turn += 1;
            if (this.turn <= 3)
            {
                LXX.drawImage(cypher, 764, 184, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 6)
            {
                LXX.drawImage(cypher, 764, 197, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 9)
            {
                LXX.drawImage(cypher, 764, 210, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 12)
            {
                LXX.drawImage(cypher, 764, 224, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 15)
            {
                LXX.drawImage(cypher, 764, 237, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else
            {
                this.turn = 0;
                LXX.drawImage(cypher, 764, 210, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
        }
        else if (this.type == "magusRobesF")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 278, 628, 73, 133, this.invX - (1/2 * 73 * 0.5), this.invY - (1/2 * 133 * 0.5), 73 * 0.5, 133 * 0.5);
        }
        else if (this.type == "magusRobesM")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 739, 863, 60, 133, this.invX - (1/2 * 60 * 0.5), this.invY - (1/2 * 133 * 0.5), 60 * 0.5, 133 * 0.5);
        }
        else if (this.type == "greatPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 315, 192, 59, 118, this.invX - (1/2 * 59 * 0.63), this.invY - (1/2 * 118 * 0.63), 59 * 0.63, 118 * 0.63);
        }
        else if (this.type == "wolthgarPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(cypher, 464, 176, 65, 135, this.invX - (1/2 * 65 * 0.55), this.invY - (1/2 * 135 * 0.55), 65 * 0.55, 135 * 0.55);
        }
        else if (this.type == "mimicHead")
        {
            LXX.beginPath();
            LXX.drawImage(mimi, 219, 309, 47, 41, this.invX - (1/2 * 47 * 0.6), this.invY - (1/2 * 41 * 0.6), 47 * 0.6, 41 * 0.6);
        }
        else if (this.type == "mimicFilament")
        {
            LXX.beginPath();
            LXX.drawImage(mimi, 261, 311, 41, 41, this.invX - (1/2 * 41 * 0.6), this.invY - (1/2 * 41 * 0.6), 41 * 0.6, 41 * 0.6);
        }
        else if (this.type == "vreckFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 59, 835, 52, 101, this.invX - (1/2 * 52 * 0.7), this.invY - (1/2 * 101 * 0.7), 52 * 0.7, 101 * 0.7);
        }
        else if (this.type == "ghoulMercArmour")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 933, 209, 55, 101, this.invX - (1/2 * 55 * 0.77), this.invY - (1/2 * 101 * 0.77), 55 * 0.77, 101 * 0.77);
        }
        else if (this.type == "laicaumBranch")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 929, 55, 37, 34, this.invX - (1/2 * 37 * 0.8), this.invY - (1/2 * 34 * 0.8), 37 * 0.8, 34 * 0.8);
        }
        else if (this.type == "laicaumBerries")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 898, 66, 26, 21, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 21 * 1), 26 * 1, 21 * 1);
        }
        else if (this.type == "vardanianTent")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1046, 109, 38, 31, this.invX - (1/2 * 38 * 1.4), this.invY - (1/2 * 31 * 1.4), 38 * 1.4, 31 * 1.4);
        }
        else if (this.type == "mekleFrond")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 958, 6, 59, 47, this.invX - (1/2 * 59 * 0.25), this.invY - (1/2 * 47 * 0.25), 59 * 0.25, 47 * 0.25);
        }
        else if (this.type == "danzigFrond")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 764, 163, 33, 32, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 32 * 1), 33 * 1, 32 * 1);
        }
        else if (this.type == "rawVreckFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1021, 352, 30, 26, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckMeat")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1055, 352, 30, 26, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckTail")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1053, 273, 30, 26, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckPelt")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1040, 308, 49, 30, this.invX - (1/2 * 49 * 0.75), this.invY - (1/2 * 30 * 0.75), 49 * 0.75, 30 * 0.75);
        }
        else if (this.type == "nechroviteOre")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1591, 525, 27, 32, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 32 * 1), 27 * 1, 32 * 1);
        }
        else if (this.type == "nechrovite")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1492, 563, 33, 18, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 18 * 1), 33 * 1, 18 * 1);
        }
        else if (this.type == "fineVardanianPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 72, 249, 49, 98, this.invX - (1/2 * 49 * 0.81), this.invY - (1/2 * 98 * 0.81), 49 * 0.81, 98 * 0.81);
        }
        else if (this.type == "fineNechrovitePlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 135, 249, 49, 98, this.invX - (1/2 * 49 * 0.81), this.invY - (1/2 * 98 * 0.81), 49 * 0.81, 98 * 0.81);
        }
        else if (this.type == "mesekScalp")
        {
            LXX.beginPath();
            LXX.fillStyle = "#BF0000";
            LXX.strokeStyle = "#901900";
            LXX.arc(this.invX, this.invY, 10, 0, Math.PI * 2);
            LXX.fill();
            LXX.stroke();
        }
        else if (this.type == "korskBeetleStinkGland")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 311, 4, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "rawKorskBeetleFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 237, 5, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "korskBeetleMeat")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 275, 5, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "silterEggs")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 550, 277, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "friedSilterEggs")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 549, 245, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "korceidaLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 239, 91, 31, 30, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "korceidaFlower")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 275, 90, 31, 30, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "laumin")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 313, 91, 31, 30, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "xormidRemainsLarge")
        {
            LXX.beginPath();
            LXX.drawImage(blac, 279, 11, 41, 36, this.invX - (1/2 * 41 * 1.1), this.invY - (1/2 * 36 * 1.1), 41 * 1.1, 36 * 1.1);
        }
        else if (this.type == "xormidRemainsSmall")
        {
            LXX.beginPath();
            LXX.drawImage(blac, 279, 11, 41, 36, this.invX - (1/2 * 41 * 0.8), this.invY - (1/2 * 36 * 0.8), 41 * 0.8, 36 * 0.8);
        }
        else if (this.type == "rawSilterFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 313, 139, 23, 18, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 18 * 1), 23 * 1, 18 * 1);
        }
        else if (this.type == "silterMeat")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 314, 163, 23, 18, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 18 * 1), 23 * 1, 18 * 1);
        }
        else if (this.type == "sciltArm")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 241, 182, 58, 35, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 35 * 1), 58 * 1, 35 * 1);
        }
        else if (this.type == "eyewortLeaves")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 555, 474, 25, 24, this.invX - (1/2 * 25 * 1.4), this.invY - (1/2 * 24 * 1.4), 25 * 1.4, 24 * 1.4);
        }
        else if (this.type == "eyewortStalk")
        {
            LXX.beginPath();
            LXX.drawImage(beets, 557, 338, 21, 30, this.invX - (1/2 * 21 * 1.4), this.invY - (1/2 * 30 * 1.4), 21 * 1.4, 30 * 1.4);
        }
        else if (this.type == "brightStone")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1729, 525, 36, 29, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 29 * 1), 36 * 1, 29 * 1);
        }
        else if (this.type == "alemanWWI")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1023, 804, 56, 140, this.invX - (1/2 * 56 * 0.55), this.invY - (1/2 * 140 * 0.55), 56 * 0.55, 140 * 0.55);
        }
        else if (this.type == "hazmatMarkI")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 210, 812, 60, 132, this.invX - (1/2 * 60 * 0.6), this.invY - (1/2 * 132 * 0.6), 60 * 0.6, 132 * 0.6);
        }
        else if (this.type == "hazmatMarkII")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 270, 812, 60, 132, this.invX - (1/2 * 60 * 0.6), this.invY - (1/2 * 132 * 0.6), 60 * 0.6, 132 * 0.6);
        }
        else if (this.type == "ghoulPelt")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1006, 148, 78, 50, this.invX - (1/2 * 78 * 1), this.invY - (1/2 * 50 * 1), 78 * 1, 50 * 1);
        }
        else if (this.type == "rawGhoulFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 964, 161, 28, 26, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 26 * 1), 28 * 1, 26 * 1);
        }
        else if (this.type == "ghoulMeat")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 920, 161, 33, 26, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 26 * 1), 33 * 1, 26 * 1);
        }
        else if (this.type == "kozlyakMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 411, 559, 18, 16, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 16 * 1), 18 * 1, 16 * 1);
        }
        else if (this.type == "rawMudToad")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 945, 55, 44, 31, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "mudToad")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 941, 100, 44, 31, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "mudToadLeg")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 903, 102, 44, 31, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "jinnDust")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 735, 595, 55, 67, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 67 * 1), 55 * 1, 67 * 1);
        }
        else if (this.type == "jinnCore")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 740, 483, 55, 67, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 67 * 1), 55 * 1, 67 * 1);
        }
        else if (this.type == "beholderTentacles")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 737, 550, 55, 39, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 39 * 1), 55 * 1, 39 * 1);
        }
        else if (this.type == "tinctureCup")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1080, 407, 12, 15, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 15 * 1), 12 * 1, 15 * 1);
        }
        else if (this.type == "cupOfFungicideTincture")
        {
            LXX.beginPath();
            LXX.drawImage(gul, 1080, 407, 12, 15, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 15 * 1), 12 * 1, 15 * 1);
        }
        else if (this.type == "cephrianTincturePot" || this.type == "cephrianTincturePotOfFungicideTincture" || this.type == "capturedJinn")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 595, 143, 42, 21, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 21 * 1), 42 * 1, 21 * 1);
        }
        else if (this.type == "humptyChalaza")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 657, 423, 41, 41, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 41 * 1), 41 * 1, 41 * 1);
        }
        else if (this.type == "crilkFruit")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 773, 786, 15, 15, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "pyromothSilk")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 4, 401, 19, 38, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 38 * 1), 19 * 1, 38 * 1);
        }
        else if (this.type == "pyromothSilkweb")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 649, 582, 37, 28, this.invX - (1/2 * 37 * 0.64), this.invY - (1/2 * 28 * 0.64), 37 * 0.64, 28 * 0.64);
        }
        else if (this.type == "fermentedBabosaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(zapa, 346, 289, 28, 21, this.invX - (1/2 * 28 * 1.55), this.invY - (1/2 * 21 * 1.55), 28 * 1.55, 21 * 1.55);
        }
        else if (this.type == "babosaMeat")
        {
            LXX.beginPath();
            LXX.drawImage(zapa, 346, 240, 28, 21, this.invX - (1/2 * 28 * 1.45), this.invY - (1/2 * 21 * 1.45), 28 * 1.45, 21 * 1.45);
        }
        else if (this.type == "rawBabosaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(zapa, 346, 222, 28, 21, this.invX - (1/2 * 28 * 1.5), this.invY - (1/2 * 21 * 1.5), 28 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonja")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 658, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaFruit")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 687, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaBubble")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 708, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaSlice")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 726, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "greenDartFrogSkin")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 766, 1100, 21, 15, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 15 * 1), 21 * 1, 15 * 1);
        }
        else if (this.type == "orangeDartFrogSkin")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 745, 1116, 21, 15, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 15 * 1), 21 * 1, 15 * 1);
        }
        else if (this.type == "rawBoaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 28, 1251, 67, 33, this.invX - (1/2 * 67 * 1), this.invY - (1/2 * 33 * 1), 67 * 1, 33 * 1);
        }
        else if (this.type == "boaMeat")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 28, 1289, 67, 33, this.invX - (1/2 * 67 * 1), this.invY - (1/2 * 33 * 1), 67 * 1, 33 * 1);
        }
        else if (this.type == "driedPoegroonMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 476, 698, 55, 52, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 52 * 1), 55 * 1, 52 * 1);
        }
        else if (this.type == "poegroonMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 475, 748, 55, 52, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 52 * 1), 55 * 1, 52 * 1);
        }
        else if (this.type == "maleotMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 624, 714, 42, 42, this.invX - (1/2 * 42 * 1.2), this.invY - (1/2 * 42 * 1.2), 42 * 1.2, 42 * 1.2);
        }
        else if (this.type == "driedMaleotMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 623, 753, 42, 42, this.invX - (1/2 * 42 * 1.2), this.invY - (1/2 * 42 * 1.2), 42 * 1.2, 42 * 1.2);
        }
        else if (this.type == "iodFungi")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 330, 719, 58, 60, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 60 * 1), 58 * 1, 60 * 1);
        }
        else if (this.type == "fermentedIod")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 272, 721, 58, 60, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 60 * 1), 58 * 1, 60 * 1);
        }
        else if (this.type == "gribnoyMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 768, 724, 25, 24, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 24 * 1), 25 * 1, 24 * 1);
        }
        else if (this.type == "roastedGribnoyMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 794, 725, 25, 24, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 24 * 1), 25 * 1, 24 * 1);
        }
        else if (this.type == "ashaiPowder")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 13, 656, 32, 33, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 33 * 1), 32 * 1, 33 * 1);
        }
        else if (this.type == "ashai")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 9, 764, 32, 33, this.invX - (1/2 * 32 * 2), this.invY - (1/2 * 33 * 2), 32 * 2, 33 * 2);
        }
        else if (this.type == "ashaiWood")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 15, 733, 23, 22, this.invX - (1/2 * 23 * 2), this.invY - (1/2 * 22 * 2), 23 * 2, 22 * 2);
        }
        else if (this.type == "porstolBerries")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 602, 231, 14, 11, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 11 * 1), 14 * 1, 11 * 1);
        }
        else if (this.type == "decipulaHead")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 760, 585, 40, 43, this.invX - (1/2 * 40 * 0.9), this.invY - (1/2 * 43 * 0.9), 40 * 0.9, 43 * 0.9);
        }
        else if (this.type == "athergmMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 442, 1, 22, 17, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 17 * 1), 22 * 1, 17 * 1);
        }
        else if (this.type == "driedAthergmMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 469, 0, 22, 17, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 17 * 1), 22 * 1, 17 * 1);
        }
        else if (this.type == "crenidRemains")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 223, 5, 36, 31, this.invX - (1/2 * 36 * 0.6), this.invY - (1/2 * 31 * 0.6), 36 * 0.6, 31 * 0.6);
        }
        else if (this.type == "kigariiPelt")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 445, 17, 52, 26, this.invX - (1/2 * 52 * 1.2), this.invY - (1/2 * 26 * 1.2), 52 * 1.2, 26 * 1.2);
        }
        else if (this.type == "rawKigariiFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 362, 56, 26, 28, this.invX - (1/2 * 26 * 1.3), this.invY - (1/2 * 28 * 1.3), 26 * 1.3, 28 * 1.3);
        }
        else if (this.type == "kigariiRibs")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 388, 56, 26, 28, this.invX - (1/2 * 26 * 1.3), this.invY - (1/2 * 28 * 1.3), 26 * 1.3, 28 * 1.3);
        }
        else if (this.type == "jungleHunterOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 604, 1061, 47, 92, this.invX - (1/2 * 47 * 0.75), this.invY - (1/2 * 92 * 0.75), 47 * 0.75, 92 * 0.75);
        }
        else if (this.type == "morshPuff")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 935, 824, 26, 25, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 25 * 1), 26 * 1, 25 * 1);
        }
        else if (this.type == "dalgerEgg")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 115, 113, 21, 23, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 23 * 1), 21 * 1, 23 * 1);
        }
        else if (this.type == "cookedDalgerEgg")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 120, 78, 33, 29, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "rawDalgerFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 101, 299, 33, 29, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "dalgerMeat")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 102, 326, 33, 29, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "dalgerHide")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 38, 785, 115, 46, this.invX - (1/2 * 115 * 0.75), this.invY - (1/2 * 46 * 0.75), 115 * 0.75, 46 * 0.75);
        }
        else if (this.type == "blackTrollPelt")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 937, 20, 43, 36, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 36 * 1), 43 * 1, 36 * 1);
        }
        else if (this.type == "blackTrollSkull")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 938, 96, 43, 36, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 36 * 1), 43 * 1, 36 * 1);
        }
        else if (this.type == "cruorccaNeedle")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 948, 874, 8, 4, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 4 * 2), 8 * 2, 4 * 2);
        }
        else if (this.type == "gorgonTail")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 787, 5, 36, 46, this.invX - (1/2 * 36 * 0.9), this.invY - (1/2 * 46 * 0.9), 36 * 0.9, 46 * 0.9);
        }
        else if (this.type == "gorgonLeg")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 837, 13, 80, 110, this.invX - (1/2 * 80 * 0.4), this.invY - (1/2 * 110 * 0.4), 80 * 0.4, 110 * 0.4);
        }
        else if (this.type == "rawGorgonFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 376, 292, 12, 13, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 14 * 1), 25 * 1, 14 * 1);
        }
        else if (this.type == "gorgonMeat")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 139, 109, 26, 28, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 14 * 1), 25 * 1, 14 * 1);
        }
        else if (this.type == "bahabLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 436, 733, 27, 30, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 30 * 1), 27 * 1, 30 * 1);
        }
        else if (this.type == "bahabPod")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 465, 737, 21, 30, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 30 * 1), 21 * 1, 30 * 1);
        }
        else if (this.type == "driedBahabPod")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 415, 734, 21, 30, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 30 * 1), 21 * 1, 30 * 1);
        }
        else if (this.type == "gojiiFlower")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 335, 753, 21, 25, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 25 * 1), 21 * 1, 25 * 1);
        }
        else if (this.type == "cerebrisMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 211, 678, 32, 34, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 34 * 1), 32 * 1, 34 * 1);
        }
        else if (this.type == "vardanianCoatOfPlates")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 544, 8, 103, 209, this.invX - (1/2 * 103 * 0.35), this.invY - (1/2 * 209 * 0.35), 103 * 0.35, 209 * 0.35);
        }
        else if (this.type == "vardanianAketon")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 654, 12, 105, 143, this.invX - (1/2 * 105 * 0.5), this.invY - (1/2 * 143 * 0.5), 105 * 0.5, 143 * 0.5);
        }
        else if (this.type == "vardanianSoldierOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 638, 151, 49, 104, this.invX - (1/2 * 49 * 0.75), this.invY - (1/2 * 104 * 0.75), 49 * 0.75, 104 * 0.75);
        }
        else if (this.type == "orgishEliteArmour")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 238, 11, 105, 207, this.invX - (1/2 * 105 * 0.35), this.invY - (1/2 * 207 * 0.35), 105 * 0.35, 207 * 0.35);
        }
        else if (this.type == "orgishRoyalArmour")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 394, 2, 104, 214, this.invX - (1/2 * 104 * 0.35), this.invY - (1/2 * 214 * 0.35), 104 * 0.35, 214 * 0.35);
        }
        else if (this.type == "araneaFang")
        {
            LXX.beginPath();
            LXX.drawImage(jungho, 19, 448, 19, 9, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 9 * 1), 19 * 1, 9 * 1);
        }
        else if (this.type == "viudaFang")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 389, 297, 12, 6, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 6 * 1), 12 * 1, 6 * 1);
        }
        else if (this.type == "viudaVenomSac")
        {
            LXX.beginPath();
            LXX.drawImage(stic, 376, 292, 12, 13, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 13 * 1), 12 * 1, 13 * 1);
        }
        else if (this.type == "boreaLeg")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 2470, 11, 43, 55, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 55 * 1), 43 * 1, 55 * 1);
        }
        else if (this.type == "saliseaVenomSac")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 417, 1287, 17, 20, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 20 * 1), 17 * 1, 20 * 1);
        }
        else if (this.type == "saliseaFur")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 406, 1263, 40, 25, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 25 * 1), 40 * 1, 25 * 1);
        }
        else if (this.type == "saliseaLeather" || this.type == "treatedSaliseaHide")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 406, 1308, 40, 25, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 25 * 1), 40 * 1, 25 * 1);
        }
        else if (this.type == "zafBeetleWhiskers")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 571, 976, 25, 23, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 23 * 1), 25 * 1, 23 * 1);
        }
        else if (this.type == "zafBeetleFeeler")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 572, 1002, 23, 36, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 36 * 1), 23 * 1, 36 * 1);
        }
        else if (this.type == "zafBeetleShell")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 490, 985, 75, 38, this.invX - (1/2 * 75 * 1), this.invY - (1/2 * 38 * 1), 75 * 1, 38 * 1);
        }
        else if (this.type == "vardanianPriestRobes")
        {
            LXX.beginPath();
            LXX.drawImage(tribe, 19, 77, 59, 111, this.invX - (1/2 * 59 * 0.7), this.invY - (1/2 * 111 * 0.7), 59 * 0.7, 111 * 0.7);
        }
        else if (this.type == "saugRoot")
        {
            LXX.beginPath();
            LXX.drawImage(tribe, 414, 6, 45, 16, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 16 * 1.15), 45 * 1.15, 16 * 1.15);
        }
        else if (this.type == "roastedSaugRoot")
        {
            LXX.beginPath();
            LXX.drawImage(tribe, 490, 6, 45, 16, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 16 * 1.15), 45 * 1.15, 16 * 1.15);
        }
        else if (this.type == "roastedSaugRootHalf")
        {
            LXX.beginPath();
            LXX.drawImage(tribe, 529, 5, 45, 16, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 16 * 1.15), 45 * 1.15, 16 * 1.15);
        }
        else if (this.type == "koivayaPelt")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 298, 285, 41, 33, this.invX - (1/2 * 41 * 1.1), this.invY - (1/2 * 33 * 1.1), 41 * 1.1, 33 * 1.1);
        }
        else if (this.type == "rawKoivayaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 352, 293, 20, 21, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 21 * 1.1), 20 * 1.1, 21 * 1.1);
        }
        else if (this.type == "koivayaMeat")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 384, 292, 20, 21, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 21 * 1.1), 20 * 1.1, 21 * 1.1);
        }
        else if (this.type == "toadHide")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 469, 828, 67, 69, this.invX - (1/2 * 67 * 0.8), this.invY - (1/2 * 69 * 0.8), 67 * 0.8, 69 * 0.8);
        }
        else if (this.type == "rawToadFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 781, 582, 26, 26, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "toadMeat")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 816, 583, 26, 26, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "smokedToadMeat")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 780, 607, 26, 26, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "vardanianRoyalAttireM")
        {
            LXX.beginPath();
            LXX.drawImage(tribe, 102, 81, 65, 113, this.invX - (1/2 * 65 * 0.7), this.invY - (1/2 * 113 * 0.7), 65 * 0.7, 113 * 0.7);
        }
        else if (this.type == "vardanianRoyalAttireF")
        {
            LXX.beginPath();
            LXX.drawImage(tribe, 219, 65, 76, 125, this.invX - (1/2 * 76 * 0.45), this.invY - (1/2 * 125 * 0.45), 76 * 0.45, 125 * 0.45);
        }
        else if (this.type == "vardanianCrossbow")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 301, 624, 25, 26, this.invX - (1/2 * 25 * 1.1), this.invY - (1/2 * 26 * 1.1), 25 * 1.1, 26 * 1.1);
        }
        else if (this.type == "ironBolt")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 291, 612, 31, 9, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 9 * 1), 31 * 1, 9 * 1);
        }
        else if (this.type == "bovineMammaryGlands")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 368, 518, 26, 23, this.invX - (1/2 * 26 * 0.9), this.invY - (1/2 * 23 * 0.9), 26 * 0.9, 23 * 0.9);
        }
        else if (this.type == "rawBovineRibs")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 462, 519, 26, 23, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "smokedBovineRibs")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 402, 520, 26, 23, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "bovineRibs")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 432, 520, 26, 23, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "bovineHide" || this.type == "treatedBovineHide")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 464, 164, 36, 26, this.invX - (1/2 * 36 * 1.8), this.invY - (1/2 * 26 * 1.8), 36 * 1.8, 26 * 1.8);
        }
        else if (this.type == "tannedBovineHide")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 512, 163, 36, 26, this.invX - (1/2 * 36 * 1.7), this.invY - (1/2 * 26 * 1.7), 36 * 1.7, 26 * 1.7);
        }
        else if (this.type == "borsht")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 46, 91, 48, 50, this.invX - (1/2 * 48 * 1.4), this.invY - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "roastedBorsht")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 88, 91, 48, 50, this.invX - (1/2 * 48 * 1.4), this.invY - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "slicedBorsht")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 125, 93, 48, 50, this.invX - (1/2 * 48 * 1.4), this.invY - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "swampLily")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 7, 134, 48, 50, this.invX - (1/2 * 48 * 1.2), this.invY - (1/2 * 50 * 1.2), 48 * 1.2, 50 * 1.2);
        }
        else if (this.type == "cattail")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 57, 48, 33, 43, this.invX - (1/2 * 33 * 1.25), this.invY - (1/2 * 43 * 1.25), 33 * 1.25, 43 * 1.25);
        }
        else if (this.type == "cabbage")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 81, 11, 14, 14, this.invX - (1/2 * 14 * 1.5), this.invY - (1/2 * 14 * 1.5), 14 * 1.5, 14 * 1.5);
        }
        else if (this.type == "soakedMandrake")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 812, 201, 24, 44, this.invX - (1/2 * 24 * 1.3), this.invY - (1/2 * 44 * 1.3), 24 * 1.3, 44 * 1.3);
        }
        else if (this.type == "theBloodyChalice")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 80, 524, 15, 32, this.invX - (1/2 * 15 * 1.5), this.invY - (1/2 * 32 * 1.5), 15 * 1.5, 32 * 1.5);
        }
        else if (this.type == "bloodyChalice")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 58, 524, 15, 32, this.invX - (1/2 * 15 * 1.5), this.invY - (1/2 * 32 * 1.5), 15 * 1.5, 32 * 1.5);
        }
        else if (this.type == "vardanianPot" || this.type == "vardanianPotOfWater" || this.type == "vardanianPotOfBovineMilk" || this.type == "vardanianPotOfWaantiMilk" || this.type == "vardanianPotOfNaapridMilk" || this.type == "vardanianPotOfSourCream" || this.type == "vardanianPotOfMandrake" || this.type == "vardanianPotOfMushroomStrogonoff" || this.type == "vardanianPotOfBorshtSoup" || this.type == "vardanianPotOfCabbageSoup" || this.type == "vardanianPotOfCreamyVenisonStew" || this.type == "vardanianPotOfBovineAndPierogiStew" || this.type == "vardanianPotOfBovineStrogonoff" || this.type == "vardanianPotOfTagglerStew" || this.type == "vardanianPotOfMulstishStew" || this.type == "vardanianPotOfToadStew" || this.type == "vardanianPotOfSlowBraisedKoivaya")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 584, 525, 26, 22, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 22 * 1.5), 26 * 1.5, 22 * 1.5);
        }
        else if (this.type == "vardanianBowl")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 442, 559, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfWater")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 510, 614, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineMilk" || this.type == "vardanianBowlOfWaantiMilk" || this.type == "vardanianBowlOfNaapridMilk")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 443, 616, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfSourCream")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 872, 482, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMandrake")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 850, 217, 45, 20, this.invX - (1/2 * 45 * 1.5), this.invY - (1/2 * 20 * 1.5), 45 * 1.5, 20 * 1.5);
        }
        else if (this.type == "bucketOfBovineMilk")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 334, 364, 11, 18, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 18 * 2), 11 * 2, 18 * 2);
        }
        else if (this.type == "bucketOfChyoulJuice")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 392, 395, 11, 18, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 18 * 2), 11 * 2, 18 * 2);
        }
        else if (this.type == "bucketOfCranberryJuice")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 408, 395, 11, 18, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 18 * 2), 11 * 2, 18 * 2);
        }
        else if (this.type == "bucketOfMandrake")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 354, 396, 16, 31, this.invX - (1/2 * 16 * 2), this.invY - (1/2 * 31 * 2), 16 * 2, 31 * 2);
        }
        else if (this.type == "kellishClayPotOfBovineMilk")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 353, 365, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "kellishClayPotOfMandrake")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 330, 416, 18, 31, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 31 * 1.7), 18 * 1.7, 31 * 1.7);
        }
        else if (this.type == "chyoulJuicePintGlass" || this.type == "chyoulWine" )
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 441, 404, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
        }
        else if (this.type == "cranberryJuicePintGlass" || this.type == "cranberryWine" )
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 376, 369, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
        }
        else if (this.type == "glassBottleOfChyoulWine")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 462, 407, 8, 21, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 21 * 2), 8 * 2, 21 * 2);
        }
        else if (this.type == "glassBottleOfCranberryWine")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 397, 372, 8, 21, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 21 * 2), 8 * 2, 21 * 2);
        }
        else if (this.type == "cranberries")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 781, 115, 15, 13, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 13 * 1.2), 15 * 1.2, 13 * 1.2);
        }
        else if (this.type == "chyoulBerries")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 816, 169, 15, 13, this.invX - (1/2 * 15 * 1.5), this.invY - (1/2 * 13 * 1.5), 15 * 1.5, 13 * 1.5);
        }
        else if (this.type == "shears")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 855, 250, 32, 31, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 31 * 1), 32 * 1, 31 * 1);
        }
        else if (this.type == "jesterOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 902, 632, 58, 98, this.invX - (1/2 * 58 * 0.85), this.invY - (1/2 * 98 * 0.85), 58 * 0.85, 98 * 0.85);
        }
        else if (this.type == "vardanianNobleOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 1073, 629, 58, 98, this.invX - (1/2 * 58 * 0.9), this.invY - (1/2 * 98 * 0.9), 58 * 0.9, 98 * 0.9);
        }
        else if (this.type == "vardanianRoyalDress")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 1014, 628, 58, 98, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 98 * 0.8), 58 * 0.8, 98 * 0.8);
        }
        else if (this.type == "jesterShoes")
        {
            LXX.beginPath();
            LXX.drawImage(hydra, 830, 697, 43, 33, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 33 * 1), 43 * 1, 33 * 1);
        }
        else if (this.type == "vardanWearM")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 803, 328, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "vardanWearF")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 854, 331, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "vardanOutfitM")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 948, 331, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "vardanOutfitF")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 903, 331, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "hideBoots")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 952, 226, 31, 35, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 35 * 1), 31 * 1, 35 * 1);
        }
        else if (this.type == "elkBoots")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 901, 226, 45, 35, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 35 * 1), 45 * 1, 35 * 1);
        }
        else if (this.type == "elkGloves")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 942, 259, 45, 35, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 35 * 1), 45 * 1, 35 * 1);
        }
        else if (this.type == "hideGloves")
        {
            LXX.beginPath();
            LXX.drawImage(toad, 902, 259, 45, 35, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 35 * 1), 45 * 1, 35 * 1);
        }
        else if (this.type == "silverStake")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 301, 26, 18, 33, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 33 * 1), 18 * 1, 33 * 1);
        }
        else if (this.type == "rawCheshireFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 460, 534, 31, 34, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "cheshireMeat")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 428, 532, 31, 34, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "cheshireTongue")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 491, 534, 31, 34, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "batWing")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 666, 9, 17, 13, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 13 * 1), 17 * 1, 13 * 1);
        }
        else if (this.type == "cheshirePelt")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 530, 538, 43, 36, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 36 * 1), 43 * 1, 36 * 1);
        }
        else if (this.type == "ameloyPerfume" || this.type == "poegroonOil")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1735, 201, 10, 15, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 15 * 1), 10 * 1, 15 * 1);
        }
        else if (this.type == "thadineBranch")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 101, 106, 68, 70, this.invX - (1/2 * 68 * 0.4), this.invY - (1/2 * 70 * 0.4), 68 * 0.4, 70 * 0.4);
        }
        else if (this.type == "ameloyFlower")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 178, 9, 82, 87, this.invX - (1/2 * 82 * 0.3), this.invY - (1/2 * 87 * 0.3), 82 * 0.3, 87 * 0.3);
        }
        else if (this.type == "thegolThornSml")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 424, 9, 43, 57, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 57 * 1), 43 * 1, 57 * 1);
        }
        else if (this.type == "thegolThornLrg")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 424, 9, 43, 57, this.invX - (1/2 * 43 * 1.17), this.invY - (1/2 * 57 * 1.17), 43 * 1.17, 57 * 1.17);
        }
        else if (this.type == "varonoiFeather")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 244, 552, 53, 26, this.invX - (1/2 * 53 * 0.6), this.invY - (1/2 * 26 * 0.6), 53 * 0.6, 26 * 0.6);
        }
        else if (this.type == "kerShell")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 686, 25, 40, 41, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 41 * 1), 40 * 1, 41 * 1);
        }
        else if (this.type == "kerClaw")
        {
            LXX.beginPath();
            LXX.drawImage(milk, 586, 21, 64, 42, this.invX - (1/2 * 64 * 0.9), this.invY - (1/2 * 42 * 0.9), 64 * 0.9, 42 * 0.9);
        }
        else if (this.type == "nirwadenSabreAndShield")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 376, 249, 48, 66, this.invX  - (1/2 * 48 * 1), this.invY - (1/2 * 66 * 1), 48 * 1, 66 * 1);
        }
        else if (this.type == "silkAndDagger")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 169, 88, 28, 53, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 53 * 1), 28 * 1, 53 * 1);
        }
        else if (this.type == "chupacabrasHead")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 224, 738, 65, 63, this.invX - (1/2 * 65 * 1), this.invY - (1/2 * 63 * 1), 65 * 1, 63 * 1);
        }
        else if (this.type == "chupacabrasPelt")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 170, 809, 149, 67, this.invX - (1/2 * 149 * 0.45), this.invY - (1/2 * 67 * 0.45), 149 * 0.45, 67 * 0.45);
        }
        else if (this.type == "changelingSkull")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 157, 673, 21, 28, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "changelingFur")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 126, 715, 21, 28, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "changelingHeart")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 152, 716, 21, 28, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "wobeaFruit")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 164, 9, 14, 13, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 13 * 2), 14 * 2, 13 * 2);
        }
        else if (this.type == "wobeaSlice")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 188, 11, 14, 13, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 13 * 2), 14 * 2, 13 * 2);
        }
        else if (this.type == "wobeaLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 53, 5, 28, 13, this.invX - (1/2 * 28 * 2), this.invY - (1/2 * 13 * 2), 28 * 2, 13 * 2);
        }
        else if (this.type == "wobeaFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 208, 8, 14, 13, this.invX - (1/2 * 21 * 2), this.invY - (1/2 * 13 * 2), 21 * 2, 13 * 2);
        }
        else if (this.type == "wobeaNeedles")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 49, 63, 24, 25, this.invX - (1/2 * 24 * 2), this.invY - (1/2 * 25 * 2), 24 * 2, 25 * 2);
        }
        else if (this.type == "orgishClothing")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 121, 494, 57, 117, this.invX - (1/2 * 57 * 0.65), this.invY - (1/2 * 117 * 0.65), 57 * 0.65, 117 * 0.65);
        }
        else if (this.type == "matadorOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 93, 10, 59, 130, this.invX - (1/2 * 59 * 0.65), this.invY - (1/2 * 130 * 0.65), 59 * 0.65, 130 * 0.65);
        }
        else if (this.type == "boarArmour")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 41, 635, 68, 120, this.invX - (1/2 * 68 * 0.55), this.invY - (1/2 * 120 * 0.55), 68 * 0.55, 120 * 0.55);
        }
        else if (this.type == "barracoPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(chupa, 244, 238, 91, 123, this.invX - (1/2 * 91 * 0.6), this.invY - (1/2 * 123 * 0.6), 91 * 0.6, 123 * 0.6);
        }
        else if (this.type == "sickle")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 64, 814, 30, 39, this.invX - (1/2 * 30 * 1.35), this.invY - (1/2 * 39 * 1.35), 30 * 1.35, 39 * 1.35);
        }
        else if (this.type == "rose")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 717, 530, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "roseBoquet")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 684, 527, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "darkRoseBoquet")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 685, 580, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "darkRose")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 718, 583, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "redStetriliFlower")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 659, 684, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "orangeStetriliFlower")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 611, 681, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "yellowStetriliFlower")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 558, 682, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "peachStetriliFlower")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 584, 682, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "blueStetriliFlower")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 636, 683, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "boggartSpine")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 410, 978, 51, 45, this.invX - (1/2 * 51 * 0.8), this.invY - (1/2 * 45 * 0.8), 51 * 0.8, 45 * 0.8);
        }
        else if (this.type == "assassinWrappings")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 134, 791, 52, 96, this.invX - (1/2 * 52 * 0.85), this.invY - (1/2 * 96 * 0.85), 52 * 0.85, 96 * 0.85);
        }
        else if (this.type == "aldrekiiHijab")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 676, 1077, 38, 100, this.invX - (1/2 * 38 * 0.85), this.invY - (1/2 * 100 * 0.85), 38 * 0.85, 100 * 0.85);
        }
        else if (this.type == "aldrekiiTurbanRed")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 725, 1074, 38, 100, this.invX - (1/2 * 38 * 0.85), this.invY - (1/2 * 100 * 0.85), 38 * 0.85, 100 * 0.85);
        }
        else if (this.type == "aldrekiiTurbanPurple")
        {
            LXX.beginPath();
            LXX.drawImage(bogg, 735, 792, 38, 100, this.invX - (1/2 * 38 * 0.85), this.invY - (1/2 * 100 * 0.85), 38 * 0.85, 100 * 0.85);
        }
        else if (this.type == "hops")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 262, 26, 15, 15, this.invX - (1/2 * 15 * 1.25), this.invY - (1/2 * 15 * 1.25), 15 * 1.25, 15 * 1.25);
        }
        else if (this.type == "rawBoarChunks")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 702, 1835, 53, 51, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 51 * 1), 53 * 1, 51 * 1);
        }
        else if (this.type == "boarChunks")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 701, 1886, 53, 51, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 51 * 1), 53 * 1, 51 * 1);
        }
        else if (this.type == "porkAndHalgom")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 758, 1869, 35, 35, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "iemaPork")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 759, 1902, 35, 35, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "garlicTialoPork")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 700, 1954, 35, 35, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "rawBoarChunksSmall")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 751, 1947, 27, 26, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 26 * 1), 27 * 1, 26 * 1);
        }
        else if (this.type == "boarChunksSmall")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 750, 1972, 27, 26, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 26 * 1), 27 * 1, 26 * 1);
        }
        else if (this.type == "searedFalder")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 664, 1981, 20, 19, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 19 * 1), 20 * 1, 19 * 1);
        }
        else if (this.type == "searedSalmon")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 634, 1979, 20, 19, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 19 * 1), 20 * 1, 19 * 1);
        }
        else if (this.type == "molteHide")
        {
            LXX.beginPath();
            LXX.drawImage(molte, 489, 19, 48, 29, this.invX - (1/2 * 48 * 1.15), this.invY - (1/2 * 29 * 1.15), 48 * 1.15, 29 * 1.15);
        }
        else if (this.type == "molteHead")
        {
            LXX.beginPath();
            LXX.drawImage(molte, 508, 110, 24, 24, this.invX - (1/2 * 24 * 1.2), this.invY - (1/2 * 24 * 1.2), 24 * 1.2, 24 * 1.2);
        }
        else if (this.type == "moltePaw")
        {
            LXX.beginPath();
            LXX.drawImage(molte, 498, 51, 38, 17, this.invX - (1/2 * 38 * 1.2), this.invY - (1/2 * 17 * 1.2), 38 * 1.2, 17 * 1.2);
        }
        else if (this.type == "molteMeat")
        {
            LXX.beginPath();
            LXX.drawImage(molte, 513, 154, 25, 17, this.invX - (1/2 * 25 * 1.2), this.invY - (1/2 * 17 * 1.2), 25 * 1.2, 17 * 1.2);
        }
        else if (this.type == "rawMolteFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(molte, 514, 138, 25, 17, this.invX - (1/2 * 25 * 1.2), this.invY - (1/2 * 17 * 1.2), 25 * 1.2, 17 * 1.2);
        }
        else if (this.type == "spade")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 573, 5, 52, 60, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 60 * 1), 52 * 1, 60 * 1);
        }
        else if (this.type == "sprite")
        {
            LXX.beginPath();
            LXX.drawImage(tomb, 2657, 21, 26, 22, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 22 * 1), 26 * 1, 22 * 1);
        }
        else if (this.type == "gargoyleHeart")
        {
            LXX.beginPath();
            LXX.drawImage(garg, 826, 414, 35, 36, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 36 * 1), 35 * 1, 36 * 1);
        }
        else if (this.type == "greyTrollFur")
        {
            LXX.beginPath();
            LXX.drawImage(garg, 848, 1745, 109, 80, this.invX - (1/2 * 109 * 0.9), this.invY - (1/2 * 80 * 0.9), 109 * 0.9, 80 * 0.9);
        }
        else if (this.type == "rawIemaTart")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 585, 1981, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "rawChonaTart")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 497, 1983, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "rawPolyapaTart")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 538, 1982, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "iemaTart")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 568, 1981, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "chonaTart")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 481, 1982, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "polyapaTart")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 522, 1983, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "mrbTacticalArmour")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 102, 2, 83, 170, this.invX - (1/2 * 83 * 0.4), this.invY - (1/2 * 170 * 0.4), 83 * 0.4, 170 * 0.4);
        }
        else if (this.type == "doctorOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 738, 514, 53, 116, this.invX - (1/2 * 53 * 0.65), this.invY  - (1/2 * 116 * 0.65), 53 * 0.65, 116 * 0.65);
        }
        else if (this.type == "vardanianHalberd")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(0.3);
            LXX.drawImage(gent, 622, 1823, 39, 151, 0 - (1/2 * 39 * 0.5), 0 - (1/2 * 151 * 0.5), 39 * 0.5, 151 * 0.5);
            LXX.restore();
        }
        else if (this.type == "windArrow")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 571, 1873, 31, 10, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 10 * 1), 31 * 1, 10 * 1);
        }
        else if (this.type == "halgomMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 454, 1903, 29, 29, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 29 * 1), 29 * 1, 29 * 1);
        }
        else if (this.type == "roastedHalgomMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 418, 1902, 29, 29, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 29 * 1), 29 * 1, 29 * 1);
        }
        else if (this.type == "tialoFrond")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 382, 1903, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "steamedTialo")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 758, 1842, 27, 24, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 24 * 1), 27 * 1, 24 * 1);
        }
        else if (this.type == "iemaBerries")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 471, 1949, 22, 25, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 25 * 1), 22 * 1, 25 * 1);
        }
        else if (this.type == "erguerFlower")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 557, 1912, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "erguerLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 585, 1916, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "erguerPaste")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 586, 1945, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "bucketOfErguerPaste")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 496, 1851, 15, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
        }
        else if (this.type == "erguerWine")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 533, 1858, 13, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 15 * 2), 13 * 2, 15 * 2);
        }
        else if (this.type == "glassBottleOfErguerWine")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 464, 1867, 11, 21, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 21 * 2), 11 * 2, 21 * 2);
        }
        else if (this.type == "kolumPowder")
        {
            LXX.beginPath();
            LXX.drawImage(kolumIMG, 0, 0, 28, 30, this.invX - (1/2 * 28 * 0.6), this.invY - (1/2 * 30 * 0.6), 28 * 0.6, 30 * 0.6);
        }
        else if (this.type == "vardanianPlateArmour" || this.type == "vardanianPlateArmourBlackPlume" || this.type == "vardanianPlateArmourRedPlume")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 552, 268, 71, 123, this.invX - (1/2 * 71 * 0.65), this.invY - (1/2 * 123 * 0.65), 71 * 0.65, 123 * 0.65);
        }
        else if (this.type == "nechrovitePlateArmour" || this.type == "nechrovitePlateArmourBlackPlume" || this.type == "nechrovitePlateArmourRedPlume")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 624, 267, 71, 123, this.invX - (1/2 * 71 * 0.65), this.invY - (1/2 * 123 * 0.65), 71 * 0.65, 123 * 0.65);
        }
        else if (this.type == "rawGhoulFlyStomach")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 482, 160, 34, 31, this.invX - (1/2 * 34 * 1.1), this.invY - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "brittleGhoulFlyStomach")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 434, 163, 34, 31, this.invX - (1/2 * 34 * 1.1), this.invY - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "ghoulFlyPowder")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 355, 165, 34, 31, this.invX - (1/2 * 34 * 1.1), this.invY - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "ghoulFlyWings")
        {
            LXX.beginPath();
            LXX.drawImage(dmil, 271, 164, 44, 34, this.invX - (1/2 * 44 * 1.1), this.invY - (1/2 * 34 * 1.1), 44 * 1.1, 34 * 1.1);
        }
        else if (this.type == "copperOre")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 930, 2193, 21, 28, this.invX - (1/2 * 21 * 0.8), this.invY - (1/2 * 28 * 0.8), 21 * 0.8, 28 * 0.8);
        }
        else if (this.type == "copper")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 873, 2190, 37, 34, this.invX - (1/2 * 37 * 0.68), this.invY - (1/2 * 34 * 0.68), 37 * 0.68, 34 * 0.68);
        }
        else if (this.type == "copperWire")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 893, 2240, 47, 22, this.invX - (1/2 * 47 * 0.6), this.invY - (1/2 * 22 * 0.6), 47 * 0.6, 22 * 0.6);
        }
        else if (this.type == "copperDust")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 926, 2270, 41, 39, this.invX - (1/2 * 41 * 0.69), this.invY - (1/2 * 39 * 0.69), 41 * 0.69, 39 * 0.69);
        }
        else if (this.type == "alcaStone")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1634, 467, 28, 26, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 26 * 1), 28 * 1, 26 * 1);
        }
        else if (this.type == "spiritTalisman")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 168, 3371, 61, 55, this.invX - (1/2 * 61 * 0.55), this.invY - (1/2 * 55 * 0.55), 61 * 0.55, 55 * 0.55);
        }
        else if (this.type == "engineerOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 901, 2388, 90, 133, this.invX - (1/2 * 90 * 0.58), this.invY - (1/2 * 133 * 0.58), 90 * 0.58, 133 * 0.58);
        }
        else if (this.type == "naapricha")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 1212, 2997, 20, 17, this.invX - (1/2 * 20 * 1.15), this.invY - (1/2 * 17 * 1.15), 20 * 1.15, 17 * 1.15);
        }
        else if (this.type == "naaprichaWedge")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 1189, 2997, 24, 12, this.invX - (1/2 * 24 * 1.15), this.invY - (1/2 * 12 * 1.15), 24 * 1.15, 12 * 1.15);
        }
        else if (this.type == "garlic")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 874, 2274, 25, 28, this.invX - (1/2 * 25 * 0.55), this.invY - (1/2 * 28 * 0.55), 25 * 0.55, 28 * 0.55);
        }
        else if (this.type == "chonaFruit")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 726, 2556, 16, 15, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 15 * 1.2), 16 * 1.2, 15 * 1.2);
        }
        else if (this.type == "polyapaFruit")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 748, 2553, 15, 17, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 17 * 1.2), 15 * 1.2, 17 * 1.2);
        }
        else if (this.type == "nirwadenLance")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 263, 532, 242, 34, this.invX - (1/2 * 242 * 0.33), this.invY - (1/2 * 34 * 0.33), 242 * 0.33, 34 * 0.33);
        }
        else if (this.type == "duendeEsophagus")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 9, 1938, 39, 60, this.invX - (1/2 * 39 * 0.66), this.invY - (1/2 * 60 * 0.66), 39 * 0.66, 60 * 0.66);
        }
        else if (this.type == "driedDuendeEsophagus")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 62, 1939, 39, 60, this.invX - (1/2 * 39 * 0.66), this.invY - (1/2 * 60 * 0.66), 39 * 0.66, 60 * 0.66);
        }
        else if (this.type == "duendePowder")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 113, 1955, 37, 33, this.invX - (1/2 * 37 * 0.66), this.invY - (1/2 * 33 * 0.66), 37 * 0.66, 33 * 0.66);
        }
        else if (this.type == "bacon")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 677, 750, 42, 37, this.invX - (1/2 * 42 * 0.64), this.invY - (1/2 * 37 * 0.64), 42 * 0.64, 37 * 0.64);
        }
        else if (this.type == "rawBacon")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 625, 751, 42, 37, this.invX - (1/2 * 42 * 0.64), this.invY - (1/2 * 37 * 0.64), 42 * 0.64, 37 * 0.64);
        }
        else if (this.type == "porkbelly")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 709, 794, 51, 31, this.invX - (1/2 * 51 * 0.64), this.invY - (1/2 * 31 * 0.64), 51 * 0.64, 31 * 0.64);
        }
        else if (this.type == "rawPorkbelly")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 643, 795, 51, 31, this.invX - (1/2 * 51 * 0.64), this.invY - (1/2 * 31 * 0.64), 51 * 0.64, 31 * 0.64);
        }
        else if (this.type == "curedPork")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 103, 1318, 38, 39, this.invX - (1/2 * 38 * 0.64), this.invY - (1/2 * 39 * 0.64), 38 * 0.64, 39 * 0.64);
        }
        else if (this.type == "boarMeat")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 13, 1318, 69, 33, this.invX - (1/2 * 69 * 0.64), this.invY - (1/2 * 33 * 0.64), 69 * 0.64, 33 * 0.64);
        }
        else if (this.type == "rawBoarFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 13, 1275, 69, 33, this.invX - (1/2 * 69 * 0.64), this.invY - (1/2 * 33 * 0.64), 69 * 0.64, 33 * 0.64);
        }
        else if (this.type == "chainsaw")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 844, 2059, 74, 116, this.invX - (1/2 * 74 * 0.64), this.invY - (1/2 * 116 * 0.64), 74 * 0.64, 116 * 0.64);
        }
        else if (this.type == "witchHunterOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 705, 841, 96, 145, this.invX - (1/2 * 96 * 0.5), this.invY - (1/2 * 145 * 0.5), 96 * 0.5, 145 * 0.5);
        }
        else if (this.type == "nirwadenGambeson")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 107, 462, 96, 145, this.invX - (1/2 * 96 * 0.5), this.invY - (1/2 * 145 * 0.5), 96 * 0.5, 145 * 0.5);
        }
        else if (this.type == "nirwadenMorionArmour")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 103, 624, 96, 145, this.invX - (1/2 * 96 * 0.5), this.invY - (1/2 * 145 * 0.5), 96 * 0.5, 145 * 0.5);
        }
        else if (this.type == "peacockFeather")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 7, 1087, 73, 35, this.invX - (1/2 * 73 * 1), this.invY - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "peacockMeat")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 11, 1205, 73, 35, this.invX - (1/2 * 73 * 0.575), this.invY - (1/2 * 35 * 0.575), 73 * 0.575, 35 * 0.575);
        }
        else if (this.type == "rawPeacockFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 14, 1164, 73, 35, this.invX - (1/2 * 73 * 0.575), this.invY - (1/2 * 35 * 0.575), 73 * 0.575, 35 * 0.575);
        }
        else if (this.type == "nirwadenPriestRobes")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 534, 3458, 89, 173, this.invX - (1/2 * 89 * 0.45), this.invY - (1/2 * 173 * 0.45), 89 * 0.45, 173 * 0.45);
        }
        else if (this.type == "nirwadenClothingM")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 901, 837, 97, 149, this.invX - (1/2 * 97 * 0.525), this.invY - (1/2 * 149 * 0.525), 97 * 0.525, 149 * 0.525);
        }
        else if (this.type == "nirwadenClothingF")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 89, 999, 97, 149, this.invX - (1/2 * 97 * 0.525), this.invY - (1/2 * 149 * 0.525), 97 * 0.525, 149 * 0.525);
        }
        else if (this.type == "nirwadenNobleOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 98, 821, 98, 146, this.invX - (1/2 * 98 * 0.525), this.invY - (1/2 * 146 * 0.525), 98 * 0.525, 146 * 0.525);
        }
        else if (this.type == "nirwadenNobleDress")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 235, 795, 141, 182, this.invX - (1/2 * 141 * 0.37), this.invY - (1/2 * 182 * 0.37), 141 * 0.37, 182 * 0.37);
        }
        else if (this.type == "nirwadenPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 312, 642, 100, 145, this.invX - (1/2 * 100 * 0.525), this.invY - (1/2 * 145 * 0.525), 100 * 0.525, 145 * 0.525);
        }
        else if (this.type == "griffinPelt")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 746, 2602, 96, 53, this.invX - (1/2 * 96 * 0.65), this.invY - (1/2 * 53 * 0.65), 96 * 0.65, 53 * 0.65);
        }
        else if (this.type == "roastedGriffinHeart")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 778, 2545, 44, 49, this.invX - (1/2 * 44 * 0.8), this.invY - (1/2 * 49 * 0.8), 44 * 0.8, 49 * 0.8);
        }
        else if (this.type == "griffinHeart")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 825, 2511, 44, 49, this.invX - (1/2 * 44 * 0.8), this.invY - (1/2 * 49 * 0.8), 44 * 0.8, 49 * 0.8);
        }
        else if (this.type == "griffinHeadSml")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 853, 2574, 97, 103, this.invX - (1/2 * 97 * 0.55), this.invY - (1/2 * 103 * 0.55), 97 * 0.55, 103 * 0.55);
        }
        else if (this.type == "griffinHeadMed")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 853, 2574, 97, 103, this.invX - (1/2 * 97 * 0.6), this.invY - (1/2 * 103 * 0.6), 97 * 0.6, 103 * 0.6);
        }
        else if (this.type == "griffinHeadLrg")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 853, 2574, 97, 103, this.invX - (1/2 * 97 * 0.65), this.invY - (1/2 * 103 * 0.65), 97 * 0.65, 103 * 0.65);
        }
        else if (this.type == "horseMeat")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 912, 382, 45, 29, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "rawHorseFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 912, 340, 45, 29, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "horseHair")
        {
            LXX.beginPath();
            LXX.drawImage(atal, 911, 423, 45, 29, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "powderedRhinocerosHorn")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 721, 777, 22, 20, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 20 * 1), 22 * 1, 20 * 1);
        }
        else if (this.type == "rhinocerosHorn")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 721, 754, 41, 20, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 20 * 1), 41 * 1, 20 * 1);
        }
        else if (this.type == "slol")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 461, 601, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "rawSlol")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 458, 566, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "rawRiulpo")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 660, 657, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "riulpo")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 660, 701, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "polxetp")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 716, 699, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "rawPolxetp")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 715, 657, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "redBelliedFalder")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 670, 603, 53, 26, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 26 * 1), 53 * 1, 26 * 1);
        }
        else if (this.type == "rawRedBelliedFalder")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 673, 565, 53, 26, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 26 * 1), 53 * 1, 26 * 1);
        }
        else if (this.type == "rawDuskfish")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 728, 560, 78, 35, this.invX - (1/2 * 78 * 1), this.invY - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "duskfish")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 727, 598, 78, 35, this.invX - (1/2 * 78 * 1), this.invY - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "tridite")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 555, 762, 77, 54, this.invX - (1/2 * 77 * 0.75), this.invY - (1/2 * 54 * 0.75), 77 * 0.75, 54 * 0.75);
        }
        else if (this.type == "rawTridite")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 447, 761, 77, 54, this.invX - (1/2 * 77 * 0.75), this.invY - (1/2 * 54 * 0.75), 77 * 0.75, 54 * 0.75);
        }
        else if (this.type == "crawdid")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 624, 562, 37, 33, this.invX - (1/2 * 37 * 1), this.invY - (1/2 * 33 * 1), 37 * 1, 33 * 1);
        }
        else if (this.type == "crawdidTail")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 623, 601, 37, 33, this.invX - (1/2 * 37 * 1), this.invY - (1/2 * 33 * 1), 37 * 1, 33 * 1);
        }
        else if (this.type == "rawKalp")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 551, 668, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "kalp")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 552, 709, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "theGrailOfEternity")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 691, 765, 16, 24, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 24 * 1.2), 16 * 1.2, 24 * 1.2);
        }
        else if (this.type == "grailOfEternity")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 671, 766, 16, 24, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 24 * 1.2), 16 * 1.2, 24 * 1.2);
        }
        else if (this.type == "mugmulFur")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 13, 907, 27, 34, this.invX - (1/2 * 27 * 1.3), this.invY - (1/2 * 34 * 1.3), 27 * 1.3, 34 * 1.3);
        }
        else if (this.type == "mugmulMeat")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 83, 915, 18, 21, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 21 * 1.3), 18 * 1.3, 21 * 1.3);
        }
        else if (this.type == "rawMugmulFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 55, 915, 18, 21, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 21 * 1.3), 18 * 1.3, 21 * 1.3);
        }
        else if (this.type == "mugmulBrain")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 188, 972, 21, 21, this.invX - (1/2 * 21 * 1.3), this.invY - (1/2 * 21 * 1.3), 21 * 1.3, 21 * 1.3);
        }
        else if (this.type == "rawSalmon")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 555, 563, 57, 37, this.invX - (1/2 * 57 * 1), this.invY - (1/2 * 37 * 1), 57 * 1, 37 * 1);
        }
        else if (this.type == "salmon")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 556, 603, 57, 37, this.invX - (1/2 * 57 * 1), this.invY - (1/2 * 37 * 1), 57 * 1, 37 * 1);
        }
        else if (this.type == "rawSaskriit")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 448, 663, 73, 35, this.invX - (1/2 * 73 * 1), this.invY - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "saskriit")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 452, 707, 73, 35, this.invX - (1/2 * 73 * 1), this.invY - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "drileLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 600, 50, 56, 91, this.invX - (1/2 * 56 * 0.8), this.invY - (1/2 * 91 * 0.8), 56 * 0.8, 91 * 0.8);
        }
        else if (this.type == "drileLeatherBoots")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 661, 87, 42, 41, this.invX - (1/2 * 42 * 0.9), this.invY - (1/2 * 41 * 1.15), 42 * 0.9, 41 * 0.9);
        }
        else if (this.type == "drileLeatherGloves")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 714, 50, 29, 24, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 24 * 1), 29 * 1, 24 * 1);
        }
        else if (this.type == "zarbuTribalWear")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 836, 887, 55, 106, this.invX - (1/2 * 55 * 0.65), this.invY - (1/2 * 106 * 0.65), 55 * 0.65, 106 * 0.65);
        }
        else if (this.type == "zarbuClothing")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 767, 892, 55, 106, this.invX - (1/2 * 55 * 0.65), this.invY - (1/2 * 106 * 0.65), 55 * 0.65, 106 * 0.65);
        }
        else if (this.type == "zarbuMatriarchDress")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 764, 781, 46, 103, this.invX - (1/2 * 46 * 0.7), this.invY - (1/2 * 103 * 0.7), 46 * 0.7, 103 * 0.7);
        }
        else if (this.type == "zarbuDress")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 794, 656, 39, 84, this.invX - (1/2 * 39 * 0.9), this.invY - (1/2 * 84 * 0.9), 39 * 0.9, 84 * 0.9);
        }
        else if (this.type == "basiliskScale")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 204, 941, 14, 13, this.invX - (1/2 * 14 * 1.4), this.invY - (1/2 * 13 * 1.4), 14 * 1.4, 13 * 1.4);
        }
        else if (this.type == "basiliskEye")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 205, 959, 9, 9, this.invX - (1/2 * 9 * 2), this.invY - (1/2 * 9 * 2), 9 * 2, 9 * 2);
        }
        else if (this.type == "basiliskFang")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 186, 944, 13, 27, this.invX - (1/2 * 13 * 1.4), this.invY - (1/2 * 27 * 1.4), 13 * 1.4, 27 * 1.4);
        }
        else if (this.type == "zarbuTuft")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 822, 10, 21, 28, this.invX - (1/2 * 21 * 1.2), this.invY - (1/2 * 28 * 1.2), 21 * 1.2, 28 * 1.2);
        }
        else if (this.type == "zarbuPelt")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 903, 2, 89, 39, this.invX - (1/2 * 89 * 0.75), this.invY - (1/2 * 39 * 0.75), 89 * 0.75, 39 * 0.75);
        }
        else if (this.type == "zarbuMeat")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 873, 10, 25, 25, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 25 * 1), 25 * 1, 25 * 1);
        }
        else if (this.type == "rawZarbuFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 847, 11, 25, 25, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 25 * 1), 25 * 1, 25 * 1);
        }
        else if (this.type == "acidifiedDrileKidney")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 717, 100, 27, 19, this.invX - (1/2 * 27 * 1.1), this.invY - (1/2 * 19 * 1.1), 27 * 1.1, 19 * 1.1);
        }
        else if (this.type == "drileKidney")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 718, 77, 27, 19, this.invX - (1/2 * 27 * 1.1), this.invY - (1/2 * 19 * 1.1), 27 * 1.1, 19 * 1.1);
        }
        else if (this.type == "drileMeat")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 791, 15, 30, 31, this.invX - (1/2 * 30 * 0.9), this.invY - (1/2 * 31 * 0.9), 30 * 0.9, 31 * 0.9);
        }
        else if (this.type == "rawDrileFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 755, 14, 30, 31, this.invX - (1/2 * 30 * 0.9), this.invY - (1/2 * 31 * 0.9), 30 * 0.9, 31 * 0.9);
        }
        else if (this.type == "drileSkin")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 614, 9, 137, 38, this.invX - (1/2 * 137 * 0.4), this.invY - (1/2 * 38 * 0.4), 137 * 0.4, 38 * 0.4);
        }
        else if (this.type == "tunskBloodPotion" || this.type == "antiMothfearPotion")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1701, 201, 9, 15, this.invX - (1/2 * 9), this.invY - (1/2 * 15), 9, 15);
        }
        else if (this.type == "waterwalkingPotion")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1763, 184, 9, 15, this.invX - (1/2 * 9), this.invY - (1/2 * 15), 9, 15);
        }
        else if (this.type == "toothedBludgeon")
        {
            LXX.beginPath();
            LXX.drawImage(polux, 231, 928, 74, 70, this.invX - (1/2 * 74 * 0.75), this.invY - (1/2 * 70 * 0.75), 74 * 0.75, 70 * 0.75);
        }
        else if (this.type == "lelBerries")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 455, 48, 8, 13, this.invX - (1/2 * 8 * 1.8), this.invY - (1/2 * 13 * 1.8), 8 * 1.8, 13 * 1.8);
        }
        else if (this.type == "lelFlower")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 467, 50, 11, 9, this.invX - (1/2 * 11 * 1.8), this.invY - (1/2 * 9 * 1.8), 11 * 1.8, 9 * 1.8);
        }
        else if (this.type == "naapridDrinkinghorn" || this.type == "naapridDrinkinghorn1" || this.type == "naapridMilkhorn1")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 539, 80, 15, 14, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "naapridMilkhornFull")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 522, 105, 15, 14, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "naapridDrinkinghornFull")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 466, 105, 15, 14, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "volaFlowers")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 439, 115, 15, 13, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 13 * 1.4), 15 * 1.4, 13 * 1.4);
        }
        else if (this.type == "rawTamal" || this.type == "rawMofuTamal" || this.type == "wrappedTamal" || this.type == "wrappedMofuTamal")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 402, 50, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal" || this.type == "mofuTamal")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 386, 51, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal2" || this.type == "mofuTamal2")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 419, 50, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal1" || this.type == "mofuTamal1")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 435, 50, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "masa")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 392, 20, 11, 10, this.invX - (1/2 * 11 * 1.8), this.invY - (1/2 * 10 * 1.8), 11 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maizeFlour")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 393, 34, 14, 14, this.invX - (1/2 * 14 * 1.8), this.invY - (1/2 * 14 * 1.8), 14 * 1.8, 14 * 1.8);
        }
        else if (this.type == "roastedMaize")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 399, 4, 10, 10, this.invX - (1/2 * 10 * 1.8), this.invY - (1/2 * 10 * 1.8), 10 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maizeHusk")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 408, 20, 9, 10, this.invX - (1/2 * 9 * 1.8), this.invY - (1/2 * 10 * 1.8), 9 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maize")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 386, 5, 10, 10, this.invX - (1/2 * 10 * 1.8), this.invY - (1/2 * 10 * 1.8), 10 * 1.8, 10 * 1.8);
        }
        else if (this.type == "mazorca")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 377, 20, 11, 14, this.invX - (1/2 * 11 * 1.8), this.invY - (1/2 * 14 * 1.8), 11 * 1.8, 14 * 1.8);
        }
        else if (this.type == "boiledFrijols")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 517, 79, 16, 17, this.invX - (1/2 * 16 * 1.7), this.invY - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "latuku")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 498, 78, 16, 17, this.invX - (1/2 * 16 * 1.7), this.invY - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "aktaltlSoup")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 478, 77, 16, 17, this.invX - (1/2 * 16 * 1.7), this.invY - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "apotlPepper")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 481, 43, 13, 18, this.invX - (1/2 * 13 * 1.4), this.invY - (1/2 * 18 * 1.4), 13 * 1.4, 18 * 1.4);
        }
        else if (this.type == "frijols")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 376, 36, 12, 11, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 11 * 1.4), 12 * 1.4, 11 * 1.4);
        }
        else if (this.type == "clobeLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 325, 138, 17, 17, this.invX - (1/2 * 17 * 1.4), this.invY - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "kwomFruit")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 398, 96, 11, 9, this.invX - (1/2 * 11 * 1.4), this.invY - (1/2 * 9 * 1.4), 11 * 1.4, 9 * 1.4);
        }
        else if (this.type == "pochalPods")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 316, 86, 23, 19, this.invX - (1/2 * 23 * 1.4), this.invY - (1/2 * 19 * 1.4), 23 * 1.4, 19 * 1.4);
        }
        else if (this.type == "boiledPochalPods")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 344, 86, 23, 19, this.invX - (1/2 * 23 * 1.4), this.invY - (1/2 * 19 * 1.4), 23 * 1.4, 19 * 1.4);
        }
        else if (this.type == "karmFruit")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 108, 100, 20, 21, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 21 * 1), 20 * 1, 21 * 1);
        }
        else if (this.type == "aktaltlFrond")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 102, 51, 28, 21, this.invX - (1/2 * 28 * 1.4), this.invY - (1/2 * 21 * 1.4), 28 * 1.4, 21 * 1.4);
        }
        else if (this.type == "boiledAktaltlFrond")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 106, 77, 22, 20, this.invX - (1/2 * 22 * 1.4), this.invY - (1/2 * 20 * 1.4), 22 * 1.4, 20 * 1.4);
        }
        else if (this.type == "aktaltlRoot")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 106, 11, 33, 33, this.invX - (1/2 * 33 * 1.4), this.invY - (1/2 * 33 * 1.4), 33 * 1.4, 33 * 1.4);
        }
        else if (this.type == "roastedAktaltlRoot")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 96, 123, 33, 33, this.invX - (1/2 * 33 * 1.4), this.invY - (1/2 * 33 * 1.4), 33 * 1.4, 33 * 1.4);
        }
        else if (this.type == "boat")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 307, 477, 43, 80, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 80 * 0.9), 43 * 0.9, 80 * 0.9);
        }
        else if (this.type == "corneliusFlower")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 235, 18, 8, 10, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 10 * 2), 8 * 2, 10 * 2);
        }
        else if (this.type == "rilthasiaFlower")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 248, 18, 8, 10, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 10 * 2), 8 * 2, 10 * 2);
        }
        else if (this.type == "yeolPod")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 333, 10, 8, 7, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolPodHusk")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 352, 11, 8, 7, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolNut")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 343, 10, 8, 7, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolWood")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 359, 65, 19, 17, this.invX - (1/2 * 19 * 2), this.invY - (1/2 * 17 * 2), 19 * 2, 17 * 2);
        }
        else if (this.type == "rawTaipanFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 303, 120, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "taipanMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 303, 134, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "taipanSnakeSkin")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 300, 106, 26, 14, this.invX - (1/2 * 26 * 2), this.invY - (1/2 * 14 * 2), 26 * 2, 14 * 2);
        }
        else if (this.type == "taipanVenomGland")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 305, 145, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "rawYioshkFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 477, 122, 15, 11, this.invX - (1/2 * 15 * 2.2), this.invY - (1/2 * 11 * 2.2), 15 * 2.2, 11 * 2.2);
        }
        else if (this.type == "yioshkMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 477, 133, 15, 11, this.invX - (1/2 * 15 * 2.2), this.invY - (1/2 * 11 * 2.2), 15 * 2.2, 11 * 2.2);
        }
        else if (this.type == "cloimidMeat")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 93, 228, 27, 24, this.invX - (1/2 * 27 * 2.2), this.invY - (1/2 * 24 * 2.2), 27 * 2.2, 24 * 2.2);
        }
        else if (this.type == "rawCloimidFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 94, 204, 27, 24, this.invX - (1/2 * 27 * 2.2), this.invY - (1/2 * 24 * 2.2), 27 * 2.2, 24 * 2.2);
        }
        else if (this.type == "cloimidPearl")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 126, 209, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
        }
        else if (this.type == "wool")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 933, 7, 22, 19, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 19 * 2), 22 * 2, 19 * 2);
        }
        else if (this.type == "lamb" || this.type == "mutton")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 987, 4, 12, 18, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 18 * 2), 12 * 2, 18 * 2);
        }
        else if (this.type == "rawLamb" || this.type == "rawMutton")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 970, 4, 12, 18, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 18 * 2), 12 * 2, 18 * 2);
        }
        else if (this.type == "anemoneTentacle")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 652, 252, 12, 16, this.invX - (1/2 * 12 * 1.6), this.invY - (1/2 * 16 * 1.6), 12 * 1.6, 16 * 1.6);
        }
        else if (this.type == "beachMiteInnards")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 98, 160, 10, 9, this.invX - (1/2 * 10 * 1.4), this.invY - (1/2 * 9 * 1.4), 10 * 1.4, 9 * 1.4);
        }
        else if (this.type == "fishingpole")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 181, 486, 24, 30, this.invX - (1/2 * 24 * 1.5), this.invY - (1/2 * 30 * 1.5), 24 * 1.5, 30 * 1.5);
        }
        else if (this.type == "kelp")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 126, 227, 19, 24, this.invX - (1/2 * 19 * 1.25), this.invY - (1/2 * 24 * 1.25), 19 * 1.25, 24 * 1.25);
        }
        else if (this.type == "dryKelp")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 141, 204, 19, 24, this.invX - (1/2 * 19 * 1.25), this.invY - (1/2 * 24 * 1.25), 19 * 1.25, 24 * 1.25);
        }
        else if (this.type == "rawRedCrombal")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 97, 254, 18, 10, this.invX - (1/2 * 18 * 1.4), this.invY - (1/2 * 10 * 1.4), 18 * 1.4, 10 * 1.4);
        }
        else if (this.type == "redCrombal")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 97, 308, 18, 10, this.invX - (1/2 * 18 * 1.4), this.invY - (1/2 * 10 * 1.4), 18 * 1.4, 10 * 1.4);
        }
        else if (this.type == "rawJuurgo")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 97, 263, 19, 9, this.invX - (1/2 * 19 * 3.2), this.invY - (1/2 * 9 * 3.2), 19 * 3.2, 9 * 3.2);
        }
        else if (this.type == "juurgo")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 96, 320, 19, 9, this.invX - (1/2 * 19 * 3.2), this.invY - (1/2 * 9 * 3.2), 19 * 3.2, 9 * 3.2);
        }
        else if (this.type == "rawRazorfin")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 95, 273, 22, 18, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 18 * 2), 22 * 2, 18 * 2);
        }
        else if (this.type == "razorfin")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 93, 332, 22, 18, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 18 * 2), 22 * 2, 18 * 2);
        }
        else if (this.type == "rawThab")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(2.5/8 * 2 * Math.PI);
            LXX.drawImage(norc, 92, 292, 32, 11, 0 - (1/2 * 32 * 3.1), 0 - (1/2 * 11 * 3.1), 32 * 3.1, 11 * 3.1);
            LXX.restore();
        }
        else if (this.type == "thab")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(2.5/8 * 2 * Math.PI);
            LXX.drawImage(norc, 92, 350, 32, 11, 0 - (1/2 * 32 * 3.1), 0 - (1/2 * 11 * 3.1), 32 * 3.1, 11 * 3.1);
            LXX.restore();
        }
        else if (this.type == "saltBloodArmour")
        {

            LXX.beginPath();
            LXX.drawImage(norc, 130, 153, 30, 46, this.invX - (1/2 * 30 * 1.7), this.invY - (1/2 * 46 * 1.7), 30 * 1.7, 46 * 1.7);
        }
        else if (this.type == "sealSkinClothing")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 37, 116, 20, 36, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 36 * 1.7), 20 * 1.7, 36 * 1.7);
        }
        else if (this.type == "sealSkinGloves")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 66, 123, 15, 12, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 12 * 2.1), 12 * 2.1, 12 * 2.1);
        }
        else if (this.type == "sealSkinBoots")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 65, 139, 20, 15, this.invX - (1/2 * 20 * 2.1), this.invY - (1/2 * 15 * 2.1), 20 * 2.1, 15 * 2.1);
        }
        else if (this.type == "northernClothing")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 22, 2, 20, 36, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 36 * 1.7), 20 * 1.7, 36 * 1.7);
        }
        else if (this.type == "northernGloves")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 94, 118, 15, 12, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 12 * 2.1), 12 * 2.1, 12 * 2.1);
        }
        else if (this.type == "northernBoots")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 90, 134, 20, 15, this.invX - (1/2 * 20 * 2.1), this.invY - (1/2 * 15 * 2.1), 20 * 2.1, 15 * 2.1);
        }
        else if (this.type == "tyrniBerries")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 67, 337, 13, 9, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 9 * 2), 13 * 2, 9 * 2);
        }
        else if (this.type == "sealSkin" || this.type == "selkieSkin")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 5, 39, 42, 18, this.invX - (1/2 * 42 * 1.75), this.invY - (1/2 * 18 * 1.75), 42 * 1.75, 18 * 1.75);
        }
        else if (this.type == "babySealSkin")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 5, 39, 42, 18, this.invX - (1/2 * 42 * 0.9), this.invY - (1/2 * 18 * 0.9), 42 * 0.9, 18 * 0.9);
        }
        else if (this.type == "rawSealFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 9, 59, 10, 14, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 14 * 1.85), 10 * 1.85, 14 * 1.85);
        }
        else if (this.type == "sealMeat")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 21, 59, 10, 14, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 14 * 1.85), 10 * 1.85, 14 * 1.85);
        }
        else if (this.type == "crabFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 850, 6, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "crabMeat")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 850, 36, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "crabClaw")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 806, 26, 31, 21, this.invX - (1/2 * 31 * 1.3), this.invY - (1/2 * 21 * 1.3), 31 * 1.3, 21 * 1.3);
        }
        else if (this.type == "rawCrabClaw")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 807, 3, 31, 21, this.invX - (1/2 * 31 * 1.3), this.invY - (1/2 * 21 * 1.3), 31 * 1.3, 21 * 1.3);
        }
        else if (this.type == "butteredCrab")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 873, 3, 13, 11, this.invX - (1/2 * 13 * 1.6), this.invY - (1/2 * 11 * 1.6), 13 * 1.6, 11 * 1.6);
        }
        else if (this.type == "crabChowder")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 889, 5, 11, 8, this.invX - (1/2 * 11 * 1.6), this.invY - (1/2 * 8 * 1.6), 11 * 1.6, 8 * 1.6);
        }
        else if (this.type == "crabBisque")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 904, 5, 11, 8, this.invX - (1/2 * 11 * 1.6), this.invY - (1/2 * 8 * 1.6), 11 * 1.6, 8 * 1.6);
        }
        else if (this.type == "hoilLeaves")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 63, 361, 23, 17, this.invX - (1/2 * 23 * 1.6), this.invY - (1/2 * 17 * 1.6), 23 * 1.6, 17 * 1.6);
        }
        else if (this.type == "mudBeetleLeg")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 123, 258, 23, 16, this.invX - (1/2 * 23 * 1.75), this.invY - (1/2 * 16 * 1.75), 23 * 1.75, 16 * 1.75);
        }
        else if (this.type == "rawKoobuFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 542, 743, 11, 9, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 9 * 2), 11 * 2, 9 * 2);
        }
        else if (this.type == "koobuMeat")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 590, 742, 11, 9, this.invX - (1/2 * 11 * 1.95), this.invY - (1/2 * 9 * 1.95), 11 * 1.95, 9 * 1.95);
        }
        else if (this.type == "koobuPelt")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 561, 742, 20, 9, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 9 * 1.5), 20 * 1.5, 9 * 1.5);
        }
        else if (this.type == "emptyMiterBloodSac")
        {
            LXX.beginPath();
            LXX.drawImage(troli, 96, 222, 17, 17, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 17 * 1), 17 * 1, 17 * 1);
        }
        else if (this.type == "miterBloodSac")
        {
            LXX.beginPath();
            LXX.drawImage(troli, 76, 223, 17, 17, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 17 * 1), 17 * 1, 17 * 1);
        }
        else if (this.type == "miterHide")
        {
            LXX.beginPath();
            LXX.drawImage(troli, 31, 223, 27, 19, this.invX - (1/2 * 27 * 1.2), this.invY - (1/2 * 19 * 1.2), 27 * 1.2, 19 * 1.2);
        }
        else if (this.type == "balkurFang")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 9, 1, 10, 15, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 15 * 1), 10 * 1, 15 * 1);
        }
        else if (this.type == "theUndyingEdge")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 8, 193, 22, 93, this.invX - (1/2 * 22 * 0.6), this.invY - (1/2 * 93 * 0.6), 22 * 0.6, 93 * 0.6);
        }
        else if (this.type == "spindletrap")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 148, 89, 27, 27, this.invX - (1/2 * 27 * 1.5), this.invY - (1/2 * 27 * 1.5), 27 * 1.5, 27 * 1.5);
        }
        else if (this.type == "jacks")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 269, 45, 19, 18, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 18 * 1), 19 * 1, 18 * 1);
        }
        else if (this.type == "glowDust")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 3, 1, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "vrezinDust")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 22, 2, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "irilDust")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 43, 1, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "pimberDust")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 280, 109, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "shomeDust")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 280, 180, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "dustPouch" || this.type == "pouchOfGlowDust" || this.type == "pouchOfVrezinDust" || this.type == "pouchOfIrilDust" || this.type == "pouchOfPimberDust" || this.type == "pouchOfShomeDust")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 64, 3, 15, 15, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 15 * 1.3), 15 * 1.3, 15 * 1.3);
        }
        else if (this.type == "neevFurCloak")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 681, 1161, 38, 73, this.invX - (1/2 * 38 * 0.95), this.invY - (1/2 * 73 * 0.95), 38 * 0.95, 73 * 0.95);
        }
        else if (this.type == "neevFurBoots")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 723, 1171, 36, 24, this.invX - (1/2 * 36 * 1.15), this.invY - (1/2 * 24 * 1.15), 36 * 1.15, 24 * 1.15);
        }
        else if (this.type == "neevFurGloves")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 745, 1199, 36, 24, this.invX - (1/2 * 36 * 1.15), this.invY - (1/2 * 24 * 1.15), 36 * 1.15, 24 * 1.15);
        }
        else if (this.type == "balkurMeat")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 57, 1, 24, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16), 24, 16);
        }
        else if (this.type == "rawBalkurFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 28, 1, 24, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16), 24, 16);
        }
        else if (this.type == "balkurPelt")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 12, 31, 69, 33, this.invX - (1/2 * 69), this.invY - (1/2 * 33), 69, 33);
        }
        else if (this.type == "balkurLeatherGloves")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 743, 388, 51, 34, this.invX - (1/2 * 51 * 0.7), this.invY - (1/2 * 34 * 0.7), 51 * 0.7, 34 * 0.7);
        }
        else if (this.type == "balkurLeatherBoots")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 738, 331, 61, 42, this.invX - (1/2 * 61 * 0.7), this.invY - (1/2 * 42 * 0.7), 61 * 0.7, 42 * 0.7);
        }
        else if (this.type == "balkurLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 669, 310, 59, 111, this.invX - (1/2 * 59 * 0.6), this.invY - (1/2 * 111 * 0.6), 59 * 0.6, 111 * 0.6);
        }
        else if (this.type == "meatCleaver")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 605, 0, 23, 48, this.invX - (1/2 * 23 * 0.74), this.invY - (1/2 * 48 * 0.74), 23 * 0.74, 48 * 0.74);
        }
        else if (this.type == "vardanianGlaive")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 667, 2, 123, 42, this.invX - (1/2 * 123 * 0.65), this.invY - (1/2 * 42 * 0.65), 123 * 0.65, 42 * 0.65);
        }
        else if (this.type == "kellishSpear")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 503, 7, 79, 34, this.invX - (1/2 * 79 * 1), this.invY - (1/2 * 34 * 1), 79 * 1, 34 * 1);
        }
        else if (this.type == "scimitar")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 337, 14, 66, 33, this.invX - (1/2 * 66 * 0.785), this.invY - (1/2 * 33 * 0.725), 66 * 0.785, 33 * 0.725);
            LXX.drawImage(balkur, 337, 14, 66, 33, this.invX - (1/2 * 66 * 0.785), this.invY - (1/2 * 33 * 0.725), 66 * 0.785, 33 * 0.725);
        }
        else if (this.type == "estoc")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(-1/8 * 2 * Math.PI);
            LXX.drawImage(dolls, 578, 3, 18, 74, - (1/2 * 18), - (1/2 * 74), 18, 74);
            LXX.restore();
        }
        else if (this.type == "ancientFragment")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1423, 198, 17, 18, this.invX - (1/2 * 17 * 1.5), this.invY - (1/2 * 18 * 1.5), 17 * 1.5, 18 * 1.5);
        }
        else if (this.type == "soul")
        {
            LXX.beginPath();
            this.turn -= 0.314;
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(this.turn);
            LXX.drawImage(mofu, 23, 51, 22, 19, - (1/2 * 22), - (1/2 * 19), 22, 19);
            LXX.restore()
        }
        else if (this.type == "boulchomLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 744, 1115, 30, 45, this.invX - (1/2 * 30 * 1.5), this.invY - (1/2 * 45 * 1.5), 30 * 1.5, 45 * 1.5);
        }
        else if (this.type == "boulchomLeatherBoots")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 98, 237, 25, 18, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 18 * 1.7), 25 * 1.7, 18 * 1.7);
        }
        else if (this.type == "boulchomLeatherGloves")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 125, 240, 17, 13, this.invX - (1/2 * 17 * 1.7), this.invY - (1/2 * 13 * 1.7), 17 * 1.7, 13 * 1.7);
        }
        else if (this.type == "skolLeatherBoots")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 752, 1057, 37, 32, this.invX - (1/2 * 37 * 1.9), this.invY - (1/2 * 32 * 1.9), 37 * 1.9, 32 * 1.9);
        }
        else if (this.type == "skolLeatherGloves")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 701, 1074, 37, 32, this.invX - (1/2 * 37 * 1.9), this.invY - (1/2 * 32 * 1.9), 37 * 1.9, 32 * 1.9);
        }
        else if (this.type == "skolLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 752, 993, 37, 59, this.invX - (1/2 * 37 * 1.2), this.invY - (1/2 * 59 * 1.2), 37 * 1.2, 59 * 1.2);
        }
        else if (this.type == "skolPelt")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 55, 97, 30, 15, this.invX - (1/2 * 30 * 1.9), this.invY - (1/2 * 15 * 1.9), 30 * 1.9, 15 * 1.9);
        }
        else if (this.type == "rawSkolFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 10, 98, 17, 18, this.invX - (1/2 * 17 * 1.9), this.invY - (1/2 * 18 * 1.9), 17 * 1.9, 18 * 1.9);
        }
        else if (this.type == "skolMeat")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 27, 97, 17, 18, this.invX - (1/2 * 17 * 1.9), this.invY - (1/2 * 18 * 1.9), 17 * 1.9, 18 * 1.9);
        }
        else if (this.type == "steugiurneFlower")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 73, 348, 12, 13, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 13 * 2), 12 * 2, 13 * 2);
        }
        else if (this.type == "steugiurneFrond")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 32, 348, 27, 13, this.invX - (1/2 * 27 * 2), this.invY - (1/2 * 13 * 2), 27 * 2, 13 * 2);
        }
        else if (this.type == "vorlymFlower")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 139, 356, 13, 18, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 18 * 2), 13 * 2, 18 * 2);
        }
        else if (this.type == "brightbloomFlower")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 872, 330, 22, 21, this.invX - (1/2 * 22 * 2.5), this.invY - (1/2 * 21 * 2.5), 22 * 2.5, 21 * 2.5);
        }
        else if (this.type == "galloshFlower")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 10, 342, 10, 11, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 11 * 2), 10 * 2, 11 * 2);
        }
        else if (this.type == "hydroraSalve")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 833, 402, 10, 15, this.invX - (1/2 * 10 * 1.5), this.invY - (1/2 * 15 * 1.5), 10 * 1.5, 15 * 1.5);
        }
        else if (this.type == "thalisLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 78, 321, 10, 11, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 11 * 2), 10 * 2, 11 * 2);
        }
        else if (this.type == "kofkeLeaves")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 76, 296, 17, 16, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 16 * 2), 17 * 2, 16 * 2);
        }
        else if (this.type == "blilArm")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 20, 269, 14, 15, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "rawRabbitFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 664, 172, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitMeat")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 687, 171, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitPelt")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 593, 174, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitFoot")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 618, 176, 8, 7, this.invX - (1/2 * 8 * 1.7), this.invY - (1/2 * 7 * 1.7), 8 * 1.7, 7 * 1.7);
        }
        else if (this.type == "rabbitFootNecklace")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 635, 166, 19, 21, this.invX - (1/2 * 19 * 1.4), this.invY - (1/2 * 21 * 1.4), 19 * 1.4, 21 * 1.4);
        }
        else if (this.type == "vel")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 756, 167, 12, 11, this.invX - (1/2 * 12 * 1.6), this.invY - (1/2 * 11 * 1.6), 12 * 1.6, 11 * 1.6);
        }
        else if (this.type == "fletterWing")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 742, 165, 8, 14, this.invX - (1/2 * 8 * 1.6), this.invY - (1/2 * 14 * 1.6), 8 * 1.6, 14 * 1.6);
        }
        else if (this.type == "etnaEggSac")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 834, 374, 10, 10, this.invX - (1/2 * 10 * 3.7), this.invY - (1/2 * 10 * 3.7), 10 * 3.7, 10 * 3.7);
        }
        else if (this.type == "etnaVenomSac")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 831, 359, 12, 10, this.invX - (1/2 * 12 * 1.7), this.invY - (1/2 * 10 * 1.7), 12 * 1.7, 10 * 1.7);
        }
        else if (this.type == "rawBoulchomFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 61, 238, 15, 14, this.invX - (1/2 * 15 * 1.7), this.invY - (1/2 * 14 * 1.7), 15 * 1.7, 14 * 1.7);
        }
        else if (this.type == "boulchomMeat")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 80, 238, 15, 14, this.invX - (1/2 * 15 * 1.7), this.invY - (1/2 * 14 * 1.7), 15 * 1.7, 14 * 1.7);
        }
        else if (this.type == "boulchomLung")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 44, 238, 15, 14, this.invX - (1/2 * 15 * 1.7), this.invY - (1/2 * 14 * 1.7), 15 * 1.7, 14 * 1.7);
        }
        else if (this.type == "boulchomPelt")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 12, 238, 26, 15, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 15 * 1.7), 26 * 1.7, 15 * 1.7);
        }
        else if (this.type == "clayBowl" || this.type == "woodenBowl")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 2, 3, 18, 12, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "bowlOfMushroomStew")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 19, 5, 14, 9, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "bowlOfSanthPorridge")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 34, 3, 18, 12, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "bowlOfBoiledHarst" || this.type == "bowlOfCreamyHarst")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 3, 26, 18, 12, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "haeflower")
        {
            LXX.beginPath();
            LXX.drawImage(zapa, 19, 274, 32, 46, this.invX - (1/2 * 32 * 0.9), this.invY - (1/2 * 46 * 0.9), 32 * 0.9, 46 * 0.9);
        }
        else if (this.type == "haeflowerPollen")
        {
            LXX.beginPath();
            LXX.drawImage(zapa, 275, 215, 29, 25, this.invX - (1/2 * 29 * 0.4), this.invY - (1/2 * 25 * 0.4), 29 * 0.4, 25 * 0.4);
        }
        else if (this.type == "stone")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1698, 528, 29, 27, this.invX - (1/2 * 29), this.invY - (1/2 * 27), 29, 27);
        }
        else if (this.type == "darkStone")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1666, 466, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
        }
        else if (this.type == "ashStone")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1561, 529, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
        }
        else if (this.type == "turquoise")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1368, 526, 31, 25, this.invX - (1/2 * 31 * 0.3), this.invY - (1/2 * 25 * 0.3), 31 * 0.3, 25 * 0.3);
        }
        else if (this.type == "aquamarine")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1248, 526, 21, 28, this.invX - (1/2 * 21 * 0.3), this.invY - (1/2 * 28 * 0.3), 21 * 0.3, 28 * 0.3);
        }
        else if (this.type == "ruby")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1440, 527, 25, 26, this.invX - (1/2 * 25 * 0.3), this.invY - (1/2 * 26 * 0.3), 25 * 0.3, 26 * 0.3);
        }
        else if (this.type == "emerald")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1407, 523, 23, 35, this.invX - (1/2 * 23 * 0.3), this.invY - (1/2 * 35 * 0.3), 23 * 0.3, 35 * 0.3);
        }
        else if (this.type == "sapphire")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1328, 524, 36, 33, this.invX - (1/2 * 36 * 0.3), this.invY - (1/2 * 33 * 0.3), 36 * 0.3, 33 * 0.3);
        }
        else if (this.type == "coal")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1531, 529, 29, 27, this.invX - (1/2 * 29), this.invY - (1/2 * 27), 29, 27);
        }
        else if (this.type == "ironOre")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1761, 464, 38, 26, this.invX - (1/2 * 38), this.invY - (1/2 * 26), 38, 26);
        }
        else if (this.type == "rawSilver")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1471, 524, 27, 35, this.invX - (1/2 * 27), this.invY - (1/2 * 35), 27, 35);
        }
        else if (this.type == "rawGold")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1211, 522, 27, 35, this.invX - (1/2 * 27), this.invY - (1/2 * 35), 27, 35);
        }
        else if (this.type == "silver")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1359, 562, 29, 18, this.invX - (1/2 * 29), this.invY - (1/2 * 18), 29, 18);
        }
        else if (this.type == "gold")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1323, 562, 29, 18, this.invX - (1/2 * 29), this.invY - (1/2 * 18), 29, 18);
        }
        else if (this.type == "jvostranOre")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1623, 528, 29, 27, this.invX - (1/2 * 29), this.invY - (1/2 * 27), 29, 27);
        }
        else if (this.type == "pureJvostranOre")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1328, 524, 35, 33, this.invX - (1/2 * 35 * 0.8), this.invY - (1/2 * 33 * 0.8), 35 * 0.8, 33 * 0.8);
        }
        else if (this.type == "jvostran")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1285, 563, 30, 17, this.invX - (1/2 * 30), this.invY - (1/2 * 17), 30, 17);
        }
        else if (this.type == "twiceForgedSteel")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1427, 561, 30, 20, this.invX - (1/2 * 30), this.invY - (1/2 * 20), 30, 20);
        }
        else if (this.type == "thriceForgedSteel")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1393, 561, 30, 20, this.invX - (1/2 * 30), this.invY - (1/2 * 20), 30, 20);
        }
        else if (this.type == "svehnsShipment" || this.type == "svehnsLoot")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 104, 213, 36, 37, this.invX - (1/2 * 36 * 1.4), this.invY - (1/2 * 37 * 1.4), 36 * 1.4, 37 * 1.4);
        }
        else if (this.type == "svehnsLootEmpty")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 95, 260, 51, 42, this.invX - (1/2 * 51 * 1.4), this.invY - (1/2 * 42 * 1.4), 51 * 1.4, 42 * 1.4);
        }
        else if (this.type == "cero")
        {
            LXX.beginPath();
            LXX.drawImage(zer0, 344, 8, 20, 50, this.invX - (1/2 * 20 * 1.5 + 4), this.invY - (1/2 * 50 * 1.5), 20 * 1.5, 50 * 1.5);
        }
        else if (this.type == "rawTunskFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 130, 6, 10, 9, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 9 * 1.85), 10 * 1.85, 9 * 1.85);
        }
        else if (this.type == "tunskMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 130, 15, 10, 9, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 9 * 1.85), 10 * 1.85, 9 * 1.85);
        }
        else if (this.type == "anterInnards")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 77, 371, 11, 10, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "anterAcid")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 93, 371, 11, 10, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "anterShell")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 75, 530, 24, 16, this.invX - (1/2 * 24 * 1.6), this.invY - (1/2 * 16 * 1.6), 24 * 1.6, 16 * 1.6);
        }
        else if (this.type == "anterMandibles")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 77, 548, 20, 24, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 24 * 1.5), 20 * 1.5, 24 * 1.5);
        }
        else if (this.type == "anterShellArmour")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 70, 389, 34, 52, this.invX - (1/2 * 34 * 1.5), this.invY - (1/2 * 52 * 1.5), 34 * 1.5, 52 * 1.5);
        }
        else if (this.type == "smlGlutidOoze")
        {
            var sizeMult = 1;

            LXX.beginPath();
            LXX.drawImage(theCrack, 313, 268, 40, 37, this.invX - (1/2 * 40 * sizeMult), this.invY - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
        }
        else if (this.type == "medGlutidOoze")
        {
            var sizeMult = 1.5;

            LXX.beginPath();
            LXX.drawImage(theCrack, 313, 268, 40, 37, this.invX - (1/2 * 40 * sizeMult), this.invY - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
        }
        else if (this.type == "lrgGlutidOoze")
        {
            var sizeMult = 2;

            LXX.beginPath();
            LXX.drawImage(theCrack, 313, 268, 40, 37, this.invX - (1/2 * 40 * sizeMult), this.invY - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
        }
        else if (this.type == "pelcridOozeRemains")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 650, 95, 32, 22, this.invX - (1/2 * 32 * 1.7), this.invY - (1/2 * 22 * 1.7), 32 * 1.7, 22 * 1.7);
        }
        else if (this.type == "smlOolidOozeRemains")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 94, 171, 37, 35, this.invX - (1/2 * 37), this.invY - (1/2 * 35), 37, 35);
        }
        else if (this.type == "medOolidOozeRemains")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 94, 171, 37, 35, this.invX - (1/2 * 37 * 1.5), this.invY - (1/2 * 35 * 1.5), 37 * 1.5, 35 * 1.5);
        }
        else if (this.type == "lrgOolidOozeRemains")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 94, 171, 37, 35, this.invX - (1/2 * 37 * 2), this.invY - (1/2 * 35 * 2), 37 * 2, 35 * 2);
        }
        else if (this.type == "rawTilkFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 950, 236, 27, 21, this.invX - (1/2 * 27), this.invY - (1/2 * 21), 27, 21);
        }
        else if (this.type == "tilkMeat")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 918, 236, 27, 21, this.invX - (1/2 * 27), this.invY - (1/2 * 21), 27, 21);
        }
        else if (this.type == "tilkTentacle")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 982, 238, 27, 21, this.invX - (1/2 * 27), this.invY - (1/2 * 21), 27, 21);
        }
        else if (this.type == "lrgTilkTentacle")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 982, 238, 27, 21, this.invX - (1/2 * 27 * 1.4), this.invY - (1/2 * 21 * 1.4), 27 * 1.4, 21 * 1.4);
        }
        else if (this.type == "giantTilkTentacle")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 982, 238, 27, 21, this.invX - (1/2 * 27 * 3), this.invY - (1/2 * 21 * 3), 27 * 3, 21 * 3);
        }
        else if (this.type == "wegRoot")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 255, 58, 14, 19, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 19 * 2), 14 * 2, 19 * 2);
        }
        else if (this.type == "roastedWegRoot")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 280, 83, 14, 19, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 19 * 2), 14 * 2, 19 * 2);
        }
        else if (this.type == "roastedWegRootChunks")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 278, 60, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "palntRoot")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 205, 473, 10, 15, this.invX - (1/2 * 10 * 1.4), this.invY - (1/2 * 15 * 1.4), 10 * 1.4, 15 * 1.4);
        }
        else if (this.type == "boiledPalntRoot")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 206, 478, 9, 9, this.invX - (1/2 * 9 * 1.5), this.invY - (1/2 * 9 * 1.5), 9 * 1.5, 9 * 1.5);
        }
        else if (this.type == "palntFlower")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 185, 472, 9, 8, this.invX - (1/2 * 9 * 1.35), this.invY - (1/2 * 8 * 1.35), 9 * 1.35, 8 * 1.35);
        }
        else if (this.type == "vardanianClub")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 319, 453, 12, 38, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 38 * 1.4), 12 * 1.4, 38 * 1.4);
        }
        else if (this.type == "swampWalkerArmour")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 18, 581, 35, 65, this.invX - (1/2 * 35 * 1.1), this.invY - (1/2 * 65 * 1.1), 35 * 1.1, 65 * 1.1);
        }
        else if (this.type == "thenganPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 72, 581, 35, 65, this.invX - (1/2 * 35 * 1.1), this.invY - (1/2 * 65 * 1.1), 35 * 1.1, 65 * 1.1);
        }
        else if (this.type == "northernPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 38, 38, 35, 57, this.invX - (1/2 * 35 * 1.26), this.invY - (1/2 * 57 * 1.26), 35 * 1.26, 57 * 1.26);
        }
        else if (this.type == "ancientArmour")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1828, 225, 43, 61, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 61 * 1), 43 * 1, 61 * 1);
        }
        else if (this.type == "wightbloomBerries")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 197, 528, 18, 17, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 17 * 1.5), 18 * 1.5, 17 * 1.5);
        }
        else if (this.type == "ishBranch")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 865, 550, 18, 21, this.invX - (1/2 * 18), this.invY - (1/2 * 21), 18, 21);
        }
        else if (this.type == "itlinBranch")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 477, 103, 12, 10, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 10 * 2), 12 * 2, 10 * 2);
        }
        else if (this.type == "butterMellowFlower")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 256, 39, 14, 16, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 16 * 2), 14 * 2, 16 * 2);
        }
        else if (this.type == "mufBall")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 267, 19, 7, 7, this.invX - (1/2 * 7 * 2), this.invY - (1/2 * 7 * 2), 7 * 2, 7 * 2);
        }
        else if (this.type == "mufFiber")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 335, 23, 15, 12, this.invX - (1/2 * 15 * 2), this.invY - (1/2 * 12 * 2), 15 * 2, 12 * 2);
        }
        else if (this.type == "mufCloth")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 315, 10, 11, 13, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 13 * 2), 11 * 2, 13 * 2);
        }
        else if (this.type == "tenicFlower")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 295, 23, 14, 14, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 14 * 2), 14 * 2, 14 * 2);
        }
        else if (this.type == "tenicLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 279, 24, 14, 14, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 14 * 2), 14 * 2, 14 * 2);
        }
        else if (this.type == "tenicPaste")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 302, 24, 4, 6, this.invX - (1/2 * 4 * 2.35), this.invY - (1/2 * 6 * 2.25), 4 * 2.35, 6 * 2.25);
        }
        else if (this.type == "ardilFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 49, 299, 30, 42, this.invX - (1/2 * 30 * 1.65), this.invY - (1/2 * 42 * 1.65), 30 * 1.65, 42 * 1.65);
        }
        else if (this.type == "ardilFurSkirt")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 48, 256, 30, 42, this.invX - (1/2 * 30 * 1.65), this.invY - (1/2 * 42 * 1.65), 30 * 1.65, 42 * 1.65);
        }
        else if (this.type == "ardilFurGloves")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 58, 233, 15, 17, this.invX - (1/2 * 15 * 1.65), this.invY - (1/2 * 17 * 1.65), 15 * 1.65, 17 * 1.65);
        }
        else if (this.type == "mofuTribalWear")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 4, 137, 38, 60, this.invX - (1/2 * 38 * 1.15), this.invY - (1/2 * 60 * 1.15), 38 * 1.15, 60 * 1.15);
        }
        else if (this.type == "mofuRunnerOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 50, 137, 37, 60, this.invX - (1/2 * 37 * 1.15), this.invY - (1/2 * 60 * 1.15), 37 * 1.15, 60 * 1.15);
        }
        else if (this.type == "mofuMatriarchHeaddress")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 5, 43, 35, 67, this.invX - (1/2 * 35 * 1.15), this.invY - (1/2 * 67 * 1.15), 35 * 1.15, 67 * 1.15);
        }
        else if (this.type == "jarOfUlgoyNectar")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 287, 347, 11, 16, this.invX - (1/2 * 17.5), this.invY - (1/2 * 24), 17.5, 24);
        }
        else if (this.type == "ulgoyLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 305, 348, 18, 14, this.invX - (1/2 * 18 * 1.25), this.invY - (1/2 * 14 * 1.25), 18 * 1.25, 14 * 1.25);
        }
        else if (this.type == "mofuFive")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 1, 1, 27, 24, this.invX - (1/2 * 27 * 1.2), this.invY - (1/2 * 24 * 1.2), 27 * 1.2, 24 * 1.2);
        }
        else if (this.type == "theCorpseRing")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 48, 44, 13, 9, this.invX - (1/2 * 13 * 1.25), this.invY - (1/2 * 9 * 1.25), 13 * 1.25, 9 * 1.25);
        }
        else if (this.type == "ironRing")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 32, 22, 11, 11, this.invX - (1/2 * 11 * 1.25), this.invY - (1/2 * 11 * 1.25), 11 * 1.25, 11 * 1.25);
        }
        else if (this.type == "rawArdilFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 50, 687, 8, 8, this.invX - (1/2 * 8), this.invY - (1/2 * 8), 8, 8);
        }
        else if (this.type == "ardilMeat")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 82, 686, 8, 8, this.invX - (1/2 * 8), this.invY - (1/2 * 8), 8, 8);
        }
        else if (this.type == "ardilPelt")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 928, 701, 29, 20, this.invX - (1/2 * 29), this.invY - (1/2 * 20), 29, 20);
        }
        else if (this.type == "lizardTail")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1544, 29, 10, 10, this.invX - (1/2 * 14), this.invY - (1/2 * 14), 14, 14);
        }
        else if (this.type == "pumpkinDough")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 73, 4, 10, 8, this.invX - (1/2 * 10 * 1.8), this.invY - (1/2 * 8 * 1.8), 10 * 1.8, 8 * 1.8);
        }
        else if (this.type == "pumpkinBread")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 56, 29, 16, 11, this.invX - (1/2 * 16 * 1.8), this.invY - (1/2 * 11 * 1.8), 16 * 1.8, 11 * 1.8);
        }
        else if (this.type == "butteredPumpkinBread")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 70, 2, 19, 18, this.invX - (1/2 * 19 * 1.8), this.invY - (1/2 * 18 * 1.8), 19 * 1.8, 18 * 1.8);
        }
        else if (this.type == "velPumpkinBread")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 604, 1202, 20, 19, this.invX - (1/2 * 20 * 1.8), this.invY - (1/2 * 19 * 1.8), 20 * 1.8, 19 * 1.8);
        }
        else if (this.type == "harstBread")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1395, 12, 15, 12, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 12 * 1.8), 15 * 1.8, 12 * 1.8);
        }
        else if (this.type == "butteredHarstBread")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1392, 27, 17, 17, this.invX - (1/2 * 17 * 1.8), this.invY - (1/2 * 17 * 1.8), 17 * 1.8, 17 * 1.8);
        }
        else if (this.type == "velHarstBread")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 601, 1125, 18, 17, this.invX - (1/2 * 18 * 1.8), this.invY - (1/2 * 17 * 1.8), 18 * 1.8, 17 * 1.8);
        }
        else if (this.type == "harstDough")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1412, 11, 11, 10, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "harstFlour")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1428, 12, 11, 15, this.invX - (1/2 * 11), this.invY - (1/2 * 15), 11, 15);
        }
        else if (this.type == "bagOfHarstFlour")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1443, 11, 23, 29, this.invX - (1/2 * 23), this.invY - (1/2 * 29), 23, 29);
        }
        else if (this.type == "honey")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 34, 244, 18, 21, this.invX - (1/2 * 18), this.invY - (1/2 * 21), 18, 21);
        }
        else if (this.type == "bee")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 12, 338, 14, 13, this.invX - (1/2 * 14 * 2.3), this.invY - (1/2 * 13 * 2.3), 14 * 2.3, 13 * 2.3);
        }
        else if (this.type == "wyrExtract")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1722, 200, 13, 17, this.invX - (1/2 * 13), this.invY - (1/2 * 17), 13, 17);
        }
        else if (this.type == "blackBearLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 689, 2, 29, 46, this.invX - (1/2 * 29 * 1.5), this.invY - (1/2 * 46 * 1.5), 29 * 1.5, 46 * 1.5);
        }
        else if (this.type == "blackBearFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 654, 2, 29, 46, this.invX - (1/2 * 29 * 1.5), this.invY - (1/2 * 46 * 1.5), 29 * 1.5, 46 * 1.5);
        }
        else if (this.type == "wellAxle")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 233, 350, 20, 17, this.invX - (1/2 * 20 * 1.6), this.invY - (1/2 * 17 * 1.6), 20 * 1.6, 17 * 1.6);
        }
        else if (this.type == "wellCord")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 209, 326, 23, 22, this.invX - (1/2 * 23 * 1.6), this.invY - (1/2 * 22 * 1.6), 23 * 1.6, 22 * 1.6);
        }
        else if (this.type == "wellStone")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 239, 332, 15, 10, this.invX - (1/2 * 15 * 1.6), this.invY - (1/2 * 10 * 1.6), 15 * 1.6, 10 * 1.6);
        }
        else if (this.type == "wellWinch")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 213, 350, 17, 8, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 8 * 1.6), 17 * 1.6, 8 * 1.6);
        }
        else if (this.type == "blunderbuss")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1305, 12, 13, 35, this.invX - (1/2 * 13 * 1.65), this.invY - (1/2 * 35 * 1.65), 13 * 1.65, 35 * 1.65);
        }
        else if (this.type == "musket")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1334, 11, 11, 36, this.invX - (1/2 * 11 * 1.65), this.invY - (1/2 * 36 * 1.65), 11 * 1.65, 36 * 1.65);
        }
        else if (this.type == "shotShooter")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1334, 11, 11, 28, this.invX - (1/2 * 11 * 1.6), this.invY - (1/2 * 28 * 1.6), 11 * 1.6, 28 * 1.6);
        }
        else if (this.type == "bullet")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1321, 16, 5, 5, this.invX - (1/2 * 8), this.invY - (1/2 * 8), 8, 8);
        }
        else if (this.type == "blackPowder" || this.type == "pyromothPowder")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1350, 13, 13, 11, this.invX - (1/2 * 13), this.invY - (1/2 * 11), 13, 11);
        }
        else if (this.type == "cutlass")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1369, 10, 19, 37, this.invX - (1/2 * 19 * 1.65), this.invY - (1/2 * 37 * 1.65), 19 * 1.65, 37 * 1.65);
        }
        else if (this.type == "brokenHyelingCleaver")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 223, 83, 31, 34, this.invX - (1/2 * 31 * 1.6), this.invY - (1/2 * 34 * 1.6), 31 * 1.6, 34 * 1.6);
        }
        else if (this.type == "hyelingClaws")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 98, 53, 22, 19, this.invX - (1/2 * 22 * 1.6), this.invY - (1/2 * 19 * 1.6), 22 * 1.6, 19 * 1.6);
        }
        else if (this.type == "rawHyelingFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 223, 600, 14, 18, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 18 * 1.6), 14 * 1.6, 18 * 1.6);
        }
        else if (this.type == "hyelingMeat")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 241, 601, 14, 18, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 18 * 1.6), 14 * 1.6, 18 * 1.6);
        }
        else if (this.type == "hyelingArmour")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 197, 30, 17, 46, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 46 * 1.6), 17 * 1.6, 46 * 1.6);
        }
        else if (this.type == "golgemoffFeelers")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 965, 266, 17, 16, this.invX - (1/2 * 17), this.invY - (1/2 * 16), 17, 16);
        }
        else if (this.type == "golgemoffMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 983, 264, 17, 16, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 16 * 1.6), 17 * 1.6, 16 * 1.6);
        }
        else if (this.type == "rawGolgemoffFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 999, 264, 17, 16, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 16 * 1.6), 17 * 1.6, 16 * 1.6);
        }
        else if (this.type == "adhesive")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 999, 264, 17, 16, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 16 * 1.6), 17 * 1.6, 16 * 1.6);
            LXX.beginPath();
            LXX.drawImage(candlewic, 23, 125, 13, 12, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 12 * 2), 13 * 2, 12 * 2);
            LXX.beginPath();
            LXX.drawImage(mufmuf, 302, 24, 4, 6, this.invX - (1/2 * 4 * 2.2), this.invY - (1/2 * 6 * 2.1), 4 * 2.2, 6 * 2.1);
        }
        else if (this.type == "rawAvrakFlesh" || this.type == "rawEvrakFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 139, 2350, 39, 29, this.invX - (1/2 * 39 * 0.8), this.invY - (1/2 * 29 * 0.8), 39 * 0.8, 29 * 0.8);
        }
        else if (this.type == "avrakMeat" || this.type == "evrakMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 141, 2394, 39, 29, this.invX - (1/2 * 39 * 0.8), this.invY - (1/2 * 29 * 0.8), 39 * 0.8, 29 * 0.8);
        }
        else if (this.type == "avrakHide")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 142, 2287, 41, 50, this.invX - (1/2 * 41 * 0.6), this.invY - (1/2 * 50 * 0.6), 41 * 0.6, 50 * 0.6);
        }
        else if (this.type == "evrakHide")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 62, 2314, 59, 50, this.invX - (1/2 * 59 * 0.6), this.invY - (1/2 * 50 * 0.6), 59 * 0.6, 50 * 0.6);
        }
        else if (this.type == "avrakLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 8, 2091, 66, 83, this.invX - (1/2 * 66 * 0.85), this.invY - (1/2 * 83 * 0.85), 66 * 0.85, 83 * 0.85);
        }
        else if (this.type == "evrakLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 18, 2002, 47, 80, this.invX - (1/2 * 47 * 0.85), this.invY - (1/2 * 80 * 0.85), 47 * 0.85, 80 * 0.85);
        }
        else if (this.type == "neevFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 148, 67, 21, 17, this.invX - (1/2 * 21 * 1.25), this.invY - (1/2 * 17 * 1.25), 21 * 1.25, 17 * 1.25);
        }
        else if (this.type == "neevFur")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 176, 64, 35, 25, this.invX - (1/2 * 35 * 1.25), this.invY - (1/2 * 25 * 1.25), 35 * 1.25, 25 * 1.25);
        }
        else if (this.type == "ogardPerfume")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 50, 4, 15, 19, this.invX - (1/2 * 15), this.invY - (1/2 * 19), 15, 19);
        }
        else if (this.type == "driedTechiLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 35, 6, 11, 16, this.invX - (1/2 * 11), this.invY - (1/2 * 16), 11, 16);
        }
        else if (this.type == "ogard")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 36, 28, 15, 16, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 16 * 1.3), 15 * 1.3, 16 * 1.3);
        }
        else if (this.type == "groundOgard")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 37, 47, 16, 14, this.invX - (1/2 * 16), this.invY - (1/2 * 14), 16, 14);
        }
        else if (this.type == "ogardPollen")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 57, 50, 9, 9, this.invX - (1/2 * 9 * 1.3), this.invY - (1/2 * 9 * 1.3), 9 * 1.3, 9 * 1.3);
        }
        else if (this.type == "smashStick" || this.type == "burningSmashStick")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(9/10 * Math.PI);
            LXX.drawImage(mofu, 189, 86, 23, 44, - (1/2 * 23 * 1.5), - (1/2 * 44 * 1.5), 23 * 1.5, 44 * 1.5);
            LXX.restore();
        }
        else if (this.type == "cloth" || this.type == "dyedMufCloth" || this.type == "horseCloth")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(5/8 * 2 * Math.PI);
            LXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 * 1.5), - (1/2 * 10 * 1.5), 29 * 1.5, 10 * 1.5);
            LXX.restore();
        }
        else if (this.type == "culprisBandage" || this.type == "laicaumBandage")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(3/8 * 2 * Math.PI);
            LXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 / 1.25), - (1/2 * 10 / 1.25), 29 / 1.25, 10 / 1.25);
            LXX.restore();
        }
        else if (this.type == "naapridFiber" || this.type == "varnFiber" || this.type == "hoffalgreFiber")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 85, 46, 10, 18, this.invX - (1/2 * 10 * 1.65), this.invY - (1/2 * 18 * 1.65), 10 * 1.65, 18 * 1.65);
        }
        else if (this.type == "tent")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 1, 1, 32, 32, this.invX - (1/2 * 32 * 1.5), this.invY - (1/2 * 32 * 1.5), 32 * 1.5, 32 * 1.5);
        }
        else if (this.type == "neculaisEar")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 71, 48, 9, 12, this.invX - (1/2 * 9 * 1.4), this.invY - (1/2 * 12 * 1.4), 9 * 1.4, 12 * 1.4);
        }
        else if (this.type == "natureCall")
        {
            LXX.beginPath();
            LXX.drawImage(horde1, 529, 36, 88, 84, this.invX - (1/2 * 88 * 0.2), this.invY - (1/2 * 84 * 0.2), 88 * 0.2, 84 * 0.2);
        }
        else if (this.type == "berulnToothNecklace")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 96, 3, 14, 21, this.invX - (1/2 * 14 * 1.2), this.invY - (1/2 * 21 * 1.2), 14 * 1.2, 21 * 1.2);
        }
        else if (this.type == "techiLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 83, 147, 13, 15, this.invX - (1/2 * 13), this.invY - (1/2 * 15), 13, 15);
        }
        else if (this.type == "bucketOfPluttJuice" || this.type == "bucketOfHotPluttBerryCider" )
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 87, 66, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
        }
        else if (this.type == "pluttJuicePintGlass" || this.type == "pluttCiderPintGlass" )
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 1, 15, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
        }
        else if (this.type == "glassBottle")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 173, 32, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
        }
        else if (this.type == "glassBottleOfWater")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 149, 31, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
        }
        else if (this.type == "glassBottleOfPluttWine")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 45, 208, 12, 22, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 22 * 2), 12 * 2, 22 * 2);
        }
        else if (this.type == "pluttWine")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 45, 181, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
        }
        else if (this.type == "bushkaBerries" || this.type == "salt")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 23, 125, 13, 12, this.invX - (1/2 * 13 * 1.15), this.invY - (1/2 * 12 * 1.15), 13 * 1.15, 12 * 1.5);
        }
        else if (this.type == "bushkaLeaves")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 3, 118, 14, 15, this.invX - (1/2 * 14 * 1.15), this.invY - (1/2 * 15 * 1.15), 14 * 1.15, 15 * 1.15);
        }
        else if (this.type == "beesWax" || this.type == "torperWax")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 1, 2, 12, 13, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 13 * 1.4), 12 * 1.4, 13 * 1.4);
        }
        else if (this.type == "oilLantern" || this.type == "oilLantern4" || this.type == "oilLantern3" || this.type == "oilLantern2" || this.type == "oilLantern1" || this.type == "oilLanternEmpty")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 48, 1, 11, 27, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 27 * 1.2), 11 * 1.2, 27 * 1.2);
        }
        else if (this.type == "oilLamp" || this.type == "oilLamp2" || this.type == "oilLamp1" || this.type == "oilLampEmpty")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 14, 17, 12, 15, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 15 * 1.2), 12 * 1.2, 15 * 1.2);
        }
        else if (this.type == "vardanianLamp" || this.type == "vardanianLamp2" || this.type == "vardanianLamp1" || this.type == "vardanianLampEmpty")
        {
            LXX.beginPath();
            LXX.drawImage(gent, 24, 217, 20, 34, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 34 * 1), 20 * 1, 34 * 1);
        }
        else if (this.type == "jackOLantern" || this.type == "jackOLantern2" || this.type == "jackOLantern1" || this.type == "jackOLanternEmpty")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 82, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
        }
        else if (this.type == "pumpkin")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 64, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
        }
        else if (this.type == "roastedPumpkin")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 83, 23, 16, 18, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 18 * 1.2), 16 * 1.2, 18 * 1.2);
        }
        else if (this.type == "candle")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 14, 1, 11, 16, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 16 * 1.2), 11 * 1.2, 16 * 1.2);
        }
        else if (this.type == "candle2")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 25, 1, 12, 13, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 13 * 1.2), 12 * 1.2, 13 * 1.2);
        }
        else if (this.type == "candle1")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 35, 1, 12, 10, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 10 * 1.2), 12 * 1.2, 10 * 1.2);
        }
        else if (this.type == "pluttMoffling")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 1, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
        }
        else if (this.type == "akerMoffling")
        {
            LXX.beginPath();
            LXX.drawImage(candlewic, 22, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
        }
        else if (this.type == "rawMofflingFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
        }
        else if (this.type == "mofflingMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
        }
        else if (this.type == "rawMofuFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
        }
        else if (this.type == "mofuMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
        }
        else if (this.type == "rawLargeMofuFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
        }
        else if (this.type == "largeMofuMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
        }
        else if (this.type == "fattyMofuLiver")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 114, 67, 9, 9, this.invX - (1/2 * 9 * 2), this.invY - (1/2 * 9 * 2), 9 * 2, 9 * 2);
        }
        else if (this.type == "mofuFeather")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 139, 54, 11, 13, this.invX - (1/2 * 11), this.invY - (1/2 * 13), 11, 13);
        }
        else if (this.type == "mofuFoot")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 122, 56, 11, 7, this.invX - (1/2 * 11), this.invY - (1/2 * 7), 11, 7);
        }
        else if (this.type == "mofuEgg")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 109, 54, 8, 11, this.invX - (1/2 * 8), this.invY - (1/2 * 11), 8, 11);
        }
        else if (this.type == "cookedMofuEgg")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 96, 54, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
        }
        else if (this.type == "fermentedMofuEgg")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 96, 45, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
        }
        else if (this.type == "rawGrushFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1208, 27, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
        }
        else if (this.type == "grushMeat")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1207, 43, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
        }
        else if (this.type == "grushFur")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1204, 7, 18, 16, this.invX - (1/2 * 18), this.invY - (1/2 * 16), 18, 16);
        }
        else if (this.type == "grushFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 1249, 69, 31, 52, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 52 * 1.2), 31 * 1.2, 52 * 1.2);
        }
        else if (this.type == "iron")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1212, 561, 28, 18, this.invX - (1/2 * 28), this.invY - (1/2 * 18), 28, 18);
        }
        else if (this.type == "steel")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1461, 563, 28, 15, this.invX - (1/2 * 28), this.invY - (1/2 * 15), 28, 15);
        }
        else if (this.type == "santhGrain")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2943, 205, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "santhFlour")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2977, 204, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "emptyBagSanth" || this.type == "emptyBagHarst")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 3016, 201, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
        }
        else if (this.type == "bagOfSanthFlour")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 3050, 200, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
        }
        else if (this.type == "kellishSanthDough" || this.type == "nirwadenPastryDough")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17 * 2.6), this.invY - (1/2 * 14 * 2.6), 17 * 2.6, 14 * 2.6);
        }
        else if (this.type == "naapridButter" || this.type == "waantiButter")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17), this.invY - (1/2 * 14), 17, 14);
        }
        else if (this.type == "santhBread")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2970, 225, 23, 23, this.invX - (1/2 * 23), this.invY - (1/2 * 23), 23, 23);
        }
        else if (this.type == "butteredSanthBread")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2965, 250, 32, 26, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
        }
        else if (this.type == "velSanthBread")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 601, 1162, 29, 26, this.invX - (1/2 * 29), this.invY - (1/2 * 26), 29, 26);
        }
        else if (this.type == "healingSalve")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2943, 252, 11, 17, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 17 * 1.5), 11 * 1.5, 17 * 1.5);
        }
        else if (this.type == "carrot")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2864, 68, 18, 19, this.invX - (1/2 * 18), this.invY - (1/2 * 19), 18, 19);
        }
        else if (this.type == "suuliMelon")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2940, 67, 16, 22, this.invX - (1/2 * 16), this.invY - (1/2 * 22), 16, 22);
        }
        else if (this.type == "suuliMelonSlice")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2963, 68, 16, 22, this.invX - (1/2 * 14), this.invY - (1/2 * 20), 14, 20);
        }
        else if (this.type == "potato")
        {
            if (player.potatoInvisibility != true)
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2770, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
        }
        else if (this.type == "cookedPotato")
        {
            if (player.potatoInvisibility != true)
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2782, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
        }
        else if (this.type == "nechromanticDust")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 477, 922, 72, 66, this.invX - (1/2 * 72 * 0.35), this.invY - (1/2 * 66 * 0.35), 72 * 0.35, 66 * 0.35);
        }
        else if (this.type == "clay")
        {
            LXX.beginPath();
            LXX.drawImage(mufmuf, 1, 4, 11, 10, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 10 * 2), 11 * 2, 10 * 2);
        }
        else if (this.type == "kellishClayPot")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3036, 1, 22, 19, this.invX - (1/2 * 22 * 1.7), this.invY - (1/2 * 19 * 1.7), 22 * 1.7, 19 * 1.7);
        }
        else if (this.type == "kellishClayPotOfNaapridMilk" || this.type == "kellishClayPotOfWaantiMilk")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3017, 1, 20, 18, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 18 * 1.7), 20 * 1.7, 18 * 1.7);
        }
        else if (this.type == "kellishClayPotOfWater")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 359, 37, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "kellishClayPotOfMushroomStew")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 408, 25, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "rawViperFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 529, 64, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "viperMeat")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 543, 63, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "viperVenomGland")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 529, 78, 10, 7, this.invX - (1/2 * 10 * 1.3), this.invY - (1/2 * 7 * 1.3), 10 * 1.3, 7 * 1.3);
        }
        else if (this.type == "fermentedViperVenomGland")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 544, 77, 12, 9, this.invX - (1/2 * 12 * 1.3), this.invY - (1/2 * 9 * 1.3), 12 * 1.3, 9 * 1.3);
        }
        else if (this.type == "viperSnakeSkin")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 530, 52, 28, 10, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 10 * 1.3), 28 * 1.3, 10 * 1.3);
        }
        else if (this.type == "rasper")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 651, 45, 21, 45, this.invX - (1/2 * 21 * 1.3), this.invY - (1/2 * 45 * 1.3), 21 * 1.3, 45 * 1.3);
        }
        else if (this.type == "jvostranPlateArmour")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 350, 660, 66, 106, this.invX - (1/2 * 66 * 0.75) - 3, this.invY - (1/2 * 106 * 0.75), 66 * 0.75, 106 * 0.75);
        }
        else if (this.type == "waterPintGlass")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 205, 2, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
        }
        else if (this.type == "sonjaPuree")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 770, 1119, 12, 10, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 10 * 2), 12 * 2, 10 * 2);
        }
        else if (this.type == "spicedSonjaPuree")
        {
            LXX.beginPath();
            LXX.drawImage(humpa, 784, 1119, 12, 10, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 10 * 2), 12 * 2, 10 * 2);
        }
        else if (this.type == "harstGrain")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 241, 45, 12, 13, this.invX - (1/2 * 12), this.invY - (1/2 * 13), 12, 13);
        }
        else if (this.type == "harstAle")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 247, 1, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
        }
        else if (this.type == "santhAle")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 163, 4, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "mead")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 217, 2, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "techiTea")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 19, 32, 17, 16, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 16 * 2), 17 * 2, 16 * 2);
        }
        else if (this.type == "pintGlass")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 148, 5, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
        }
        else if (this.type == "energilPotionI" || this.type == "energilPotionII" || this.type == "energilPotionIII" || this.type == "energilPotionIV" || this.type == "energilPotionV" || this.type == "palggaPerfume")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1700, 180, 12, 19, this.invX - (1/2 * 12), this.invY - (1/2 * 19), 12, 19);
        }
        else if (this.type == "mindPotionI" || this.type == "mindPotionII" || this.type == "mindPotionIII" || this.type == "mindPotionIV" || this.type == "mindPotionV")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 431, 945, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "mana")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1775, 183, 9, 17, this.invX - (1/2 * 9), this.invY - (1/2 * 17), 9, 17);
        }
        else if (this.type == "mightPotionI" || this.type == "mightPotionII" || this.type == "mightPotionIII" || this.type == "mightPotionIV" || this.type == "mightPotionV" || this.type == "tascalSalve")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1788, 183, 9, 16, this.invX - (1/2 * 9), this.invY - (1/2 * 16), 9, 16);
        }
        else if (this.type == "neevBlood" || this.type == "stomwikCream")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1741, 183, 8, 16, this.invX - (1/2 * 8), this.invY - (1/2 * 16), 8, 16);
        }
        else if (this.type == "utExtract")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 431, 972, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "potionGlass" || this.type == "emptyVialOfGojiiPoison" || this.type == "laicaumExtract")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 419, 1, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "vialOfWater" || this.type == "vialOfGojiiPoison" || this.type == "reconstructionPotion")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 406, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
        }
        else if (this.type == "walrusLeatherWaterskin" || this.type == "walrusLeatherWaterskinOne" || this.type == "walrusLeatherWaterskinTwo" || this.type == "walrusLeatherWaterskinFull")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 79, 5, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "bucket")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 103, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
        }
        else if (this.type == "bucketOfWater")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 133, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
        }
        else if (this.type == "bucketOfTechiTea")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 3, 36, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
        }
        else if (this.type == "bucketOfNaapridMilk" || this.type == "bucketOfWaantiMilk")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 118, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
        }
        else if (this.type == "halcifMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 33, 62, 13, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 15 * 2), 13 * 2, 15 * 2);
        }
        else if (this.type == "cyrinthilimMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 53, 27, 10, 14, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 14 * 2), 10 * 2, 14 * 2);
        }
        else if (this.type == "glinMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 5, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
        }
        else if (this.type == "tepprekliaFungus")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 3011, 70, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
        }
        else if (this.type == "driedCyrinthilimMushroom")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 52, 45, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "boiledGlinMushrooms")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 56, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
        }
        else if (this.type == "tylunFlower")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2155, 64, 28, 33, this.invX - (1/2 * 28), this.invY - (1/2 * 33), 28, 33);
        }
        else if (this.type == "stomwikLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2171, 44, 21, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 16), 21, 16);
        }
        else if (this.type == "culprisLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2154, 160, 20, 13, this.invX - (1/2 * 20), this.invY - (1/2 * 13), 20, 13);
        }
        else if (this.type == "neprilneBerries")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2148, 516, 15, 16, this.invX - (1/2 * 15), this.invY - (1/2 * 16), 15, 16);
        }
        else if (this.type == "hracklePod")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 462, 457, 15, 14, this.invX - (1/2 * 15), this.invY - (1/2 * 14), 15, 14);
        }
        else if (this.type == "pluttBerries")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2111, 32, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "driedPluttBerries")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 104, 47, 17, 19, this.invX - (1/2 * 17), this.invY - (1/2 * 19), 17, 19);
        }
        else if (this.type == "driedPluttBerriesWithHoney")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 103, 72, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "akerBerries")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2170, 20, 22, 19, this.invX - (1/2 * 22), this.invY - (1/2 * 19), 22, 19);
        }
        else if (this.type == "callopBerries")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 76, 367, 10, 10, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 10 * 2), 10 * 2, 10 * 2);
        }
        else if (this.type == "darbBerries")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 64, 386, 10, 10, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 10 * 2), 10 * 2, 10 * 2);
        }
        else if (this.type == "bequonFruit")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2990, 70, 17, 17, this.invX - (1/2 * 17), this.invY - (1/2 * 17), 17, 17);
        }
        else if (this.type == "luufBerries")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 367, 21, 10, 10, this.invX - (1/2 * 10 * 2.3), this.invY - (1/2 * 10 * 2.3), 10 * 2.3, 10 * 2.3);
        }
        else if (this.type == "wyrLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 395, 167, 13, 11, this.invX - (1/2 * 13 * 1.5), this.invY - (1/2 * 11 * 1.5), 13 * 1.5, 11 * 1.5);
        }
        else if (this.type == "kellishSawClub")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 645, 466, 17, 55, this.invX - (1/2 * 17), this.invY - (1/2 * 55), 17, 55);
        }
        else if (this.type == "kellishClaymore")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 600, 435, 22, 112, this.invX - (1/2 * 22 * 0.7), this.invY - (1/2 * 112 * 0.7), 22 * 0.7, 112 * 0.7);
        }
        else if (this.type == "gribPelt")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1095, 155, 31, 19, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 19 * 1.2), 31 * 1.2, 19 * 1.2);
        }
        else if (this.type == "rawGribFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1393, 196, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
        }
        else if (this.type == "gribMeat")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1371, 197, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
        }
        else if (this.type == "hammer")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 512, 514, 36, 49, this.invX - (1/2 * 36 / 1.3), this.invY - (1/2 * 49 / 1.3), 36 / 1.3, 49 / 1.3);
        }
        else if (this.type == "thenganWarhammer")
        {
            LXX.beginPath();
            LXX.drawImage(theng, 2, 120, 32, 62, this.invX - (1/2 * 32 * 1.15), this.invY - (1/2 * 62 * 1.15), 32 * 1.15, 62 * 1.15);
        }
        else if (this.type == "warHammer")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 535, 411, 40, 72, this.invX - (1/2 * 40 / 1.3), this.invY - (1/2 * 72 / 1.3), 40 / 1.3, 72 / 1.3);
        }
        else if (this.type == "tablet" || this.type == "stolenTablet" || this.type == "iceClaymore" || this.type == "leechingTouch" || this.type == "shadowport" || this.type == "theFrozenWord" || this.type == "shell")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1859, 36, 22, 27, this.invX - (1/2 * 22), this.invY - (1/2 * 27), 22, 27);
        }
        else if (this.type == "surge" || this.type == "embers" || this.type == "fireballI" || this.type == "electricBolt" || this.type == "flyingColours" || this.type == "iceSpikes" || this.type == "frostWind" || this.type == "repel" || this.type == "lifeTap" || this.type == "drainingI" || this.type == "vivification" || this.type == "chasingLights" || this.type == "fireHands" || this.type == "freezingGrasp" || this.type == "chargedTouch" || this.type == "sorcerer'sRaincoat" || this.type == "shieldingI" || this.type == "shieldingII" || this.type == "shieldingIII" || this.type == "shieldingIV" || this.type == "shieldingV" || this.type == "summonFrich" || this.type == "summonWolf" || this.type == "charm" || this.type == "sanctuary" || this.type == "repellingWard" || this.type == "iceberg" || this.type == "magicMissiles" || this.type == "minorVortex" || this.type == "mark" || this.type == "entanglement" || this.type == "whirlwind" || this.type == "iceBlast" || this.type == "healingPsalms" || this.type == "summonGriffin" || this.type == "summonDemon" || this.type == "slowTimeI" || this.type == "slowTimeII" || this.type == "slowTimeIII" || this.type == "slowTimeIV" || this.type == "slowTimeV" || this.type == "slowTimeVI" || this.type == "doppelganger" || this.type == "shadowSwitch" || this.type == "eruption" || this.type == "drakeBreath" || this.type == "undyingWard" || this.type == "potatoInvisibility" || this.type == "flamingMissiles" || this.type == "despell" || this.type == "powerDraw" || this.type == "arcaneOrbs" || this.type == "corporalityWard" || this.type == "windBlast" || this.type == "scroll" || this.type == "spiritBear" || this.type == "shadowCrow" || this.type == "antherPlague" || this.type == "beholderRift")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1738, 4, 33, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 26), 33, 26);
        }
        else if (this.type == "narthwarpMouth")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30), this.invY - (1/2 * 18), 30 , 18);
        }
        else if (this.type == "lrgNarthwarpMouth")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30 * 2), this.invY - (1/2 * 18 * 2), 30 * 2, 18 * 2);
        }
        else if (this.type == "fermentedNarthwarpMouth")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1844, 64, 37, 32, this.invX - (1/2 * 37), this.invY - (1/2 * 32), 37, 32);
        }
        else if (this.type == "rawHumanFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 731, 9, 25, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16 * 1.5), 24, 16 * 1.5);
        }
        else if (this.type == "humanMeat")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 731, 27, 25, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16 * 1.5), 24, 16 * 1.5);
        }
        else if (this.type == "rawBearFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 731, 9, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
        }
        else if (this.type == "bearMeat")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 731, 27, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
        }
        else if (this.type == "rawBearTongue")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 757, 12, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
        }
        else if (this.type == "bearTongue")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 757, 29, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
        }
        else if (this.type == "smlBlackBearPelt")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53), this.invY - (1/2 * 30), 53, 30);
        }
        else if (this.type == "medBlackBearPelt")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.25), this.invY - (1/2 * 30 * 1.25), 53 * 1.25, 30 * 1.25);
        }
        else if (this.type == "lrgBlackBearPelt")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.65), this.invY - (1/2 * 30 * 1.65), 53 * 1.65, 30 * 1.65);
        }
        else if (this.type == "vardanianHeavyCleaver")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 779, 1, 17, 68, this.invX - (1/2 * 17), this.invY - (1/2 * 68), 17, 68);
        }
        else if (this.type == "shehidOozeSml")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21), this.invY - (1/2 * 22), 21, 22);
        }
        else if (this.type == "shehidOozeLrg")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21 * 2), this.invY - (1/2 * 22 * 2), 21 * 2, 22 * 2);
        }
        else if (this.type == "shehidShellSml")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
        }
        else if (this.type == "shehidShellLrg")
        {
            LXX.beginPath();
            LXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25 * 2), this.invY - (1/2 * 24 * 2), 25 * 2, 24 * 2);
        }
        else if (this.type == "timberAxe")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 294, 330, 29, 45, this.invX - (1/2 * 29 * 1.4), this.invY - (1/2 * 45 * 1.4), 29 * 1.4, 45 * 1.4);
        }
        else if (this.type == "curvedDagger")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(Math.PI);
            LXX.drawImage(verse, 3538, 605, 10, 30, 0 - (1/2 * 10), 0 - (1/2 * 30), 10, 30);
            LXX.restore();
        }
        else if (this.type == "dualCurvedDaggers")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3552, 605, 16, 30, this.invX - (1/2 * 16), this.invY - (1/2 * 30), 16, 30);
        }
        else if (this.type == "nirineseSpear")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 8, 1511, 13, 79, this.invX - (1/2 * 13), this.invY - (1/2 * 79), 13, 79);
        }
        else if (this.type == "crossbow")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3169, 118, 36, 34, this.invX - (1/2 * 37.8), this.invY - (1/2 * 35.7), 37.8, 35.7);
        }
        else if (this.type == "steelBolt")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3152, 1, 19, 21, this.invX - (1/2 * 22.8), this.invY - (1/2 * 25.2), 22.8, 25.2);
        }
        else if (this.type == "varnFurDress")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 51, 387, 39, 52, this.invX - (1/2 * 60.45  * 0.8), this.invY - (1/2 * 85.6 * 0.8), 62.4 * 0.8, 83.2 * 0.8);
        }
        else if (this.type == "varnFurCloak")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 46, 439, 50, 61, this.invX - (1/2 * 77.5  * 0.8), this.invY - (1/2 * 92.55 * 0.7), 77.5 * 0.8, 92.55 * 0.7);
        }
        else if (this.type == "varnFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 91, 380, 50, 61, this.invX - (1/2 * 80  * 0.8), this.invY - (1/2 * 95.6 * 0.7), 80 * 0.8, 95.6 * 0.7);
        }
        else if (this.type == "waantiFurOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 216, 457, 43, 65, this.invX - (1/2 * 43 * 1.2), this.invY - (1/2 * 65 * 1.2), 43 * 1.2, 65 * 1.2);
        }
        else if (this.type == "frichFurMittens")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 386, 21, 19, 11, this.invX - (1/2 * 19 * 1.4), this.invY - (1/2 * 11 * 1.4), 19 * 1.4, 11 * 1.4);
        }
        else if (this.type == "frichFurClothing")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 258, 316, 37, 60, this.invX - (1/2 * 44.4), this.invY - (1/2 * 72), 44.4, 72);
        }
        else if (this.type == "wizardGown")
        {
            LXX.beginPath();
            LXX.drawImage(zer0, 67, 254, 18, 41, this.invX - (1/2 * 18 * 2.05), this.invY - (1/2 * 41 * 2.05), 18 * 2.05, 41 * 2.05);
        }
        else if (this.type == "purpleMageRobe")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 765, 98, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "redMageRobe")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 643, 98, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "cyanMageRobe")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 526, 95, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "whiteMageRobe")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 884, 103, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "blackMageRobe" || this.type == "pyromothSilkRobe")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 882, 213, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "hetmerArmour")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 150, 309, 52, 66, this.invX - (1/2 * 62.4), this.invY - (1/2 * 79.2), 62.4, 79.2);
        }
        else if (this.type == "vardanianBattleAxe")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 374, 354, 29, 57, this.invX - (1/2 * 37.7), this.invY - (1/2 * 74.1), 37.7, 74.1);
        }
        else if (this.type == "dualVardanianBattleAxe")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 135, 682, 58, 64, this.invX - (1/2 * 58 * 1.4), this.invY - (1/2 * 64 * 1.4), 58 * 1.4, 64 * 1.4);
        }
        else if (this.type == "rawOlkrinFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3143, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "olkrinMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "olkrinSkull")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
        }
        else if (this.type == "olkrinHorn")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3087, 287, 26, 34, this.invX - (1/2 * 52), this.invY - (1/2 * 68), 52, 68);
        }
        else if (this.type == "goliathOlkrinSkull")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
        }
        else if (this.type == "olkrinArm")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3175, 287, 67, 36, this.invX - (1/2 * 73.7), this.invY - (1/2 * 53.4), 73.7, 53.4);
        }
        else if (this.type == "olkrinMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "vardanianCleaver")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 250, 359, 14, 54, this.invX - (1/2 * 17.5), this.invY - (1/2 * 67.5), 17.5, 67.5);
        }
        else if (this.type == "hyelingCleaver")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 134, 3, 29, 33, this.invX - (1/2 * 29 * 1.6), this.invY - (1/2 * 33 * 1.6), 29 * 1.6, 33 * 1.6);
        }
        else if (this.type == "rawVarnFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3099, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
        }
        else if (this.type == "varnMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3115, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
        }
        else if (this.type == "varnPelt")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2994, 291, 27, 15, this.invX - (1/2 * 40.5), this.invY - (1/2 * 22.5), 40.5, 22.5);
        }
        else if (this.type == "beartrap")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 62, 8, 10, 9, this.invX - (1/2 * 10 * 1.5), this.invY - (1/2 * 9 * 1.5), 10 * 1.5, 9 * 1.5);
        }
        else if (this.type == "clawtrap")
        {
            LXX.beginPath();
            LXX.drawImage(trapper, 96, 26, 32, 18, this.invX - (1/2 * 32 * 1.5), this.invY - (1/2 * 18 * 1.5), 32 * 1.5, 18 * 1.5);
        }
        else if (this.type == "fireStarter")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2922, 136, 14, 11, this.invX - (1/2 * 21), this.invY - (1/2 * 16.5), 21, 16.5);
        }
        else if (this.type == "wood")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
            LXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
        }
        else if (this.type == "katana")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 168, 364, 16, 55, this.invX - (1/2 * 22.5), this.invY - (1/2 * 70), 22.5, 75.5);
        }
        else if (this.type == "winterWolfOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3126, 156, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
        }
        else if (this.type == "winterWolfClothing")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3223, 157, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
        }
        else if (this.type == "freydicRoyalOutfit")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2959, 151, 41, 60, this.invX - (1/2 * 52.4), this.invY - (1/2 * 78), 52.4, 78);
        }
        else if (this.type == "fineFreydicOutfitF")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 294, 298, 42, 65, this.invX - (1/2 * 42 * 1.1), this.invY - (1/2 * 65 * 1.1), 42 * 1.1, 65 * 1.1);
        }
        else if (this.type == "fineFreydicOutfitM")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 286, 527, 41, 77, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 77 * 1), 41 * 1, 77 * 1);
        }
        else if (this.type == "naapridLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3171, 59, 34, 57, this.invX - (1/2 * 44.2), this.invY - (1/2 * 71.1), 44.2, 71.1);
        }
        else if (this.type == "freydicRoyalDress")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3049, 148, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
        }
        else if (this.type == "winterWolfDress")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3012, 147, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
        }
        else if (this.type == "rawYoungNaapridFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3133, 10, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
        }
        else if (this.type == "youngNaapridMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3133, 1, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
        }
        else if (this.type == "rawNaapridFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2970, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
        }
        else if (this.type == "naapridMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2995, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
        }
        else if (this.type == "naapridPelt")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2924, 1, 26, 16, this.invX - (1/2 * 65), this.invY - (1/2 * 40), 65, 40);
        }
        else if (this.type == "naapridHorn")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2951, 1, 15, 14, this.invX - (1/2 * 31.5), this.invY - (1/2 * 29.4), 31.5, 29.4);
        }
        else if (this.type == "thenganSwordAndShield")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 3515, 140, 48, 40, this.invX - (1/2 * 61.2), this.invY - (1/2 * 48), 61.2, 48);
        }
        else if (this.type == "rawTrollsBlood")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 452, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
        }
        else if (this.type == "jarOfOil" || this.type == "jarOfButterMellowOil" || this.type == "jarOfSonjaSap")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 97, 3, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 21.5), 15, 21.5);
        }
        else if (this.type == "glassJar" || this.type == "jarOfGlassworm" && player.sleep > 0)
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 465, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
        }
        else if (this.type == "jarOfGlassworm" && player.sleep <= 0)
        {
            LXX.beginPath();
            LXX.drawImage(cef, 1013, 75, 9, 14, this.invX - (1/2 * 9 * 1.5), this.invY - (1/2 * 14 * 1.5), 9 * 1.5, 14 * 1.5);
        }
        else if (this.type == "chainArmour")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 38, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
        }
        else if (this.type == "blackChainArmour")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 80, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
        }
        else if (this.type == "freydicGreatSword")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 126, 302, 16, 70, this.invX - (1/2 * 16), this.invY - (1/2 * 70), 16, 70);
        }
        else if (this.type == "theNorthernGem")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 257, 436, 24, 73, this.invX - (1/2 * 24), this.invY - (1/2 * 73), 24, 73);
        }
        else if (this.type == "hugeBogTrollSkull")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 67.5), this.invY - (1/2 * 54), 67.5, 54);
        }
        else if (this.type == "bogTrollSkull")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 45), this.invY - (1/2 * 36), 49.5, 39.6);
        }
        else if (this.type == "babyBogTrollSkull")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 22.5), this.invY - (1/2 * 18), 22.5, 18);
        }
        else if (this.type == "trollFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2875, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
        }
        else if (this.type == "trollMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2900, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
        }
        else if (this.type == "aldrekiiArrow" || this.type == "timeArrow")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2832, 3, 41, 12, this.invX - (1/2 * 32), this.invY - (1/2 * 12), 32, 12);
        }
        else if (this.type == "rawWolfLiver")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2769, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
        }
        else if (this.type == "wolfLiver")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2782, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
        }
        else if (this.type == "winterWolfMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2812, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "rawWinterWolfFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2794, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "winterWolfPelt")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2737, 2, 26, 16, this.invX - (1/2 * 34.8), this.invY - (1/2 * 19.2), 34.8, 19.2);
        }
        else if (this.type == "massiveWinterWolfPelt")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 2737, 2, 29, 16, this.invX - (1/2 * 58), this.invY - (1/2 * 32), 58, 32);
        }
        else if (this.type == "greyWolfMeat")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2812, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "rawGreyWolfFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2794, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "greyWolfPelt")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2737, 2, 26, 16, this.invX - (1/2 * 34.8), this.invY - (1/2 * 19.2), 34.8, 19.2);
        }
        else if (this.type == "massiveGreyWolfPelt")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2737, 2, 29, 16, this.invX - (1/2 * 58), this.invY - (1/2 * 32), 58, 32);
        }
        else if (this.type == "energyPotionI" || this.type == "energyPotionII" || this.type == "energyPotionIII")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 38, 267, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "speedPotionI" || this.type == "speedPotionII" || this.type == "speedPotionIII")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 86, 134, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "cleansingPotion" || this.type == "wobeaExtract" || this.type == "mandrakeJuice" || this.type == "silverbloodPotion")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 35, 134, 11, 19, this.invX - (1/2 * 11), this.invY - (1/2 * 19), 11, 19);
        }
        else if (this.type == "freydicSword")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2089, 2, 13, 46, this.invX - (1/2 * 16.25), this.invY - (1/2 * 57.5), 16.25, 57.5);
        }
        else if (this.type == "kellishSword")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 70, 1, 15, 49, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 49 * 1.3), 15 * 1.3, 49 * 1.3);
        }
        else if (this.type == "pickaxe")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 103, 233, 22, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 39), 33, 39);
        }
        else if (this.type == "aldrekiiBlade")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2057, 4, 20, 45, this.invX - (1/2 * 24), this.invY - (1/2 * 54), 24, 54);
        }
        else if (this.type == "aldrekiiClaws")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 268, 214, 22, 23, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 23 * 2), 22 * 2, 23 * 2);
        }
        else if (this.type == "flail")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1995, 1, 37, 33, this.invX - (1/2 * 37), this.invY - (1/2 * 33), 37, 33);
        }
        else if (this.type == "torperVenomSac")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 40, 226, 17, 16, this.invX - (1/2 * 17), this.invY - (1/2 * 16), 17, 16);
        }
        else if (this.type == "torperFuzz")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1867, 9, 23, 20, this.invX - (1/2 * 23), this.invY - (1/2 * 20), 23, 20);
        }
        else if (this.type == "rawTorperFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1894, 3, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
        }
        else if (this.type == "torperMeat")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1895, 16, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
        }
        else if (this.type == "gulfreyShellArmour")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1, 157, 36, 63, this.invX - (1/2 * 36) + 2, this.invY - (1/2 * 63), 28.4, 59.6);
        }
        else if (this.type == "grewbleEgg")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 9, 29, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
        }
        else if (this.type == "grewbleGuts")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 30, 1, 21, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 16), 21, 16);
        }
        else if (this.type == "lorkWeed")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 106, 173, 20, 17, this.invX - (1/2 * 20 * 2), this.invY - (1/2 * 17 * 2), 20 * 2, 17 * 2);
        }
        else if (this.type == "sesreStamen")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 263, 110, 10, 16, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 16 * 2), 10 * 2, 16 * 2);
        }
        else if (this.type == "sesreLeaf")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 282, 113, 15, 13, this.invX - (1/2 * 15 * 2), this.invY - (1/2 * 13 * 2), 15 * 2, 13 * 2);
        }
        else if (this.type == "hoffalgreFurCloak")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 730, 2, 24, 40, this.invX - (1/2 * 24 * 1.8), this.invY - (1/2 * 40 * 1.8), 24 * 1.8, 40 * 1.8);
        }
        else if (this.type == "hoffalgrePelt")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 5, 6, 24, 9, this.invX - (1/2 * 24 * 2.2), this.invY - (1/2 * 9 * 2.2), 24 * 2.2, 9 * 2.2);
        }
        else if (this.type == "rawHoffalgreFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 5, 18, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "hoffalgreMeat")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 21, 18, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "hoffalgreTendrils")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 33, 6, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "agedHoffalgreTendrils")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 34, 16, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 1.6, 10 * 2.2);
        }
        else if (this.type == "frichPelt")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 1832, 10, 31, 18, this.invX - (1/2 * 31), this.invY - (1/2 * 18), 31, 18);
        }
        else if (this.type == "mountainFrichPelt")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 1832, 10, 31, 18, this.invX - (1/2 * 31 * 1.5), this.invY - (1/2 * 18 * 1.5), 31 * 1.5, 18 * 1.5);
        }
        else if (this.type == "rawFrichFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 65, 226, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
        }
        else if (this.type == "frichMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 79, 227, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
        }
        else if (this.type == "lombrisFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 865, 234, 19, 17, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "rawThuegTripe")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 415, 96, 22, 15, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 15 * 1.5), 22 * 1.5, 15 * 1.5);
        }
        else if (this.type == "thuegTripe")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 415, 116, 22, 15, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 15 * 1.5), 22 * 1.5, 15 * 1.5);
        }
        else if (this.type == "waantiPelt")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 155, 62, 20, 27, this.invX - (1/2 * 20 * 1.6), this.invY - (1/2 * 27 * 1.6), 20 * 1.6, 27 * 1.6);
        }
        else if (this.type == "rawWaantiFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 128, 95, 14, 19, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 19 * 1.6), 14 * 1.6, 19 * 1.6);
        }
        else if (this.type == "waantiMeat")
        {
            LXX.beginPath();
            LXX.drawImage(furr, 109, 95, 14, 19, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 19 * 1.6), 14 * 1.6, 19 * 1.6);
        }
        else if (this.type == "nogSkin")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 692, 143, 25, 21, this.invX - (1/2 * 25), this.invY - (1/2 * 21), 25, 21);
        }
        else if (this.type == "rawNogFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 724, 145, 16, 17, this.invX - (1/2 * 16), this.invY - (1/2 * 17), 16, 17);
        }
        else if (this.type == "nogMeat")
        {
            LXX.beginPath();
            LXX.drawImage(nognog, 740, 146, 16, 17, this.invX - (1/2 * 16), this.invY - (1/2 * 17), 16, 17);
        }
        else if (this.type == "rawUtFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 233, 960, 29, 24, this.invX - (1/2 * 29 * 1.25), this.invY - (1/2 * 24 * 1.25), 29 * 1.25, 24 * 1.25);
        }
        else if (this.type == "utMeat")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 277, 962, 29, 24, this.invX - (1/2 * 29 * 1.25), this.invY - (1/2 * 24 * 1.25), 29 * 1.25, 24 * 1.25);
        }
        else if (this.type == "fermentedUtTentacle")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 375, 950, 32, 36, this.invX - (1/2 * 32 * 1.25), this.invY - (1/2 * 36 * 1.25), 32 * 1.25, 36 * 1.25);
        }
        else if (this.type == "utTentacle")
        {
            LXX.beginPath();
            LXX.drawImage(freeverse, 318, 958, 43, 23, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 23 * 1.25), 43 * 1.25, 23 * 1.25);
        }
        else if (this.type == "rawMountainFrichFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 65, 226, 10, 12, this.invX - (1/2 * 20 * 2), this.invY - (1/2 * 24 * 2), 20 * 2, 24 * 2);
        }
        else if (this.type == "mountainFrichMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 79, 227, 10, 12, this.invX - (1/2 * 20 * 2), this.invY - (1/2 * 24 * 2), 20 * 2, 24 * 2);
        }
        else if (this.type == "vardanianAxe")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 53, 158, 37, 22, this.invX - (1/2 * 33.3), this.invY - (1/2 * 19.8), 33.3, 19.8);
        }
        else if (this.type == "vardanianAxeDual")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 48, 187, 31, 35, this.invX - (1/2 * 27.9), this.invY - (1/2 * 31.5), 27.9, 31.5);
        }
        else if (this.type == "freydicSpear")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 4, 227, 20, 75, this.invX - (1/2 * 17.5), this.invY - (1/2 * 56.75), 17.5, 56.75);
        }
        else if (this.type == "gulfreyShell")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 48, 41, 31, 23, this.invX - (1/2 * 31), this.invY - (1/2 * 23), 31, 23);
        }
        else if (this.type == "gulfreyMandibles")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 2, 92, 33, 33, this.invX - (1/2 * 26.6), this.invY - (1/2 * 26.6), 26.6, 26.6);
        }
        else if (this.type == "rawGulfreyFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 37, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
        }
        else if (this.type == "gulfreyMeat")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 66, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
        }
        else if (this.type == "mudflyMeat")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 209, 89, 14, 12, this.invX - (1/2 * 14) * 2, this.invY - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "rawMudflyFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 209, 77, 14, 12, this.invX - (1/2 * 14) * 2, this.invY - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "mudflyMold")
        {
            LXX.beginPath();
            LXX.drawImage(lodo, 209, 65, 14, 12, this.invX - (1 / 2 * 14) * 2, this.invY - (1 / 2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "vomit")
        {
            LXX.beginPath();
            LXX.drawImage(oldverse, 55, 135, 24, 21, this.invX - (1/2 * 24), this.invY - (1/2 * 21), 24, 21);
        }
        else if (this.type == "bloodyVomit")
        {
            LXX.beginPath();
            LXX.drawImage(raed, 510, 432, 43, 37, this.invX - (1/2 * 43), this.invY - (1/2 * 37), 43, 37);
        }
        else if (this.type == "gojiiBerries")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 615, 3, 19, 15, this.invX - (1/2 * 38), this.invY - (1/2 * 30), 38, 30);
        }
        else if (this.type == "nirineseSabre")
        {
            LXX.beginPath();
            LXX.drawImage(verse, 7, 7, 26, 80, this.invX - (1/2 * 19.5), this.invY - (1/2 * 60), 19.5, 60);
        }
        else if (this.type == "freezingArrow")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 66, 73, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "fireArrow")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 66, 80, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "lifeLeachArrow")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 65, 88, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "oiledArrow")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 67, 57, 19, 7, this.invX - (1/2 * 38), this.invY - (1/2 * 14), 38, 14);
        }
        else if (this.type == "shehidToxinArrow")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 66, 21, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "steelArrow")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 182, 104, 23, 9, this.invX - (1/2 * 46), this.invY - (1/2 * 18), 46, 18);
        }
        else if (this.type == "arrow")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 432, 554, 20, 8, this.invX - (1/2 * 40), this.invY - (1/2 * 16), 40, 16);
        }
        else if (this.type == "ogoFruit")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 426, 4, 12, 15, this.invX - (1/2 * 24), this.invY - (1/2 * 30), 24, 30);
        }
        else if (this.type == "blueBlade")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 8, 531, 57, 63, this.invX - (1/2 * 51.3), this.invY - (1/2 * 56.7), 51.3, 56.7);
        }
        else if (this.type == "berulnSkull")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 446, 3, 15, 20, this.invX - (1/2 * 22.5), this.invY - (1/2 * 30), 22.5, 30);
        }
        else if (this.type == "rawBerulnFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 526, 6, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
        }
        else if (this.type == "berulnMeat")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 506, 38, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
        }
        else if (this.type == "bigBerulnPelt")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 76.5), this.invY - (1/2 * 45), 76.5, 45);
        }
        else if (this.type == "berulnPelt")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 66.3), this.invY - (1/2 * 39), 66.3, 39);
        }
        else if (this.type == "bigBlackBerulnPelt")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 17, 721, 56, 34, this.invX - (1/2 * 56 * 1.5 * 0.9), this.invY - (1/2 * 34 * 1.5 * 0.9), 56 * 1.5 * 0.9, 34 * 1.5 * 0.9);
        }
        else if (this.type == "blackBerulnPelt")
        {
            LXX.beginPath();
            LXX.drawImage(norc, 17, 721, 56, 34, this.invX - (1/2 * 56 * 1.5 * 0.8), this.invY - (1/2 * 34 * 1.5 * 0.8), 56 * 1.5 * 0.8, 34 * 1.5 * 0.8);
        }
        else if (this.type == "longbow")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 380, 593, 34, 34, this.invX - (1/2 * 51), this.invY - (1/2 * 51), 51, 51);
        }
        else if (this.type == "aldrekiiLongbow")
        {
            LXX.beginPath();
            LXX.drawImage(balkur, 17, 441, 71, 70, this.invX - (1/2 * 71 * 0.7), this.invY - (1/2 * 70 * 0.7), 71 * 0.7, 70 * 0.7);
        }
        else if (this.type == "walrusLeatherArmour")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 734, 202, 52, 58, this.invX - (1/2 * 52), this.invY - (1/2 * 58), 52, 58);
        }
        else if (this.type == "skinAndBones")
        {
            LXX.beginPath();
            LXX.drawImage(polpol, 105, 172, 30, 40, this.invX - (1/2 * 45), this.invY - (1/2 * 60), 45, 60);
            LXX.drawImage(polpol, 105, 172, 30, 40, this.invX - (1/2 * 45), this.invY - (1/2 * 60), 45, 60);
        }
        else if (this.type == "balgurMercArmour")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 4, 105, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
        }
        else if (this.type == "balgurCaptainArmour")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 97, 108, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
        }
        else if (this.type == "rawWalrusFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 99, 4, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
        }
        else if (this.type == "aldrekiiBardiche")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 580, 253, 42, 137, this.invX - (1/2 * 21), this.invY - (1/2 * 68.5), 21, 68.5);
        }
        else if (this.type == "walrusMeat")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 257, 1, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
        }
        else if (this.type == "walrusHide")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 45), this.invY - (1/2 * 22), 45, 22);
        }
        else if (this.type == "elderWalrusHide")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 90) + 7, this.invY - (1/2 * 44) + 4, 77.5, 33);
        }
        else if (this.type == "blubber")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 368, 9, 12, 13, this.invX - (1/2 * 24), this.invY - (1/2 * 26), 24, 26);
        }
        else if (this.type == "walrusTusks")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 42.5), this.invY - (1/2 * 32.5), 42.5, 32.5);
        }
        else if (this.type == "elderWalrusTusks")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 68), this.invY - (1/2 * 52), 68, 52);
        }
        else if (this.type == "mace")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 554, 10, 61, 36, this.invX - (1/2 * 61), this.invY - (1/2 * 38), 61, 36);
        }
        else if (this.type == "staff")
        {
            LXX.beginPath();
            LXX.save();
            LXX.translate(this.invX, this.invY);
            LXX.rotate(7.5/8 * 2 * Math.PI);
            LXX.drawImage(dolls, 211, 111, 77, 5, - (1/2 * 77 * 1), - (1/2 * 5 * 1), 77 * 1, 5 * 1);
            LXX.restore();
        }
        else if (this.type == "thenganDagger")
        {
            LXX.beginPath();
            LXX.drawImage(dolls, 86, 5, 17, 37, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 37 * 1), 17 * 1, 37 * 1);
        }
        else if (this.type == "lightningCorseque")
        {
            LXX.beginPath();
            LXX.drawImage(mofu, 247, 54, 33, 77, this.invX - (1/2 * 33), this.invY - (1/2 * 77), 33, 77);
        }
        else if (this.type == "longSpikedMorningStar")
        {
            LXX.beginPath();
            LXX.drawImage(poly, 151, 128, 39, 39, this.invX - (1/2 * 39 * 1.15), this.invY - (1/2 * 39 * 1.15), 39 * 1.15, 39 * 1.15);
        }
        else if (this.type == "longsword" || this.type == "adolfsNewSword")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 75, 366, 17, 47, this.invX - (1/2 * 25.5), this.invY - (1/2 * 70.5) - 3, 25.5, 70.5);
        }
        else if (this.type == "rawEtyrFlesh")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 43, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
        }
        else if (this.type == "freydicWarAxe")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 17, 115, 113, 104, this.invX - (1/2 * 90.4), this.invY - (1/2 * 83.2) + 4, 90.4, 83.2);
        }
        else if (this.type == "etyrMeat")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 73, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
        }
        else if (this.type == "etyrHide")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 37, 720, 25, 18, this.invX - (1/2 * 50), this.invY - (1/2 * 36), 50, 36);
        }
        else if (this.type == "trollsBlood")
        {
            LXX.beginPath();
            LXX.drawImage(polyPNG, 385, 7, 11, 15, this.invX - (1/2 * 16.5), this.invY - (1/2 * 22.5), 16.5, 22.5);
        }
        else if (this.type == "yaihefBerries")
        {
            LXX.beginPath();
            LXX.drawImage(theCrack, 62, 508, 16, 16, this.invX - (1/2 * 32), this.invY - (1/2 * 32), 32, 32);
        }
    };

    this.drawShopCraftItem = function(type, invX, invY)
    {
        this.invX = invX;
        this.invY = invY;
        this.type = type;

        if (this.type == "coins")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 405, 4, 16, 17, this.invX - (1/2 * 32), this.invY - (1/2 * 34), 32, 34);
        }
        else if (this.type == "unitMarker")
        {
            XXX.beginPath();
            XXX.fillStyle = "gold";
            XXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "plantMarker")
        {
            XXX.beginPath();
            XXX.fillStyle = "turquoise";
            XXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "treeMarker")
        {
            XXX.beginPath();
            XXX.fillStyle = "black";
            XXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "marker")
        {
            XXX.beginPath();
            XXX.fillStyle = "#BF0000";
            XXX.arc(this.invX, this.invY, 15, 0, Math.PI * 2);
            XXX.fill();
        }
        else if (this.type == "shotgunAmmo")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 665, 301, 31, 29, this.invX - (1/2 * 31 * 0.6), this.invY - (1/2 * 29 * 0.6), 31 * 0.6, 29 * 0.6);
        }
        else if (this.type == "shotgun")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 690, 182, 76, 50, this.invX - (1/2 * 76 * 0.9), this.invY - (1/2 * 50 * 0.9), 76 * 0.9, 50 * 0.9);
        }
        else if (this.type == "m16CarbineClip")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 342, 330, 12, 16, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 16 * 1), 12 * 1, 16 * 1);
        }
        else if (this.type == "m16Carbine")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 327, 359, 81, 21, this.invX - (1/2 * 81 * 1), this.invY - (1/2 * 21 * 1), 81 * 1, 21 * 1);
        }
        else if (this.type == "freydicFolkTales" || this.type == "lonersJournal" || this.type == "inquisitorsBeastManual")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1979, 12, 17, 20, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 20 * 1), 17 * 1, 20 * 1);
        }
        else if (this.type == "madmanNote" || this.type == "ultherRIP" || this.type == "stolenTabletLetter" || this.type == "paperwork" || this.type == "falseInventionPlans" || this.type == "inventionPlans" || this.type == "estolProof" || this.type == "estolPoisoningOrders" || this.type == "killDruid")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 161, 77, 15, 23, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 23 * 1), 15 * 1, 23 * 1);
        }
        else if (this.type == "barrel" || this.type == "barrelOfWater" || this.type == "barrelOfHarstAle" || this.type == "barrelOfSanthAle" || this.type == "barrelOfMead" || this.type == "caskOfPluttWine" || this.type == "caskOfErguerWine" || this.type == "barrelOfGin" || this.type == "barrelOfCider" || this.type == "barrelOfWheatBeer")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 61, 201, 27, 29, this.invX - (1/2 * 27 * 1.5), this.invY - (1/2 * 29 * 1.5), 27 * 1.5, 29 * 1.5);
        }
        else if (this.type == "ashaiWoodBarrel" || this.type == "ashaiWoodBarrelOfWater" || this.type == "caskOfChyoulWine")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 648, 328, 37, 54, this.invX - (1/2 * 37 * 0.7), this.invY - (1/2 * 54 * 0.7), 37 * 0.7, 54 * 0.7);
        }
        else if (this.type == "yari")
        {
            XXX.beginPath();
            XXX.drawImage(moonberry, 72, 410, 47, 149, this.invX - (1/2 * 47 * 0.55), this.invY - (1/2 * 149 * 0.55), 47 * 0.55, 149 * 0.55);
        }
        else if (this.type == "kama")
        {
            if (this.equipped == true)
            {
                XXX.beginPath();
                XXX.drawImage(moonberry, 118, 572, 36, 38, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 38 * 1), 36 * 1, 38 * 1);
            }
            else
            {
                XXX.beginPath();
                XXX.drawImage(moonberry, 70, 571, 36, 38, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 38 * 1), 36 * 1, 38 * 1);
            }
        }
        else if (this.type == "beholderStrands")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 746, 550, 37, 41, this.invX - (1/2 * 37 * 1), this.invY - (1/2 * 41 * 1), 37 * 1, 41 * 1);
        }
        else if (this.type == "yilotnyyFangs")
        {
            XXX.beginPath();
            XXX.drawImage(yil, 380, 308, 38, 33, this.invX - (1/2 * 38 * 0.65), this.invY - (1/2 * 33 * 0.65), 38 * 0.65, 33 * 0.65);
        }
        else if (this.type == "yilotnyyPelt")
        {
            XXX.beginPath();
            XXX.drawImage(yil, 52, 291, 59, 50, this.invX - (1/2 * 59 * 0.9), this.invY - (1/2 * 50 * 0.9), 59 * 0.9, 50 * 0.9);
        }
        else if (this.type == "sutetchiLeg")
        {
            XXX.beginPath();
            XXX.drawImage(olg, 37, 298, 28, 28, this.invX - (1/2 * 28 * 1.4), this.invY - (1/2 * 28 * 1.4), 28 * 1.4, 28 * 1.4);
        }
        else if (this.type == "reshidTooth")
        {
            XXX.beginPath();
            XXX.drawImage(olg, 760, 156, 16, 6, this.invX - (1/2 * 16 * 1.4), this.invY - (1/2 * 6 * 1.4), 16 * 1.4, 6 * 1.4);
        }
        else if (this.type == "scorpionClaw")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 92, 3, 56, 44, this.invX - (1/2 * 56 * 0.85), this.invY - (1/2 * 44 * 0.85), 56 * 0.85, 44 * 0.85);
        }
        else if (this.type == "scorpionClawFeast")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 87, 71, 56, 48, this.invX - (1/2 * 56 * 0.85), this.invY - (1/2 * 48 * 0.85), 56 * 0.85, 48 * 0.85);
        }
        else if (this.type == "scorpionMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 118, 46, 22, 18, this.invX - (1/2 * 22 * 1.1), this.invY - (1/2 * 18 * 1.1), 22 * 1.1, 18 * 1.1);
        }
        else if (this.type == "rawScorpionFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 93, 45, 22, 18, this.invX - (1/2 * 22 * 1.1), this.invY - (1/2 * 18 * 1.1), 22 * 1.1, 18 * 1.1);
        }
        else if (this.type == "whipScorpionMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1654, 198, 50, 27, this.invX - (1/2 * 50 * 0.9), this.invY - (1/2 * 27 * 0.9), 50 * 0.9, 27 * 0.9);
        }
        else if (this.type == "rawWhipScorpionFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1602, 197, 50, 27, this.invX - (1/2 * 50 * 0.9), this.invY - (1/2 * 27 * 0.9), 50 * 0.9, 27 * 0.9);
        }
        else if (this.type == "whipScorpionTail")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1514, 481, 56, 41, this.invX - (1/2 * 56 * 0.9), this.invY - (1/2 * 41 * 0.9), 56 * 0.9, 41 * 0.9);
        }
        else if (this.type == "whipScorpionFang")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1601, 229, 28, 18, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 18 * 1), 28 * 1, 18 * 1);
        }
        else if (this.type == "armadiiLeg")
        {
            XXX.beginPath();
            XXX.drawImage(pill, 56, 475, 18, 43, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 43 * 1), 18 * 1, 43 * 1);
        }
        else if (this.type == "roastedArmadiiLeg")
        {
            XXX.beginPath();
            XXX.drawImage(pill, 24, 474, 18, 43, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 43 * 1), 18 * 1, 43 * 1);
        }
        else if (this.type == "rattlerVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 169, 165, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "barbolSkin")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 715, 175, 130, 82, this.invX - (1/2 * 130 * 0.65), this.invY - (1/2 * 82 * 0.65), 130 * 0.65, 82 * 0.65);
        }
        else if (this.type == "rawBarbolFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 697, 269, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "barbolMeat")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 752, 270, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "desertLizardSml")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 727, 544, 71, 32, this.invX - (1/2 * 71 * 1), this.invY - (1/2 * 32 * 1), 71 * 1, 32 * 1);
        }
        else if (this.type == "roastedDesertLizardSml")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 825, 545, 71, 32, this.invX - (1/2 * 71 * 1), this.invY - (1/2 * 32 * 1), 71 * 1, 32 * 1);
        }
        else if (this.type == "desertLizardLrg")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 727, 544, 71, 32, this.invX - (1/2 * 71 * 1.2), this.invY - (1/2 * 32 * 1.2), 71 * 1.2, 32 * 1.2);
        }
        else if (this.type == "roastedDesertLizardLrg")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 825, 545, 71, 32, this.invX - (1/2 * 71 * 1.2), this.invY - (1/2 * 32 * 1.2), 71 * 1.2, 32 * 1.2);
        }
        else if (this.type == "xerocoleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 180, 127, 42, 31, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 31 * 1), 42 * 1, 31 * 1);
        }
        else if (this.type == "rawXerocoleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 131, 127, 42, 31, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 31 * 1), 42 * 1, 31 * 1);
        }
        else if (this.type == "rawXerocoleRibs")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 232, 124, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "xerocoleRibs")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 289, 124, 48, 36, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 36 * 1), 48 * 1, 36 * 1);
        }
        else if (this.type == "xerocolePelt")
        {
            XXX.beginPath();
            XXX.drawImage(scorp, 30, 120, 99, 56, this.invX - (1/2 * 99 * 0.8), this.invY - (1/2 * 56 * 0.8), 99 * 0.8, 56 * 0.8);
        }
        else if (this.type == "raedBeetleShell")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 0, 3, 46, 26, this.invX - (1/2 * 46 * 0.9), this.invY - (1/2 * 26 * 0.9), 46 * 0.9, 26 * 0.9);
        }
        else if (this.type == "raedBeetleLeg")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 171, 2, 14, 29, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 29 * 1), 14 * 1, 29 * 1);
        }
        else if (this.type == "raedBeetleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 60, 2, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "fermentedRaedBeetleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 134, 4, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "raedBeetleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 97, 2, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "rawVoaiiFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 81, 37, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "voaiiSponge")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 120, 38, 32, 25, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 25 * 1), 32 * 1, 25 * 1);
        }
        else if (this.type == "voaiiWingFragments")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 1105, 551, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "voaiiWing")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 4, 35, 43, 84, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 84 * 0.9), 43 * 0.9, 84 * 0.9);
        }
        else if (this.type == "voaiiCarapace")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 1139, 561, 60, 22, this.invX - (1/2 * 60 * 0.9), this.invY - (1/2 * 22 * 0.9), 60 * 0.9, 22 * 0.9);
        }
        else if (this.type == "naagSpine")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 39, 8, 28, 25, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 25 * 1), 28 * 1, 25 * 1);
        }
        else if (this.type == "naagMeatChunk")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 49, 88, 31, 22, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 22 * 1), 31 * 1, 22 * 1);
        }
        else if (this.type == "naagMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 45, 48, 42, 37, this.invX - (1/2 * 42 * 0.95), this.invY - (1/2 * 37 * 0.95), 42 * 0.95, 37 * 0.95);
        }
        else if (this.type == "curedDriedNaag")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 2, 0, 30, 18, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 18 * 1), 30 * 1, 18 * 1);
        }
        else if (this.type == "wholeCuredDriedNaag")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 2, 86, 42, 37, this.invX - (1/2 * 42 * 0.95), this.invY - (1/2 * 37 * 0.95), 42 * 0.95, 37 * 0.95);
        }
        else if (this.type == "rawNaagFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 3, 47, 42, 37, this.invX - (1/2 * 42 * 0.95), this.invY - (1/2 * 37 * 0.95), 42 * 0.95, 37 * 0.95);
        }
        else if (this.type == "naagPelt")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 26, 120, 79, 54, this.invX - (1/2 * 79 * 0.7), this.invY - (1/2 * 54 * 0.7), 79 * 0.7, 54 * 0.7);
        }
        else if (this.type == "muon")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 685, 578, 51, 31, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "muonShell")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 685, 610, 51, 31, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "muonFruit")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 686, 637, 51, 31, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 31 * 1), 51 * 1, 31 * 1);
        }
        else if (this.type == "longElkGloves")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 420, 15, 54, 60, this.invX - (1/2 * 54 * 0.9), this.invY - (1/2 * 60 * 0.9), 54 * 0.9, 60 * 0.9);
        }
        else if (this.type == "longElkBoots")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 477, 15, 54, 60, this.invX - (1/2 * 54 * 0.9), this.invY - (1/2 * 60 * 0.9), 54 * 0.9, 60 * 0.9);
        }
        else if (this.type == "motylinkaBoots")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 549, 144, 48, 32, this.invX - (1/2 * 48 * 0.9), this.invY - (1/2 * 32 * 0.9), 48 * 0.9, 32 * 0.9);
        }
        else if (this.type == "motylinkaGloves")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 552, 175, 44, 40, this.invX - (1/2 * 44 * 0.9), this.invY - (1/2 * 40 * 0.9), 44 * 0.9, 40 * 0.9);
        }
        else if (this.type == "redMotylinkaBoots")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 549, 144, 48, 32, this.invX - (1/2 * 48 * 0.9), this.invY - (1/2 * 32 * 0.9), 48 * 0.9, 32 * 0.9);
        }
        else if (this.type == "redMotylinkaGloves")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 552, 175, 44, 40, this.invX - (1/2 * 44 * 0.9), this.invY - (1/2 * 40 * 0.9), 44 * 0.9, 40 * 0.9);
        }
        else if (this.type == "boroyeNobleDress")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 973, 21, 58, 131, this.invX - (1/2 * 58 * 0.55), this.invY - (1/2 * 131 * 0.55), 58 * 0.55, 131 * 0.55);
        }
        else if (this.type == "boroyeNobleOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 899, 16, 58, 131, this.invX - (1/2 * 58 * 0.55), this.invY - (1/2 * 131 * 0.55), 58 * 0.55, 131 * 0.55);
        }
        else if (this.type == "redMotylinkaCloak")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 685, 25, 55, 93, this.invX - (1/2 * 55 * 0.7), this.invY - (1/2 * 93 * 0.7), 55 * 0.7, 93 * 0.7);
        }
        else if (this.type == "motylinkaCloak")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 685, 25, 55, 93, this.invX - (1/2 * 55 * 0.7), this.invY - (1/2 * 93 * 0.7), 55 * 0.7, 93 * 0.7);
        }
        else if (this.type == "vardanianGentryOutfitTan")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1578, 355, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryTanOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1663, 355, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryOutfitGreen")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1577, 552, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryGreenOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1664, 553, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryOutfitGrey")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1575, 744, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "vardanianGentryGreyOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1662, 743, 77, 191, this.invX - (1/2 * 77 * 0.45), this.invY - (1/2 * 191 * 0.45), 77 * 0.45, 191 * 0.45);
        }
        else if (this.type == "blackBearMediumArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1611, 214, 54, 107, this.invX - (1/2 * 54 * 0.75), this.invY - (1/2 * 107 * 0.75), 54 * 0.75, 107 * 0.75);
        }
        else if (this.type == "plumedBoroyePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 826, 19, 50, 125, this.invX - (1/2 * 50 * 0.7), this.invY - (1/2 * 125 * 0.7), 50 * 0.7, 125 * 0.7);
        }
        else if (this.type == "plumedMorrowPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 826, 19, 50, 125, this.invX - (1/2 * 50 * 0.7), this.invY - (1/2 * 125 * 0.7), 50 * 0.7, 125 * 0.7);
        }
        else if (this.type == "boroyePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 757, 22, 50, 125, this.invX - (1/2 * 50 * 0.75), this.invY - (1/2 * 125 * 0.75), 50 * 0.75, 125 * 0.75);
        }
        else if (this.type == "morrowPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 757, 22, 50, 125, this.invX - (1/2 * 50 * 0.75), this.invY - (1/2 * 125 * 0.75), 50 * 0.75, 125 * 0.75);
        }
        else if (this.type == "redClawArmour")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 335, 7, 68, 123, this.invX - (1/2 * 68 * 0.7), this.invY - (1/2 * 123 * 0.7), 68 * 0.7, 123 * 0.7);
        }
        else if (this.type == "pinkVardanianDupatta")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 521, 126, 66, 122, this.invX - (1/2 * 66 * 0.65), this.invY - (1/2 * 122 * 0.65), 66 * 0.65, 122 * 0.65);
        }
        else if (this.type == "cianVardanianDupatta")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 178, 28, 68, 123, this.invX - (1/2 * 68 * 0.65), this.invY - (1/2 * 123 * 0.65), 68 * 0.65, 123 * 0.65);
        }
        else if (this.type == "elkFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 432, 126, 66, 122, this.invX - (1/2 * 66 * 0.75), this.invY - (1/2 * 122 * 0.75), 66 * 0.75, 122 * 0.75);
        }
        else if (this.type == "varminFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 122, 117, 66, 122, this.invX - (1/2 * 66 * 1.05), this.invY - (1/2 * 122 * 1.05), 66 * 1.05, 122 * 1.05);
        }
        else if (this.type == "redClawThugOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 187, 114, 66, 122, this.invX - (1/2 * 66 * 0.8), this.invY - (1/2 * 122 * 0.8), 66 * 0.8, 122 * 0.8);
        }
        else if (this.type == "redClaw")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 314, 126, 66, 122, this.invX - (1/2 * 66 * 0.68), this.invY - (1/2 * 122 * 0.68), 66 * 0.68, 122 * 0.68);
        }
        else if (this.type == "koivayaFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(trea, 637, 1769, 51, 90, this.invX - (1/2 * 51 * 0.75), this.invY - (1/2 * 90 * 0.75), 51 * 0.75, 90 * 0.75);
        }
        else if (this.type == "koivayaFurDress")
        {
            XXX.beginPath();
            XXX.drawImage(trea, 638, 1881, 51, 98, this.invX - (1/2 * 51 * 0.75), this.invY - (1/2 * 98 * 0.75), 51 * 0.75, 98 * 0.75);
        }
        else if (this.type == "zetianGloves")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 693, 69, 24, 13, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 13 * 1), 24 * 1, 13 * 1);
        }
        else if (this.type == "chapulCactus")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1633, 229, 22, 22, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 22 * 1.3), 22 * 1.3, 22 * 1.3);
        }
        else if (this.type == "chapulCactusPaste")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1661, 232, 27, 22, this.invX - (1/2 * 27 * 1.3), this.invY - (1/2 * 22 * 1.3), 27 * 1.3, 22 * 1.3);
        }
        else if (this.type == "anjayCactus")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 608, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "despinedAnjayCactus")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 659, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "roastedAnjayCactus")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 687, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "anjayFlower")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 634, 433, 24, 24, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 24 * 1), 24 * 1, 24 * 1);
        }
        else if (this.type == "naibArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1384, 705, 40, 36, this.invX - (1/2 * 40 * 1.1), this.invY - (1/2 * 36 * 1.1), 40 * 1.1, 36 * 1.1);
        }
        else if (this.type == "inumClipping")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1503, 713, 40, 36, this.invX - (1/2 * 40 * 1.2), this.invY - (1/2 * 36 * 1.2), 40 * 1.2, 36 * 1.2);
        }
        else if (this.type == "maweHunk")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1136, 277, 17, 18, this.invX - (1/2 * 17 * 1.3), this.invY - (1/2 * 18 * 1.3), 17 * 1.3, 18 * 1.3);
        }
        else if (this.type == "despinedMaweHunk")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1154, 277, 17, 18, this.invX - (1/2 * 17 * 1.3), this.invY - (1/2 * 18 * 1.3), 17 * 1.3, 18 * 1.3);
        }
        else if (this.type == "maweFlower")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1168, 180, 17, 18, this.invX - (1/2 * 17 * 1.3), this.invY - (1/2 * 18 * 1.3), 17 * 1.3, 18 * 1.3);
        }
        else if (this.type == "maleLyagushkaSkin")
        {
            XXX.beginPath();
            XXX.drawImage(cleen, 393, 50, 37, 33, this.invX - (1/2 * 37 * 1.1), this.invY - (1/2 * 33 * 1.1), 37 * 1.1, 33 * 1.1);
        }
        else if (this.type == "rawLyagushkaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(cleen, 36, 36, 28, 17, this.invX - (1/2 * 28 * 1.1), this.invY - (1/2 * 17 * 1.1), 28 * 1.1, 17 * 1.1);
        }
        else if (this.type == "lyagushkaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(cleen, 38, 56, 28, 17, this.invX - (1/2 * 28 * 1.1), this.invY - (1/2 * 17 * 1.1), 28 * 1.1, 17 * 1.1);
        }
        else if (this.type == "ostryyGrass")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1296, 431, 68, 61, this.invX - (1/2 * 68 * 1), this.invY - (1/2 * 61 * 1), 68 * 1, 61 * 1);
        }
        else if (this.type == "vardanianInformerUniform")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1608, 51, 66, 132, this.invX - (1/2 * 66 * 0.62), this.invY - (1/2 * 132 * 0.62), 66 * 0.62, 132 * 0.62);
        }
        else if (this.type == "roylaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 144, 8, 26, 30, this.invX - (1/2 * 26 * 0.8), this.invY - (1/2 * 30 * 0.8), 26 * 0.8, 30 * 0.8);
        }
        else if (this.type == "toadstools")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 294, 23, 16, 17, this.invX - (1/2 * 16 * 1.25), this.invY - (1/2 * 17 * 1.25), 16 * 1.25, 17 * 1.25);
        }
        else if (this.type == "thimblecapMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(negro, 129, 44, 20, 22, this.invX - (1/2 * 20 * 0.9), this.invY - (1/2 * 20 * 0.9), 20 * 0.9, 22 * 0.9);
        }
        else if (this.type == "vardanianMardyl")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 841, 519, 55, 58, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 58 * 1), 55 * 1, 58 * 1);
        }
        else if (this.type == "orgishMardyl")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 40, 126, 55, 58, this.invX - (1/2 * 55 * 1.1), this.invY - (1/2 * 58 * 1.1), 55 * 1.1, 58 * 1.1);
        }
        else if (this.type == "heskFungalPod")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 316, 72, 24, 24, this.invX - (1/2 * 24 * 1.45), this.invY - (1/2 * 24 * 1.45), 24 * 1.45, 24 * 1.45);
        }
        else if (this.type == "heskFungus")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 251, 73, 54, 20, this.invX - (1/2 * 54 * 1.1), this.invY - (1/2 * 20 * 1.1), 54 * 1.1, 20 * 1.1);
        }
        else if (this.type == "prematureCauwLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1656, 994, 18, 20, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 20 * 1.3), 18 * 1.3, 20 * 1.3);
        }
        else if (this.type == "cauwLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1687, 997, 18, 20, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 20 * 1.3), 18 * 1.3, 20 * 1.3);
        }
        else if (this.type == "eisyncryneFruit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1618, 1026, 17, 17, this.invX - (1/2 * 17 * 1.4), this.invY - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "splitEisyncryneFruit")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1597, 1027, 17, 17, this.invX - (1/2 * 17 * 1.4), this.invY - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "eisyncrynePlant")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1596, 1047, 41, 45, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 45 * 1), 41 * 1, 45 * 1);
        }
        else if (this.type == "motylekhLeg")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 191, 261, 86, 58, this.invX - (1/2 * 86 * 1), this.invY - (1/2 * 58 * 1), 86 * 1, 58 * 1);
        }
        else if (this.type == "roastedMotylekhLeg")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 306, 262, 86, 58, this.invX - (1/2 * 86 * 1), this.invY - (1/2 * 58 * 1), 86 * 1, 58 * 1);
        }
        else if (this.type == "motylekhWing")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 400, 236, 127, 84, this.invX - (1/2 * 127 * 0.65), this.invY - (1/2 * 84 * 0.65), 127 * 0.65, 84 * 0.65);
        }
        else if (this.type == "motylekhWingBundle")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 367, 96, 146, 88, this.invX - (1/2 * 146 * 0.55), this.invY - (1/2 * 88 * 0.55), 146 * 0.55, 88 * 0.55);
        }
        else if (this.type == "bulkMotylinka")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 376, 7, 146, 88, this.invX - (1/2 * 146 * 0.55), this.invY - (1/2 * 88 * 0.55), 146 * 0.55, 88 * 0.55);
        }
        else if (this.type == "motylinka")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 376, 7, 146, 88, this.invX - (1/2 * 146 * 0.35), this.invY - (1/2 * 88 * 0.35), 146 * 0.35, 88 * 0.35);
        }
        else if (this.type == "chervstrakhaStomach")
        {
            XXX.beginPath();
            XXX.drawImage(moth, 148, 270, 14, 12, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 12 * 1), 14 * 1, 12 * 1);
        }
        else if (this.type == "ratPrinceRegalia")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1442, 1023, 58, 120, this.invX - (1/2 * 58 * 0.65), this.invY - (1/2 * 120 * 0.65), 58 * 0.65, 120 * 0.65);
        }
        else if (this.type == "ratKingRegalia")
        {
            XXX.beginPath();
            XXX.drawImage(mawt, 1514, 1021, 58, 120, this.invX - (1/2 * 58 * 0.65), this.invY - (1/2 * 120 * 0.65), 58 * 0.65, 120 * 0.65);
        }
        else if (this.type == "nomadTent")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 7, 162, 43, 44, this.invX - (1/2 * 43 * 1.1), this.invY - (1/2 * 44 * 1.1), 43 * 1.1, 44 * 1.1);
        }
        else if (this.type == "anglerAntennae")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 779, 1296, 98, 34, this.invX - (1/2 * 98 * 0.9), this.invY - (1/2 * 34 * 0.9), 98 * 0.9, 34 * 0.9);
        }
        else if (this.type == "starfishSmall")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 633, 425, 70, 70, this.invX - (1/2 * 70 * 0.4), this.invY - (1/2 * 70 * 0.4), 70 * 0.4, 70 * 0.4);
        }
        else if (this.type == "starfishBig")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 633, 425, 70, 70, this.invX - (1/2 * 70 * 0.8), this.invY - (1/2 * 70 * 0.8), 70 * 0.8, 70 * 0.8);
        }
        else if (this.type == "rawBloodwormFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 540, 556, 35, 27, this.invX - (1/2 * 35 * 1.2), this.invY - (1/2 * 27 * 1.2), 35 * 1.2, 27 * 1.2);
        }
        else if (this.type == "bloodwormMeat")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 591, 553, 35, 27, this.invX - (1/2 * 35 * 1.2), this.invY - (1/2 * 27 * 1.2), 35 * 1.2, 27 * 1.2);
        }
        else if (this.type == "krogiMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 4, 238, 30, 27, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 27 * 1), 30 * 1, 27 * 1);
        }
        else if (this.type == "cookedKrogiMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 42, 241, 30, 27, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 27 * 1), 30 * 1, 27 * 1);
        }
        else if (this.type == "pixiWing")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 72, 101, 20, 24, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 24 * 1.1), 20 * 1.1, 24 * 1.1);
        }
        else if (this.type == "pixiBrain")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 91, 128, 20, 24, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 24 * 1.1), 20 * 1.1, 24 * 1.1);
        }
        else if (this.type == "jarOfPixiBlood")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 69, 156, 20, 24, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 24 * 1.5), 20 * 1.5, 24 * 1.5);
        }
        else if (this.type == "velidShell")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 69, 130, 20, 24, this.invX - (1/2 * 20 * 1.3), this.invY - (1/2 * 24 * 1.3), 20 * 1.3, 24 * 1.3);
        }
        else if (this.type == "trubkaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 7, 267, 20, 24, this.invX - (1/2 * 20 * 1.2), this.invY - (1/2 * 24 * 1.2), 20 * 1.2, 24 * 1.2);
        }
        else if (this.type == "trubkaStalk")
        {
            XXX.beginPath();
            XXX.drawImage(pixi, 806, 1328, 67, 30, this.invX - (1/2 * 67 * 1.2), this.invY - (1/2 * 30 * 1.2), 67 * 1.2, 30 * 1.2);
        }
        else if (this.type == "pokinutyyShell")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 643, 631, 31, 29, this.invX - (1/2 * 31 * 1.5), this.invY - (1/2 * 29 * 1.5), 31 * 1.5, 29 * 1.5);
        }
        else if (this.type == "pokinutyyLegFull" || this.type == "pokinutyyLeg")
        {
            XXX.beginPath();
            XXX.drawImage(blud, 575, 631, 51, 29, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 29 * 1), 51 * 1, 29 * 1);
        }
        else if (this.type == "gnollPelt")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 206, 309, 54, 40, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 40 * 1), 54 * 1, 40 * 1);
        }
        else if (this.type == "gnollIntestines")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 168, 257, 40, 36, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 36 * 1), 40 * 1, 36 * 1);
        }
        else if (this.type == "roastedGnollIntestines")
        {
            XXX.beginPath();
            XXX.drawImage(gnoll, 208, 258, 40, 36, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 36 * 1), 40 * 1, 36 * 1);
        }
        else if (this.type == "holuimTalisman")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1173, 717, 24, 33, this.invX - (1/2 * 24 * 1.25), this.invY - (1/2 * 33 * 1.25), 24 * 1.25, 33 * 1.25);
        }
        else if (this.type == "varminPelt")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 433, 3, 81, 48, this.invX - (1/2 * 81 * 0.6), this.invY - (1/2 * 48 * 0.6), 81 * 0.6, 48 * 0.6);
        }
        else if (this.type == "deadRat")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 26, 1117, 62, 34, this.invX - (1/2 * 62 * 0.6), this.invY - (1/2 * 34 * 0.6), 62 * 0.6, 34 * 0.6);
        }
        else if (this.type == "rawSkeweredRat")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 102, 1155, 97, 34, this.invX - (1/2 * 97 * 0.6), this.invY - (1/2 * 34 * 0.6), 97 * 0.6, 34 * 0.6);
        }
        else if (this.type == "skeweredRat")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 14, 1156, 92, 35, this.invX - (1/2 * 92 * 0.6), this.invY - (1/2 * 35 * 0.6), 92 * 0.6, 35 * 0.6);
        }
        else if (this.type == "rawVarminLeg")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 862, 897, 93, 39, this.invX - (1/2 * 93 * 1), this.invY - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "rawVarminHaunch")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 862, 937, 93, 39, this.invX - (1/2 * 93 * 1), this.invY - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "varminHaunch")
        {
            XXX.beginPath();
            XXX.drawImage(ruin, 861, 985, 93, 39, this.invX - (1/2 * 93 * 1), this.invY - (1/2 * 39 * 1), 93 * 1, 39 * 1);
        }
        else if (this.type == "vardanianPolehammer")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 14, 678, 84, 124, this.invX - (1/2 * 84 * 0.8), this.invY - (1/2 * 124 * 0.8), 84 * 0.8, 124 * 0.8);
        }
        else if (this.type == "pashaArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1135, 297, 33, 24, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "despinedPashaArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1135, 325, 33, 24, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "roastedPashaArm")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1135, 353, 33, 24, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 24 * 1), 33 * 1, 24 * 1);
        }
        else if (this.type == "cephrianPaladinArmour")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 76, 40, 65, 131, this.invX - (1/2 * 65 * 0.55), this.invY - (1/2 * 131 * 0.55), 65 * 0.55, 131 * 0.55);
        }
        else if (this.type == "tropicalFruitPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 948, 67, 39, 43, this.invX - (1/2 * 39 * 1.4), this.invY - (1/2 * 43 * 1.4), 39 * 1.4, 43 * 1.4);
        }
        else if (this.type == "marinatedGazelle")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 838, 35, 30, 30, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 30 * 1.1), 30 * 1.1, 30 * 1.1);
        }
        else if (this.type == "spicedSonjaSlices")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 935, 1, 28, 30, this.invX - (1/2 * 28 * 1.5), this.invY - (1/2 * 30 * 1.5), 28 * 1.5, 30 * 1.5);
        }
        else if (this.type == "artichokePlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 911, 34, 28, 30, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 30 * 1.3), 28 * 1.3, 30 * 1.3);
        }
        else if (this.type == "stuffedEggplant")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 939, 35, 28, 30, this.invX - (1/2 * 28 * 1.5), this.invY - (1/2 * 30 * 1.5), 28 * 1.5, 30 * 1.5);
        }
        else if (this.type == "stuffedOnion")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 967, 33, 28, 30, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 30 * 1.3), 28 * 1.3, 30 * 1.3);
        }
        else if (this.type == "wholeRoastedKol")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 902, 1, 33, 30, this.invX - (1/2 * 33 * 1.5), this.invY - (1/2 * 30 * 1.5), 33 * 1.5, 30 * 1.5);
        }
        else if (this.type == "cephrianStew")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 864, 3, 33, 30, this.invX - (1/2 * 33 * 1.5), this.invY - (1/2 * 30 * 1.5), 33 * 1.5, 30 * 1.5);
        }
        else if (this.type == "spicedFermentedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 834, 1, 30, 30, this.invX - (1/2 * 30 * 1.2), this.invY - (1/2 * 30 * 1.2), 30 * 1.2, 30 * 1.2);
        }
        else if (this.type == "piranhaPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 731, 9, 45, 28, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 28 * 1), 45 * 1, 28 * 1);
        }
        else if (this.type == "boaPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 669, 4, 52, 31, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 31 * 1), 52 * 1, 31 * 1);
        }
        else if (this.type == "wholeStuffedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 778, 6, 52, 31, this.invX - (1/2 * 52 * 1.25), this.invY - (1/2 * 31 * 1.25), 52 * 1.25, 31 * 1.25);
        }
        else if (this.type == "wholeRoastedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 778, 6, 52, 31, this.invX - (1/2 * 52 * 1.2), this.invY - (1/2 * 31 * 1.2), 52 * 1.2, 31 * 1.2);
        }
        else if (this.type == "giraffePlatter")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 587, 3, 31, 28, this.invX - (1/2 * 31 * 1.1), this.invY - (1/2 * 28 * 1.1), 31 * 1.1, 28 * 1.1);
        }
        else if (this.type == "sonjaGlazedKigariiRibs")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 623, 3, 31, 28, this.invX - (1/2 * 31 * 1.3), this.invY - (1/2 * 28 * 1.3), 31 * 1.3, 28 * 1.3);
        }
        else if (this.type == "spellOil")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1010, 2, 10, 21, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 21 * 2), 10 * 2, 21 * 2);
        }
        else if (this.type == "druidGown")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 661, 145, 40, 74, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 74 * 1), 40 * 1, 74 * 1);
        }
        else if (this.type == "zetianWarriorArmour")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 721, 135, 62, 81, this.invX - (1/2 * 62 * 0.9), this.invY - (1/2 * 81 * 0.9), 62 * 0.9, 81 * 0.9);
        }
        else if (this.type == "lionClothing")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 736, 836, 58, 99, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 99 * 0.8), 58 * 0.8, 99 * 0.8);
        }
        else if (this.type == "giraffeClothing")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 614, 1000, 58, 99, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 99 * 0.8), 58 * 0.8, 99 * 0.8);
        }
        else if (this.type == "twoDogOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 679, 999, 58, 99, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 99 * 0.8), 58 * 0.8, 99 * 0.8);
        }
        else if (this.type == "cephrianNomadOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 620, 771, 58, 99, this.invX - (1/2 * 58 * 0.85), this.invY - (1/2 * 99 * 0.85), 58 * 0.85, 99 * 0.85);
        }
        else if (this.type == "cephrianNomadDress")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 625, 671, 58, 99, this.invX - (1/2 * 58 * 0.78), this.invY - (1/2 * 99 * 0.78), 58 * 0.78, 99 * 0.78);
        }
        else if (this.type == "shortCephrianNomadDress")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 632, 674, 47, 79, this.invX - (1/2 * 47 * 0.77), this.invY - (1/2 * 79 * 0.77), 47 * 0.77, 79 * 0.77);
        }
        else if (this.type == "cephrianOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 742, 940, 41, 80, this.invX - (1/2 * 41 * 0.9), this.invY - (1/2 * 80 * 0.9), 41 * 0.9, 80 * 0.9);
        }
        else if (this.type == "cephrianOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 688, 855, 41, 80, this.invX - (1/2 * 41 * 0.9), this.invY - (1/2 * 80 * 0.9), 41 * 0.9, 80 * 0.9);
        }
        else if (this.type == "zetianOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 683, 4, 43, 79, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 79 * 0.9), 43 * 0.9, 79 * 0.9);
        }
        else if (this.type == "zetianOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 730, 2, 43, 79, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 79 * 0.9), 43 * 0.9, 79 * 0.9);
        }
        else if (this.type == "vardanianEliteSoldierOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 15, 64, 46, 116, this.invX - (1/2 * 46 * 0.68), this.invY - (1/2 * 116 * 0.68), 46 * 0.68, 116 * 0.68);
        }
        else if (this.type == "cephrianBlade")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 219, 67, 17, 60, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 60 * 1), 17 * 1, 60 * 1);
        }
        else if (this.type == "cephrianDagger")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1073, 822, 23, 60, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 60 * 1), 23 * 1, 60 * 1);
        }
        else if (this.type == "cephrianRapier")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 148, 8, 20, 89, this.invX - (1/2 * 20 * 0.85), this.invY - (1/2 * 89 * 0.85), 20 * 0.85, 89 * 0.85);
        }
        else if (this.type == "throwingKnife")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1413, 809, 12, 39, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 39 * 1), 12 * 1, 39 * 1);
        }
        else if (this.type == "poisonCoatedThrowingKnife")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1414, 856, 12, 39, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 39 * 1), 12 * 1, 39 * 1);
        }
        else if (this.type == "cephrianPikeAndShield")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 606, 6, 150, 108, this.invX - (1/2 * 150 * 0.5), this.invY - (1/2 * 108 * 0.5), 150 * 0.5, 108 * 0.5);
        }
        else if (this.type == "rawVodkapaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1354, 230, 74, 62, this.invX - (1/2 * 74 * 1), this.invY - (1/2 * 62 * 1), 74 * 1, 62 * 1);
        }
        else if (this.type == "vodkapaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1354, 313, 74, 62, this.invX - (1/2 * 74 * 1), this.invY - (1/2 * 62 * 1), 74 * 1, 62 * 1);
        }
        else if (this.type == "vodkapaSpleen")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1456, 241, 32, 46, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 46 * 1), 32 * 1, 46 * 1);
        }
        else if (this.type == "fermentedVodkapaSpleen")
        {
            XXX.beginPath();
            XXX.drawImage(kapa, 1454, 323, 32, 46, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 46 * 1), 32 * 1, 46 * 1);
        }
        else if (this.type == "cephrianArmour")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 172, 41, 48, 109, this.invX - (1/2 * 48 * 0.65), this.invY - (1/2 * 109 * 0.65), 48 * 0.65, 109 * 0.65);
        }
        else if (this.type == "blinkOrb")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 123, 67, 10, 9, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 9 * 1), 10 * 1, 9 * 1);
        }
        else if (this.type == "gazelleHorn")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1300, 838, 14, 37, this.invX - (1/2 * 14 * 1.1), this.invY - (1/2 * 37 * 1.1), 14 * 1.1, 37 * 1.1);
        }
        else if (this.type == "gazellePelt")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2372, 880, 84, 41, this.invX - (1/2 * 84 * 0.95), this.invY - (1/2 * 41 * 0.95), 84 * 0.95, 41 * 0.95);
        }
        else if (this.type == "rawGazelleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2575, 892, 30, 26, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 26 * 1.1), 30 * 1.1, 26 * 1.1);
        }
        else if (this.type == "gazelleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2607, 894, 30, 26, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 26 * 1.1), 30 * 1.1, 26 * 1.1);
        }
        else if (this.type == "rawTaebjuurFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1409, 1150, 36, 29, this.invX - (1/2 * 36 * 1.1), this.invY - (1/2 * 29 * 1.1), 36 * 1.1, 29 * 1.1);
        }
        else if (this.type == "taebjuurMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1373, 1150, 36, 29, this.invX - (1/2 * 36 * 1.1), this.invY - (1/2 * 29 * 1.1), 36 * 1.1, 29 * 1.1);
        }
        else if (this.type == "holnArms")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 278, 365, 56, 41, this.invX - (1/2 * 56 * 1), this.invY - (1/2 * 41 * 1), 56 * 1, 41 * 1);
        }
        else if (this.type == "rawGiraffeFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 499, 1047, 30, 28, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 28 * 1.1), 30 * 1.1, 28 * 1.1);
        }
        else if (this.type == "giraffeMeat")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 530, 1048, 30, 28, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 28 * 1.1), 30 * 1.1, 28 * 1.1);
        }
        else if (this.type == "rawHyenaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 602, 257, 24, 20, this.invX - (1/2 * 24 * 1.1), this.invY - (1/2 * 20 * 1.1), 24 * 1.1, 20 * 1.1);
        }
        else if (this.type == "hyenaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 628, 258, 24, 20, this.invX - (1/2 * 24 * 1.1), this.invY - (1/2 * 20 * 1.1), 24 * 1.1, 20 * 1.1);
        }
        else if (this.type == "rawDogFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 607, 284, 20, 18, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 18 * 1.1), 20 * 1.1, 18 * 1.1);
        }
        else if (this.type == "dogMeat")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 628, 285, 20, 18, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 18 * 1.1), 20 * 1.1, 18 * 1.1);
        }
        else if (this.type == "hyenaPelt")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 225, 11, 54, 29, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 29 * 1), 54 * 1, 29 * 1);
        }
        else if (this.type == "wildDogPelt")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 166, 12, 54, 29, this.invX - (1/2 * 54 * 1.1), this.invY - (1/2 * 29 * 1.1), 54 * 1.1, 29 * 1.1);
        }
        else if (this.type == "giraffePelt")
        {
            XXX.beginPath();
            XXX.drawImage(salem, 370, 13, 128, 41, this.invX - (1/2 * 128 * 0.6), this.invY - (1/2 * 41 * 0.6), 128 * 0.6, 41 * 0.6);
        }
        else if (this.type == "xiumMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(fect, 545, 38, 43, 27, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 27 * 1), 43 * 1, 27 * 1);
        }
        else if (this.type == "leafCutterAnterMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1998, 209, 25, 19, this.invX - (1/2 * 25 * 1.05), this.invY - (1/2 * 19 * 1.05), 25 * 1.05, 19 * 1.05);
        }
        else if (this.type == "rawLeafCutterAnterFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1997, 190, 25, 19, this.invX - (1/2 * 25 * 1.1), this.invY - (1/2 * 19 * 1.1), 25 * 1.1, 19 * 1.1);
        }
        else if (this.type == "elcheExtract")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1751, 183, 10, 17, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 17 * 1), 10 * 1, 17 * 1);
        }
        else if (this.type == "elcheLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 1990, 151, 39, 35, this.invX - (1/2 * 39 * 1.1), this.invY - (1/2 * 35 * 1.1), 39 * 1.1, 35 * 1.1);
        }
        else if (this.type == "rawLionFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 241, 49, 19, 17, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "lionMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 221, 50, 19, 17, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "lionPelt")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 263, 48, 45, 25, this.invX - (1/2 * 45 * 1.5), this.invY - (1/2 * 25 * 1.5), 45 * 1.5, 25 * 1.5);
        }
        else if (this.type == "rawTermiteFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2385, 3, 18, 14, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "termiteMeat")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2386, 29, 18, 14, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "fermentedTermite")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2385, 15, 18, 14, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 14 * 1.2), 18 * 1.2, 14 * 1.2);
        }
        else if (this.type == "termiteWings")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 2289, 1, 36, 26, this.invX - (1/2 * 36 * 1.2), this.invY - (1/2 * 26 * 1.2), 36 * 1.2, 26 * 1.2);
        }
        else if (this.type == "acaciaWood")
        {
            XXX.beginPath();
            XXX.drawImage(jeru, 803, 725, 66, 71, this.invX - (1/2 * 66 * 1), this.invY - (1/2 * 71 * 1), 66 * 1, 71 * 1);
        }
        else if (this.type == "snowyOwlWing")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 304, 121, 23, 31, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 31 * 1), 23 * 1, 31 * 1);
        }
        else if (this.type == "snowyOwlWingLarge")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 304, 121, 23, 31, this.invX - (1/2 * 23 * 2), this.invY - (1/2 * 31 * 2), 23 * 2, 31 * 2);
        }
        else if (this.type == "cebollaPicadaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 26, 308, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "cebollaPicada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 4, 266, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "cebollaHorneada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 21, 292, 15, 18, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "cebolla")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 8, 291, 15, 18, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "berenjenaRebanadaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 1, 442, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "berenjenaRebanada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 0, 462, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "berenjenaPicadaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 3, 357, 22, 22, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 22 * 1.5), 22 * 1.5, 22 * 1.5);
        }
        else if (this.type == "berenjenaPicada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 2, 377, 22, 22, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 22 * 1.5), 22 * 1.5, 22 * 1.5);
        }
        else if (this.type == "berenjena")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 1, 490, 22, 27, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 27 * 1.5), 22 * 1.5, 27 * 1.5);
        }
        else if (this.type == "saffron")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 19, 459, 15, 18, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 18 * 1.3), 15 * 1.3, 18 * 1.3);
        }
        else if (this.type == "alcachofa")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 6, 221, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "alcachofaCocinada")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 6, 244, 22, 27, this.invX - (1/2 * 22 * 1.3), this.invY - (1/2 * 27 * 1.3), 22 * 1.3, 27 * 1.3);
        }
        else if (this.type == "tchafula")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 965, 6, 14, 16, this.invX - (1/2 * 14 * 1.4), this.invY - (1/2 * 16 * 1.4), 14 * 1.4, 16 * 1.4);
        }
        else if (this.type == "tchafulaHalf")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 981, 6, 14, 16, this.invX - (1/2 * 14 * 1.4), this.invY - (1/2 * 16 * 1.4), 14 * 1.4, 16 * 1.4);
        }
        else if (this.type == "tchafulaTuft")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 554, 0, 21, 24, this.invX - (1/2 * 21 * 1.4), this.invY - (1/2 * 24 * 1.4), 21 * 1.4, 24 * 1.4);
        }
        else if (this.type == "glazaPowder")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 693, 41, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "glazm")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 716, 40, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "roastedGlazaRoot")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1, 98, 48, 30, this.invX - (1/2 * 48 * 1.3), this.invY - (1/2 * 30 * 1.3), 48 * 1.3, 30 * 1.3);
        }
        else if (this.type == "glazaRoot")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1, 127, 48, 30, this.invX - (1/2 * 48 * 1.3), this.invY - (1/2 * 30 * 1.3), 48 * 1.3, 30 * 1.3);
        }
        else if (this.type == "tchaltaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 666, 35, 25, 22, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "tchaltaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 618, 33, 25, 22, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "tchaltaGel")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 645, 32, 25, 22, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 22 * 1.7), 25 * 1.7, 22 * 1.7);
        }
        else if (this.type == "nupalaPuffs")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 590, 31, 29, 19, this.invX - (1/2 * 29 * 1.55), this.invY - (1/2 * 19 * 1.55), 29 * 1.55, 19 * 1.55);
        }
        else if (this.type == "zwaleimBranches")
        {
            XXX.beginPath();
            XXX.drawImage(cef, 558, 33, 29, 19, this.invX - (1/2 * 29 * 1.55), this.invY - (1/2 * 19 * 1.55), 29 * 1.55, 19 * 1.55);
        }
        else if (this.type == "skriatokEssence")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 2199, 877, 55, 49, this.invX - (1/2 * 55 * 0.45), this.invY - (1/2 * 49 * 0.45), 55 * 0.45, 49 * 0.45);
        }
        else if (this.type == "cheshirePaw")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 901, 3, 35, 31, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 31 * 1), 35 * 1, 31 * 1);
        }
        else if (this.type == "worms")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 16 * 1), 18 * 1, 16 * 1);
        }
        else if (this.type == "wormz")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1) + 1, this.invY - (1/2 * 16 * 1) + 2.5, 18 * 1, 16 * 1);
            XXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 16 * 1), 18 * 1, 16 * 1);
            XXX.drawImage(polyPNG, 5, 716, 18, 16, this.invX - (1/2 * 18 * 1) + 4, this.invY - (1/2 * 16 * 1) - 3, 18 * 1, 16 * 1);
        }
        else if (this.type == "turkeyEgg")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 721, 184, 19, 19, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 19 * 1), 19 * 1, 19 * 1);
        }
        else if (this.type == "cookedTurkeyEgg")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 713, 207, 19, 19, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 19 * 1.5), 19 * 1.5, 19 * 1.5);
        }
        else if (this.type == "turkeyFeathers")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 747, 305, 38, 26, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 26 * 1), 38 * 1, 26 * 1);
        }
        else if (this.type == "rawTurkeyFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 742, 190, 51, 55, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 55 * 1), 51 * 1, 55 * 1);
        }
        else if (this.type == "turkeyMeat")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 740, 248, 51, 55, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 55 * 1), 51 * 1, 55 * 1);
        }
        else if (this.type == "thenganSageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 633, 61, 57, 108, this.invX - (1/2 * 57 * 0.65), this.invY - (1/2 * 108 * 0.65), 57 * 0.65, 108 * 0.65);
        }
        else if (this.type == "sackmansHood")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 356, 3, 51, 43, this.invX - (1/2 * 51 * 1.2), this.invY - (1/2 * 43 * 1), 51 * 1.2, 43 * 1);
            XXX.drawImage(pavo, 268, 0, 51, 43, this.invX - (1/2 * 51 * 0.9), this.invY - (1/2 * 43 * 1), 51 * 0.9, 43 * 1);
        }
        else if (this.type == "littleRedRidingHood")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 70, 4, 36, 63, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 63 * 1), 36 * 1, 63 * 1);
        }
        else if (this.type == "sackmansSword")
        {
            XXX.beginPath();
            XXX.drawImage(pavo, 24, 131, 56, 67, this.invX - (1/2 * 56 * 1), this.invY - (1/2 * 67 * 1), 56 * 1, 67 * 1);
        }
        else if (this.type == "beulingerrDress")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 858, 153, 115, 140, this.invX - (1/2 * 115 * 0.5), this.invY - (1/2 * 140 * 0.5), 115 * 0.5, 140 * 0.5);
        }
        else if (this.type == "beulingerrOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 57, 3, 77, 127, this.invX - (1/2 * 77 * 0.5), this.invY - (1/2 * 127 * 0.5), 77 * 0.5, 127 * 0.5);
        }
        else if (this.type == "theWendigosCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 15, 8, 29, 79, this.invX - (1/2 * 29 * 0.9), this.invY - (1/2 * 79 * 0.9), 29 * 0.9, 79 * 0.9);
        }
        else if (this.type == "beulingerrPike")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 26, 140, 136, 90, this.invX - (1/2 * 136 * 0.65), this.invY - (1/2 * 90 * 0.65), 136 * 0.65, 90 * 0.65);
        }
        else if (this.type == "redFan")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 138, 450, 29, 39, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 39 * 1), 29 * 1, 39 * 1);
        }
        else if (this.type == "purpleFan")
        {
            XXX.beginPath();
            XXX.drawImage(abanico, 29, 91, 29, 39, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 39 * 1), 29 * 1, 39 * 1);
        }
        else if (this.type == "thenganHose")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 5, 116, 48, 26, this.invX - (1/2 * 48 * 0.9), this.invY - (1/2 * 26 * 0.9), 48 * 0.9, 26 * 0.9);
        }
        else if (this.type == "thenganCommonwear")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 0, 8, 57, 97, this.invX - (1/2 * 57 * 0.7), this.invY - (1/2 * 97 * 0.7), 57 * 0.7, 97 * 0.7);
        }
        else if (this.type == "thenganNobleOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 116, 8, 69, 115, this.invX - (1/2 * 69 * 0.65), this.invY - (1/2 * 115 * 0.65), 69 * 0.65, 115 * 0.65);
        }
        else if (this.type == "thenganNobleOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(alfombra, 202, 8, 69, 115, this.invX - (1/2 * 69 * 0.65), this.invY - (1/2 * 115 * 0.65), 69 * 0.65, 115 * 0.65);
        }
        else if (this.type == "foxClothingM")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 824, 417, 34, 78, this.invX - (1/2 * 34 * 1), this.invY - (1/2 * 78 * 1), 34 * 1, 78 * 1);
        }
        else if (this.type == "foxClothingF")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 785, 415, 34, 78, this.invX - (1/2 * 34 * 1), this.invY - (1/2 * 78 * 1), 34 * 1, 78 * 1);
        }
        else if (this.type == "thenganHunterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 59, 716, 42, 78, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 78 * 1), 42 * 1, 78 * 1);
        }
        else if (this.type == "thenganArcticClothing")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 13, 720, 43, 80, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 80 * 0.9), 43 * 0.9, 80 * 0.9);
        }
        else if (this.type == "foxFurDress")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 329, 569, 43, 80, this.invX - (1/2 * 43 * 1.55), this.invY - (1/2 * 80 * 1.55), 43 * 1.55, 80 * 1.55);
        }
        else if (this.type == "grizzlyLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 775, 505, 64, 102, this.invX - (1/2 * 64 * 0.8), this.invY - (1/2 * 102 * 0.8), 64 * 0.8, 102 * 0.8);
        }
        else if (this.type == "grizzlyLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 787, 643, 43, 40, this.invX - (1/2 * 43 * 1.1), this.invY - (1/2 * 40 * 1.1), 43 * 1.1, 40 * 1.1);
        }
        else if (this.type == "grizzlyLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 787, 614, 43, 32, this.invX - (1/2 * 43 * 1.15), this.invY - (1/2 * 32 * 1.15), 43 * 1.15, 32 * 1.15);
        }
        else if (this.type == "thenganWorkmansApron")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 774, 359, 64, 102, this.invX - (1/2 * 64 * 0.7), this.invY - (1/2 * 102 * 0.7), 64 * 0.7, 102 * 0.7);
        }
        else if (this.type == "deerHideArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 772, 197, 61, 91, this.invX - (1/2 * 61 * 0.85), this.invY - (1/2 * 91 * 0.85), 61 * 0.85, 91 * 0.85);
        }
        else if (this.type == "stagArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 765, 51, 61, 91, this.invX - (1/2 * 61 * 0.85), this.invY - (1/2 * 91 * 0.85), 61 * 0.85, 91 * 0.85);
        }
        else if (this.type == "badgerFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 706, 41, 56, 91, this.invX - (1/2 * 56 * 0.95), this.invY - (1/2 * 91 * 0.95), 56 * 0.95, 91 * 0.95);
        }
        else if (this.type == "cultistRobes")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 786, 701, 45, 77, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 77 * 1.15), 45 * 1.15, 77 * 1.15);
        }
        else if (this.type == "cultistHighPriestRobes")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 783, 780, 45, 85, this.invX - (1/2 * 45 * 0.95), this.invY - (1/2 * 85 * 0.95), 45 * 0.95, 85 * 0.95);
        }
        else if (this.type == "crowFeather")
        {
            XXX.beginPath();
            XXX.drawImage(leshen, 389, 3, 26, 29, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 29 * 1), 26 * 1, 29 * 1);
        }
        else if (this.type == "sowtFlemGland")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 43, 450, 17, 22, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 22 * 1.2), 17 * 1.2, 22 * 1.2);
        }
        else if (this.type == "skindlerIntestines")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 31, 400, 45, 45, this.invX - (1/2 * 45 * 0.7), this.invY - (1/2 * 45 * 0.7), 45 * 0.7, 45 * 0.7);
        }
        else if (this.type == "deerPelt")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 64, 788, 51, 25, this.invX - (1/2 * 51 * 0.9), this.invY - (1/2 * 25 * 0.9), 51 * 0.9, 25 * 0.9);
        }
        else if (this.type == "deerAntler")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 57, 831, 22, 25, this.invX - (1/2 * 51 * 1), this.invY - (1/2 * 25 * 1), 51 * 1, 25 * 1);
        }
        else if (this.type == "badgerPelt")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 5, 829, 28, 27, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 27 * 1), 28 * 1, 27 * 1);
        }
        else if (this.type == "rawBadgerFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 38, 835, 15, 13, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 13 * 1.2), 15 * 1.2, 13 * 1.2);
        }
        else if (this.type == "badgerMeat")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 38, 849, 15, 13, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 13 * 1.2), 15 * 1.2, 13 * 1.2);
        }
        else if (this.type == "stovolBeetleMandable")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 33, 1177, 43, 20, this.invX - (1/2 * 43 * 0.87), this.invY - (1/2 * 20 * 0.87), 43 * 0.87, 20 * 0.87);
        }
        else if (this.type == "sceptreOfRadiance")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 795, 1077, 37, 56, this.invX - (1/2 * 37 * 0.95), this.invY - (1/2 * 56 * 0.95), 37 * 0.95, 56 * 0.95);
        }
        else if (this.type == "cultistScythe")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 789, 1023, 37, 56, this.invX - (1/2 * 37 * 0.9), this.invY - (1/2 * 56 * 0.9), 37 * 0.9, 56 * 0.9);
        }
        else if (this.type == "longBone")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 771, 969, 37, 56, this.invX - (1/2 * 37 * 0.9), this.invY - (1/2 * 56 * 0.9), 37 * 0.9, 56 * 0.9);
        }
        else if (this.type == "pitchfork")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 786, 886, 41, 72, this.invX - (1/2 * 41 * 0.9), this.invY - (1/2 * 72 * 0.9), 41 * 0.9, 72 * 0.9);
        }
        else if (this.type == "jolleFlower")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 347, 1088, 30, 26, this.invX - (1/2 * 30 * 1.15), this.invY - (1/2 * 26 * 1.15), 30 * 1.15, 26 * 1.15);
        }
        else if (this.type == "kagsHead")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 72, 986, 31, 29, this.invX - (1/2 * 31 * 1.4), this.invY - (1/2 * 29 * 1.4), 31 * 1.4, 29 * 1.4);
        }
        else if (this.type == "raggedGrizzlyPelt")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 138, 912, 55, 37, this.invX - (1/2 * 55 * 1.15), this.invY - (1/2 * 37 * 1.15), 55 * 1.15, 37 * 1.15);
        }
        else if (this.type == "grizzlyBearPeltLarge")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 137, 872, 56, 37, this.invX - (1/2 * 56 * 1.10), this.invY - (1/2 * 37 * 1.10), 56 * 1.10, 37 * 1.10);
        }
        else if (this.type == "grizzlyBearPeltSmall")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 137, 872, 56, 37, this.invX - (1/2 * 56 * 1.05), this.invY - (1/2 * 37 * 1.05), 56 * 1.05, 37 * 1.05);
        }
        else if (this.type == "wendigoHead")
        {
            XXX.beginPath();
            XXX.drawImage(wendi, 784, 2075, 54, 75, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 75 * 1), 54 * 1, 75 * 1);
        }
        else if (this.type == "foxMeat")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 26, 670, 20, 18, this.invX - (1/2 * 20 * 0.9), this.invY - (1/2 * 18 * 0.9), 20 * 0.9, 18 * 0.9);
        }
        else if (this.type == "arcticFoxMeat")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 54, 670, 20, 18, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawArcticFoxFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 53, 647, 20, 18, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawFoxFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 25, 647, 20, 18, this.invX - (1/2 * 20 * 0.9), this.invY - (1/2 * 18 * 0.9), 20 * 0.9, 18 * 0.9);
        }
        else if (this.type == "foxPelt")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 2, 618, 86, 27, this.invX - (1/2 * 86 * 1) + 5, this.invY - (1/2 * 27 * 1), 86 * 1, 27 * 1);
        }
        else if (this.type == "arcticFoxPelt")
        {
            XXX.beginPath();
            XXX.drawImage(bloat, 10, 691, 86, 27, this.invX - (1/2 * 86 * 1) + 5, this.invY - (1/2 * 27 * 1), 86 * 1, 27 * 1);
        }
        else if (this.type == "cursedBoneMeal")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 270, 17, 22, 16, this.invX - (1/2 * 22 * 1.4), this.invY - (1/2 * 16 * 1.4), 22 * 1.4, 16 * 1.4);
        }
        else if (this.type == "corpseGolemHeart")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 214, 14, 29, 31, this.invX - (1/2 * 29 * 1.25), this.invY - (1/2 * 31 * 1.25), 29 * 1.25, 31 * 1.25);
        }
        else if (this.type == "horseArmourRemover")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 587, 35, 12, 16, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 16 * 1), 12 * 1, 16 * 1);
        }
        else if (this.type == "lichRobe")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 47, 675, 93, 127, this.invX - (1/2 * 93 * 0.6), this.invY - (1/2 * 127 * 0.6), 93 * 0.6, 127 * 0.6);
        }
        else if (this.type == "floortrap")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 257, 1, 38, 35, this.invX - (1/2 * 38 * 1.5), this.invY - (1/2 * 35 * 1.5), 38 * 1.5, 35 * 1.5);
        }
        else if (this.type == "firetrap" || this.type == "firetrapEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 212, 88, 17, 19, this.invX - (1/2 * 17 * 1.5), this.invY - (1/2 * 19 * 1.5), 17 * 1.5, 19 * 1.5);
        }
        else if (this.type == "salaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 339, 43, 10, 14, this.invX - (1/2 * 10 * 1.25), this.invY - (1/2 * 14 * 1.25), 10 * 1.25, 14 * 1.25);
        }
        else if (this.type == "heyolBerries")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 367, 20, 10, 14, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 14 * 2), 10 * 2, 14 * 2);
        }
        else if (this.type == "steelHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 209, 1042, 176, 61, this.invX - (1/2 * 176 * 0.5), this.invY - (1/2 * 61 * 0.5), 176 * 0.5, 61 * 0.5);
        }
        else if (this.type == "nechroviteHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 221, 1180, 148, 61, this.invX - (1/2 * 148 * 0.5), this.invY - (1/2 * 61 * 0.5), 148 * 0.5, 61 * 0.5);
        }
        else if (this.type == "krovhyuzkaHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 1319, 410, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "vardanianHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 542, 406, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "blueHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 727, 410, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "altezorHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 915, 406, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "nirwadenHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 1108, 408, 159, 78, this.invX - (1/2 * 159 * 0.5), this.invY - (1/2 * 78 * 0.5), 159 * 0.5, 78 * 0.5);
        }
        else if (this.type == "ghoulHorseArmour")
        {
            XXX.beginPath();
            XXX.drawImage(wart, 31, 851, 196, 75, this.invX - (1/2 * 196 * 0.5) - 3, this.invY - (1/2 * 75 * 0.5), 196 * 0.5, 75 * 0.5);
        }
        else if (this.type == "bovodo")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 846, 436, 20, 19, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 19 * 1.5), 20 * 1.5, 19 * 1.5);
        }
        else if (this.type == "smokedBovodo")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 913, 433, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "bovodoWedge")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 888, 433, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "smokedBovodoWedge")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 957, 431, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "vardanianPieDough")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 934, 451, 22, 20, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 20 * 1.5), 22 * 1.5, 20 * 1.5);
        }
        else if (this.type == "uncookedChyoulBerryPie")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 916, 452, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "chyoulBerryPie")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 898, 453, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "chyoulBerryPieSlice")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 882, 458, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "bovineButter")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 867, 456, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "rawVenison")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 564, 496, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "venison")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 545, 497, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "smokedVenison")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 527, 498, 18, 19, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 19 * 1.5), 18 * 1.5, 19 * 1.5);
        }
        else if (this.type == "elkAntler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 490, 508, 36, 35, this.invX - (1/2 * 36 * 1.5), this.invY - (1/2 * 35 * 1.5), 36 * 1.5, 35 * 1.5);
        }
        else if (this.type == "elkPelt")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 534, 524, 41, 22, this.invX - (1/2 * 41 * 1.5), this.invY - (1/2 * 22 * 1.5), 41 * 1.5, 22 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMushroomStrogonoff")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 443, 583, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBorshtSoup")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 509, 554, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfCabbageSoup")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 510, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfCreamyVenisonStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 578, 554, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineAndPierogiStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 578, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineStrogonoff")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 579, 610, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfTagglerStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 640, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMulstishStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 640, 608, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfToadStew")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 709, 580, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "vardanianBowlOfSlowBraisedKoivaya")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 710, 609, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "rawSkig")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 572, 117, 48, 23, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 23 * 1), 48 * 1, 23 * 1);
        }
        else if (this.type == "skig")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 720, 206, 48, 23, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 23 * 1), 48 * 1, 23 * 1);
        }
        else if (this.type == "rawMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 708, 118, 59, 30, this.invX - (1/2 * 59 * 1), this.invY - (1/2 * 30 * 1), 59 * 1, 30 * 1);
        }
        else if (this.type == "slicedRawMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 708, 188, 27, 20, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "slicedMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 737, 187, 27, 20, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "slicedSmokedMulstish")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 679, 190, 27, 20, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 20 * 1), 27 * 1, 20 * 1);
        }
        else if (this.type == "rawApoi")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 626, 148, 68, 42, this.invX - (1/2 * 68 * 1), this.invY - (1/2 * 42 * 1), 68 * 1, 42 * 1);
        }
        else if (this.type == "apoi")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 730, 161, 29, 21, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 21 * 1), 29 * 1, 21 * 1);
        }
        else if (this.type == "smokedApoi")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 696, 159, 29, 21, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 21 * 1), 29 * 1, 21 * 1);
        }
        else if (this.type == "rawTaggler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 631, 118, 60, 28, this.invX - (1/2 * 60 * 1), this.invY - (1/2 * 28 * 1), 60 * 1, 28 * 1);
        }
        else if (this.type == "taggler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 720, 229, 53, 19, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 19 * 1), 53 * 1, 19 * 1);
        }
        else if (this.type == "smokedTaggler")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 721, 248, 53, 19, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 19 * 1), 53 * 1, 19 * 1);
        }
        else if (this.type == "rawCrilp")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 567, 152, 50, 34, this.invX - (1/2 * 50 * 1), this.invY - (1/2 * 34 * 1), 50 * 1, 34 * 1);
        }
        else if (this.type == "crilp")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 772, 230, 21, 36, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 36 * 1), 21 * 1, 36 * 1);
        }
        else if (this.type == "smokedCrilp")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 775, 193, 21, 36, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 36 * 1), 21 * 1, 36 * 1);
        }
        else if (this.type == "kerPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 613, 489, 68, 108, this.invX - (1/2 * 68 * 0.7), this.invY - (1/2 * 108 * 0.7), 68 * 0.7, 108 * 0.7);
        }
        else if (this.type == "eliteNechrovitePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 422, 485, 65, 115, this.invX - (1/2 * 65 * 0.7), this.invY - (1/2 * 115 * 0.7), 65 * 0.7, 115 * 0.7);
        }
        else if (this.type == "eliteNechrovitePlateArmourPlumed")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 517, 475, 65, 123, this.invX - (1/2 * 65 * 0.65), this.invY - (1/2 * 123 * 0.65), 65 * 0.65, 123 * 0.65);
        }
        else if (this.type == "rawRibbackFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 797, 35, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackMeat")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 843, 34, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackSpinneret")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 900, 31, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "ribbackFangs")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 955, 25, 43, 51, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 51 * 1), 43 * 1, 51 * 1);
        }
        else if (this.type == "fegilPelt")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 14, 981, 30, 10, this.invX - (1/2 * 30 * 1.1), this.invY - (1/2 * 10 * 1.1), 30 * 1.1, 10 * 1.1);
        }
        else if (this.type == "palinsydaTongues")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1, 163, 22, 19, this.invX - (1/2 * 22 * 1.8), this.invY - (1/2 * 19 * 1.8), 22 * 1.8, 19 * 1.8);
        }
        else if (this.type == "palinsydaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1207, 477, 42, 25, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 25 * 1), 42 * 1, 25 * 1);
        }
        else if (this.type == "fegilRegurgitation")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 734, 876, 50, 41, this.invX - (1/2 * 50 * 0.8), this.invY - (1/2 * 41 * 0.8), 50 * 0.8, 41 * 0.8);
        }
        else if (this.type == "mornidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(ribak, 1024, 616, 41, 30, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 30 * 1), 41 * 1, 30 * 1);
        }
        else if (this.type == "borgalLeg")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 6, 593, 63, 24, this.invX - (1/2 * 63 * 0.9), this.invY - (1/2 * 24 *  0.9), 63 *  0.9, 24 *  0.9);
        }
        else if (this.type == "borgalHead")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 32, 447, 31, 27, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 27 * 1.2), 31 * 1.2, 27 * 1.2);
        }
        else if (this.type == "borgalEye")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 21, 570, 22, 20, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 20 * 1), 22 * 1, 20 * 1);
        }
        else if (this.type == "borgalPelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 20, 490, 58, 37, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 37 * 1), 58 * 1, 37 * 1);
        }
        else if (this.type == "rawBorgalFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 10, 626, 15, 12, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 12 * 1), 15 * 1, 12 * 1);
        }
        else if (this.type == "borgalMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 28, 626, 15, 12, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 12 * 1), 15 * 1, 12 * 1);
        }
        else if (this.type == "cirmusidicCompound")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 649, 93, 33, 25, this.invX - (1/2 * 33 * 0.85), this.invY - (1/2 * 25 * 0.85), 33 * 0.85, 25 * 0.85);
        }
        else if (this.type == "throwingStar")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 207, 402, 9, 9, this.invX - (1/2 * 9 * 1.4), this.invY - (1/2 * 9 * 1.4), 9 * 1.4, 9 * 1.4);
        }
        else if (this.type == "vardanianThrowingSpear")
        {
            XXX.beginPath();
            XXX.drawImage(mimi, 358, 324, 47, 90, this.invX - (1/2 * 47 * 0.8), this.invY - (1/2 * 90 * 0.8), 47 * 0.8, 90 * 0.8);
        }
        else if (this.type == "mustard")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 840, 115, 14, 13, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 13 * 1), 14 * 1, 13 * 1);
        }
        else if (this.type == "sauerkraut")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 838, 95, 20, 18, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 18 * 1), 20 * 1, 18 * 1);
        }
        else if (this.type == "rawHoffalgreSausageChain")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 869, 87, 54, 44, this.invX - (1/2 * 54 * 1), this.invY - (1/2 * 44 * 1), 54 * 1, 44 * 1);
        }
        else if (this.type == "hoffalgreRoast")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 921, 11, 70, 45, this.invX - (1/2 * 70 * 1), this.invY - (1/2 * 45 * 1), 70 * 1, 45 * 1);
        }
        else if (this.type == "rawGulb")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 467, 14, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "gulbFillet")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 539, 15, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawHob")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 465, 68, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "hob")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 535, 66, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawTilmuk")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 328, 64, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "tilmuk")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 386, 64, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "palggaFlowers")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 250, 14, 64, 31, this.invX - (1/2 * 64 * 1), this.invY - (1/2 * 31 * 1), 64 * 1, 31 * 1);
        }
        else if (this.type == "rawCres")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 620, 15, 65, 30, this.invX - (1/2 * 65 * 1), this.invY - (1/2 * 30 * 1), 65 * 1, 30 * 1);
        }
        else if (this.type == "cresFillet")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 687, 16, 65, 30, this.invX - (1/2 * 65 * 1), this.invY - (1/2 * 30 * 1), 65 * 1, 30 * 1);
        }
        else if (this.type == "desertPoppySeedMash")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 512, 151, 47, 30, this.invX - (1/2 * 47 * 1), this.invY - (1/2 * 30 * 1), 47 * 1, 30 * 1);
        }
        else if (this.type == "opium")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 598, 152, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "gulbPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 870, 133, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "sausageAndGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 954, 135, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "cresAndGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 914, 132, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "rawHoffalgreSausage")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 841, 58, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "hoffalgreSausage")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 882, 58, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "sausageCombo")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 925, 61, 42, 30, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 30 * 1), 42 * 1, 30 * 1);
        }
        else if (this.type == "hetlaukWormPlatter")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 842, 135, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardSeeds")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 810, 155, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardSeedPods")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 780, 155, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "mustardGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 744, 181, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "wiltedMustardGreens")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 773, 181, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "hetlaukWorm")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 889, 18, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "rawHetlaukWorm" || this.type == "sewerHetlaukWorm")
        {
            if (this.turn <= 2)
            {
                XXX.drawImage(floras, 852, 16, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else if (this.turn <= 4)
            {
                XXX.drawImage(floras, 808, 14, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else if (this.turn <= 6)
            {
                XXX.drawImage(floras, 764, 16, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
            }
            else
            {
                XXX.drawImage(floras, 808, 14, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
                this.turn = 0;
            }
            this.turn += 0.4;
        }
        else if (this.type == "desertPoppyFlower")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 967, 401, 29, 30, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 30 * 1), 29 * 1, 30 * 1);
        }
        else if (this.type == "desertPoppyPods")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 966, 438, 29, 31, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 31 * 1), 29 * 1, 31 * 1);
        }
        else if (this.type == "falloryFlower")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 268, 63, 29, 36, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 36 * 1), 29 * 1, 36 * 1);
        }
        else if (this.type == "marigoldFlower")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 403, 141, 28, 44, this.invX - (1/2 * 28 * 0.6), this.invY - (1/2 * 44 * 0.6), 28 * 0.6, 44 * 0.6);
        }
        else if (this.type == "bleedingHeartBranch")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 651, 147, 37, 40, this.invX - (1/2 * 37 * 0.8), this.invY - (1/2 * 40 * 0.8), 37 * 0.8, 40 * 0.8);
        }
        else if (this.type == "aberdomMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 882, 174, 18, 18, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 18 * 1), 18 * 1, 18 * 1);
        }
        else if (this.type == "beunumMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 974, 235, 18, 22, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 22 * 0.8), 18 * 0.8, 22 * 0.8);
        }
        else if (this.type == "ciprinMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 973, 202, 22, 31, this.invX - (1/2 * 22 * 0.7), this.invY - (1/2 * 31 * 0.7), 22 * 0.7, 31 * 0.7);
        }
        else if (this.type == "thorn")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 338, 12, 112, 33, this.invX - (1/2 * 112 * 0.7), this.invY - (1/2 * 33 * 0.7), 112 * 0.7, 33 * 0.7);
        }
        else if (this.type == "alitkaArmour")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 783, 57, 43, 86, this.invX - (1/2 * 43 * 0.95), this.invY - (1/2 * 86 * 0.95), 43 * 0.95, 86 * 0.95);
        }
        else if (this.type == "thenganBascinetArmour")
        {
            XXX.beginPath();
            XXX.drawImage(floras, 728, 57, 43, 86, this.invX - (1/2 * 43 * 0.95), this.invY - (1/2 * 86 * 0.95), 43 * 0.95, 86 * 0.95);
        }
        else if (this.type == "hydraHead")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 20, 361, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "hydraHeart")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 104, 364, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "roastedHydraHeart")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 66, 363, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "smokedHydraHeart")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 143, 364, 45, 34, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 34 * 1), 45 * 1, 34 * 1);
        }
        else if (this.type == "wheat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 518, 303, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatFlour")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 491, 302, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatDough")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 495, 274, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "wheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 521, 277, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "butteredWheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 466, 289, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "velWheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 438, 288, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "borshtWheatBread")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 411, 288, 25, 24, this.invX - (1/2 * 25 * 1.5), this.invY - (1/2 * 24 * 1.5), 25 * 1.5, 24 * 1.5);
        }
        else if (this.type == "apple")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 5, 542, 18, 20, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 20 * 1), 18 * 1, 20 * 1);
        }
        else if (this.type == "glassBottleOfGin")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 301, 373, 8, 19, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 19 * 2), 8 * 2, 19 * 2);
        }
        else if (this.type == "glassBottleOfCider")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 290, 403, 8, 19, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 19 * 2), 8 * 2, 19 * 2);
        }
        else if (this.type == "wheatBeer")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 280, 370, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "gin")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 267, 370, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "cider")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 267, 370, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "juniperBerries")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 251, 371, 13, 12, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 12 * 1), 13 * 1, 12 * 1);
        }
        else if (this.type == "serratedNechroviteGreatBlade")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 353, 140, 95, 25, this.invX - (1/2 * 95 * 0.85) + 2, this.invY - (1/2 * 25 * 0.85), 95 * 0.85, 25 * 0.85);
        }
        else if (this.type == "vardanSword")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 265, 113, 66, 20, this.invX - (1/2 * 66 * 1), this.invY - (1/2 * 20 * 1), 66 * 1, 20 * 1);
        }
        else if (this.type == "vardanGreatSword")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 258, 157, 97, 22, this.invX - (1/2 * 97 * 0.85), this.invY - (1/2 * 22 * 0.85), 97 * 0.85, 22 * 0.85);
        }
        else if (this.type == "vardanDagger")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 451, 140, 43, 16, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 16 * 1), 43 * 1, 16 * 1);
        }
        else if (this.type == "silverDagger")
        {
            XXX.beginPath();
            XXX.drawImage(folw, 127, 244, 21, 44, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 44 * 1), 21 * 1, 44 * 1);
        }
        else if (this.type == "shortSword")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 493, 9, 58, 57, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 57 * 1), 58 * 1, 57 * 1);
        }
        else if (this.type == "zetianWarPick")
        {
            XXX.beginPath();
            XXX.drawImage(ion, 1550, 706, 48, 44, this.invX - (1/2 * 48 * 1), this.invY - (1/2 * 44 * 1), 48 * 1, 44 * 1);
        }
        else if (this.type == "zetianBlowgun")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 446, 90, 74, 50, this.invX - (1/2 * 74 * 1), this.invY - (1/2 * 50 * 1), 74 * 1, 50 * 1);
        }
        else if (this.type == "zetianBlowdart")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 525, 114, 12, 27, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 27 * 1), 12 * 1, 27 * 1);
        }
        else if (this.type == "zetianRattlerBlowdart" || this.type == "zetianRattlerBlowdartThick")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 542, 114, 12, 27, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 27 * 1), 12 * 1, 27 * 1);
        }
        else if (this.type == "longHammer")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 540, 203, 44, 83, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 83 * 1), 44 * 1, 83 * 1);
        }
        else if (this.type == "cephrianFlail")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 532, 301, 47, 38, this.invX - (1/2 * 47 * 1), this.invY - (1/2 * 38 * 1), 47 * 1, 38 * 1);
        }
        else if (this.type == "masterKey" || this.type == "holuimBankKey")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 760, 12, 22, 23, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 23 * 1), 22 * 1, 23 * 1);
        }
        else if (this.type == "masterKeyring")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 755, 31, 33, 39, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 39 * 1), 33 * 1, 39 * 1);
        }
        else if (this.type == "lockpick")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 0, 30, 17, 29, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 29 * 1), 17 * 1, 29 * 1);
        }
        else if (this.type == "brokenLockpick")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 0, 60, 24, 29, this.invX - (1/2 * 24 * 1), this.invY - (1/2 * 29 * 1), 24 * 1, 29 * 1);
        }
        else if (this.type == "garldsMemories" || this.type == "memory")
        {
            this.turn += 1;
            if (this.turn <= 3)
            {
                XXX.drawImage(cypher, 764, 184, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 6)
            {
                XXX.drawImage(cypher, 764, 197, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 9)
            {
                XXX.drawImage(cypher, 764, 210, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 12)
            {
                XXX.drawImage(cypher, 764, 224, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else if (this.turn <= 15)
            {
                XXX.drawImage(cypher, 764, 237, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
            else
            {
                this.turn = 0;
                XXX.drawImage(cypher, 764, 210, 13, 14, this.invX - (1/2 * 13 * 1), this.invY - (1/2 * 14 * 1), 13 * 1, 14 * 1);
            }
        }
        else if (this.type == "magusRobesF")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 278, 628, 73, 133, this.invX - (1/2 * 73 * 0.5), this.invY - (1/2 * 133 * 0.5), 73 * 0.5, 133 * 0.5);
        }
        else if (this.type == "magusRobesM")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 739, 863, 60, 133, this.invX - (1/2 * 60 * 0.5), this.invY - (1/2 * 133 * 0.5), 60 * 0.5, 133 * 0.5);
        }
        else if (this.type == "greatPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 315, 192, 59, 118, this.invX - (1/2 * 59 * 0.63), this.invY - (1/2 * 118 * 0.63), 59 * 0.63, 118 * 0.63);
        }
        else if (this.type == "wolthgarPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(cypher, 464, 176, 65, 135, this.invX - (1/2 * 65 * 0.55), this.invY - (1/2 * 135 * 0.55), 65 * 0.55, 135 * 0.55);
        }
        else if (this.type == "mimicHead")
        {
            XXX.beginPath();
            XXX.drawImage(mimi, 219, 309, 47, 41, this.invX - (1/2 * 47 * 0.6), this.invY - (1/2 * 41 * 0.6), 47 * 0.6, 41 * 0.6);
        }
        else if (this.type == "mimicFilament")
        {
            XXX.beginPath();
            XXX.drawImage(mimi, 261, 311, 41, 41, this.invX - (1/2 * 41 * 0.6), this.invY - (1/2 * 41 * 0.6), 41 * 0.6, 41 * 0.6);
        }
        else if (this.type == "vreckFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 59, 835, 52, 101, this.invX - (1/2 * 52 * 0.7), this.invY - (1/2 * 101 * 0.7), 52 * 0.7, 101 * 0.7);
        }
        else if (this.type == "ghoulMercArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 933, 209, 55, 101, this.invX - (1/2 * 55 * 0.77), this.invY - (1/2 * 101 * 0.77), 55 * 0.77, 101 * 0.77);
        }
        else if (this.type == "laicaumBranch")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 929, 55, 37, 34, this.invX - (1/2 * 37 * 0.8), this.invY - (1/2 * 34 * 0.8), 37 * 0.8, 34 * 0.8);
        }
        else if (this.type == "laicaumBerries")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 898, 66, 26, 21, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 21 * 1), 26 * 1, 21 * 1);
        }
        else if (this.type == "vardanianTent")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1046, 109, 38, 31, this.invX - (1/2 * 38 * 1.4), this.invY - (1/2 * 31 * 1.4), 38 * 1.4, 31 * 1.4);
        }
        else if (this.type == "mekleFrond")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 958, 6, 59, 47, this.invX - (1/2 * 59 * 0.25), this.invY - (1/2 * 47 * 0.25), 59 * 0.25, 47 * 0.25);
        }
        else if (this.type == "danzigFrond")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 764, 163, 33, 32, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 32 * 1), 33 * 1, 32 * 1);
        }
        else if (this.type == "rawVreckFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1021, 352, 30, 26, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckMeat")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1055, 352, 30, 26, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckTail")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1053, 273, 30, 26, this.invX - (1/2 * 30 * 1), this.invY - (1/2 * 26 * 1), 30 * 1, 26 * 1);
        }
        else if (this.type == "vreckPelt")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1040, 308, 49, 30, this.invX - (1/2 * 49 * 0.75), this.invY - (1/2 * 30 * 0.75), 49 * 0.75, 30 * 0.75);
        }
        else if (this.type == "nechroviteOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1591, 525, 27, 32, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 32 * 1), 27 * 1, 32 * 1);
        }
        else if (this.type == "nechrovite")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1492, 563, 33, 18, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 18 * 1), 33 * 1, 18 * 1);
        }
        else if (this.type == "fineVardanianPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 72, 249, 49, 98, this.invX - (1/2 * 49 * 0.81), this.invY - (1/2 * 98 * 0.81), 49 * 0.81, 98 * 0.81);
        }
        else if (this.type == "fineNechrovitePlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 135, 249, 49, 98, this.invX - (1/2 * 49 * 0.81), this.invY - (1/2 * 98 * 0.81), 49 * 0.81, 98 * 0.81);
        }
        else if (this.type == "mesekScalp")
        {
            XXX.beginPath();
            XXX.fillStyle = "#BF0000";
            XXX.strokeStyle = "#901900";
            XXX.arc(this.invX, this.invY, 10, 0, Math.PI * 2);
            XXX.fill();
            XXX.stroke();
        }
        else if (this.type == "korskBeetleStinkGland")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 311, 4, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "rawKorskBeetleFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 237, 5, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "korskBeetleMeat")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 275, 5, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "silterEggs")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 550, 277, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "friedSilterEggs")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 549, 245, 38, 33, this.invX - (1/2 * 38 * 1), this.invY - (1/2 * 33 * 1), 38 * 1, 33 * 1);
        }
        else if (this.type == "korceidaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 239, 91, 31, 30, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "korceidaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 275, 90, 31, 30, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "laumin")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 313, 91, 31, 30, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 30 * 1), 31 * 1, 30 * 1);
        }
        else if (this.type == "xormidRemainsLarge")
        {
            XXX.beginPath();
            XXX.drawImage(blac, 279, 11, 41, 36, this.invX - (1/2 * 41 * 1.1), this.invY - (1/2 * 36 * 1.1), 41 * 1.1, 36 * 1.1);
        }
        else if (this.type == "xormidRemainsSmall")
        {
            XXX.beginPath();
            XXX.drawImage(blac, 279, 11, 41, 36, this.invX - (1/2 * 41 * 0.8), this.invY - (1/2 * 36 * 0.8), 41 * 0.8, 36 * 0.8);
        }
        else if (this.type == "rawSilterFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 313, 139, 23, 18, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 18 * 1), 23 * 1, 18 * 1);
        }
        else if (this.type == "silterMeat")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 314, 163, 23, 18, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 18 * 1), 23 * 1, 18 * 1);
        }
        else if (this.type == "sciltArm")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 241, 182, 58, 35, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 35 * 1), 58 * 1, 35 * 1);
        }
        else if (this.type == "eyewortLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 555, 474, 25, 24, this.invX - (1/2 * 25 * 1.4), this.invY - (1/2 * 24 * 1.4), 25 * 1.4, 24 * 1.4);
        }
        else if (this.type == "eyewortStalk")
        {
            XXX.beginPath();
            XXX.drawImage(beets, 557, 338, 21, 30, this.invX - (1/2 * 21 * 1.4), this.invY - (1/2 * 30 * 1.4), 21 * 1.4, 30 * 1.4);
        }
        else if (this.type == "brightStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1729, 525, 36, 29, this.invX - (1/2 * 36 * 1), this.invY - (1/2 * 29 * 1), 36 * 1, 29 * 1);
        }
        else if (this.type == "alemanWWI")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1023, 804, 56, 140, this.invX - (1/2 * 56 * 0.55), this.invY - (1/2 * 140 * 0.55), 56 * 0.55, 140 * 0.55);
        }
        else if (this.type == "hazmatMarkI")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 210, 812, 60, 132, this.invX - (1/2 * 60 * 0.6), this.invY - (1/2 * 132 * 0.6), 60 * 0.6, 132 * 0.6);
        }
        else if (this.type == "hazmatMarkII")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 270, 812, 60, 132, this.invX - (1/2 * 60 * 0.6), this.invY - (1/2 * 132 * 0.6), 60 * 0.6, 132 * 0.6);
        }
        else if (this.type == "ghoulPelt")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1006, 148, 78, 50, this.invX - (1/2 * 78 * 1), this.invY - (1/2 * 50 * 1), 78 * 1, 50 * 1);
        }
        else if (this.type == "rawGhoulFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 964, 161, 28, 26, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 26 * 1), 28 * 1, 26 * 1);
        }
        else if (this.type == "ghoulMeat")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 920, 161, 33, 26, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 26 * 1), 33 * 1, 26 * 1);
        }
        else if (this.type == "kozlyakMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 411, 559, 18, 16, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 16 * 1), 18 * 1, 16 * 1);
        }
        else if (this.type == "rawMudToad")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 945, 55, 44, 31, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "mudToad")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 941, 100, 44, 31, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "mudToadLeg")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 903, 102, 44, 31, this.invX - (1/2 * 44 * 1), this.invY - (1/2 * 31 * 1), 44 * 1, 31 * 1);
        }
        else if (this.type == "jinnDust")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 735, 595, 55, 67, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 67 * 1), 55 * 1, 67 * 1);
        }
        else if (this.type == "jinnCore")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 740, 483, 55, 67, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 67 * 1), 55 * 1, 67 * 1);
        }
        else if (this.type == "beholderTentacles")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 737, 550, 55, 39, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 39 * 1), 55 * 1, 39 * 1);
        }
        else if (this.type == "tinctureCup")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1080, 407, 12, 15, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 15 * 1), 12 * 1, 15 * 1);
        }
        else if (this.type == "cupOfFungicideTincture")
        {
            XXX.beginPath();
            XXX.drawImage(gul, 1080, 407, 12, 15, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 15 * 1), 12 * 1, 15 * 1);
        }
        else if (this.type == "cephrianTincturePot" || this.type == "cephrianTincturePotOfFungicideTincture" || this.type == "capturedJinn")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 595, 143, 42, 21, this.invX - (1/2 * 42 * 1), this.invY - (1/2 * 21 * 1), 42 * 1, 21 * 1);
        }
        else if (this.type == "humptyChalaza")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 657, 423, 41, 41, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 41 * 1), 41 * 1, 41 * 1);
        }
        else if (this.type == "crilkFruit")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 773, 786, 15, 15, this.invX - (1/2 * 15 * 1), this.invY - (1/2 * 15 * 1), 15 * 1, 15 * 1);
        }
        else if (this.type == "pyromothSilk")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 4, 401, 19, 38, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 38 * 1), 19 * 1, 38 * 1);
        }
        else if (this.type == "pyromothSilkweb")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 649, 582, 37, 28, this.invX - (1/2 * 37 * 0.64), this.invY - (1/2 * 28 * 0.64), 37 * 0.64, 28 * 0.64);
        }
        else if (this.type == "fermentedBabosaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 346, 289, 28, 21, this.invX - (1/2 * 28 * 1.55), this.invY - (1/2 * 21 * 1.55), 28 * 1.55, 21 * 1.55);
        }
        else if (this.type == "babosaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 346, 240, 28, 21, this.invX - (1/2 * 28 * 1.45), this.invY - (1/2 * 21 * 1.45), 28 * 1.45, 21 * 1.45);
        }
        else if (this.type == "rawBabosaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 346, 222, 28, 21, this.invX - (1/2 * 28 * 1.5), this.invY - (1/2 * 21 * 1.5), 28 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonja")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 658, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 687, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaBubble")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 708, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "sonjaSlice")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 726, 1116, 20, 21, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 21 * 1.5), 20 * 1.5, 21 * 1.5);
        }
        else if (this.type == "greenDartFrogSkin")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 766, 1100, 21, 15, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 15 * 1), 21 * 1, 15 * 1);
        }
        else if (this.type == "orangeDartFrogSkin")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 745, 1116, 21, 15, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 15 * 1), 21 * 1, 15 * 1);
        }
        else if (this.type == "rawBoaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 28, 1251, 67, 33, this.invX - (1/2 * 67 * 1), this.invY - (1/2 * 33 * 1), 67 * 1, 33 * 1);
        }
        else if (this.type == "boaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 28, 1289, 67, 33, this.invX - (1/2 * 67 * 1), this.invY - (1/2 * 33 * 1), 67 * 1, 33 * 1);
        }
        else if (this.type == "driedPoegroonMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 476, 698, 55, 52, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 52 * 1), 55 * 1, 52 * 1);
        }
        else if (this.type == "poegroonMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 475, 748, 55, 52, this.invX - (1/2 * 55 * 1), this.invY - (1/2 * 52 * 1), 55 * 1, 52 * 1);
        }
        else if (this.type == "maleotMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 624, 714, 42, 42, this.invX - (1/2 * 42 * 1.2), this.invY - (1/2 * 42 * 1.2), 42 * 1.2, 42 * 1.2);
        }
        else if (this.type == "driedMaleotMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 623, 753, 42, 42, this.invX - (1/2 * 42 * 1.2), this.invY - (1/2 * 42 * 1.2), 42 * 1.2, 42 * 1.2);
        }
        else if (this.type == "iodFungi")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 330, 719, 58, 60, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 60 * 1), 58 * 1, 60 * 1);
        }
        else if (this.type == "fermentedIod")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 272, 721, 58, 60, this.invX - (1/2 * 58 * 1), this.invY - (1/2 * 60 * 1), 58 * 1, 60 * 1);
        }
        else if (this.type == "gribnoyMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 768, 724, 25, 24, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 24 * 1), 25 * 1, 24 * 1);
        }
        else if (this.type == "roastedGribnoyMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 794, 725, 25, 24, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 24 * 1), 25 * 1, 24 * 1);
        }
        else if (this.type == "ashaiPowder")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 13, 656, 32, 33, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 33 * 1), 32 * 1, 33 * 1);
        }
        else if (this.type == "ashai")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 9, 764, 32, 33, this.invX - (1/2 * 32 * 2), this.invY - (1/2 * 33 * 2), 32 * 2, 33 * 2);
        }
        else if (this.type == "ashaiWood")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 15, 733, 23, 22, this.invX - (1/2 * 23 * 2), this.invY - (1/2 * 22 * 2), 23 * 2, 22 * 2);
        }
        else if (this.type == "porstolBerries")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 602, 231, 14, 11, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 11 * 1), 14 * 1, 11 * 1);
        }
        else if (this.type == "decipulaHead")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 760, 585, 40, 43, this.invX - (1/2 * 40 * 0.9), this.invY - (1/2 * 43 * 0.9), 40 * 0.9, 43 * 0.9);
        }
        else if (this.type == "athergmMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 442, 1, 22, 17, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 17 * 1), 22 * 1, 17 * 1);
        }
        else if (this.type == "driedAthergmMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 469, 0, 22, 17, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 17 * 1), 22 * 1, 17 * 1);
        }
        else if (this.type == "crenidRemains")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 223, 5, 36, 31, this.invX - (1/2 * 36 * 0.6), this.invY - (1/2 * 31 * 0.6), 36 * 0.6, 31 * 0.6);
        }
        else if (this.type == "kigariiPelt")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 445, 17, 52, 26, this.invX - (1/2 * 52 * 1.2), this.invY - (1/2 * 26 * 1.2), 52 * 1.2, 26 * 1.2);
        }
        else if (this.type == "rawKigariiFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 362, 56, 26, 28, this.invX - (1/2 * 26 * 1.3), this.invY - (1/2 * 28 * 1.3), 26 * 1.3, 28 * 1.3);
        }
        else if (this.type == "kigariiRibs")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 388, 56, 26, 28, this.invX - (1/2 * 26 * 1.3), this.invY - (1/2 * 28 * 1.3), 26 * 1.3, 28 * 1.3);
        }
        else if (this.type == "jungleHunterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 604, 1061, 47, 92, this.invX - (1/2 * 47 * 0.75), this.invY - (1/2 * 92 * 0.75), 47 * 0.75, 92 * 0.75);
        }
        else if (this.type == "morshPuff")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 935, 824, 26, 25, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 25 * 1), 26 * 1, 25 * 1);
        }
        else if (this.type == "dalgerEgg")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 115, 113, 21, 23, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 23 * 1), 21 * 1, 23 * 1);
        }
        else if (this.type == "cookedDalgerEgg")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 120, 78, 33, 29, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "rawDalgerFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 101, 299, 33, 29, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "dalgerMeat")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 102, 326, 33, 29, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 29 * 1), 33 * 1, 29 * 1);
        }
        else if (this.type == "dalgerHide")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 38, 785, 115, 46, this.invX - (1/2 * 115 * 0.75), this.invY - (1/2 * 46 * 0.75), 115 * 0.75, 46 * 0.75);
        }
        else if (this.type == "blackTrollPelt")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 937, 20, 43, 36, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 36 * 1), 43 * 1, 36 * 1);
        }
        else if (this.type == "blackTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 938, 96, 43, 36, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 36 * 1), 43 * 1, 36 * 1);
        }
        else if (this.type == "cruorccaNeedle")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 948, 874, 8, 4, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 4 * 2), 8 * 2, 4 * 2);
        }
        else if (this.type == "gorgonTail")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 787, 5, 36, 46, this.invX - (1/2 * 36 * 0.9), this.invY - (1/2 * 46 * 0.9), 36 * 0.9, 46 * 0.9);
        }
        else if (this.type == "gorgonLeg")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 837, 13, 80, 110, this.invX - (1/2 * 80 * 0.4), this.invY - (1/2 * 110 * 0.4), 80 * 0.4, 110 * 0.4);
        }
        else if (this.type == "rawGorgonFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 376, 292, 12, 13, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 14 * 1), 25 * 1, 14 * 1);
        }
        else if (this.type == "gorgonMeat")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 139, 109, 26, 28, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 14 * 1), 25 * 1, 14 * 1);
        }
        else if (this.type == "bahabLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 436, 733, 27, 30, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 30 * 1), 27 * 1, 30 * 1);
        }
        else if (this.type == "bahabPod")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 465, 737, 21, 30, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 30 * 1), 21 * 1, 30 * 1);
        }
        else if (this.type == "driedBahabPod")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 415, 734, 21, 30, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 30 * 1), 21 * 1, 30 * 1);
        }
        else if (this.type == "gojiiFlower")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 335, 753, 21, 25, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 25 * 1), 21 * 1, 25 * 1);
        }
        else if (this.type == "cerebrisMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 211, 678, 32, 34, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 34 * 1), 32 * 1, 34 * 1);
        }
        else if (this.type == "vardanianCoatOfPlates")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 544, 8, 103, 209, this.invX - (1/2 * 103 * 0.35), this.invY - (1/2 * 209 * 0.35), 103 * 0.35, 209 * 0.35);
        }
        else if (this.type == "vardanianAketon")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 654, 12, 105, 143, this.invX - (1/2 * 105 * 0.5), this.invY - (1/2 * 143 * 0.5), 105 * 0.5, 143 * 0.5);
        }
        else if (this.type == "vardanianSoldierOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 638, 151, 49, 104, this.invX - (1/2 * 49 * 0.75), this.invY - (1/2 * 104 * 0.75), 49 * 0.75, 104 * 0.75);
        }
        else if (this.type == "orgishEliteArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 238, 11, 105, 207, this.invX - (1/2 * 105 * 0.35), this.invY - (1/2 * 207 * 0.35), 105 * 0.35, 207 * 0.35);
        }
        else if (this.type == "orgishRoyalArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 394, 2, 104, 214, this.invX - (1/2 * 104 * 0.35), this.invY - (1/2 * 214 * 0.35), 104 * 0.35, 214 * 0.35);
        }
        else if (this.type == "araneaFang")
        {
            XXX.beginPath();
            XXX.drawImage(jungho, 19, 448, 19, 9, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 9 * 1), 19 * 1, 9 * 1);
        }
        else if (this.type == "viudaFang")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 389, 297, 12, 6, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 6 * 1), 12 * 1, 6 * 1);
        }
        else if (this.type == "viudaVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(stic, 376, 292, 12, 13, this.invX - (1/2 * 12 * 1), this.invY - (1/2 * 13 * 1), 12 * 1, 13 * 1);
        }
        else if (this.type == "boreaLeg")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 2470, 11, 43, 55, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 55 * 1), 43 * 1, 55 * 1);
        }
        else if (this.type == "saliseaVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 417, 1287, 17, 20, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 20 * 1), 17 * 1, 20 * 1);
        }
        else if (this.type == "saliseaFur")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 406, 1263, 40, 25, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 25 * 1), 40 * 1, 25 * 1);
        }
        else if (this.type == "saliseaLeather" || this.type == "treatedSaliseaHide")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 406, 1308, 40, 25, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 25 * 1), 40 * 1, 25 * 1);
        }
        else if (this.type == "zafBeetleWhiskers")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 571, 976, 25, 23, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 23 * 1), 25 * 1, 23 * 1);
        }
        else if (this.type == "zafBeetleFeeler")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 572, 1002, 23, 36, this.invX - (1/2 * 23 * 1), this.invY - (1/2 * 36 * 1), 23 * 1, 36 * 1);
        }
        else if (this.type == "zafBeetleShell")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 490, 985, 75, 38, this.invX - (1/2 * 75 * 1), this.invY - (1/2 * 38 * 1), 75 * 1, 38 * 1);
        }
        else if (this.type == "vardanianPriestRobes")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 19, 77, 59, 111, this.invX - (1/2 * 59 * 0.7), this.invY - (1/2 * 111 * 0.7), 59 * 0.7, 111 * 0.7);
        }
        else if (this.type == "saugRoot")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 414, 6, 45, 16, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 16 * 1.15), 45 * 1.15, 16 * 1.15);
        }
        else if (this.type == "roastedSaugRoot")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 490, 6, 45, 16, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 16 * 1.15), 45 * 1.15, 16 * 1.15);
        }
        else if (this.type == "roastedSaugRootHalf")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 529, 5, 45, 16, this.invX - (1/2 * 45 * 1.15), this.invY - (1/2 * 16 * 1.15), 45 * 1.15, 16 * 1.15);
        }
        else if (this.type == "koivayaPelt")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 298, 285, 41, 33, this.invX - (1/2 * 41 * 1.1), this.invY - (1/2 * 33 * 1.1), 41 * 1.1, 33 * 1.1);
        }
        else if (this.type == "rawKoivayaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 352, 293, 20, 21, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 21 * 1.1), 20 * 1.1, 21 * 1.1);
        }
        else if (this.type == "koivayaMeat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 384, 292, 20, 21, this.invX - (1/2 * 20 * 1.1), this.invY - (1/2 * 21 * 1.1), 20 * 1.1, 21 * 1.1);
        }
        else if (this.type == "toadHide")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 469, 828, 67, 69, this.invX - (1/2 * 67 * 0.8), this.invY - (1/2 * 69 * 0.8), 67 * 0.8, 69 * 0.8);
        }
        else if (this.type == "rawToadFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 781, 582, 26, 26, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "toadMeat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 816, 583, 26, 26, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "smokedToadMeat")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 780, 607, 26, 26, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 26 * 1), 26 * 1, 26 * 1);
        }
        else if (this.type == "vardanianRoyalAttireM")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 102, 81, 65, 113, this.invX - (1/2 * 65 * 0.7), this.invY - (1/2 * 113 * 0.7), 65 * 0.7, 113 * 0.7);
        }
        else if (this.type == "vardanianRoyalAttireF")
        {
            XXX.beginPath();
            XXX.drawImage(tribe, 219, 65, 76, 125, this.invX - (1/2 * 76 * 0.45), this.invY - (1/2 * 125 * 0.45), 76 * 0.45, 125 * 0.45);
        }
        else if (this.type == "vardanianCrossbow")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 301, 624, 25, 26, this.invX - (1/2 * 25 * 1.1), this.invY - (1/2 * 26 * 1.1), 25 * 1.1, 26 * 1.1);
        }
        else if (this.type == "ironBolt")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 291, 612, 31, 9, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 9 * 1), 31 * 1, 9 * 1);
        }
        else if (this.type == "bovineMammaryGlands")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 368, 518, 26, 23, this.invX - (1/2 * 26 * 0.9), this.invY - (1/2 * 23 * 0.9), 26 * 0.9, 23 * 0.9);
        }
        else if (this.type == "rawBovineRibs")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 462, 519, 26, 23, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "smokedBovineRibs")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 402, 520, 26, 23, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "bovineRibs")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 432, 520, 26, 23, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 23 * 1.7), 26 * 1.7, 23 * 1.7);
        }
        else if (this.type == "bovineHide" || this.type == "treatedBovineHide")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 464, 164, 36, 26, this.invX - (1/2 * 36 * 1.8), this.invY - (1/2 * 26 * 1.8), 36 * 1.8, 26 * 1.8);
        }
        else if (this.type == "tannedBovineHide")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 512, 163, 36, 26, this.invX - (1/2 * 36 * 1.7), this.invY - (1/2 * 26 * 1.7), 36 * 1.7, 26 * 1.7);
        }
        else if (this.type == "borsht")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 46, 91, 48, 50, this.invX - (1/2 * 48 * 1.4), this.invY - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "roastedBorsht")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 88, 91, 48, 50, this.invX - (1/2 * 48 * 1.4), this.invY - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "slicedBorsht")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 125, 93, 48, 50, this.invX - (1/2 * 48 * 1.4), this.invY - (1/2 * 50 * 1.4), 48 * 1.4, 50 * 1.4);
        }
        else if (this.type == "swampLily")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 7, 134, 48, 50, this.invX - (1/2 * 48 * 1.2), this.invY - (1/2 * 50 * 1.2), 48 * 1.2, 50 * 1.2);
        }
        else if (this.type == "cattail")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 57, 48, 33, 43, this.invX - (1/2 * 33 * 1.25), this.invY - (1/2 * 43 * 1.25), 33 * 1.25, 43 * 1.25);
        }
        else if (this.type == "cabbage")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 81, 11, 14, 14, this.invX - (1/2 * 14 * 1.5), this.invY - (1/2 * 14 * 1.5), 14 * 1.5, 14 * 1.5);
        }
        else if (this.type == "soakedMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 812, 201, 24, 44, this.invX - (1/2 * 24 * 1.3), this.invY - (1/2 * 44 * 1.3), 24 * 1.3, 44 * 1.3);
        }
        else if (this.type == "theBloodyChalice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 80, 524, 15, 32, this.invX - (1/2 * 15 * 1.5), this.invY - (1/2 * 32 * 1.5), 15 * 1.5, 32 * 1.5);
        }
        else if (this.type == "bloodyChalice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 58, 524, 15, 32, this.invX - (1/2 * 15 * 1.5), this.invY - (1/2 * 32 * 1.5), 15 * 1.5, 32 * 1.5);
        }
        else if (this.type == "vardanianPot" || this.type == "vardanianPotOfWater" || this.type == "vardanianPotOfBovineMilk" || this.type == "vardanianPotOfWaantiMilk" || this.type == "vardanianPotOfNaapridMilk" || this.type == "vardanianPotOfSourCream" || this.type == "vardanianPotOfMandrake" || this.type == "vardanianPotOfMushroomStrogonoff" || this.type == "vardanianPotOfBorshtSoup" || this.type == "vardanianPotOfCabbageSoup" || this.type == "vardanianPotOfCreamyVenisonStew" || this.type == "vardanianPotOfBovineAndPierogiStew" || this.type == "vardanianPotOfBovineStrogonoff" || this.type == "vardanianPotOfTagglerStew" || this.type == "vardanianPotOfMulstishStew" || this.type == "vardanianPotOfToadStew" || this.type == "vardanianPotOfSlowBraisedKoivaya")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 584, 525, 26, 22, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 22 * 1.5), 26 * 1.5, 22 * 1.5);
        }
        else if (this.type == "vardanianBowl")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 442, 559, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfWater")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 510, 614, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfBovineMilk" || this.type == "vardanianBowlOfWaantiMilk" || this.type == "vardanianBowlOfNaapridMilk")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 443, 616, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfSourCream")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 872, 482, 26, 17, this.invX - (1/2 * 26 * 1.5), this.invY - (1/2 * 17 * 1.5), 26 * 1.5, 17 * 1.5);
        }
        else if (this.type == "vardanianBowlOfMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 850, 217, 45, 20, this.invX - (1/2 * 45 * 1.5), this.invY - (1/2 * 20 * 1.5), 45 * 1.5, 20 * 1.5);
        }
        else if (this.type == "bucketOfBovineMilk")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 334, 364, 11, 18, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 18 * 2), 11 * 2, 18 * 2);
        }
        else if (this.type == "bucketOfChyoulJuice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 392, 395, 11, 18, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 18 * 2), 11 * 2, 18 * 2);
        }
        else if (this.type == "bucketOfCranberryJuice")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 408, 395, 11, 18, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 18 * 2), 11 * 2, 18 * 2);
        }
        else if (this.type == "bucketOfMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 354, 396, 16, 31, this.invX - (1/2 * 16 * 2), this.invY - (1/2 * 31 * 2), 16 * 2, 31 * 2);
        }
        else if (this.type == "kellishClayPotOfBovineMilk")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 353, 365, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "kellishClayPotOfMandrake")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 330, 416, 18, 31, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 31 * 1.7), 18 * 1.7, 31 * 1.7);
        }
        else if (this.type == "chyoulJuicePintGlass" || this.type == "chyoulWine" )
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 441, 404, 12, 12, this.invX - (1/2 * 12 * 1.5), this.invY - (1/2 * 12 * 1.5), 12 * 1.5, 12 * 1.5);
        }
        else if (this.type == "cranberryJuicePintGlass" || this.type == "cranberryWine" )
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 376, 369, 12, 12, this.invX - (1/2 * 12 * 1.5), this.invY - (1/2 * 12 * 1.5), 12 * 1.5, 12 * 1.5);
        }
        else if (this.type == "glassBottleOfChyoulWine")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 462, 407, 8, 21, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 21 * 2), 8 * 2, 21 * 2);
        }
        else if (this.type == "glassBottleOfCranberryWine")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 397, 372, 8, 21, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 21 * 2), 8 * 2, 21 * 2);
        }
        else if (this.type == "cranberries")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 781, 115, 15, 13, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 13 * 1.2), 15 * 1.2, 13 * 1.2);
        }
        else if (this.type == "chyoulBerries")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 816, 169, 15, 13, this.invX - (1/2 * 15 * 1.5), this.invY - (1/2 * 13 * 1.5), 15 * 1.5, 13 * 1.5);
        }
        else if (this.type == "shears")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 855, 250, 32, 31, this.invX - (1/2 * 32 * 1), this.invY - (1/2 * 31 * 1), 32 * 1, 31 * 1);
        }
        else if (this.type == "jesterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 902, 632, 58, 98, this.invX - (1/2 * 58 * 0.85), this.invY - (1/2 * 98 * 0.85), 58 * 0.85, 98 * 0.85);
        }
        else if (this.type == "vardanianNobleOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 1073, 629, 58, 98, this.invX - (1/2 * 58 * 0.9), this.invY - (1/2 * 98 * 0.9), 58 * 0.9, 98 * 0.9);
        }
        else if (this.type == "vardanianRoyalDress")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 1014, 628, 58, 98, this.invX - (1/2 * 58 * 0.8), this.invY - (1/2 * 98 * 0.8), 58 * 0.8, 98 * 0.8);
        }
        else if (this.type == "jesterShoes")
        {
            XXX.beginPath();
            XXX.drawImage(hydra, 830, 697, 43, 33, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 33 * 1), 43 * 1, 33 * 1);
        }
        else if (this.type == "vardanWearM")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 803, 328, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "vardanWearF")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 854, 331, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "vardanOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 948, 331, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "vardanOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 903, 331, 49, 89, this.invX - (1/2 * 49 * 0.85), this.invY - (1/2 * 89 * 0.85), 49 * 0.85, 89 * 0.85);
        }
        else if (this.type == "hideBoots")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 952, 226, 31, 35, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 35 * 1), 31 * 1, 35 * 1);
        }
        else if (this.type == "elkBoots")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 901, 226, 45, 35, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 35 * 1), 45 * 1, 35 * 1);
        }
        else if (this.type == "elkGloves")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 942, 259, 45, 35, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 35 * 1), 45 * 1, 35 * 1);
        }
        else if (this.type == "hideGloves")
        {
            XXX.beginPath();
            XXX.drawImage(toad, 902, 259, 45, 35, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 35 * 1), 45 * 1, 35 * 1);
        }
        else if (this.type == "silverStake")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 301, 26, 18, 33, this.invX - (1/2 * 18 * 1), this.invY - (1/2 * 33 * 1), 18 * 1, 33 * 1);
        }
        else if (this.type == "rawCheshireFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 460, 534, 31, 34, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "cheshireMeat")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 428, 532, 31, 34, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "cheshireTongue")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 491, 534, 31, 34, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 34 * 1), 31 * 1, 34 * 1);
        }
        else if (this.type == "batWing")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 666, 9, 17, 13, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 13 * 1), 17 * 1, 13 * 1);
        }
        else if (this.type == "cheshirePelt")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 530, 538, 43, 36, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 36 * 1), 43 * 1, 36 * 1);
        }
        else if (this.type == "ameloyPerfume" || this.type == "poegroonOil")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1735, 201, 10, 15, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 15 * 1), 10 * 1, 15 * 1);
        }
        else if (this.type == "thadineBranch")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 101, 106, 68, 70, this.invX - (1/2 * 68 * 0.4), this.invY - (1/2 * 70 * 0.4), 68 * 0.4, 70 * 0.4);
        }
        else if (this.type == "ameloyFlower")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 178, 9, 82, 87, this.invX - (1/2 * 82 * 0.3), this.invY - (1/2 * 87 * 0.3), 82 * 0.3, 87 * 0.3);
        }
        else if (this.type == "thegolThornSml")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 424, 9, 43, 57, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 57 * 1), 43 * 1, 57 * 1);
        }
        else if (this.type == "thegolThornLrg")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 424, 9, 43, 57, this.invX - (1/2 * 43 * 1.17), this.invY - (1/2 * 57 * 1.17), 43 * 1.17, 57 * 1.17);
        }
        else if (this.type == "varonoiFeather")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 244, 552, 53, 26, this.invX - (1/2 * 53 * 0.6), this.invY - (1/2 * 26 * 0.6), 53 * 0.6, 26 * 0.6);
        }
        else if (this.type == "kerShell")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 686, 25, 40, 41, this.invX - (1/2 * 40 * 1), this.invY - (1/2 * 41 * 1), 40 * 1, 41 * 1);
        }
        else if (this.type == "kerClaw")
        {
            XXX.beginPath();
            XXX.drawImage(milk, 586, 21, 64, 42, this.invX - (1/2 * 64 * 0.9), this.invY - (1/2 * 42 * 0.9), 64 * 0.9, 42 * 0.9);
        }
        else if (this.type == "nirwadenSabreAndShield")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 376, 249, 48, 66, this.invX  - (1/2 * 48 * 1), this.invY - (1/2 * 66 * 1), 48 * 1, 66 * 1);
        }
        else if (this.type == "silkAndDagger")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 169, 88, 28, 53, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 53 * 1), 28 * 1, 53 * 1);
        }
        else if (this.type == "chupacabrasHead")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 224, 738, 65, 63, this.invX - (1/2 * 65 * 1), this.invY - (1/2 * 63 * 1), 65 * 1, 63 * 1);
        }
        else if (this.type == "chupacabrasPelt")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 170, 809, 149, 67, this.invX - (1/2 * 149 * 0.45), this.invY - (1/2 * 67 * 0.45), 149 * 0.45, 67 * 0.45);
        }
        else if (this.type == "changelingSkull")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 157, 673, 21, 28, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "changelingFur")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 126, 715, 21, 28, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "changelingHeart")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 152, 716, 21, 28, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 28 * 1), 21 * 1, 28 * 1);
        }
        else if (this.type == "wobeaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 164, 9, 14, 13, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 13 * 2), 14 * 2, 13 * 2);
        }
        else if (this.type == "wobeaSlice")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 188, 11, 14, 13, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 13 * 2), 14 * 2, 13 * 2);
        }
        else if (this.type == "wobeaLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 53, 5, 28, 13, this.invX - (1/2 * 28 * 2), this.invY - (1/2 * 13 * 2), 28 * 2, 13 * 2);
        }
        else if (this.type == "wobeaFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 208, 8, 14, 13, this.invX - (1/2 * 21 * 2), this.invY - (1/2 * 13 * 2), 21 * 2, 13 * 2);
        }
        else if (this.type == "wobeaNeedles")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 49, 63, 24, 25, this.invX - (1/2 * 24 * 2), this.invY - (1/2 * 25 * 2), 24 * 2, 25 * 2);
        }
        else if (this.type == "orgishClothing")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 121, 494, 57, 117, this.invX - (1/2 * 57 * 0.65), this.invY - (1/2 * 117 * 0.65), 57 * 0.65, 117 * 0.65);
        }
        else if (this.type == "matadorOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 93, 10, 59, 130, this.invX - (1/2 * 59 * 0.65), this.invY - (1/2 * 130 * 0.65), 59 * 0.65, 130 * 0.65);
        }
        else if (this.type == "boarArmour")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 41, 635, 68, 120, this.invX - (1/2 * 68 * 0.55), this.invY - (1/2 * 120 * 0.55), 68 * 0.55, 120 * 0.55);
        }
        else if (this.type == "barracoPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(chupa, 244, 238, 91, 123, this.invX - (1/2 * 91 * 0.6), this.invY - (1/2 * 123 * 0.6), 91 * 0.6, 123 * 0.6);
        }
        else if (this.type == "sickle")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 64, 814, 30, 39, this.invX - (1/2 * 30 * 1.35), this.invY - (1/2 * 39 * 1.35), 30 * 1.35, 39 * 1.35);
        }
        else if (this.type == "rose")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 717, 530, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "roseBoquet")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 684, 527, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "darkRoseBoquet")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 685, 580, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "darkRose")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 718, 583, 33, 42, this.invX - (1/2 * 33 * 1), this.invY - (1/2 * 42 * 1), 33 * 1, 42 * 1);
        }
        else if (this.type == "redStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 659, 684, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "orangeStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 611, 681, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "yellowStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 558, 682, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "peachStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 584, 682, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "blueStetriliFlower")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 636, 683, 22, 35, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 35 * 1), 22 * 1, 35 * 1);
        }
        else if (this.type == "boggartSpine")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 410, 978, 51, 45, this.invX - (1/2 * 51 * 0.8), this.invY - (1/2 * 45 * 0.8), 51 * 0.8, 45 * 0.8);
        }
        else if (this.type == "assassinWrappings")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 134, 791, 52, 96, this.invX - (1/2 * 52 * 0.85), this.invY - (1/2 * 96 * 0.85), 52 * 0.85, 96 * 0.85);
        }
        else if (this.type == "aldrekiiHijab")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 676, 1077, 38, 100, this.invX - (1/2 * 38 * 0.85), this.invY - (1/2 * 100 * 0.85), 38 * 0.85, 100 * 0.85);
        }
        else if (this.type == "aldrekiiTurbanRed")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 725, 1074, 38, 100, this.invX - (1/2 * 38 * 0.85), this.invY - (1/2 * 100 * 0.85), 38 * 0.85, 100 * 0.85);
        }
        else if (this.type == "aldrekiiTurbanPurple")
        {
            XXX.beginPath();
            XXX.drawImage(bogg, 735, 792, 38, 100, this.invX - (1/2 * 38 * 0.85), this.invY - (1/2 * 100 * 0.85), 38 * 0.85, 100 * 0.85);
        }
        else if (this.type == "hops")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 262, 26, 15, 15, this.invX - (1/2 * 15 * 1.25), this.invY - (1/2 * 15 * 1.25), 15 * 1.25, 15 * 1.25);
        }
        else if (this.type == "rawBoarChunks")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 702, 1835, 53, 51, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 51 * 1), 53 * 1, 51 * 1);
        }
        else if (this.type == "boarChunks")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 701, 1886, 53, 51, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 51 * 1), 53 * 1, 51 * 1);
        }
        else if (this.type == "porkAndHalgom")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 758, 1869, 35, 35, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "iemaPork")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 759, 1902, 35, 35, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "garlicTialoPork")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 700, 1954, 35, 35, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 35 * 1), 35 * 1, 35 * 1);
        }
        else if (this.type == "rawBoarChunksSmall")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 751, 1947, 27, 26, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 26 * 1), 27 * 1, 26 * 1);
        }
        else if (this.type == "boarChunksSmall")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 750, 1972, 27, 26, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 26 * 1), 27 * 1, 26 * 1);
        }
        else if (this.type == "searedFalder")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 664, 1981, 20, 19, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 19 * 1), 20 * 1, 19 * 1);
        }
        else if (this.type == "searedSalmon")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 634, 1979, 20, 19, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 19 * 1), 20 * 1, 19 * 1);
        }
        else if (this.type == "molteHide")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 489, 19, 48, 29, this.invX - (1/2 * 48 * 1.15), this.invY - (1/2 * 29 * 1.15), 48 * 1.15, 29 * 1.15);
        }
        else if (this.type == "molteHead")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 508, 110, 24, 24, this.invX - (1/2 * 24 * 1.2), this.invY - (1/2 * 24 * 1.2), 24 * 1.2, 24 * 1.2);
        }
        else if (this.type == "moltePaw")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 498, 51, 38, 17, this.invX - (1/2 * 38 * 1.2), this.invY - (1/2 * 17 * 1.2), 38 * 1.2, 17 * 1.2);
        }
        else if (this.type == "molteMeat")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 513, 154, 25, 17, this.invX - (1/2 * 25 * 1.2), this.invY - (1/2 * 17 * 1.2), 25 * 1.2, 17 * 1.2);
        }
        else if (this.type == "rawMolteFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(molte, 514, 138, 25, 17, this.invX - (1/2 * 25 * 1.2), this.invY - (1/2 * 17 * 1.2), 25 * 1.2, 17 * 1.2);
        }
        else if (this.type == "spade")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 573, 5, 52, 60, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 60 * 1), 52 * 1, 60 * 1);
        }
        else if (this.type == "sprite")
        {
            XXX.beginPath();
            XXX.drawImage(tomb, 2657, 21, 26, 22, this.invX - (1/2 * 26 * 1), this.invY - (1/2 * 22 * 1), 26 * 1, 22 * 1);
        }
        else if (this.type == "gargoyleHeart")
        {
            XXX.beginPath();
            XXX.drawImage(garg, 826, 414, 35, 36, this.invX - (1/2 * 35 * 1), this.invY - (1/2 * 36 * 1), 35 * 1, 36 * 1);
        }
        else if (this.type == "greyTrollFur")
        {
            XXX.beginPath();
            XXX.drawImage(garg, 848, 1745, 109, 80, this.invX - (1/2 * 109 * 0.9), this.invY - (1/2 * 80 * 0.9), 109 * 0.9, 80 * 0.9);
        }
        else if (this.type == "rawIemaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 585, 1981, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "rawChonaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 497, 1983, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "rawPolyapaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 538, 1982, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "iemaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 568, 1981, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "chonaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 481, 1982, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "polyapaTart")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 522, 1983, 14, 16, this.invX - (1/2 * 14 * 1), this.invY - (1/2 * 16 * 1), 14 * 1, 16 * 1);
        }
        else if (this.type == "mrbTacticalArmour")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 102, 2, 83, 170, this.invX - (1/2 * 83 * 0.4), this.invY - (1/2 * 170 * 0.4), 83 * 0.4, 170 * 0.4);
        }
        else if (this.type == "doctorOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 738, 514, 53, 116, this.invX - (1/2 * 53 * 0.65), this.invY  - (1/2 * 116 * 0.65), 53 * 0.65, 116 * 0.65);
        }
        else if (this.type == "vardanianHalberd")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(0.3);
            XXX.drawImage(gent, 622, 1823, 39, 151, 0 - (1/2 * 39 * 0.5), 0 - (1/2 * 151 * 0.5), 39 * 0.5, 151 * 0.5);
            XXX.restore();
        }
        else if (this.type == "windArrow")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 571, 1873, 31, 10, this.invX - (1/2 * 31 * 1), this.invY - (1/2 * 10 * 1), 31 * 1, 10 * 1);
        }
        else if (this.type == "halgomMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 454, 1903, 29, 29, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 29 * 1), 29 * 1, 29 * 1);
        }
        else if (this.type == "roastedHalgomMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 418, 1902, 29, 29, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 29 * 1), 29 * 1, 29 * 1);
        }
        else if (this.type == "tialoFrond")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 382, 1903, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "steamedTialo")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 758, 1842, 27, 24, this.invX - (1/2 * 27 * 1), this.invY - (1/2 * 24 * 1), 27 * 1, 24 * 1);
        }
        else if (this.type == "iemaBerries")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 471, 1949, 22, 25, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 25 * 1), 22 * 1, 25 * 1);
        }
        else if (this.type == "erguerFlower")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 557, 1912, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "erguerLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 585, 1916, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "erguerPaste")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 586, 1945, 21, 27, this.invX - (1/2 * 21 * 1), this.invY - (1/2 * 27 * 1), 21 * 1, 27 * 1);
        }
        else if (this.type == "bucketOfErguerPaste")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 496, 1851, 15, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
        }
        else if (this.type == "erguerWine")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 533, 1858, 13, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 15 * 2), 13 * 2, 15 * 2);
        }
        else if (this.type == "glassBottleOfErguerWine")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 464, 1867, 11, 21, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 21 * 2), 11 * 2, 21 * 2);
        }
        else if (this.type == "kolumPowder")
        {
            XXX.beginPath();
            XXX.drawImage(kolumIMG, 0, 0, 28, 30, this.invX - (1/2 * 28 * 0.6), this.invY - (1/2 * 30 * 0.6), 28 * 0.6, 30 * 0.6);
        }
        else if (this.type == "vardanianPlateArmour" || this.type == "vardanianPlateArmourBlackPlume" || this.type == "vardanianPlateArmourRedPlume")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 552, 268, 71, 123, this.invX - (1/2 * 71 * 0.65), this.invY - (1/2 * 123 * 0.65), 71 * 0.65, 123 * 0.65);
        }
        else if (this.type == "nechrovitePlateArmour" || this.type == "nechrovitePlateArmourBlackPlume" || this.type == "nechrovitePlateArmourRedPlume")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 624, 267, 71, 123, this.invX - (1/2 * 71 * 0.65), this.invY - (1/2 * 123 * 0.65), 71 * 0.65, 123 * 0.65);
        }
        else if (this.type == "rawGhoulFlyStomach")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 482, 160, 34, 31, this.invX - (1/2 * 34 * 1.1), this.invY - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "brittleGhoulFlyStomach")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 434, 163, 34, 31, this.invX - (1/2 * 34 * 1.1), this.invY - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "ghoulFlyPowder")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 355, 165, 34, 31, this.invX - (1/2 * 34 * 1.1), this.invY - (1/2 * 31 * 1.1), 34 * 1.1, 31 * 1.1);
        }
        else if (this.type == "ghoulFlyWings")
        {
            XXX.beginPath();
            XXX.drawImage(dmil, 271, 164, 44, 34, this.invX - (1/2 * 44 * 1.1), this.invY - (1/2 * 34 * 1.1), 44 * 1.1, 34 * 1.1);
        }
        else if (this.type == "copperOre")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 930, 2193, 21, 28, this.invX - (1/2 * 21 * 0.8), this.invY - (1/2 * 28 * 0.8), 21 * 0.8, 28 * 0.8);
        }
        else if (this.type == "copper")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 873, 2190, 37, 34, this.invX - (1/2 * 37 * 0.68), this.invY - (1/2 * 34 * 0.68), 37 * 0.68, 34 * 0.68);
        }
        else if (this.type == "copperWire")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 893, 2240, 47, 22, this.invX - (1/2 * 47 * 0.6), this.invY - (1/2 * 22 * 0.6), 47 * 0.6, 22 * 0.6);
        }
        else if (this.type == "copperDust")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 926, 2270, 41, 39, this.invX - (1/2 * 41 * 0.69), this.invY - (1/2 * 39 * 0.69), 41 * 0.69, 39 * 0.69);
        }
        else if (this.type == "alcaStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1634, 467, 28, 26, this.invX - (1/2 * 28 * 1), this.invY - (1/2 * 26 * 1), 28 * 1, 26 * 1);
        }
        else if (this.type == "spiritTalisman")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 168, 3371, 61, 55, this.invX - (1/2 * 61 * 0.55), this.invY - (1/2 * 55 * 0.55), 61 * 0.55, 55 * 0.55);
        }
        else if (this.type == "engineerOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 901, 2388, 90, 133, this.invX - (1/2 * 90 * 0.58), this.invY - (1/2 * 133 * 0.58), 90 * 0.58, 133 * 0.58);
        }
        else if (this.type == "naapricha")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 1212, 2997, 20, 17, this.invX - (1/2 * 20 * 1.15), this.invY - (1/2 * 17 * 1.15), 20 * 1.15, 17 * 1.15);
        }
        else if (this.type == "naaprichaWedge")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 1189, 2997, 24, 12, this.invX - (1/2 * 24 * 1.15), this.invY - (1/2 * 12 * 1.15), 24 * 1.15, 12 * 1.15);
        }
        else if (this.type == "garlic")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 874, 2274, 25, 28, this.invX - (1/2 * 25 * 0.55), this.invY - (1/2 * 28 * 0.55), 25 * 0.55, 28 * 0.55);
        }
        else if (this.type == "chonaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 726, 2556, 16, 15, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 15 * 1.2), 16 * 1.2, 15 * 1.2);
        }
        else if (this.type == "polyapaFruit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 748, 2553, 15, 17, this.invX - (1/2 * 15 * 1.2), this.invY - (1/2 * 17 * 1.2), 15 * 1.2, 17 * 1.2);
        }
        else if (this.type == "nirwadenLance")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 263, 532, 242, 34, this.invX - (1/2 * 242 * 0.33), this.invY - (1/2 * 34 * 0.33), 242 * 0.33, 34 * 0.33);
        }
        else if (this.type == "duendeEsophagus")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 9, 1938, 39, 60, this.invX - (1/2 * 39 * 0.66), this.invY - (1/2 * 60 * 0.66), 39 * 0.66, 60 * 0.66);
        }
        else if (this.type == "driedDuendeEsophagus")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 62, 1939, 39, 60, this.invX - (1/2 * 39 * 0.66), this.invY - (1/2 * 60 * 0.66), 39 * 0.66, 60 * 0.66);
        }
        else if (this.type == "duendePowder")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 113, 1955, 37, 33, this.invX - (1/2 * 37 * 0.66), this.invY - (1/2 * 33 * 0.66), 37 * 0.66, 33 * 0.66);
        }
        else if (this.type == "bacon")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 677, 750, 42, 37, this.invX - (1/2 * 42 * 0.64), this.invY - (1/2 * 37 * 0.64), 42 * 0.64, 37 * 0.64);
        }
        else if (this.type == "rawBacon")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 625, 751, 42, 37, this.invX - (1/2 * 42 * 0.64), this.invY - (1/2 * 37 * 0.64), 42 * 0.64, 37 * 0.64);
        }
        else if (this.type == "porkbelly")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 709, 794, 51, 31, this.invX - (1/2 * 51 * 0.64), this.invY - (1/2 * 31 * 0.64), 51 * 0.64, 31 * 0.64);
        }
        else if (this.type == "rawPorkbelly")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 643, 795, 51, 31, this.invX - (1/2 * 51 * 0.64), this.invY - (1/2 * 31 * 0.64), 51 * 0.64, 31 * 0.64);
        }
        else if (this.type == "curedPork")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 103, 1318, 38, 39, this.invX - (1/2 * 38 * 0.64), this.invY - (1/2 * 39 * 0.64), 38 * 0.64, 39 * 0.64);
        }
        else if (this.type == "boarMeat")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 13, 1318, 69, 33, this.invX - (1/2 * 69 * 0.64), this.invY - (1/2 * 33 * 0.64), 69 * 0.64, 33 * 0.64);
        }
        else if (this.type == "rawBoarFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 13, 1275, 69, 33, this.invX - (1/2 * 69 * 0.64), this.invY - (1/2 * 33 * 0.64), 69 * 0.64, 33 * 0.64);
        }
        else if (this.type == "chainsaw")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 844, 2059, 74, 116, this.invX - (1/2 * 74 * 0.64), this.invY - (1/2 * 116 * 0.64), 74 * 0.64, 116 * 0.64);
        }
        else if (this.type == "witchHunterOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 705, 841, 96, 145, this.invX - (1/2 * 96 * 0.5), this.invY - (1/2 * 145 * 0.5), 96 * 0.5, 145 * 0.5);
        }
        else if (this.type == "nirwadenGambeson")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 107, 462, 96, 145, this.invX - (1/2 * 96 * 0.5), this.invY - (1/2 * 145 * 0.5), 96 * 0.5, 145 * 0.5);
        }
        else if (this.type == "nirwadenMorionArmour")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 103, 624, 96, 145, this.invX - (1/2 * 96 * 0.5), this.invY - (1/2 * 145 * 0.5), 96 * 0.5, 145 * 0.5);
        }
        else if (this.type == "peacockFeather")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 7, 1087, 73, 35, this.invX - (1/2 * 73 * 1), this.invY - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "peacockMeat")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 11, 1205, 73, 35, this.invX - (1/2 * 73 * 0.575), this.invY - (1/2 * 35 * 0.575), 73 * 0.575, 35 * 0.575);
        }
        else if (this.type == "rawPeacockFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 14, 1164, 73, 35, this.invX - (1/2 * 73 * 0.575), this.invY - (1/2 * 35 * 0.575), 73 * 0.575, 35 * 0.575);
        }
        else if (this.type == "nirwadenPriestRobes")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 534, 3458, 89, 173, this.invX - (1/2 * 89 * 0.45), this.invY - (1/2 * 173 * 0.45), 89 * 0.45, 173 * 0.45);
        }
        else if (this.type == "nirwadenClothingM")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 901, 837, 97, 149, this.invX - (1/2 * 97 * 0.525), this.invY - (1/2 * 149 * 0.525), 97 * 0.525, 149 * 0.525);
        }
        else if (this.type == "nirwadenClothingF")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 89, 999, 97, 149, this.invX - (1/2 * 97 * 0.525), this.invY - (1/2 * 149 * 0.525), 97 * 0.525, 149 * 0.525);
        }
        else if (this.type == "nirwadenNobleOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 98, 821, 98, 146, this.invX - (1/2 * 98 * 0.525), this.invY - (1/2 * 146 * 0.525), 98 * 0.525, 146 * 0.525);
        }
        else if (this.type == "nirwadenNobleDress")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 235, 795, 141, 182, this.invX - (1/2 * 141 * 0.37), this.invY - (1/2 * 182 * 0.37), 141 * 0.37, 182 * 0.37);
        }
        else if (this.type == "nirwadenPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 312, 642, 100, 145, this.invX - (1/2 * 100 * 0.525), this.invY - (1/2 * 145 * 0.525), 100 * 0.525, 145 * 0.525);
        }
        else if (this.type == "griffinPelt")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 746, 2602, 96, 53, this.invX - (1/2 * 96 * 0.65), this.invY - (1/2 * 53 * 0.65), 96 * 0.65, 53 * 0.65);
        }
        else if (this.type == "roastedGriffinHeart")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 778, 2545, 44, 49, this.invX - (1/2 * 44 * 0.8), this.invY - (1/2 * 49 * 0.8), 44 * 0.8, 49 * 0.8);
        }
        else if (this.type == "griffinHeart")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 825, 2511, 44, 49, this.invX - (1/2 * 44 * 0.8), this.invY - (1/2 * 49 * 0.8), 44 * 0.8, 49 * 0.8);
        }
        else if (this.type == "griffinHeadSml")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 853, 2574, 97, 103, this.invX - (1/2 * 97 * 0.55), this.invY - (1/2 * 103 * 0.55), 97 * 0.55, 103 * 0.55);
        }
        else if (this.type == "griffinHeadMed")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 853, 2574, 97, 103, this.invX - (1/2 * 97 * 0.6), this.invY - (1/2 * 103 * 0.6), 97 * 0.6, 103 * 0.6);
        }
        else if (this.type == "griffinHeadLrg")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 853, 2574, 97, 103, this.invX - (1/2 * 97 * 0.65), this.invY - (1/2 * 103 * 0.65), 97 * 0.65, 103 * 0.65);
        }
        else if (this.type == "horseMeat")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 912, 382, 45, 29, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "rawHorseFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 912, 340, 45, 29, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "horseHair")
        {
            XXX.beginPath();
            XXX.drawImage(atal, 911, 423, 45, 29, this.invX - (1/2 * 45 * 1), this.invY - (1/2 * 29 * 1), 45 * 1, 29 * 1);
        }
        else if (this.type == "powderedRhinocerosHorn")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 721, 777, 22, 20, this.invX - (1/2 * 22 * 1), this.invY - (1/2 * 20 * 1), 22 * 1, 20 * 1);
        }
        else if (this.type == "rhinocerosHorn")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 721, 754, 41, 20, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 20 * 1), 41 * 1, 20 * 1);
        }
        else if (this.type == "slol")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 461, 601, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "rawSlol")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 458, 566, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "rawRiulpo")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 660, 657, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "riulpo")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 660, 701, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "polxetp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 716, 699, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "rawPolxetp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 715, 657, 52, 38, this.invX - (1/2 * 52 * 1), this.invY - (1/2 * 38 * 1), 52 * 1, 38 * 1);
        }
        else if (this.type == "redBelliedFalder")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 670, 603, 53, 26, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 26 * 1), 53 * 1, 26 * 1);
        }
        else if (this.type == "rawRedBelliedFalder")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 673, 565, 53, 26, this.invX - (1/2 * 53 * 1), this.invY - (1/2 * 26 * 1), 53 * 1, 26 * 1);
        }
        else if (this.type == "rawDuskfish")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 728, 560, 78, 35, this.invX - (1/2 * 78 * 1), this.invY - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "duskfish")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 727, 598, 78, 35, this.invX - (1/2 * 78 * 1), this.invY - (1/2 * 35 * 1), 78 * 1, 35 * 1);
        }
        else if (this.type == "tridite")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 555, 762, 77, 54, this.invX - (1/2 * 77 * 0.75), this.invY - (1/2 * 54 * 0.75), 77 * 0.75, 54 * 0.75);
        }
        else if (this.type == "rawTridite")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 447, 761, 77, 54, this.invX - (1/2 * 77 * 0.75), this.invY - (1/2 * 54 * 0.75), 77 * 0.75, 54 * 0.75);
        }
        else if (this.type == "crawdid")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 624, 562, 37, 33, this.invX - (1/2 * 37 * 1), this.invY - (1/2 * 33 * 1), 37 * 1, 33 * 1);
        }
        else if (this.type == "crawdidTail")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 623, 601, 37, 33, this.invX - (1/2 * 37 * 1), this.invY - (1/2 * 33 * 1), 37 * 1, 33 * 1);
        }
        else if (this.type == "rawKalp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 551, 668, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "kalp")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 552, 709, 78, 35, this.invX - (1/2 * 78 * 0.95), this.invY - (1/2 * 35 * 0.95), 78 * 0.95, 35 * 0.95);
        }
        else if (this.type == "theGrailOfEternity")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 691, 765, 16, 24, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 24 * 1.2), 16 * 1.2, 24 * 1.2);
        }
        else if (this.type == "grailOfEternity")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 671, 766, 16, 24, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 24 * 1.2), 16 * 1.2, 24 * 1.2);
        }
        else if (this.type == "mugmulFur")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 13, 907, 27, 34, this.invX - (1/2 * 27 * 1.3), this.invY - (1/2 * 34 * 1.3), 27 * 1.3, 34 * 1.3);
        }
        else if (this.type == "mugmulMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 83, 915, 18, 21, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 21 * 1.3), 18 * 1.3, 21 * 1.3);
        }
        else if (this.type == "rawMugmulFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 55, 915, 18, 21, this.invX - (1/2 * 18 * 1.3), this.invY - (1/2 * 21 * 1.3), 18 * 1.3, 21 * 1.3);
        }
        else if (this.type == "mugmulBrain")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 188, 972, 21, 21, this.invX - (1/2 * 21 * 1.3), this.invY - (1/2 * 21 * 1.3), 21 * 1.3, 21 * 1.3);
        }
        else if (this.type == "rawSalmon")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 555, 563, 57, 37, this.invX - (1/2 * 57 * 1), this.invY - (1/2 * 37 * 1), 57 * 1, 37 * 1);
        }
        else if (this.type == "salmon")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 556, 603, 57, 37, this.invX - (1/2 * 57 * 1), this.invY - (1/2 * 37 * 1), 57 * 1, 37 * 1);
        }
        else if (this.type == "rawSaskriit")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 448, 663, 73, 35, this.invX - (1/2 * 73 * 1), this.invY - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "saskriit")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 452, 707, 73, 35, this.invX - (1/2 * 73 * 1), this.invY - (1/2 * 35 * 1), 73 * 1, 35 * 1);
        }
        else if (this.type == "drileLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 600, 50, 56, 91, this.invX - (1/2 * 56 * 0.8), this.invY - (1/2 * 91 * 0.8), 56 * 0.8, 91 * 0.8);
        }
        else if (this.type == "drileLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 661, 87, 42, 41, this.invX - (1/2 * 42 * 0.9), this.invY - (1/2 * 41 * 1.15), 42 * 0.9, 41 * 0.9);
        }
        else if (this.type == "drileLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 714, 50, 29, 24, this.invX - (1/2 * 29 * 1), this.invY - (1/2 * 24 * 1), 29 * 1, 24 * 1);
        }
        else if (this.type == "zarbuTribalWear")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 836, 887, 55, 106, this.invX - (1/2 * 55 * 0.65), this.invY - (1/2 * 106 * 0.65), 55 * 0.65, 106 * 0.65);
        }
        else if (this.type == "zarbuClothing")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 767, 892, 55, 106, this.invX - (1/2 * 55 * 0.65), this.invY - (1/2 * 106 * 0.65), 55 * 0.65, 106 * 0.65);
        }
        else if (this.type == "zarbuMatriarchDress")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 764, 781, 46, 103, this.invX - (1/2 * 46 * 0.7), this.invY - (1/2 * 103 * 0.7), 46 * 0.7, 103 * 0.7);
        }
        else if (this.type == "zarbuDress")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 794, 656, 39, 84, this.invX - (1/2 * 39 * 0.9), this.invY - (1/2 * 84 * 0.9), 39 * 0.9, 84 * 0.9);
        }
        else if (this.type == "basiliskScale")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 204, 941, 14, 13, this.invX - (1/2 * 14 * 1.4), this.invY - (1/2 * 13 * 1.4), 14 * 1.4, 13 * 1.4);
        }
        else if (this.type == "basiliskEye")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 205, 959, 9, 9, this.invX - (1/2 * 9 * 2), this.invY - (1/2 * 9 * 2), 9 * 2, 9 * 2);
        }
        else if (this.type == "basiliskFang")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 186, 944, 13, 27, this.invX - (1/2 * 13 * 1.4), this.invY - (1/2 * 27 * 1.4), 13 * 1.4, 27 * 1.4);
        }
        else if (this.type == "zarbuTuft")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 822, 10, 21, 28, this.invX - (1/2 * 21 * 1.2), this.invY - (1/2 * 28 * 1.2), 21 * 1.2, 28 * 1.2);
        }
        else if (this.type == "zarbuPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 903, 2, 89, 39, this.invX - (1/2 * 89 * 0.75), this.invY - (1/2 * 39 * 0.75), 89 * 0.75, 39 * 0.75);
        }
        else if (this.type == "zarbuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 873, 10, 25, 25, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 25 * 1), 25 * 1, 25 * 1);
        }
        else if (this.type == "rawZarbuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 847, 11, 25, 25, this.invX - (1/2 * 25 * 1), this.invY - (1/2 * 25 * 1), 25 * 1, 25 * 1);
        }
        else if (this.type == "acidifiedDrileKidney")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 717, 100, 27, 19, this.invX - (1/2 * 27 * 1.1), this.invY - (1/2 * 19 * 1.1), 27 * 1.1, 19 * 1.1);
        }
        else if (this.type == "drileKidney")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 718, 77, 27, 19, this.invX - (1/2 * 27 * 1.1), this.invY - (1/2 * 19 * 1.1), 27 * 1.1, 19 * 1.1);
        }
        else if (this.type == "drileMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 791, 15, 30, 31, this.invX - (1/2 * 30 * 0.9), this.invY - (1/2 * 31 * 0.9), 30 * 0.9, 31 * 0.9);
        }
        else if (this.type == "rawDrileFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 755, 14, 30, 31, this.invX - (1/2 * 30 * 0.9), this.invY - (1/2 * 31 * 0.9), 30 * 0.9, 31 * 0.9);
        }
        else if (this.type == "drileSkin")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 614, 9, 137, 38, this.invX - (1/2 * 137 * 0.4), this.invY - (1/2 * 38 * 0.4), 137 * 0.4, 38 * 0.4);
        }
        else if (this.type == "tunskBloodPotion" || this.type == "antiMothfearPotion")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1701, 201, 9, 15, this.invX - (1/2 * 9), this.invY - (1/2 * 15), 9, 15);
        }
        else if (this.type == "waterwalkingPotion")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1763, 184, 9, 15, this.invX - (1/2 * 9), this.invY - (1/2 * 15), 9, 15);
        }
        else if (this.type == "toothedBludgeon")
        {
            XXX.beginPath();
            XXX.drawImage(polux, 231, 928, 74, 70, this.invX - (1/2 * 74 * 0.75), this.invY - (1/2 * 70 * 0.75), 74 * 0.75, 70 * 0.75);
        }
        else if (this.type == "lelBerries")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 455, 48, 8, 13, this.invX - (1/2 * 8 * 1.8), this.invY - (1/2 * 13 * 1.8), 8 * 1.8, 13 * 1.8);
        }
        else if (this.type == "lelFlower")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 467, 50, 11, 9, this.invX - (1/2 * 11 * 1.8), this.invY - (1/2 * 9 * 1.8), 11 * 1.8, 9 * 1.8);
        }
        else if (this.type == "naapridDrinkinghorn" || this.type == "naapridDrinkinghorn1" || this.type == "naapridMilkhorn1")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 539, 80, 15, 14, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "naapridMilkhornFull")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 522, 105, 15, 14, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "naapridDrinkinghornFull")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 466, 105, 15, 14, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 14 * 2.1), 15 * 2.1, 14 * 2.1);
        }
        else if (this.type == "volaFlowers")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 439, 115, 15, 13, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 13 * 1.4), 15 * 1.4, 13 * 1.4);
        }
        else if (this.type == "rawTamal" || this.type == "rawMofuTamal" || this.type == "wrappedTamal" || this.type == "wrappedMofuTamal")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 402, 50, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal" || this.type == "mofuTamal")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 386, 51, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal2" || this.type == "mofuTamal2")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 419, 50, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "tamal1" || this.type == "mofuTamal1")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 435, 50, 15, 11, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 11 * 1.8), 15 * 1.8, 11 * 1.8);
        }
        else if (this.type == "masa")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 392, 20, 11, 10, this.invX - (1/2 * 11 * 1.8), this.invY - (1/2 * 10 * 1.8), 11 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maizeFlour")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 393, 34, 14, 14, this.invX - (1/2 * 14 * 1.8), this.invY - (1/2 * 14 * 1.8), 14 * 1.8, 14 * 1.8);
        }
        else if (this.type == "roastedMaize")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 399, 4, 10, 10, this.invX - (1/2 * 10 * 1.8), this.invY - (1/2 * 10 * 1.8), 10 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maizeHusk")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 408, 20, 9, 10, this.invX - (1/2 * 9 * 1.8), this.invY - (1/2 * 10 * 1.8), 9 * 1.8, 10 * 1.8);
        }
        else if (this.type == "maize")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 386, 5, 10, 10, this.invX - (1/2 * 10 * 1.8), this.invY - (1/2 * 10 * 1.8), 10 * 1.8, 10 * 1.8);
        }
        else if (this.type == "mazorca")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 377, 20, 11, 14, this.invX - (1/2 * 11 * 1.8), this.invY - (1/2 * 14 * 1.8), 11 * 1.8, 14 * 1.8);
        }
        else if (this.type == "boiledFrijols")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 517, 79, 16, 17, this.invX - (1/2 * 16 * 1.7), this.invY - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "latuku")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 498, 78, 16, 17, this.invX - (1/2 * 16 * 1.7), this.invY - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "aktaltlSoup")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 478, 77, 16, 17, this.invX - (1/2 * 16 * 1.7), this.invY - (1/2 * 17 * 1.7), 16 * 1.7, 17 * 1.7);
        }
        else if (this.type == "apotlPepper")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 481, 43, 13, 18, this.invX - (1/2 * 13 * 1.4), this.invY - (1/2 * 18 * 1.4), 13 * 1.4, 18 * 1.4);
        }
        else if (this.type == "frijols")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 376, 36, 12, 11, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 11 * 1.4), 12 * 1.4, 11 * 1.4);
        }
        else if (this.type == "clobeLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 325, 138, 17, 17, this.invX - (1/2 * 17 * 1.4), this.invY - (1/2 * 17 * 1.4), 17 * 1.4, 17 * 1.4);
        }
        else if (this.type == "kwomFruit")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 398, 96, 11, 9, this.invX - (1/2 * 11 * 1.4), this.invY - (1/2 * 9 * 1.4), 11 * 1.4, 9 * 1.4);
        }
        else if (this.type == "pochalPods")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 316, 86, 23, 19, this.invX - (1/2 * 23 * 1.4), this.invY - (1/2 * 19 * 1.4), 23 * 1.4, 19 * 1.4);
        }
        else if (this.type == "boiledPochalPods")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 344, 86, 23, 19, this.invX - (1/2 * 23 * 1.4), this.invY - (1/2 * 19 * 1.4), 23 * 1.4, 19 * 1.4);
        }
        else if (this.type == "karmFruit")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 108, 100, 20, 21, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 21 * 1), 20 * 1, 21 * 1);
        }
        else if (this.type == "aktaltlFrond")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 102, 51, 28, 21, this.invX - (1/2 * 28 * 1.4), this.invY - (1/2 * 21 * 1.4), 28 * 1.4, 21 * 1.4);
        }
        else if (this.type == "boiledAktaltlFrond")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 106, 77, 22, 20, this.invX - (1/2 * 22 * 1.4), this.invY - (1/2 * 20 * 1.4), 22 * 1.4, 20 * 1.4);
        }
        else if (this.type == "aktaltlRoot")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 106, 11, 33, 33, this.invX - (1/2 * 33 * 1.4), this.invY - (1/2 * 33 * 1.4), 33 * 1.4, 33 * 1.4);
        }
        else if (this.type == "roastedAktaltlRoot")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 96, 123, 33, 33, this.invX - (1/2 * 33 * 1.4), this.invY - (1/2 * 33 * 1.4), 33 * 1.4, 33 * 1.4);
        }
        else if (this.type == "boat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 307, 477, 43, 80, this.invX - (1/2 * 43 * 0.9), this.invY - (1/2 * 80 * 0.9), 43 * 0.9, 80 * 0.9);
        }
        else if (this.type == "corneliusFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 235, 18, 8, 10, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 10 * 2), 8 * 2, 10 * 2);
        }
        else if (this.type == "rilthasiaFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 248, 18, 8, 10, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 10 * 2), 8 * 2, 10 * 2);
        }
        else if (this.type == "yeolPod")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 333, 10, 8, 7, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolPodHusk")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 352, 11, 8, 7, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolNut")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 343, 10, 8, 7, this.invX - (1/2 * 8 * 2), this.invY - (1/2 * 7 * 2), 8 * 2, 7 * 2);
        }
        else if (this.type == "yeolWood")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 359, 65, 19, 17, this.invX - (1/2 * 19 * 2), this.invY - (1/2 * 17 * 2), 19 * 2, 17 * 2);
        }
        else if (this.type == "rawTaipanFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 303, 120, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "taipanMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 303, 134, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "taipanSnakeSkin")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 300, 106, 26, 14, this.invX - (1/2 * 26 * 2), this.invY - (1/2 * 14 * 2), 26 * 2, 14 * 2);
        }
        else if (this.type == "taipanVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 305, 145, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "rawYioshkFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 477, 122, 15, 11, this.invX - (1/2 * 15 * 2.2), this.invY - (1/2 * 11 * 2.2), 15 * 2.2, 11 * 2.2);
        }
        else if (this.type == "yioshkMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 477, 133, 15, 11, this.invX - (1/2 * 15 * 2.2), this.invY - (1/2 * 11 * 2.2), 15 * 2.2, 11 * 2.2);
        }
        else if (this.type == "cloimidMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 93, 228, 27, 24, this.invX - (1/2 * 27 * 2.2), this.invY - (1/2 * 24 * 2.2), 27 * 2.2, 24 * 2.2);
        }
        else if (this.type == "rawCloimidFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 94, 204, 27, 24, this.invX - (1/2 * 27 * 2.2), this.invY - (1/2 * 24 * 2.2), 27 * 2.2, 24 * 2.2);
        }
        else if (this.type == "cloimidPearl")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 126, 209, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
        }
        else if (this.type == "wool")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 933, 7, 22, 19, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 19 * 2), 22 * 2, 19 * 2);
        }
        else if (this.type == "lamb" || this.type == "mutton")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 987, 4, 12, 18, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 18 * 2), 12 * 2, 18 * 2);
        }
        else if (this.type == "rawLamb" || this.type == "rawMutton")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 970, 4, 12, 18, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 18 * 2), 12 * 2, 18 * 2);
        }
        else if (this.type == "anemoneTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 652, 252, 12, 16, this.invX - (1/2 * 12 * 1.6), this.invY - (1/2 * 16 * 1.6), 12 * 1.6, 16 * 1.6);
        }
        else if (this.type == "beachMiteInnards")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 98, 160, 10, 9, this.invX - (1/2 * 10 * 1.4), this.invY - (1/2 * 9 * 1.4), 10 * 1.4, 9 * 1.4);
        }
        else if (this.type == "fishingpole")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 181, 486, 24, 30, this.invX - (1/2 * 24 * 1.5), this.invY - (1/2 * 30 * 1.5), 24 * 1.5, 30 * 1.5);
        }
        else if (this.type == "kelp")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 126, 227, 19, 24, this.invX - (1/2 * 19 * 1.25), this.invY - (1/2 * 24 * 1.25), 19 * 1.25, 24 * 1.25);
        }
        else if (this.type == "dryKelp")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 141, 204, 19, 24, this.invX - (1/2 * 19 * 1.25), this.invY - (1/2 * 24 * 1.25), 19 * 1.25, 24 * 1.25);
        }
        else if (this.type == "rawRedCrombal")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 97, 254, 18, 10, this.invX - (1/2 * 18 * 1.4), this.invY - (1/2 * 10 * 1.4), 18 * 1.4, 10 * 1.4);
        }
        else if (this.type == "redCrombal")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 97, 308, 18, 10, this.invX - (1/2 * 18 * 1.4), this.invY - (1/2 * 10 * 1.4), 18 * 1.4, 10 * 1.4);
        }
        else if (this.type == "rawJuurgo")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 97, 263, 19, 9, this.invX - (1/2 * 19 * 3.2), this.invY - (1/2 * 9 * 3.2), 19 * 3.2, 9 * 3.2);
        }
        else if (this.type == "juurgo")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 96, 320, 19, 9, this.invX - (1/2 * 19 * 3.2), this.invY - (1/2 * 9 * 3.2), 19 * 3.2, 9 * 3.2);
        }
        else if (this.type == "rawRazorfin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 95, 273, 22, 18, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 18 * 2), 22 * 2, 18 * 2);
        }
        else if (this.type == "razorfin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 93, 332, 22, 18, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 18 * 2), 22 * 2, 18 * 2);
        }
        else if (this.type == "rawThab")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(2.5/8 * 2 * Math.PI);
            XXX.drawImage(norc, 92, 292, 32, 11, 0 - (1/2 * 32 * 3.1), 0 - (1/2 * 11 * 3.1), 32 * 3.1, 11 * 3.1);
            XXX.restore();
        }
        else if (this.type == "thab")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(2.5/8 * 2 * Math.PI);
            XXX.drawImage(norc, 92, 350, 32, 11, 0 - (1/2 * 32 * 3.1), 0 - (1/2 * 11 * 3.1), 32 * 3.1, 11 * 3.1);
            XXX.restore();
        }
        else if (this.type == "saltBloodArmour")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 130, 153, 30, 46, this.invX - (1/2 * 30 * 1.7), this.invY - (1/2 * 46 * 1.7), 30 * 1.7, 46 * 1.7);
        }
        else if (this.type == "sealSkinClothing")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 37, 116, 20, 36, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 36 * 1.7), 20 * 1.7, 36 * 1.7);
        }
        else if (this.type == "sealSkinGloves")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 66, 123, 15, 12, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 12 * 2.1), 12 * 2.1, 12 * 2.1);
        }
        else if (this.type == "sealSkinBoots")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 65, 139, 20, 15, this.invX - (1/2 * 20 * 2.1), this.invY - (1/2 * 15 * 2.1), 20 * 2.1, 15 * 2.1);
        }
        else if (this.type == "northernClothing")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 22, 2, 20, 36, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 36 * 1.7), 20 * 1.7, 36 * 1.7);
        }
        else if (this.type == "northernGloves")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 94, 118, 15, 12, this.invX - (1/2 * 15 * 2.1), this.invY - (1/2 * 12 * 2.1), 12 * 2.1, 12 * 2.1);
        }
        else if (this.type == "northernBoots")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 90, 134, 20, 15, this.invX - (1/2 * 20 * 2.1), this.invY - (1/2 * 15 * 2.1), 20 * 2.1, 15 * 2.1);
        }
        else if (this.type == "tyrniBerries")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 67, 337, 13, 9, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 9 * 2), 13 * 2, 9 * 2);
        }
        else if (this.type == "sealSkin" || this.type == "selkieSkin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 5, 39, 42, 18, this.invX - (1/2 * 42 * 1.75), this.invY - (1/2 * 18 * 1.75), 42 * 1.75, 18 * 1.75);
        }
        else if (this.type == "babySealSkin")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 5, 39, 42, 18, this.invX - (1/2 * 42 * 0.9), this.invY - (1/2 * 18 * 0.9), 42 * 0.9, 18 * 0.9);
        }
        else if (this.type == "rawSealFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 9, 59, 10, 14, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 14 * 1.85), 10 * 1.85, 14 * 1.85);
        }
        else if (this.type == "sealMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 21, 59, 10, 14, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 14 * 1.85), 10 * 1.85, 14 * 1.85);
        }
        else if (this.type == "crabFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 850, 6, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "crabMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 850, 36, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "crabClaw")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 806, 26, 31, 21, this.invX - (1/2 * 31 * 1.3), this.invY - (1/2 * 21 * 1.3), 31 * 1.3, 21 * 1.3);
        }
        else if (this.type == "rawCrabClaw")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 807, 3, 31, 21, this.invX - (1/2 * 31 * 1.3), this.invY - (1/2 * 21 * 1.3), 31 * 1.3, 21 * 1.3);
        }
        else if (this.type == "butteredCrab")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 873, 3, 13, 11, this.invX - (1/2 * 13 * 1.6), this.invY - (1/2 * 11 * 1.6), 13 * 1.6, 11 * 1.6);
        }
        else if (this.type == "crabChowder")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 889, 5, 11, 8, this.invX - (1/2 * 11 * 1.6), this.invY - (1/2 * 8 * 1.6), 11 * 1.6, 8 * 1.6);
        }
        else if (this.type == "crabBisque")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 904, 5, 11, 8, this.invX - (1/2 * 11 * 1.6), this.invY - (1/2 * 8 * 1.6), 11 * 1.6, 8 * 1.6);
        }
        else if (this.type == "hoilLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 63, 361, 23, 17, this.invX - (1/2 * 23 * 1.6), this.invY - (1/2 * 17 * 1.6), 23 * 1.6, 17 * 1.6);
        }
        else if (this.type == "mudBeetleLeg")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 123, 258, 23, 16, this.invX - (1/2 * 23 * 1.75), this.invY - (1/2 * 16 * 1.75), 23 * 1.75, 16 * 1.75);
        }
        else if (this.type == "rawKoobuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 542, 743, 11, 9, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 9 * 2), 11 * 2, 9 * 2);
        }
        else if (this.type == "koobuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 590, 742, 11, 9, this.invX - (1/2 * 11 * 1.95), this.invY - (1/2 * 9 * 1.95), 11 * 1.95, 9 * 1.95);
        }
        else if (this.type == "koobuPelt")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 561, 742, 20, 9, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 9 * 1.5), 20 * 1.5, 9 * 1.5);
        }
        else if (this.type == "emptyMiterBloodSac")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 96, 222, 17, 17, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 17 * 1), 17 * 1, 17 * 1);
        }
        else if (this.type == "miterBloodSac")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 76, 223, 17, 17, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 17 * 1), 17 * 1, 17 * 1);
        }
        else if (this.type == "miterHide")
        {
            XXX.beginPath();
            XXX.drawImage(troli, 31, 223, 27, 19, this.invX - (1/2 * 27 * 1.2), this.invY - (1/2 * 19 * 1.2), 27 * 1.2, 19 * 1.2);
        }
        else if (this.type == "balkurFang")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 9, 1, 10, 15, this.invX - (1/2 * 10 * 1), this.invY - (1/2 * 15 * 1), 10 * 1, 15 * 1);
        }
        else if (this.type == "theUndyingEdge")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 8, 193, 22, 93, this.invX - (1/2 * 22 * 0.6), this.invY - (1/2 * 93 * 0.6), 22 * 0.6, 93 * 0.6);
        }
        else if (this.type == "spindletrap")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 148, 89, 27, 27, this.invX - (1/2 * 27 * 1.5), this.invY - (1/2 * 27 * 1.5), 27 * 1.5, 27 * 1.5);
        }
        else if (this.type == "jacks")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 269, 45, 19, 18, this.invX - (1/2 * 19 * 1), this.invY - (1/2 * 18 * 1), 19 * 1, 18 * 1);
        }
        else if (this.type == "glowDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 3, 1, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "vrezinDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 22, 2, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "irilDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 43, 1, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "pimberDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 280, 109, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "shomeDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 280, 180, 15, 15, this.invX - (1/2 * 15 * 1.4), this.invY - (1/2 * 15 * 1.4), 15 * 1.4, 15 * 1.4);
        }
        else if (this.type == "dustPouch" || this.type == "pouchOfGlowDust" || this.type == "pouchOfVrezinDust" || this.type == "pouchOfIrilDust" || this.type == "pouchOfPimberDust" || this.type == "pouchOfShomeDust")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 64, 3, 15, 15, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 15 * 1.3), 15 * 1.3, 15 * 1.3);
        }
        else if (this.type == "neevFurCloak")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 681, 1161, 38, 73, this.invX - (1/2 * 38 * 0.95), this.invY - (1/2 * 73 * 0.95), 38 * 0.95, 73 * 0.95);
        }
        else if (this.type == "neevFurBoots")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 723, 1171, 36, 24, this.invX - (1/2 * 36 * 1.15), this.invY - (1/2 * 24 * 1.15), 36 * 1.15, 24 * 1.15);
        }
        else if (this.type == "neevFurGloves")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 745, 1199, 36, 24, this.invX - (1/2 * 36 * 1.15), this.invY - (1/2 * 24 * 1.15), 36 * 1.15, 24 * 1.15);
        }
        else if (this.type == "balkurMeat")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 57, 1, 24, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16), 24, 16);
        }
        else if (this.type == "rawBalkurFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 28, 1, 24, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16), 24, 16);
        }
        else if (this.type == "balkurPelt")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 12, 31, 69, 33, this.invX - (1/2 * 69), this.invY - (1/2 * 33), 69, 33);
        }
        else if (this.type == "balkurLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 743, 388, 51, 34, this.invX - (1/2 * 51 * 0.7), this.invY - (1/2 * 34 * 0.7), 51 * 0.7, 34 * 0.7);
        }
        else if (this.type == "balkurLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 738, 331, 61, 42, this.invX - (1/2 * 61 * 0.7), this.invY - (1/2 * 42 * 0.7), 61 * 0.7, 42 * 0.7);
        }
        else if (this.type == "balkurLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 669, 310, 59, 111, this.invX - (1/2 * 59 * 0.6), this.invY - (1/2 * 111 * 0.6), 59 * 0.6, 111 * 0.6);
        }
        else if (this.type == "meatCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 605, 0, 23, 48, this.invX - (1/2 * 23 * 0.74), this.invY - (1/2 * 48 * 0.74), 23 * 0.74, 48 * 0.74);
        }
        else if (this.type == "vardanianGlaive")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 667, 2, 123, 42, this.invX - (1/2 * 123 * 0.65), this.invY - (1/2 * 42 * 0.65), 123 * 0.65, 42 * 0.65);
        }
        else if (this.type == "kellishSpear")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 503, 7, 79, 34, this.invX - (1/2 * 79 * 1), this.invY - (1/2 * 34 * 1), 79 * 1, 34 * 1);
        }
        else if (this.type == "scimitar")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 337, 14, 66, 33, this.invX - (1/2 * 66 * 0.785), this.invY - (1/2 * 33 * 0.725), 66 * 0.785, 33 * 0.725);
            XXX.drawImage(balkur, 337, 14, 66, 33, this.invX - (1/2 * 66 * 0.785), this.invY - (1/2 * 33 * 0.725), 66 * 0.785, 33 * 0.725);
        }
        else if (this.type == "estoc")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(-1/8 * 2 * Math.PI);
            XXX.drawImage(dolls, 578, 3, 18, 74, - (1/2 * 18), - (1/2 * 74), 18, 74);
            XXX.restore();
        }
        else if (this.type == "ancientFragment")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1423, 198, 17, 18, this.invX - (1/2 * 17 * 1.5), this.invY - (1/2 * 18 * 1.5), 17 * 1.5, 18 * 1.5);
        }
        else if (this.type == "soul")
        {
            this.turn -= 0.314;
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(this.turn);
            XXX.drawImage(mofu, 23, 51, 22, 19, - (1/2 * 22), - (1/2 * 19), 22, 19);
            XXX.restore();
        }
        else if (this.type == "boulchomLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 744, 1115, 30, 45, this.invX - (1/2 * 30 * 1.5), this.invY - (1/2 * 45 * 1.5), 30 * 1.5, 45 * 1.5);
        }
        else if (this.type == "boulchomLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 98, 237, 25, 18, this.invX - (1/2 * 25 * 1.7), this.invY - (1/2 * 18 * 1.7), 25 * 1.7, 18 * 1.7);
        }
        else if (this.type == "boulchomLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 125, 240, 17, 13, this.invX - (1/2 * 17 * 1.7), this.invY - (1/2 * 13 * 1.7), 17 * 1.7, 13 * 1.7);
        }
        else if (this.type == "skolLeatherBoots")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 752, 1057, 37, 32, this.invX - (1/2 * 37 * 1.9), this.invY - (1/2 * 32 * 1.9), 37 * 1.9, 32 * 1.9);
        }
        else if (this.type == "skolLeatherGloves")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 701, 1074, 37, 32, this.invX - (1/2 * 37 * 1.9), this.invY - (1/2 * 32 * 1.9), 37 * 1.9, 32 * 1.9);
        }
        else if (this.type == "skolLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 752, 993, 37, 59, this.invX - (1/2 * 37 * 1.2), this.invY - (1/2 * 59 * 1.2), 37 * 1.2, 59 * 1.2);
        }
        else if (this.type == "skolPelt")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 55, 97, 30, 15, this.invX - (1/2 * 30 * 1.9), this.invY - (1/2 * 15 * 1.9), 30 * 1.9, 15 * 1.9);
        }
        else if (this.type == "rawSkolFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 10, 98, 17, 18, this.invX - (1/2 * 17 * 1.9), this.invY - (1/2 * 18 * 1.9), 17 * 1.9, 18 * 1.9);
        }
        else if (this.type == "skolMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 27, 97, 17, 18, this.invX - (1/2 * 17 * 1.9), this.invY - (1/2 * 18 * 1.9), 17 * 1.9, 18 * 1.9);
        }
        else if (this.type == "steugiurneFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 73, 348, 12, 13, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 13 * 2), 12 * 2, 13 * 2);
        }
        else if (this.type == "steugiurneFrond")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 32, 348, 27, 13, this.invX - (1/2 * 27 * 2), this.invY - (1/2 * 13 * 2), 27 * 2, 13 * 2);
        }
        else if (this.type == "vorlymFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 139, 356, 13, 18, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 18 * 2), 13 * 2, 18 * 2);
        }
        else if (this.type == "brightbloomFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 872, 330, 22, 21, this.invX - (1/2 * 22 * 2.5), this.invY - (1/2 * 21 * 2.5), 22 * 2.5, 21 * 2.5);
        }
        else if (this.type == "galloshFlower")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 10, 342, 10, 11, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 11 * 2), 10 * 2, 11 * 2);
        }
        else if (this.type == "hydroraSalve")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 833, 402, 10, 15, this.invX - (1/2 * 10 * 1.5), this.invY - (1/2 * 15 * 1.5), 10 * 1.5, 15 * 1.5);
        }
        else if (this.type == "thalisLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 78, 321, 10, 11, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 11 * 2), 10 * 2, 11 * 2);
        }
        else if (this.type == "kofkeLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 76, 296, 17, 16, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 16 * 2), 17 * 2, 16 * 2);
        }
        else if (this.type == "blilArm")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 20, 269, 14, 15, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 15 * 2), 14 * 2, 15 * 2);
        }
        else if (this.type == "rawRabbitFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 664, 172, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 687, 171, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitPelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 593, 174, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "rabbitFoot")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 618, 176, 8, 7, this.invX - (1/2 * 8 * 1.7), this.invY - (1/2 * 7 * 1.7), 8 * 1.7, 7 * 1.7);
        }
        else if (this.type == "rabbitFootNecklace")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 635, 166, 19, 21, this.invX - (1/2 * 19 * 1.4), this.invY - (1/2 * 21 * 1.4), 19 * 1.4, 21 * 1.4);
        }
        else if (this.type == "vel")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 756, 167, 12, 11, this.invX - (1/2 * 12 * 1.6), this.invY - (1/2 * 11 * 1.6), 12 * 1.6, 11 * 1.6);
        }
        else if (this.type == "fletterWing")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 742, 165, 8, 14, this.invX - (1/2 * 8 * 1.6), this.invY - (1/2 * 14 * 1.6), 8 * 1.6, 14 * 1.6);
        }
        else if (this.type == "etnaEggSac")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 834, 374, 10, 10, this.invX - (1/2 * 10 * 3.7), this.invY - (1/2 * 10 * 3.7), 10 * 3.7, 10 * 3.7);
        }
        else if (this.type == "etnaVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 831, 359, 12, 10, this.invX - (1/2 * 12 * 1.7), this.invY - (1/2 * 10 * 1.7), 12 * 1.7, 10 * 1.7);
        }
        else if (this.type == "rawBoulchomFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 61, 238, 15, 14, this.invX - (1/2 * 15 * 1.7), this.invY - (1/2 * 14 * 1.7), 15 * 1.7, 14 * 1.7);
        }
        else if (this.type == "boulchomMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 80, 238, 15, 14, this.invX - (1/2 * 15 * 1.7), this.invY - (1/2 * 14 * 1.7), 15 * 1.7, 14 * 1.7);
        }
        else if (this.type == "boulchomLung")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 44, 238, 15, 14, this.invX - (1/2 * 15 * 1.7), this.invY - (1/2 * 14 * 1.7), 15 * 1.7, 14 * 1.7);
        }
        else if (this.type == "boulchomPelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 12, 238, 26, 15, this.invX - (1/2 * 26 * 1.7), this.invY - (1/2 * 15 * 1.7), 26 * 1.7, 15 * 1.7);
        }
        else if (this.type == "clayBowl" || this.type == "woodenBowl")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 2, 3, 18, 12, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "bowlOfMushroomStew")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 19, 5, 14, 9, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "bowlOfSanthPorridge")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 34, 3, 18, 12, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "bowlOfBoiledHarst" || this.type == "bowlOfCreamyHarst")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 3, 26, 18, 12, this.invX - (1/2 * 18 * 1.6), this.invY - (1/2 * 12 * 1.6), 18 * 1.6, 12 * 1.6);
        }
        else if (this.type == "haeflower")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 19, 274, 32, 46, this.invX - (1/2 * 32 * 0.9), this.invY - (1/2 * 46 * 0.9), 32 * 0.9, 46 * 0.9);
        }
        else if (this.type == "haeflowerPollen")
        {
            XXX.beginPath();
            XXX.drawImage(zapa, 275, 215, 29, 25, this.invX - (1/2 * 29 * 0.4), this.invY - (1/2 * 25 * 0.4), 29 * 0.4, 25 * 0.4);
        }
        else if (this.type == "stone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1698, 528, 29, 27, this.invX - (1/2 * 29), this.invY - (1/2 * 27), 29, 27);
        }
        else if (this.type == "darkStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1666, 466, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
        }
        else if (this.type == "ashStone")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1561, 529, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
        }
        else if (this.type == "turquoise")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1368, 526, 31, 25, this.invX - (1/2 * 31 * 0.3), this.invY - (1/2 * 25 * 0.3), 31 * 0.3, 25 * 0.3);
        }
        else if (this.type == "aquamarine")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1248, 526, 21, 28, this.invX - (1/2 * 21 * 0.3), this.invY - (1/2 * 28 * 0.3), 21 * 0.3, 28 * 0.3);
        }
        else if (this.type == "ruby")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1440, 527, 25, 26, this.invX - (1/2 * 25 * 0.3), this.invY - (1/2 * 26 * 0.3), 25 * 0.3, 26 * 0.3);
        }
        else if (this.type == "emerald")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1407, 523, 23, 35, this.invX - (1/2 * 23 * 0.3), this.invY - (1/2 * 35 * 0.3), 23 * 0.3, 35 * 0.3);
        }
        else if (this.type == "sapphire")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1328, 524, 36, 33, this.invX - (1/2 * 36 * 0.3), this.invY - (1/2 * 33 * 0.3), 36 * 0.3, 33 * 0.3);
        }
        else if (this.type == "coal")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1531, 529, 29, 27, this.invX - (1/2 * 29), this.invY - (1/2 * 27), 29, 27);
        }
        else if (this.type == "ironOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1761, 464, 38, 26, this.invX - (1/2 * 38), this.invY - (1/2 * 26), 38, 26);
        }
        else if (this.type == "rawSilver")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1471, 524, 27, 35, this.invX - (1/2 * 27), this.invY - (1/2 * 35), 27, 35);
        }
        else if (this.type == "rawGold")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1211, 522, 27, 35, this.invX - (1/2 * 27), this.invY - (1/2 * 35), 27, 35);
        }
        else if (this.type == "silver")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1359, 562, 29, 18, this.invX - (1/2 * 29), this.invY - (1/2 * 18), 29, 18);
        }
        else if (this.type == "gold")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1323, 562, 29, 18, this.invX - (1/2 * 29), this.invY - (1/2 * 18), 29, 18);
        }
        else if (this.type == "jvostranOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1623, 528, 29, 27, this.invX - (1/2 * 29), this.invY - (1/2 * 27), 29, 27);
        }
        else if (this.type == "pureJvostranOre")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1328, 524, 35, 33, this.invX - (1/2 * 35 * 0.8), this.invY - (1/2 * 33 * 0.8), 35 * 0.8, 33 * 0.8);
        }
        else if (this.type == "jvostran")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1285, 563, 30, 17, this.invX - (1/2 * 30), this.invY - (1/2 * 17), 30, 17);
        }
        else if (this.type == "twiceForgedSteel")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1427, 561, 30, 20, this.invX - (1/2 * 30), this.invY - (1/2 * 20), 30, 20);
        }
        else if (this.type == "thriceForgedSteel")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1393, 561, 30, 20, this.invX - (1/2 * 30), this.invY - (1/2 * 20), 30, 20);
        }
        else if (this.type == "svehnsShipment" || this.type == "svehnsLoot")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 104, 213, 36, 37, this.invX - (1/2 * 36 * 1.4), this.invY - (1/2 * 37 * 1.4), 36 * 1.4, 37 * 1.4);
        }
        else if (this.type == "svehnsLootEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 95, 260, 51, 42, this.invX - (1/2 * 51 * 1.4), this.invY - (1/2 * 42 * 1.4), 51 * 1.4, 42 * 1.4);
        }
        else if (this.type == "cero")
        {
            XXX.beginPath();
            XXX.drawImage(zer0, 344, 8, 20, 50, this.invX - (1/2 * 20 * 1.5 + 4), this.invY - (1/2 * 50 * 1.5), 20 * 1.5, 50 * 1.5);
        }
        else if (this.type == "rawTunskFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 130, 6, 10, 9, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 9 * 1.85), 10 * 1.85, 9 * 1.85);
        }
        else if (this.type == "tunskMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 130, 15, 10, 9, this.invX - (1/2 * 10 * 1.85), this.invY - (1/2 * 9 * 1.85), 10 * 1.85, 9 * 1.85);
        }
        else if (this.type == "anterInnards")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 77, 371, 11, 10, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "anterAcid")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 93, 371, 11, 10, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "anterShell")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 75, 530, 24, 16, this.invX - (1/2 * 24 * 1.6), this.invY - (1/2 * 16 * 1.6), 24 * 1.6, 16 * 1.6);
        }
        else if (this.type == "anterMandibles")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 77, 548, 20, 24, this.invX - (1/2 * 20 * 1.5), this.invY - (1/2 * 24 * 1.5), 20 * 1.5, 24 * 1.5);
        }
        else if (this.type == "anterShellArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 70, 389, 34, 52, this.invX - (1/2 * 34 * 1.5), this.invY - (1/2 * 52 * 1.5), 34 * 1.5, 52 * 1.5);
        }
        else if (this.type == "smlGlutidOoze")
        {
            var sizeMult = 1;

            XXX.beginPath();
            XXX.drawImage(theCrack, 313, 268, 40, 37, this.invX - (1/2 * 40 * sizeMult), this.invY - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
        }
        else if (this.type == "medGlutidOoze")
        {
            var sizeMult = 1.5;

            XXX.beginPath();
            XXX.drawImage(theCrack, 313, 268, 40, 37, this.invX - (1/2 * 40 * sizeMult), this.invY - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
        }
        else if (this.type == "lrgGlutidOoze")
        {
            var sizeMult = 2;

            XXX.beginPath();
            XXX.drawImage(theCrack, 313, 268, 40, 37, this.invX - (1/2 * 40 * sizeMult), this.invY - (1/2 * 37 * sizeMult), 40 * sizeMult, 37 * sizeMult);
        }
        else if (this.type == "pelcridOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 650, 95, 32, 22, this.invX - (1/2 * 32 * 1.7), this.invY - (1/2 * 22 * 1.7), 32 * 1.7, 22 * 1.7);
        }
        else if (this.type == "smlOolidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 94, 171, 37, 35, this.invX - (1/2 * 37), this.invY - (1/2 * 35), 37, 35);
        }
        else if (this.type == "medOolidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 94, 171, 37, 35, this.invX - (1/2 * 37 * 1.5), this.invY - (1/2 * 35 * 1.5), 37 * 1.5, 35 * 1.5);
        }
        else if (this.type == "lrgOolidOozeRemains")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 94, 171, 37, 35, this.invX - (1/2 * 37 * 2), this.invY - (1/2 * 35 * 2), 37 * 2, 35 * 2);
        }
        else if (this.type == "rawTilkFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 950, 236, 27, 21, this.invX - (1/2 * 27), this.invY - (1/2 * 21), 27, 21);
        }
        else if (this.type == "tilkMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 918, 236, 27, 21, this.invX - (1/2 * 27), this.invY - (1/2 * 21), 27, 21);
        }
        else if (this.type == "tilkTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 982, 238, 27, 21, this.invX - (1/2 * 27), this.invY - (1/2 * 21), 27, 21);
        }
        else if (this.type == "lrgTilkTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 982, 238, 27, 21, this.invX - (1/2 * 27 * 1.4), this.invY - (1/2 * 21 * 1.4), 27 * 1.4, 21 * 1.4);
        }
        else if (this.type == "giantTilkTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 982, 238, 27, 21, this.invX - (1/2 * 27 * 3), this.invY - (1/2 * 21 * 3), 27 * 3, 21 * 3);
        }
        else if (this.type == "wegRoot")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 255, 58, 14, 19, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 19 * 2), 14 * 2, 19 * 2);
        }
        else if (this.type == "roastedWegRoot")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 280, 83, 14, 19, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 19 * 2), 14 * 2, 19 * 2);
        }
        else if (this.type == "roastedWegRootChunks")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 278, 60, 17, 12, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 12 * 2), 17 * 2, 12 * 2);
        }
        else if (this.type == "palntRoot")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 205, 473, 10, 15, this.invX - (1/2 * 10 * 1.4), this.invY - (1/2 * 15 * 1.4), 10 * 1.4, 15 * 1.4);
        }
        else if (this.type == "boiledPalntRoot")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 206, 478, 9, 9, this.invX - (1/2 * 9 * 1.5), this.invY - (1/2 * 9 * 1.5), 9 * 1.5, 9 * 1.5);
        }
        else if (this.type == "palntFlower")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 185, 472, 9, 8, this.invX - (1/2 * 9 * 1.35), this.invY - (1/2 * 8 * 1.35), 9 * 1.35, 8 * 1.35);
        }
        else if (this.type == "vardanianClub")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 319, 453, 12, 38, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 38 * 1.4), 12 * 1.4, 38 * 1.4);
        }
        else if (this.type == "swampWalkerArmour")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 18, 581, 35, 65, this.invX - (1/2 * 35 * 1.1), this.invY - (1/2 * 65 * 1.1), 35 * 1.1, 65 * 1.1);
        }
        else if (this.type == "thenganPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 72, 581, 35, 65, this.invX - (1/2 * 35 * 1.1), this.invY - (1/2 * 65 * 1.1), 35 * 1.1, 65 * 1.1);
        }
        else if (this.type == "northernPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 38, 38, 35, 57, this.invX - (1/2 * 35 * 1.26), this.invY - (1/2 * 57 * 1.26), 35 * 1.26, 57 * 1.26);
        }
        else if (this.type == "ancientArmour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1828, 225, 43, 61, this.invX - (1/2 * 43 * 1), this.invY - (1/2 * 61 * 1), 43 * 1, 61 * 1);
        }
        else if (this.type == "wightbloomBerries")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 197, 528, 18, 17, this.invX - (1/2 * 18 * 1.5), this.invY - (1/2 * 17 * 1.5), 18 * 1.5, 17 * 1.5);
        }
        else if (this.type == "ishBranch")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 865, 550, 18, 21, this.invX - (1/2 * 18), this.invY - (1/2 * 21), 18, 21);
        }
        else if (this.type == "itlinBranch")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 477, 103, 12, 10, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 10 * 2), 12 * 2, 10 * 2);
        }
        else if (this.type == "butterMellowFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 256, 39, 14, 16, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 16 * 2), 14 * 2, 16 * 2);
        }
        else if (this.type == "mufBall")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 267, 19, 7, 7, this.invX - (1/2 * 7 * 2), this.invY - (1/2 * 7 * 2), 7 * 2, 7 * 2);
        }
        else if (this.type == "mufFiber")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 335, 23, 15, 12, this.invX - (1/2 * 15 * 2), this.invY - (1/2 * 12 * 2), 15 * 2, 12 * 2);
        }
        else if (this.type == "mufCloth")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 315, 10, 11, 13, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 13 * 2), 11 * 2, 13 * 2);
        }
        else if (this.type == "tenicFlower")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 295, 23, 14, 14, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 14 * 2), 14 * 2, 14 * 2);
        }
        else if (this.type == "tenicLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 279, 24, 14, 14, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 14 * 2), 14 * 2, 14 * 2);
        }
        else if (this.type == "tenicPaste")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 302, 24, 4, 6, this.invX - (1/2 * 4 * 2.35), this.invY - (1/2 * 6 * 2.25), 4 * 2.35, 6 * 2.25);
        }
        else if (this.type == "ardilFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 49, 299, 30, 42, this.invX - (1/2 * 30 * 1.65), this.invY - (1/2 * 42 * 1.65), 30 * 1.65, 42 * 1.65);
        }
        else if (this.type == "ardilFurSkirt")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 48, 256, 30, 42, this.invX - (1/2 * 30 * 1.65), this.invY - (1/2 * 42 * 1.65), 30 * 1.65, 42 * 1.65);
        }
        else if (this.type == "ardilFurGloves")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 58, 233, 15, 17, this.invX - (1/2 * 15 * 1.65), this.invY - (1/2 * 17 * 1.65), 15 * 1.65, 17 * 1.65);
        }
        else if (this.type == "mofuTribalWear")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 4, 137, 38, 60, this.invX - (1/2 * 38 * 1.15), this.invY - (1/2 * 60 * 1.15), 38 * 1.15, 60 * 1.15);
        }
        else if (this.type == "mofuRunnerOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 50, 137, 37, 60, this.invX - (1/2 * 37 * 1.15), this.invY - (1/2 * 60 * 1.15), 37 * 1.15, 60 * 1.15);
        }
        else if (this.type == "mofuMatriarchHeaddress")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 5, 43, 35, 67, this.invX - (1/2 * 35 * 1.15), this.invY - (1/2 * 67 * 1.15), 35 * 1.15, 67 * 1.15);
        }
        else if (this.type == "jarOfUlgoyNectar")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 287, 347, 11, 16, this.invX - (1/2 * 17.5), this.invY - (1/2 * 24), 17.5, 24);
        }
        else if (this.type == "ulgoyLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 305, 348, 18, 14, this.invX - (1/2 * 18 * 1.25), this.invY - (1/2 * 14 * 1.25), 18 * 1.25, 14 * 1.25);
        }
        else if (this.type == "mofuFive")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 1, 1, 27, 24, this.invX - (1/2 * 27 * 1.2), this.invY - (1/2 * 24 * 1.2), 27 * 1.2, 24 * 1.2);
        }
        else if (this.type == "theCorpseRing")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 48, 44, 13, 9, this.invX - (1/2 * 13 * 1.25), this.invY - (1/2 * 9 * 1.25), 13 * 1.25, 9 * 1.25);
        }
        else if (this.type == "ironRing")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 32, 22, 11, 11, this.invX - (1/2 * 11 * 1.25), this.invY - (1/2 * 11 * 1.25), 11 * 1.25, 11 * 1.25);
        }
        else if (this.type == "rawArdilFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 50, 687, 8, 8, this.invX - (1/2 * 8), this.invY - (1/2 * 8), 8, 8);
        }
        else if (this.type == "ardilMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 82, 686, 8, 8, this.invX - (1/2 * 8), this.invY - (1/2 * 8), 8, 8);
        }
        else if (this.type == "ardilPelt")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 928, 701, 29, 20, this.invX - (1/2 * 29), this.invY - (1/2 * 20), 29, 20);
        }
        else if (this.type == "lizardTail")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1544, 29, 10, 10, this.invX - (1/2 * 14), this.invY - (1/2 * 14), 14, 14);
        }
        else if (this.type == "smashStick" || this.type == "burningSmashStick")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(9/10 * Math.PI);
            XXX.drawImage(mofu, 189, 86, 23, 44, - (1/2 * 23 * 1.5), - (1/2 * 44 * 1.5), 23 * 1.5, 44 * 1.5);
            XXX.restore();
        }
        else if (this.type == "pumpkinDough")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 73, 4, 10, 8, this.invX - (1/2 * 10 * 1.8), this.invY - (1/2 * 8 * 1.8), 10 * 1.8, 8 * 1.8);
        }
        else if (this.type == "pumpkinBread")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 56, 29, 16, 11, this.invX - (1/2 * 16 * 1.8), this.invY - (1/2 * 11 * 1.8), 16 * 1.8, 11 * 1.8);
        }
        else if (this.type == "butteredPumpkinBread")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 70, 2, 19, 18, this.invX - (1/2 * 19 * 1.8), this.invY - (1/2 * 18 * 1.8), 19 * 1.8, 18 * 1.8);
        }
        else if (this.type == "velPumpkinBread")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 604, 1202, 20, 19, this.invX - (1/2 * 20 * 1.8), this.invY - (1/2 * 19 * 1.8), 20 * 1.8, 19 * 1.8);
        }
        else if (this.type == "harstBread")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1395, 12, 15, 12, this.invX - (1/2 * 15 * 1.8), this.invY - (1/2 * 12 * 1.8), 15 * 1.8, 12 * 1.8);
        }
        else if (this.type == "butteredHarstBread")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1392, 27, 17, 17, this.invX - (1/2 * 17 * 1.8), this.invY - (1/2 * 17 * 1.8), 17 * 1.8, 17 * 1.8);
        }
        else if (this.type == "velHarstBread")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 601, 1125, 18, 17, this.invX - (1/2 * 18 * 1.8), this.invY - (1/2 * 17 * 1.8), 18 * 1.8, 17 * 1.8);
        }
        else if (this.type == "harstDough")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1412, 11, 11, 10, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
        }
        else if (this.type == "harstFlour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1428, 12, 11, 15, this.invX - (1/2 * 11), this.invY - (1/2 * 15), 11, 15);
        }
        else if (this.type == "bagOfHarstFlour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1443, 11, 23, 29, this.invX - (1/2 * 23), this.invY - (1/2 * 29), 23, 29);
        }
        else if (this.type == "honey")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 34, 244, 18, 21, this.invX - (1/2 * 18), this.invY - (1/2 * 21), 18, 21);
        }
        else if (this.type == "bee")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 12, 338, 14, 13, this.invX - (1/2 * 14 * 2.3), this.invY - (1/2 * 13 * 2.3), 14 * 2.3, 13 * 2.3);
        }
        else if (this.type == "wyrExtract")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1722, 200, 13, 17, this.invX - (1/2 * 13), this.invY - (1/2 * 17), 13, 17);
        }
        else if (this.type == "blackBearLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 689, 2, 29, 46, this.invX - (1/2 * 29 * 1.5), this.invY - (1/2 * 46 * 1.5), 29 * 1.5, 46 * 1.5);
        }
        else if (this.type == "blackBearFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 654, 2, 29, 46, this.invX - (1/2 * 29 * 1.5), this.invY - (1/2 * 46 * 1.5), 29 * 1.5, 46 * 1.5);
        }
        else if (this.type == "wellAxle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 233, 350, 20, 17, this.invX - (1/2 * 20 * 1.6), this.invY - (1/2 * 17 * 1.6), 20 * 1.6, 17 * 1.6);
        }
        else if (this.type == "wellCord")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 209, 326, 23, 22, this.invX - (1/2 * 23 * 1.6), this.invY - (1/2 * 22 * 1.6), 23 * 1.6, 22 * 1.6);
        }
        else if (this.type == "wellStone")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 239, 332, 15, 10, this.invX - (1/2 * 15 * 1.6), this.invY - (1/2 * 10 * 1.6), 15 * 1.6, 10 * 1.6);
        }
        else if (this.type == "wellWinch")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 213, 350, 17, 8, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 8 * 1.6), 17 * 1.6, 8 * 1.6);
        }
        else if (this.type == "blunderbuss")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1305, 12, 13, 35, this.invX - (1/2 * 13 * 1.65), this.invY - (1/2 * 35 * 1.65), 13 * 1.65, 35 * 1.65);
        }
        else if (this.type == "musket")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1334, 11, 11, 36, this.invX - (1/2 * 11 * 1.65), this.invY - (1/2 * 36 * 1.65), 11 * 1.65, 36 * 1.65);
        }
        else if (this.type == "shotShooter")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1334, 11, 11, 28, this.invX - (1/2 * 11 * 1.6), this.invY - (1/2 * 28 * 1.6), 11 * 1.6, 28 * 1.6);
        }
        else if (this.type == "bullet")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1321, 16, 5, 5, this.invX - (1/2 * 8), this.invY - (1/2 * 8), 8, 8);
        }
        else if (this.type == "blackPowder" || this.type == "pyromothPowder")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1350, 13, 13, 11, this.invX - (1/2 * 13), this.invY - (1/2 * 11), 13, 11);
        }
        else if (this.type == "cutlass")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1369, 10, 19, 37, this.invX - (1/2 * 19 * 1.65), this.invY - (1/2 * 37 * 1.65), 19 * 1.65, 37 * 1.65);
        }
        else if (this.type == "brokenHyelingCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 223, 83, 31, 34, this.invX - (1/2 * 31 * 1.6), this.invY - (1/2 * 34 * 1.6), 31 * 1.6, 34 * 1.6);
        }
        else if (this.type == "hyelingClaws")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 98, 53, 22, 19, this.invX - (1/2 * 22 * 1.6), this.invY - (1/2 * 19 * 1.6), 22 * 1.6, 19 * 1.6);
        }
        else if (this.type == "rawHyelingFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 223, 600, 14, 18, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 18 * 1.6), 14 * 1.6, 18 * 1.6);
        }
        else if (this.type == "hyelingMeat")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 241, 601, 14, 18, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 18 * 1.6), 14 * 1.6, 18 * 1.6);
        }
        else if (this.type == "hyelingArmour")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 197, 30, 17, 46, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 46 * 1.6), 17 * 1.6, 46 * 1.6);
        }
        else if (this.type == "golgemoffFeelers")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 965, 266, 17, 16, this.invX - (1/2 * 17), this.invY - (1/2 * 16), 17, 16);
        }
        else if (this.type == "golgemoffMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 983, 264, 17, 16, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 16 * 1.6), 17 * 1.6, 16 * 1.6);
        }
        else if (this.type == "rawGolgemoffFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 999, 264, 17, 16, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 16 * 1.6), 17 * 1.6, 16 * 1.6);
        }
        else if (this.type == "adhesive")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 999, 264, 17, 16, this.invX - (1/2 * 17 * 1.6), this.invY - (1/2 * 16 * 1.6), 17 * 1.6, 16 * 1.6);
            XXX.beginPath();
            XXX.drawImage(candlewic, 23, 125, 13, 12, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 12 * 2), 13 * 2, 12 * 2);
            XXX.beginPath();
            XXX.drawImage(mufmuf, 302, 24, 4, 6, this.invX - (1/2 * 4 * 2.2), this.invY - (1/2 * 6 * 2.1), 4 * 2.2, 6 * 2.1);
        }
        else if (this.type == "rawAvrakFlesh" || this.type == "rawEvrakFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 139, 2350, 39, 29, this.invX - (1/2 * 39 * 0.8), this.invY - (1/2 * 29 * 0.8), 39 * 0.8, 29 * 0.8);
        }
        else if (this.type == "avrakMeat" || this.type == "evrakMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 141, 2394, 39, 29, this.invX - (1/2 * 39 * 0.8), this.invY - (1/2 * 29 * 0.8), 39 * 0.8, 29 * 0.8);
        }
        else if (this.type == "avrakHide")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 142, 2287, 41, 50, this.invX - (1/2 * 41 * 0.6), this.invY - (1/2 * 50 * 0.6), 41 * 0.6, 50 * 0.6);
        }
        else if (this.type == "evrakHide")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 62, 2314, 59, 50, this.invX - (1/2 * 59 * 0.6), this.invY - (1/2 * 50 * 0.6), 59 * 0.6, 50 * 0.6);
        }
        else if (this.type == "avrakLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 8, 2091, 66, 83, this.invX - (1/2 * 66 * 0.85), this.invY - (1/2 * 83 * 0.85), 66 * 0.85, 83 * 0.85);
        }
        else if (this.type == "evrakLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 18, 2002, 47, 80, this.invX - (1/2 * 47 * 0.85), this.invY - (1/2 * 80 * 0.85), 47 * 0.85, 80 * 0.85);
        }
        else if (this.type == "neevFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 148, 67, 21, 17, this.invX - (1/2 * 21 * 1.25), this.invY - (1/2 * 17 * 1.25), 21 * 1.25, 17 * 1.25);
        }
        else if (this.type == "neevFur")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 176, 64, 35, 25, this.invX - (1/2 * 35 * 1.25), this.invY - (1/2 * 25 * 1.25), 35 * 1.25, 25 * 1.25);
        }
        else if (this.type == "ogardPerfume")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 50, 4, 15, 19, this.invX - (1/2 * 15), this.invY - (1/2 * 19), 15, 19);
        }
        else if (this.type == "driedTechiLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 35, 6, 11, 16, this.invX - (1/2 * 11), this.invY - (1/2 * 16), 11, 16);
        }
        else if (this.type == "ogard")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 36, 28, 15, 16, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 16 * 1.3), 15 * 1.3, 16 * 1.3);
        }
        else if (this.type == "groundOgard")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 37, 47, 16, 14, this.invX - (1/2 * 16), this.invY - (1/2 * 14), 16, 14);
        }
        else if (this.type == "ogardPollen")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 57, 50, 9, 9, this.invX - (1/2 * 9 * 1.3), this.invY - (1/2 * 9 * 1.3), 9 * 1.3, 9 * 1.3);
        }
        else if (this.type == "cloth" || this.type == "dyedMufCloth" || this.type == "horseCloth")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(5/8 * 2 * Math.PI);
            XXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 * 1.5), - (1/2 * 10 * 1.5), 29 * 1.5, 10 * 1.5);
            XXX.restore();
        }
        else if (this.type == "culprisBandage" || this.type == "laicaumBandage")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(3/8 * 2 * Math.PI);
            XXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 / 1.25), - (1/2 * 10 / 1.25), 29 / 1.25, 10 / 1.25);
            XXX.restore();
        }
        else if (this.type == "naapridFiber" || this.type == "varnFiber" || this.type == "hoffalgreFiber")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 85, 46, 10, 18, this.invX - (1/2 * 10 * 1.65), this.invY - (1/2 * 18 * 1.65), 10 * 1.65, 18 * 1.65);
        }
        else if (this.type == "tent")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 1, 1, 32, 32, this.invX - (1/2 * 32 * 1.5), this.invY - (1/2 * 32 * 1.5), 32 * 1.5, 32 * 1.5);
        }
        else if (this.type == "neculaisEar")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 71, 48, 9, 12, this.invX - (1/2 * 9 * 1.4), this.invY - (1/2 * 12 * 1.4), 9 * 1.4, 12 * 1.4);
        }
        else if (this.type == "natureCall")
        {
            XXX.beginPath();
            XXX.drawImage(horde1, 529, 36, 88, 84, this.invX - (1/2 * 88 * 0.2), this.invY - (1/2 * 84 * 0.2), 88 * 0.2, 84 * 0.2);
        }
        else if (this.type == "berulnToothNecklace")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 96, 3, 14, 21, this.invX - (1/2 * 14 * 1.2), this.invY - (1/2 * 21 * 1.2), 14 * 1.2, 21 * 1.2);
        }
        else if (this.type == "techiLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 83, 147, 13, 15, this.invX - (1/2 * 13), this.invY - (1/2 * 15), 13, 15);
        }
        else if (this.type == "bucketOfPluttJuice" || this.type == "bucketOfHotPluttBerryCider" )
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 87, 66, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
        }
        else if (this.type == "pluttJuicePintGlass" || this.type == "pluttCiderPintGlass" )
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 1, 15, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
        }
        else if (this.type == "glassBottle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 173, 32, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
        }
        else if (this.type == "glassBottleOfWater")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 149, 31, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
        }
        else if (this.type == "glassBottleOfPluttWine")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 45, 208, 12, 22, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 22 * 2), 12 * 2, 22 * 2);
        }
        else if (this.type == "pluttWine")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 45, 181, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
        }
        else if (this.type == "bushkaBerries" || this.type == "salt")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 23, 125, 13, 12, this.invX - (1/2 * 13 * 1.15), this.invY - (1/2 * 12 * 1.15), 13 * 1.15, 12 * 1.5);
        }
        else if (this.type == "bushkaLeaves")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 3, 118, 14, 15, this.invX - (1/2 * 14 * 1.15), this.invY - (1/2 * 15 * 1.15), 14 * 1.15, 15 * 1.15);
        }
        else if (this.type == "beesWax" || this.type == "torperWax")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 1, 2, 12, 13, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 13 * 1.4), 12 * 1.4, 13 * 1.4);
        }
        else if (this.type == "oilLantern" || this.type == "oilLantern4" || this.type == "oilLantern3" || this.type == "oilLantern2" || this.type == "oilLantern1" || this.type == "oilLanternEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 48, 1, 11, 27, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 27 * 1.2), 11 * 1.2, 27 * 1.2);
        }
        else if (this.type == "oilLamp" || this.type == "oilLamp2" || this.type == "oilLamp1" || this.type == "oilLampEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 14, 17, 12, 15, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 15 * 1.2), 12 * 1.2, 15 * 1.2);
        }
        else if (this.type == "vardanianLamp" || this.type == "vardanianLamp2" || this.type == "vardanianLamp1" || this.type == "vardanianLampEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(gent, 24, 217, 20, 34, this.invX - (1/2 * 20 * 1), this.invY - (1/2 * 34 * 1), 20 * 1, 34 * 1);
        }
        else if (this.type == "jackOLantern" || this.type == "jackOLantern2" || this.type == "jackOLantern1" || this.type == "jackOLanternEmpty")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 82, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
        }
        else if (this.type == "pumpkin")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 64, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
        }
        else if (this.type == "roastedPumpkin")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 83, 23, 16, 18, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 18 * 1.2), 16 * 1.2, 18 * 1.2);
        }
        else if (this.type == "candle")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 14, 1, 11, 16, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 16 * 1.2), 11 * 1.2, 16 * 1.2);
        }
        else if (this.type == "candle2")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 25, 1, 12, 13, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 13 * 1.2), 12 * 1.2, 13 * 1.2);
        }
        else if (this.type == "candle1")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 35, 1, 12, 10, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 10 * 1.2), 12 * 1.2, 10 * 1.2);
        }
        else if (this.type == "pluttMoffling")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 1, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
        }
        else if (this.type == "akerMoffling")
        {
            XXX.beginPath();
            XXX.drawImage(candlewic, 22, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
        }
        else if (this.type == "rawMofflingFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.5, 14 * 0.8);
        }
        else if (this.type == "mofflingMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.5, 14 * 0.8);
        }
        else if (this.type == "rawMofuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
        }
        else if (this.type == "mofuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17), this.invY - (1/2 * 14), 17, 14);
        }
        else if (this.type == "rawLargeMofuFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
        }
        else if (this.type == "largeMofuMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
        }
        else if (this.type == "fattyMofuLiver")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 114, 67, 9, 9, this.invX - (1/2 * 9 * 2), this.invY - (1/2 * 9 * 2), 9 * 2, 9 * 2);
        }
        else if (this.type == "mofuFeather")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 139, 54, 11, 13, this.invX - (1/2 * 11), this.invY - (1/2 * 13), 11, 13);
        }
        else if (this.type == "mofuFoot")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 122, 56, 11, 7, this.invX - (1/2 * 11), this.invY - (1/2 * 7), 11, 7);
        }
        else if (this.type == "mofuEgg")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 109, 54, 8, 11, this.invX - (1/2 * 8), this.invY - (1/2 * 11), 8, 11);
        }
        else if (this.type == "cookedMofuEgg")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 96, 54, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
        }
        else if (this.type == "fermentedMofuEgg")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 96, 45, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
        }
        else if (this.type == "rawGrushFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1208, 27, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
        }
        else if (this.type == "grushMeat")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1207, 43, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
        }
        else if (this.type == "grushFur")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1204, 7, 18, 16, this.invX - (1/2 * 18), this.invY - (1/2 * 16), 18, 16);
        }
        else if (this.type == "grushFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 1249, 69, 31, 52, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 52 * 1.2), 31 * 1.2, 52 * 1.2);
        }
        else if (this.type == "iron")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1212, 561, 28, 18, this.invX - (1/2 * 28), this.invY - (1/2 * 18), 28, 18);
        }
        else if (this.type == "steel")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1461, 563, 28, 15, this.invX - (1/2 * 28), this.invY - (1/2 * 15), 28, 15);
        }
        else if (this.type == "santhGrain")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2943, 205, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "santhFlour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2977, 204, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "emptyBagSanth" || this.type == "emptyBagHarst")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 3016, 201, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
        }
        else if (this.type == "bagOfSanthFlour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 3050, 200, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
        }
        else if (this.type == "kellishSanthDough" || this.type == "nirwadenPastryDough")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17 * 2.6), this.invY - (1/2 * 14 * 2.6), 17 * 2.6, 14 * 2.6);
        }
        else if (this.type == "naapridButter" || this.type == "waantiButter")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17), this.invY - (1/2 * 14), 17, 14);
        }
        else if (this.type == "santhBread")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2970, 225, 23, 23, this.invX - (1/2 * 23), this.invY - (1/2 * 23), 23, 23);
        }
        else if (this.type == "butteredSanthBread")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2965, 250, 32, 26, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
        }
        else if (this.type == "velSanthBread")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 601, 1162, 29, 26, this.invX - (1/2 * 29), this.invY - (1/2 * 26), 29, 26);
        }
        else if (this.type == "healingSalve")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2943, 252, 11, 17, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 17 * 1.5), 11 * 1.5, 17 * 1.5);
        }
        else if (this.type == "carrot")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2864, 68, 18, 19, this.invX - (1/2 * 18), this.invY - (1/2 * 19), 18, 19);
        }
        else if (this.type == "suuliMelon")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2940, 67, 16, 22, this.invX - (1/2 * 16), this.invY - (1/2 * 22), 16, 22);
        }
        else if (this.type == "suuliMelonSlice")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2963, 68, 16, 22, this.invX - (1/2 * 14), this.invY - (1/2 * 20), 14, 20);
        }
        else if (this.type == "potato")
        {
            if (player.potatoInvisibility != true)
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2770, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
        }
        else if (this.type == "cookedPotato")
        {
            if (player.potatoInvisibility != true)
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2782, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
        }
        else if (this.type == "nechromanticDust")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 477, 922, 72, 66, this.invX - (1/2 * 72 * 0.35), this.invY - (1/2 * 66 * 0.35), 72 * 0.35, 66 * 0.35);
        }
        else if (this.type == "clay")
        {
            XXX.beginPath();
            XXX.drawImage(mufmuf, 1, 4, 11, 10, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 10 * 2), 11 * 2, 10 * 2);
        }
        else if (this.type == "kellishClayPot")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3036, 1, 22, 19, this.invX - (1/2 * 22 * 1.7), this.invY - (1/2 * 19 * 1.7), 22 * 1.7, 19 * 1.7);
        }
        else if (this.type == "kellishClayPotOfNaapridMilk" || this.type == "kellishClayPotOfWaantiMilk")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3017, 1, 20, 18, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 18 * 1.7), 20 * 1.7, 18 * 1.7);
        }
        else if (this.type == "kellishClayPotOfWater")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 359, 37, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "kellishClayPotOfMushroomStew")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 408, 25, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
        }
        else if (this.type == "rawViperFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 529, 64, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "viperMeat")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 543, 63, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
        }
        else if (this.type == "viperVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 529, 78, 10, 7, this.invX - (1/2 * 10 * 1.3), this.invY - (1/2 * 7 * 1.3), 10 * 1.3, 7 * 1.3);
        }
        else if (this.type == "fermentedViperVenomGland")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 544, 77, 12, 9, this.invX - (1/2 * 12 * 1.3), this.invY - (1/2 * 9 * 1.3), 12 * 1.3, 9 * 1.3);
        }
        else if (this.type == "viperSnakeSkin")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 530, 52, 28, 10, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 10 * 1.3), 28 * 1.3, 10 * 1.3);
        }
        else if (this.type == "rasper")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 651, 45, 21, 45, this.invX - (1/2 * 21 * 1.3), this.invY - (1/2 * 45 * 1.3), 21 * 1.3, 45 * 1.3);
        }
        else if (this.type == "jvostranPlateArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 350, 660, 66, 106, this.invX - (1/2 * 66 * 0.75) - 3, this.invY - (1/2 * 106 * 0.75), 66 * 0.75, 106 * 0.75);
        }
        else if (this.type == "waterPintGlass")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 205, 2, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
        }
        else if (this.type == "sonjaPuree")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 770, 1119, 12, 10, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 10 * 2), 12 * 2, 10 * 2);
        }
        else if (this.type == "spicedSonjaPuree")
        {
            XXX.beginPath();
            XXX.drawImage(humpa, 784, 1119, 12, 10, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 10 * 2), 12 * 2, 10 * 2);
        }
        else if (this.type == "harstGrain")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 241, 45, 12, 13, this.invX - (1/2 * 12), this.invY - (1/2 * 13), 12, 13);
        }
        else if (this.type == "harstAle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 247, 1, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
        }
        else if (this.type == "santhAle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 163, 4, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "mead")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 217, 2, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "techiTea")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 19, 32, 17, 16, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 16 * 2), 17 * 2, 16 * 2);
        }
        else if (this.type == "pintGlass")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 148, 5, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
        }
        else if (this.type == "energilPotionI" || this.type == "energilPotionII" || this.type == "energilPotionIII" || this.type == "energilPotionIV" || this.type == "energilPotionV" || this.type == "palggaPerfume")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1700, 180, 12, 19, this.invX - (1/2 * 12), this.invY - (1/2 * 19), 12, 19);
        }
        else if (this.type == "mindPotionI" || this.type == "mindPotionII" || this.type == "mindPotionIII" || this.type == "mindPotionIV" || this.type == "mindPotionV")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 431, 945, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "mana")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1775, 183, 9, 17, this.invX - (1/2 * 9), this.invY - (1/2 * 17), 9, 17);
        }
        else if (this.type == "mightPotionI" || this.type == "mightPotionII" || this.type == "mightPotionIII" || this.type == "mightPotionIV" || this.type == "mightPotionV" || this.type == "tascalSalve")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1788, 183, 9, 16, this.invX - (1/2 * 9), this.invY - (1/2 * 16), 9, 16);
        }
        else if (this.type == "neevBlood" || this.type == "stomwikCream")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1741, 183, 8, 16, this.invX - (1/2 * 8), this.invY - (1/2 * 16), 8, 16);
        }
        else if (this.type == "utExtract")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 431, 972, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "potionGlass" || this.type == "emptyVialOfGojiiPoison" || this.type == "laicaumExtract")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 419, 1, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "vialOfWater" || this.type == "vialOfGojiiPoison" || this.type == "reconstructionPotion")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 406, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
        }
        else if (this.type == "walrusLeatherWaterskin" || this.type == "walrusLeatherWaterskinOne" || this.type == "walrusLeatherWaterskinTwo" || this.type == "walrusLeatherWaterskinFull")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 79, 5, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
        }
        else if (this.type == "bucket")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 103, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
        }
        else if (this.type == "bucketOfWater")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 133, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
        }
        else if (this.type == "bucketOfTechiTea")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 3, 36, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
        }
        else if (this.type == "bucketOfNaapridMilk" || this.type == "bucketOfWaantiMilk")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 118, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
        }
        else if (this.type == "halcifMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 33, 62, 13, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 15 * 2), 13 * 2, 15 * 2);
        }
        else if (this.type == "cyrinthilimMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 53, 27, 10, 14, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 14 * 2), 10 * 2, 14 * 2);
        }
        else if (this.type == "glinMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 5, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
        }
        else if (this.type == "tepprekliaFungus")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 3011, 70, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
        }
        else if (this.type == "driedCyrinthilimMushroom")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 52, 45, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
        }
        else if (this.type == "boiledGlinMushrooms")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 56, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
        }
        else if (this.type == "tylunFlower")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2155, 64, 28, 33, this.invX - (1/2 * 28), this.invY - (1/2 * 33), 28, 33);
        }
        else if (this.type == "stomwikLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2171, 44, 21, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 16), 21, 16);
        }
        else if (this.type == "culprisLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2154, 160, 20, 13, this.invX - (1/2 * 20), this.invY - (1/2 * 13), 20, 13);
        }
        else if (this.type == "neprilneBerries")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2148, 516, 15, 16, this.invX - (1/2 * 15), this.invY - (1/2 * 16), 15, 16);
        }
        else if (this.type == "hracklePod")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 462, 457, 15, 14, this.invX - (1/2 * 15), this.invY - (1/2 * 14), 15, 14);
        }
        else if (this.type == "pluttBerries")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2111, 32, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "driedPluttBerries")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 104, 47, 17, 19, this.invX - (1/2 * 17), this.invY - (1/2 * 19), 17, 19);
        }
        else if (this.type == "driedPluttBerriesWithHoney")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 103, 72, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
        }
        else if (this.type == "akerBerries")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2170, 20, 22, 19, this.invX - (1/2 * 22), this.invY - (1/2 * 19), 22, 19);
        }
        else if (this.type == "callopBerries")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 76, 367, 10, 10, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 10 * 2), 10 * 2, 10 * 2);
        }
        else if (this.type == "darbBerries")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 64, 386, 10, 10, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 10 * 2), 10 * 2, 10 * 2);
        }
        else if (this.type == "bequonFruit")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2990, 70, 17, 17, this.invX - (1/2 * 17), this.invY - (1/2 * 17), 17, 17);
        }
        else if (this.type == "luufBerries")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 367, 21, 10, 10, this.invX - (1/2 * 10 * 2.3), this.invY - (1/2 * 10 * 2.3), 10 * 2.3, 10 * 2.3);
        }
        else if (this.type == "wyrLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 395, 167, 13, 11, this.invX - (1/2 * 13 * 1.5), this.invY - (1/2 * 11 * 1.5), 13 * 1.5, 11 * 1.5);
        }
        else if (this.type == "kellishSawClub")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 645, 466, 17, 55, this.invX - (1/2 * 17), this.invY - (1/2 * 55), 17, 55);
        }
        else if (this.type == "kellishClaymore")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 600, 435, 22, 112, this.invX - (1/2 * 22 * 0.7), this.invY - (1/2 * 112 * 0.7), 22 * 0.7, 112 * 0.7);
        }
        else if (this.type == "gribPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1095, 155, 31, 19, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 19 * 1.2), 31 * 1.2, 19 * 1.2);
        }
        else if (this.type == "rawGribFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1393, 196, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
        }
        else if (this.type == "gribMeat")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1371, 197, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
        }
        else if (this.type == "hammer")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 512, 514, 36, 49, this.invX - (1/2 * 36 / 1.3), this.invY - (1/2 * 49 / 1.3), 36 / 1.3, 49 / 1.3);
        }
        else if (this.type == "thenganWarhammer")
        {
            XXX.beginPath();
            XXX.drawImage(theng, 2, 120, 32, 62, this.invX - (1/2 * 32 * 1.15), this.invY - (1/2 * 62 * 1.15), 32 * 1.15, 62 * 1.15);
        }
        else if (this.type == "warHammer")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 535, 411, 40, 72, this.invX - (1/2 * 40 / 1.3), this.invY - (1/2 * 72 / 1.3), 40 / 1.3, 72 / 1.3);
        }
        else if (this.type == "tablet" || this.type == "stolenTablet" || this.type == "iceClaymore" || this.type == "leechingTouch" || this.type == "shadowport" || this.type == "theFrozenWord" || this.type == "shell")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1859, 36, 22, 27, this.invX - (1/2 * 22), this.invY - (1/2 * 27), 22, 27);
        }
        else if (this.type == "surge" || this.type == "embers" || this.type == "fireballI" || this.type == "electricBolt" || this.type == "flyingColours" || this.type == "iceSpikes" || this.type == "frostWind" || this.type == "repel" || this.type == "lifeTap" || this.type == "drainingI" || this.type == "vivification" || this.type == "chasingLights" || this.type == "fireHands" || this.type == "freezingGrasp" || this.type == "chargedTouch" || this.type == "sorcerer'sRaincoat" || this.type == "shieldingI" || this.type == "shieldingII" || this.type == "shieldingIII" || this.type == "shieldingIV" || this.type == "shieldingV" || this.type == "summonFrich" || this.type == "summonWolf" || this.type == "charm" || this.type == "sanctuary" || this.type == "repellingWard" || this.type == "iceberg" || this.type == "magicMissiles" || this.type == "minorVortex" || this.type == "mark" || this.type == "entanglement" || this.type == "whirlwind" || this.type == "iceBlast" || this.type == "healingPsalms" || this.type == "summonGriffin" || this.type == "summonDemon" || this.type == "slowTimeI" || this.type == "slowTimeII" || this.type == "slowTimeIII" || this.type == "slowTimeIV" || this.type == "slowTimeV" || this.type == "slowTimeVI" || this.type == "doppelganger" || this.type == "shadowSwitch" || this.type == "eruption" || this.type == "drakeBreath" || this.type == "undyingWard" || this.type == "potatoInvisibility" || this.type == "flamingMissiles" || this.type == "despell" || this.type == "powerDraw" || this.type == "arcaneOrbs" || this.type == "corporalityWard" || this.type == "windBlast" || this.type == "scroll" || this.type == "spiritBear" || this.type == "shadowCrow" || this.type == "antherPlague" || this.type == "beholderRift")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1738, 4, 33, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 26), 33, 26);
        }
        else if (this.type == "narthwarpMouth")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30), this.invY - (1/2 * 18), 30 , 18);
        }
        else if (this.type == "lrgNarthwarpMouth")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30 * 2), this.invY - (1/2 * 18 * 2), 30 * 2, 18 * 2);
        }
        else if (this.type == "fermentedNarthwarpMouth")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1844, 64, 37, 32, this.invX - (1/2 * 37), this.invY - (1/2 * 32), 37, 32);
        }
        else if (this.type == "rawHumanFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 9, 25, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16 * 1.5), 24, 16 * 1.5);
        }
        else if (this.type == "humanMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 27, 25, 16, this.invX - (1/2 * 24), this.invY - (1/2 * 16 * 1.5), 24, 16 * 1.5);
        }
        else if (this.type == "rawBearFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 9, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
        }
        else if (this.type == "bearMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 731, 27, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
        }
        else if (this.type == "rawBearTongue")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 757, 12, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
        }
        else if (this.type == "bearTongue")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 757, 29, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
        }
        else if (this.type == "smlBlackBearPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53), this.invY - (1/2 * 30), 53, 30);
        }
        else if (this.type == "medBlackBearPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.25), this.invY - (1/2 * 30 * 1.25), 53 * 1.25, 30 * 1.25);
        }
        else if (this.type == "lrgBlackBearPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.65), this.invY - (1/2 * 30 * 1.65), 53 * 1.65, 30 * 1.65);
        }
        else if (this.type == "vardanianHeavyCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 779, 1, 17, 68, this.invX - (1/2 * 17), this.invY - (1/2 * 68), 17, 68);
        }
        else if (this.type == "shehidOozeSml")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21), this.invY - (1/2 * 22), 21, 22);
        }
        else if (this.type == "shehidOozeLrg")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21 * 2), this.invY - (1/2 * 22 * 2), 21 * 2, 22 * 2);
        }
        else if (this.type == "shehidShellSml")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
        }
        else if (this.type == "shehidShellLrg")
        {
            XXX.beginPath();
            XXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25 * 2), this.invY - (1/2 * 24 * 2), 25 * 2, 24 * 2);
        }
        else if (this.type == "timberAxe")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 294, 330, 29, 45, this.invX - (1/2 * 29 * 1.4), this.invY - (1/2 * 45 * 1.4), 29 * 1.4, 45 * 1.4);
        }
        else if (this.type == "curvedDagger")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3538, 605, 10, 30, this.invX - (1/2 * 10), this.invY - (1/2 * 30), 10, 30);
        }
        else if (this.type == "dualCurvedDaggers")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3552, 605, 16, 30, this.invX - (1/2 * 16), this.invY - (1/2 * 30), 16, 30);
        }
        else if (this.type == "nirineseSpear")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 8, 1511, 13, 79, this.invX - (1/2 * 13), this.invY - (1/2 * 79), 13, 79);
        }
        else if (this.type == "crossbow")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3169, 118, 36, 34, this.invX - (1/2 * 37.8), this.invY - (1/2 * 35.7), 37.8, 35.7);
        }
        else if (this.type == "steelBolt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3152, 1, 19, 21, this.invX - (1/2 * 22.8), this.invY - (1/2 * 25.2), 22.8, 25.2);
        }
        else if (this.type == "varnFurDress")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 51, 387, 39, 52, this.invX - (1/2 * 60.45  * 0.8), this.invY - (1/2 * 85.6 * 0.8), 62.4 * 0.8, 83.2 * 0.8);
        }
        else if (this.type == "varnFurCloak")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 46, 439, 50, 61, this.invX - (1/2 * 77.5  * 0.8), this.invY - (1/2 * 92.55 * 0.7), 77.5 * 0.8, 92.55 * 0.7);
        }
        else if (this.type == "varnFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 91, 380, 50, 61, this.invX - (1/2 * 80  * 0.8), this.invY - (1/2 * 95.6 * 0.7), 80 * 0.8, 95.6 * 0.7);
        }
        else if (this.type == "waantiFurOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 216, 457, 43, 65, this.invX - (1/2 * 43 * 1.2), this.invY - (1/2 * 65 * 1.2), 43 * 1.2, 65 * 1.2);
        }
        else if (this.type == "frichFurMittens")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 386, 21, 19, 11, this.invX - (1/2 * 19 * 1.4), this.invY - (1/2 * 11 * 1.4), 19 * 1.4, 11 * 1.4);
        }
        else if (this.type == "frichFurClothing")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 258, 316, 37, 60, this.invX - (1/2 * 44.4), this.invY - (1/2 * 72), 44.4, 72);
        }
        else if (this.type == "wizardGown")
        {
            XXX.beginPath();
            XXX.drawImage(zer0, 67, 254, 18, 41, this.invX - (1/2 * 18 * 2.05), this.invY - (1/2 * 41 * 2.05), 18 * 2.05, 41 * 2.05);
        }
        else if (this.type == "purpleMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 765, 98, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "redMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 643, 98, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "cyanMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 526, 95, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "whiteMageRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 884, 103, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "blackMageRobe" || this.type == "pyromothSilkRobe")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 882, 213, 43, 54, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 54 * 1.25), 43 * 1.25, 54 * 1.25);
        }
        else if (this.type == "hetmerArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 150, 309, 52, 66, this.invX - (1/2 * 62.4), this.invY - (1/2 * 79.2), 62.4, 79.2);
        }
        else if (this.type == "vardanianBattleAxe")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 374, 354, 29, 57, this.invX - (1/2 * 37.7), this.invY - (1/2 * 74.1), 37.7, 74.1);
        }
        else if (this.type == "dualVardanianBattleAxe")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 135, 682, 58, 64, this.invX - (1/2 * 58 * 1.4), this.invY - (1/2 * 64 * 1.4), 58 * 1.4, 64 * 1.4);
        }
        else if (this.type == "rawOlkrinFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3143, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "olkrinMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "olkrinSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
        }
        else if (this.type == "olkrinHorn")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3087, 287, 26, 34, this.invX - (1/2 * 52), this.invY - (1/2 * 68), 52, 68);
        }
        else if (this.type == "goliathOlkrinSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
        }
        else if (this.type == "olkrinArm")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3175, 287, 67, 36, this.invX - (1/2 * 73.7), this.invY - (1/2 * 53.4), 73.7, 53.4);
        }
        else if (this.type == "olkrinMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
        }
        else if (this.type == "vardanianCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 250, 359, 14, 54, this.invX - (1/2 * 17.5), this.invY - (1/2 * 67.5), 17.5, 67.5);
        }
        else if (this.type == "hyelingCleaver")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 134, 3, 29, 33, this.invX - (1/2 * 29 * 1.6), this.invY - (1/2 * 33 * 1.6), 29 * 1.6, 33 * 1.6);
        }
        else if (this.type == "rawVarnFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3099, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
        }
        else if (this.type == "varnMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3115, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
        }
        else if (this.type == "varnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2994, 291, 27, 15, this.invX - (1/2 * 40.5), this.invY - (1/2 * 22.5), 40.5, 22.5);
        }
        else if (this.type == "beartrap")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 62, 8, 10, 9, this.invX - (1/2 * 10 * 1.5), this.invY - (1/2 * 9 * 1.5), 10 * 1.5, 9 * 1.5);
        }
        else if (this.type == "clawtrap")
        {
            XXX.beginPath();
            XXX.drawImage(trapper, 96, 26, 32, 18, this.invX - (1/2 * 32 * 1.5), this.invY - (1/2 * 18 * 1.5), 32 * 1.5, 18 * 1.5);
        }
        else if (this.type == "fireStarter")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2922, 136, 14, 11, this.invX - (1/2 * 21), this.invY - (1/2 * 16.5), 21, 16.5);
        }
        else if (this.type == "wood")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
            XXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
        }
        else if (this.type == "katana")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 168, 364, 16, 55, this.invX - (1/2 * 22.5), this.invY - (1/2 * 70), 22.5, 75.5);
        }
        else if (this.type == "winterWolfOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3126, 156, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
        }
        else if (this.type == "winterWolfClothing")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3223, 157, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
        }
        else if (this.type == "freydicRoyalOutfit")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2959, 151, 41, 60, this.invX - (1/2 * 52.4), this.invY - (1/2 * 78), 52.4, 78);
        }
        else if (this.type == "fineFreydicOutfitF")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 294, 298, 42, 65, this.invX - (1/2 * 42 * 1.1), this.invY - (1/2 * 65 * 1.1), 42 * 1.1, 65 * 1.1);
        }
        else if (this.type == "fineFreydicOutfitM")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 286, 527, 41, 77, this.invX - (1/2 * 41 * 1), this.invY - (1/2 * 77 * 1), 41 * 1, 77 * 1);
        }
        else if (this.type == "naapridLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3171, 59, 34, 57, this.invX - (1/2 * 44.2), this.invY - (1/2 * 71.1), 44.2, 71.1);
        }
        else if (this.type == "freydicRoyalDress")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3049, 148, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
        }
        else if (this.type == "winterWolfDress")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3012, 147, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
        }
        else if (this.type == "rawYoungNaapridFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3133, 10, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
        }
        else if (this.type == "youngNaapridMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3133, 1, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
        }
        else if (this.type == "rawNaapridFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2970, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
        }
        else if (this.type == "naapridMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2995, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
        }
        else if (this.type == "naapridPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2924, 1, 26, 16, this.invX - (1/2 * 65), this.invY - (1/2 * 40), 65, 40);
        }
        else if (this.type == "naapridHorn")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2951, 1, 15, 14, this.invX - (1/2 * 31.5), this.invY - (1/2 * 29.4), 31.5, 29.4);
        }
        else if (this.type == "thenganSwordAndShield")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 3515, 140, 48, 40, this.invX - (1/2 * 61.2), this.invY - (1/2 * 48), 61.2, 48);
        }
        else if (this.type == "rawTrollsBlood")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 452, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
        }
        else if (this.type == "jarOfOil" || this.type == "jarOfButterMellowOil" || this.type == "jarOfSonjaSap")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 97, 3, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 21.5), 15, 21.5);
        }
        else if (this.type == "glassJar" || this.type == "jarOfGlassworm" && player.sleep > 0)
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 465, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
        }
        else if (this.type == "jarOfGlassworm" && player.sleep <= 0)
        {
            XXX.beginPath();
            XXX.drawImage(cef, 1013, 75, 9, 14, this.invX - (1/2 * 9 * 1.5), this.invY - (1/2 * 14 * 1.5), 9 * 1.5, 14 * 1.5);
        }
        else if (this.type == "chainArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 38, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
        }
        else if (this.type == "blackChainArmour")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 80, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
        }
        else if (this.type == "freydicGreatSword")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 126, 302, 16, 70, this.invX - (1/2 * 16), this.invY - (1/2 * 70), 16, 70);
        }
        else if (this.type == "theNorthernGem")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 257, 436, 24, 73, this.invX - (1/2 * 24), this.invY - (1/2 * 73), 24, 73);
        }
        else if (this.type == "hugeBogTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 67.5), this.invY - (1/2 * 54), 67.5, 54);
        }
        else if (this.type == "bogTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 45), this.invY - (1/2 * 36), 49.5, 39.6);
        }
        else if (this.type == "babyBogTrollSkull")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 22.5), this.invY - (1/2 * 18), 22.5, 18);
        }
        else if (this.type == "trollFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2875, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
        }
        else if (this.type == "trollMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2900, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
        }
        else if (this.type == "aldrekiiArrow" || this.type == "timeArrow")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2832, 3, 41, 12, this.invX - (1/2 * 32), this.invY - (1/2 * 12), 32, 12);
        }
        else if (this.type == "rawWolfLiver")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2769, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
        }
        else if (this.type == "wolfLiver")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2782, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
        }
        else if (this.type == "winterWolfMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2812, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "rawWinterWolfFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2794, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "winterWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2737, 2, 26, 16, this.invX - (1/2 * 34.8), this.invY - (1/2 * 19.2), 34.8, 19.2);
        }
        else if (this.type == "massiveWinterWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 2737, 2, 29, 16, this.invX - (1/2 * 58), this.invY - (1/2 * 32), 58, 32);
        }
        else if (this.type == "greyWolfMeat")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2812, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "rawGreyWolfFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2794, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
        }
        else if (this.type == "greyWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2737, 2, 26, 16, this.invX - (1/2 * 34.8), this.invY - (1/2 * 19.2), 34.8, 19.2);
        }
        else if (this.type == "massiveGreyWolfPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2737, 2, 29, 16, this.invX - (1/2 * 58), this.invY - (1/2 * 32), 58, 32);
        }
        else if (this.type == "energyPotionI" || this.type == "energyPotionII" || this.type == "energyPotionIII")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 38, 267, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "speedPotionI" || this.type == "speedPotionII" || this.type == "speedPotionIII")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 86, 134, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
        }
        else if (this.type == "cleansingPotion" || this.type == "wobeaExtract" || this.type == "mandrakeJuice" || this.type == "silverbloodPotion")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 35, 134, 11, 19, this.invX - (1/2 * 11), this.invY - (1/2 * 19), 11, 19);
        }
        else if (this.type == "freydicSword")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2089, 2, 13, 46, this.invX - (1/2 * 16.25), this.invY - (1/2 * 57.5), 16.25, 57.5);
        }
        else if (this.type == "kellishSword")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 70, 1, 15, 49, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 49 * 1.3), 15 * 1.3, 49 * 1.3);
        }
        else if (this.type == "pickaxe")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 103, 233, 22, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 39), 33, 39);
        }
        else if (this.type == "aldrekiiBlade")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2057, 4, 20, 45, this.invX - (1/2 * 24), this.invY - (1/2 * 54), 24, 54);
        }
        else if (this.type == "aldrekiiClaws")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 268, 214, 22, 23, this.invX - (1/2 * 22 * 2), this.invY - (1/2 * 23 * 2), 22 * 2, 23 * 2);
        }
        else if (this.type == "flail")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1995, 1, 37, 33, this.invX - (1/2 * 37), this.invY - (1/2 * 33), 37, 33);
        }
        else if (this.type == "torperVenomSac")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 40, 226, 17, 16, this.invX - (1/2 * 17), this.invY - (1/2 * 16), 17, 16);
        }
        else if (this.type == "torperFuzz")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1867, 9, 23, 20, this.invX - (1/2 * 23), this.invY - (1/2 * 20), 23, 20);
        }
        else if (this.type == "rawTorperFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1894, 3, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
        }
        else if (this.type == "torperMeat")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1895, 16, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
        }
        else if (this.type == "gulfreyShellArmour")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1, 157, 36, 63, this.invX - (1/2 * 36) + 2, this.invY - (1/2 * 63), 28.4, 59.6);
        }
        else if (this.type == "grewbleEgg")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 9, 29, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
        }
        else if (this.type == "grewbleGuts")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 30, 1, 21, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 16), 21, 16);
        }
        else if (this.type == "lorkWeed")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 106, 173, 20, 17, this.invX - (1/2 * 20 * 2), this.invY - (1/2 * 17 * 2), 20 * 2, 17 * 2);
        }
        else if (this.type == "sesreStamen")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 263, 110, 10, 16, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 16 * 2), 10 * 2, 16 * 2);
        }
        else if (this.type == "sesreLeaf")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 282, 113, 15, 13, this.invX - (1/2 * 15 * 2), this.invY - (1/2 * 13 * 2), 15 * 2, 13 * 2);
        }
        else if (this.type == "hoffalgreFurCloak")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 730, 2, 24, 40, this.invX - (1/2 * 24 * 1.8), this.invY - (1/2 * 40 * 1.8), 24 * 1.8, 40 * 1.8);
        }
        else if (this.type == "hoffalgrePelt")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 5, 6, 24, 9, this.invX - (1/2 * 24 * 2.2), this.invY - (1/2 * 9 * 2.2), 24 * 2.2, 9 * 2.2);
        }
        else if (this.type == "rawHoffalgreFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 5, 18, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "hoffalgreMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 21, 18, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "hoffalgreTendrils")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 33, 6, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 2.2, 10 * 2.2);
        }
        else if (this.type == "agedHoffalgreTendrils")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 34, 16, 14, 10, this.invX - (1/2 * 14 * 2.2), this.invY - (1/2 * 10 * 2.2), 14 * 1.6, 10 * 2.2);
        }
        else if (this.type == "frichPelt")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 1832, 10, 31, 18, this.invX - (1/2 * 31), this.invY - (1/2 * 18), 31, 18);
        }
        else if (this.type == "mountainFrichPelt")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 1832, 10, 31, 18, this.invX - (1/2 * 31 * 1.5), this.invY - (1/2 * 18 * 1.5), 31 * 1.5, 18 * 1.5);
        }
        else if (this.type == "rawFrichFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 65, 226, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
        }
        else if (this.type == "frichMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 79, 227, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
        }
        else if (this.type == "lombrisFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 865, 234, 19, 17, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 17 * 1.5), 19 * 1.5, 17 * 1.5);
        }
        else if (this.type == "rawThuegTripe")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 415, 96, 22, 15, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 15 * 1.5), 22 * 1.5, 15 * 1.5);
        }
        else if (this.type == "thuegTripe")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 415, 116, 22, 15, this.invX - (1/2 * 22 * 1.5), this.invY - (1/2 * 15 * 1.5), 22 * 1.5, 15 * 1.5);
        }
        else if (this.type == "waantiPelt")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 155, 62, 20, 27, this.invX - (1/2 * 20 * 1.6), this.invY - (1/2 * 27 * 1.6), 20 * 1.6, 27 * 1.6);
        }
        else if (this.type == "rawWaantiFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 128, 95, 14, 19, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 19 * 1.6), 14 * 1.6, 19 * 1.6);
        }
        else if (this.type == "waantiMeat")
        {
            XXX.beginPath();
            XXX.drawImage(furr, 109, 95, 14, 19, this.invX - (1/2 * 14 * 1.6), this.invY - (1/2 * 19 * 1.6), 14 * 1.6, 19 * 1.6);
        }
        else if (this.type == "nogSkin")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 692, 143, 25, 21, this.invX - (1/2 * 25), this.invY - (1/2 * 21), 25, 21);
        }
        else if (this.type == "rawNogFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 724, 145, 16, 17, this.invX - (1/2 * 16), this.invY - (1/2 * 17), 16, 17);
        }
        else if (this.type == "nogMeat")
        {
            XXX.beginPath();
            XXX.drawImage(nognog, 740, 146, 16, 17, this.invX - (1/2 * 16), this.invY - (1/2 * 17), 16, 17);
        }
        else if (this.type == "rawUtFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 233, 960, 29, 24, this.invX - (1/2 * 29 * 1.25), this.invY - (1/2 * 24 * 1.25), 29 * 1.25, 24 * 1.25);
        }
        else if (this.type == "utMeat")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 277, 962, 29, 24, this.invX - (1/2 * 29 * 1.25), this.invY - (1/2 * 24 * 1.25), 29 * 1.25, 24 * 1.25);
        }
        else if (this.type == "fermentedUtTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 375, 950, 32, 36, this.invX - (1/2 * 32 * 1.25), this.invY - (1/2 * 36 * 1.25), 32 * 1.25, 36 * 1.25);
        }
        else if (this.type == "utTentacle")
        {
            XXX.beginPath();
            XXX.drawImage(freeverse, 318, 958, 43, 23, this.invX - (1/2 * 43 * 1.25), this.invY - (1/2 * 23 * 1.25), 43 * 1.25, 23 * 1.25);
        }
        else if (this.type == "rawMountainFrichFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 65, 226, 10, 12, this.invX - (1/2 * 20 * 2), this.invY - (1/2 * 24 * 2), 20 * 2, 24 * 2);
        }
        else if (this.type == "mountainFrichMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 79, 227, 10, 12, this.invX - (1/2 * 20 * 2), this.invY - (1/2 * 24 * 2), 20 * 2, 24 * 2);
        }
        else if (this.type == "vardanianAxe")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 53, 158, 37, 22, this.invX - (1/2 * 33.3), this.invY - (1/2 * 19.8), 33.3, 19.8);
        }
        else if (this.type == "vardanianAxeDual")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 48, 187, 31, 35, this.invX - (1/2 * 27.9), this.invY - (1/2 * 31.5), 27.9, 31.5);
        }
        else if (this.type == "freydicSpear")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 4, 227, 20, 75, this.invX - (1/2 * 17.5), this.invY - (1/2 * 56.75), 17.5, 56.75);
        }
        else if (this.type == "gulfreyShell")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 48, 41, 31, 23, this.invX - (1/2 * 31), this.invY - (1/2 * 23), 31, 23);
        }
        else if (this.type == "gulfreyMandibles")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 2, 92, 33, 33, this.invX - (1/2 * 26.6), this.invY - (1/2 * 26.6), 26.6, 26.6);
        }
        else if (this.type == "rawGulfreyFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 37, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
        }
        else if (this.type == "gulfreyMeat")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 66, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
        }
        else if (this.type == "mudflyMeat")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 209, 89, 14, 12, this.invX - (1/2 * 14) * 2, this.invY - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "rawMudflyFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 209, 77, 14, 12, this.invX - (1/2 * 14) * 2, this.invY - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "mudflyMold")
        {
            XXX.beginPath();
            XXX.drawImage(lodo, 209, 65, 14, 12, this.invX - (1/2 * 14) * 2, this.invY - (1/2 * 12) * 2, 14 * 2, 12 * 2);
        }
        else if (this.type == "vomit")
        {
            XXX.beginPath();
            XXX.drawImage(oldverse, 55, 135, 24, 21, this.invX - (1/2 * 24), this.invY - (1/2 * 21), 24, 21);
        }
        else if (this.type == "bloodyVomit")
        {
            XXX.beginPath();
            XXX.drawImage(raed, 510, 432, 43, 37, this.invX - (1/2 * 43), this.invY - (1/2 * 37), 43, 37);
        }
        else if (this.type == "gojiiBerries")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 615, 3, 19, 15, this.invX - (1/2 * 38), this.invY - (1/2 * 30), 38, 30);
        }
        else if (this.type == "nirineseSabre")
        {
            XXX.beginPath();
            XXX.drawImage(verse, 7, 7, 26, 80, this.invX - (1/2 * 19.5), this.invY - (1/2 * 60), 19.5, 60);
        }
        else if (this.type == "freezingArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 66, 73, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "fireArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 66, 80, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "lifeLeachArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 65, 88, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "oiledArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 67, 57, 19, 7, this.invX - (1/2 * 38), this.invY - (1/2 * 14), 38, 14);
        }
        else if (this.type == "shehidToxinArrow")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 66, 21, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
        }
        else if (this.type == "steelArrow")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 182, 104, 23, 9, this.invX - (1/2 * 46), this.invY - (1/2 * 18), 46, 18);
        }
        else if (this.type == "arrow")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 432, 554, 20, 8, this.invX - (1/2 * 40), this.invY - (1/2 * 16), 40, 16);
        }
        else if (this.type == "ogoFruit")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 426, 4, 12, 15, this.invX - (1/2 * 24), this.invY - (1/2 * 30), 24, 30);
        }
        else if (this.type == "blueBlade")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 8, 531, 57, 63, this.invX - (1/2 * 51.3), this.invY - (1/2 * 56.7), 51.3, 56.7);
        }
        else if (this.type == "berulnSkull")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 446, 3, 15, 20, this.invX - (1/2 * 22.5), this.invY - (1/2 * 30), 22.5, 30);
        }
        else if (this.type == "rawBerulnFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 526, 6, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
        }
        else if (this.type == "berulnMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 506, 38, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
        }
        else if (this.type == "bigBerulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 76.5), this.invY - (1/2 * 45), 76.5, 45);
        }
        else if (this.type == "berulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 66.3), this.invY - (1/2 * 39), 66.3, 39);
        }
        else if (this.type == "bigBlackBerulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 17, 721, 56, 34, this.invX - (1/2 * 56 * 1.5 * 0.9), this.invY - (1/2 * 34 * 1.5 * 0.9), 56 * 1.5 * 0.9, 34 * 1.5 * 0.9);
        }
        else if (this.type == "blackBerulnPelt")
        {
            XXX.beginPath();
            XXX.drawImage(norc, 17, 721, 56, 34, this.invX - (1/2 * 56 * 1.5 * 0.8), this.invY - (1/2 * 34 * 1.5 * 0.8), 56 * 1.5 * 0.8, 34 * 1.5 * 0.8);
        }
        else if (this.type == "longbow")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 380, 593, 34, 34, this.invX - (1/2 * 51), this.invY - (1/2 * 51), 51, 51);
        }
        else if (this.type == "aldrekiiLongbow")
        {
            XXX.beginPath();
            XXX.drawImage(balkur, 17, 441, 71, 70, this.invX - (1/2 * 71 * 0.7), this.invY - (1/2 * 70 * 0.7), 71 * 0.7, 70 * 0.7);
        }
        else if (this.type == "walrusLeatherArmour")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 734, 202, 52, 58, this.invX - (1/2 * 52), this.invY - (1/2 * 58), 52, 58);
        }
        else if (this.type == "skinAndBones")
        {
            XXX.beginPath();
            XXX.drawImage(polpol, 105, 172, 30, 40, this.invX - (1/2 * 45), this.invY - (1/2 * 60), 45, 60);
            XXX.drawImage(polpol, 105, 172, 30, 40, this.invX - (1/2 * 45), this.invY - (1/2 * 60), 45, 60);
        }
        else if (this.type == "balgurMercArmour")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 4, 105, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
        }
        else if (this.type == "balgurCaptainArmour")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 97, 108, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
        }
        else if (this.type == "rawWalrusFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 99, 4, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
        }
        else if (this.type == "aldrekiiBardiche")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 580, 253, 42, 137, this.invX - (1/2 * 21), this.invY - (1/2 * 68.5), 21, 68.5);
        }
        else if (this.type == "walrusMeat")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 257, 1, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
        }
        else if (this.type == "walrusHide")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 45), this.invY - (1/2 * 22), 45, 22);
        }
        else if (this.type == "elderWalrusHide")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 90) + 7, this.invY - (1/2 * 44) + 4, 77.5, 33);
        }
        else if (this.type == "blubber")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 368, 9, 12, 13, this.invX - (1/2 * 24), this.invY - (1/2 * 26), 24, 26);
        }
        else if (this.type == "walrusTusks")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 42.5), this.invY - (1/2 * 32.5), 42.5, 32.5);
        }
        else if (this.type == "elderWalrusTusks")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 68), this.invY - (1/2 * 52), 68, 52);
        }
        else if (this.type == "mace")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 554, 10, 61, 36, this.invX - (1/2 * 61), this.invY - (1/2 * 38), 61, 36);
        }
        else if (this.type == "staff")
        {
            XXX.beginPath();
            XXX.save();
            XXX.translate(this.invX, this.invY);
            XXX.rotate(7.5/8 * 2 * Math.PI);
            XXX.drawImage(dolls, 211, 111, 77, 5, - (1/2 * 77 * 1), - (1/2 * 5 * 1), 77 * 1, 5 * 1);
            XXX.restore();
        }
        else if (this.type == "thenganDagger")
        {
            XXX.beginPath();
            XXX.drawImage(dolls, 86, 5, 17, 37, this.invX - (1/2 * 17 * 1), this.invY - (1/2 * 37 * 1), 17 * 1, 37 * 1);
        }
        else if (this.type == "lightningCorseque")
        {
            XXX.beginPath();
            XXX.drawImage(mofu, 247, 54, 33, 77, this.invX - (1/2 * 33), this.invY - (1/2 * 77), 33, 77);
        }
        else if (this.type == "longSpikedMorningStar")
        {
            XXX.beginPath();
            XXX.drawImage(poly, 151, 128, 39, 39, this.invX - (1/2 * 39 * 1.15), this.invY - (1/2 * 39 * 1.15), 39 * 1.15, 39 * 1.15);
        }
        else if (this.type == "longsword" || this.type == "adolfsNewSword")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 75, 366, 17, 47, this.invX - (1/2 * 25.5), this.invY - (1/2 * 70.5) - 3, 25.5, 70.5);
        }
        else if (this.type == "rawEtyrFlesh")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 43, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
        }
        else if (this.type == "freydicWarAxe")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 17, 115, 113, 104, this.invX - (1/2 * 90.4), this.invY - (1/2 * 83.2) + 4, 90.4, 83.2);
        }
        else if (this.type == "etyrMeat")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 73, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
        }
        else if (this.type == "etyrHide")
        {
            XXX.beginPath();
            XXX.drawImage(theCrack, 37, 720, 25, 18, this.invX - (1/2 * 50), this.invY - (1/2 * 36), 50, 36);
        }
        else if (this.type == "trollsBlood")
        {
            XXX.beginPath();
            XXX.drawImage(polyPNG, 385, 7, 11, 15, this.invX - (1/2 * 16.5), this.invY - (1/2 * 22.5), 16.5, 22.5);
        }
        else if (this.type == "yaihefBerries")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 62, 508, 16, 16, this.invX - (1/2 * 32), this.invY - (1/2 * 32), 32, 32);
            }
    };

    this.operations = function()
    {
        if (player.slowItDown == true || firstIdSet == true || gameLoopNumber % 200 == 0)
        {
            this.setItemID(); //this constantly redefines the item's stats and/or details based on the players skills (for the items that use that kind of adjustment.
        }

        if (this.X != false && this.Y != false) //this only lets an item draw if it has coordinates other than false.
        {
            this.drawItem(); //this draws the item onto the world's map.
        }
    };

}