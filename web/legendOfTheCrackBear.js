/**
 * Created by skyeguy on 12/17/15.
 */

//TODO LIST

//todo finish adding the beast journal.
//todo have Teber move back to Teshir as an artisan if he is pardoned.
//todo add brain flies and flying creatures having a resistance to melee attacks while flying.
//todo make all dresses decrease charisma for guys.
//todo integrate the sleep system to beds, add hangover, and soarness effects as well as mini notices.
//todo add a rest without bed button on the UI that uses a homemade confirm popup to ask if you are sure you want to sleep.
//todo add beds all the way
//todo add the nappy closed eye for the sleepButton. (it's on poly)
//todo add beehive with bees wax and collectable honey
//todo add items: harst bread, pumpkin bread, dried plutt with honey
//todo add the dexterity system: lv 10 = jump-back lv 20 = side-jumping (more levels slightly increase the time before the enemy reacts to your new position)
//todo add golgemoff -- this is also the creature that must be fought in the creature contract quest given by Kedwin.
//todo add arrow mods such as poison, electric, wind, armour piercing... and also normal steel arrows.
//todo add electricity spells
//todo add vines spell
//todo add tornado spell
//todo add electric spear and mage boss who uses it as well as a magical shielding spell he uses.
//todo add the tentacly beast that leaves an oozey slime trail behind it.
//todo add bowls for the kellish soup
//todo add olde guns for the outlanders.
//todo add the new plains crawler creatures
//todo add outlander starting blade (animation completed already just actually add it now).
//todo add throwing stars for the orgel
//todo add houses/shops/buildings.
//todo Add broken well quest.
//todo add sicknesses and symptons (dizziness, pox, fever, fatigue, etc.) ex: make dizziness spin the screen, make pox weaken players constitution etc., make fever decrease thirst.
//todo add the rest of the alcohols and drinks.
//todo add lizards to the forest.
//todo add passive spells
//todo add ores and smelting
//todo make anthracite (coal) a requirement to make good steel.
//todo make alpha Olkrin's death animation line up slightly more.
//todo add options menu with button: it will allow you to toggle certain settings like mouse combat mode, game coordinates, and other such features.
//todo Add harsh hot weather conditions: deserts cause faster dehydration.
//todo It would be cool to add swimming, but it is not necessarily something that the game needs.
//todo Add multi dimensional gameplay... meaning Dungeons, Caves, trapdoors, castles, cellars, buildings, etc.
//todo Add lore, human characters, guards, and important figures. King Wolthgar perhaps... or not... we'll see!
//todo Add beartraps and other traps that you can set stealth is also a trapping skill.
//todo Add haeflower... psycodelic, takes you to a drug trip world with a slowly flashing rainbow floor and a fog of disoriented colors plus in that world fight weird things like crack bears with a fish as your weapon.
function legendaryPrerequisites()
{
    //cheat sounds
    var crossbowGun = new Audio("sounds/basicGunSound.mp3");
    window.crossbowGun = crossbowGun;

    //sounds
        //TOGGIN CHARACTER: voice acting
    var togginGreet = new Audio("sounds/polySounds/togginGreeting.mp3");
    window.togginGreet = togginGreet;

    var togginLiving = new Audio("sounds/polySounds/togginLivin.mp3");
    window.togginLiving = togginLiving;

    var togginFDecline = new Audio("sounds/polySounds/togginNoMiLady.mp3");
    window.togginFDecline = togginFDecline;

    var togginMDecline = new Audio("sounds/polySounds/togginWasteYerTime.mp3");
    window.togginMDecline = togginMDecline;

    var togginScat = new Audio("sounds/polySounds/togginScat.mp3");
    window.togginScat = togginScat;

    var togginAdmit = new Audio("sounds/polySounds/togginAdmit.mp3");
    window.togginAdmit = togginAdmit;

    var togginBanditPayment = new Audio("sounds/polySounds/togginBanditPayment.mp3");
    window.togginBanditPayment = togginBanditPayment;

    var togginTooLong = new Audio("sounds/polySounds/togginTooLong.mp3");
    window.togginTooLong = togginTooLong;

    var togginChangeMind = new Audio("sounds/polySounds/togginChangeMind.mp3");
    window.togginChangeMind = togginChangeMind;
        //DROHFOR CHARACTER: voice acting
    var drohforGreet = new Audio("sounds/polySounds/drohforGreeting.mp3");
    window.drohforGreet = drohforGreet;

    var drohforWastingTime = new Audio("sounds/polySounds/drohforWastingTime.mp3");
    window.drohforWastingTime = drohforWastingTime;

    var drohforOutfit = new Audio("sounds/polySounds/drohforOutfit.mp3");
    window.drohforOutfit = drohforOutfit;

    var drohforTrackingMLady = new Audio("sounds/polySounds/drohforTrackingMLady.mp3");
    window.drohforTrackingMLady = drohforTrackingMLady;

    var drohforTrackingMLord = new Audio("sounds/polySounds/drohforTrackingMLord.mp3");
    window.drohforTrackingMLord = drohforTrackingMLord;

    var drohforTrackingCHA = new Audio("sounds/polySounds/drohforTrackingCHA.mp3");
    window.drohforTrackingCHA = drohforTrackingCHA;

    var drohforLadyWins = new Audio("sounds/polySounds/drohforLadyWins.mp3");
    window.drohforLadyWins = drohforLadyWins;

    var drohforHighbornLad = new Audio("sounds/polySounds/drohforHighbornLad.mp3");
    window.drohforHighbornLad = drohforHighbornLad;

    var drohforHighbornLasse = new Audio("sounds/polySounds/drohforHighbornLasse.mp3");
    window.drohforHighbornLasse = drohforHighbornLasse;

    var drohforTailBetweenLegs = new Audio("sounds/polySounds/drohforTailBetweenLegs.mp3");
    window.drohforTailBetweenLegs = drohforTailBetweenLegs;

    var drohforSoEasy = new Audio("sounds/polySounds/drohforSoEasy.mp3");
    window.drohforSoEasy = drohforSoEasy;

    var drohforShutUp = new Audio("sounds/polySounds/drohforShutUp.mp3");
    window.drohforShutUp = drohforShutUp;

    var drohforNoMore = new Audio("sounds/polySounds/drohforNoMore.mp3");
    window.drohforNoMore = drohforNoMore;

    var drohforCommonerVictory = new Audio("sounds/polySounds/drohforCommonerVictory.mp3");
    window.drohforCommonerVictory = drohforCommonerVictory;

    var drohforLadyVictory = new Audio("sounds/polySounds/drohforLadyVictory.mp3");
    window.drohforLadyVictory = drohforLadyVictory;

    var drohforLordVictory = new Audio("sounds/polySounds/drohforLordVictory.mp3");
    window.drohforLordVictory = drohforLordVictory;

    var stendorGoodDay = new Audio("sounds/polySounds/stendorGoodDay.mp3");
    window.stendorGoodDay = stendorGoodDay;

    var stendorYourPeople = new Audio("sounds/polySounds/stendorYourPeople.mp3");
    window.stendorYourPeople = stendorYourPeople;

    var stendorHelpingPeople = new Audio("sounds/polySounds/stendorHelpingPeople.mp3");
    window.stendorHelpingPeople = stendorHelpingPeople;

    var stendorHereTheyAre = new Audio("sounds/polySounds/stendorHereTheyAre.mp3");
    window.stendorHereTheyAre = stendorHereTheyAre;

    var stendorItemsGo = new Audio("sounds/polySounds/stendorItemsGo.mp3");
    window.stendorItemsGo = stendorItemsGo;

    var stendorTryAsking = new Audio("sounds/polySounds/stendorTryAsking.mp3");
    window.stendorTryAsking = stendorTryAsking;

    var stendorPoorWretch = new Audio("sounds/polySounds/stendorPoorWretch.mp3");
    window.stendorPoorWretch = stendorPoorWretch;

    var stendorWishLord = new Audio("sounds/polySounds/stendorWishLord.mp3");
    window.stendorWishLord = stendorWishLord;

    var stendorNeevsAreReal = new Audio("sounds/polySounds/stendorNeevsAreReal.mp3");
    window.stendorNeevsAreReal = stendorNeevsAreReal;

    var stendorHetmerTough = new Audio("sounds/polySounds/stendorHetmerTough.mp3");
    window.stendorHetmerTough = stendorHetmerTough;

    var stendorAlwaysComeBack = new Audio("sounds/polySounds/stendorAlwaysComeBack.mp3");
    window.stendorAlwaysComeBack = stendorAlwaysComeBack;

    var stendorExcellent = new Audio("sounds/polySounds/stendorExcellent.mp3");
    window.stendorExcellent = stendorExcellent;

    var stendorWishLady = new Audio("sounds/polySounds/stendorWishLady.mp3");
    window.stendorWishLady = stendorWishLady;

    var stendorFarSouth = new Audio("sounds/polySounds/stendorFarSouth.mp3");
    window.stendorFarSouth = stendorFarSouth;

    var stendorPoorSoul = new Audio("sounds/polySounds/stendorPoorSoul.mp3");
    window.stendorPoorSoul = stendorPoorSoul;

    var stendorFairThee = new Audio("sounds/polySounds/stendorFairThee.mp3");
    window.stendorFairThee = stendorFairThee;

    var stendorHighness = new Audio("sounds/polySounds/stendorHighness.mp3");
    window.stendorHighness = stendorHighness;

    var stendorHealth = new Audio("sounds/polySounds/stendorHealth.mp3");
    window.stendorHealth = stendorHealth;

    var stendorBeWell = new Audio("sounds/polySounds/stendorBeWell.mp3");
    window.stendorBeWell = stendorBeWell;

    var stendorTrouble = new Audio("sounds/polySounds/stendorTrouble.mp3");
    window.stendorTrouble = stendorTrouble;

    var maggyJustCleaning = new Audio("sounds/polySounds/maggyJustCleaning.mp3");
    window.maggyJustCleaning = maggyJustCleaning;

    var maggyJustLovely = new Audio("sounds/polySounds/MaggyJustLovely.mp3");
    window.maggyJustLovely = maggyJustLovely;

    var maggyLifeStory = new Audio("sounds/polySounds/maggyLifeStory.mp3");
    window.maggyLifeStory = maggyLifeStory;

    var maggyMostlyCleaning = new Audio("sounds/polySounds/maggyMostlyCleaning.mp3");
    window.maggyMostlyCleaning = maggyMostlyCleaning;

    var kedwinRumors = new Audio("sounds/polySounds/kedwinRumors.mp3");
    window.kedwinRumors = kedwinRumors;

    var kedwinNeverHeard = new Audio("sounds/polySounds/kedwinNeverHeard.mp3");
    window.kedwinNeverHeard = kedwinNeverHeard;

    var kedwinSomeone = new Audio("sounds/polySounds/kedwinSomeone.mp3");
    window.kedwinSomeone = kedwinSomeone;

    var kedwinYourLoss = new Audio("sounds/polySounds/kedwinYourLoss.mp3");
    window.kedwinYourLoss = kedwinYourLoss;

    var kedwinNothing = new Audio("sounds/polySounds/kedwinNothing.mp3");
    window.kedwinNothing = kedwinNothing;

    var kedwinBetter = new Audio("sounds/polySounds/kedwinBetter.mp3");
    window.kedwinBetter = kedwinBetter;

    var kedwinCause = new Audio("sounds/polySounds/kedwinCause.mp3");
    window.kedwinCause = kedwinCause;

    var kedwinEitherWay = new Audio("sounds/polySounds/kedwinEitherWay.mp3");
    window.kedwinEitherWay = kedwinEitherWay;

    var kedwinGobblin = new Audio("sounds/polySounds/kedwinGobblin.mp3");
    window.kedwinGobblin = kedwinGobblin;

    var medliaMaybeIf = new Audio("sounds/polySounds/medliaMaybeIf.mp3");
    window.medliaMaybeIf = medliaMaybeIf;

    var medliaGuessItIs = new Audio("sounds/polySounds/medliaGuessItIs.mp3");
    window.medliaGuessItIs = medliaGuessItIs;

    var medliaFine = new Audio("sounds/polySounds/medliaFine.mp3");
    window.medliaFine = medliaFine;

    var medliaMyMyMeLady = new Audio("sounds/polySounds/medliaMyMyMeLady.mp3");
    window.medliaMyMyMeLady = medliaMyMyMeLady;

    var medliaMyMyMeLord = new Audio("sounds/polySounds/medliaMyMyMeLord.mp3");
    window.medliaMyMyMeLord = medliaMyMyMeLord;

    var medliaCantPretend = new Audio("sounds/polySounds/medliaCantPretend.mp3");
    window.medliaCantPretend = medliaCantPretend;

    var medliaOurProblem = new Audio("sounds/polySounds/medliaOurProblem.mp3");
    window.medliaOurProblem = medliaOurProblem;

    var medliaTheProblem = new Audio("sounds/polySounds/medliaTheProblem.mp3");
    window.medliaTheProblem = medliaTheProblem;

    var medliaTen = new Audio("sounds/polySounds/medliaTen.mp3");
    window.medliaTen = medliaTen;

    var medliaEighteen = new Audio("sounds/polySounds/medliaEighteen.mp3");
    window.medliaEighteen = medliaEighteen;

    var medliaThatFar = new Audio("sounds/polySounds/medliaThatFar.mp3");
    window.medliaThatFar = medliaThatFar;

    var medliaHurtHim = new Audio("sounds/polySounds/medliaHurtHim.mp3");
    window.medliaHurtHim = medliaHurtHim;

    var medliaItWorked = new Audio("sounds/polySounds/medliaItWorked.mp3");
    window.medliaItWorked = medliaItWorked;

    var teberShanToor = new Audio("sounds/polySounds/teberShanToor.mp3");
    window.teberShanToor = teberShanToor;

    var teberSkills = new Audio("sounds/polySounds/teberSkills.mp3");
    window.teberSkills = teberSkills;

    var teberArtCareer = new Audio("sounds/polySounds/teberArtCareer.mp3");
    window.teberArtCareer = teberArtCareer;

    var teberLastJob = new Audio("sounds/polySounds/teberLastJob.mp3");
    window.teberLastJob = teberLastJob;

    var teberQueBellas = new Audio("sounds/polySounds/teberQueBellas.mp3");
    window.teberQueBellas = teberQueBellas;

    var teberPleaseDont = new Audio("sounds/polySounds/teberPleaseDont.mp3");
    window.teberPleaseDont = teberPleaseDont;

    var teberAnyways = new Audio("sounds/polySounds/teberAnyways.mp3");
    window.teberAnyways = teberAnyways;

    var teberOkay = new Audio("sounds/polySounds/teberOkay.mp3");
    window.teberOkay = teberOkay;

    var teberDontWant = new Audio("sounds/polySounds/teberDontWant.mp3");
    window.teberDontWant = teberDontWant;

    var neculaiBountyHere = new Audio("sounds/polySounds/neculaiBountyHere.mp3");
    window.neculaiBountyHere = neculaiBountyHere;

    var neculaiStirUp = new Audio("sounds/polySounds/neculaiStirUp.mp3");
    window.neculaiStirUp = neculaiStirUp;

    var neculaiSpecialDeals = new Audio("sounds/polySounds/neculaiSpecialDeals.mp3");
    window.neculaiSpecialDeals = neculaiSpecialDeals;

    var neculaiEveryDay = new Audio("sounds/polySounds/neculaiEveryDay.mp3");
    window.neculaiEveryDay = neculaiEveryDay;

    var neculaiLots = new Audio("sounds/polySounds/neculaiLots.mp3");
    window.neculaiLots = neculaiLots;

    var neculaiZes = new Audio("sounds/polySounds/neculaiZes.mp3");
    window.neculaiZes = neculaiZes;

    var neculaiDontThinkSo = new Audio("sounds/polySounds/neculaiDontThinkSo.mp3");
    window.neculaiDontThinkSo = neculaiDontThinkSo;

    var neculaiMuchBetter = new Audio("sounds/polySounds/neculaiMuchBetter.mp3");
    window.neculaiMuchBetter = neculaiMuchBetter;

    var neculaiBiggerProblem = new Audio("sounds/polySounds/neculaiBiggerProblem.mp3");
    window.neculaiBiggerProblem = neculaiBiggerProblem;

    var neculaiThenganMercs = new Audio("sounds/polySounds/neculaiThenganMercs.mp3");
    window.neculaiThenganMercs = neculaiThenganMercs;

    var neculaiFine = new Audio("sounds/polySounds/neculaiFine.mp3");
    window.neculaiFine = neculaiFine;

    var neculaiRid = new Audio("sounds/polySounds/neculaiRid.mp3");
    window.neculaiRid = neculaiRid;

    var neculaiZertyOne = new Audio("sounds/polySounds/neculaiZertyOne.mp3");
    window.neculaiZertyOne = neculaiZertyOne;

    var neculaiZerGone = new Audio("sounds/polySounds/neculaiZerGone.mp3");
    window.neculaiZerGone = neculaiZerGone;

    var kronheimeHaventHeard = new Audio("sounds/polySounds/kronheimeHaventHeard.mp3");
    window.kronheimeHaventHeard = kronheimeHaventHeard;

    var kronheimeLastADay = new Audio("sounds/polySounds/kronheimeLastADay.mp3");
    window.kronheimeLastADay = kronheimeLastADay;

    var kronheimeTalkTo = new Audio("sounds/polySounds/kronheimeTalkTo.mp3");
    window.kronheimeTalkTo = kronheimeTalkTo;

    var kronheimeWheresTheBoss = new Audio("sounds/polySounds/kronheimeWheresTheBoss.mp3");
    window.kronheimeWheresTheBoss = kronheimeWheresTheBoss;

    var kronheimeTalkQuick = new Audio("sounds/polySounds/kronheimeTalkQuick.mp3");
    window.kronheimeTalkQuick = kronheimeTalkQuick;

    var kronheimeYourWith = new Audio("sounds/polySounds/kronheimeYourWith.mp3");
    window.kronheimeYourWith = kronheimeYourWith;

    var kronheimeNoLess = new Audio("sounds/polySounds/kronheimeNoLess.mp3");
    window.kronheimeNoLess = kronheimeNoLess;

    var kronheimeThatVardanian = new Audio("sounds/polySounds/kronheimeThatVardanian.mp3");
    window.kronheimeThatVardanian = kronheimeThatVardanian;

    var kronheimeDidntRealize = new Audio("sounds/polySounds/kronheimeDidntRealize.mp3");
    window.kronheimeDidntRealize = kronheimeDidntRealize;

    var kronheimeThisSlight = new Audio("sounds/polySounds/kronheimeThisSlight.mp3");
    window.kronheimeThisSlight = kronheimeThisSlight;

    var kronheimeLeaving = new Audio("sounds/polySounds/kronheimeLeaving.mp3");
    window.kronheimeLeaving = kronheimeLeaving;

    var kronheimeKillHer = new Audio("sounds/polySounds/kronheimeKillHer.mp3");
    window.kronheimeKillHer = kronheimeKillHer;

    var kronheimeKillHim = new Audio("sounds/polySounds/kronheimeKillHim.mp3");
    window.kronheimeKillHim = kronheimeKillHim;

    var kronheimeKillIt = new Audio("sounds/polySounds/kronheimeKillIt.mp3");
    window.kronheimeKillIt = kronheimeKillIt;

    var kronheimeSimple = new Audio("sounds/polySounds/kronheimeSimple.mp3");
    window.kronheimeSimple = kronheimeSimple;

    var kronheimeDontHaveEnough = new Audio("sounds/polySounds/kronheimeDontHaveEnough.mp3");
    window.kronheimeDontHaveEnough = kronheimeDontHaveEnough;

    var kronheimeEarAsProof = new Audio("sounds/polySounds/kronheimEarAsProof.mp3");
    window.kronheimeEarAsProof = kronheimeEarAsProof;

    var kronheimeAnotherEar = new Audio("sounds/polySounds/kronheimeAnotherEar.mp3");
    window.kronheimeAnotherEar = kronheimeAnotherEar;

    var kronheimeGetAway = new Audio("sounds/polySounds/kronheimeGetAway.mp3");
    window.kronheimeGetAway = kronheimeGetAway;

    var kronheimeNecklace = new Audio("sounds/polySounds/kronheimeNecklace.mp3");
    window.kronheimeNecklace = kronheimeNecklace;

    var kronheimeGood = new Audio("sounds/polySounds/kronheimeGood.mp3");
    window.kronheimeGood = kronheimeGood;

    //images
    var farmground = new Image();
    farmground.src = ("images/farmingland.png");
    window.farmground = farmground;

    var kellStone = new Image();
    kellStone.src = ("images/puterRocks.jpg");
    window.kellStone = kellStone;

    var kellsStone = new Image();
    kellsStone.src = ("images/heavyRock.jpg");
    window.kellsStone = kellsStone;

    var mushBlur = new Image();
    mushBlur.src = ("images/blurredGreenSwish.jpg");
    window.mushBlur = mushBlur;

    var blurDots = new Image();
    blurDots.src = ("images/blurredDots.jpg");
    window.blurDots = blurDots;

    var volcanicEnv = new Image();
    volcanicEnv.src = ("images/molten.jpg");
    window.volcanicEnv = volcanicEnv;

    var snowyEnv = new Image();
    snowyEnv.src = ("images/permaFrost.jpg");
    window.snowyEnv = snowyEnv;

    var lushGrassEnv = new Image();
    lushGrassEnv.src = ("images/reducedLush.jpg");
    window.lushGrassEnv = lushGrassEnv;

    var frozenEnv = new Image();
    frozenEnv.src = ("images/tundra.jpg");
    window.frozenEnv = frozenEnv;

    var nordWoods = new Image();
    nordWoods.src = ("images/nordForest.png");
    window.nordWoods = nordWoods;

    var snowEnv = new Image();
    snowEnv.src = ("images/fluffySnow.jpg");
    window.snowEnv = snowEnv;

    var sandyEnv = new Image();
    sandyEnv.src = ("images/greatDunes.jpg");
    window.sandyEnv = sandyEnv;

    var dryGrassEnv = new Image();
    dryGrassEnv.src = ("images/dryGrass.png");
    window.dryGrassEnv = dryGrassEnv;

    var stoneWorkEnv = new Image();
    stoneWorkEnv.src = ("images/fancyStones.jpg");
    window.stoneWorkEnv = stoneWorkEnv;

    var stonePathEnv = new Image();
    stonePathEnv.src = ("images/stonePath.png");
    window.stonePathEnv = stonePathEnv;

    var rockyFlatEnv = new Image();
    rockyFlatEnv.src = ("images/dryLand.png");
    window.rockyFlatEnv = rockyFlatEnv;

    var greenGrassEnv = new Image();
    greenGrassEnv.src = ("images/grass.jpg");
    window.greenGrassEnv = greenGrassEnv;

    var forestEnv = new Image();
    forestEnv.src = ("images/mBank.jpg");
    window.forestEnv = forestEnv;

    var poly = new Image();
    poly.src = ("images/poly.png");
    window.poly = poly;

    var candlewic = new Image();
    candlewic.src = ("images/candlewic.png");
    window.candlewic = candlewic;

    var horde1 = new Image();
    horde1.src = ("images/hordepics.png");
    window.horde1 = horde1;

    var polyPNG = new Image();
    polyPNG.src = ("images/polyAssets.png");
    window.polyPNG = polyPNG;


    polyPNG.onload = function()
    {
        secondToLastPreStage();
    };

    //theLegend();
}
function secondToLastPreStage()
{
    var theCrack = new Image();
    theCrack.src = ("images/crackAssets.png");
    window.theCrack = theCrack;

    theCrack.onload = function()
    {
        almostLastPreStage();
    };
}
function almostLastPreStage()
{
    var polypol = new Image();
    polypol.src = ("images/Polypol.png");
    window.polypol = polypol;

    polypol.onload = function()
    {
        somewhatNearToLastPreStage();
    };
}
function somewhatNearToLastPreStage()
{
    var mofu = new Image();
    mofu.src = ("images/mofu.png");
    window.mofu = mofu;

    mofu.onload = function()
    {
        comingCloseToLastPreStage();
    };
}
function comingCloseToLastPreStage()
{
    var oldverse = new Image();
    oldverse.src = ("images/oldVerse.png");
    window.oldverse = oldverse;

    oldverse.onload = function()
    {
        nearlyToTheLastPreStage()
    };
}
function nearlyToTheLastPreStage()
{
    var freeverse = new Image();
    freeverse.src = ("images/freeverse.png");
    window.freeverse = freeverse;

    freeverse.onload = function()
    {
        lastPreStage();
    };
}
function lastPreStage()
{
    var verse = new Image();
    verse.src = ("images/verseAssets.png");
    window.verse = verse;

    verse.onload = function()
    {
        theLegend();
    };
}

function theLegend()
{
    // Establish the lower canvas and context
    var LCC = document.getElementById("bearPawAlpha");
    var LXX = LCC.getContext("2d");
    // Establish the canvas and its context
    var CCC = document.getElementById("bearPawBravo");
    var XXX = CCC.getContext("2d");
    // Establish the night and day light cycle mask
    var NDC = document.createElement("canvas");
    NDC.width = CCC.width;
    NDC.height = CCC.height;
    var NDX = NDC.getContext("2d");

    //What part of the game world are you in
    var map = "world"; //this represents which map you are in.
    var region = "central"; //this represents which part of a map you are in.
    var elevation = 0; //this is a general number based on your current region that helps determines seasonal climate effects.
    var change = 0; //This allows the buildMaster to know when a region has just changed so that it can delete everything from the old region before building the new one.
    var X = 2000; //This X represents the worlds location X compared to you, as you are a stationary object that never moves.
    var Y = 1000; //This Y represents the worlds location Y compared to you, as you are a stationary object that never moves.
    var spawnX = 0;
    var spawnY = 0;

    //Game Time Keeping
    var timePlayed = 0; //this is time played in real life seconds.
    var timeRegulator = new Date().getTime(); //this is a basic switch that helps in the process of counting time for the game.
    var gameTime = 0; //game time is seconds in game and is 0.0625 * of a real second.
    var sleeperTime = (60 * 60 * 7); //the game starts 7 in game hours later than the start time.
    var gameMinute = 0;
    var gameHour = 0;
    var gameDay = 0;
    var gameSeason = 0; //There are four seasons: Frost, Bounty, Bright, Harvest
    var gameYear = 0; //game years are only 360 days made up of four 90 day seasons.
    var hourOfDay = 0;
    var minuteOfHour = 0;
    var seasonOfYear = 0;
    var secondOfMinute = 0;
    var dayOfYear = 0;
    var currentSeason = "Harvest";
    var timeOfDay = "Day";
    var darkestDark = 0;
    var nightDarkness = 0;


    //Game Pausing, Moderation, and Control
    var gameState = "mainMenu"; //set to "active" for ingame play, and set to "mainMenu" for the main menu.

    //Functioning
    var gameLoopNumber = 0;

    //Saving
    var update = 6; //change this by one whenever a new update has changed any of the key game aspects that might interfere with the normal save structure.
    var lastUpdate = 0;
    var saveType = 1;
    var loadType = 1;
    var saveBrain = {};
    var autosaving = true;

    //Important Sensing Variables
    var mouseX = 0; //main canvas mouse coords.
    var mouseY = 0; //main canvas mouse coords.
    var lMouseX = 0; //lower canvas mouse coords.
    var lMouseY = 0; //lower canvas mouse coords.
    var wMouseX = 0; //window mouse coords.
    var wMouseY = 0; //window mouse coords.
    var clicked = false; //senses upon click and during hold click.
    var clickReleased = true; //senses once for the briefest moment upon release.
    var dClick = false;

    //Other Variables (extra)
    var drunkScreenShift = 0;
    var drunkDirectionSwitch = false;
    var itemDescriptionBox = false;
    var showBeastStat = -1;

    //Lower Canvas
    var lowBar = "information"; //This variable determines what type of menu the lower bar is.
        //inventory
    var invScroll = 0; //this is the variable that lets you scroll through the inventory.
        //questLog
    var questScroll = 0;
        //shop
    var merchScroll = 0;
    var itemAmount = 1;
        //bank
    var bankAccount = [];
    var bankSlots = 1;
    var bankSlotCost = 25;
    var bankScroll = 0;
        //crafting
    var crafting = "none";
    var craftScroll = 0;
    var initialcraftingItemSet = false;
        //magic menu
    var magicMenu = "primary";
    var magicPos = 0;
    var primarySpells = [];
    var secondarySpells = [];
    var tertiarySpells = [];
        //Well List
    var wellConversionList = [["pintGlass", "waterPintGlass"], ["walrusLeatherWaterskin", "walrusLeatherWaterskinFull"], ["bucket", "bucketOfWater"], ["potionGlass", "vialOfWater"], ["kellishClayPot", "kellishClayPotOfWater"], ["glassBottle", "glassBottleOfWater"]]; //todo use this to have the well convert empty containers into water-filled versions.
        //conversations and dialogue
    var conversationID = ["none", 0]; //[Person conversing with, stage in conversation]
    var conversations =
    {
        toggin: ["Toggin", 0],
        teber: ["Teber", 0],
        drohfor: ["Drohfor", 0],
        maggy: ["Maggy", 0],
        kedwin: ["Kedwin", 0],
        stendor: ["Stendor", 0],
        medlia: ["Medlia", 0],
        neculai: ["Neculai", 0],
        kronheime: ["Kronheime", 0]
    };

    //time Tracker Variables
    var beegin = "start"; // this is a variable that lets TTP set to time natural when the game starts
    var TTN = 0; //Current Time a.k.a [Time Now]
    var TTP = 0; //Previous Time a.k.a [Time Previous]
    var TTD = 0; //Difference in time a.k.a [Delta Time]
    var fairSleep = true; //when the game starts this makes sure the sleep timer is caught up to game time.

    //Key sensing variables
    var wKey = false;
    var sKey = false;
    var spaceKey = false;
    var shiftKey = false;
    var altKey = false;
    var qKey = false;
    var eKey = false;
    var key1 = false;
    var key2 = false;
    var key3 = false;
    var key4 = false;
    var key5 = false;
    var key6 = false;
    var key7 = false;
    var key8 = false;
    var key9 = false;
    var key0 = false;
    var tildKey = false;

    //DEVELOPMENTAL VARIABLES (variables for the developer to use)
        //Locational
    var tellCoords = false; //This displays the players exact world coordinates on the screen.
        //AI Unit Focused
    var showSight = false; //This makes every AI UNIT draw their rangeOfSight to the world.
    var adminShowSight = false; //this is the switch that controls showSight.
    var showPlayerAttackBubble = false; //This shows the bubble/radius in which the players attack will deal damage.
    var testingUnitCenters = false; //This displays the center point of all AI UNITS.
    var testingUnitSizes = false; //This displays the AI Units' sizes as a faded white circle.
    var unitSurround = true;
        //manipulation
    var wallPhase = false;
        //Player Stat Focused
    var extraSkillPoints = 0;
    var energyDrink = false; //This makes energy regenerate at its absolute fastest point but it slowly deteriorates the players health by 1 for every couple of seconds.
    var quickRegeneration = false; //This makes both health and energy restore quickly.
    var incredibleHulk = false; //This makes the character outrageously strong and constituted.
    var developerRapidamente = false; //This must be true as well as rapidamente in order to enable super speed.
    var rapidamente = false; //This makes the character have true super speed, but this only works if the above is also true.
    var constantEXP = false;
    var constantMagic = false;
    var machineGunCrossbow = false;
    var energil = 1;
        //Items
    var cheatItem = 0; //When the cheat is not active this should be at zero. This number represents the extra amount of items generated by the drop all option.
        //displays
    var showAntiVenomBar = false;
    
        //dialogue variables
    var playersTurnToSpeak = true;
    var playersTurnToMove = true;// this is how I will force it to behave.

    //In-Game Pop Ups Variables
    var popDuration = 0; //This is the timer for how long some popups will last.
    var popType = 0;
    var confirmed = false;
        //Confirm variables
    var save1 = null;
    var save2 = null;
    var save3 = null;
    var save4 = null;
    var save5 = null;
    var save6 = null;
    var save7 = null;
    var save8 = null;

    //UNIQUE CHARACTERS
    var uniqueChars =
    {
        //Unique character life/death status //true means alive false means dead...
        bobithLDS: true,
        medliaLDS: true,
        drohforLDS: true,
        hilmundLDS: true,
        teberLDS: true,
        kedwinLDS: true,
        laandegLDS: true,
        maggyLDS: true,
        odeeLDS: true,
        togginLDS: true,
        hetmerLDS: true,
        kronheimeLDS: true,
        stendorLDS: true,
        neculaiLDS: true,
        roselinLDS: true,
        fenwikLDS: true,
        schuylarLDS: true
    };
    //QUESTS
    var quests =
    {
        //questLog variables
        questMenu: "active",
        activeQuests: [],
        completeQuests: [],

        //SHOP DEALS/OTHER VARIABLES TO DO STUFF WITH DIALOGUE
        neculaiShopDeal: false,
        bankruptNeculai: false,
        medliaNewWealth: 0,
        bobithNewWealth: 0,
        neculaiNewWealth: 0,

        //QUEST: Teshir North Road ---- given by Toggin
        teshirNorthRoadBandits: true,
        teshirNorthRoadKillCount: 0,
        teshirNorthRoadQuest: false,

        //QUEST: Hunting Wager ---- given by Drohfor
        huntingWagerFrichPack: false,
        huntingWagerKillCount: 0,
        huntingWagerQuest: false,

        //QUEST: Medlia Competition Control ---- given by Medlia
        medliaCompetitionControlReward: 0,
        medliaCompetitionControlCompletionStyle: false,
        medliaCompetitionControlQuest: false,

        //QUEST: The Balgur Mercenaries ---- given by Neculai
        theBalgurMercenariesReward: 0,
        theBalgurMercenariesNecklace: false,
        theBalgurMercenariesMercsKilled: 0,
        theBalgurMercenariesCompletionStyle: false,
        theBalgurMercenariesQuest: false,

        //QUEST: The Master Thief of Teshir ---- given by Stendor
        theMasterThiefOfTeshirNeevSlain: false,
        theMasterThiefOfTeshirNeevKnown: false,
        theMasterThiefOfTeshirQuest: false,

        //QUEST: Bounty: Hetmer the Bandit Chieftain ---- given by Stendor
        bountyHetmerQuest: false,

        //QUEST: Bounty: Teber the Deserter ---- given by Stendor
        bountyTeberCompletionStyle: false,
        bountyteberQuest: false

    };

    //IMPORTANT LISTS
    //This list stores the identity of the players character
    var mainCharacterAccess = [];
    mainCharacterAccess.push(new Adventurer()); //This is the line of code that adds the main character to its access list.
    var player = mainCharacterAccess[0];
    //This list stores the identities of all the game's AI Units.
    var ArtificialIntelligenceAccess = [];
    //this list stores the example guy for the character builder.
    var exampleGuyList = [];
    exampleGuyList.push(new drawExampleCharacter(1/2 * CCC.width, 1/2 * CCC.height - 115, 0));
    //this list stores the Selector Bar Class for the character builder.
    var selectorList = [];
    selectorList.push(new Selector(1/2 * CCC.width - 105, 260, "race", 8)); // 0 == race selector
    selectorList.push(new Selector(1/2 * CCC.width - 105, 300, "gender", 2)); // 1 == gender selector
    selectorList.push(new Selector(1/2 * CCC.width - 105, 340, "class", 6)); // 2 == wealth and social class selector
    selectorList.push(new Selector(1/2 * CCC.width - 105, 380, "style", 2)); // 3 == combat style selector

    //this list is of all the beast your character learns about in the world.
        //this is an example beast entry:
    //this.beastEntry = {intReq: 0, name: "", health: "", armour: "", damage: "", negate: "", ability: "", fireProof: #, habitat: "", sight: #, alpha: "", magicProof: #, size: #, speed: #, rotation: #, rate: #, experience: #, description: [""], image: [IMG, strX, strY, W, H, adjX, adjY, SzX, SzY]};
    var beastJournal = [];

    //This List stores all of the lights that penetrate the darkness of the night.
    // X and Y determine location of the light, size determines its size, extraStops determines if it is a more complicated gradient with a middle stop layer, GDR is how long the alpha you specify lasts until it fades to black, the GDR's go from 0 - 1 max, Alpha is all about the transparency of the light bubble at each stage of the gradient, showMe is a way to draw the light no matter what.
    //light objects look like this: {X:, Y:, size:, extraStops:, GRD:, Alpha:, showMe:}
    var lights = [];

    //This list stores the dead from the AI list.
    var deadAIList = [];

    //This list stores the identities of all the game's Items.
    var worldItems = [];

    //Player Inventory
    var Inventory = [];
    //todo TEST INVENTORIES
    //Inventory = [[new Item("coins", false, false), 10000], [new Item("vardanianBattleAxe", false, false), 1], [new Item("jvostranPlateArmour", false, false), 1], [new Item("crossbow", false, false), 1], [new Item("steelBolt", false, false), 100], [new Item("walrusLeatherWaterskinFull", false, false), 2], [new Item("shehidToxinArrow", false, false), 45], [new Item("oiledArrow", false, false), 45], [new Item("fireStarter", false, false), 1], [new Item("lifeLeachArrow", false, false), 45], [new Item("fireArrow", false, false), 45], [new Item("freezingArrow", false, false), 45], [new Item("oilLantern", false, false), 1], [new Item("berulnToothNecklace", false, false), 1], [new Item("ogardPerfume", false, false), 2]];
    //Inventory = [[new Item("healingSalve", false, false), 1], [new Item("driedCyrinthilimMushroom", false, false), 1], [new Item("cyrinthilimMushroom", false, false), 1], [new Item("kellishClayPotOfMushroomStew", false, false), 1], [new Item("kellishClayPotOfNaapridMilk", false, false), 1], [new Item("kellishClayPotOfWater", false, false), 1], [new Item("kellishClayPot", false, false), 1], [new Item("fermentedViperVenomGland", false, false), 1], [new Item("viperVenomGland", false, false), 1], [new Item("viperSnakeSkin", false, false), 1], [new Item("rawViperFlesh", false, false), 1], [new Item("viperMeat", false, false), 1], [new Item("jvostranPlateArmour", false, false), 1], [new Item("waterPintGlass", false, false), 1], [new Item("pintGlass", false, false), 1], [new Item("harstAle", false, false), 1], [new Item("potionGlass", false, false), 1], [new Item("vialOfWater", false, false), 1], [new Item("frichFurMittens", false, false), 1], [new Item("halcifMushroom", false, false), 1], [new Item("walrusLeatherWaterskin", false, false), 1], [new Item("walrusLeatherWaterskinFull", false, false), 1], [new Item("bucketOfNaapridMilk", false, false), 1], [new Item("bucketOfWater", false, false), 1], [new Item("bucket", false, false), 1], [new Item("boiledGlinMushrooms", false, false), 1], [new Item("glinMushrooms", false, false), 6], [new Item("neprilneBerries", false, false), 1], [new Item("culprisLeaf", false, false), 1], [new Item("tylunFlower", false, false), 1], [new Item("akerBerries", false, false), 1], [new Item("pluttBerries", false, false), 1], [new Item("stomwikLeaf", false, false), 1], [new Item("hammer", false, false), 1], [new Item("lrgBlackBearPelt", false, false), 1], [new Item("medBlackBearPelt", false, false), 1], [new Item("smlBlackBearPelt", false, false), 1], [new Item("bearTongue", false, false), 1], [new Item("rawBearTongue", false, false), 1], [new Item("bearMeat", false, false), 1], [new Item("rawBearFlesh", false, false), 1], [new Item("varnFurDress", false, false), 2], [new Item("varnFurCloak", false, false), 2], [new Item("varnFurClothing", false, false), 2], [new Item("frichFurClothing", false, false), 3], [new Item("vardanianBattleAxe", false, false), 1], [new Item("vardanianCleaver", false, false), 1], [new Item("fireStarter", false, false), 1], [new Item("wood", false, false), 55], [new Item("katana", false, false), 1], [new Item("winterWolfClothing", false, false), 2], [new Item("winterWolfOutfit", false, false), 2], [new Item("freydicRoyalOutfit", false, false), 2], [new Item("naapridLeatherArmour", false, false), 2], [new Item("winterWolfDress", false, false), 2], [new Item("freydicRoyalDress", false, false), 2], [new Item("youngNaapridMeat", false, false), 4], [new Item("rawYoungNaapridFlesh", false, false), 2], [new Item("naapridHorn", false, false), 8], [new Item("naapridPelt", false, false), 3], [new Item("naapridMeat", false, false), 14], [new Item("rawNaapridFlesh", false, false), 17], [new Item("thenganSwordAndShield", false, false), 1], [new Item("glassJar", false, false), 6], [new Item("rawTrollsBlood", false, false), 10], [new Item("chainArmour", false, false), 52], [new Item("blackChainArmour", false, false), 12], [new Item("freydicGreatSword", false, false), 5], [new Item("aldrekiiArrow", false, false), 79], [new Item("wolfLiver", false, false), 4], [new Item("rawWolfLiver", false, false), 8], [new Item("winterWolfPelt", false, false), 3], [new Item("massiveWinterWolfPelt", false, false), 1], [new Item("rawWinterWolfFlesh", false, false), 2], [new Item("winterWolfMeat", false, false), 3], [new Item("torperVenomSac", false, false), 4], [new Item("torperFuzz", false, false), 2], [new Item("torperMeat", false, false), 13], [new Item("rawTorperFlesh", false, false), 16], [new Item("frichPelt", false, false), 6], [new Item("frichMeat", false, false), 8], [new Item("rawFrichFlesh", false, false), 3], [new Item("freydicSpear", false, false), 1], [new Item("rawGulfreyFlesh", false, false), 2], [new Item("gulfreyMeat", false, false), 3], [new Item("gulfreyShell", false, false), 14], [new Item("gulfreyMandibles", false, false), 1], [new Item("vomit", false, false), 1], [new Item("gojiiBerries", false, false), 19], [new Item("blueBlade", false, false), 1], [new Item("berulnMeat", false, false), 3], [new Item("rawBerulnFlesh", false, false), 2], [new Item("bigBerulnPelt", false, false), 1], [new Item("berulnPelt", false, false), 1], [new Item("berulnSkull", false, false), 1], [new Item("ogoFruit", false, false), 8], [new Item("arrow", false, false), 49], [new Item("longbow", false, false), 1], [new Item("walrusLeatherArmour", false, false), 1], [new Item("coins", false, false), 2890540], [new Item("yaihefBerries", false, false), 2256], [new Item("mace", false, false), 1], [new Item("etyrMeat", false, false), 4], [new Item("etyrHide", false, false), 12], [new Item("longsword", false, false), 1], [new Item("rawEtyrFlesh", false, false), 8], [new Item("rawWalrusFlesh", false, false), 2], [new Item("walrusMeat", false, false), 3], [new Item("blubber", false, false), 5], [new Item("walrusTusks", false, false), 1], [new Item("elderWalrusTusks", false, false), 4], [new Item("walrusHide", false, false), 2], [new Item("elderWalrusHide", false, false), 2], [new Item("freydicWarAxe", false, false), 1], [new Item("trollsBlood", false, false), 20] ];
    //Inventory = [[new Item("balgurCaptainArmour", false, false), 1], [new Item("balgurMercArmour", false, false), 1], [new Item("longSpikedMorningStar", false, false), 1], [new Item("rasper", false, false), 1], [new Item("kellishSawClub", false, false), 1], [new Item("hammer", false, false), 1], [new Item("kellishClaymore", false, false), 1], [new Item("warHammer", false, false), 1], [new Item("vardanianHeavyCleaver", false, false), 1], [new Item("timberAxe", false, false), 1], [new Item("curvedDagger", false, false), 1], [new Item("crossbow", false, false), 1], [new Item("steelBolt", false, false), 100], [new Item("dualCurvedDaggers", false, false), 1], [new Item("nirineseSpear", false, false), 1], [new Item("hetmerArmour", false, false), 1], [new Item("vardanianBattleAxe", false, false), 1], [new Item("vardanianCleaver", false, false), 1], [new Item("katana", false, false), 1], [new Item("naapridLeatherArmour", false, false), 1], [new Item("thenganSwordAndShield", false, false), 1], [new Item("chainArmour", false, false), 1], [new Item("blackChainArmour", false, false), 1], [new Item("freydicGreatSword", false, false), 1], [new Item("aldrekiiArrow", false, false), 79], [new Item("freydicSword", false, false), 1], [new Item("pickaxe", false, false), 1], [new Item("aldrekiiBlade", false, false), 1], [new Item("flail", false, false), 1], [new Item("gulfreyShellArmour", false, false), 1], [new Item("vardanianAxe", false, false), 1], [new Item("vardanianAxeDual", false, false), 1], [new Item("freydicSpear", false, false), 1], [new Item("nirineseSabre", false, false), 1], [new Item("blueBlade", false, false), 1], [new Item("arrow", false, false), 250], [new Item("longbow", false, false), 1], [new Item("walrusLeatherArmour", false, false), 1], [new Item("aldrekiiBardiche", false, false), 1], [new Item("coins", false, false), 20], [new Item("freydicWarAxe", false, false), 1], [new Item("mace", false, false), 1], [new Item("longsword", false, false), 1]];
    Inventory = [[new Item("embers", false, false), 1], [new Item("fireballI", false, false), 1], [new Item("iceClaymore", false, false), 1], [new Item("iceSpikes", false, false), 1], [new Item("flyingColours", false, false), 1], [new Item("frostWind", false, false), 1], [new Item("repel", false, false), 1], [new Item("lifeTap", false, false), 1], [new Item("drainingI", false, false), 1], [new Item("vivification", false, false), 1], [new Item("chasingLights", false, false), 1]];

    //Test Spells
    primarySpells = [];
    secondarySpells = [];
    tertiarySpells = [];

    //This list holds one of each type of weapon so that the player can access the weapons stats.
    var allWeapons = [];
    allWeapons.push(new Item("mace", false)); //0
    allWeapons.push(new Item("longsword", false)); //1
    allWeapons.push(new Item("none", false)); //2
    allWeapons.push(new Item("freydicWarAxe", false)); //3
    allWeapons.push(new Item("aldrekiiBardiche", false)); //4
    allWeapons.push(new Item("longbow", false)); //5
    allWeapons.push(new Item("arrow", false)); //6
    allWeapons.push(new Item("blueBlade", false)); //7
    allWeapons.push(new Item("nirineseSabre", false)); //8
    allWeapons.push(new Item("freydicSpear", false)); //9
    allWeapons.push(new Item("vardanianAxeDual", false)); //10
    allWeapons.push(new Item("vardanianAxe", false)); //11
    allWeapons.push(new Item("flail", false)); //12
    allWeapons.push(new Item("aldrekiiBlade", false)); //13
    allWeapons.push(new Item("pickaxe", false)); //14
    allWeapons.push(new Item("freydicSword", false)); //15
    allWeapons.push(new Item("aldrekiiArrow", false)); //16
    allWeapons.push(new Item("freydicGreatSword", false)); //17
    allWeapons.push(new Item("thenganSwordAndShield", false)); //18
    allWeapons.push(new Item("katana", false)); //19
    allWeapons.push(new Item("vardanianCleaver", false)); //20
    allWeapons.push(new Item("vardanianBattleAxe", false)); //21
    allWeapons.push(new Item("crossbow", false)); //22
    allWeapons.push(new Item("steelBolt", false)); //23
    allWeapons.push(new Item("nirineseSpear", false)); //24
    allWeapons.push(new Item("curvedDagger", false)); //25
    allWeapons.push(new Item("dualCurvedDaggers", false)); //26
    allWeapons.push(new Item("timberAxe", false)); //27
    allWeapons.push(new Item("vardanianHeavyCleaver", false)); //28
    allWeapons.push(new Item("iceBlade", false)); //29
    allWeapons.push(new Item("warHammer", false)); //30
    allWeapons.push(new Item("kellishClaymore", false)); //31
    allWeapons.push(new Item("hammer", false)); //32
    allWeapons.push(new Item("kellishSawClub", false)); //33
    allWeapons.push(new Item("rasper", false)); //34
    allWeapons.push(new Item("shehidToxinArrow", false)); //35
    allWeapons.push(new Item("oiledArrow", false)); //36
    allWeapons.push(new Item("lifeLeachArrow", false)); //37
    allWeapons.push(new Item("fireArrow", false)); //38
    allWeapons.push(new Item("freezingArrow", false)); //39
    allWeapons.push(new Item("longSpikedMorningStar", false)); //40

    //This list holds one of each type of worn item so that the player can access the worn item stats.
    var allWorn = [];
    allWorn.push(new Item("nude", false)); //0
    allWorn.push(new Item("walrusLeatherArmour", false)); //1
    allWorn.push(new Item("gulfreyShellArmour", false)); //2
    allWorn.push(new Item("blackChainArmour", false)); //3
    allWorn.push(new Item("chainArmour", false)); //4
    allWorn.push(new Item("freydicRoyalDress", false)); //5
    allWorn.push(new Item("winterWolfDress", false)); //6
    allWorn.push(new Item("naapridLeatherArmour", false)); //7
    allWorn.push(new Item("freydicRoyalOutfit", false)); //8
    allWorn.push(new Item("winterWolfOutfit", false)); //9
    allWorn.push(new Item("winterWolfClothing", false)); //10
    allWorn.push(new Item("hetmerArmour", false)); //11
    allWorn.push(new Item("frichFurClothing", false)); //12
    allWorn.push(new Item("varnFurClothing", false)); //13
    allWorn.push(new Item("varnFurCloak", false)); //14
    allWorn.push(new Item("varnFurDress", false)); //15
    allWorn.push(new Item("frichFurMittens", false)); //16
    allWorn.push(new Item("jvostranPlateArmour", false)); //17
    allWorn.push(new Item("grushFurClothing", false)); //18
    allWorn.push(new Item("balgurMercArmour", false)); //19
    allWorn.push(new Item("balgurCaptainArmour", false)); //20
    allWorn.push(new Item("berulnToothNecklace", false)); //21

    var scenicList = [];

    //this is the list of projectiles fired by the player.
    var playerProjectiles = [];

    //this is the list of projectiles fired by all AI UNITS
    var unitProjectiles = [];

    //this is the list for all magic interactive animations.
    var magicList = [];

    //this is the list of the current shops wares.
    var shopID = "none";
    var shopInventory = [];
    var initialShopItemSet = false;
    var initialBankItemSet = false;

    //CRAFTING ITEM-LISTS
        //Smithing (Items crafted using an anvil)
    var smithing = [];
    smithing.push(new Item("hammer", false));
    smithing.push(new Item("mace", false));
    smithing.push(new Item("longsword", false));
    smithing.push(new Item("kellishSawClub", false));
    smithing.push(new Item("freydicWarAxe", false));
    smithing.push(new Item("aldrekiiBardiche", false));
    smithing.push(new Item("longbow", false));
    smithing.push(new Item("arrow", false));
    smithing.push(new Item("lifeLeachArrow", false));
    smithing.push(new Item("freezingArrow", false));
    smithing.push(new Item("fireArrow", false));
    smithing.push(new Item("blueBlade", false));
    smithing.push(new Item("nirineseSabre", false));
    smithing.push(new Item("freydicSpear", false));
    smithing.push(new Item("vardanianAxeDual", false));
    smithing.push(new Item("vardanianAxe", false));
    smithing.push(new Item("flail", false));
    smithing.push(new Item("aldrekiiBlade", false));
    smithing.push(new Item("pickaxe", false));
    smithing.push(new Item("freydicSword", false));
    smithing.push(new Item("aldrekiiArrow", false));
    smithing.push(new Item("freydicGreatSword", false));
    smithing.push(new Item("thenganSwordAndShield", false));
    smithing.push(new Item("katana", false));
    smithing.push(new Item("gulfreyShellArmour", false));
    smithing.push(new Item("blackChainArmour", false));
    smithing.push(new Item("chainArmour", false));
    smithing.push(new Item("freydicRoyalOutfit", false));
    smithing.push(new Item("vardanianCleaver", false));
    smithing.push(new Item("vardanianBattleAxe", false));
    smithing.push(new Item("crossbow", false));
    smithing.push(new Item("steelBolt", false));
    smithing.push(new Item("timberAxe", false));
    smithing.push(new Item("vardanianHeavyCleaver", false));
    smithing.push(new Item("warHammer", false));
    smithing.push(new Item("kellishClaymore", false));
    smithing.push(new Item("bucket", false));
    smithing.push(new Item("jvostranPlateArmour", false));
    smithing.push(new Item("oilLampEmpty", false));
    smithing.push(new Item("oilLanternEmpty", false));
    smithing.push(new Item("longSpikedMorningStar", false));

        //Foods (Items cooked at either a stove, an oven, or a campfire)
    var foods = [];
    foods.push(new Item("cookedPotato", false));
    foods.push(new Item("etyrMeat", false));
    foods.push(new Item("olkrinMeat", false));
    foods.push(new Item("trollMeat", false));
    foods.push(new Item("walrusMeat", false));
    foods.push(new Item("frichMeat", false));
    foods.push(new Item("youngNaapridMeat", false));
    foods.push(new Item("naapridMeat", false));
    foods.push(new Item("berulnMeat", false));
    foods.push(new Item("winterWolfMeat", false));
    foods.push(new Item("wolfLiver", false));
    foods.push(new Item("gulfreyMeat", false));
    foods.push(new Item("torperMeat", false));
    foods.push(new Item("varnMeat", false));
    foods.push(new Item("bearMeat", false));
    foods.push(new Item("bearTongue", false));
    foods.push(new Item("trollsBlood", false));
    foods.push(new Item("gribMeat", false));
    foods.push(new Item("boiledGlinMushrooms", false));
    foods.push(new Item("viperMeat", false));
    foods.push(new Item("kellishClayPotOfMushroomStew", false));
    foods.push(new Item("santhBread", false));
    foods.push(new Item("grushMeat", false));
    foods.push(new Item("cookedMofuEgg", false));
    foods.push(new Item("mofflingMeat", false));
    foods.push(new Item("akerMoffling", false));
    foods.push(new Item("pluttMoffling", false));
    foods.push(new Item("mofuMeat", false));
    foods.push(new Item("largeMofuMeat", false));
    foods.push(new Item("jarOfOil", false));
    foods.push(new Item("roastedPumpkin", false));
    foods.push(new Item("bucketOfHotPluttBerryCider", false));
    foods.push(new Item("bucketOfTechiTea", false));

        //Tailoring (Items crafted at a weaving, sewing, dying, etc. tailor's work bench thing)
    var tailoring = [];
    tailoring.push(new Item("walrusLeatherArmour", false));
    tailoring.push(new Item("freydicRoyalDress", false));
    tailoring.push(new Item("winterWolfDress", false));
    tailoring.push(new Item("naapridLeatherArmour", false));
    tailoring.push(new Item("winterWolfOutfit", false));
    tailoring.push(new Item("winterWolfClothing", false));
    tailoring.push(new Item("frichFurClothing", false));
    tailoring.push(new Item("frichFurMittens", false));
    tailoring.push(new Item("varnFurClothing", false));
    tailoring.push(new Item("varnFurCloak", false));
    tailoring.push(new Item("varnFurDress", false));
    tailoring.push(new Item("walrusLeatherWaterskin", false));
    tailoring.push(new Item("grushFurClothing", false));
    tailoring.push(new Item("tent", false));
    tailoring.push(new Item("cloth", false));
    tailoring.push(new Item("naapridFiber", false));
        //Jewelry (Items crafted at a jewler's station, rings, necklaces, cutting gems, glassblowing etc.)
    var jewelry = [];
    jewelry.push(new Item("glassJar", false));
    jewelry.push(new Item("pintGlass", false));
    jewelry.push(new Item("glassBottle", false));
    jewelry.push(new Item("potionGlass", false));
    jewelry.push(new Item("fireStarter", false));
    jewelry.push(new Item("berulnToothNecklace", false));
        //Alchemy (Potions and mixtures crafted at an alchemy lab station)
    var alchemy = [];
    alchemy.push(new Item("cleansingPotion", false));
    alchemy.push(new Item("healingSalve", false));
    alchemy.push(new Item("rawTrollsBlood", false));
    alchemy.push(new Item("energyPotionI", false));
    alchemy.push(new Item("speedPotionI", false));
    alchemy.push(new Item("energilPotionI", false));
    alchemy.push(new Item("energilPotionII", false));
    alchemy.push(new Item("fermentedNarthwarpMouth", false));
    alchemy.push(new Item("fermentedViperVenomGland", false));
    alchemy.push(new Item("driedCyrinthilimMushroom", false));
    alchemy.push(new Item("fermentedMofuEgg", false));
    alchemy.push(new Item("groundOgard", false));
    alchemy.push(new Item("ogardPerfume", false));



        //Brewing (alcohols, liquid fermentation, etc.)
    var brewing = [];
    brewing.push(new Item("harstAle", false));
    brewing.push(new Item("glassBottleOfPluttWine", false));

        //Forge
    var forge = [];
    forge.push(new Item("kellishClayPot", false));

    //Handcrafted (things the player can do without a work station of some kind)
    var handcrafted = [];
    handcrafted.push(new Item("emptyBag", false));
    handcrafted.push(new Item("bagOfSanthFlour", false));
    handcrafted.push(new Item("suuliMelonSlice", false));
    handcrafted.push(new Item("naapridButter", false));
    handcrafted.push(new Item("butteredSanthBread", false));
    handcrafted.push(new Item("santhFlour", false));
    handcrafted.push(new Item("santhDough", false));
    handcrafted.push(new Item("shehidToxinArrow", false));
    handcrafted.push(new Item("oiledArrow", false));
    handcrafted.push(new Item("oilLantern", false));
    handcrafted.push(new Item("oilLamp", false));
    handcrafted.push(new Item("candle", false));
    handcrafted.push(new Item("jackOLanternEmpty", false));
    handcrafted.push(new Item("jackOLantern", false));
    handcrafted.push(new Item("waterPintGlass", false));
    handcrafted.push(new Item("bucketOfPluttJuice", false));
    handcrafted.push(new Item("pluttJuicePintGlass", false));
    handcrafted.push(new Item("pluttCiderPintGlass", false));
    handcrafted.push(new Item("pluttWine", false));
    handcrafted.push(new Item("driedPluttBerries", false));
    handcrafted.push(new Item("driedTechiLeaf", false));
    handcrafted.push(new Item("techiTea", false));

    //This sets the items that are in shops.
    function shopItemIDSetter()
    {
        if (lowBar == "shop" || initialShopItemSet == false)
        {
            initialShopItemSet = true;
            for (var i = 0; i < shopInventory.length; i++)
            {
                shopInventory[i][0].setItemID();
            }
        }

        if (lowBar == "bank" || initialBankItemSet == false)
        {
            initialBankItemSet = true;
            for (var i = 0; i < bankAccount.length; i++)
            {
                bankAccount[i][0].setItemID();
            }
        }

        if (lowBar == "crafting" || initialcraftingItemSet == false)
        {
            if (crafting == "smithing" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < smithing.length; i++)
                {
                    smithing[i].setItemID();
                }
            }
            if (crafting == "foods" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < foods.length; i++)
                {
                    foods[i].setItemID();
                }
            }
            if (crafting == "tailoring" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < tailoring.length; i++)
                {
                    tailoring[i].setItemID();
                }
            }
            if (crafting == "jewelry" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < jewelry.length; i++)
                {
                    jewelry[i].setItemID();
                }
            }
            if (crafting == "alchemy" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < alchemy.length; i++)
                {
                    alchemy[i].setItemID();
                }
            }
            if (crafting == "forging" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < forge.length; i++)
                {
                    forge[i].setItemID();
                }
            }
            if (crafting == "brewing" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < brewing.length; i++)
                {
                    brewing[i].setItemID();
                }
            }
            if (crafting == "handcrafted" || initialcraftingItemSet == false)
            {
                for (var i = 0; i < handcrafted.length; i++)
                {
                    handcrafted[i].setItemID();
                }
            }
            initialcraftingItemSet = true;
        }
    }

    //This function runs through the list of Units and activates their Operation functions.
    function projectileOperationsManagement(z)
    {
        if (gameState == "active" || gameState == "stopTime")
        {
            for (var i = 0; i < playerProjectiles.length; i++)
            {
                if (playerProjectiles[i].zIndex == z)
                {
                    playerProjectiles[i].operations();
                }
            }
        }
        if (gameState == "active")
        {
            for (var i = 0; i < unitProjectiles.length; i++)
            {
                if (unitProjectiles[i].zIndex == z)
                {
                    unitProjectiles[i].operations();
                }
            }
        }
    }
    //This function runs through the list of Units and activates their Operation functions.
    function magicOperationsManagement(z)
    {
        if (gameState == "active" || gameState == "stopTime")
        {
            for (var i = 0; i < magicList.length; i++)
            {
                if (magicList[i].zIndex == z)
                {
                    magicList[i].operations();
                }
            }
        }
    }
    //This function runs through the list of Units and activates their Operation functions.
    function artificialIntelligenceOperationsManagement(z)
    {
        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
        {
            if (ArtificialIntelligenceAccess[i].zIndex == z)
            {
                if (gameState == "active")
                {
                    ArtificialIntelligenceAccess[i].operation();
                }
                else if (gameState == "stopTime" && ArtificialIntelligenceAccess[i].timeResistance == true) //when the player uses magic to stop time time resistant creatures will still exist but all others will disapear until time starts again. //TODO this needs to be rearranged if it is ever going to be a real spell for the game. Units would need to be able to take damage and draw during paused time.
                {
                    ArtificialIntelligenceAccess[i].operation();
                }
            }
        }
    }
    function aiIdentify()
    {
        if (gameState == "active")
        {
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                ArtificialIntelligenceAccess[i].interaction();
            }
        }
    }
    //This function runs through the list of Units and activates their Operation functions.
    function deadAIOperationsManagement()
    {
        for (var i = 0; i < deadAIList.length; i++)
        {
            deadAIList[i].operation();
        }
    }
    //This function runs through the list of scenery and activates their operation functions.
    function sceneryOperationsManager(z)
    {
        if (gameState == "active" || gameState == "stopTime")
        {
            for (var i = 0; i < scenicList.length; i++)
            {
                if (scenicList[i].zIndex == z)
                {
                    if (scenicList[i].X > X - (1.6 * CCC.width) && scenicList[i].X < X + (1.6 * CCC.width) && scenicList[i].Y > Y - (1.6 * CCC.height) && scenicList[i].Y < Y + (1.6 * CCC.height))
                    {
                        scenicList[i].operations();
                    }
                }
            }
        }
    }
    //This function runs through the lists of Items and activates their operation functions.
    function ItemOperationsManager(z)
    {

        if (gameState == "active" || gameState == "stopTime")
        {
            for (var i = 0; i < worldItems.length; i++)
            {
                if (worldItems[i][0].zIndex == z)
                {
                    if (worldItems[i][0].X > X - (1.2 * CCC.width) && worldItems[i][0].X < X + (1.2 * CCC.width) && worldItems[i][0].Y > Y - (1.2 * CCC.height) && worldItems[i][0].Y < Y + (1.2 * CCC.height))
                    {
                         worldItems[i][0].operations();
                    }
                }
            }

        }

        for (var i = 0; i < allWeapons.length; i++)
        {
            allWeapons[i].operations();
        }
        for (var i = 0; i < allWorn.length; i++)
        {
            allWorn[i].operations();
        }
    }
    //this function contains cheat methods that rely on the gameLoop.
    function cheats()
    {
        if (constantEXP == true)
        {
            player.experience += 1;
        }

        if (constantMagic == true)
        {
            player.will += 0.2;
        }

        //Official Cheats
        if (key0)
        {
            key0 = false;
            var cheatcode = prompt("Enter game code:");
            if (cheatcode == null)
            {
                
            }
            else if (cheatcode == "1390")
            {
                player.concentration = Math.round(player.concentration / 2);
                player.eminence = Math.round(player.eminence / 2);
            }
            else if (cheatcode == "00567817")
            {
                player.concentration = 0;
                player.eminence = 0;
                if (player.willpower == 1)
                {
                    player.willpower = 0;
                }
                else
                {
                    player.willpower = 1;
                }
            }
            else if (cheatcode == "8675309")
            {
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
                magicList.push(new Magic({ID: "chasingLights"}, true));
            }
            else if (cheatcode == "111248392741664s")
            {
                if (player.eminence == 50)
                {
                    player.eminence = 1000;
                }
            }
            else if (cheatcode == "SerJackOfLantern")
            {
                player.timeSinceLightSourceFuelUsed = new Date().getTime();
                player.lightSourceDuration = 540;
                player.lightSource = "jackOLantern";
            }
            else if (cheatcode == "KoolKandleKrew")
            {
                player.timeSinceLightSourceFuelUsed = new Date().getTime();
                player.lightSourceDuration = 180;
                player.lightSource = "candle";
            }
            else if (cheatcode == "SkiP")
            {
                sleeperTime += (60 * 60 * 3);
            }
            else if (cheatcode == "SkP")
            {
                sleeperTime += (60 * 60 * 1);
            }
            else if (cheatcode == "SliP")
            {
                sleeperTime -= (60 * 60 * 3);
            }
            else if (cheatcode == "SlP")
            {
                sleeperTime -= (60 * 60 * 1);
            }
            else if (cheatcode == "getTime")
            {
                alert("Total Real Time Played: " + Math.floor(timePlayed) +
                    " Second Of Game Minute: " + secondOfMinute +
                    " Minute Of Game Hour: " + minuteOfHour + " Hour Of Game Day: " + hourOfDay + " Day of Game Year: " + dayOfYear + " Time of Day: " + timeOfDay +
                " Current Game Season: " + currentSeason)
            }
            else if (cheatcode == "6060842")
            {
                player.energilTime = 100;
                player.fatigueI = true;
            }
            else if (cheatcode == "drugsaregoodandifyoudothempeoplethinkthatyou'recool")
            {
                player.constitution = 1000;
                player.health = player.healthMAX;
                player.inebriation = 10000000;
                player.cyrinthilimTime = 10000000;
            }
            else if (cheatcode == "444416skyeisthecoolerest164444")
            {
                constantMagic = true;
            }
            else if (cheatcode == "badbeans")
            {
                player.gassinessTime += 10;
                magicList.push(new Magic({ID:"fart"}, true));
            }
            else if (cheatcode.toLowerCase() == "resetquests")
            {
                quests.teshirNorthRoadQuest = false;
                quests.teshirNorthRoadBandits = true;
                quests.teshirNorthRoadKillCount = 0;
                uniqueChars.hetmerLDS = true;

                quests.huntingWagerQuest = false;
                quests.huntingWagerFrichPack = true;
                quests.huntingWagerKillCount = 0;
            }
            else if (cheatcode == "4444444444444444")
            {
                if (player.eminence == 50 && player.knowledge == 50)
                {
                    player.hunger = player.hungerMAX;
                    player.thirst = player.thirstMAX;
                }
            }
            else if (cheatcode.toLowerCase() == "lineuptodie")
            {
                if (unitSurround == true)
                {
                    unitSurround = false;
                }
                else
                {
                    unitSurround = true;
                }
            }
            else if (cheatcode.toLowerCase() == "tellme")
            {
                alert(player.necklaceEquipped);
            }
            else if (cheatcode.toLowerCase() == "clearinv")
            {
                Inventory = [];
            }
            else if (cheatcode.toLowerCase() == "testinv")
            {
                console.log(Inventory);
            }
            else if (cheatcode.toLowerCase() == "buensiesta")
            {
                sleep();
            }
            else if (cheatcode.toLowerCase() == "coords")
            {
                if (tellCoords == true)
                {
                    tellCoords = false;
                }
                else
                {
                    tellCoords = true;
                }
            }
            else if (cheatcode.toLowerCase() == "attackbubble")
            {
                if (showPlayerAttackBubble == true)
                {
                    showPlayerAttackBubble = false;
                }
                else
                {
                    showPlayerAttackBubble = true;
                }
            }
            else if (cheatcode.toLowerCase() == "restoredesmonde")
            {
                if (player.name == "Desmonde")
                {
                    player.level = 13;
                    player.skillPoints = 4 * 13;
                    player.totalSkillPoints = 4 * 14;
                    teshirNorthRoadBandits = false;
                    teshirNorthRoadKillCount = 4;
                    teshirNorthRoadQuest = "complete";
                    huntingWagerFrichPack = false;
                    huntingWagerKillCount = 3;
                    huntingWagerQuest = "complete";
                    Inventory = [[new Item("glinMushrooms", false, false), 3], [new Item("neprilneBerries", false, false), 6], [new Item("frichMeat", false, false), 130], [new Item("hetmerArmour", false, false), 1], [new Item("vardanianCleaver", false, false), 1], [new Item("freydicSword", false, false), 1], [new Item("freydicGreatSword", false, false), 1], [new Item("winterWolfOutfit", false, false), 1], [new Item("walrusLeatherWaterskinFull", false, false), 6], [new Item("walrusLeatherWaterskin", false, false), 28], [new Item("walrusMeat", false, false), 5], [new Item("fireStarter", false, false), 1], [new Item("suuliMelonSlice", false, false), 12], [new Item("coins", false, false), 394]];
                    bankSlots = 10;
                }
            }
            else if (cheatcode.toLowerCase() == "yoglithewarriornun")
            {
                if (player.name == "Yogli" && player.gender == "Female")
                {
                    player.constitution = 4;
                    player.strength = 10;
                    player.stamina = 5;
                    player.dexterity = 1;
                    player.skillPoints = 4;
                    player.totalSkillPoints = 4 * 6;
                    player.title = "Warrior Nun";
                }
            }
            else if (cheatcode.toLowerCase() == "fixcombatsenser")
            {
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].DTP() > ArtificialIntelligenceAccess[i].rangeOfSight)
                    {
                        ArtificialIntelligenceAccess[i].playerSeen = false;
                    }
                }
                player.engagedSenser();
            }
            else if (cheatcode.toLowerCase() == "howsexyami")
            {
                player.charisma = JSON.parse(prompt("You tell me, how sexy are you???"));
            }
            else if (cheatcode.toLowerCase() == "easterly")
            {
                ArtificialIntelligenceAccess.push(new Unit(X + 55, Y - 55, "Neev", false, "Bruma"));
            }
            else if (cheatcode.toLowerCase() == "westerly")
            {
                ArtificialIntelligenceAccess.push(new Unit(X - 55, Y - 55, "Neev", true, "Wester"));
            }
            else if (cheatcode.toLowerCase() == "racepickeradvanced")
            {
                player.raceName = prompt("Welcome to the all new race picker advanced edition, Enter your desired racial preload:");
            }
            else if (cheatcode.toLowerCase() == "selfproclaimedtitle")
            {
                player.title = prompt("Proclaim your new title then...");
            }
            else if (cheatcode.toLowerCase() == "unstuckme")
            {
                this.speechMovementInhibitor = false;
                playersTurnToSpeak = true;

                {
                    X = X + Math.cos(player.rotation + 1/2 * Math.PI) * 55;
                    Y = Y + Math.sin(player.rotation + 1/2 * Math.PI) * 55;
                }
            }
            else if (cheatcode.toLowerCase() == "fixmininoticelist")
            {
                player.miniNoticeList = [];
            }
            else if (cheatcode.toLowerCase() == "fixinvplus")
            {
                //invScroll = -79;
                player.inventoryPosition += 1;
                alert(player.inventoryPosition);
            }
            else if (cheatcode.toLowerCase() == "fixinv")
            {
                player.inventoryPosition = 0;
                invScroll = 0;
            }
            else if (cheatcode.toLowerCase() == "fixinvminus")
            {
                //invScroll = 0;
                player.inventoryPosition -= 1;
                alert(player.inventoryPosition);
            }
            else if (cheatcode.toLowerCase() == "serpytheserpent")
            {
                ArtificialIntelligenceAccess.push(new Unit(X + 40, Y, "Viper", false, "Serpy the Serpent"));
            }
            else if (cheatcode.toLowerCase() == "traavinjathetroll")
            {
                ArtificialIntelligenceAccess.push(new Unit(X + 1000, Y + 1000, "BogTroll", false, "Traavinja the Troll"));
            }
            else if (cheatcode.toLowerCase() == "gravimullthetroll")
            {
                ArtificialIntelligenceAccess.push(new Unit(X + 1100, Y + 1100, "BogTroll", true, "Gravimull the Troll"));
            }
            else if (cheatcode.toLowerCase() == "wetnoodle")
            {
                player.toughness = 0;
                player.endurance = 0;
                player.stamina = 0;
                player.charisma = 0;
            }
            else if (cheatcode.toLowerCase() == "lightningflashspeedyspeed")
            {
                rapidamente = true;
                developerRapidamente = true;
            }
            else if (cheatcode.toLowerCase() == "dameunaespada")
            {
                worldItems.push([new Item("katana", X, Y), 1]);
            }
            else if (cheatcode == "over9000")
            {
                player.level = 9001;
            }
            else if (cheatcode.toLowerCase() == "thisgameismissingsomething")
            {
                player.totalSkillPoints -= player.constitution;
                player.constitution = 0;
                player.health = player.healthMAX;
                if (machineGunCrossbow == false)
                {
                    Inventory = [];
                    Inventory.push([new Item("crossbow", false, false), 1]);
                    Inventory.push([new Item("steelBolt", false, false), 11]);
                    machineGunCrossbow = true;
                }
            }
            else if (cheatcode.toLowerCase() == "clearitems")
            {
                worldItems = [];
            }
        }
    }

    //This function sets the lower canvas X and Y to un-problematic values whilst the mouse is in the main inventory.
    function lowerCanvasMouseCoordsReset()
    {
        lMouseX = -1000; //this makes it so when you are not in the lower canvas it does not try to set your mouses position, which can accidentally click something you didn't want to.
        lMouseY = 1000;
    }

    function mainCanvasMouseCoordsReset()
    {


        mouseX = Math.cos(player.rotation - 1/2 * Math.PI) * 500000;
        mouseY = Math.sin(player.rotation - 1/2 * Math.PI) * 500000;
    }

    function newGameButton()
    {
        if (mouseX > (1/2 * CCC.width) - (1/2 * 300) && mouseX < ((1/2 * CCC.width) - (1/2 * 300)) + 300 && mouseY > 200 && mouseY < 200 + 80)
        {
            this.hoveredOver = true;
        }
        else
        {
            this.hoveredOver = false;
        }
        //draw button
        if (this.hoveredOver == true)
        {
            XXX.beginPath();
            XXX.fillStyle = "gold";
            XXX.lineWidth = 5;
            XXX.strokeStyle = "black";
            XXX.rect((1/2 * CCC.width) - (1/2 * 300), 200, 300, 80);
            XXX.fill();
            XXX.stroke();
        }
        else
        {
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = 5;
            XXX.strokeStyle = "black";
            XXX.rect((1/2 * CCC.width) - (1/2 * 300), 200, 300, 80);
            XXX.fill();
            XXX.stroke();
        }
        //draw text in button
        XXX.fillStyle = "black";
        XXX.font = "40px Impact";
        XXX.fillText("Start New Game", (1/2 * CCC.width) - (1/2 * 255), 255);

        if (this.hoveredOver == true && clicked == true)
        {
            clicked = false;
            gameState = "characterBuilder";
        }
    }

    function resumeGameButton()
    {
        if (mouseX > (1/2 * CCC.width) - (1/2 * 300) && mouseX < ((1/2 * CCC.width) - (1/2 * 300)) + 300 && mouseY > 290 && mouseY < 290 + 80)
        {
            this.hoveredOver = true;
        }
        else
        {
            this.hoveredOver = false;
        }
        //draw button
        if (this.hoveredOver == true)
        {
            XXX.beginPath();
            XXX.fillStyle = "gold";
            XXX.lineWidth = 5;
            XXX.strokeStyle = "black";
            XXX.rect((1/2 * CCC.width) - (1/2 * 300), 290, 300, 80);
            XXX.fill();
            XXX.stroke();
        }
        else
        {
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = 5;
            XXX.strokeStyle = "black";
            XXX.rect((1/2 * CCC.width) - (1/2 * 300), 290, 300, 80);
            XXX.fill();
            XXX.stroke();
        }
        //draw text in button
        XXX.fillStyle = "black";
        XXX.font = "40px Impact";
        XXX.fillText("Resume Game", (1/2 * CCC.width) - (1/2 * 230), 345);

        if (this.hoveredOver == true && clicked == true)
        {
            clicked = false;
            gameState = "loadSelect";
        }
    }

    function drawExampleCharacter(exX, exY, exRotation) //this is the character example that is shown during the character creator.
    {

        this.lLegY = 0;
        this.rLegY = 0;
        this.legSwitch = 0;

        //to put it simply, this function draws two lines that represent the main character's legs.
        this.drawLegs = function()
        {
            XXX.save();
            XXX.translate(exX, exY);
            XXX.rotate(exRotation);
            XXX.strokeStyle ="black";
            XXX.lineWidth = 2;
            XXX.moveTo(-4, 0);
            XXX.lineTo(-4, 0 + this.lLegY);
            XXX.stroke();
            XXX.moveTo(4, 0);
            XXX.lineTo(4, 0 + this.rLegY);
            XXX.stroke();
            XXX.restore();
        };

        //this function draws a circle the color of the character's race with a black border line around it, this acts as the main characters body.
        this.drawBody = function()
        {
            XXX.save();
            XXX.translate(exX, exY);
            XXX.rotate(exRotation);
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.arc(0, 0, 10, 0, 2 * Math.PI);
            XXX.strokeStyle = "black";
            XXX.fillStyle = player.race;
            XXX.stroke();
            XXX.fill();
            XXX.restore();
        };

        //draw an example character so the player can see their characters colour change as they look through the different races.
        this.drawArms = function()
        {
            XXX.save();
            XXX.translate(exX, exY);
            XXX.rotate(exRotation);
            XXX.drawImage(polyPNG, 631, 55, 92, 30, -22, -17, 46, 22);
            XXX.restore();
        };

        this.walkWhenHoveredOver = function()
        {
            if (mouseX >= exX - 10 && mouseX <= exX + 10 && mouseY >= exY - 10 && mouseY <= exY + 10)
            {
                this.hoveredOver = true;
            }
            else
            {
                this.hoveredOver = false;
                this.lLegY = 0;
                this.rLegY = 0;
                this.legSwitch = 0;
            }

            if (this.hoveredOver == true)
            {
                // the right leg goes back 25 pixles and the left goes forward 25.
                if (this.lLegY < 23 && this.legSwitch == 0 )
                {
                    // this makes the legs extend
                    this.lLegY += 11 / (16.75 - (0.17 / 2));
                    this.rLegY -= 11 / (16.75 - (0.17 / 2));
                    //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    //switch to the right leg forward routine.
                    this.legSwitch = 1;
                }

                // the left leg goes back 25 pixles and the right goes forward 25.
                if (this.lLegY > -23 && this.legSwitch == 1)
                {
                    // this makes the legs extend
                    this.lLegY -= 11 / (16.75 - (0.17 / 2));
                    this.rLegY += 11 / (16.75 - (0.17 / 2));
                    //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    // switch to the left leg forward routine.
                    this.legSwitch = 0;
                }
            }
        };

        this.operations = function()
        {
            this.walkWhenHoveredOver();
            this.drawLegs();
            this.drawBody();
            this.drawArms();
        }
    }

    //this is the button to begin the game after having built your character. It sets your inventory according to your selections.
    function applySelectionsButton()
    {

        //DRAW SELF
        if (mouseX > (1/2 * CCC.width) - (1/2 * 300) && mouseX < ((1/2 * CCC.width) - (1/2 * 300)) + 300 && mouseY > 450 && mouseY < 450 + 80)
        {
            this.hoveredOver = true;
        }
        else
        {
            this.hoveredOver = false;
        }
        //draw button
        if (this.hoveredOver == true)
        {
            XXX.beginPath();
            XXX.fillStyle = "gold";
            XXX.lineWidth = 5;
            XXX.strokeStyle = "black";
            XXX.rect((1/2 * CCC.width) - (1/2 * 300), 450, 300, 80);
            XXX.fill();
            XXX.stroke();
        }
        else
        {
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = 5;
            XXX.strokeStyle = "black";
            XXX.rect((1/2 * CCC.width) - (1/2 * 300), 450, 300, 80);
            XXX.fill();
            XXX.stroke();
        }
        //draw text in button
        XXX.fillStyle = "black";
        XXX.font = "40px Impact";
        XXX.fillText("Begin", (1/2 * CCC.width), 505);

        if (this.hoveredOver == true && clicked == true)
        {
            clicked = false;

            //Spells set to empty
            primarySpells = [];
            secondarySpells = [];
            tertiarySpells = [];

            //NOBILITY and ROYALTY have INCREASED versions of their FACTION RELATIONS
            if (player.title == "Nobility" && player.raceName == "Kel" || player.title == "Royalty" && player.raceName == "Kel")
            {
                player.kelFaction = 500; //green (kellish) Chieftain Har
                player.thengarFaction = -500; //brown (thengan) King Wolthgar
                player.freynorFaction = 25; //blue (freydic) King Jirdun
                player.aldrekFaction = 25; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = 25; //yellow (orgish) King Lysander
                player.vardanFaction = -15; //black (vardanian) High Count Arlod
                player.cephriteFaction = 25; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = -15; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.endurance = 5;
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Thengar" || player.title == "Royalty" && player.raceName == "Thengar")
            {
                player.kelFaction = -500; //green (kellish) Chieftain Har
                player.thengarFaction = 500; //brown (thengan) King Wolthgar
                player.freynorFaction = 40; //blue (freydic) King Jirdun
                player.aldrekFaction = -5; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = -40; //yellow (orgish) King Lysander
                player.vardanFaction = 25; //black (vardanian) High Count Arlod
                player.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = -20; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.strength = 4;
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Freynor" || player.title == "Royalty" && player.raceName == "Freynor")
            {
                player.kelFaction = 25; //green (kellish) Chieftain Har
                player.thengarFaction = 40; //brown (thengan) King Wolthgar
                player.freynorFaction = 500; //blue (freydic) King Jirdun
                player.aldrekFaction = 0; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = 0; //yellow (orgish) King Lysander
                player.vardanFaction = 0; //black (vardanian) High Count Arlod
                player.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = -5; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.toughness = 4;

                    if (player.gender == "Male")
                    {
                        Inventory.push([new Item("freydicRoyalOutfit", false, false), 1]);
                    }
                    else
                    {
                        Inventory.push([new Item("freydicRoyalDress", false, false), 1]);
                    }
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Aldrek" || player.title == "Royalty" && player.raceName == "Aldrek")
            {
                player.kelFaction = 15; //green (kellish) Chieftain Har
                player.thengarFaction = 0; //brown (thengan) King Wolthgar
                player.freynorFaction = 0; //blue (freydic) King Jirdun
                player.aldrekFaction = 500; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = -500; //yellow (orgish) King Lysander
                player.vardanFaction = -20; //black (vardanian) High Count Arlod
                player.cephriteFaction = -500; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = -500; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.ranged = 5;
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Orgell" || player.title == "Royalty" && player.raceName == "Orgell")
            {
                player.kelFaction = 10; //green (kellish) Chieftain Har
                player.thengarFaction = -49; //brown (thengan) King Wolthgar
                player.freynorFaction = 0; //blue (freydic) King Jirdun
                player.aldrekFaction = -500; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = 500; //yellow (orgish) King Lysander
                player.vardanFaction = 0; //black (vardanian) High Count Arlod
                player.cephriteFaction = -49; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = -49; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.dexterity = 1;
                    player.stamina = 1;
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Vardan" || player.title == "Royalty" && player.raceName == "Vardan")
            {
                player.kelFaction = -20; //green (kellish) Chieftain Har
                player.thengarFaction = 25; //brown (thengan) King Wolthgar
                player.freynorFaction = 0; //blue (freydic) King Jirdun
                player.aldrekFaction = -35; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = 0; //yellow (orgish) King Lysander
                player.vardanFaction = 500; //black (vardanian) High Count Arlod
                player.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = 0; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.stamina = 4;
                    player.dexterity = 2;
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Cephrite" || player.title == "Royalty" && player.raceName == "Cephrite")
            {
                player.kelFaction = 20; //green (kellish) Chieftain Har
                player.thengarFaction = 0; //brown (thengan) King Wolthgar
                player.freynorFaction = 0; //blue (freydic) King Jirdun
                player.aldrekFaction = -500; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = -45; //yellow (orgish) King Lysander
                player.vardanFaction = 0; //black (vardanian) High Count Arlod
                player.cephriteFaction = 500; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = -49; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.knowledge = 2;
                    player.willpower = 4;
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Nirwaden" || player.title == "Royalty" && player.raceName == "Nirwaden")
            {
                player.kelFaction = 0; //green (kellish) Chieftain Har
                player.thengarFaction = -35; //brown (thengan) King Wolthgar
                player.freynorFaction = 0; //blue (freydic) King Jirdun
                player.aldrekFaction = -500; //red (aldrekii) Evaraxii Zoteff
                player.orgellFaction = -35; //yellow (orgish) King Lysander
                player.vardanFaction = -35; //black (vardanian) High Count Arlod
                player.cephriteFaction = -25; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                player.nirwadenFaction = 500; //orange (nirinese) Queen Lelaine
                if (player.title == "Royalty")
                {
                    player.dexterity = 2;
                    player.stamina = 2;
                }
            }
            else if (player.title == "Nobility" && player.raceName == "Nirwaden" || player.title == "Royalty" && player.raceName == "Outlander")
            {
                if (player.title == "Royalty")
                {
                    player.skillPoints = 10 + extraSkillPoints;
                }
            }

            //Race and rank based STARTER WEAPONS
            //FIGHTER starting weapon kits.
            if (player.class == "Fighter" && player.raceName == "Thengar")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner")
                {
                    Inventory.push([new Item("pickaxe", false, false), 1]);
                }
                else if (player.title == "Tradefolk")
                {
                    Inventory.push([new Item("longsword", false, false), 1]);
                }
                else
                {
                    Inventory.push([new Item("thenganSwordAndShield", false, false), 1]);
                }
            }
            else if (player.class == "Fighter" && player.raceName == "Vardan")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner")
                {
                    Inventory.push([new Item("vardanianAxe", false, false), 1]);
                }
                else if (player.title == "Tradefolk")
                {
                    Inventory.push([new Item("vardanianAxeDual", false, false), 1]);
                }
                else if (player.title == "Royalty")
                {
                    Inventory.push([new Item("vardanianBattleAxe", false, false), 1]);
                }
                else if (player.title == "Highfolk")
                {
                    Inventory.push([new Item("vardanianCleaver", false, false), 1]);
                }
                else if (player.title == "Nobility")
                {
                    Inventory.push([new Item("vardanianHeavyCleaver", false, false), 1]);
                }
            }
            else if (player.class == "Fighter" && player.raceName == "Nirwaden")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner")
                {
                    Inventory.push([new Item("nirineseSpear", false, false), 1]);
                }
                else
                {
                    Inventory.push([new Item("nirineseSabre", false, false), 1]);
                }
            }
            else if (player.class == "Fighter" && player.raceName == "Freynor")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner")
                {
                    Inventory.push([new Item("freydicSpear", false, false), 1]);
                }
                else
                {
                    Inventory.push([new Item("freydicSword", false, false), 1]);
                }
            }
            else if (player.class == "Fighter" && player.raceName == "Aldrek")
            {
                Inventory.push([new Item("aldrekiiBlade", false, false), 1]);
            }
            else if (player.class == "Fighter" && player.raceName == "Orgell")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner")
                {
                    Inventory.push([new Item("curvedDagger", false, false), 1]);
                }
                else if (player.title == "Tradefolk")
                {
                    Inventory.push([new Item("dualCurvedDaggers", false, false), 1]);
                }
                else
                {
                    Inventory.push([new Item("katana", false, false), 1]);
                }
            }
            else if (player.class == "Fighter" && player.raceName == "Kel")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner")
                {
                    Inventory.push([new Item("kellishSawClub", false, false), 1]);
                }
                else if (player.title == "Tradefolk")
                {
                    Inventory.push([new Item("warHammer", false, false), 1]);
                }
                else
                {
                    Inventory.push([new Item("kellishClaymore", false, false), 1]);
                }
            }
            else if (player.class == "Fighter") //This is the general one for all that don't meet a specific exception.
            {
                Inventory.push([new Item("mace", false, false), 1]);
            }
            //RANGER starting weapon kit
            if (player.class == "Ranger" && player.raceName == "Aldrek")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner" || player.title == "Tradefolk")
                {
                    Inventory.push([new Item("longbow", false, false), 1], [new Item("arrow", false, false), 25]);
                }
                else
                {
                    Inventory.push([new Item("longbow", false, false), 1], [new Item("aldrekiiArrow", false, false), 25]);
                }
            }
            if (player.class == "Ranger" && player.raceName == "Nirwaden")
            {
                if (player.title == "Vagabond" || player.title == "Peasant" || player.title == "Commoner" || player.title == "Tradefolk")
                {
                    //todo add a weak crossbow that can only use a special type of weak bolt and give it to the lower class Nirinese to start with if they are a ranger.
                    Inventory.push([new Item("longbow", false, false), 1], [new Item("arrow", false, false), 20]);
                }
                else if (player.title == "Highfolk")
                {
                    Inventory.push([new Item("crossbow", false, false), 1], [new Item("steelBolt", false, false), 15]);
                }
                else
                {
                    Inventory.push([new Item("crossbow", false, false), 1], [new Item("steelBolt", false, false), 45]);
                }
            }
            else if (player.class == "Ranger")//This is the general one for all that don't meet a specific exception.
            {
                Inventory.push([new Item("longbow", false, false), 1], [new Item("arrow", false, false), 25]);
            }
            //MAGE starting weapon kit
            //TODO start mages off with a basic level combat magic scroll.
            if (player.class == "Mage")//This is the general one for all that don't meet a specific exception.
            {
                if (player.raceName != "Cephrite")
                {
                    player.knowledge += 1;
                    player.willpower += 1;
                    player.memory += 1;

                    if (player.raceName == "Freynor")
                    {
                        Inventory.push([new Item("iceSpikes", false, false), 1]);
                    }
                    else if (player.raceName == "Vardan")
                    {
                        Inventory.push([new Item("drainingI", false, false), 1]);
                    }
                    else
                    {
                        Inventory.push([new Item("embers", false, false), 1]);
                    }
                }
                else
                {
                    player.knowledge += 1;
                    player.memory += 2;
                    Inventory.push([new Item("flyingColours", false, false), 1], [new Item("fireballI", false, false), 1]);
                }
            }

            //Special bonuses for some races
            if (player.raceName == "Aldrek")
            {
                player.baseThirst = 35;
            }
            else if (player.raceName == "Freynor")
            {
                player.baseWarmth = 80;
            }
            else if (player.raceName == "Kel")
            {
                player.baseHunger = 60;
            }
            //reset stats.
            player.setBaseStats();
            player.energy = player.energyMAX;
            player.health = player.healthMAX;
            player.will = player.willMAX;
            player.warmth = player.warmthMAX;
            player.thirst = player.thirstMAX;

            //set starting areas
                //Freynor starting area is the default
            if (player.raceName == "Kel")
            {
                X = -1297;
                Y = -30784;
            }
            //Actually start the game here.
            gameState = "active";
            requestAnimationFrame(gameloopOfDestiny, CCC);
        }

    }

    function Selector(bX, bY, type, selNumMAX)
    {

        var selectNumber = 0;

        this.drawSelf = function()
        {
            //Draw Left Scroller
            XXX.drawImage(polyPNG, 1, 735, 11, 30, bX - 11, bY, 6, 32);
            //Draw Name Display
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.rect(bX, bY, 210, 30);
            XXX.fill();
            XXX.stroke();
            //Draw Right Scroller
            XXX.drawImage(polyPNG, 11, 735, 11, 30, bX +214, bY, 6, 32);
        };

        this.scroll = function()
        {
            //left Scroll
            if (mouseX < bX && mouseX >= bX - 13 && mouseY > bY && mouseY < bY + 30 && clicked == true)
            {
                clicked = false;
                selectNumber -= 1;
            }
            else if (mouseX > bX + 210 && mouseX <= bX + 223 && mouseY > bY && mouseY < bY + 30 && clicked == true)
            {
                clicked = false;
                selectNumber += 1;
            }

            if (selectNumber < 0)
            {
                selectNumber = selNumMAX;
            }
            else if (selectNumber > selNumMAX)
            {
                selectNumber = 0;
            }
        };

        this.definer = function() //this function defines what the selector means based on its type.
        {
            if (type == "gender")
            {
                if (selectNumber == 0)
                {
                    //gender: Female
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Female", bX + 105, bY + 23);
                    //attributes:
                    player.gender = "Female";
                        //gender low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Women of the realm are treated differently depending on the culture they are a part of.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 1)
                {
                    //gender: Male
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Male", bX + 105, bY + 23);
                    //attributes:
                    player.gender = "Male";
                        //gender low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Men of the realm tend to be more priveledged in their opportunities.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 2)
                {
                    //gender: Hermaphrodite
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Hermaphrodite", bX + 105, bY + 23);
                    //attributes:
                    player.gender = "hermaphrodite";
                        //gender low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Although there is no hermaphrodite specific gameplay, choosing this sex will allow you to play the exclusive content reserved for both male and female characters.", 5, (LCC.height / 2) + 4);
                    }
                }
            }
            else if (type == "style")
            {
                if (selectNumber == 0)
                {
                    //Combat Style: Fighter
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Fighter", bX + 105, bY + 23);
                    //attributes:
                    player.class = "Fighter";
                    //combat style low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Fighters specialize in close quarters combat with weapons like swords, daggers, axes, hammers, spears, etc. This class will allow your character to start out with a close quarters weapon appropriate to your culture and status.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 1)
                {
                    //Combat Style: Fighter
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Ranger", bX + 105, bY + 23);
                    //attributes:
                    player.class = "Ranger";
                    //combat style low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Rangers specialize in the use of projectile weapons meant to attack targets from long distances such as bows, crossbows, blowdarts, powder guns, etc. This class will allow your character to start out with a ranged weapon appropriate to your culture and status.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 2)
                {
                    //Combat Style: Fighter
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Mage", bX + 105, bY + 23);
                    //attributes:
                    player.class = "Mage";
                    //combat style low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Magi's talents revolve around the realm of magic rather than the physical and their weapon of choice is in fact their own mind and spirit, with which they use to tap into the magical essence of reality. This class will allow your character to start out with a beginner level spell scroll appropriate to your culture and status.", 5, (LCC.height / 2) + 4);
                    }
                }
            }
            else if (type == "class")
            {
                //[ascribed titles include: scum, peasant, commoner, tradefolk, highfolk, nobility, and royalty]
                if (selectNumber == 0)
                {
                    //Wealth Class: Scum
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Vagabond", bX + 105, bY + 23);
                    //attributes:
                    player.title = "Vagabond";
                    if (player.raceName == "Vardan")
                    {
                        Inventory = [];
                        player.hunger = 1/8 * player.hungerMAX;
                        player.satiated = false;
                    }
                    else
                    {
                        Inventory = [];
                        player.hunger = 4/11 * player.hungerMAX;
                        player.satiated = false;
                    }
                    //class low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("You grew up an orphan and barely scratched out a living off of scraps and who knows what else. Now you are a vagabond wandering from place to place without a home nor any money to speak of, never really sure where your next meal is coming from.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 1)
                {
                    //Wealth Class: Peasant
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Peasant", bX + 105, bY + 23);
                    //attributes:
                    player.title = "Peasant";
                    if (player.raceName == "Vardan")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 12]);
                        player.hunger = 1/6 * player.hungerMAX;
                        player.satiated = false;
                    }
                    else
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 20]);
                        player.hunger = 6/11 * player.hungerMAX;
                        player.satiated = false;
                    }
                    //class low bar description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("You spent your childhood in a small one room shack that you shared with your entire family, but you never felt too cramped because you hardly ever had a chance to go inside with all of the hard labour you had to help your family with to get by.", 5, (LCC.height / 2) + 4);

                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Now that you're older you have set off to seek your fortune, your family gives you all of the coins they can spare and you feel your nervous heartbeat as you say your last goodbyes and step out the door.", 5, (LCC.height / 2) + 16);
                    }

                }
                else if (selectNumber == 2)
                {
                    //Wealth Class: Commoner
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Commoner", bX + 105, bY + 23);
                    //attributes:
                    player.title = "Commoner";
                    if (player.raceName == "Vardan")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 23]);
                        player.hunger = 5 / 18 * player.hungerMAX;
                        player.satiated = false;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("You grew up as an apprentice under a master artisan, but one day when it was time for your daily training your master didn't show... Eventually you found him, he was lying on the side of the road stabbed through and bleeding.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Although you did not have a master long enough to learn your craft, the money he had in his workshop was enough to subsidize your family's income until you were grown enough to set off and make your fortune.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 26]);
                        player.hunger = 8 / 11 * player.hungerMAX;
                        player.satiated = false;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("You grew up as an apprentice under a master artisan, but you were constantly bored by the art and honestly didn't retain much or any of it because when it came time for your evaluation you failed.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Now that you are older you have decided to walk your own path, rather than the one chosen for you by your family. You take what coin your family can afford to give and set of on your journey.", 5, (LCC.height / 2) + 16);
                        }
                    }
                }
                else if (selectNumber == 3)
                {
                    //Wealth Class: Tradefolk
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Tradefolk", bX + 105, bY + 23);
                    //attributes:
                    player.title = "Tradefolk";
                    if (player.raceName == "Vardan")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 26]);
                        player.hunger = 1 / 3 * player.hungerMAX;
                        player.satiated = false;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("The civil war created horrible conditions for trade, and trade being your family's only source of income made your life a bit challenging. There were several times when your family considered selling you, but luckily for you they didn't.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Now the civil war has passed and trade is starting to come back to Vardania your family gives you what little they can and you set off to make your fortune.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 35]);
                        player.hunger = player.hungerMAX;
                        player.satiated = false;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Growing up the child of a trader family you had a relatively comfortable childhood. Your house wasn't large but it was a place to live and it was warm. Now that you are fully grown you're expected to go off and seek your fortune", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("so that you are no longer a drain on your family's income. They give you a bag of coins and set you on your way.", 5, (LCC.height / 2) + 16);
                        }
                    }
                }
                else if (selectNumber == 4)
                {
                    //Wealth Class: Highfolk
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Highfolk", bX + 105, bY + 23);
                    //attributes:
                    player.title = "Highfolk";
                    if (player.raceName == "Vardan")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 88]);
                        player.hunger = 3 / 4 * player.hungerMAX;
                        player.satiated = false;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Highfolk, an empty title in Vardania, in fact being related to nobility in any way or form was extremely dangerous, luckily your family's lineage is connected to the new high counts family rather than his slain predecessor or one of those other deposed counts.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Of course being related to the high count doesn't really get you any favours, you're like his second cousin twice removed's cousin on her mom's side's nephew... or something like that, it is hard to remember.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Nirwaden")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 140]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your family managed to come into a good deal of money through successful trade ventures during your childhood and purchased minor ranks of nobility from the crown, whose treasury was in need of some fresh coin.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("After purchasing status your family's wealth dropped significantly, but by the time you were old enough to make your own living your family had enough money to give you a sizable bag of coins for your venture.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 150]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("You grew up with relatively abundant amounts of wealth, in fact you had a very comfortable childhood. As the grandnephew of a local nobles cousin's halfsister you also sort of had status in society.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("When it was time for you to leave home you were given a substantial amount of money to help you on your way.", 5, (LCC.height / 2) + 16);
                        }
                    }
                }
                else if (selectNumber == 5)
                {
                    //Wealth Class: Nobility
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Nobility", bX + 105, bY + 23);
                    //attributes:
                    player.title = "Nobility";
                    if (player.raceName == "Vardan")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 900]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Growing up in your father's household you were raised to believe that those who were not of nobility were lesser creatures ultimately only here to support your family's lavish existence. When you came of age your", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("father suggested that you explore that which you will one day govern in the name of the high count, for this venture he gives you a huge amount of coins, as you had expected he would of course...", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Nirwaden")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 1000]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Having been born to one of the important magnates in the kingdom of Nirwaden your childhood was all about preparing for your position in society. As much as you honored your family you also wanted to be able to make your own", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("choices, so when you came of age you requested permission to travel the lands, it harldy seemed likely but that permission was granted and you set off with a massive load of coins on your adventure.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Freynor")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 800]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Just because you grew up as the first child of a powerful Jarl doesn't mean that you didn't get your feet wet in the snow. As a youngin' you practised hunting land walruses with your father's men, and once you even watch one of your father's knights slay a giant gulfrey.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("When you came of age your father sat you down and told you that in order to be truly prepared for becoming jarl you would have to prove your worth to the Freydic people by walking, hunting, and fighting along side them. 'A Freydic jarl must know the land and the people.'", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Kel")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 240]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your mother is a Chieftain of one of the many Kellish tribes unified by Chieftain Har, growing up you knew it was your honor to inheirit the leadership and protection of your brothers and sisters in the tribe.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("When you came of age, your mother requested from you that you go on a spiritual quest of self awakening so that when you return you will have true wisdom to share with the brothers and sisters.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Orgell")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 1200]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("As your family was one of the wealthiest families in the tribe it was obvious that they were chosen to be lords of the new homeland. It was now your family's duty to protect the homeland from the savage Adrekii who were unrelenting in their ferocity.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("When you came of age you left with a load of wealth to experience your people old nomadic ways so that you would be truly wisened by the time you returned to your inheritance, your parents protested but slowly they gave in to your request.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Aldrek")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 950]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Having grown up as the child of high ranking lords, you grew up surrounded by astounding amounts of wealth. As soon as you came of age you set off to explore the creator's miracles, with an excessive amount of wealth to pad the journey.", 5, (LCC.height / 2) + 4);
                        }
                    }
                    else if (player.raceName == "Cephrite")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 1400]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your parents were both in The Grand Magus Council for your entire childhood, they were quite old when they had you but they were able to express to you the importance of magical study. So study you did, and by the time they had died around the time you came", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("of age you were granted a seat on the council in their place. As a councilor of Cephrite you decided it was your duty to learn more about the world so that you could make more educated decisions on the council. So you set off!", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Outlander")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 650]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your parents were nobles, yes, in a far off land a long way from here... You were schemed out of your inheritance of course by your jealous younger sibling who wanted what was rightfully yours. Your sibling raised", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("an army with your own money and used it to cast you out claiming that you killed your parents to get their wealth sooner. A servant helped you escape your own castle with a chest of coins.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Thengar")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 800]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Having grown up with rich and noble parents, you have been raised to inherit their wealth, part of that responsibility is of course learning how to lead men and women into war. Throughout your childhood you have trained for this and finally once you got to lead your first attack", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("against an unsupsecting Kellish tribe you slipped on slick mud and nearly got stabbed through. Luckily a Thengan soldier was their to see your disgrace and she dragged you out of the battle as an excuse to retreat, she was killed of course to hide the shame you brought your family.", 5, (LCC.height / 2) + 16);
                        }
                    }
                }
                else if (selectNumber == 6)
                {
                    //Wealth Class: Royalty
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Royalty", bX + 105, bY + 23);
                    //attributes:
                    player.title = "Royalty";
                    if (player.raceName == "Vardan")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 3500]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30 && player.gender == "Male")
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("You grew up on the battlefielf with your father, who was constantly at war with one of his brother's counts or another. It wasn't until your father won the civil war and claimed the throne as high count that you were able to settle down, and when you did it wasn't", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("for long because as soon as you came of age your father sent you out the door with a large bag of cash claiming that in order to hold the kingdom from future claimants you needed to be ready to face the world on your own.", 5, (LCC.height / 2) + 16);
                        }
                        else if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("You grew up on the battlefielf with your father, who was constantly at war with one of his brother's counts or another. It wasn't until your father won the civil war and claimed the throne as high count that you were able to settle down, and when you did it wasn't", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("for long because as soon as you came of age your father sent you out the door with a large bag of cash claiming that in order for him to hold the kingdom from future claimants he needed you to get married into alliance with another powerful kingdom, Thengaria.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Nirwaden")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 4000]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30 && player.gender == "Male")
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your mother, Queen Lelaine, was a very busy monarch throughout your childhood, so much so that you were mostly raised by her servants. Your father who was king in name but in truth had almost no power in the court was almost always busy pretending to be busy so you never", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("really saw much of him either. Eventually as you got older though you mother paid you more mind and explained to you that you were to travel the realm and gain experience during her reign so that you will be more fit to inherit the kingdom upon your return.", 5, (LCC.height / 2) + 16);
                        }
                        else if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("You grew up in the shadow of your mother, Queen Lelaine, she expected you to be just like her, and you couldn't help but feel a bit oppressed by her standards for you. You spent almost all day in The Temple of The Everlasting Spirit, studying the faith and learning ", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("the divinity's ambitious goals for creation and this empire you are to inherit. You were there the day that your mother's men captured the first Aldrekii city, and on that day she told you how she had saved those people from irrelivance and a single life.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Freynor")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 3250]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30 && player.gender == "Male")
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("When you were born your father, King Jirdun, was overjoyed to have an heir apparent and the first thing he did was to take you on a long ride through the arctic lands. You almost froze that night, but luckily an expert midwife managed to save you from death.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("That was just the start, you accompanied your father on several hunts during your toddler years, and by your age-coming you had already slain your first elder land walrus, with the help of several knights of course.", 5, (LCC.height / 2) + 16);
                        }
                        else if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("When you were born your father was furious that you were not a boy and he was temted to throw you off the wall of Tor-Ruhn-Tel Keep, luckily for you your mother's pleading was enough to convince him not to and you got to live.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("As you grew his likeness for you grew as well and as he had been unable to produce any male children or for that matter any living children other than you he eventually decided to train you to be High Queen of his lands.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Kel")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 400]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your father High Chieftain Har treats you with no more respect than he does any other brother or sister, it is his duty to the tribes to promote a selection process where the tribes themselves pick the high chief. Such a position of", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("power should not fall into hereditary control for then the Kellish tribes would be just as corrupt as the kingdoms. You are to inherit his original tribe only, his position of highest authority will bypass you...", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Orgell")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 5500]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30 && player.gender == "Male")
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Growing up as the prince of the orgish people was fantastic and you were always engulfed in enourmous amounts of wealth and comfort. By the time you came of age you were already prepared for the life of luxury that being a king meant for you.", 5, (LCC.height / 2) + 4);
                        }
                        else if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("As a girl you grew up with a stone in your gut knowing that you would never inherit your father's position at the head of the Orgish Kingdom. You were to be sold into a royal marriage in a foriegn land. Even the though of becoming Queen", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("in a foreign land felt wrong to you. You are royal here, why can't you stay here and rule. But apparently that is just how it must be, you must go become Queen somewhere else while one of your brothers becomes the new king after your father.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Aldrek")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 3800]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30 && player.gender == "Male")
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your father Everaxii Zoteff has nurtured you since you were a child toward taking his place as the embodiment of the eturnal spirit. It is you divine birthright!", 5, (LCC.height / 2) + 4);
                        }
                        else if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your father, the Everaxii himself, has raised you and spoiled you with the most lavish jewels and ornamates in the land, but that spoiling has of course been paired with a massive curriculum of religious teachings.", 5, (LCC.height / 2) + 4);
                        }
                    }
                    else if (player.raceName == "Cephrite")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 6550]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Arch Magus Eferous has raised you to be a great and powerful mage like himself, he has already ensured you a spot on The Grand Magus Council, and you've been highly successful in your magical studies.", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("All that remains is for you to go out into the world to hone your magical ability so that when you come back maybe you will be powerful enough to be elected to your father's seat as arch magus.", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Outlander")
                    {
                        if (player.gender == "Male")
                        {
                            Inventory = [];
                            Inventory.push([new Item("coins", false, false), 2500]);
                        }
                        else
                        {
                            Inventory = [];
                            Inventory.push([new Item("coins", false, false), 7500]);
                        }
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30 && player.gender == "Male")
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your a prospector, that's right, you're a king from an extremely far away land looking into this place as one that maybe you might someday conquer when you return back to your kingdom, or not...", 5, (LCC.height / 2) + 4);
                        }
                        else if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Your evil sister has stolen your throne and beheaded the entire court! Luckily you got away on a sail boat the night before... Well actually that was an accident, you were really just out for a sail when the wind... Long story actually, better not...", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Also it just so happens that you had brought several large chests of coins with you on your sail to keep you company... So although you have been depose you are still extremely rich!", 5, (LCC.height / 2) + 16);
                        }
                    }
                    else if (player.raceName == "Thengar")
                    {
                        Inventory = [];
                        Inventory.push([new Item("coins", false, false), 3600]);
                        player.hunger = player.hungerMAX;
                        player.satiated = true;

                        //class low bar description
                        if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30 && player.gender == "Male")
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Living in your father, King Wolthgar's castle was a dark and lonly childhood. When the screams of tortured peasants couldn't be heard it was because your father's shouting was louder. Growing up with your father you quickly learned that his subjects only respect him through ", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("the fear he makes them feel. By the time you were old enough to hold a sword your father had brought a treasonous noble, or perhaps just a noble, to the courtyard and he made you cut off his head on the spot. He said that if you didn't, he would kill you for being weak.", 5, (LCC.height / 2) + 16);
                        }
                        else if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                        {
                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("Living in your father, King Wolthgar's castle was a dark and lonly childhood. When the screams of tortured peasants couldn't be heard it was because your father's shouting was louder. Growing up with your father you quickly learned that his subjects only respect him through ", 5, (LCC.height / 2) + 4);

                            LXX.fillStyle = "black";
                            LXX.font = "12px Book Antiqua";
                            LXX.textAlign = "left";
                            LXX.fillText("the fear he makes them feel. By the time you had reached womanhood your father brought several Kellish tribals to his court including men, women, and children and had his guards kill them for his amusement.... he made you watch the slaughter to 'purge the weakness from you'", 5, (LCC.height / 2) + 16);
                        }
                    }
                }
            }
            else if (type == "race")
            {

                if (selectNumber == 0)
                {
                    //race: Kel
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Kel", bX + 105, bY + 23);
                    //race attributes
                        //colour and race name
                    player.raceName = "Kel";
                    player.race = "green";
                        //faction relations
                    player.kelFaction = 75; //green (kellish) Chieftain Har
                    player.thengarFaction = -200; //brown (thengan) King Wolthgar
                    player.freynorFaction = 5; //blue (freydic) King Jirdun
                    player.aldrekFaction = 5; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = 5; //yellow (orgish) King Lysander
                    player.vardanFaction = -5; //black (vardanian) High Count Arlod
                    player.cephriteFaction = 5; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -10; //orange (nirinese) Queen Lelaine
                        //skill bonus
                    player.constitution = 0;
                    player.strength = 0;
                    player.stamina = 0;
                    player.dexterity = 1;
                    player.ranged = 0;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 3;
                    player.toughness = 0;
                    player.charisma = 0;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The kellish are a friendly tribal people who live off of the land. Although the Kellish tribes were once seperate there has been a unification under the Kellish chieftain, Har, who has convinced his people to come together as one in defence of their homeland against Thengan aggression.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 1)
                {
                    //race: Thengar
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Thengar", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Thengar";
                    player.race = "#663300";
                    //faction relations
                    player.kelFaction = -200; //green (kellish) Chieftain Har
                    player.thengarFaction = 75; //brown (thengan) King Wolthgar
                    player.freynorFaction = 15; //blue (freydic) King Jirdun
                    player.aldrekFaction = 0; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = -15; //yellow (orgish) King Lysander
                    player.vardanFaction = 5; //black (vardanian) High Count Arlod
                    player.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -10; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 0;
                    player.strength = 2;
                    player.stamina = 2;
                    player.dexterity = 0;
                    player.ranged = 0;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 0;
                    player.toughness = 0;
                    player.charisma = 0;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The Thengans are a harsh and violent people who believe that they are superior to all others. Under the rule of the savage King Wolthgar the Thengan kingdom has been particularly imperious and violent!", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 2)
                {
                    //race: Freynor
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Freynor", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Freynor";
                    player.race = "navy";
                    //faction relations
                    player.kelFaction = 10; //green (kellish) Chieftain Har
                    player.thengarFaction = 10; //brown (thengan) King Wolthgar
                    player.freynorFaction = 75; //blue (freydic) King Jirdun
                    player.aldrekFaction = 0; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = 0; //yellow (orgish) King Lysander
                    player.vardanFaction = 0; //black (vardanian) High Count Arlod
                    player.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -10; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 2;
                    player.strength = 0;
                    player.stamina = 0;
                    player.dexterity = 0;
                    player.ranged = 0;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 0;
                    player.toughness = 2;
                    player.charisma = 0;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The Freynor have lived in seclusion from the other cultures for centuries. They inhabit the barren icy land of Frajek in the north where most people would either freeze to death or be eaten by ferocious arctic beasts if they tried to visit.", 5, (LCC.height / 2) + 4);

                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("They have managed to remain neutral in the affairs of the other kingdoms thus far, and they intend to keep it that way.", 5, (LCC.height / 2) + 16);
                    }
                }
                else if (selectNumber == 3)
                {
                    //race: Aldrek
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Aldrek", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Aldrek";
                    player.race = "darkRed";
                    //faction relations
                    player.kelFaction = 10; //green (kellish) Chieftain Har
                    player.thengarFaction = 0; //brown (thengan) King Wolthgar
                    player.freynorFaction = 0; //blue (freydic) King Jirdun
                    player.aldrekFaction = 75; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = -200; //yellow (orgish) King Lysander
                    player.vardanFaction = -5; //black (vardanian) High Count Arlod
                    player.cephriteFaction = -200; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -200; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 0;
                    player.strength = 0;
                    player.stamina = 0;
                    player.dexterity = 0;
                    player.ranged = 3;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 1;
                    player.toughness = 0;
                    player.charisma = 0;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The Aldrekii people of the burning southern desert believe that a great and allpowerful being controls all of creation, and that being's consciousness rests in dormant form in the body of their leader, the royal Everaxii.", 5, (LCC.height / 2) + -8);

                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("They are at war with the Cephrians because the atheistic beliefs of the magi people are highly distastful in aldrekii culture, they are at war with the kingdom of Orgell because of a land dispute and over religious differences,", 5, (LCC.height / 2) + 4);

                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("and they are at war with the nirwaden kingdom because the nirwaden kingdom has decided to try and expand their terrotorry, and has already started by taking over an Aldrekii border city.", 5, (LCC.height / 2) + 16);
                    }
                }
                else if (selectNumber == 4)
                {
                    //race: Orgell
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Orgell", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Orgell";
                    player.race = "gold";
                    //faction relations
                    player.kelFaction = 5; //green (kellish) Chieftain Har
                    player.thengarFaction = -45; //brown (thengan) King Wolthgar
                    player.freynorFaction = 0; //blue (freydic) King Jirdun
                    player.aldrekFaction = -200; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = 75; //yellow (orgish) King Lysander
                    player.vardanFaction = 0; //black (vardanian) High Count Arlod
                    player.cephriteFaction = -45; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -45; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 0;
                    player.strength = 0;
                    player.stamina = 0;
                    player.dexterity = 0;
                    player.ranged = 0;
                    player.stealth = 0;
                    player.intelligence = 2;
                    player.endurance = 0;
                    player.toughness = 0;
                    player.charisma = 2;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The Orgish peoples have long been persecuted for their nomadic culture, but finally they have found their true homeland in the heart of the burning southern desert, and after decades living in constant battle with the Aldrekii they have managed to establish themselves as a kingdom", 5, (LCC.height / 2) + 4);

                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("and define their borders.", 5, (LCC.height / 2) + 16);
                    }
                }
                else if (selectNumber == 5)
                {
                    //race: Vardan
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Vardan", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Vardan";
                    player.race = "#1c1c1c";
                    //faction relations
                    player.kelFaction = -5; //green (kellish) Chieftain Har
                    player.thengarFaction = 5; //brown (thengan) King Wolthgar
                    player.freynorFaction = 0; //blue (freydic) King Jirdun
                    player.aldrekFaction = -5; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = 0; //yellow (orgish) King Lysander
                    player.vardanFaction = 75; //black (vardanian) High Count Arlod
                    player.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -10; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 0;
                    player.strength = 0;
                    player.stamina = 3;
                    player.dexterity = 1;
                    player.ranged = 0;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 0;
                    player.toughness = 0;
                    player.charisma = 0;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The Vardanian people have lived in dire conditions throughout the rules of their many rich and powerful counts and high counts. The recently ended civil war hasn't done much to help with the living conditions either.", 5, (LCC.height / 2) + -8);

                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Life in Vardania up until recently was mearly the question of whether one's loved ones would starve, be conscripted and die in battle, be slain by conscripts, be eaten by wild animals or monsters, or perhaps even eaten by one's neighbor.", 5, (LCC.height / 2) + 4);

                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("After the victory of the newly proclaimed high count, Arlod, the conditions have improved some, but nairly a scratch has been made at the vast epidemic of Vardanian starvation.", 5, (LCC.height / 2) + 16);
                    }
                }
                else if (selectNumber == 6)
                {
                    //race: Cephrite
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Cephrite", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Cephrite";
                    player.race = "purple";
                    //faction relations
                    player.kelFaction = 10; //green (kellish) Chieftain Har
                    player.thengarFaction = 0; //brown (thengan) King Wolthgar
                    player.freynorFaction = 0; //blue (freydic) King Jirdun
                    player.aldrekFaction = -200; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = -25; //yellow (orgish) King Lysander
                    player.vardanFaction = 0; //black (vardanian) High Count Arlod
                    player.cephriteFaction = 75; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -45; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 0;
                    player.strength = 0;
                    player.stamina = 0;
                    player.dexterity = 0;
                    player.ranged = 0;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 0;
                    player.toughness = 0;
                    player.charisma = 0;
                    player.willpower = 3;
                    player.knowledge = 1;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("Centuries ago the cephrian people have gained the understanding of the magical arts and since then their culture has evolved around it. They believe that no power exists except for the spirit of magic itself which they believe can be tamed and harnessed to their will.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 7)
                {
                    //race: Nirwaden
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Nirwaden", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Nirwaden";
                    player.race = "#e68900";
                    //faction relations
                    player.kelFaction = 0; //green (kellish) Chieftain Har
                    player.thengarFaction = -10; //brown (thengan) King Wolthgar
                    player.freynorFaction = 0; //blue (freydic) King Jirdun
                    player.aldrekFaction = -200; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = -10; //yellow (orgish) King Lysander
                    player.vardanFaction = -10; //black (vardanian) High Count Arlod
                    player.cephriteFaction = -10; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = 75; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 0;
                    player.strength = 1;
                    player.stamina = 1;
                    player.dexterity = 1;
                    player.ranged = 1;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 0;
                    player.toughness = 0;
                    player.charisma = 0;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 4 + extraSkillPoints;
                        //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The Nirinese people have honed their skills in metalwork, craftsmanship, and warfare, and now they seek to expand their dominion across the land, not only to profit from their conquests, but also to spread their righteous faith in The Everlasting Spirit.", 5, (LCC.height / 2) + 4);
                    }
                }
                else if (selectNumber == 8)
                {
                    //race: Outlander
                    XXX.fillStyle = "black";
                    XXX.font = "20px Impact";
                    XXX.textAlign = "center";
                    XXX.fillText("Outlander", bX + 105, bY + 23);
                    //race attributes
                    //colour and race name
                    player.raceName = "Outlander";
                    player.race = "white";
                    //faction relations
                    player.kelFaction = -25; //green (kellish) Chieftain Har
                    player.thengarFaction = -25; //brown (thengan) King Wolthgar
                    player.freynorFaction = -25; //blue (freydic) King Jirdun
                    player.aldrekFaction = -50; //red (aldrekii) Evaraxii Zoteff
                    player.orgellFaction = -10; //yellow (orgish) King Lysander
                    player.vardanFaction = -25; //black (vardanian) High Count Arlod
                    player.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
                    player.nirwadenFaction = -50; //orange (nirinese) Queen Lelaine
                    //skill bonus
                    player.constitution = 0;
                    player.strength = 0;
                    player.stamina = 0;
                    player.dexterity = 0;
                    player.ranged = 0;
                    player.stealth = 0;
                    player.intelligence = 0;
                    player.endurance = 0;
                    player.toughness = 0;
                    player.charisma = 0;
                    player.willpower = 0;
                    player.knowledge = 0;
                    player.concentration = 0;
                    player.memory = 0;
                    player.eminence = 0;
                    player.skillPoints = 8 + extraSkillPoints;
                    //low bar race description
                    if (mouseX >= bX && mouseX <= bX + 210 && mouseY > bY && mouseY < bY + 30)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "12px Book Antiqua";
                        LXX.textAlign = "left";
                        LXX.fillText("The ghastly and pale outlanders are not of this land and are generally rejected by all of the kingdoms, the only exception to that is the Cephrians who do not easily develop superstitions, and are interested in the rare occurence of an outlander.", 5, (LCC.height / 2) + 4);
                    }
                }
            }
        };

        this.operations = function()
        {
            this.scroll();
            this.drawSelf();
            this.definer();
        };
    }

    this.namePickerButton = function(bX, bY)
    {
        if (mouseX > bX && mouseX < bX + 230 && mouseY > bY && mouseY < bY + 30)
        {
            //Draw the name picker button
            XXX.beginPath();
            XXX.fillStyle = "gold";
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.rect(bX, bY, 230, 30);
            XXX.fill();
            XXX.stroke();
        }
        else
        {
            //Draw the name picker button
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.rect(bX, bY, 230, 30);
            XXX.fill();
            XXX.stroke();
        }

        //draw the text of the character's name in the box.
        XXX.fillStyle = "black";
        XXX.font = "24px Impact";
        XXX.textAlign = "center";
        XXX.fillText(mainCharacterAccess[0].name, bX + 115, bY + 24);

        if (mouseX > bX && mouseX < bX + 230 && mouseY > bY && mouseY < bY + 30 && clicked == true)
        {
            clicked = false;
            var naming = prompt("Enter your character's name.");

            if (naming != undefined)
            {
                mainCharacterAccess[0].name = naming;
            }
        }


    };

    //THIS IS THE GAME LOOP IN CHARGE OF THE MAIN MENU
    function mainMenuLoop()
    {
        //Sensing
        addEventListener("mousemove", getMousePositionOnWindow); //This enables the sensing of mouse movement for the window.
        LCC.addEventListener("mousemove", findMouse); //This enables the sensing of mouse movement for the lower canvas.
        LCC.addEventListener("mouseout", lowerCanvasMouseCoordsReset); //This obscures the mouse coordinates for the lower canvas when the mouse has left.
        CCC.addEventListener("mousemove", locateMouse); //This enables the sensing of mouse movement for the main canvas.
        CCC.addEventListener("mouseout", mainCanvasMouseCoordsReset); //This obscures the mouse coordinates for the main canvas when the mouse has left.
        addEventListener("mousedown", mouseClicked); //This enables the sensing of mouse clicking.
        addEventListener("mouseup", mouseReleased); //This enables the sensing of the mouse release from clicking.
        addEventListener("keyup", keyReleased); //This enables key release sensing.
        addEventListener("keydown", keyHeld); //This enables key press sensing.
        addEventListener("dblclick", doubleClicker); //This enables double clicking.

        //The Main Menu
        if (gameState == "mainMenu") //Main Menu Mode
        {
            //Draw the main menu
            //set background for main canvas
            XXX.beginPath();
            XXX.fillStyle = "white";
            XXX.fillRect(0, 0, 1400, 550);
            //set background for lower canvas
            LXX.beginPath();
            LXX.fillStyle = "white";
            LXX.fillRect(0, 0, 1400, 80);
            //Title
            XXX.fillStyle = "black";
            XXX.font = "160px Impact";
            XXX.fillText("Poly Land", 400, 140);
            //Option Buttons.
            newGameButton();
            resumeGameButton();
        }
        else if (gameState == "characterBuilder") //Character Builder Mode
        {
            //set background for main canvas
            XXX.beginPath();
            XXX.fillStyle = "white";
            XXX.fillRect(0, 0, 1400, 550);
            //set background for lower canvas
            LXX.beginPath();
            LXX.fillStyle = "white";
            LXX.fillRect(0, 0, 1400, 80);
            //Title
            XXX.textAlign = "left";
            XXX.fillStyle = "black";
            XXX.font = "90px Impact";
            XXX.fillText("Character Creation", 330, 90);
            //example character
            exampleGuyList[0].operations();
            //Selectors for:
            selectorList[0].operations(); //race
            selectorList[1].operations(); //gender
            selectorList[2].operations(); //title
            selectorList[3].operations(); //combat style
            //begin game button
            applySelectionsButton();
            //character naming button.
            this.namePickerButton(1/2 * CCC.width - (1/2 * 230), 210);

        }
        else if (gameState == "loadSelect") //Load Game Menu
        {
            //set background for main canvas
            XXX.beginPath();
            XXX.fillStyle = "white";
            XXX.fillRect(0, 0, 1400, 550);
            //set background for lower canvas
            LXX.beginPath();
            LXX.fillStyle = "white";
            LXX.fillRect(0, 0, 1400, 80);
            //Title
            XXX.textAlign = "left";
            XXX.fillStyle = "black";
            XXX.font = "90px Impact";
            XXX.fillText("Select a Game to Load", 330, 90);

            //load the game functions
            this.loadClickability = function(x, y, w, h, loadNumber, auto)
            {
                if (auto != true)
                {
                    if (mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h)
                    {
                        XXX.beginPath();
                        XXX.fillStyle = "rgba(255,215,0, 0.35)";
                        XXX.lineWidth = "1";
                        XXX.rect(x, y, w, h);
                        XXX.fill();
                        XXX.stroke();

                        if (clicked == true)
                        {
                            clicked = false;
                            loadType = loadNumber;
                            gameState = "active";
                            load();
                            requestAnimationFrame(gameloopOfDestiny, CCC);
                        }
                    }
                }
                else
                {
                    if (lMouseX > 0 && lMouseX < LCC.width && lMouseY > 0 && lMouseY < LCC.height)
                    {
                        LXX.beginPath();
                        LXX.fillStyle = "rgba(255,215,0, 0.35)";
                        LXX.lineWidth = "1";
                        LXX.rect(0, 0, LCC.width, LCC.height);
                        LXX.fill();
                        LXX.stroke();

                        if (clicked == true)
                        {
                            clicked = false;
                            loadType = "autosave";
                            gameState = "active";
                            load();
                            requestAnimationFrame(gameloopOfDestiny, CCC);
                        }
                    }
                }
            };
            //autosave
            LXX.beginPath();
            LXX.fillStyle = "lightGrey";
            LXX.lineWidth = "1";
            LXX.rect(0, 0, LCC.width, LCC.height);
            LXX.fill();
            LXX.stroke();
            this.loadClickability(0, 0, 0, 0, 0, true);
            LXX.textAlign = "center";
            LXX.fillStyle = "black";
            LXX.font = "bold 65px Book Antiqua";
            LXX.fillText("Autosave", LCC.width / 2, LCC.height * 2 / 3 + 5);
            //load buttons 1-8
                //load save 1;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(27.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(27.5, 180, 150, 300, 1);
            //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 1", 27.5 + 75, 230);
                //load save 2;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(197.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(197.5, 180, 150, 300, 2);
            //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 2", 197.5 + 75, 230);
                //load save 3;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(367.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(367.5, 180, 150, 300, 3);
            //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 3", 367.5 + 75, 230);
                //load save 4;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(537.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(537.5, 180, 150, 300, 4);
            //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 4", 537.5 + 75, 230);
                //load save 5;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(707.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(707.5, 180, 150, 300, 5);
                    //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 5", 707.5 + 75, 230);
                //load save 6;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(877.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(877.5, 180, 150, 300, 6);
                    //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 6", 877.5 + 75, 230);
                //load save 7;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(1047.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(1047.5, 180, 150, 300, 7);
                    //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 7", 1047.5 + 75, 230);
                //load save 8;
                    //box
            XXX.beginPath();
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = "1";
            XXX.rect(1217.5, 180, 150, 300);
            XXX.fill();
            XXX.stroke();
            this.loadClickability(1217.5, 180, 150, 300, 8);
                    //Data
            XXX.textAlign = "center";
            XXX.fillStyle = "black";
            XXX.font = "bold 40px Book Antiqua";
            XXX.fillText("Save 8", 1217.5 + 75, 230);

            //requestAnimationFrame(gameloopOfDestiny, CCC);
        }


        if (gameState == "mainMenu" || gameState == "characterBuilder" || gameState == "loadSelect")
        {
            requestAnimationFrame(mainMenuLoop, CCC);
        }
    }

    //THIS IS THE MAIN GAME LOOP
    function gameloopOfDestiny(time)
    {
        gameLoopNumber += 1;
        XXX.clearRect(0, 0, 1400, 550);

        // Instead of clearing the interface bar is light grey.
        LXX.beginPath();
        LXX.fillStyle = "lightGrey";
        LXX.fillRect(0, 0, 1400, 80);

        //this resets the variable that determines whether or not to light the inv desciption box.
        itemDescriptionBox = false;

        // THIS IS THE BACKGROUND BUILDER (height, width, type, x, y) // The tile coords 0, 0 are at the bottom right corner of Teshir City.
            //Different parts of the world load at different Y values. // maps are 34 by 34 tiles and for somereason the maps are -20 to the left. and + 14 down.
        if (map == "world")
        {
            //Layer -3 (cold temperate region)
            if (Y > -34556 && Y < -23654 && X < 7687 && X > - 3901) //X0
            {
                elevation = -1;
                region = "s3";
                outlineBuilder( 34, 34, "greenGrass", -20, 82);
                outlineBuilder( 34, 1, "stonePath", 3, 82);
                outlineBuilder( 1, 1, "forest", 3, 82);
                outlineBuilder( 4, 4, "kelltile", 4, 103);
                outlineBuilder( 1, 1, "farmland", 8, 104);
            }
            //Layer -2 (cold temperate region)
            if (Y > -24704 && Y < -13476 && X < 7687 && X > - 3901) //X0
            {
                elevation = -1;
                region = "s2";
                outlineBuilder( 34, 34, "greenGrass", -20, 48);
                outlineBuilder( 34, 1, "stonePath", 3, 48);
                outlineBuilder( 1, 7, "stonePath", -4, 48);
            }
            //Layer -1 (cold temperate region)
            if (Y > -14144 && Y < -3328 && X < 7687 && X > - 3901) //X0
            {
                elevation = -1;
                region = "s1";
                outlineBuilder( 34, 34, "greenGrass", -20, 14);
                outlineBuilder( 34, 1, "stonePath", -4, 14);
                outlineBuilder( 1, 1, "forest", -4, 14);
            }
            //Layer 0 (cold region)
            if (Y > -3919 && Y < 6870 && X < 7687 && X > - 3901) //X0
            {
                elevation = 0;
                region = "central";
                outlineBuilder( 14, 6, "greenGrass", -6, -20);
                outlineBuilder( 14, 6, "greenGrass", -6, 0);
                outlineBuilder( 34, 14, "greenGrass", -20, -20);
                outlineBuilder( 34, 14, "greenGrass", 0, -20);
                outlineBuilder( 6, 6, "stoneWork", -6, -6);
                outlineBuilder( 17, 1, "stonePath", -3, -20);
                outlineBuilder( 1, 20, "stonePath", -6, -3);
                outlineBuilder( 16, 1, "stonePath", -4, -2);
                outlineBuilder( 7, 1, "stonePath", -7, -7);
                outlineBuilder( 1, 8, "stonePath", -7, 0);
                outlineBuilder( 7, 1, "stonePath", -0, -7);
                outlineBuilder( 1, 6, "stonePath", -6, -7);
                outlineBuilder( 1, 13, "stonePath", -20, -7);
                outlineBuilder( 2, 3, "farmland", -7, 1);
            }
            if (Y > -3919 && Y < 6870 && X < - 2490) //X1
            {
                elevation = 0;
                region = "e1";
                outlineBuilder( 34, 22, "forest", 26, -20);
                outlineBuilder( 7, 2, "greenGrass", 26, -18);
                outlineBuilder( 4, 3, "greenGrass", 28, -17);
                outlineBuilder( 1, 2, "greenGrass", 28, -13);
                outlineBuilder( 2, 1, "greenGrass", 26, -20);
                outlineBuilder( 34, 12, "greenGrass", 14, -20);
                outlineBuilder( 7, 1, "greenGrass", 26, -7);
                outlineBuilder( 6, 2, "greenGrass", 26, 3);
                outlineBuilder( 3, 1, "greenGrass", 28, 5);
                outlineBuilder( 4, 1, "greenGrass", 26, 9);
                outlineBuilder( 1, 2, "greenGrass", 26, -4);
                outlineBuilder( 1, 34, "stonePath", 14, -3);
            }
            if (Y > -3919 && Y < 6870 && X < 17891 && X > 6299) //X-1
            {
                elevation = 0;
                region = "w1";
                outlineBuilder( 14, 6, "crag", -40, -20);
                outlineBuilder( 14, 6, "crag", -40, 0);
                outlineBuilder( 34, 14, "crag", -54, -20);
                outlineBuilder( 34, 14, "crag", -34, -20);
                outlineBuilder( 6, 6, "crag", -40, -6);
            }

            //layer 1 (frosty region) anti warmth effects start here
            if (Y > 6290 && Y < 32370) //this is the cold snowy environment //X0
            {
                elevation = 1;
                region = "n1";
                outlineBuilder( 20, 83, "frost", -80, -40);
                outlineBuilder( 80, 83, "snow", -80, -105);
            }
            //layer 2 (freezing region)
            if (Y > 31750 && Y < 77360) //this is the freezing arctic environment //X0
            {
                elevation = 2;
                region = "n2";
                outlineBuilder( 150, 83, "snow", -80, -255);
            }
            //layer 3 (freezing region)
            if (Y > 76780) //this is the north Pole... basically. //X0
            {
                elevation = 2;
                region = "n3";
                outlineBuilder( 150, 83, "snow", -80, -405);
            }
        }

        //EVENT SENSING
        addEventListener("mousemove", getMousePositionOnWindow); //This enables the sensing of mouse movement for the window.
        LCC.addEventListener("mousemove", findMouse); //This enables the sensing of mouse movement for the lower canvas.
        LCC.addEventListener("mouseout", lowerCanvasMouseCoordsReset); //This obscures the mouse coordinates for the lower canvas when the mouse has left.
        CCC.addEventListener("mousemove", locateMouse); //This enables the sensing of mouse movement for the main canvas.
        CCC.addEventListener("mouseout", mainCanvasMouseCoordsReset); //This obscures the mouse coordinates for the main canvas when the mouse has left.
        addEventListener("mousedown", mouseClicked); //This enables the sensing of mouse clicking.
        addEventListener("mouseup", mouseReleased); //This enables the sensing of the mouse release from clicking.
        addEventListener("keyup", keyReleased); //This enables key release sensing.
        addEventListener("keydown", keyHeld); //This enables key press sensing.
        addEventListener("dblclick", doubleClicker);

        //TIME MANAGER
        timeTracker(time); // this is the tool to keep the game running smoothly
        isMouseReleasedDone(); //This switches mouseReleased to false after 44 miliseconds of it being true.
        //console.log(TTD);

        //CHEATS
        if (gameState == "active" || gameState == "stopTime")
        {
            cheats();
        }

        //MASTER BUILDER
        buildMaster();

        //DEAD BODIES
        deadAIOperationsManagement();

        //Layering, Drawing and World Life
        for (var z = 1; z <= 6; z++)
        {
            //STRUCTURES AND SCENERY
            sceneryOperationsManager(z);
            //TODO build structures

            //ITEMS
            ItemOperationsManager(z); //This draws items to the world;

            //ENTITIES
            artificialIntelligenceOperationsManagement(z);
            mainCharacterAccess[0].operations(z); //this activates all of the main character's methods and therefore makes the main character a part of the game.


            //PROJECTILES
            projectileOperationsManagement(z);
            magicOperationsManagement(z);
        }
        //set certain player variables. (FINAL PLAYER RESET)
        function wornAbilities()
        {
            if (player.outfitType != "none")
            {
                if (player.outfitType.ability == "heavy")
                {
                    player.freeze = Math.max(player.freeze, 3);
                }
            }
        }
        player.cutcut = false; //just in case their was no scenery object available to turn it off it will be turned off after all have had the opportunity to register its on-ness.
        player.freeze = 1;
        wornAbilities();

        //SHOPS/CRAFTING
        shopItemIDSetter();

        //AI name display and interaction with...
        aiIdentify();

        //POP-UPs
            //level up pop-up
        if (popType == "levelup")
        {
            if (new Date().getTime() - popDuration < 3500)
            {
                inGamePopUp("alert", "Congratulations, you have reached level " + player.level + "!", "levelup");
            }
            else if (new Date().getTime() - popDuration < 3600 && new Date().getTime() - popDuration > 3500)
            {
                gameState = "active";
            }
        }
        else if (popType == "magicLevelup")
        {
            if (new Date().getTime() - popDuration < 3500)
            {
                inGamePopUp("alert", "Congratulations, you have reached magic level " + player.magicLevel + "!", "levelup");
            }
            else if (new Date().getTime() - popDuration < 3600 && new Date().getTime() - popDuration > 3500)
            {
                gameState = "active";
            }
        }
        else if (popType == "save1" && confirmed == false)
        {
            save1 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 1'?");
            if (save1 != null)
            {
                //console.log(save1);
                if (save1)
                {
                    save();
                }
            }
        }
        else if (popType == "save2" && confirmed == false)
        {
            save2 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 2'?");
            if (save2 != null)
            {
                //console.log(save2);
                if (save2)
                {
                    save();
                }
            }
        }
        else if (popType == "save3" && confirmed == false)
        {
            save3 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 3'?");
            if (save3 != null)
            {
                //console.log(save2);
                if (save3)
                {
                    save();
                }
            }
        }
        else if (popType == "save4" && confirmed == false)
        {
            save4 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 4'?");
            if (save4 != null)
            {
                //console.log(save2);
                if (save4)
                {
                    save();
                }
            }
        }
        else if (popType == "save5" && confirmed == false)
        {
            save5 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 5'?");
            if (save5 != null)
            {
                if (save5)
                {
                    save();
                }
            }
        }
        else if (popType == "save6" && confirmed == false)
        {
            save6 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 6'?");
            if (save6 != null)
            {
                if (save6)
                {
                    save();
                }
            }
        }
        else if (popType == "save7" && confirmed == false)
        {
            save7 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 7'?");
            if (save7 != null)
            {
                if (save7)
                {
                    save();
                }
            }
        }
        else if (popType == "save8" && confirmed == false)
        {
            save8 = inGamePopUp("confirm", "Are you sure you want to overwrite 'Save 8'?");
            if (save8 != null)
            {
                if (save8)
                {
                    save();
                }
            }
        }
        //Autosave
        autosave();

        //Screen Covers
        gameTimeKeeper();
        screenCover();

        //UI type text that needs to be read over the night and day cycle
        if (gameState == "active")
        {
            player.showNoticeName();
            player.tellCoordinates();
        }

        if (gameState != "mainMenu" && gameState != "characterBuilder")
        {
            requestAnimationFrame(gameloopOfDestiny, CCC);
        }
    }

    //screen cover variables
    var mushBlurRot = 0;
    var mushStretch = [9, 9.5, 10, 11, 11.5, 12, 15]
    var mushStretchX = 9;
    var mushStretchY = 9;
    //Screen Covers (includes night and day cycle)
    function screenCover()
    {
        //Inebriated Blur
        if (player.inebriated == true)
        {
            if (drunkScreenShift < 40 && drunkDirectionSwitch == false)
            {
                drunkScreenShift += 0.1;
            }
            else
            {
                drunkDirectionSwitch = true;
                drunkScreenShift -= 0.1;
            }

            if (drunkScreenShift < -40)
            {
                drunkDirectionSwitch = false;
            }
            //draw double vision.
            XXX.beginPath();
            XXX.save();
            XXX.translate(drunkScreenShift, 0);
            XXX.scale(1.05, 1);
            XXX.globalAlpha = 0.45;
            XXX.drawImage(CCC, -40, 0);
            XXX.restore();

            if (player.inebriation > 3 * (100 + (3 * player.getToughness())))
            {
                XXX.beginPath();
                XXX.save();
                XXX.translate(drunkScreenShift, 0);
                XXX.scale(1.1, 1);
                XXX.globalAlpha = 0.45;
                XXX.drawImage(CCC, -60, 0);
                XXX.restore();

                if (player.inebriation >= 5 * (100 + (3 * player.getToughness())))
                {
                    XXX.beginPath();
                    XXX.save();
                    XXX.translate(drunkScreenShift, 0);
                    XXX.scale(1.1, 1);
                    XXX.globalAlpha = 0.45;
                    XXX.drawImage(CCC, 0, 35);
                    XXX.restore();

                    XXX.beginPath();
                    XXX.save();
                    XXX.translate(drunkScreenShift, 0);
                    XXX.scale(1.1, 1);
                    XXX.globalAlpha = 0.45;
                    XXX.drawImage(CCC, 0, -35);
                    XXX.restore();

                    if (player.inebriation >= 8 * (100 + (3 * player.getToughness())))
                    {
                        XXX.beginPath();
                        XXX.save();
                        XXX.translate(0, 0);
                        XXX.scale(3, 3);
                        XXX.globalAlpha = 0.45;
                        XXX.drawImage(CCC, 0, 0);
                        XXX.restore();

                        XXX.beginPath();
                        XXX.save();
                        XXX.translate(0, 0);
                        XXX.scale(2, 2);
                        XXX.globalAlpha = 0.45;
                        XXX.drawImage(CCC, 0, 0);
                        XXX.restore();
                    }
                }
            }
        }
        //Cyrinthilim Mushroom Drug Trip
        if (player.cyrinthilimTrip)
        {
            mushBlurRot += 1/360 * Math.PI
            mushStretchX = mushStretch[Math.floor(Math.random() * 7)];
            mushStretchY = mushStretch[Math.floor(Math.random() * 7)];

            //todo add this drug trip!
            XXX.beginPath();
            XXX.save();
            XXX.translate(1/2 * CCC.width, 1/2 * CCC.height);
            XXX.scale(mushStretchX, mushStretchY);
            XXX.rotate(mushBlurRot);
            XXX.globalAlpha = 0.4;
            XXX.drawImage(mushBlur, -1/2 * mushBlur.width, -1/2 * mushBlur.height);
            XXX.restore();

        }

        //Night and Day
        if (timeOfDay != "Day" && player.nightVision == false && gameState != "paused"|| player.underground && player.nightVision == false && gameState != "paused")
        {
            var grd;
            var lightsDrawn = 0;
            var filler = "blue";
            NDX.clearRect(0, 0, NDC.width, NDC.height);

            //light up miniNotices at night
            NDX.fillStyle = "rgba(255, 255, 255, 1)";
            NDX.beginPath();
            NDX.rect(0, NDC.height - 137, 21 * player.miniNoticeList.length, 21);
            NDX.fill();

            //light up stats at night
            NDX.fillStyle = "rgba(255, 255, 255, 1)";
            NDX.beginPath();
            NDX.rect(0, NDC.height - 115, 151, 115);
            NDX.fill();

            //light up UI at night
            if (mouseY > 526)
            {
                NDX.fillStyle = "rgba(255, 255, 255, 1)";
                NDX.beginPath();
                NDX.rect(152, NDC.height - 22, NDC.width - 152, 22);
                NDX.fill();
            }

            if (itemDescriptionBox == true)
            {
                NDX.fillStyle = "rgba(255, 255, 255, 1)";
                NDX.beginPath();
                NDX.rect(152, NDC.height - 90, NDC.width - 152, 68);
                NDX.fill();
            }

            for (var i = 0; i < lights.length; i++)
            {
                if (lights[i].X < X + 1/2 * CCC.width + lights[i].size && lights[i].X > X - 1/2 * CCC.width - lights[i].size && lights[i].Y < Y + 1/2 * CCC.height + lights[i].size && lights[i].Y > Y - 1/2 * CCC.height - lights[i].size || lights[i].showMe == true)
                {
                    grd = NDX.createRadialGradient(X - lights[i].X + 1/2 * NDC.width, Y - lights[i].Y + 1/2 * NDC.height, 0, X - lights[i].X + 1/2 * NDC.width, Y - lights[i].Y + 1/2 * NDC.height, lights[i].size);
                    filler = "rgba(255, 255, 255, " + lights[i].Alpha + ")";
                    grd.addColorStop(0, filler);
                    if (lights[i].extraStops)
                    {
                        filler = "rgba(255, 255, 255, " + lights[i].Alpha + ")";
                        grd.addColorStop(lights[i].GRD, filler);
                    }
                    filler = "rgba(255, 255, 255, 0)";
                    grd.addColorStop(1, filler);

                    NDX.fillStyle = grd;
                    NDX.beginPath();
                    NDX.arc(X - lights[i].X + 1/2 * NDC.width, Y - lights[i].Y + 1/2 * NDC.height, lights[i].size, 0, 2 * Math.PI);
                    NDX.fill();
                }
            }

            //night
            if (timeOfDay == "Night")
            {
                nightDarkness = darkestDark;
            }
            else if (timeOfDay == "Dusk")
            {
                nightDarkness = darkestDark * (minuteOfHour/ 60);
            }
            else if (timeOfDay == "Dawn")
            {
                nightDarkness = darkestDark - ((1/60 * darkestDark) * minuteOfHour);
            }

            //console.log(nightDarkness);
            /* */
            filler = "rgba(0, 0, 0, " + nightDarkness + ")";
            NDX.fillStyle = filler;
            NDX.save();
            NDX.globalCompositeOperation="source-out";
            NDX.beginPath();
            NDX.rect( 0, 0, NDC.width, NDC.height );
            NDX.fill();
            NDX.restore();
            /* */

            XXX.drawImage( NDC, 0, 0 );
        }
        lights = [];

        //Blindness
        if (player.blinded == true)
        {
            XXX.fillStyle = "black";
            XXX.beginPath();
            XXX.fillRect(0, 0, CCC.width, CCC.height);
        }
    }

    //SENSING FUNCTIONS
        //double clicking
    var timeSinceDClick = 0;
    function doubleClicker(event)
    {
        dClick = true;
        timeSinceDClick = new Date().getTime();
    }
        //mouse move anywhere in the screen
    function getMousePositionOnWindow(event)
    {
        wMouseX = event.clientX;
        wMouseY = event.clientY;
        //console.log("Window's Mouse X = " + wMouseX + " :: Window's Mouse Y = " + wMouseY);
    }
        //mouse move in the main canvas
    function locateMouse(event)
    {
        mouseX = event.offsetX; //this sets the mouse coordinates.
        mouseY = event.offsetY; //this sets the mouse coordinates.
        //console.log(mouseX + mouseY);
    }
        //mouse move in the lower canvas
    function findMouse(event)
    {
        if (wMouseY < 452)
        {
            lMouseX = -1000; //this makes it so when you are not in the lower canvas it does not try to set your mouses position, which can accidentally click something you didn't want to.
            lMouseY = 1000;
        }
        else
        {
            lMouseX = event.offsetX; //this sets the mouse coordinates.
            lMouseY = event.offsetY; //this sets the mouse coordinates.
        }
    }
        //mouse-click
    function mouseClicked(event)
    {
        clicked = true;
        clickReleased = false;
    }
        //mouse-release from click
    var timeSinceMouseReleased = 0; //this represents the amount of time since the mouse was released.
    function mouseReleased(event)
    {
        clicked = false;
        timeSinceMouseReleased = new Date().getTime();
        clickReleased = true;
    }

    function isMouseReleasedDone()
    {
        if (new Date().getTime() - timeSinceMouseReleased > TTD)
        {
            clickReleased = false;
        }
        if (new Date().getTime() - timeSinceDClick > TTD)
        {
            dClick = false;
        }
    }
        //when a key is released
    function keyReleased(event)
    {
        var key = event.keyCode || event.which;

        if (key == 87)
        {
            wKey = false;
        }

        if (key == 192)
        {
            tildKey = false;
        }

        if (key == 83)
        {
            sKey = false;
        }

        if (key == 69)
        {
            eKey = false;
        }

        if (key == 32)
        {
            spaceKey = false;
        }

        if (key == 16)
        {
            shiftKey = false;
        }

        if (key == 18)
        {
            altKey = false;
        }

        if (key == 81)
        {
            qKey = false;
        }

        if (key == 49)
        {
            key1 = false;
        }

        if (key == 50)
        {
            key2 = false;
        }

        if (key == 51)
        {
            key3 = false;
        }

        if (key == 52)
        {
            key4 = false;
        }

        if (key == 53)
        {
            key5 = false;
        }

        if (key == 54)
        {
            key6 = false;
        }

        if (key == 55)
        {
            key7 = false;
        }

        if (key == 56)
        {
            key8 = false;
        }

        if (key == 57)
        {
            key9 = false;
        }

        if (key == 48)
        {
            key0 = false;
        }
    }
        //when a key is held down
    function keyHeld(event)
    {
        var key = event.keyCode || event.which;

        if (key == 87)
        {
            wKey = true;
        }

        if (key == 192)
        {
            tildKey = true;
        }

        if (key == 83)
        {
            sKey = true;
        }

        if (key == 69)
        {
            eKey = true;
        }

        if (key == 32)
        {
            spaceKey = true;
        }

        if (key == 16)
        {
            shiftKey = true;
        }

        if (key == 18)
        {
            altKey = true;
        }

        if (key == 81)
        {
            qKey = true;
        }

        if (key == 49)
        {
            key1 = true;
        }

        if (key == 50)
        {
            key2 = true;
        }

        if (key == 51)
        {
            key3 = true;
        }

        if (key == 52)
        {
            key4 = true;
        }

        if (key == 53)
        {
            key5 = true;
        }

        if (key == 54)
        {
            key6 = true;
        }

        if (key == 55)
        {
            key7 = true;
        }

        if (key == 56)
        {
            key8 = true;
        }

        if (key == 57)
        {
            key9 = true;
        }

        if (key == 48)
        {
            key0 = true;
        }
    }

    //This is the function that sets the difference in time that allows the game to maintain the same appearance of speed even when the gameloop is too slow or fast.
    function timeTracker(time)
    {
        if (beegin == "start")
        {
            TTP = time;
            beegin = null;
        }
        TTN = time;
        TTD = TTN - TTP;
        TTP = time;
    }

    function inGamePopUp(type, message, unique)
    {
        gameState = "popUp";
        lowBar = "popUp";
        confirmed = false;

        //popUpBox
        XXX.beginPath();
        XXX.fillStyle = "lightGrey";
        XXX.strokeStyle = "black";
        XXX.rect(400, 175, 600, 150);
        XXX.fill();
        XXX.stroke();

        if (type == "alert")
        {
            if (unique == "levelup")
            {
                XXX.fillStyle = "gold";
                XXX.font = "bold 24px Book Antiqua";
                XXX.textAlign = "center";
                XXX.fillText("LEVEL UP!", 700, 210)
            }

            XXX.fillStyle = "gold";
            XXX.font = "bold 18px Book Antiqua";
            XXX.textAlign = "center";
            XXX.fillText(message, 700, 250);
        }
        else if (type == "confirm")
        {
            //message
            XXX.fillStyle = "black";
            XXX.font = "bold 20px Book Antiqua";
            XXX.textAlign = "center";
            XXX.fillText(message, 700, 210);
            //yes button
            if (mouseX > 510 && mouseX < 640 && mouseY > 260 && mouseY < 300)
            {
                XXX.beginPath();
                XXX.fillStyle = "gold";
                XXX.strokeStyle = "black";
                XXX.rect(510, 300, 140, -40);
                XXX.fill();
                XXX.stroke();

                if (clicked == true)
                {
                    clicked = false;
                    confirmed = true;
                    gameState = "active";
                    lowBar = "information";

                    return true;
                }
            }
            else
            {
                XXX.beginPath();
                XXX.fillStyle = "grey";
                XXX.strokeStyle = "black";
                XXX.rect(510, 300, 140, -40);
                XXX.fill();
                XXX.stroke();
            }

            XXX.fillStyle = "black";
            XXX.font = "bold 16px Book Antiqua";
            XXX.textAlign = "center";
            XXX.fillText("Yes", 580, 285);

            //no button
            if (mouseX > 750 && mouseX < 880 && mouseY > 260 && mouseY < 300)
            {
                XXX.beginPath();
                XXX.fillStyle = "gold";
                XXX.strokeStyle = "black";
                XXX.rect(880, 300, -140, -40);
                XXX.fill();
                XXX.stroke();

                if (clicked == true)
                {
                    clicked = false;
                    confirmed = true;
                    gameState = "active";
                    lowBar = "information";

                    return false;
                }
            }
            else
            {
                XXX.beginPath();
                XXX.fillStyle = "grey";
                XXX.strokeStyle = "black";
                XXX.rect(880, 300, -140, -40);
                XXX.fill();
                XXX.stroke();
            }

            XXX.fillStyle = "black";
            XXX.font = "bold 16px Book Antiqua";
            XXX.textAlign = "center";
            XXX.fillText("No", 810, 285);

        }
    }

    //The adventurer is the main character or the player.
    function Adventurer()
    {
        //Character related variables (non-code focused)
        this.name = "Name";
        //Leveling
        this.level = 1;
        this.experience = 0;
        this.experienceRequiredToLevel = 400 + (200 * (this.level - 1));
        this.skillPoints = 4; //you gain skill points every level that you can put into your skills. (4 points per level)
        this.totalSkillPoints = (4 * this.level) + 4;
        //Magical Leveling
        this.magicLevel = 0;
        this.magicalExperience = 0;
        this.magicalExperienceRequiredToLevel = 1000 + (400 * (this.level - 1));
        this.magicalSkillPoints = 0; //you gain magical skill points every magic level that you can put into magic related skills. ( 4 points per level)
        //Faction Relations
        this.kelFaction = 0; //green (kellish) Chieftain Har
        this.thengarFaction = 0; //brown (thengan) King Wolthgar
        this.freynorFaction = 0; //blue (freydic) King Jirdun
        this.aldrekFaction = 0; //red (aldrekii) Evaraxii Zoteff
        this.orgellFaction = 0; //yellow (orgish) King Lysander
        this.vardanFaction = 0; //black (vardanian) High Count Arlod
        this.cephriteFaction = 0; //purple (cephrian) Arch Magus Eferous and the grand council of the magi
        this.nirwadenFaction = 0; //orange (nirinese) Queen Lelaine
        //Lesser Faction Relations
        this.theBalgurMercenariesFaction = 0; //A fearsome and powerful mercinary group in the lands of Thengaria.
        //ranks
        this.theBalgurMercenariesRank = "none";
        //Skills
        this.constitution = 50; //this determines the amount of health that the player has. (4 health per point) (50 Maximum Constitution)
        this.strength = 50; //this skill adds or subtracts from your physical damage blows based on whether or not it is positive or negative. [+ 5 points of carry weight per level] (50 Maximum Strength)
        this.stamina = 50; //stamina determines the amount of energy you have for running and attacking. (5 energy per point) (50 Maximum Stamina)
        this.dexterity = 50; //this determines how fast you can move and how fast you can run. (50 Maximum Dexterity) [don't let it be boosted past 86]
        this.ranged = 50; //this skill increases the effectiveness of ranged weaponry.
        this.stealth = 50; //this skill determines how well your character can sneak, meaning [alt key movement]. Better stealth allows you to sneak by your enemies without being detected, and it gives you a bonus to successful theft and any other thing that may require stealth... perhaps lockpicking. (50 Maximum Stealth)
        this.intelligence = 50; //intelligence helps you earn experience faster in both magical and physical leveling systems.
        this.endurance = 50; //this skill determines the rate of regeneration for both energy and health it also increases your total hunger points. (50 Maximum Endurance) [for developer use: 58.333 repeating is the maximum amount for energy regeneration before it breaks... at this speed it is basically instant. Health will regenerate in a negative direction though at this number, so be careful...]
        this.toughness = 50; //this skill determine the player's natural armour (up to 5!), or how much damage a player can take without it affecting the player's health. Toughness also increases the players resistance to the environment and it reduces the likeliness of taking on negative effects. (50 Maximum Toughness)
        this.charisma = 0; //this skill allows you to access certain options gained through socializing, and it also determines how fast you gain and lose fame. [high charisma means that you will gain positive as well as negative fame quicker because your actions are more noticed by people]
        //Skill Adjusters
        this.AdConstitution = 0; //this is the amount of stat adjustment to constitution.
        this.AdStrength = 0; //this is the amount of stat adjustment to strength.
        this.AdStamina = 0; //this is the amount of stat adjustment to stamina.
        this.AdDexterity = 0; //this is the amount of stat adjustment to dexterity.
        this.AdRanged = 0; //this is the amount of stat adjustment to ranged.
        this.AdStealth = 0; //this is the amount of stat adjustment to stealth.
        this.AdIntelligence = 0; //this is the amount of stat adjustment to intelligence.
        this.AdEndurance = 0; //this is the amount of stat adjustment to endurance.
        this.AdToughness = 0; //this is the amount of stat adjustment to toughness.
        this.AdCharisma = 0; //this is the amount of stat adjustment to charisma.
        this.AdSleep = 0; //this is the amount of adjustment to sleep.
            //more skill adjusters
        this.dexBoost = 0; //this is stat adjustment by magic and potions.
        this.emiBoost = 0; //this is stat adjustment by magic and potions.
        //Magical Skills
        this.willpower = 50; //this is the amount of energy the caster has to cast magic with, like MP. (100 Maximum Willpower)
        this.knowledge = 50; //this determines what caliber of spells the caster can cast.
        this.concentration = 50; //this increases the effectiveness of the spells you cast.
        this.memory = 50; //this determines the rate of willpower regeneration. (100 Maximum Memory)
        this.eminence = 50; //this helps to determine your resistance to magical damage and how easy it is to cast spells.
        //Magical Skill Adjusters
        this.AdWillpower = 0; //this is the amount of stat adjustment to willpower.
        this.AdKnowledge = 0; //this is the amount of stat adjustment to knowledge.
        this.AdConcentration = 0; //this is the amount of stat adjustment to concentration.
        this.AdMemory = 0; //this is the amount of stat adjustment to memory.
        this.AdEminence = 0; //this is the amount of stat adjustment to eminence.
        //Ascribed Traits [these traits are randomized when you start your character]
        this.title = "Fairy Princess"; //Your title is determined by your starting wealth. [ascribed titles include: scum, peasant, commoner, tradefolk, highfolk, nobility, and royalty]
        this.gender = "Female"; //this will determine which sex you start out as.
        this.raceName = "Faelan";
        this.race = "pink"; //your players race will be determined by this trait. [races in poly land are much different than in real life]
        this.class = "Politician"; //Your character's class will start your character out with a weapon appropriate to your favoured combat style.
        //Achieved Traits
        this.Status = []; //this is a list to be filled with all of the titles that the player earns or achieves.
        this.fame = 0; //this is how popular you are with the public, if it is positive it means that they like and honor you, and if it is negative it means that they hate and despise you. [fame is gained through quests and the slayings of certain dangerous beasts, whereas infamy is gained through crime and murder]
        this.subRace = "none"; //this is a race that you are not born as but you become, like a vampire or a werewolf.
        //SkillBased Stats
        this.antiVenomMAX = 0 + Math.floor((0.5 * this.toughness / 50) + (0.5 * this.endurance / 50)); //this is the maximum amount of venom resistance the player can have.
        this.antiVenom = this.antiVenomMAX; //this is the player's venom resistance.
        this.carryWeightMAX = 10 + (5 * this.strength);
        this.carryWeight = 0;
        this.magicalResistanceTotal = this.naturalMagicalResistance + this.magicalResistance; //this is the total resistance to magical attacks that your character has.
        this.naturalMagicalResistance = 0; //this is your characters natural magically-attained resistance to magical attacks.
        this.healthMAX = 0.1 + (4 * this.constitution); //maximum amount of damage the player can take.
        this.health = this.healthMAX; //amount of damage the player can take.
        this.energyMAX = 6 + (5 * this.stamina); //maximum amount of energy the player has.
        this.energy = this.energyMAX;//this.energyMAX; //characters energy for doing things.
        this.willMAX = 0.1 + this.willpower; //maximum amount of magical casting power.
        this.will = this.willMAX; //magical casting power.
        this.armourTotal = this.naturalArmour + this.armour; //amount of damage that is deducted from incoming attacks before it applies to the player's health.
        this.naturalArmour = 0; //amount of armour a player has without including armor that the player could wear.
        this.baseHunger = 50;
        this.hungerMAX = 50;
        this.hunger = this.hungerMAX;
        this.thirstMAX = 20;
        this.thirst = this.thirstMAX;
        this.sleepMAX = 24;
        this.sleep = this.sleepMAX;
        this.extraSleep = 0; //this is sleep that is affected by spells or potion effects etc.
        this.totalSleep = this.sleepMAX + this.extraSleep + this.AdSleep;
        //Non-SkillBased Stats
        this.armour = 0; //this is the armor that is gained from worn equipment.
        this.magicalResistance = 0; //this is the magical resistance that is gained from worn equipment.
        //Items and Such
        this.unskilledUse = false;
        this.weaponEquipped = "none";
        this.outfitEquipped = "none";
        this.glovesEquipped = "none";
        this.ringEquipped = "none";
        this.necklaceEquipped = "none";
        this.bootsEquipped = "none";

        //CODE FOCUSED VARIABLES (the stuff that is not so pretty to look at, but that makes the world go 'round)
        //position and build
        this.zIndex = 3;
        this.mySize = 10; // This determines the size of the player's body... Do not change this value!!!
        this.myScreenX = 700; //This is the midpoint X of the canvas.
        this.myScreenY = 275; //This is the midpoint Y of the canvas.
        this.rotation = 90 / 180 * Math.PI; //This is the rotation of your character in radians.
        //Location in game
        this.underground = false;
        //attacking variables
        this.stage = 0; //Stage represents which frame in a combat animation the character is on, and it is used to create weapon animations.
        this.attacking = false; //This variable is triggered by the attack button, when triggered and true it initiates an attack and it will not turn false again until that attack is carried out.
        this.resetFrameOrder = true; //This unlocks the animation for attacking when true, and locks it when false so that internal attack processes can finish up.
        //variables for walking and running related functions
        this.lLegY = 0; // this changes the length of the player's left leg
        this.rLegY = 0; // this changes the length of the player's right leg
        this.movingType = 1; //There are three four moving types 0: standing, 1: walking, 2: running, 3: sneaking 4: backwalking
        this.legSwitch = 0;
        //Climate Affected Stats
        this.baseWarmth = 50;
        this.baseThirst = 20;
        this.warmthMAX = 50 + (1 * this.endurance) + (4 * this.toughness); //This is how warm you are... if it goes to 0 or below then the player will start losing health at an average rate but also their speed will be massively decreased. [It only goes down in cold climates](freezing to death)
        this.warmth = this.warmthMAX; //This is the players current warmth.
        this.timeSinceLastWarmthChange = new Date().getTime(); //This is the time since the last change in the player's warmth.
        this.heatResistance = 0; //this is the amount of resistance from thirst depriving conditions and heat related effects the player has.
        this.warmthProtection = 0; //this is the amount of protection against the cold the player has.
        this.timeSinceLastColdRush = new Date().getTime(); //this is the time that has passed since the last time the player was hurt from being frozen.
        //Sensing related variables
        this.noticed = false; // if noticed is true it means that an AI Unit has and is currently noticing the player.
        this.inCombat = false; // this flag specifies whether or not the player is being attacked by a AI Unit.
        //attacking variables
        this.fistDamage = 0.25 + this.strength / 30; // this is the damage done by the player's fists
        this.bubbleOfDamageX = 0; //this is the x coordinate of the zone that the player hurts enemies with physical attacks in. (it changes based on the weapon.)
        this.bubbleOfDamageY = 0; //this is the y coordinate of the zone that the player hurts enemies with physical attacks in. (it changes based on the weapon.)
        this.weaponIsRanged = false; //this is flagged true if your weapon is a ranged weapon.
        this.weaponIsMagic = false; //this is flagged true if your weapon is a magical spell.
        this.finalAttackStage = false; //this lets you know when your attack animation is on its final frame.
        this.attackPause = new Date().getTime(); //This leaves a gap between your attacks so that you do not deal damage instantly.
        this.strike = false;
        this.releaseStage = false; //for archery this is the stage after the arrow has been loosed.
        this.ammoLoaded = false; //When the animation of loading the arrow/bolt etc. is done this flag turns on, allowing the player to shoot the projectile.
        this.reloadTime = new Date().getTime(); //this is the time that the player must wait before reloads.
        this.attackCooldown = new Date().getTime();
        this.attackManual = false; //this flag regulates manual attacking so that only one attack happens per attack.
        //blocking variables
        this.block = false;
        this.blocking = false;
        this.shielding = 0; //Shielding is the added armour from blocking with a shield or other blocking type of weapon.
            //archery
        this.projectileX = 0;
        this.projXAd = 0;
        this.projectileY = 0;
        this.projYAd = 0;
        //Old Spell variables
        this.fistMagicalDamage = 0; //This is the magical damage the player does with his/her fists.
        this.onTouchSpell = 0; //This is the magical effect brought on by "touch" (punching)
        //(Official) Magic Variables
        this.spellSlots = 1; //this is the number of secondary spells or "incatations" the player can cast with the number keys.
        this.spellSlotsUsed = 0;
        this.spell = "none";
        this.sp1 = "none";
        this.sp2 = "none";
        this.sp3 = "none";
        this.sp4 = "none";
        this.sp5 = "none";
        this.sp6 = "none";
        this.sp7 = "none";
        this.sp8 = "none";
        this.sp9 = "none";
        this.passiveSpellsEquipped = [];
        this.casting = false;
        this.castingCooldown = new Date().getTime();
        this.secondaryCastingCooldown = new Date().getTime();
        this.doMagic = true; //this allows things to be done in the magic animation thing.
        //Inventory Variables
        this.inventoryPosition = 0;
        this.hinderance = false; //this is the state of being over-cucumbered.
        this.lootRadius = 50;
        this.distanceFromMouse = 0;
        this.isWeaponEquipped = false;
        this.isArmourEquipped = false;
        this.isAmmoEquipped = false;
        this.projectileReleased = true;
        this.rangedWeaponType = "none";
        this.areGlovesEquipped = false;
        this.isNecklaceEquipped = false;
        //Shop Variables
        this.merchPosition = 0;
        //Bank Variables
        this.bankPosition = 0;
        //Crafting Variables
        this.craftPosition = 0;
        //Dialogue Variables
        this.dialoguePosition = 0; //This is the particular dialogue option you are on.
        this.dialogueOptions = []; //These are the options the player is allowed to choose from, they vary depending on which AI you speak with.
        this.dialogueChoiceMade = false; //this is a variable that helps determine when the player has chosen what to say during dialogue, it will be reset after the recipient registers the players input.
        //effects variables
        this.fedClock = 0; // this is the amount of time a player can avoid losing hunger after eating. This value is set elsewhere.
        this.fed = true; //When this is initiated the player will become satiated for a short duration of time.
        this.satiated = false; //This is an effect that means that the player is full and will not get hungry.
        this.gojiiTimer = 0;
        this.gojiiVomit = false; //this is a flag that makes sure that the vomiting part of gojii poisoning only happens once.
        this.timeSinceLastPoisoned = new Date().getTime();
        this.timeSinceBadFoodEaten = 0; //this is the time past which the player will throw up from food poisoning.
        this.poisonI = false;
        this.poisonII = false;
        this.poisonIII = false;
        this.poisonIV = false;
        this.poisonV = false;
        this.poisoned = false;
        this.gojiiPoisoned = false;
        this.timeSinceLastGutFeast = new Date().getTime();
        this.gutWorms = false; //this effect slowly saps the players hunger until the gutWorms starve to death or the player does at -1 hunger.
        this.freeze = 1; // this should be at one while the player has sufficient warmth. Otherwise, it should increase proportionally up to 4 by the time warmth is zero.
        this.frozen = false; //this is the flag that is triggered after the players warmth has reached 0 or below.
        this.freezing = false; //this is the effect during which the player loses warmth.
        this.recoverI = false;
        this.recoverII = false;
        this.recoverIII = false;
        this.recoverIV = false;
        this.recoverV = false;
        this.recovered = false; //this is the mini notice for health regeneration.
        this.recoveryTime = 0; //this is the amount of health bonuses the player gets over time.
        this.timeSinceLastRecovery = 0;
        this.energizeI = false;
        this.energizeII = false;
        this.energizeIII = false;
        this.energizeIV = false;
        this.energizeV = false;
        this.energized = false; //this is the mini notice for energy regeneration.
        this.energizeTime = 0; //this is the amount of energy bonuses the player gets over time.
        this.timeSinceLastEnergize = 0;
        this.energilI = false;
        this.energilII = false;
        this.energilIII = false;
        this.energilIV = false;
        this.energilV = false;
        this.fatigueI = false;
        this.fatigueII = false;
        this.fatigueIII = false;
        this.fatigueIV = false;
        this.fatigueV = false;
        this.energil = false; //this is the mini notice for energy regeneration.
        this.energilTime = 0; //this is the amount of energy bonuses the player gets over time.
        this.timeSinceLastEnergil = 0;
        this.speedI = false;
        this.speedII = false;
        this.speedIII = false;
        this.speedIV = false;
        this.speedV = false;
        this.dexTime = 0; //this is the amount of time that helps determine how long dexterity is magically increased.
        this.speedBoost = false; //this is the flag that indicates whether the effect is active for the mini notice system.
        this.timeSinceRawTrollBlood = 0; //this is the timer for troll poisoning
        this.trollPoisonActive = false; //this is the reset for troll poisonings magic resistance effect (resets the eminence boost to 0 when true)
        this.stunned = false; //this denotes whether or not the player is stunned and displays the mininotice icon if the player is.
        this.stunnedI = false;
        this.stunnedII = false;
        this.stunnedIII = false;
        this.stunnedTime = 0;
        this.stunTimer = new Date().getTime();
        this.fleshMites = false;
        this.timeSinceLastFleshFeast = new Date().getTime();
        this.burningTime = 0;
        this.burningTime2 = new Date().getTime();
        this.wateredClock = 0; //this is like fedClock for thirst.
        this.watered = true; //this is like fed for thirst.
        this.quenched = false; //this is like satiated for thirst.
        this.inebriation = 0;
        this.inebriated = false;
        this.timeSinceLastAlcoholCleanse = new Date().getTime();
        this.cyrinthilimTrip = false;
        this.cyrinthilimTime = 0;
        this.gassiness = false;
        this.gassyCha = 0;
        this.gassinessTime = 0;
        this.frozenTime = 0;
        this.nightVision = false;
        this.nonLimitedLightSource = false; //if a light source like a magical light sword or a torch is equipped this is true;
        this.timeSinceLightSourceFuelUsed = 0;
        this.lightSourceDuration = 0;
        this.lightSource = "none";
        this.storeGameTimeForSleep = gameTime;
        this.tireless = false; //if activated sleep does not go down or affect you. (this is like satiate or quench for sleep)
        this.tirelessTime = 15; //this is the timer in seconds that tireless endures.
        this.tirelessStoreTime = 0; //this needs to be set to new Date().getTime() in order for tireless to be activated.
        this.insomnia = false;
        this.insomniaTime = 0;
        this.insomniaStoreTime = 0;
        this.insomniated = false; //this is a flag that lets thing give the player permanent insomnia until this is switched off by something.
        this.blinded = false;
        this.blindedTime = 0;
        this.blindedStoreTime = 0;
        this.brainMaggots = false; //brain maggots give you brain damage and insomnia and eventually leads to blindness and death.
        this.perfume = "none";
        this.perfumeTime = 0;
        this.perfumeStoreTime = 0;
        this.perfumeCHA = 0;

        //utility or extra variables
        this.outfitZ = true; //this is the layer determiner for the players outfit, so that the outfit can draw underneath or above the players body layer.
        this.capeFlappiness = 0; //this is a variable that determines what costume the cape will be.
        this.wasCapeFlapping = false; //this lets the cape know it was showing so when the player slows down or stops moving the cape will ease back.
        this.decreaseInHealth = 0;
        this.stage = 0;
        this.experienceToggle = "normal"; //This flag is for toggling between the magical experience bar and the regular one.
        this.playerDeath = false; //this is the thing that lets the player only die once when they die.
        this.REQB = false; //Ranged Equip Blocker //stops the player from unequipping or equipping while ammunition is loaded into a ranged weapon. Prevents while true allows while false.
        this.cutcut = false; //for an sort of attacking of scenery this allows you to signal that an attack has happened.
        this.spellzLearned = 0;
        this.flashFrameTime = new Date().getTime();
        this.flashFrame = 0;
        this.outfitType = "none";
        this.glovesType = "none";
        this.necklaceType = "none";

        //a function for all of the small functions to fix tiny obscure yet sometimes important details...
        this.quickFixes = function()
        {
            //keep the player from getting stuck outside of dialogue for dialogue reasons.
            if (lowBar != "dialogue")
            {
                this.speechMovementInhibitor = false;
                playersTurnToMove = true;
            }
            else
            {
                playersTurnToMove = false;
            }
            //noUnequipRangeWhileLoaded
            if (this.weapon.subUtility == "bow")
            {
                if (this.projectileReleased == true)
                {
                    this.REQB = false;
                }
                else
                {
                    this.REQB = true;
                }
            }
            else if (this.weapon.subUtility == "crossbow")
            {
                if (this.ammoLoaded == false)
                {
                    this.REQB = false;
                }
                else
                {
                    this.REQB = true;
                }
            }

            //setSpellToFalseWhenWeaponIsTrue
            if (this.weaponEquipped != "none" && this.spell != "none")
            {
                this.spell = "none";
                for (var i = 0; i < primarySpells.length; i++)
                {
                    primarySpells[i].equipped = false;
                }
            }

            //fire effect on highest layer possible;
            this.onFire = function()
            {
                if (new Date().getTime() - this.burningTime <= 9000 && (1.2 - this.heatResistance) > 0)
                {
                    this.flashAnimate(90, this.rotation, 0.90, [{image: polypol, imgX: 1691, imgY: 184, portionW: 24, portionH: 23, adjX: -1/2 * ((24 * 1.5)/10) * this.mySize, adjY: -1/2 * ((23 * 1.5)/10) * this.mySize, width: ((24 * 1.5)/10) * this.mySize, height: ((23 * 1.5)/10) * this.mySize}, {image: polypol, imgX: 1721, imgY: 185, portionW: 24, portionH: 23, adjX: -1/2 * ((24 * 1.5)/10) * this.mySize, adjY: -1/2 * ((23 * 1.5)/10) * this.mySize, width: ((24 * 1.5)/10) * this.mySize, height: ((23 * 1.5)/10) * this.mySize}, {image: polypol, imgX: 1750, imgY: 185, portionW: 24, portionH: 23, adjX: -1/2 * ((24 * 1.5)/10) * this.mySize, adjY: -1/2 * ((23 * 1.5)/10) * this.mySize, width: ((24 * 1.5)/10) * this.mySize, height: ((23 * 1.5)/10) * this.mySize}, {image: polypol, imgX: 1783, imgY: 185, portionW: 24, portionH: 23, adjX: -1/2 * ((24 * 1.5)/10) * this.mySize, adjY: -1/2 * ((23 * 1.5)/10) * this.mySize, width: ((24 * 1.5)/10) * this.mySize, height: ((23 * 1.5)/10) * this.mySize}]);
                    if (new Date().getTime() - this.burningTime2 >= 99)
                    {
                        this.frozenTime = 0;
                        this.burningTime2 = new Date().getTime();
                        this.health -= Math.max(0, 0.12 - (this.heatResistance / 10));
                        this.warmth += 0.5;
                        this.thirst = Math.max(0, this.thirst - 0.11);
                    }
                }
            };
            this.onFire();

            this.onIce = function()
            {
                if (this.warmthProtection < 100 && new Date().getTime() - this.frozenTime <= 4500)
                {
                    this.burningTime = 0;
                    this.warmth = Math.max(-5, this.warmth - ((this.warmthMAX + 5) - this.warmthProtection));
                    XXX.save();
                    XXX.translate(1/2 * CCC.width, 1/2 * CCC.height);
                    XXX.globalAlpha = 0.9;
                    XXX.drawImage(polypol, 1691, 240, 28, 24, - 1/2 * (28 * 1.2) / 10 * this.mySize, - 1/2 * (24 * 1.2) / 10 * this.mySize, (28 * 1.2) / 10 * this.mySize, (24 * 1.2) / 10 * this.mySize);
                    XXX.restore();
                }
            };
            this.onIce();
        };

        //experience and leveling function
        this.doLeveling = function()
        {
            if (this.raceName == "Cephrite")
            {
                this.totalSkillPoints = 4 * this.level;

                if (this.title == "Royalty")
                {
                    if (this.class == "Mage")
                    {
                        this.totalMagicPoints = (2 * this.magicLevel) + 9 - this.spellzLearned;
                    }
                    else
                    {
                        this.totalMagicPoints = (2 * this.magicLevel) + 6 - this.spellzLearned;
                    }
                }
                else
                {
                    if (this.class == "Mage")
                    {
                        this.totalMagicPoints = (2 * this.magicLevel) + 7 - this.spellzLearned;
                    }
                    else
                    {
                        this.totalMagicPoints = (2 * this.magicLevel) + 4 - this.spellzLearned;
                    }
                }
            }
            else
            {
                if (this.title == "Royalty")
                {
                    this.totalSkillPoints = (4 * this.level) + 6;
                }
                else
                {
                    this.totalSkillPoints = (4 * this.level) + 4;
                }

                if (this.class == "Mage")
                {
                    this.totalMagicPoints = 2 * this.magicLevel + 3 - this.spellzLearned;
                }
                else
                {
                    this.totalMagicPoints = 2 * this.magicLevel - this.spellzLearned;
                }
            }

            if (this.magicLevel < 20)
            {
                this.magicalExperienceRequiredToLevel = 1200 + (400 * (this.magicLevel - 1));
            }
            else
            {
                this.magicalExperienceRequiredToLevel = 2000 + (600 * (this.magicLevel - 1));
            }


            if (this.level < 10)
            {
                this.experienceRequiredToLevel = 400 + (200 * (this.level - 1));
            }
            else
            {
                this.experienceRequiredToLevel = 1000 + (400 * (this.level - 1));
            }


            if (this.experience >= this.experienceRequiredToLevel)
            {
                this.experience -= this.experienceRequiredToLevel;
                this.level += 1;
                this.skillPoints += 4;

                popDuration = new Date().getTime();
                popType = "levelup";
                //console.log("You are now level " + this.level + ", and now have " + this.skillPoints + " skill points to spend!");
            }

            if (this.magicalExperience >= this.magicalExperienceRequiredToLevel)
            {
                this.magicalExperience -= this.magicalExperienceRequiredToLevel;
                this.magicLevel += 1;
                this.magicalSkillPoints += 2;

                popDuration = new Date().getTime();
                popType = "magicLevelup";
            }
            //console.log(this.experience);
        };
        //set stats function
        this.setBaseStats = function ()
        {
            //this sets all other skills listed.
            this.fistDamage = 0.25 + (this.getStrength() / 50); // this is the damage done by the player's fists
            this.antiVenomMAX = 0 + (0.7 * (this.getToughness() / 50)) + (0.3 * (this.getEndurance() / 50)); //this is the maximum amount of venom resistance the player can have.
            this.carryWeightMAX = 10 + (5 * this.getStrength());
            this.naturalArmour = this.getToughness() / 50;
            this.armourTotal = this.naturalArmour + this.armour + this.shielding;
            this.willMAX = 0.1 + this.willpower;
            this.energyMAX = 6 + (5 * this.getStamina());
            this.healthMAX = 0.1 + (4 * this.getConstitution());
            this.naturalMagicalResistance = this.getEminence() / 5;
            this.magicalResistanceTotal = this.naturalMagicalResistance + this.magicalResistance;
            this.hungerMAX = this.baseHunger;
            this.thirstMAX = this.baseThirst;
            this.warmthMAX = this.baseWarmth + (1 * this.getEndurance()) + (4 * this.getToughness());
            this.spellSlots = 1 + Math.floor(this.memory * 8 / 50);
            this.sleepMAX = 24 + this.getEndurance();
            this.totalSleep = this.sleepMAX + this.extraSleep + this.AdSleep;

            //this sets carry weight based on the total added weights in the player's inventory.
            if (Inventory.length > 0)
            {
                var totalWeight = 0;
                for (var i = 0; i < Inventory.length; i++)
                {
                    Inventory[i][0].setItemID();
                    totalWeight += (Inventory[i][0].weight * Inventory[i][1]); //this is the weight from the item times the amount of items of that type in the inventory.
                }
                this.carryWeight = totalWeight;
                //console.log("The carryWeight is: " + this.carryWeight + " out of a total potential weight limit of " + this.carryWeightMAX + ".")
            }
            else
            {
                this.carryWeight = 0; //If the Inventory is empty then the carry weight is 0.
            }
        };

        this.flashAnimate = function(framerate, rotation, transparency, list)
        {
            //use a list with coords for images: [{image:, imgX:, imgY:, portionW:, portionH:, adjX:, adjY:, width:, height:}, ... etc.]
            if (this.flashFrame >= list.length)
            {
                this.flashFrame = 0;
            }

            if (rotation != false)
            {
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(rotation);
                XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, X - this.X + (1 / 2 * CCC.width) + list[this.flashFrame].adjX, Y - this.Y + (1 / 2 * CCC.height) + list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }

            if (new Date().getTime() - this.flashFrameTime >= framerate)
            {
                this.flashFrameTime = new Date().getTime();
                this.flashFrame += 1;
            }
        };

        this.effects = function ()
        {
            this.sleepCalculator = function()
            {
                if (new Date().getTime() - this.tirelessStoreTime <= this.tirelessTime * 1000)
                {
                    this.tireless = true;
                }
                else
                {
                    this.tireless = false;
                }

                if (this.tireless != true)
                {
                    if (gameTime - this.storeGameTimeForSleep >= 60)
                    {
                        if (fairSleep)
                        {
                            this.storeGameTimeForSleep = gameTime;
                            fairSleep = false;
                        }
                        this.sleep -= (gameTime - this.storeGameTimeForSleep)/(60 * 60);
                        this.storeGameTimeForSleep = gameTime;
                    }
                }
                else
                {
                    this.storeGameTimeForSleep = gameTime;
                }

                //console.log(this.sleep + " :: " + (gameTime - this.storeGameTimeForSleep) + " ;; " + minuteOfHour);

                if (this.sleep > this.totalSleep) //total sleep == sleepMAX extraSleep and AdSleep
                {
                    this.sleep = this.totalSleep;
                }

                //da la (player) efectos negativos por no haber dormido por mucho tiempo.
                if (this.sleep <= 0 && this.sleep > -24)
                {
                    if (this.energilI != true)
                    {
                        this.fatigueI = true;
                        this.energilTime = Math.max(4, this.energilTime);
                        this.timeSinceLastEnergil = new Date().getTime;
                        if (this.will > this.willMAX / 2)
                        {
                            this.will = this.willMAX / 2;
                        }
                    }
                }
                else if (this.sleep <= -24 && this.sleep > -48)
                {
                    if (this.energilII != true)
                    {
                        this.fatigueII = true;
                        this.energilTime = Math.max(4, this.energilTime);
                        this.timeSinceLastEnergil = new Date().getTime;
                        if (this.will > this.willMAX / 4)
                        {
                            this.will = this.willMAX / 4;
                        }
                    }
                }
                else if (this.sleep <= -48 && this.sleep > -72)
                {
                    if (this.energilIII != true)
                    {
                        this.fatigueIII = true;
                        this.energilTime = Math.max(4, this.energilTime);
                        this.timeSinceLastEnergil = new Date().getTime;
                        if (this.will > this.willMAX / 8)
                        {
                            this.will = this.willMAX / 8;
                        }
                    }
                }
                else if (this.sleep <= -72 && this.sleep > -96)
                {
                    if (this.energilIV != true)
                    {
                        this.fatigueIV = true;
                        this.energilTime = Math.max(4, this.energilTime);
                        this.timeSinceLastEnergil = new Date().getTime;
                        if (this.will > this.willMAX / 16)
                        {
                            this.will = this.willMAX / 16;
                        }
                    }
                }
                else if (this.sleep <= -96)
                {
                    if (this.energilV != true)
                    {
                        this.fatigueV = true;
                        this.energilTime = Math.max(4, this.energilTime);
                        this.timeSinceLastEnergil = new Date().getTime;
                        if (this.will > this.willMAX / 32)
                        {
                            this.will = this.willMAX / 32;
                        }
                    }
                }

                //Insomnia
                if (new Date().getTime() - this.insomniaStoreTime <= this.insomniaTime * 1000 || this.brainMaggots == true || this.cyrinthilimTime > 0 || this.insomniated == true)
                {
                    this.insomnia = true;
                }
                else
                {
                    this.insomnia = false;
                }
            };

            this.blinder = function()
            {
                //Blinded
                if (new Date().getTime() - this.blindedStoreTime <= this.blindedTime * 1000 || this.intelligence < -15 && this.brainMaggots == true)
                {
                    this.blinded = true;
                }
                else
                {
                    this.blinded = false;
                }
            };

            this.brainMaggot = function()
            {
                if (this.brainMaggots == true)
                {
                    if (gameLoopNumber % 5500 == 0)
                    {
                        this.intelligence -= 1;
                        if (this.intelligence < -5)
                        {
                            this.health -= 6;
                            this.energy -= 3;
                            this.will -= 9;
                        }
                    }
                }
            };

            this.perfumed = function()
            {
                if (this.perfume != "none")
                {
                    if (new Date().getTime() - this.perfumeStoreTime < 1000 * this.perfumeTime)
                    {
                        if (this.gender != "Male")
                        {
                            if (this.perfume == "ogard")
                            {
                                this.perfumeCHA = 4;
                            }
                        }
                    }
                    else
                    {
                        this.perfumeTime = 0;
                        this.perfumeStoreTime = 0;
                        this.perfume = "none";
                    }
                }
                else
                {
                    this.perfumeCHA = 0;
                }
            };

            this.climateEffects = function ()
            {
                //If the player's warmth is not at max then the flag for the mini notice is true otherwise it is false.
                if (this.warmth < this.warmthMAX)
                {
                    this.freezing = true;
                }
                else
                {
                    this.freezing = false;
                }

                //This is Where warmth and thirst will either increase or decrease depending on the region the player is in.
                if (elevation == 3 && new Date().getTime() - this.timeSinceLastWarmthChange > 5000)
                {
                    if (currentSeason == "Bright")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Harvest")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (4 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Frost")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (4 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (4.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Bounty")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (4 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                }
                else if (elevation == 2 && new Date().getTime() - this.timeSinceLastWarmthChange > 5000)
                {
                    if (currentSeason == "Bright")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Harvest")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Frost")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (4 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Bounty")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                }
                else if (elevation == 1 && new Date().getTime() - this.timeSinceLastWarmthChange > 5000)
                {
                    if (currentSeason == "Bright")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Harvest")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Frost")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (3 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Bounty")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                }
                else if (elevation == 0 && new Date().getTime() - this.timeSinceLastWarmthChange > 5000) //every 0.85 seconds warmth increases if not at its max. Thirst only ever increases by intaking moisture... obviously.
                {
                    if (currentSeason == "Bright")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1);
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0.5);
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Harvest")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Frost")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (2 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Bounty")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                }
                else if (elevation == -1 && new Date().getTime() - this.timeSinceLastWarmthChange > 5000) //every 0.85 seconds warmth increases if not at its max. Thirst only ever increases by intaking moisture... obviously.
                {
                    if (currentSeason == "Bright")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1.5);
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1);
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1.25);
                        }
                    }
                    else if (currentSeason == "Harvest")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0.5);
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Frost")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (1 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Bounty")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0.5);
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    this.warmth = Math.min(this.warmthMAX, this.warmth + 1);
                    this.timeSinceLastWarmthChange = new Date().getTime();
                }
                else if (elevation == -2 && new Date().getTime() - this.timeSinceLastWarmthChange > 5000) //every 0.85 seconds warmth increases if not at its max. Thirst only ever increases by intaking moisture... obviously.
                {
                    if (currentSeason == "Bright")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 2);
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1);
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1.5);
                        }
                    }
                    else if (currentSeason == "Harvest")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1);
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0);
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0.5);
                        }
                    }
                    else if (currentSeason == "Frost")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0);
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.5 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, Math.min(this.warmth + 0, this.warmth - (0.25 - this.warmthProtection)));
                            this.timeSinceLastWarmthChange = new Date().getTime();
                        }
                    }
                    else if (currentSeason == "Bounty")
                    {
                        if (timeOfDay == "Day")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 1);
                        }
                        else if (timeOfDay == "Night")
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0);
                        }
                        else
                        {
                            this.warmth = Math.min(this.warmthMAX, this.warmth + 0.5);
                        }
                    }
                }

                //This is where frozen is is set to true when your warmth runs out. //It Applies the speed decrease based on warmth here as well.
                if (this.warmth <= 0)
                {
                    this.warmth = 0;
                    this.frozen = true;
                    this.freeze = Math.max(this.freeze, 4);
                }
                else if (this.warmth <= 10)
                {
                    this.frozen = false;
                    this.freeze = Math.max(this.freeze, 3.44);
                }
                else if (this.warmth <= 20)
                {
                    this.frozen = false;
                    this.freeze = Math.max(this.freeze, 3);
                }
                else if (this.warmth <= 25)
                {
                    this.frozen = false;
                    this.freeze = Math.max(this.freeze, 2.44);
                }
                else if (this.warmth <= 30)
                {
                    this.frozen = false;
                    this.freeze = Math.max(this.freeze, 2);
                }
                else if (this.warmth <= 40)
                {
                    this.frozen = false;
                    this.freeze = Math.max(this.freeze, 1.44);
                }
                else
                {
                    this.frozen = false;
                    this.freeze = Math.max(this.freeze, 1);
                }

                //If frozen is true decrease
                if (this.frozen == true)
                {
                    if (new Date().getTime() - this.timeSinceLastColdRush > 4000)
                    {
                        this.timeSinceLastColdRush = new Date().getTime();
                        this.health -= 4;
                    }
                }
            };

            this.light = function()
            {
                if (new Date().getTime() - this.timeSinceLightSourceFuelUsed < this.lightSourceDuration * 1000 || this.nonLimitedLightSource)
                {
                    if (this.lightSource == "oilLantern")
                    {
                        lights.push({X:X, Y: Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: true});
                    }
                    else if (this.lightSource == "oilLamp")
                    {
                        lights.push({X:X, Y: Y, size: 175, extraStops: true, GRD: 0.7, Alpha: 0.8, showMe: true});
                    }
                    else if (this.lightSource == "jackOLantern")
                    {
                        lights.push({X:X, Y: Y, size: 85, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: true});
                    }
                    else if (this.lightSource == "candle")
                    {
                        lights.push({X:X, Y: Y, size: 65, extraStops: true, GRD: 0.35, Alpha: 0.5, showMe: true});
                    }
                }
                else
                {
                    this.lightSource = "none"
                }
            };

            this.overCucumbered = function()
            {
                if (this.carryWeight > this.carryWeightMAX || this.unskilledUse == true)
                {
                    this.hinderance = true; //This is the flag that notes whether or not the player is carrying to much.//TODO make a mini notice for hinderance... it should look like and old fashioned circus weight.
                }
                else
                {
                    this.hinderance = false;
                }

                if (this.stunnedI || this.stunnedII || this.stunnedIII)
                {
                    this.stunned = true;
                }
                else
                {
                    this.stunned = false;
                }

                if (this.hinderance == true || this.stunned == true) //If the player is carrying too much then they are slowed down depending on how much above the maximum they are carrying.
                {
                    //slowness for using armour that is beyond your toughness level.
                    if (this.unskilledUse == true)
                    {
                        this.freeze = Math.max(this.freeze, 22);
                    }
                    else if (this.stunnedIII == true)
                    {
                        this.freeze = Math.max(this.freeze, 21);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 4)
                    {
                        this.freeze = Math.max(this.freeze, 20);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 3.5)
                    {
                        this.freeze = Math.max(this.freeze, 15);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 3)
                    {
                        this.freeze = Math.max(this.freeze, 11);
                    }
                    else if (this.stunnedII == true)
                    {
                        this.freeze = Math.max(this.freeze, 10);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 2.5)
                    {
                        this.freeze = Math.max(this.freeze, 9);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 2.25)
                    {
                        this.freeze = Math.max(this.freeze, 7);
                    }
                    else if (this.stunnedI == true)
                    {
                        this.freeze = Math.max(this.freeze, 5.5);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 2)
                    {
                        this.freeze = Math.max(this.freeze, 5);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 1.75)
                    {
                        this.freeze = Math.max(this.freeze, 4);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 1.5)
                    {
                        this.freeze = Math.max(this.freeze, 3);
                    }
                    else if (this.carryWeight > this.carryWeightMAX * 1.25)
                    {
                        this.freeze = Math.max(this.freeze, 2);
                    }
                    else if (this.carryWeight > this.carryWeightMAX)
                    {
                        this.freeze = Math.max(this.freeze, 1.5);
                    }
                }
                //freeze will otherwise be set in the function prior to this "climateEffects" so it will be at the standard (freeze == 1) if the player is not below on his/her warmth stat.
            };

            this.gutWorm = function ()
            {
                if (this.hunger <= -1)
                {
                    this.gutWorms = false;
                }
                if (this.gutWorms == true && new Date().getTime() - this.timeSinceLastGutFeast >= 100)
                {
                    //reset the timer for the gutworms feasting.
                    this.timeSinceLastGutFeast = new Date().getTime();
                    //Take away hunger from the player because the gut-worms are eating the player's nutrition and calorie intake.
                    this.hunger -= 0.005125 * (TTD / 16.75);
                }
            };

            this.fleshMite = function()
            {
                if (this.fleshMites == true)
                {
                    this.freeze = Math.max(this.freeze, 2.25);
                }

                if (this.fleshMites == true && new Date().getTime() - this.timeSinceLastFleshFeast >= 75)
                {
                    //reset the timer for the fleshMites feasting.
                    this.timeSinceLastFleshFeast = new Date().getTime();
                    //Take away health from the player because the fleshMites are eating the player from the inside.
                    this.health -= 0.0025625 * (TTD / 16.75);
                }
            };

            this.alcoholManagement = function()
            {
                if (new Date().getTime() - this.timeSinceLastAlcoholCleanse >= 1000)
                {
                    //reset the timer for the gutworms feasting.
                    this.timeSinceLastAlcoholCleanse = new Date().getTime();
                    //Take away hunger from the player because the gut-worms are eating the player's nutrition and calorie intake.
                    this.inebriation = Math.max(0, this.inebriation - 1);

                    if (this.inebriation >= 100 + (this.getToughness() * 3))
                    {
                        this.inebriated = true;
                    }
                    else
                    {
                        this.inebriated = false;
                    }
                }
            };

            this.stunnedTimer = function()
            {
                if (this.stunnedTime >= 1)
                {
                    if (new Date().getTime() - this.stunTimer >= 1000)
                    {
                        this.stunTimer = new Date().getTime();
                        this.stunnedTime -= 1;
                    }
                }
                if (this.stunnedTime <= 0)
                {
                    this.stunnedI = false;
                    this.stunnedII = false;
                    this.stunnedIII = false;
                }
            };

            this.recovery = function() //for health and energy regenerations
            {
                //This enables the poisoned mini notice if any type of any category of energy restore is in effect.
                if (this.energizeI || this.energizeII || this.energizeIII || this.energizeIV || this.energizeV)
                {
                    this.energized = true;
                }
                else
                {
                    this.energized = false;
                }

                //This enables the poisoned mini notice if any type of any category of health restore is in effect.
                if (this.recoverI || this.recoverII || this.recoverIII || this.recoverIV || this.recoverV)
                {
                    this.recovered = true;
                }
                else
                {
                    this.recovered = false;
                }

                //This enables the poisoned mini notice if any type of any category of health restore is in effect.
                if (this.energilI || this.energilII || this.energilIII || this.energilIV || this.energilV || this.fatigueI || this.fatigueII || this.fatigueIII || this.fatigueIV || this.fatigueV)
                {
                    this.energil = true;
                }
                else
                {
                    this.energil = false;
                }

                //This section covers all five ranks of the basic type of health regeneration.
                if (this.recoveryTime > 0)
                {
                    if (this.recoverV == true && new Date().getTime() - this.timeSinceLastRecovery > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastRecovery = new Date().getTime();
                        //Take away health
                        this.health = Math.min(this.healthMAX, this.health + (2 / 10));
                        this.recoveryTime -= 1;
                    }
                    else if (this.recoverIV == true && new Date().getTime() - this.timeSinceLastRecovery > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastRecovery = new Date().getTime();
                        //Take away health
                        this.health = Math.min(this.healthMAX, this.health + (2 / 20));
                        this.recoveryTime -= 1;
                    }
                    else if (this.recoverIII == true && new Date().getTime() - this.timeSinceLastRecovery > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastRecovery = new Date().getTime();
                        //Take away health
                        this.health = Math.min(this.healthMAX, this.health + (2 / 30));
                        this.recoveryTime -= 1;
                    }
                    if (this.recoverII == true && new Date().getTime() - this.timeSinceLastRecovery > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastRecovery = new Date().getTime();
                        //Take away health
                        this.health = Math.min(this.healthMAX, this.health + (2 / 40));
                        this.recoveryTime -= 1;
                    }
                    else if (this.recoverI == true && new Date().getTime() - this.timeSinceLastRecovery > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastRecovery = new Date().getTime();
                        //Take away health
                        this.health = Math.min(this.healthMAX, this.health + (2 / 50));
                        this.recoveryTime -= 1;
                    }
                }
                else
                {
                    this.recoverI = false;
                    this.recoverII = false;
                    this.recoverIII = false;
                    this.recoverIV = false;
                    this.recoverV = false;
                }

                //This section covers all five ranks of the basic type of energy regeneration.
                if (this.energizeTime > 0)
                {
                    if (this.energizeV == true && new Date().getTime() - this.timeSinceLastEnergize > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergize = new Date().getTime();
                        //Take away health
                        this.energy = Math.min(this.energyMAX, this.energy + (3 / 10));
                        this.energizeTime -= 1;
                    }
                    else if (this.energizeIV == true && new Date().getTime() - this.timeSinceLastEnergize > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergize = new Date().getTime();
                        //Take away health
                        this.energy = Math.min(this.energyMAX, this.energy + (3 / 20));
                        this.energizeTime -= 1;
                    }
                    else if (this.energizeIII == true && new Date().getTime() - this.timeSinceLastEnergize > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergize = new Date().getTime();
                        //Take away health
                        this.energy = Math.min(this.energyMAX, this.energy + (3 / 30));
                        this.energizeTime -= 1;
                    }
                    if (this.energizeII == true && new Date().getTime() - this.timeSinceLastEnergize > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergize = new Date().getTime();
                        //Take away health
                        this.energy = Math.min(this.energyMAX, this.energy + (3 / 40));
                        this.energizeTime -= 1;
                    }
                    else if (this.energizeI == true && new Date().getTime() - this.timeSinceLastEnergize> 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergize = new Date().getTime();
                        //Take away health
                        this.energy = Math.min(this.energyMAX, this.energy + (3 / 50));
                        this.energizeTime -= 1;
                    }
                }
                else
                {
                    this.energizeI = false;
                    this.energizeII = false;
                    this.energizeIII = false;
                    this.energizeIV = false;
                    this.energizeV = false;
                }

                //This section covers all five ranks of the basic type of energil (the lessening of normal energy consumption) and fatigue (the intensification of normal energy consumption).
                if (this.energilTime > 0)
                {
                    if (this.fatigueV == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        energil = 3;
                        this.energilTime -= 1;
                    }
                    else if (this.energilV == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 0;
                        this.energilTime -= 1;
                    }
                    else if (this.fatigueIV == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 2.5;
                        this.energilTime -= 1;
                    }
                    else if (this.energilIV == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 0.2;
                        this.energilTime -= 1;
                    }
                    else if (this.fatigueIII == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 2;
                        this.energilTime -= 1;
                    }
                    else if (this.energilIII == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 0.4;
                        this.energilTime -= 1;
                    }
                    if (this.fatigueII == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 1.5;
                        this.energilTime -= 1;
                    }
                    if (this.energilII == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 0.6;
                        this.energilTime -= 1;
                    }
                    else if (this.fatigueI == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        //Take away health
                        energil = 1.2;
                        this.energilTime -= 1;
                    }
                    else if (this.energilI == true && new Date().getTime() - this.timeSinceLastEnergil > 50)
                    {
                        //reset the timer for the poison.
                        this.timeSinceLastEnergil = new Date().getTime();
                        energil = 0.8;
                        this.energilTime -= 1;
                    }
                }
                else
                {
                    energil = 1;
                    this.energilI = false;
                    this.energilII = false;
                    this.energilIII = false;
                    this.energilIV = false;
                    this.energilV = false;
                    this.fatigueI = false;
                    this.fatigueII = false;
                    this.fatigueIII = false;
                    this.fatigueIV = false;
                    this.fatigueV = false;
                }
            };

            this.skillBoost = function()
            {
                //This is the flag setter for dexterity boosts.
                if (this.speedI || this.speedII || this.speedIII || this.speedIV || this.speedV)
                {
                    this.speedBoost = true;
                }
                else
                {
                    if (this.speedBoost == true)
                    {
                        this.dexBoost = 0;
                        this.speedBoost = false;
                    }
                }

                //This applies the boost.
                if (this.speedV == true && new Date().getTime() - this.dexTime < 25000)
                {
                    rapidamente = true;
                }
                else if (this.speedIV == true && new Date().getTime() - this.dexTime < 25000)
                {
                    this.dexBoost = 65;
                }
                else if (this.speedIII == true && new Date().getTime() - this.dexTime < 25000)
                {
                    this.dexBoost = 55;
                }
                if (this.speedII == true && new Date().getTime() - this.dexTime < 25000)
                {
                    this.dexBoost = 45;
                }
                else if (this.speedI == true && new Date().getTime() - this.dexTime < 25000)
                {
                    this.dexBoost = 35;
                }
                else
                {
                    this.dexBoost = false;
                    if (developerRapidamente == false)
                    {
                        rapidamente = false;
                    }

                    this.speedI = false;
                    this.speedII = false;
                    this.speedIII = false;
                    this.speedIV = false;
                    this.speedV = false;
                }
            };
            this.sightSeeing = function()
            {
                if (this.getStealth() >= 50 && this.movingType == 3 || adminShowSight)
                {
                    showSight = true;
                }
                else
                {
                    showSight = false;
                }
            };

            this.poison = function ()
            {
                //This enables the poisoned mini notice if any type of any category of poison is in effect.
                if (this.poisonI == true || this.poisonII == true || this.poisonIII == true || this.poisonIV == true || this.poisonV == true)
                {
                    this.poisoned = true;
                }
                else
                {
                    this.poisoned = false;
                }

                //This section covers all five ranks of the basic type of poison.
                if (this.poisonV == true && new Date().getTime() - this.timeSinceLastPoisoned > 2000)
                {
                    //reset the timer for the poison.
                    this.timeSinceLastPoisoned = new Date().getTime();
                    //Take away health
                    this.health -= Math.max(0, (6 - (this.antiVenom * 2)));
                }
                else if (this.poisonIV == true && new Date().getTime() - this.timeSinceLastPoisoned > 3000)
                {
                    //reset the timer for the poison.
                    this.timeSinceLastPoisoned = new Date().getTime();
                    //Take away health
                    this.health -= Math.max(0, (5 - (this.antiVenom * 2)));
                }
                else if (this.poisonIII == true && new Date().getTime() - this.timeSinceLastPoisoned > 4000)
                {
                    //reset the timer for the poison.
                    this.timeSinceLastPoisoned = new Date().getTime();
                    //Take away health
                    this.health -= Math.max(0, (4 - (this.antiVenom * 2)));
                }
                if (this.poisonII == true && new Date().getTime() - this.timeSinceLastPoisoned > 6000)
                {
                    //reset the timer for the poison.
                    this.timeSinceLastPoisoned = new Date().getTime();
                    //Take away health
                    this.health -= Math.max(0, (3 - (this.antiVenom * 2)));
                }
                else if (this.poisonI == true && new Date().getTime() - this.timeSinceLastPoisoned > 8000)
                {
                    //reset the timer for the poison.
                    this.timeSinceLastPoisoned = new Date().getTime();
                    //Take away health
                    this.health -= Math.max(0, (2 - (this.antiVenom * 2)));
                }

                //gojii berry poison
                if (new Date().getTime() - this.gojiiTimer >= 300000 && new Date().getTime() - this.gojiiTimer < 301000) //was 240000
                {

                    if (this.gojiiVomit == true)
                    {
                        worldItems.push([new Item("vomit", X, Y), 1]);
                        worldItems.push([new Item("vomit", X, Y), 1]);
                        this.hunger = Math.max(0, this.hunger - 48);
                        this.gojiiVomit = false;
                    }
                    this.antiVenom = 0;
                    this.poisonV = true;
                    this.energy = -10;
                    this.will = 0;
                    this.gojiiPoisoned = true;
                }

                //Indigestion (Gassiness)
                if (this.gassinessTime > 0)
                {
                    this.gassiness = true;
                    this.gassinessTime -= 0.005  * (TTD / 16.75);
                    this.gassyCha = -60;
                    if (((this.gassinessTime / 5) * 1000) % 101)
                    {
                        magicList.push(new Magic({ID:"fart"}, true));
                    }
                }
                else
                {
                    this.gassiness = false;
                    this.gassyCha = 0;
                    this.gassinessTime = 0;
                }

                //Cyrinthilim Drug Trip
                if (this.cyrinthilimTime > 0)
                {
                    this.cyrinthilimTrip = true;
                    this.cyrinthilimTime -= 0.005  * (TTD / 16.75);
                    this.health -= 0.0075 * (TTD / 16.75);
                    this.energy += 0.0003  * (TTD / 16.75);
                }
                else
                {
                    this.cyrinthilimTrip = false;
                }

                //Food poisoning
                if (new Date().getTime() - this.timeSinceBadFoodEaten >= 33000 && new Date().getTime() - this.timeSinceBadFoodEaten < 34000)
                {
                    worldItems.push([new Item("vomit", X, Y), 1]);
                    this.hunger = Math.max(0, this.hunger - 24);
                    this.energy -= 3;
                    this.timeSinceBadFoodEaten = 0;
                }

                //Troll poisoning
                if (new Date().getTime() - this.timeSinceRawTrollBlood < 25000)
                {
                    this.emiBoost = 5;
                    this.trollPoisonActive = true; //this triggers the mini notice.
                }
                else
                {
                    if (this.trollPoisonActive == true)
                    {
                        this.emiBoost = 0;
                        this.trollPoisonActive = false;
                    }
                }

                //TODO different types of poisons will get their own seperate categories!
            };

            //Effects Operations
            //major game effects
            this.climateEffects(); //todo add faster dehydration in deserts.
            this.overCucumbered(); //If the player is carrying too much weight the player all of a sudden becomes submersed in invisible cucumbers making it very challenging for him/her to move.
            //minor game effects
            this.sightSeeing();
            this.perfumed();
            this.gutWorm();
            this.fleshMite();
            this.brainMaggot();
            this.alcoholManagement();
            this.stunnedTimer();
            this.poison();
            this.recovery();
            this.skillBoost();
            this.light();
            this.sleepCalculator();
            this.blinder();
        };

        //operations for the stat/variables regarding the characters skills and leveling
        this.skillOperations = function()
        {
            //basic skills
            this.doLeveling();
            this.setBaseStats();
        };

        //SKILL BACKUP FUNCTIONS (these functions will allow base skills to be adjusted while retaining the original value of the skill)
        //this function sets endurance to itself if not in the instant regeneration developer mode otherwise it sets it to 58.333
        this.getEndurance = function()
        {
            if (energyDrink == true) //Increases energy instantly but decreases health at about - 1 per every four seconds.
            {
                //If developerMode "instantRegeneration" is on the players endurance will rise to the highest possible point without breaking
                return 58.333;
            }
            else if (quickRegeneration == true) //Increases Both health and energy Quickly, but health much more quickly than energy.
            {
                return 53.555;
            }
            else if (this.gojiiPoisoned == true)
            {
                return Math.max(0, (this.endurance + this.AdEndurance) / 2);
            }
            else // returns the normal amount.
            {
                return Math.max(0, Math.min(this.endurance + this.AdEndurance, 53.555));
            }
        };
        this.getStrength = function()
        {
            if (incredibleHulk == true) //increases strength a lot!!!
            {
                //If developerMode "incredibleHulk" is on the players strength will be ten times the normal maximum.
                return 500;
            }
            else if (this.gojiiPoisoned == true)
            {
                return Math.max(0, (this.strength + this.AdStrength) / 2);
            }
            else // returns the normal amount.
            {
                return Math.max(0, (this.strength + this.AdStrength));
            }
        };
        this.getConstitution = function()
        {
            if (incredibleHulk == true) //increases health a lot!!!
            {
                //If developerMode "incredibleHulk" is on the players constitution will be five times its normal maximum.
                return 250;
            }
            else // returns the normal amount.
            {
                return Math.max(0, (this.constitution + this.AdConstitution));
            }
        };
        this.getDexterity = function()
        {
            if (rapidamente == true)
            {
                return 350;
            }
            else if (this.gojiiPoisoned == true) //increases health a lot!!!
            {
                //If developerMode "incredibleHulk" is on the players constitution will be five times its normal maximum.
                return Math.max(0, Math.min(86, (this.dexterity + this.AdDexterity + this.dexBoost) / 12));
            }
            else if (this.frozen == true)
            {
                return Math.max(0, Math.min(86, (this.dexterity + this.AdDexterity + this.dexBoost) / 10));
            }
            else // returns the normal amount.
            {
                return Math.max(0, Math.min(86, (this.dexterity + this.AdDexterity + this.dexBoost)));
            }
        };

        this.getStamina = function()
        {
            return (Math.max(0, this.stamina + this.AdStamina));
        };

        this.getToughness = function()
        {
            return (Math.max(0, this.toughness + this.AdToughness));
        };

        this.getRanged = function()
        {
            return (Math.max(0, this.ranged + this.AdRanged));
        };

        this.getStealth = function()
        {
            return (Math.max(0, this.stealth + this.AdStealth + this.gassyCha));
        };

        this.getIntelligence = function()
        {
            return (Math.max(0, this.intelligence + this.AdIntelligence));
        };

        this.getCharisma = function()
        {
            return (Math.max(0, Math.min(50, this.charisma + this.AdCharisma + this.gassyCha + this.perfumeCHA)));
        };

        this.getWillpower = function()
        {
            return (Math.max(0, this.willpower + this.AdWillpower));
        };

        this.getConcentration = function()
        {
            return (Math.max(0, this.concentration + this.AdConcentration));
        };

        this.getMemory = function()
        {
            return (Math.max(0, this.memory + this.AdMemory));
        };

        this.getEminence = function()
        {
            return (Math.max(0, this.eminence + this.AdEminence + this.emiBoost));
        };

        this.getKnowledge = function()
        {
            return (Math.max(0, this.knowledge + this.AdKnowledge));
        };

        //MINI NOTICES
        //THIS IS DAD's example of how to make a miniNotice bar

        //this.notices = [];
        //
        //this.addNotice( name )
        //{
        //    if (name in notices)
        //        return;
        //    notices.push( name );
        //};
        //this.removeNotice( name )
        //{
        //    var pos = notices.indexOf( name );
        //    if (pos != -1)
        //        notices.splice( pos, 1 );
        //};

        this.miniNoticeList = [];

        this.addNotice = function (name)
        {
            var positionInNoticeList = this.miniNoticeList.indexOf(name);
            if (positionInNoticeList in this.miniNoticeList)
            {
                return;
            }
            else
            {
                this.miniNoticeList.push(name);
                positionInNoticeList = this.miniNoticeList.indexOf(name);
            }
        };

        this.removeNotice = function (name)
        {
            var positionInNoticeList = this.miniNoticeList.indexOf(name); //This looks through the mini notice list and finds the position of the object you are looking for.
            if (positionInNoticeList != -1) //if it is not equal to negative one, which is the return when something is not in a list...
            {
                //then remove it from the list
                this.miniNoticeList.splice(positionInNoticeList, 1);
            }
        };

        this.arrangeNotices = function(name)
        {
            var positionInNoticeList = this.miniNoticeList.indexOf(name);
            for (var i = 0; i < this.miniNoticeList.length; i++)
            {
                if (i == positionInNoticeList)
                {
                    return (1 + (21 * i));
                }
            }
        };

        this.showNoticeName = function()
        {
            if (mouseY > 413 && mouseY < 413 + 20)
            {
                for (var i = 0; i < this.miniNoticeList.length; i++)
                {
                    //this lets the player see the name of the effect that is affecting them.
                    if (mouseX >= (1 + (21 * i)) && mouseX <= (1 + (21 * i)) + 20)
                    {
                        XXX.textAlign = "left";
                        if (timeOfDay == "Day" && this.underground != true)
                        {
                            XXX.fillStyle = "black";
                        }
                        else
                        {
                            XXX.fillStyle = "white";
                        }
                        XXX.font = "bold 22px Book Antiqua";
                        XXX.fillText(this.miniNoticeList[i], 1, 407);
                    }
                }
            }
        };

        //FREEZING Notice Function
        this.freezingChecker = function()
        {
            if (this.freezing == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.

                this.addNotice("Freezing");
                //blue background
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 255, 255, 1)";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Freezing"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                //white cover layer that fades away as warmth gos away
                var trans = Math.max(0.15, Math.min(1, this.warmth / 50)); // this is how faded the white layer should be.
                XXX.beginPath();
                XXX.fillStyle = "rgba(65, 105, 225, " + trans + ")";
                XXX.rect(this.arrangeNotices("Freezing"), 413, 20, 20);
                XXX.fill();
                XXX.drawImage(polyPNG, 207, 7, 13, 12, this.arrangeNotices("Freezing") + 1, 415, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Freezing");
            }
        };

        //Starvation Notice Function
        this.starvationChecker = function()
        {
            if (this.hunger <= 5)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Starvation");
                //red background
                XXX.beginPath();
                XXX.fillStyle = "red";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Starvation"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(freeverse, 582, 54, 17, 21, this.arrangeNotices("Starvation"), 412.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Starvation");
            }
        };

        //Sleep Deprivation Notice Function
        this.deprivationChecker = function()
        {
            if (this.sleep <= 0)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Sleep Deprivation");
                //red background
                XXX.beginPath();
                XXX.fillStyle = "#000080";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Sleep Deprivation"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(freeverse, 625, 59, 19, 18, this.arrangeNotices("Sleep Deprivation"), 412.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Sleep Deprivation");
            }
        };

        //Brain Maggots Notice Function
        this.brainMaggotsChecker = function()
        {
            if (this.brainMaggots == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Brain Maggots");
                //red background
                XXX.beginPath();
                XXX.fillStyle = "#BAA0A1";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Brain Maggots"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(poly, 211, 114, 23, 20, this.arrangeNotices("Brain Maggots"), 412.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Brain Maggots");
            }
        };

        //Insomnia Notice Function
        this.insomniaChecker = function()
        {
            if (this.insomnia == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Insomnia");
                //red background
                XXX.beginPath();
                XXX.fillStyle = "black";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Insomnia"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(candlewic, 14, 32, 10, 9, this.arrangeNotices("Insomnia") + 4, 417, 12.5, 11);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Insomnia");
            }
        };

        //Dehydration Notice Function
        this.dehydrationChecker = function()
        {
            if (this.thirst <= 0)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Dehydrated");
                //tan background
                XXX.beginPath();
                XXX.fillStyle = "tan";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Dehydrated"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(freeverse, 603, 54, 20, 21, this.arrangeNotices("Dehydrated"), 413.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Dehydrated");
            }
        };

        //Quenched Notice Function
        this.quenchedChecker = function()
        {
            if (this.quenched)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Quenched");
                //light blue background
                XXX.beginPath();
                XXX.fillStyle = "lightBLue";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Quenched"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 220, 8, 9, 10, this.arrangeNotices("Quenched"), 413.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Quenched");
            }
        };

        //Stunned Notice Function
        this.stunnedChecker = function()
        {
            if (this.stunned == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.

                this.addNotice("Stunned");
                //lightish yellowish background
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 236, 139, 1)";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Stunned"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polypol, 1555, 2, 22, 27, this.arrangeNotices("Stunned"), 413.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Stunned");
            }
        };

        //fleshMites Notice Function
        this.fleshMights = function()
        {
            if (this.fleshMites == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Flesh Mites");
                //reddish background
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 127, 80, 1)";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Flesh Mites"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polypol, 1586, 5, 19, 16, this.arrangeNotices("Flesh Mites"), 413.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Flesh Mites");
            }
        };

        //Gassiness Notice Function
        this.indigestionChecker = function()
        {
            if (this.gassiness == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Gassiness");
                //reddish background
                XXX.beginPath();
                XXX.fillStyle = "brown";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Gassiness"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(oldverse, 1821, 179, 48, 35, this.arrangeNotices("Gassiness"), 413.5, 20, 18);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Gassiness");
            }
        };

        //Gut Worms Notice Function
        this.gutWormsChecker = function ()
        {
            if (this.gutWorms == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Gut Worms");
                //pinkish gut-like background colour.
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 255, 255, 1)";
                XXX.rect(this.arrangeNotices("Gut Worms"), 413, 20, 20);
                XXX.fill();

                //pinkish gut-like background colour.
                XXX.beginPath();
                XXX.fillStyle = "rgba(233, 150, 122, 0.4)";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Gut Worms"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 5, 716, 18, 16, this.arrangeNotices("Gut Worms") + 0, 414, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Gut Worms");
            }
        };
        //RECOVERY Notice Function
        this.recoveredChecker = function ()
        {
            if (this.recovered == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Recovery");
                //the background
                XXX.beginPath();
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.fillStyle = "lightGreen";
                XXX.rect(this.arrangeNotices("Recovery"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                //the image
                XXX.drawImage(polyPNG, 36, 26, 13, 11, this.arrangeNotices("Recovery") - 0.75, 413, 21, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Recovery");
            }
        };

        //ENERGIZED Notice Function
        this.energizedChecker = function ()
        {
            if (this.energized == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Energized");
                //the background
                XXX.beginPath();
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.fillStyle = "#ffff99";
                XXX.rect(this.arrangeNotices("Energized"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                //the image
                XXX.drawImage(polyPNG, 63, 25, 13, 14, this.arrangeNotices("Energized") - 1.525, 413, 24, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Energized");
            }
        };

        //SPEED BOOST Notice Function
        this.speedBoostChecker = function ()
        {
            if (this.speedBoost == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Quickness");
                //the background
                XXX.beginPath();
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.fillStyle = "#cca400";
                XXX.rect(this.arrangeNotices("Quickness"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                //the image
                XXX.drawImage(polyPNG, 77, 27, 13, 13, this.arrangeNotices("Quickness") - 0.5, 413, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Quickness");
            }
        };

        //TROLL POISON Notice Function
        this.trollPoisonChecker = function ()
        {
            if (this.trollPoisonActive == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Troll Poison");
                //the background
                XXX.beginPath();
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.fillStyle = "#d9ff66";
                XXX.rect(this.arrangeNotices("Troll Poison"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                //the image
                XXX.drawImage(polyPNG, 16, 24, 18, 16, this.arrangeNotices("Troll Poison") - 0.70, 414.3, 19.8, 17.6);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Troll Poison");
            }
        };
        //HINDERANCE Notice Function
        this.hinderanceChecker = function ()
        {
            if (this.hinderance == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Hinderance");
                XXX.beginPath();
                XXX.fillStyle = "slategrey";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Hinderance"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 232, 5, 17, 14, this.arrangeNotices("Hinderance") - 0.6, 414, 21.25, 17.5);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Hinderance");
            }
        };

        this.poisonedChecker = function ()
        {
            if (this.poisoned == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Poisoned");
                XXX.beginPath();
                XXX.fillStyle = "darkseagreen";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Poisoned"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 5, 1, 21, 18, this.arrangeNotices("Poisoned") + 0.25, 413.75, 21, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Poisoned");
            }
        };

        this.tirelessnessChecker = function ()
        {
            if (energil < 1)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Tirelessness");
                XXX.beginPath();
                XXX.fillStyle = "#FF82AB";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Tirelessness"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 77, 27, 13, 13, this.arrangeNotices("Tirelessness") - 0.5, 413, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Tirelessness");
            }
        };

        this.fatigueChecker = function ()
        {
            if (energil > 1)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.
                this.addNotice("Fatigue");
                XXX.beginPath();
                XXX.fillStyle = "#B0C4DE";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Fatigue"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polypol, 1555, 2, 22, 27, this.arrangeNotices("Fatigue"), 413.5, 20, 20);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Fatigue");
            }
        };

        //SATIATION Notice Function
        this.satiationChecker = function ()
        {
            if (this.satiated == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.

                this.addNotice("Satiation");
                XXX.beginPath();
                XXX.fillStyle = "darkOrange";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Satiation"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 124, 6, 17, 19, this.arrangeNotices("Satiation"), 413, 17, 19);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Satiation");
            }
        };

        //SATIATION Notice Function
        this.perfumedChecker = function ()
        {
            if (this.perfume != "none")
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.

                this.addNotice("Perfumed");
                XXX.beginPath();
                XXX.fillStyle = "pink";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Perfumed"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(poly, 57, 50, 8, 8, this.arrangeNotices("Perfumed") + 1.25, 415, 16, 16);
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Perfumed");
            }
        };

        //SEEN BY TARGET Notice Function (noticed by any AI unit)
        this.noticedChecker = function ()
        {
            var hits = 0;
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (ArtificialIntelligenceAccess[i].playerSeen == true)
                {
                    hits += 1;
                }
            }
            if (hits > 0)
            {
                this.noticed = true;
            }
            else
            {
                this.noticed = false;
            }

            if (this.noticed == true)
            {
                // at this point the slot should be consistent so it should not have to check again to be entered into a position on the miniNoticeList.

                this.addNotice("Noticed");
                XXX.beginPath();
                XXX.fillStyle = "darkGrey";
                XXX.lineWidth = 1;
                XXX.strokeStyle = "black";
                XXX.rect(this.arrangeNotices("Noticed"), 413, 20, 20);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 28, 8, 52, 14, this.arrangeNotices("Noticed"), 420, 27 * 0.7, 7 * 0.7); // main Y + 7 :: main X + 0
            }
            else
            {
                //at this point the slot will have been cleared so next time the effect shows up it should have to check again to be entered into a position on the miniNoticeList.
                this.removeNotice("Noticed");
            }
        };

        //Mini Notice Operations Function
        this.miniNotices = function ()
        {
            this.arrangeNotices();
            this.noticedChecker();
            this.perfumedChecker();
            this.brainMaggotsChecker();
            this.satiationChecker();
            this.freezingChecker();
            this.hinderanceChecker();
            this.stunnedChecker();
            this.gutWormsChecker();
            this.fleshMights();
            this.poisonedChecker();
            this.recoveredChecker();
            this.trollPoisonChecker();
            this.energizedChecker();
            this.speedBoostChecker();
            this.starvationChecker();
            this.dehydrationChecker();
            this.quenchedChecker();
            this.indigestionChecker();
            this.tirelessnessChecker();
            this.fatigueChecker();
            this.deprivationChecker();
            this.insomniaChecker();
        };

        //MOVEMENT ANIMATION
        //walking, running, sneaking, etc.
        this.movement = function ()
        {
            // self = this because apparently you can not use this in a setTimeout which I needed to use to pace the walking animation speed.
            var self = this;

            // if the player is standing, the player's legs are not moving or changing.
            //STANDING
            if (this.movingType == 0)
            {
                this.lLegY = 0;
                this.rLegY = 0;
            }

            // if the player is walking backwards then the player's legs move back and forth to simulate walking backwards.
            //BACKWALKING
            if (this.movingType == 4)
            {
                // the left leg goes back 25 pixles and the right goes forward 25.
                if (this.lLegY > -23 && this.legSwitch == 0)
                {
                    // this makes the legs extend
                    self.lLegY -= 1 * TTD / (16.75 - (0.17 / 4 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    self.rLegY += 1 * TTD / (16.75 - (0.17 / 4 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    //switch to the right leg forward routine.
                    this.legSwitch = 1;
                }

                // the right leg goes back 25 pixles and the left goes forward 25.
                if (this.lLegY < 23 && this.legSwitch == 1)
                {
                    // this makes the legs extend
                    self.lLegY += 1 * TTD / (16.75 - (0.17 / 4 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    self.rLegY -= 1 * TTD / (16.75 - (0.17 / 4 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    // switch to the left leg forward routine.
                    this.legSwitch = 0;
                }
            }

            // if the player is walking then the player's legs move back and forth to simulate walking.
            //WALKING
            if (rapidamente == true)
            {
                if (this.lLegY < 27 && this.legSwitch == 0)
                {
                    // this makes the legs extend
                    self.lLegY += 1 * TTD / (12.35 - (0.25 / 2 * 86));
                    self.rLegY -= 1 * TTD / (12.35 - (0.25 / 2 * 86));
                }
                else
                {
                    // switch to the left leg forward routine.
                    this.legSwitch = 1;
                }

                if (this.lLegY > -27 && this.legSwitch == 1)
                {
                    // this makes the legs extend
                    self.lLegY -= 1 * TTD / (12.35 - (0.25 / 2 * 86));
                    self.rLegY += 1 * TTD / (12.35 - (0.25 / 2 * 86));
                }
                else
                {
                    // switch to the left leg forward routine.
                    this.legSwitch = 0;
                }
            }
            else if (this.movingType == 1)
            {
                // the right leg goes back 25 pixles and the left goes forward 25.
                if (this.lLegY < 23 && this.legSwitch == 0)
                {
                    // this makes the legs extend
                    self.lLegY += 1 * TTD / (16.75 - (0.17 / 2 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    self.rLegY -= 1 * TTD / (16.75 - (0.17 / 2 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    //switch to the right leg forward routine.
                    this.legSwitch = 1;
                }

                // the left leg goes back 25 pixles and the right goes forward 25.
                if (this.lLegY > -23 && this.legSwitch == 1)
                {
                    // this makes the legs extend
                    self.lLegY -= 1 * TTD / (16.75 - (0.17 / 2 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    self.rLegY += 1 * TTD / (16.75 - (0.17 / 2 * this.getDexterity())); // 0.17 subtracted from the DT stabilizer is to make the walking animation speed as dexterity is increased.
                    //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    // switch to the left leg forward routine.
                    this.legSwitch = 0;
                }
            }

            //RUNNING
            //You can only run if you have the energy...

            if (this.movingType == 2)
            {
                // the right leg goes back 25 pixles and the left goes forward 25.
                if (this.lLegY < 27 && this.legSwitch == 0)
                {
                    // this makes the legs extend
                    self.lLegY += 1 * TTD / (12.35 - (0.25 / 2 * this.getDexterity())); // 0.25 subtracted from the DT stabilizer is to make the running animation speed as dexterity is increased.
                    self.rLegY -= 1 * TTD / (12.35 - (0.25 / 2 * this.getDexterity())); // 0.25 subtracted from the DT stabilizer is to make the running animation speed as dexterity is increased.
                    //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    //switch to the right leg forward routine.
                    this.legSwitch = 1;
                }

                // the left leg goes back 25 pixles and the right goes forward 25.
                if (this.lLegY > -27 && this.legSwitch == 1)
                {
                    // this makes the legs extend
                    self.lLegY -= 1 * TTD / (12.35 - (0.25 / 2 * this.getDexterity())); // 0.25 subtracted from the DT stabilizer is to make the running animation speed as dexterity is increased.
                    self.rLegY += 1 * TTD / (12.35 - (0.25 / 2 * this.getDexterity())); // 0.25 subtracted from the DT stabilizer is to make the running animation speed as dexterity is increased.
                    //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    // switch to the left leg forward routine.
                    this.legSwitch = 0;
                }
            }
            //SNEAKING
            if (this.movingType == 3)
            {
                // the right leg goes back 25 pixles and the left goes forward 25.
                if (this.lLegY < 15 && this.legSwitch == 0)
                {
                    // this makes the legs extend
                    self.lLegY += 1 * TTD / (50.75 - (0.3 / 2 * this.getDexterity())); // 0.3 subtracted from the DT stabilizer is to make the sneaking animation speed as dexterity is increased.
                    self.rLegY -= 1 * TTD / (50.75 - (0.3 / 2 * this.getDexterity())); // 0.3 subtracted from the DT stabilizer is to make the sneaking animation speed as dexterity is increased.
                    //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    //switch to the right leg forward routine.
                    this.legSwitch = 1;
                }

                // the left leg goes back 25 pixles and the right goes forward 25.
                if (this.lLegY > -15 && this.legSwitch == 1)
                {
                    // this makes the legs extend
                    self.lLegY -= 1 * TTD / (50.75 - (0.3 / 2 * this.getDexterity())); // 0.3 subtracted from the DT stabilizer is to make the sneaking animation speed as dexterity is increased.
                    self.rLegY += 1 * TTD / (50.75 - (0.3 / 2 * this.getDexterity())); // 0.3 subtracted from the DT stabilizer is to make the sneaking animation speed as dexterity is increased.
                    //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                }
                else
                {
                    // switch to the left leg forward routine.
                    this.legSwitch = 0;
                }
            }
        };
        //DRAW SELF STUFF
        //to put it simply, this function draws two lines that represent the main character's legs.
        this.drawLegs = function ()
        {
            XXX.save();
            XXX.translate(700, 275);
            XXX.rotate(this.rotation);
            XXX.strokeStyle = "black";
            XXX.lineWidth = 2;
            XXX.moveTo(-4, 0);
            XXX.lineTo(-4, 0 + this.lLegY);
            XXX.stroke();
            XXX.moveTo(4, 0);
            XXX.lineTo(4, 0 + this.rLegY);
            XXX.stroke();
            XXX.restore();
            //console.log(this.lLegY + " is this.lLegY, " + this.rLegY + " is this.rLegY, " + this.movingType + " is this.movingType")
        };

        //this function draws a circle the color of the character's race with a black border line around it, this acts as the main characters body.
        this.drawBody = function ()
        {
            XXX.save();
            XXX.translate(this.myScreenX, this.myScreenY); //Translate resets the coordinates to the arguements mentioned (x, y).
            XXX.rotate(this.rotation);
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.arc(0, 0, this.mySize, 0, 2 * Math.PI);
            XXX.strokeStyle = "black";
            XXX.fillStyle = this.race;
            XXX.stroke();
            XXX.fill();
            XXX.restore();
        };

        this.drawOutfit = function ()
        {
            //this.outfitEquipped = "walrusLeatherArmour";
            //Stat Determination
            //OUTFIT
            var outfit;
            if (this.outfitEquipped == "walrusLeatherArmour")
            {
                outfit = allWorn[1];
            }
            else if (this.outfitEquipped == "gulfreyShellArmour")
            {
                outfit = allWorn[2];
            }
            else if (this.outfitEquipped == "blackChainArmour")
            {
                outfit = allWorn[3];
            }
            else if (this.outfitEquipped == "chainArmour")
            {
                outfit = allWorn[4];
            }
            else if (this.outfitEquipped == "freydicRoyalDress")
            {
                outfit = allWorn[5];
            }
            else if (this.outfitEquipped == "winterWolfDress")
            {
                outfit = allWorn[6];
            }
            else if (this.outfitEquipped == "naapridLeatherArmour")
            {
                outfit = allWorn[7];
            }
            else if (this.outfitEquipped == "freydicRoyalOutfit")
            {
                outfit = allWorn[8];
            }
            else if (this.outfitEquipped == "winterWolfOutfit")
            {
                outfit = allWorn[9];
            }
            else if (this.outfitEquipped == "winterWolfClothing")
            {
                outfit = allWorn[10];
            }
            else if (this.outfitEquipped == "hetmerArmour")
            {
                outfit = allWorn[11];
            }
            else if (this.outfitEquipped == "frichFurClothing")
            {
                outfit = allWorn[12];
            }
            else if (this.outfitEquipped == "varnFurClothing")
            {
                outfit = allWorn[13];
            }
            else if (this.outfitEquipped == "varnFurCloak")
            {
                outfit = allWorn[14];
            }
            else if (this.outfitEquipped == "varnFurDress")
            {
                outfit = allWorn[15];
            }
            else if (this.outfitEquipped == "jvostranPlateArmour")
            {
                outfit = allWorn[17];
            }
            else if (this.outfitEquipped == "grushFurClothing")
            {
                outfit = allWorn[18];
            }
            else if (this.outfitEquipped == "balgurMercArmour")
            {
                outfit = allWorn[19];
            }
            else if (this.outfitEquipped == "balgurCaptainArmour")
            {
                outfit = allWorn[20];
            }
            else
            {
                outfit = allWorn[0];
            }

            var gloves;

            if (this.glovesEquipped == "frichFurMittens")
            {
                gloves = allWorn[16];
            }
            else
            {
                gloves = allWorn[0];
            }

            var necklace;

            if (this.necklaceEquipped == "berulnToothNecklace")
            {
                necklace = allWorn[21];
            }
            else
            {
                necklace = allWorn[0];
            }

            this.outfitType = outfit;
            this.glovesType = gloves;
            this.necklaceType = necklace;
            //TODO add ring.
            //TODO add boots.

            this.armour = outfit.protection + gloves.protection + necklace.protection; //TODO add ring, pendant, and boot's stats to all of the stats as well.
            this.magicalResistance = outfit.magicalProtection + gloves.magicalProtection + necklace.magicalProtection;
            this.warmthProtection = outfit.warmthRetention + gloves.warmthRetention + necklace.warmthRetention;
            this.heatResistance = outfit.thirstRetention + gloves.thirstRetention + necklace.thirstRetention;
            //Main Stat Bonuses
            this.AdStrength = outfit.strengthBonus + gloves.strengthBonus + necklace.strengthBonus;
            this.AdEndurance = outfit.enduranceBonus + gloves.enduranceBonus + necklace.enduranceBonus;
            this.AdToughness = outfit.toughnessBonus + gloves.toughnessBonus + necklace.toughnessBonus;
            this.AdIntelligence = outfit.intelligenceBonus + gloves.intelligenceBonus + necklace.intelligenceBonus;
            this.AdCharisma = outfit.charismaBonus + gloves.charismaBonus + necklace.charismaBonus;
            this.AdRanged = outfit.rangedBonus + gloves.rangedBonus + necklace.rangedBonus;
            this.AdConstitution = outfit.constitutionBonus + gloves.constitutionBonus + necklace.constitutionBonus;
            this.AdStamina = outfit.staminaBonus + gloves.staminaBonus + necklace.staminaBonus;
            this.AdDexterity = outfit.dexterityBonus + gloves.dexterityBonus + necklace.dexterityBonus;
            this.AdStealth = outfit.stealthBonus + gloves.stealthBonus + necklace.stealthBonus;
            //Extra Stat Bonuses
            this.AdSleep = outfit.sleepBonus + gloves.sleepBonus + necklace.sleepBonus;
            this.hungerMAX = this.hungerMAX + outfit.hungerBonus + gloves.hungerBonus + necklace.hungerBonus;
            this.thirstMAX = this.thirstMAX + outfit.thirstBonus + gloves.thirstBonus + necklace.thirstBonus;
            this.warmthMAX = this.warmthMAX + outfit.warmthBonus + gloves.warmthBonus + necklace.warmthBonus;
            //Magical Stat Bonuses
            this.AdEminence = outfit.eminenceBonus + gloves.eminenceBonus + necklace.eminenceBonus;
            this.AdWillpower = outfit.willpowerBonus + gloves.willpowerBonus + necklace.willpowerBonus;
            this.AdKnowledge = outfit.knowledgeBonus + gloves.knowledgeBonus + necklace.knowledgeBonus;
            this.AdConcentration = outfit.concentrationBonus + gloves.concentrationBonus + necklace.concentrationBonus;
            this.AdMemory = outfit.memoryBonus + gloves.memoryBonus + necklace.memoryBonus;

            if (this.getToughness() < outfit.toughnessRequirement)
            {
                this.unskilledUse = true;
            }
            else
            {
                this.unskilledUse = false;
            }

            //DRAW OUTFIT
            if (this.outfitEquipped == "walrusLeatherArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                XXX.drawImage(polyPNG, 804, 262, 35, 24, -(1 / 2 * 45.5) + 8, -(1 / 2 * 31.2) + 1.25, 42, 28.8);
                XXX.restore();
            }
            else if (this.outfitEquipped == "gulfreyShellArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                XXX.drawImage(oldverse, 44, 89, 51, 35, -(1 / 2 * 40.8) + 6.3, -(1 / 2 * 28) - 0.5, 45.9, 31.5);
                XXX.restore();
            }
            else if (this.outfitEquipped == "jvostranPlateArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                XXX.drawImage(verse, 508, 659, 40, 39, -(1 / 2 * 40 * 0.8) + 2, -(1 / 2 * 39 * 0.8) + 0, 40 * 0.8, 39 * 0.8);
                XXX.restore();
            }
            else if (this.outfitEquipped == "blackChainArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 1948, 1, 31, 27, -(1 / 2 * 26) - 0.3, -(1 / 2 * 27) + 1.5, 27, 27);
                XXX.restore();
            }
            else if (this.outfitEquipped == "chainArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 1915, 1, 31, 27, -(1 / 2 * 26) - 1.3, -(1 / 2 * 27) + 1.5, 27, 27);
                XXX.restore();
            }
            else if (this.outfitEquipped == "freydicRoyalDress")
            {
                this.outfitZ = false;
                if (this.movingType == 0 || this.movingType == 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3141, 206, 38, 42, -(1 / 2 * 38) + 0.3, -(1 / 2 * 42) + 4.3, 38, 42);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3182, 206, 38, 42, -(1 / 2 * 38) + 0.3, -(1 / 2 * 42) + 5.3, 38, 42);
                    XXX.restore();
                }
            }
            else if (this.outfitEquipped == "winterWolfDress")
            {
                this.outfitZ = false;
                if (this.movingType == 0 || this.movingType == 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3044, 208, 38, 42, -(1 / 2 * 38) + 0.3, -(1 / 2 * 42) + 8.8, 38, 42);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3003, 208, 38, 42, -(1 / 2 * 38) + 0.3, -(1 / 2 * 42) + 7.8, 38, 42);
                    XXX.restore();
                }
            }
            else if (this.outfitEquipped == "naapridLeatherArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 3062, 1, 35, 22, -(1 / 2 * 49) + 0.5, -(1 / 2 * 30.8) + 2.25, 49, 30.8);
                XXX.restore();
            }
            else if (this.outfitEquipped == "balgurMercArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation - (Math.PI));
                XXX.drawImage(poly, 48, 106, 40, 32, -(1 / 2 * 40 * 1.2) - 3.65, -(1 / 2 * 32 * 1.2) -18.25, 40 * 1.38, 32 * 1.73);
                XXX.restore();
            }
            else if (this.outfitEquipped == "balgurCaptainArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation - (Math.PI));
                XXX.drawImage(poly, 50, 140, 36, 36, -(1 / 2 * 36 * 1.2) + 5, -(1 / 2 * 36 * 1.2) -9.5, 36 * 0.9, 36 * 1.45);
                XXX.restore();
            }
            else if (this.outfitEquipped == "grushFurClothing")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                XXX.drawImage(mofu, 1200, 68, 26, 27, -(1 / 2 * 26 * 1.22) - 0.75, -(1 / 2 * 27 * 1.2) + 1.2, 26 * 1.22, 27 * 1.2);
                XXX.restore();
            }
            else if (this.outfitEquipped == "freydicRoyalOutfit")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 3084, 155, 36, 37, -(1 / 2 * 54) + 5, -(1 / 2 * 55.5) - 0.75, 46.8, 48.1);
                XXX.restore();
            }
            else if (this.outfitEquipped == "winterWolfOutfit")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 3099, 208, 28, 25, -(1 / 2 * 33.6) + 0, -(1 / 2 * 30) - 0.75, 33.6, 30);
                XXX.restore();
            }
            else if (this.outfitEquipped == "winterWolfClothing")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 3185, 165, 33, 28, -(1 / 2 * 26.4) + 0, -(1 / 2 * 22.4) - 0.75, 29.7, 25.2);
                XXX.restore();
            }
            else if (this.outfitEquipped == "hetmerArmour")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                XXX.drawImage(polyPNG, 792, 308, 52, 48, -(1 / 2 * 62.4) + 0, -(1 / 2 * 57.6) - 2.5, 67.6, 62.4);
                XXX.restore();
            }
            else if (this.outfitEquipped == "frichFurClothing")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2106, 5, 29, 24, -(1 / 2 * 29) + 1.75, -(1 / 2 * 24) - 0, 26, 26);
                XXX.restore();
            }
            else if (this.outfitEquipped == "varnFurClothing" || this.outfitEquipped == "varnFurCloak")
            {
                this.outfitZ = true;
                XXX.save();
                XXX.translate(this.myScreenX, this.myScreenY);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2140, 29, 25, 20, -(1 / 2 * 25) - 1.75, -(1 / 2 * 20) - 4, 31, 27.2);
                XXX.restore();
            }
            else if (this.outfitEquipped == "varnFurDress")
            {
                this.outfitZ = false;
                if (this.movingType == 0 || this.movingType == 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 7, 436, 34, 32, -(1 / 2 * 68) + 20, -(1 / 2 * 64) + 18.3, 27.2, 26.6);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3, 390, 43, 43, -(1 / 2 * 86) + 26, -(1 / 2 * 86) + 27.3, 34.4, 40);
                    XXX.restore();
                }
            }
        };

        //This draws the arms either equipped with weaponry spells, or bare. Also the animation for the attacks is done here!
        this.drawArms = function ()
        {
            var self = this;

            //ATTACK INITIATOR [this triggers the attack when the player presses the space key]
            if (spaceKey == true)
            {
                if (this.weaponIsRanged == false && (this.weapon.energyCost * energil <= this.energy) && new Date().getTime() - this.attackCooldown >= 10 * this.weapon.rate && this.spell == "none")
                {
                    if (this.attacking == false && this.blocking == false && qKey == false && eKey == false)
                    {
                        this.energy -= this.weapon.energyCost * energil;
                        this.powerAttack = false;
                        this.strike = true;
                        this.cutcut = true; //for an sort of attacking of scenery this allows you to signal that an attack has happened.
                    }
                }
                else if (this.weaponIsRanged == true && this.spell == "none")
                {
                    for (var i = Inventory.length - 1; i > -1; i--)
                    {
                        if (Inventory[i][0].utility == "ammunition" && Inventory[i][0].subUtility == "arrow" && Inventory[i][0].equipped == true && this.rangedWeaponType == "bow")
                        {
                            if (this.attacking != true && this.projectileReleased == true)
                            {
                                if (Inventory[i][1] >= 1 && this.isAmmoEquipped == true)
                                {
                                    Inventory[i][1] -= 1;
                                    this.projectileReleased = false;
                                    this.strike = true;
                                }
                            }
                        }
                        else if (Inventory[i][0].utility == "ammunition" && Inventory[i][0].subUtility == "bolt" && Inventory[i][0].equipped == true && this.rangedWeaponType == "crossbow")
                        {
                            spaceKey = false;
                            if (this.attacking != true)
                            {
                                if (Inventory[i][1] >= 1 && this.ammoLoaded == false)
                                {
                                    Inventory[i][1] -= 1;
                                    this.projectileReleased = false;
                                    this.strike = true;
                                }

                                //console.log("projectile released " + this.projectileReleased + " ammo loaded " + this.ammoLoaded + " attacking " + this.attacking);
                                if (this.ammoLoaded == true)
                                {
                                    this.projectileReleased = true;
                                }
                            }
                        }
                    }
                }
                else if (this.weaponEquipped == "none" && this.spell != "none")
                {
                    if (this.casting == false && this.will >= this.spell.cost && new Date().getTime() - this.castingCooldown >= (this.spell.cooldown * 1000))
                    {
                        this.casting = true;
                        this.will -= this.spell.cost;
                    }
                }
            }
            //BLOCK INITIATOR
            if (qKey == true)
            {
                if (this.weapon.subUtility == "shield" && this.blocking == false)
                {
                    if (this.weapon.blockCost <= this.energy && this.attacking == false && spaceKey == false)
                    {
                        this.energy -= this.weapon.blockCost;
                        this.block = true;
                    }
                }
            }
            //POWER ATTACK INITIATOR
            if (eKey == true)
            {
                if (this.weaponIsRanged == false && (this.weapon.energyCost * 2.5 * energil <= this.energy) && new Date().getTime() - this.attackCooldown >= 25 * this.weapon.rate && this.getStrength() >= 10 && this.spell == "none")
                {
                    if (this.attacking == false && this.blocking == false && qKey == false && spaceKey == false)
                    {
                        this.energy -= (this.weapon.energyCost * 2.5 * energil);
                        this.powerAttack = true;
                        this.strike = true;
                        this.cutcut = true; //for an sort of attacking of scenery this allows you to signal that an attack has happened.
                    }
                }
            }

            if (this.strike == true) //Strike triggers attacking which needs to be on for the entire attack.
            {
                this.strike = false;
                this.attacking = true;
            }

            if (this.block == true) //Strike triggers attacking which needs to be on for the entire attack.
            {
                this.block = false;
                this.blocking = true;
            }

            //STAGE ENGINE [this function allows each type of weapon to cycle through the stages of their attack]
            this.stageEngine = function (maxStage, framerate, bothwaysBool)
            {

                if (self.attacking == true && self.weaponIsRanged == false || self.attacking == true && self.weaponIsRanged == true && self.projectileReleased == false || self.blocking == true || self.casting == true)
                {
                    if (this.resetFrameOrder == true)
                    {
                        this.frameOrder = "positive"; // this sets the animation frame cycling direction to positive when the attack is initialized.
                        this.resetFrameOrder = false; // this keeps the reset from messing up reverse swings that may come after the primary positive direction attack.
                    }
                    if (this.frameOrder == "positive")
                    {
                        if (self.stage >= maxStage) // Once all of the animation stages are completed...
                        {
                            if (bothwaysBool == false) // if the animation is one way it ends here...
                            {
                                if (this.weaponEquipped != "flail")
                                {
                                    self.finalAttackStage = true;
                                    self.attackCooldown = new Date().getTime();
                                }
                                self.attacking = false;
                                self.casting = false;
                                self.stage = 0;
                                this.resetFrameOrder = true; //This variable resets the order of the frames so that it always starts cycling through the animations in the positive direction.
                            }
                            else if (bothwaysBool == true) //but if it is two directional it swings back to frame zero.
                            {
                                self.finalAttackStage = true;
                                self.attackCooldown = new Date().getTime();
                                this.frameOrder = "negative";
                            }
                        }
                        else
                        {
                            if (rapidamente == false)
                            {
                                self.stage += framerate * TTD / (16.75 - (0.1 / 2 * ((this.getDexterity() / 2) + 0.5))); //This is the part that actually changes the frame in the positive direction.
                            }
                            else
                            {
                                self.stage += framerate * TTD / (16.75 - (0.1 / 2 * 25));
                            }
                        }
                    }

                    if (this.frameOrder == "negative") //This stuff is for the swing back.
                    {
                        if (self.stage < 1)
                        {
                            self.attacking = false;
                            self.blocking = false;
                            self.casting = false;
                            self.stage = 0;
                            this.resetFrameOrder = true; //This variable resets the order of the frames so that it always starts cycling through the animations in the positive direction.

                        }
                        else
                        {
                            if (rapidamente == false)
                            {
                                self.stage -= framerate * TTD / (16.75 - (0.1 / 2 * ((this.getDexterity() / 4) + 0.5))); //This is the part that actually changes the frame in the negative direction.
                            }
                            else
                            {
                                self.stage -= framerate * TTD / (16.75 - (0.1 / 2 * 12.5));
                            }
                        }
                    }

                }
            };

            //SECONDARY SPELLS
            var kee = false;
            var keeNum = false;

            if (key1 == true)
            {
                kee = true;
                keeNum = 1;
            }
            else if (key2 == true)
            {
                kee = true;
                keeNum = 2;
            }
            else if (key3 == true)
            {
                kee = true;
                keeNum = 3;
            }
            else if (key4 == true)
            {
                kee = true;
                keeNum = 4;
            }
            else if (key5 == true)
            {
                kee = true;
                keeNum = 5;
            }
            else if (key6 == true)
            {
                kee = true;
                keeNum = 6;
            }
            else if (key7 == true)
            {
                kee = true;
                keeNum = 7;
            }
            else if (key8 == true)
            {
                kee = true;
                keeNum = 8;
            }
            else if (key9 == true)
            {
                kee = true;
                keeNum = 9;
            }

            if (kee == true && gameState != "paused")
            {
                for (var i = 0; i < secondarySpells.length; i++)
                {
                    if (secondarySpells[i].equipped == keeNum)
                    {
                            //Ice Blade Incantation
                        if (secondarySpells[i].ID == "iceClaymore")
                        {
                            if (this.weaponEquipped == "iceBlade" && new Date().getTime() - this.secondaryCastingCooldown >= 500)
                            {
                                this.secondaryCastingCooldown = new Date().getTime();
                                this.weaponEquipped = "none";
                            }
                            else if (this.spell == "none" && this.weaponEquipped == "none" && this.will - secondarySpells[i].cost >= 0 && new Date().getTime() - this.secondaryCastingCooldown >= (secondarySpells[i].cooldown * 1000))
                            {
                                this.secondaryCastingCooldown = new Date().getTime();
                                this.will -= secondarySpells[i].cost;
                                this.magicalExperience += secondarySpells[i].EXP;
                                if (this.getEminence() < 10)
                                {
                                    this.warmth -= 5;
                                }
                                this.weaponEquipped = "iceBlade";
                            }
                        }
                            //Repel
                        if (secondarySpells[i].ID == "repel")
                        {
                            if (new Date().getTime() - this.secondaryCastingCooldown >= (secondarySpells[i].cooldown * 1000) && this.will - secondarySpells[i].cost >= 0)
                            {
                                this.will -= secondarySpells[i].cost;
                                this.magicalExperience += secondarySpells[i].EXP;
                                magicList.push(new Magic({ID: "repel"}, true));
                                this.secondaryCastingCooldown = new Date().getTime();
                            }
                        }
                            //Chasing Lights
                        if (secondarySpells[i].ID == "chasingLights")
                        {
                            if (new Date().getTime() - this.secondaryCastingCooldown >= (secondarySpells[i].cooldown * 1000) && this.will - secondarySpells[i].cost >= 0)
                            {
                                this.will -= secondarySpells[i].cost;
                                this.magicalExperience += secondarySpells[i].EXP;

                                magicList.push(new Magic({ID: "chasingLights"}, true));

                                if (this.getConcentration() > 2)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 4)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 7)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 10)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 15)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 20)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 30)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 40)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }

                                if (this.getConcentration() > 50)
                                {
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                    magicList.push(new Magic({ID: "chasingLights"}, true));
                                }


                                this.secondaryCastingCooldown = new Date().getTime();
                            }
                        }
                            //Life-Tap
                        if (secondarySpells[i].ID == "lifeTap")
                        {
                            if (new Date().getTime() - this.secondaryCastingCooldown >= (secondarySpells[i].cooldown * 1000) && this.will - secondarySpells[i].cost >= 0)
                            {
                                this.will -= secondarySpells[i].cost;
                                this.magicalExperience += secondarySpells[i].EXP;

                                magicList.push(new Magic({ID: "lifeTap"}, true));
                                if (this.willpower == 0 && this.constitution > 0)
                                {
                                    this.willpower += 1;
                                    this.totalMagicPoints += 1;
                                    this.constitution -= 1;
                                    this.totalSkillPoints -= 1;
                                }
                                else
                                {
                                    this.energy -= 6 + 0.6 * this.getConcentration();
                                    this.health -= 6 + 0.6 * this.getConcentration();
                                    this.will += 3 + 0.2 * this.getConcentration();
                                }

                                this.secondaryCastingCooldown = new Date().getTime();
                            }
                        }
                    }
                }
            }
            //SPELL ARMS (Primary Spells: forms)

            //Flying Colors Form
            if (this.spell.ID == "flyingColours")
            {
                this.stageEngine(5, 0.20, true);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1636, 92, 46, 27, -29, -21, 46 * 1.3, 27);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1636, 64, 46, 27, -29, -21, 46 * 1.3, 27);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1636, 35, 46, 27, -29, -21, 46 * 1.3, 27);
                    XXX.restore();
                    this.doMagic = true
                }
                else if (Math.floor(this.stage) >= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1636, 5, 46, 27, -30, -21, 46 * 1.3, 27);
                    XXX.restore();
                    if (this.doMagic)
                    {
                        this.doMagic = false;
                        this.magicalExperience += this.spell.EXP;
                        magicList.push(new Magic(player.spell, true));
                    }
                    this.castingCooldown = new Date().getTime();
                }
            }

            //Vivification Form
            if (this.spell.ID == "vivification")
            {
                this.stageEngine(20, 0.16, false);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 5, 107, 61, 52, -39.5, -30.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 6, 167, 61, 52, -36.5, -35.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 4, 228, 61, 52, -39.5, -38.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 4, 301, 61, 52, -39.5, -33, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 6, 363, 61, 52, -38, -33.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 6, 428, 61, 52, -40.5, -38.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 8, 489, 61, 52, -39.5, -37.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 9, 557, 61, 52, -39.5, -39, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 10, 638, 61, 52, -38.5, -38, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 9)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 10, 707, 61, 52, -39.5, -39, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 10)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 12, 792, 61, 52, -39.1, -38.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 11)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 15, 892, 61, 52, -37.7, -40, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 12)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 139, 416, 61, 52, -37.6, -40, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 13)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 136, 503, 61, 52, -38, -40.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 14)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 133, 592, 61, 52, -40.3, -41, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 15)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 135, 679, 61, 52, -38.8, -41, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                    this.doMagic = true;
                }
                else if (Math.floor(this.stage) <= 16)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 136, 763, 61, 52, -39.5, -30, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 17)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 137, 828, 61, 52, -39.5, -29.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                    if (this.doMagic)
                    {
                        this.doMagic = false;
                        this.magicalExperience += this.spell.EXP;

                        var closerestToPlayz = "catFace";
                        var closerestest = "none";
                        var positionOfCloserest = null;
                        for (var i = 0; i < deadAIList.length; i++)
                        {
                            if (closerestToPlayz == "catFace" || closerestToPlayz > deadAIList[i].DTP())
                            {
                                closerestToPlayz = deadAIList[i].DTP();
                                closerestest = deadAIList[i];
                                positionOfCloserest = i;
                            }
                        }

                        if (closerestToPlayz <= 85)
                        {
                            closerestest.alive = true;
                            closerestest.health = closerestest.healthMAX;
                            closerestest.revived = true;

                            //death variables
                            closerestest.timeSinceDead = 0;
                            closerestest.wasAlive = true;
                            //Humanoid related Variables (for humanlike units only)
                            closerestest.lLegY = 0;
                            closerestest.rLegY = 0;
                            closerestest.legSwitch = 0;
                            closerestest.talking = false; //this notes whether or not the unit is in the middle of saying something in a conversation.
                            //effects variables
                            closerestest.blindedTime = 0;
                            closerestest.blinded = false;
                            closerestest.burningTime = 0;
                            closerestest.burningTime2 = new Date().getTime();
                            closerestest.frozenTime = 0;

                            if (player.getConcentration >= 35)
                            {
                                closerestest.disturbedTime = 0;
                                closerestest.disturbed = false;
                            }

                            ArtificialIntelligenceAccess.push(closerestest);
                            deadAIList.splice(positionOfCloserest, 1);
                        }
                    }
                }
                else if (Math.floor(this.stage) <= 18)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 137, 902, 61, 52, -40.4, -29.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 19)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 139, 946, 61, 52, -39.5, -47.5, 61 * 1.3, 52 * 1.3);
                    XXX.restore();
                    this.castingCooldown = new Date().getTime();
                }

            }

            //Draining Form
            if (this.spell.ID == "drainingI" || this.spell.ID == "drainingII" || this.spell.ID == "drainingIII")
            {
                this.stageEngine(6, 0.20, true);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1867, 296, 36, 31, -22, -30, 36 * 1.2, 31 * 1.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1867, 334, 36, 31, -26, -28, 36 * 1.2, 31 * 1.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1870, 373, 36, 31, -25, -29, 36 * 1.2, 31 * 1.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1872, 409, 36, 31, -25, -27, 36 * 1.2, 31 * 1.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1875, 443, 36, 31, -24, -27, 36 * 1.2, 31 * 1.2);
                    XXX.restore();
                    this.doMagic = true;
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1875, 477, 36, 31, -28, -28, 36 * 1.2, 31 * 1.2);
                    XXX.restore();
                    if (this.doMagic)
                    {
                        this.doMagic = false;
                        this.magicalExperience += this.spell.EXP;
                        magicList.push(new Magic(player.spell, true));
                    }
                    this.castingCooldown = new Date().getTime();
                }
            }

                //Ice Spikes Form
            if (this.spell.ID == "iceSpikes")
            {
                this.stageEngine(7, 0.20, false);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1862, 109, 44, 24, -22, -20, 44, 24);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1864, 141, 44, 24, -22, -20, 44, 24);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1864, 203, 44, 24, -21, -21, 44, 24);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1864, 230, 44, 24, -21, -21, 44, 24);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1865, 172, 44, 24, -21, -21, 44, 24);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1864, 260, 44, 24, -21, -21, 44, 24);
                    XXX.restore();
                    this.doMagic = true;
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1864, 260, 44, 24, -21, -21, 44, 24);
                    XXX.restore();
                    if (this.doMagic)
                    {
                        this.doMagic = false;
                        if (this.getEminence() < 10)
                        {
                            this.warmth -= 5;
                        }
                        this.magicalExperience += this.spell.EXP;

                        if (player.getConcentration() >= 50)
                        {
                            magicList.push(new Magic(player.spell, true, 1));
                            magicList.push(new Magic(player.spell, true, 2));
                            magicList.push(new Magic(player.spell, true, 3));
                            magicList.push(new Magic(player.spell, true, 4));
                            magicList.push(new Magic(player.spell, true, 5));
                            magicList.push(new Magic(player.spell, true, 6));
                            magicList.push(new Magic(player.spell, true, 7));
                        }
                        else if (player.getConcentration() >= 40)
                        {
                            magicList.push(new Magic(player.spell, true, 1));
                            magicList.push(new Magic(player.spell, true, 2));
                            magicList.push(new Magic(player.spell, true, 3));
                            magicList.push(new Magic(player.spell, true, 4));
                            magicList.push(new Magic(player.spell, true, 5));
                        }
                        else if (player.getConcentration() >= 30)
                        {
                            magicList.push(new Magic(player.spell, true, 1));
                            magicList.push(new Magic(player.spell, true, 2));
                            magicList.push(new Magic(player.spell, true, 3));
                            magicList.push(new Magic(player.spell, true, 4));
                        }
                        else if (player.getConcentration() >= 20)
                        {
                            magicList.push(new Magic(player.spell, true, 1));
                            magicList.push(new Magic(player.spell, true, 2));
                            magicList.push(new Magic(player.spell, true, 3));
                        }
                        else if (player.getConcentration() >= 10)
                        {
                            magicList.push(new Magic(player.spell, true, 1));
                            magicList.push(new Magic(player.spell, true, 2));
                        }
                        else
                        {
                            magicList.push(new Magic(player.spell, true, 1));
                        }

                    }
                    this.castingCooldown = new Date().getTime();
                }
            }

                //Fireball Form
            if (this.spell.ID == "fireballI" || this.spell.ID == "fireballII" || this.spell.ID == "fireballIII")
            {
                this.stageEngine(7, 0.25, true);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1635, 2, 49, 33, -29, -23, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1636, 33, 49, 33, -27.5, -23, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1635, 60, 49, 33, -29, -25, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1691, 118, 49, 33, -29, -24, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1690, 80, 49, 33, -30.25, -25, 49 * 1.2, 33);
                    XXX.restore();
                    this.doMagic = true
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1691, 42, 49, 33, -28, -35, 49 * 1.2, 33 * 1.2);
                    XXX.restore();
                    if (this.doMagic)
                    {
                        this.doMagic = false;
                        if (this.spell.ID == "fireballI")
                        {
                            this.warmth += 3;
                        }
                        else if (this.spell.ID == "fireballII")
                        {
                            this.warmth += 4;
                        }
                        else if (this.spell.ID == "fireballIII")
                        {
                            this.warmth += 7;
                        }
                        this.magicalExperience += this.spell.EXP;
                        magicList.push(new Magic(player.spell, true));
                    }
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1731, 43, 49, 33, -27, -36, 49 * 1.2, 33 * 1.2);
                    XXX.restore();
                    this.castingCooldown = new Date().getTime();

                }
            }

            //Frost Wind Form
            if (this.spell.ID == "frostWind")
            {
                this.stageEngine(19, 0.14, false);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1575, 29, 48, 35, -23.5, -25.5, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1577, 67, 48, 35, -22.5, -25, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1577, 103, 48, 35, -22.1, -25.4, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1578, 141, 48, 35, -20.5, -28, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1573, 187, 48, 35, -24.3, -26.6, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1574, 226, 48, 35, -25, -26.5, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1573, 187, 48, 35, -24.3, -26.6, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1578, 141, 48, 35, -20.5, -28, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1577, 103, 48, 35, -22.1, -25.4, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 9)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1577, 67, 48, 35, -22.5, -25, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 10)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1575, 29, 48, 35, -23.5, -25.5, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 11)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1577, 67, 48, 35, -22.5, -25, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 12)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1577, 103, 48, 35, -22.1, -25.4, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 13)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1578, 141, 48, 35, -20.5, -28, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 14)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1573, 187, 48, 35, -24.3, -26.6, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 15)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1574, 226, 48, 35, -25, -26.5, 48, 35);
                    XXX.restore();
                    this.doMagic = true;
                }
                else if (Math.floor(this.stage) <= 16)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1574, 226, 48, 35, -25, -26.5, 48, 35);
                    XXX.restore();
                    if (this.doMagic)
                    {
                        this.doMagic = false;
                        if (this.getEminence() < 10)
                        {
                            this.warmth -= 5;
                        }
                        this.magicalExperience += this.spell.EXP;
                        magicList.push(new Magic(player.spell, true, 1));
                        magicList.push(new Magic(player.spell, true, 2));
                        magicList.push(new Magic(player.spell, true, 3));
                        magicList.push(new Magic(player.spell, true, 4));
                        magicList.push(new Magic(player.spell, true, 5));
                        magicList.push(new Magic(player.spell, true, 6));
                        magicList.push(new Magic(player.spell, true, 7));
                        magicList.push(new Magic(player.spell, true, 8));
                    }
                }
                else if (Math.floor(this.stage) <= 17)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1574, 226, 48, 35, -25, -26.5, 48, 35);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 18)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1574, 226, 48, 35, -25, -26.5, 48, 35);
                    XXX.restore();
                    this.castingCooldown = new Date().getTime();
                }

            }

                //Embers Form
            if (this.spell.ID == "embers")
            {
                this.stageEngine(9, 0.25, false);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1635, 2, 49, 33, -29, -23, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1636, 33, 49, 33, -27.5, -23, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1635, 60, 49, 33, -29, -25, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1635, 89, 49, 33, -29, -24, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1632, 118, 49, 33, -30.25, -25, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1632, 146, 49, 33, -30, -25, 49 * 1.2, 33);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1635, 177, 49, 33, -28.5, -26, 49 * 1.2, 33);
                    XXX.restore();
                    this.doMagic = true
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1635, 207, 49, 33, -29.5, -23, 49 * 1.2, 33);
                    XXX.restore();
                    if (this.doMagic)
                    {
                        this.doMagic = false;
                        this.warmth += 4;
                        this.magicalExperience += this.spell.EXP;
                        magicList.push(new Magic(player.spell, true));
                    }
                }
                else if (Math.floor(this.stage) >= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1637, 234, 49, 33, -29, -23, 49 * 1.2, 33);
                    XXX.restore();
                    this.castingCooldown = new Date().getTime();
                }
            }


            //ARM VARIANTS (player weapon types)
            //FISTS
            if (this.weaponEquipped == "none" && this.spell == "none")
            {
                this.stageEngine(6, 0.2, true);

                if (this.attacking == false)
                {
                    this.stage = 0;
                }

                //ATTACK ANIMATION
                if (this.stage <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 631, 55, 92, 30, -22, -17, 46, 22);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 638, 118, 80, 37, -24, -17, 46, 22);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 639, 195, 80, 37, -26, -20, 46, 22);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 643, 276, 80, 37, -28.5, -20, 48, 23);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 653, 352, 80, 37, -26.5, -21, 48, 23);
                    XXX.restore();
                }

            }
            //MACE
            if (this.weaponEquipped == "mace")
            {
                this.stageEngine(6, 0.15, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK ANIMATION
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 51, 70, 105, 46, -26, -22, 70, 45);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 169, 62, 105, 46, -26, -29, 70, 45);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 282, 47, 105, 53, -33, -40, 70, 45);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 399, 68, 105, 59, -38, -43, 72, 45);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 520, 59, 105, 69, -28, -43, 72, 47);
                    XXX.restore();
                }
            }
            //LONG-SPIKED MORNING STAR
            if (this.weaponEquipped == "longSpikedMorningStar")
            {
                this.stageEngine(7, 0.125, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK ANIMATION
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 207, 143, 55, 58, -34, -39, 55 * 1.15, 58 * 1.15);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 260, 145, 55, 58, -30, -42, 55 * 1.15, 58 * 1.15);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 307, 147, 55, 58, -31, -40, 55 * 1.15, 58 * 1.15);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 356, 147, 55, 58, -33, -39, 55 * 1.15, 58 * 1.15);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 400, 142, 55, 58, -30, -47, 55 * 1.15, 58 * 1.15);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 452, 141, 55, 58, -31, -51, 55 * 1.15, 58 * 1.15);
                    XXX.restore();
                }
            }
            //LONG SWORD
            if (this.weaponEquipped == "longsword")
            {
                this.stageEngine(8, 0.2, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 917, 566, 96, 86, -18, -31, 88, 86);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 918, 487, 96, 86, -12, -39, 88, 86);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 915, 421, 96, 86, -16, -57, 88, 86);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 909, 342, 96, 86, -22, -67, 88, 86);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 905, 239, 96, 86, -29, -77, 88, 86);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 898, 100, 96, 86, -35, -81, 88, 86);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 825, 1, 96, 86, -35, -78, 88, 86);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 788, 111, 96, 86, -48, -75, 88, 86);
                    XXX.restore();
                }
            }
            //NIRINESE SABRE
            if (this.weaponEquipped == "nirineseSabre")
            {
                this.stageEngine(9, 0.3, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 373, 2, 90, 96, -55, -41, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 455, 2, 90, 96, -40, -44, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 529, 2, 90, 96, -44, -39, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 600, 2, 90, 96, -45, -44, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 696, 2, 90, 96, -32, -44, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 798, 2, 90, 96, -32, -48, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 896, 2, 90, 96, -36, -46, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 996, 2, 90, 96, -42, -71.5, 90, 96);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 1085, 2, 90, 96, -49, -84, 90, 96);
                    XXX.restore();
                }
            }
            //RUHNKOR-GREN (ancient freydic greatsword)
            if (this.weaponEquipped == "blueBlade")
            {
                this.stageEngine(7, 0.21, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 3, 189, 100, 97, -16, -80, 120, 116.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 202, 616, 100, 97, -16, -28, 120, 116.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 204, 670, 100, 97, -16, -95, 120, 116.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 308, 669, 100, 97, -24, -97, 120, 116.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 403, 669, 100, 97, -33, -108, 120, 116.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 491, 671, 100, 97, -35, -109, 120, 116.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 558, 670, 100, 97, -62, -108, 120, 116.4);
                    XXX.restore();
                }
            }
            //THENGAN SWORD AND SHIELD
            if (this.weaponEquipped == "thenganSwordAndShield")
            {
                if (this.attacking == true)
                {
                    this.stageEngine(7, 0.21, true);
                }
                else if (this.blocking == true)
                {
                    this.stageEngine(12, 0.21, true);
                }

                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3351, 187, 110, 85, -50, -72, 121, 93.5);
                    XXX.restore();
                }

                if (this.attacking == true)
                {
                //this.stage = 5;
                    //ATTACK
                    if (Math.floor(this.stage) <= 1)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3462, 184, 110, 85, -58, -71, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) <= 2)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3296, 269, 110, 85, -64, -67, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) <= 3)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3401, 271, 110, 85, -68, -75, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) <= 4)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3495, 274, 110, 85, -75, -72, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) <= 5)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3575, 274, 110, 85, -82, -73, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) >= 6)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3666, 274, 110, 85, -69, -72, 121, 93.5);
                        XXX.restore();
                    }
                }

                if (this.blocking == true)
                {
                    //BLOCK
                    if (Math.floor(this.stage) <= 1)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3306, 353, 110, 85, -43, -65, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) <= 2)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3429, 357, 110, 85, -41, -57, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) <= 3)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3530, 356, 110, 85, -46, -63, 121, 93.5);
                        XXX.restore();
                    }
                    else if (Math.floor(this.stage) >= 4)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3626, 365, 110, 85, -49, -52, 121, 93.5);
                        XXX.restore();
                    }
                }
            }
            //FREYDIC WAR AXE
            if (this.weaponEquipped == "freydicWarAxe")
            {
                this.stageEngine(6, 0.19, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 138, 118, 113, 104, -68.75, -55, 101.7, 93.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 301, 145, 113, 104, -55.75, -60, 101.7, 93.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 428, 163, 113, 104, -49, -56, 101.7, 93.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 133, 229, 113, 104, -48, -62.5, 101.7, 93.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 276, 252, 113, 104, -38, -63, 101.7, 93.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 393, 275, 113, 104, -40.5, -51.3, 101.7, 93.6);
                    XXX.restore();
                }
            }
            //ALDREKII BARDICHE
            if (this.weaponEquipped == "aldrekiiBardiche")
            {
                this.stageEngine(5, 0.18, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 68, 381, 143, 141, -45, -65, 100.1, 98.7);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 234, 391, 143, 141, -42, -76, 100.1, 98.7);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 394, 414, 143, 141, -48, -79, 100.1, 98.7);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 565, 413, 143, 141, -52, -86, 100.1, 98.7);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 714, 396, 143, 141, -67, -89, 100.1, 98.7);
                    XXX.restore();
                }
            }
            //FREYDIC SPEAR
            if (this.weaponEquipped == "freydicSpear")
            {
                this.stageEngine(5, 0.18, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 382, 104, 53, 76, -39, -65, 53, 76);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 434, 104, 53, 76, -37.5, -67, 53, 76);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 484, 104, 53, 76, -35.25, -68, 53, 76);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 535, 104, 53, 76, -28.5, -71, 53, 76);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 591, 104, 53, 76, -21.5, -73.75, 53, 76);
                    XXX.restore();
                }
            }
            //ALDREKII WAR BLADE
            if (this.weaponEquipped == "aldrekiiBlade")
            {
                this.stageEngine(6, 0.2, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2206, 75, 60, 52, -13, -51, 72, 64.8);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2271, 74, 60, 52, -22.5, -54, 72, 64.8);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2334, 71, 60, 52, -35, -54, 72, 64.8);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2397, 69, 60, 52, -47, -56, 72, 64.8);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2458, 67, 60, 52, -54, -54.5, 72, 64.8);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2515, 66, 60, 52, -60.5, -51, 72, 64.8);
                    XXX.restore();
                }
            }
            //PICKAXE
            if (this.weaponEquipped == "pickaxe")
            {
                this.stageEngine(6, 0.2, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2581, 78, 35, 37, -22, -51, 52.5, 55.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2626, 78, 35, 37, -17.5, -53, 52.5, 55.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2669, 78, 35, 37, -20, -54, 52.5, 55.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2716, 78, 35, 37, -23, -50, 52.5, 55.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2765, 78, 35, 37, -22, -47.5, 52.5, 55.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2800, 78, 35, 37, -42, -43, 52.5, 55.5);
                    XXX.restore();
                }
            }
            //FREYDIC LONGSWORD
            if (this.weaponEquipped == "freydicSword")
            {
                this.stageEngine(7, 0.2, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2210, 1, 73, 63, -13, -60, 91.875, 78.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2290, 1, 73, 63, -17.5, -60, 91.875, 78.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2367, 1, 73, 63, -25, -61, 91.875, 78.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2438, 1, 73, 63, -31, -61.5, 91.875, 78.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2513, 1, 73, 63, -36, -64, 91.875, 78.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2577, 1, 73, 63, -44, -69, 91.875, 78.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2635, 1, 73, 63, -49.25, -69, 91.875, 78.75);
                    XXX.restore();
                }
            }
            //FREYDIC GREATSWORD
            if (this.weaponEquipped == "freydicGreatSword")
            {
                this.stageEngine(8, 0.23, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2205, 203, 89, 88, -7, -80, 106.8, 105.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2305, 203, 89, 88, -6, -83.5, 106.8, 105.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2405, 203, 89, 88, -8, -85.5, 106.8, 105.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2505, 203, 89, 88, -13.5, -87, 106.8, 105.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2605, 203, 89, 88, -21, -90, 106.8, 105.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2678, 203, 89, 88, -49, -93, 106.8, 105.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2750, 203, 89, 88, -55, -92.5, 106.8, 105.6);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2830, 203, 89, 88, -65, -90, 106.8, 105.6);
                    XXX.restore();
                }
            }
            //KELLISH CLAYMORE
            if (this.weaponEquipped == "kellishClaymore")
            {
                this.stageEngine(14, 0.24, true);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 491, 830, 135, 135, -50, -90, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 654, 827, 135, 135, -50, -93, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 870, 837, 135, 135, -46, -85, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1100, 838, 135, 135, -44, -80, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1386, 832, 135, 135, -14, -81, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1652, 828, 135, 135, -10, -79, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 513, 993, 135, 135, -15, -82, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 673, 990, 135, 135, -21, -83, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 892, 981, 135, 135, -17, -93, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 9)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1106, 971, 135, 135, -18, -113, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 10)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1333, 963, 135, 135, -59, -124, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 11)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1611, 961, 135, 135, -74, -124, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 12)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 503, 1162, 135, 135, -75, -117, 135, 135);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 13)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 680, 1158, 135, 135, -88, -112, 135, 135);
                    XXX.restore();
                }

            }
            //SMALL WAR AXE
            if (this.weaponEquipped == "vardanianAxe")
            {
                this.stageEngine(5, 0.20, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 670, 161, 86, 53, -62.25, -52, 107.7, 66.25);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 789, 161, 86, 53, -53.75, -50, 107.7, 66.25);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 879, 161, 86, 53, -66.85, -52, 107.7, 66.25);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 988, 161, 86, 53, -43.75, -52, 107.7, 66.25);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 1075, 161, 86, 53, -47.25, -52, 107.7, 66.25);
                    XXX.restore();
                }
            }
            //TWIN WAR AXES
            if (this.weaponEquipped == "vardanianAxeDual")
            {
                this.stageEngine(4, 0.21, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 669, 92, 110, 68, -55, -60, 110, 68);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 785, 92, 110, 68, -49, -60, 110, 68);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 884, 92, 110, 68, -49, -65, 110, 68);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 972, 92, 110, 68, -49, -68, 110, 68);
                    XXX.restore();
                }
            }
            //VARDANIAN WAR CLEAVER
            if (this.weaponEquipped == "vardanianCleaver")
            {
                this.stageEngine(6, 0.21, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 667, 222, 73, 64, -51, -64, 91.25, 80);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 732, 222, 73, 64, -49, -64, 91.25, 80);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 801, 222, 73, 64, -51, -65, 91.25, 80);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 876, 222, 73, 64, -50, -64, 91.25, 80);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 955, 220, 73, 64, -46.5, -65, 91.25, 80);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 1034, 222, 73, 64, -44.6, -63, 91.25, 80);
                    XXX.restore();
                }
            }
            //FLAIL
            if (this.weaponEquipped == "flail")
            {
                this.stageEngine(11, 0.18, false); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2194, 128, 66, 72, -42, -102, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2253, 128, 66, 72, -47.5, -103, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2313, 128, 66, 72, -41.75, -103, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2373, 128, 66, 72, -46.5, -102, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    if (this.attackManual == false)
                    {
                        this.attackManual = true;
                        this.finalAttackStage = true;
                        this.attackCooldown = new Date().getTime();
                    }
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2430, 128, 66, 72, -62, -104.5, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    this.attackManual = false;
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2489, 128, 66, 72, -57.5, -105, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2539, 128, 66, 72, -59.25, -103, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2588, 128, 66, 72, -61.5, -104.5, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2639, 128, 66, 72, -58, -104, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 9)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2689, 128, 66, 72, -62, -104, 99, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 10)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2744, 128, 66, 72, -51.5, -105, 99, 108);
                    XXX.restore();
                }
            }
            //KATANA
            if (this.weaponEquipped == "katana")
            {
                this.stageEngine(11, 0.5, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3909, 453, 57, 66, -41, -78, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3841, 449, 57, 66, -29, -85, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3772, 449, 57, 66, -33, -83.75, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3701, 449, 57, 66, -34, -82, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3645, 449, 57, 66, -32.5, -83, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3591, 449, 57, 66, -40, -81.5, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3541, 449, 57, 66, -48.25, -79, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3496, 449, 57, 66, -59, -75, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3453, 449, 57, 66, -65, -74, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 9)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3402, 449, 57, 66, -74, -72.5, 89.1, 97.2);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 10)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3333, 449, 57, 66, -89.5, -71, 89.1, 97.2);
                    XXX.restore();
                }
            }
            //TIMBER AXE
            if (this.weaponEquipped == "timberAxe")
            {
                this.stageEngine(7, 0.25, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 334, 332, 54, 49, -60.25, -42, 54 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 390, 328, 54, 49, -56.25, -47, 54 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 453, 330, 54, 49, -44.25, -60, 54 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 516, 330, 54, 49, -35, -60, 54 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 576, 332, 54, 49, -30, -56, 54 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 634, 332, 54, 49, -25, -49, 54 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 680, 332, 54, 49, -16, -43, 54 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
            }
            //CURVED DAGGER
            if (this.weaponEquipped == "curvedDagger")
            {
                this.stageEngine(7, 0.35, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3552, 657, 50, 34, -30.25, -20, 50, 34);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3618, 652, 50, 34, -31, -24, 50, 34);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3683, 650, 50, 34, -30.25, -26, 50, 34);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3745, 650, 50, 34, -27.5, -25, 50, 34);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3811, 650, 50, 34, -22.5, -27, 50, 34);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3875, 650, 50, 34, -16, -28.5, 50, 34);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3937, 645, 50, 34, -17, -33.5, 50, 34);
                    XXX.restore();
                }
            }
            //DUAL CURVED DAGGER
            if (this.weaponEquipped == "dualCurvedDaggers")
            {
                this.stageEngine(7, 0.30, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3585, 595, 73, 51, -41.25, -40, 73, 51);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3660, 595, 73, 51, -37.25, -40, 73, 51);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3729, 595, 73, 51, -35.25, -41, 73, 51);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3797, 592, 58, 51, -24.25, -47, 58, 51);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3847, 595, 58, 51, -23.5, -46, 58, 51);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3893, 595, 58, 51, -23, -49, 58, 51);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3942, 595, 58, 51, -21.5, -48.5, 58, 51);
                    XXX.restore();
                }
            }
            //VARDANIAN HEAVY CLEAVER
            if (this.weaponEquipped == "vardanianHeavyCleaver")
            {
                this.stageEngine(12, 0.28, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 11, 107, 73, 90, -51, -77, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 124, 107, 73, 90, -57, -75, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 239, 102, 73, 90, -56, -81, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 356, 107, 73, 90, -56, -80, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 468, 107, 73, 90, -58.5, -74, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 569, 107, 73, 90, -57, -74, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 682, 85, 73, 90, -51, -88, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 784, 83, 73, 90, -42, -91, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 873, 85, 73, 90, -33, -88, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 9)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 971, 86, 73, 90, -24, -85, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 10)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1082, 92, 73, 90, -14, -78, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 11)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1204, 96, 73, 90, -9, -72, 73 * 1.1, 90 * 1.1);
                    XXX.restore();
                }
            }
            //VARDANIAN BATTLE AXE
            if (this.weaponEquipped == "vardanianBattleAxe")
            {
                this.stageEngine(7, 0.235, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3342, 537, 61, 55, -13, -31.5, 79.3, 71.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3425, 533, 61, 55, -13, -46, 79.3, 71.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3506, 532, 61, 55, -15, -54, 79.3, 71.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3580, 526, 61, 55, -28, -62, 79.3, 71.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3647, 529, 61, 55, -39, -68, 79.3, 71.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3720, 532, 61, 55, -53, -59, 79.3, 71.5);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3784, 531, 61, 55, -69, -44, 79.3, 71.5);
                    XXX.restore();
                }
                /*else if (Math.floor(this.stage) >= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3865, 528, 61, 55, -70, -30, 79.3, 71.5);
                    XXX.restore();
                }*/
            }
            //ICE CLAYMORE
            if (this.weaponEquipped == "iceBlade")
            {
                this.stageEngine(8, 0.22, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds
                //ATTACK

                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 340, 267, 104, 108, -90, -64, 104, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 507, 265, 104, 108, -89, -74, 104, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 669, 256, 104, 108, -78, -88, 104, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 819, 249, 104, 108, -62, -94, 104, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 934, 248, 104, 108, -52, -102, 104, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1055, 255, 104, 108, -41, -99, 104, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1186, 264, 104, 108, -30, -95, 104, 108);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1333, 274, 104, 108, -17, -82, 104, 108);
                    XXX.restore();
                }
            }
            //NIRINESE SPEAR
            if (this.weaponEquipped == "nirineseSpear")
            {
                this.stageEngine(7, 0.235, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 41, 1505, 42, 87, -9, -66.5, 50.4, 98.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 82, 1507, 42, 87, -7, -68.5, 50.4, 98.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 120, 1506, 42, 87, -6, -72, 50.4, 98.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 159, 1501, 42, 87, -6, -76, 50.4, 98.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 193, 1501, 42, 87, -14.5, -77, 50.4, 98.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 224, 1501, 42, 87, -17.5, -79, 50.4, 98.1);
                    XXX.restore();
                }
                /*else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 193, 1501, 42, 87, -12, -75, 50.4, 98.1);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 224, 1501, 42, 87, -15, -77, 50.4, 98.1);
                    XXX.restore();
                }*/
            }
            //WAR HAMMER
            if (this.weaponEquipped == "warHammer")
            {
                this.stageEngine(9, 0.22, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 32, 605, 93, 87, -21, -43, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 169, 605, 93, 87, -21, -43, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 304, 605, 93, 87, -22, -45, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 443, 605, 93, 87, -29, -46, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 589, 599, 93, 87, -32, -50, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 720, 590, 93, 87, -36, -53, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 836, 594, 93, 87, -46, -50, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 958, 593, 93, 87, -49, -47.5, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1083, 591, 93, 87, -51.5, -45, 93 / 1.3, 87 / 1.3);
                    XXX.restore();
                }
            }
            //HAMMER
            if (this.weaponEquipped == "hammer")
            {
                this.stageEngine(8, 0.24, true); //This cycles through the stages of the attack for four stages (ending at five) and at a rate of 4 * 16.75 miliseconds

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 399, 703, 70, 70, -19, -36, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 518, 704, 70, 70, -22, -39, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 615, 708, 70, 70, -24, -39, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 732, 708, 70, 70, -25, -41, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 814, 701, 70, 70, -29, -45, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 918, 704, 70, 70, -41, -44, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1002, 702, 70, 70, -43, -36, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1083, 703, 70, 70, -47, -34, 70 / 1.3, 70 / 1.3);
                    XXX.restore();
                }
            }
            //KELLISH SAW CLUB
            if (this.weaponEquipped == "kellishSawClub")
            {
                this.stageEngine(7, 0.21, true);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1254, 663, 85, 85, -64, -52, 85, 85);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1346, 661, 85, 85, -58, -54, 85, 85);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1429, 662, 85, 85, -47.5, -54, 85, 85);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1506, 661, 85, 85, -41, -57, 85, 85);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1597, 662, 85, 85, -26, -60, 85, 85);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1663, 664, 85, 85, -33, -64, 85, 85);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polypol, 1732, 663, 85, 85, -34, -64, 85, 85);
                    XXX.restore();
                }
            }
            //RASPER
            if (this.weaponEquipped == "rasper")
            {
                this.stageEngine(5, 0.20, true);

                //ATTACK
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 683, 43, 55, 51, -47, -49, 55 * 1.3, 51 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 755, 37, 55, 51, -39, -55, 55 * 1.3, 51 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 834, 38, 55, 51, -36, -54, 55 * 1.3, 51 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 903, 35, 55, 51, -30, -54.5, 55 * 1.3, 51 * 1.3);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 928, 346, 55, 51, -27, -54, 55 * 1.3, 51 * 1.3);
                    XXX.restore();
                }
            }
            //LONG BOW
            if (this.weaponEquipped == "longbow")
            {
                //for ranged this sets the stage back so that it can start again.
                if (this.ammoLoaded == false && new Date().getTime() - this.reloadTime > allWeapons[5].rate * 100 && this.releaseStage == true)
                {
                    this.stage = 0;
                    this.releaseStage = false;
                }

                //If the stage is less than full drawback then draw back when attacking is triggered.
                if (this.stage < 6)
                {
                    this.stageEngine(8, 0.15, false);
                }

                //ATTACK ANIMATION
                //This cycles through the stages of the attack
                if (Math.floor(this.stage) <= 0 && this.releaseStage == false)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 421, 589, 40, 43, -17, -41, 50, 53.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1 && this.releaseStage == false)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 487, 589, 40, 43, -11, -42, 50, 53.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2 && this.releaseStage == false)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 536, 589, 40, 43, -16, -39, 50, 53.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3 && this.releaseStage == false)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 576, 588, 40, 43, -19, -41, 50, 53.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4 && this.releaseStage == false)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 608, 588, 40, 43, -21, -41, 50, 53.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5 && this.releaseStage == false)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 645, 589, 40, 43, -16, -40, 50, 53.75);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) >= 6 && this.releaseStage == false)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 681, 582, 40, 43, -22, -38.5, 50, 53.75);
                    XXX.restore();
                    this.ammoLoaded = true;
                }
                //This is an extra stage for the release, it is specially triggered by the release of the space bar.
                if (this.releaseStage == true)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 717, 583, 40, 43, -17, -38.5, 50, 53.75);
                    XXX.restore();
                }
            }
            //CROSSBOW
            if (this.weaponEquipped == "crossbow")
            {
                if (this.ammoLoaded == false)
                {
                    this.stageEngine(24, 0.10, true);
                }
                else
                {
                    if (machineGunCrossbow)
                    {
                        this.stage = 23;
                    }
                    else
                    {
                        if (this.projectileReleased == false)
                        {
                            this.stage = "loadedAndReady";
                        }
                        else
                        {
                            this.stage = 0;
                        }
                    }
                }

                //Loading ANIMATION
                //This cycles through the stages of the load
                if (Math.floor(this.stage) <= 0)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3911, 695, 50, 40, -27, -43, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 1)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2788, 695, 50, 40, -25, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 2)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2843, 695, 50, 40, -26, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 3)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2899, 695, 50, 40, -28, -39.5, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 4)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2950, 695, 50, 40, -26, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 5)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2994, 695, 50, 40, -28, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 6)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3044, 695, 50, 40, -25.5, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 7)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3089, 695, 50, 40, -27, -39.5, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 8)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3135, 695, 50, 40, -26, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 9)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3183, 695, 50, 40, -27.85, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 10)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3227, 695, 50, 40, -26.85, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 11)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3270, 695, 50, 40, -28, -39.5, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 12)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3313, 695, 50, 40, -26.35, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 13)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3358, 695, 50, 40, -26.85, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 14)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3403, 695, 50, 40, -26.85, -42, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 15)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3452, 695, 50, 40, -25.85, -41, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 16)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3498, 695, 50, 40, -25, -40, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 17)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3552, 695, 50, 40, -23.6, -39, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 18)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3608, 698, 50, 40, -22.5, -36, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 19)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3665, 698, 50, 40, -23.5, -37.25, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 20)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3717, 698, 50, 40, -26, -38.25, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 21)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3770, 698, 50, 40, -26, -38.25, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 22)
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3817, 698, 50, 40, -27, -38.25, 52.5, 42);
                    XXX.restore();
                }
                else if (Math.floor(this.stage) <= 23)
                {
                    if (machineGunCrossbow)
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3962, 695, 32, 39, -21, -43.25, 33.6, 40.95);
                        XXX.restore();
                        this.attacking = false;
                        this.ammoLoaded = true;
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3865, 698, 50, 40, -27, -38.25, 52.5, 42);
                        XXX.restore();
                        this.attacking = false;
                        this.ammoLoaded = true;
                    }
                }
                else if (this.stage == "loadedAndReady")
                {
                    XXX.save();
                    XXX.translate(this.myScreenX, this.myScreenY);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3865, 698, 50, 40, -27, -38.25, 52.5, 42);
                    XXX.restore();
                }
            }
        };

        this.weaponSetup = function ()
        {
            //console.log("WeaponEquipped: " + this.weaponEquipped + "  PrimarySpell: " + this.spell.name);

            //if the weapon is ranged they tell the projectile class where to position the arrow/bolt here.
            if (this.weaponEquipped == "longbow")
            {
                this.weapon = allWeapons[5];

                //This adjusts the starting position of the arrow/bolt.
                this.projectileX = -3;
                this.projectileY = -3;
            }
            else if (this.weaponEquipped == "crossbow")
            {
                this.weapon = allWeapons[22];

                //This adjusts the starting position of the arrow/bolt.
                if (machineGunCrossbow)
                {
                    this.projectileX = 5.35;
                    this.projectileY = 5.35;
                }
                else
                {
                    this.projectileX = 4.85;
                    this.projectileY = 4.85;
                }
            }

            //Access Stats for each weapon first. //1/2 is directly forward facing.
            if (this.weaponEquipped == "mace")
            {
                this.weapon = allWeapons[0];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.4 / 5 * Math.PI) * (this.mySize + 24);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.4 / 5 * Math.PI) * (this.mySize + 24);
            }
            else if (this.weaponEquipped == "longsword")
            {
                this.weapon = allWeapons[1];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1 / 4 * Math.PI) * (this.mySize + 25);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1 / 4 * Math.PI) * (this.mySize + 25);
            }
            else if (this.weaponEquipped == "none" && this.spell == "none")
            {
                this.weapon = allWeapons[2];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1 / 2 * Math.PI) * (this.mySize + 10);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1 / 2 * Math.PI) * (this.mySize + 10);
            }
            else if (this.weaponEquipped == "freydicWarAxe")
            {
                this.weapon = allWeapons[3];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1 / 3 * Math.PI) * (this.mySize + 23);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1 / 3 * Math.PI) * (this.mySize + 23);
            }
            else if (this.weaponEquipped == "aldrekiiBardiche")
            {
                this.weapon = allWeapons[4];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 16 / 30 * Math.PI) * (this.mySize + 55);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 16 / 30 * Math.PI) * (this.mySize + 55);
            }
            else if (this.weaponEquipped == "blueBlade")
            {
                this.weapon = allWeapons[7];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1 / 4 * Math.PI) * (this.mySize + 45);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1 / 4 * Math.PI) * (this.mySize + 45);
            }
            else if (this.weaponEquipped == "nirineseSabre")
            {
                this.weapon = allWeapons[8];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1.9 / 5 * Math.PI) * (this.mySize + 28);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1.9 / 5 * Math.PI) * (this.mySize + 28);
            }
            else if (this.weaponEquipped == "freydicSpear")
            {
                this.weapon = allWeapons[9];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.3 / 5 * Math.PI) * (this.mySize + 38);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.3 / 5 * Math.PI) * (this.mySize + 38);
            }
            else if (this.weaponEquipped == "vardanianAxeDual")
            {
                this.weapon = allWeapons[10];
                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1 / 2 * Math.PI) * (this.mySize + 17);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1 / 2 * Math.PI) * (this.mySize + 17);
            }
            else if (this.weaponEquipped == "vardanianAxe")
            {
                this.weapon = allWeapons[11];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3 / 5 * Math.PI) * (this.mySize + 16);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3 / 5 * Math.PI) * (this.mySize + 16);
            }
            else if (this.weaponEquipped == "flail")
            {
                this.weapon = allWeapons[12];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.4 / 5 * Math.PI) * (this.mySize + 40);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.4 / 5 * Math.PI) * (this.mySize + 40);
            }
            else if (this.weaponEquipped == "aldrekiiBlade")
            {
                this.weapon = allWeapons[13];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3 / 5 * Math.PI) * (this.mySize + 18);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3 / 5 * Math.PI) * (this.mySize + 18);
            }
            else if (this.weaponEquipped == "pickaxe")
            {
                this.weapon = allWeapons[14];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3.2 / 5 * Math.PI) * (this.mySize + 18);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3.2 / 5 * Math.PI) * (this.mySize + 18);
            }
            else if (this.weaponEquipped == "freydicSword")
            {
                this.weapon = allWeapons[15];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1.45 / 5 * Math.PI) * (this.mySize + 29);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1.45 / 5 * Math.PI) * (this.mySize + 29);
            }
            else if (this.weaponEquipped == "freydicGreatSword")
            {
                this.weapon = allWeapons[17];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1.65 / 5 * Math.PI) * (this.mySize + 38); //was -1.45 / 5 //was 33
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1.65 / 5 * Math.PI) * (this.mySize + 38); //was -1.45 / 5 //was 33
            }
            else if (this.weaponEquipped == "thenganSwordAndShield")
            {
                this.weapon = allWeapons[18];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.3 / 5 * Math.PI) * (this.mySize + 34);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.3 / 5 * Math.PI) * (this.mySize + 34);
            }
            else if (this.weaponEquipped == "katana")
            {
                this.weapon = allWeapons[19];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3.5/5 * Math.PI) * (this.mySize + 26);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3.5/5 * Math.PI) * (this.mySize + 26);
            }
            else if (this.weaponEquipped == "vardanianCleaver")
            {
                this.weapon = allWeapons[20];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.4/5 * Math.PI) * (this.mySize + 26);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.4/5 * Math.PI) * (this.mySize + 26);
            }
            else if (this.weaponEquipped == "vardanianBattleAxe")
            {
                this.weapon = allWeapons[21];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.5/5 * Math.PI) * (this.mySize + 16);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.5/5 * Math.PI) * (this.mySize + 16);
            }
            else if (this.weaponEquipped == "nirineseSpear")
            {
                this.weapon = allWeapons[24];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.1/5 * Math.PI) * (this.mySize + 56.5);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.1/5 * Math.PI) * (this.mySize + 56.5);
            }
            else if (this.weaponEquipped == "curvedDagger")
            {
                this.weapon = allWeapons[25];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3.3/5 * Math.PI) * (this.mySize + 2);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3.3/5 * Math.PI) * (this.mySize + 2);
            }
            else if (this.weaponEquipped == "dualCurvedDaggers")
            {
                this.weapon = allWeapons[26];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.4/5 * Math.PI) * (this.mySize + 7);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.4/5 * Math.PI) * (this.mySize + 7);
            }
            else if (this.weaponEquipped == "timberAxe")
            {
                this.weapon = allWeapons[27];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.4/5 * Math.PI) * (this.mySize + 12);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.4/5 * Math.PI) * (this.mySize + 12);
            }
            else if (this.weaponEquipped == "vardanianHeavyCleaver")
            {
                this.weapon = allWeapons[28];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.05/5 * Math.PI) * (this.mySize + 38);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.05/5 * Math.PI) * (this.mySize + 38);
            }
            else if (this.weaponEquipped == "iceBlade")
            {
                this.weapon = allWeapons[29];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.8/5 * Math.PI) * (this.mySize + 41);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.8/5 * Math.PI) * (this.mySize + 41);
            }
            else if (this.weaponEquipped == "warHammer")
            {
                this.weapon = allWeapons[30];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3/5 * Math.PI) * (this.mySize + 10);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3/5 * Math.PI) * (this.mySize + 10);
            }
            else if (this.weaponEquipped == "kellishClaymore")
            {
                this.weapon = allWeapons[31];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.5/5 * Math.PI) * (this.mySize + 66);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.5/5 * Math.PI) * (this.mySize + 66);
            }
            else if (this.weaponEquipped == "hammer")
            {
                this.weapon = allWeapons[32];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3.4/5 * Math.PI) * (this.mySize + 10);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3.4/5 * Math.PI) * (this.mySize + 10);
            }
            else if (this.weaponEquipped == "kellishSawClub")
            {
                this.weapon = allWeapons[33];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 3/5 * Math.PI) * (this.mySize + 24);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 3/5 * Math.PI) * (this.mySize + 24);
            }
            else if (this.weaponEquipped == "rasper")
            {
                this.weapon = allWeapons[34];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 2.1/5 * Math.PI) * (this.mySize + 22);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 2.1/5 * Math.PI) * (this.mySize + 22);
            }
            else if (this.weaponEquipped == "longSpikedMorningStar")
            {
                this.weapon = allWeapons[40];

                //keep the angle at this.rotation if you intend for it to go to the right, otherwise you can change the damage radius center by listing a different rotation.
                this.bubbleOfDamageX = X - Math.cos(this.rotation - 1/2 * Math.PI) * (this.mySize + 31);
                this.bubbleOfDamageY = Y - Math.sin(this.rotation - 1/2 * Math.PI) * (this.mySize + 31);
            }
        };

        //BLOCKING FUNCTION
        this.defend = function()
        {
            if (this.blocking == true)
            {
                this.shielding = this.weapon.blocking;
            }
            else
            {
                this.shielding = 0;
            }
        };

        //OFFICIAL ATTACKING FUNCTION
        this.attack = function()
        {
            //Access Stats for each weapon first with weaponSetup function.

            //Carry Out melee attack.
            if (this.attacking == true && this.weaponIsRanged == false && this.weaponIsMagic == false)
            {
                //show attack bubble if visual attack range mode is on for development
                if (showPlayerAttackBubble == true)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "rgba(0, 0, 300, 0.25)";
                    XXX.arc(this.myScreenX - (this.bubbleOfDamageX - X), this.myScreenY - (this.bubbleOfDamageY - Y), (this.weapon.range * 6), 0, 2 * Math.PI);
                    XXX.fill();
                }
                if ((new Date().getTime() - this.attackPause) > 1000 - (20 * this.weapon.rate))
                {
                    this.attackPause = new Date().getTime();

                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                    {
                        var dfu = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.bubbleOfDamageX) * (ArtificialIntelligenceAccess[i].X - this.bubbleOfDamageX) + (ArtificialIntelligenceAccess[i].Y - this.bubbleOfDamageY) * (ArtificialIntelligenceAccess[i].Y - this.bubbleOfDamageY)) - ArtificialIntelligenceAccess[i].sizeRadius; //This is the distance from the center of the players attack/damaging bubble to the AI Unit.

                        if (dfu <= this.weapon.range * 7 && this.finalAttackStage == true)
                        {
                            if (this.powerAttack == false)
                            {
                                ArtificialIntelligenceAccess[i].health -= Math.max(0, this.weapon.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.weapon.negateArmour) + Math.max(0, this.weapon.magicalDamage - ArtificialIntelligenceAccess[i].magicalResistance));
                                console.log("You Dealt " + Math.max(0, this.weapon.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.weapon.negateArmour)) + " damage!" + " ");
                            }
                            else
                            {
                                ArtificialIntelligenceAccess[i].health -= Math.max(0, (this.weapon.damage * 1.5) - Math.max(0, ArtificialIntelligenceAccess[i].armour - (this.weapon.negateArmour * 1.5)) + Math.max(0, this.weapon.magicalDamage - ArtificialIntelligenceAccess[i].magicalResistance));
                                console.log("Power Attack: " + Math.max(0, (this.weapon.damage * 1.5) - Math.max(0, ArtificialIntelligenceAccess[i].armour - (this.weapon.negateArmour * 1.5)) + this.weapon.magicalDamage - ArtificialIntelligenceAccess[i].magicalResistance) + " Damage!");
                            }

                            ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                            ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();

                            //effects

                            if (this.weapon.ability == "freeze")
                            {
                                ArtificialIntelligenceAccess[i].frozenTime = new Date().getTime();
                            }
                            else if (this.weapon.ability == "burning")
                            {
                                ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                            }
                            else if (this.weapon.ability == "stunI")
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunI = true;
                            }
                            else if (this.weapon.ability == "stunII")
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunII = true;
                            }
                            else if (this.weapon.ability == "stunIII")
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunIII = true;
                            }
                            else if (this.weapon.ability == "stunIV")
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunIV = true;
                            }
                            else if (this.weapon.ability == "stunV")
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunV = true;
                            }
                        }
                    }

                    this.finalAttackStage = false;
                }
            }
            else if (this.weaponIsRanged == true)
            {
                //On release the projectile is fired.
                if (this.projectileReleased == false && spaceKey == false && this.ammoLoaded == true && this.weapon.subUtility == "bow" || this.weapon.subUtility == "crossbow" && this.projectileReleased == true && this.ammoLoaded == true)
                {
                    this.attacking = false;
                    this.reloadTime = new Date().getTime();
                    this.ammoLoaded = false;
                    if (this.weapon.subUtility == "bow")
                    {
                        this.projectileReleased = true;
                        this.releaseStage = true;
                    }
                    else if (this.weapon.subUtility == "crossbow")
                    {
                        this.projectileReleased = false;
                    }

                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].utility == "ammunition" && Inventory[i][0].equipped == true)
                        {
                            //this sets the currently equipped ammo to a variable called loaded.
                            var loaded = Inventory[i][0];
                        }
                        else if (Inventory[i][0].utility == "ranged" && Inventory[i][0].equipped == true)
                        {
                            //This sets the currently equipped ranged weapon to a variable called projector.
                            var projector = Inventory[i][0];
                        }
                    }
                    //This puts the projectile into action!
                    if (machineGunCrossbow)
                    {
                        crossbowGun.playbackRate = 2;
                        crossbowGun.volume = 0.25;
                        crossbowGun.currentTime = 0;
                        crossbowGun.play();
                        playerProjectiles.push(new Projectile("cheatMachineGunBullet", X + Math.cos(this.rotation) * (this.projectileX + this.projXAd), Y + Math.sin(this.rotation) * (this.projectileY + this.projYAd), this.rotation, 18, 5000, 250, playerProjectiles));
                    }
                    else
                    {
                        playerProjectiles.push(new Projectile(loaded.type, X + Math.cos(this.rotation) * (this.projectileX + this.projXAd), Y + Math.sin(this.rotation) * (this.projectileY + this.projYAd), this.rotation, projector.speed, projector.range, projector.negateArmour, playerProjectiles));
                    }

                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][1] < 1 && Inventory[i][0].utility == "ammunition" && Inventory[i][0].equipped == true)
                        {
                            this.isAmmoEquipped = false;
                            Inventory.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else
            {

            }
        };

        //This makes the character always face the mouse pointer.
        this.pointAtMouse = function ()
        {
            this.rotation = Math.atan2(mouseY - this.myScreenY, mouseX - this.myScreenX) + Math.PI / 2;
            //console.log(this.rotation);
        };

        //OBSTRUCTION CHECKER (this checks to see if something is in the player's way).
        this.isObstructed = function (x, y)
        {
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (ArtificialIntelligenceAccess[i])
                {
                    var focusUnit = ArtificialIntelligenceAccess[i]; //This is the current unit focused on other than this unit.
                    var x1 = focusUnit.X; //the focus unit's X position.
                    var y1 = focusUnit.Y; //the focus unit's Y position.
                    var d = Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1)); //This is the distance between this unit and the focus unit.
                    if (d < this.mySize + focusUnit.sizeRadius && focusUnit.alive == true) // if the total distance between this unit and the focus unit is less than the size of the two radiuses then it returns true to the movement function which calls it.
                    {
                        return true; //d == this.sizeRadius + focusUnit.sizeRadius :: this is the point at which the two units would be exactly touching eachother with no overlap.
                    }
                }
            }
            for (var i = 0; i < scenicList.length; i++)
            {
                if (scenicList[i].solid == true)
                {
                    var focusObject = scenicList[i]; //This is the current unit focused on other than this unit.
                    var x1 = focusObject.X; //the focus unit's X position.
                    var y1 = focusObject.Y; //the focus unit's Y position.
                    var d = Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1)); //This is the distance between this unit and the focus unit.
                    if (d < this.mySize + focusObject.radius) // if the total distance between this unit and the focus unit is less than the size of the two radiuses then it returns true to the movement function which calls it.
                    {
                        return true; //d == this.sizeRadius + focusUnit.sizeRadius :: this is the point at which the two units would be exactly touching eachother with no overlap.
                    }
                }
            }
            //TODO add a similar routine for the structure list when it is added...

            //When an AI Unit is speaking you are forced to be polite and not move while you listen to them.
            if (this.speechMovementInhibitor == true && playersTurnToMove == false)
            {
                return true;
            }
        };

        // CHARACTER MOVEMENT
        this.motion = function ()
        {
            //BACKWALKING
            if (sKey == true && shiftKey != true && wKey != true && this.getDexterity() >= 5)
            {
                this.movingType = 4;

                // If the place where the player would move next under the same instruction is blocked then the player will not move.
                if (wallPhase == false) //If the developerMode wallPhase is set to false the player can not walk through obstacles, otherwise the player can.
                {
                    var nextX = X + (Math.cos(this.rotation - 1 / 2 * Math.PI) * (0.5 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 48 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    var nextY = Y + (Math.sin(this.rotation - 1 / 2 * Math.PI) * (0.5 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 48 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    if (!this.isObstructed(nextX, nextY))
                    {
                        X += (Math.cos(this.rotation - 1 / 2 * Math.PI) * (0.5 / this.freeze) + Math.cos(this.rotation - 1 / 2 * Math.PI) * (1 / 48 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                        Y += (Math.sin(this.rotation - 1 / 2 * Math.PI) * (0.5 / this.freeze) + Math.sin(this.rotation - 1 / 2 * Math.PI) * (1 / 48 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    }
                }
                else
                {
                    //TODO eventually make magical walls and game borders that wallPhase does not let the player walk through.
                    X += (Math.cos(this.rotation - 1 / 2 * Math.PI) * (0.5 / this.freeze) + Math.cos(this.rotation - 1 / 2 * Math.PI) * (1 / 48 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    Y += (Math.sin(this.rotation - 1 / 2 * Math.PI) * (0.5 / this.freeze) + Math.sin(this.rotation - 1 / 2 * Math.PI) * (1 / 48 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                }
            }
            //STANDING
            if (wKey == false && altKey == false && sKey == false)
            {
                this.movingType = 0;
            }
            //WALKING
            if (wKey == true && shiftKey != true)
            {
                this.movingType = 1;

                // If the place where the player would move next under the same instruction is blocked then the player will not move.
                if (wallPhase == false) //If the developerMode wallPhase is set to false the player can not walk through obstacles, otherwise the player can.
                {
                    var nextX = X + (Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    var nextY = Y + (Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    if (!this.isObstructed(nextX, nextY))
                    {
                        X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                        Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    }
                }
                else
                {
                    //TODO eventually make magical walls and game borders that wallPhase does not let the player walk through.
                    X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * 1 + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity())) * (TTD / 16.75);
                    Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * 1 + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity())) * (TTD / 16.75);
                }
            }
            //RUNNING
            // if you run out of energy while running you regress into a walk.
            if (this.energy <= 0 && wKey == true && shiftKey == true)
            {
                this.movingType = 1;

                // If the place where the player would move next under the same instruction is blocked then the player will not move.
                if (wallPhase == false) //If the developerMode wallPhase is set to false the player can not walk through obstacles, otherwise the player can.
                {
                    var nextX = X + (Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    var nextY = Y + (Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    if (!this.isObstructed(nextX, nextY))
                    {
                        X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                        Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    }
                }
                else
                {
                    X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * 1 + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity())) * (TTD / 16.75);
                    Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * 1 + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity())) * (TTD / 16.75);
                }
            }

            if (wKey == true && shiftKey == true && this.energy > 0)
            {
                this.movingType = 2;

                // If the place where the player would move next under the same instruction is blocked then the player will not move.
                if (wallPhase == false) //If the developerMode wallPhase is set to false the player can not walk through obstacles, otherwise the player can.
                {
                    var nextX = X + (Math.cos(this.rotation + 1 / 2 * Math.PI) * (4 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    var nextY = Y + (Math.sin(this.rotation + 1 / 2 * Math.PI) * (4 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    if (!this.isObstructed(nextX, nextY))
                    {
                        X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * (4 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                        Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * (4 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    }
                }
                else
                {
                    X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * 4 + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity())) * (TTD / 16.75);
                    Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * 4 + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 24 * this.getDexterity())) * (TTD / 16.75);
                }
            }
            //SNEAKING
            if (altKey == true && wKey == false)
            {
                this.movingType = 3;

                // If the place where the player would move next under the same instruction is blocked then the player will not move.
                if (wallPhase == false) //If the developerMode wallPhase is set to false the player can not walk through obstacles, otherwise the player can.
                {
                    var nextX = X + (Math.cos(this.rotation + 1 / 2 * Math.PI) * (0.2 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 40 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    var nextY = Y + (Math.sin(this.rotation + 1 / 2 * Math.PI) * (0.2 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 40 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    if (!this.isObstructed(nextX, nextY))
                    {
                        X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * (0.2 / this.freeze) + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 40 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                        Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * (0.2 / this.freeze) + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 40 * this.getDexterity() / this.freeze)) * (TTD / 16.75);
                    }
                }
                else
                {
                    X += (Math.cos(this.rotation + 1 / 2 * Math.PI) * 0.2 + Math.cos(this.rotation + 1 / 2 * Math.PI) * (1 / 40 * this.getDexterity())) * (TTD / 16.75);
                    Y += (Math.sin(this.rotation + 1 / 2 * Math.PI) * 0.2 + Math.sin(this.rotation + 1 / 2 * Math.PI) * (1 / 40 * this.getDexterity())) * (TTD / 16.75);
                }
            }
        };

        //USER INTERFACE BAR

        //The bar for the UI buttons
        this.buildUIBar = function ()
        {
            XXX.beginPath();
            if (mouseY < 526 && lowBar != "skills" && lowBar != "shop" && lowBar != "bank" && lowBar != "crafting" && lowBar != "spellbook" && lowBar != "beastJournal" && lowBar != "questLog")
            {
                XXX.fillStyle = "rgba(211, 211, 211, 0.1)";
                XXX.strokeStyle = "rgba(211, 211, 211, 0.1)"
            }
            else
            {
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
            }
            XXX.rect(140, 527, 1259, 22);
            XXX.fill();
            XXX.stroke();
        };
        //UI Buttons
        this.uiButton = function ()
        {
            if (mouseY > 526 || lowBar == "skills" || lowBar == "shop" || lowBar == "bank" || lowBar == "crafting" || lowBar == "spellbook" || lowBar == "beastJournal" || lowBar == "questLog")
            {
                //inventory button
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.fillStyle = "chocolate";
                XXX.rect(152, 527, 20, 22);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 153, 5, 21, 18, 151.25, 528.5, 21, 18);

                //character skills menu button
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.fillStyle = "cornsilk";
                XXX.rect(173, 527, 20, 22);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 639, 1, 23, 20, 172.25, 530.75, 20, 18);

                //magic menu (spellbook) button
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.fillStyle = "lightBlue";
                XXX.rect(194, 527, 20, 22);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 0, 734, 25, 31, 195.5, 527, 25 / 1.45, 31 / 1.45);

                //handcrafting menu button
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.fillStyle = "tan";
                XXX.rect(215, 527, 20, 22);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polypol, 512, 514, 36, 49, 215, 528, 20, 20);

                //Beast Journal menu button
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.fillStyle = "#BBCC96";
                XXX.rect(236, 527, 20, 22);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polypol, 1978, 11, 18, 23, 237, 529, 16.4, 18.4);

                //Quest Log menu button
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.fillStyle = "#D8ADE7";
                XXX.rect(257, 527, 20, 22);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(horde1, 364, 53, 119, 92, 258, 528, 20, 20);

                //saving menu button
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.fillStyle = "white";
                XXX.rect(278, 527, 20, 22);
                XXX.fill();
                XXX.stroke();
                XXX.drawImage(polyPNG, 663, 1, 31, 24, 277, 530, 21, 15.6);
            }
        };

        //This makes it so that clicking will toggle on or off any of the UI icons.
        this.toggleUIIcon = function ()
        {
            //When the inventory button clicked the lowbar becomes the inventory.
            if (mouseX > 152 && mouseX < 172 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar != "inventory")
            {
                lowBar = "inventory";
                if (gameState == "paused")
                {
                    gameState = "active";
                }
            }
            else if (mouseX > 152 && mouseX < 172 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar == "inventory")
            {
                lowBar = "information";
            }

            //When the character/skills button is clicked the entire screen transforms and becomes the character skills section.
            if (mouseX > 173 && mouseX < 193 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar != "skills")
            {
                lowBar = "skills";
                gameState = "paused";
            }
            else if (mouseX > 173 && mouseX < 193 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar == "skills")
            {
                lowBar = "information";
                gameState = "active";
            }

            //When the spellbook button is clicked the lowbar and screen shows the player the spellBook.
            if (mouseX > 194 && mouseX < 214 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar != "spellbook")
            {
                lowBar = "spellbook";
                gameState = "paused";
            }
            else if (mouseX > 194 && mouseX < 214 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar == "spellbook")
            {
                lowBar = "information";
                gameState = "active";
            }

            //When the crafting button is clicked it opens the handcrafting menu.
            if (mouseX > 215 && mouseX < 236 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar != "crafting" || mouseX > 215 && mouseX < 236 && mouseY < 549 && mouseY > 527 && clickReleased == true && crafting != "handcrafted")
            {
                player.craftPosition = 0;
                craftScroll = 0;
                lowBar = "crafting";
                crafting = "handcrafted";
                gameState = "paused";
            }
            else if (mouseX > 215 && mouseX < 236 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar == "crafting" && crafting == "handcrafted")
            {
                lowBar = "information";
                gameState = "active";
            }

            //When the beastJournal button is clicked it shows the player information about creatures they have logged.
            if (mouseX > 236 && mouseX < 257 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar != "beastJournal")
            {
                lowBar = "beastJournal";
                showBeastStat = -1;
                player.inventoryPosition = 0;
                invScroll = 0;
                gameState = "paused";
            }
            else if (mouseX > 236 && mouseX < 257 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar == "beastJournal")
            {
                lowBar = "information";
                player.inventoryPosition = 0;
                invScroll = 0;
                gameState = "active";
            }

            //When the save button is clicked the lowbar shows the player the four saving slots to choose from.
            if (mouseX > 257 && mouseX < 278 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar != "questLog")
            {
                lowBar = "questLog";
                gameState = "paused";
            }
            else if (mouseX > 257 && mouseX < 278 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar == "questLog")
            {
                lowBar = "information";
                gameState = "active";
            }

            //When the save button is clicked the lowbar shows the player the four saving slots to choose from.
            if (mouseX > 278 && mouseX < 299 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar != "save")
            {
                lowBar = "save";
                if (gameState == "paused")
                {
                    gameState = "active";
                }
            }
            else if (mouseX > 278 && mouseX < 299 && mouseY < 549 && mouseY > 527 && clickReleased == true && lowBar == "save")
            {
                lowBar = "information";
                gameState = "active";
            }
        };

        //highlight the selected icon in the user interface.
        this.highlightSelectedUI = function ()
        {
            if (lowBar == "inventory")
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 215, 0, 0.35)";
                XXX.fillRect(152, 527, 20, 23);
            }
            else if (lowBar == "skills")
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 215, 0, 0.35)";
                XXX.fillRect(173, 527, 20, 23);
            }
            else if (lowBar == "spellbook")
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 215, 0, 0.35)";
                XXX.fillRect(194, 527, 20, 23);
            }
            else if (lowBar == "crafting" && crafting == "handcrafted")
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 215, 0, 0.35)";
                XXX.fillRect(215, 527, 20, 23);
            }
            else if (lowBar == "beastJournal")
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 215, 0, 0.35)";
                XXX.fillRect(236, 527, 20, 23);
            }
            else if (lowBar == "questLog")
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 215, 0, 0.35)";
                XXX.fillRect(257, 527, 20, 23);
            }
            else if (lowBar == "save")
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba(255, 215, 0, 0.35)";
                XXX.fillRect(278, 527, 20, 23);
            }
        };

        //MAGIC MENU (Spellbook)
        this.displayMagicMenu = function()
        {
            if (lowBar == "spellbook")
            {
                //MAIN BACKGROUND
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(1, 1, 1398, 526);
                XXX.fill();
                XXX.stroke();

                //Exit bank Button
                //the button part
                if (mouseX > 2 && mouseX < 2 + 148 && mouseY > 529 && mouseY < 529 + 20)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    if (clicked == true)
                    {
                        clicked = false;
                        lowBar = "information";
                        gameState = "active";
                    }
                }
                else
                {
                    XXX.beginPath();
                    XXX.fillStyle = "E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //the text part
                XXX.font = "bold 14px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Exit Spellbook", 75, 543);

                //LowBar (spell type options)
                //Primary Spells (Forms)
                LXX.beginPath();
                if (lMouseX > 1 && lMouseX < 1 + (1400 / 3) && lMouseY > 0 && lMouseY < 80)
                {
                    LXX.fillStyle = "gold";
                }
                else
                {
                    LXX.fillStyle = "lightGrey";
                }
                LXX.strokeStyle = "black";
                LXX.lineWidth = 1;
                LXX.rect(1, 1, 1400 / 3, 78);
                LXX.fill();
                LXX.stroke();
                //text part
                LXX.fillStyle = "black";
                LXX.textAlign = "center";
                if (lMouseX > 1 && lMouseX < 1 + (1400 / 3) && lMouseY > 0 && lMouseY < 80)
                {
                    LXX.font = "bold 16px Book Antiqua";
                    LXX.fillText("Spells that require a physical motion to be performed.", 467 / 2, 45);
                    if (clickReleased)
                    {
                        magicMenu = "primary";
                        magicPos = 0;
                    }
                }
                else
                {
                    LXX.font = "bold 40px Book Antiqua";
                    LXX.fillText("Forms", 467 / 2, 50);
                }
                //Secondary Spells (Incantations)
                LXX.beginPath();
                if (lMouseX > (1400 / 3) && lMouseX < (1400 / 3) + (1400 / 3) && lMouseY > 0 && lMouseY < 80)
                {
                    LXX.fillStyle = "gold";
                }
                else
                {
                    LXX.fillStyle = "lightGrey";
                }
                LXX.strokeStyle = "black";
                LXX.lineWidth = 1;
                LXX.rect((1400 / 3), 1, 1400 / 3, 78);
                LXX.fill();
                LXX.stroke();
                //text part
                LXX.fillStyle = "black";
                LXX.textAlign = "center";
                if (lMouseX > (1400 / 3) && lMouseX < (1400 / 3) + (1400 / 3) && lMouseY > 0 && lMouseY < 80)
                {
                    LXX.font = "bold 16px Book Antiqua";
                    LXX.fillText("Spells cast by speaking magical words.", 467 + 467 / 2, 45);
                    if (clickReleased)
                    {
                        magicMenu = "secondary";
                        magicPos = 0;
                    }
                }
                else
                {
                    LXX.font = "bold 40px Book Antiqua";
                    LXX.fillText("Incantations", 467 + 467 / 2, 50);
                }
                //Passive Spells (Binds)
                LXX.beginPath();
                if (lMouseX > (1400 * 2 / 3) - 1 && lMouseX < (1400 * 2 / 3) - 1 + (1400 / 3) && lMouseY > 0 && lMouseY < 80)
                {
                    LXX.fillStyle = "gold";
                }
                else
                {
                    LXX.fillStyle = "lightGrey";
                }
                LXX.strokeStyle = "black";
                LXX.lineWidth = 1;
                LXX.rect((1400 * 2 / 3) - 1, 1, 1400 / 3, 78);
                LXX.fill();
                LXX.stroke();
                //text part
                LXX.fillStyle = "black";
                LXX.textAlign = "center";
                if (lMouseX > (1400 * 2 / 3) - 1 && lMouseX < (1400 * 2 / 3) - 1 + (1400 / 3) && lMouseY > 0 && lMouseY < 80)
                {
                    LXX.font = "bold 16px Book Antiqua";
                    LXX.fillText("Passive spells cast directly from the soul.", 467 * 2 + 467 / 2, 45);
                    if (clickReleased)
                    {
                        magicMenu = "tertiary";
                        magicPos = 0;
                    }
                }
                else
                {
                    LXX.font = "bold 40px Book Antiqua";
                    LXX.fillText("Binds", 467 * 2 + 467 / 2, 50);
                }

                //___________________________|
                //Magical Knowledge Inventory
                //---------------------------\
                if (magicMenu == "primary")
                {
                    for (var i = 0; i < primarySpells.length; i++)
                    {
                        if (80 * i - (-24 + (magicPos * 80)) >= 24 && 80 * i - (-24 + (magicPos * 80)) <= 501)
                        {
                            XXX.beginPath();
                            XXX.strokeStyle = "black";
                            XXX.lineWidth = 2;
                            XXX.fillStyle = "lightBlue";
                            if (primarySpells[i].equipped)
                            {
                                XXX.fillStyle = "#007ba7";
                            }
                            XXX.rect(100, 80 * i - (-24 + (magicPos * 80)), 1200, 80);
                            XXX.fill();
                            XXX.stroke();

                            if (mouseX > 100 && mouseX < 1300 && mouseY > 80 * i - (-24 + (magicPos * 80)) && mouseY < 80 * i - (-24 + (magicPos * 80)) + 80)
                            {
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center";
                                XXX.font = "bold 16px Book Antiqua";
                                XXX.fillText(primarySpells[i].description, 700, 45 + 80 * i - (-24 + (magicPos * 80)));

                                if (clicked)
                                {
                                    clicked = false;
                                    if (primarySpells[i].equipped)
                                    {
                                        this.spell = "none";
                                        primarySpells[i].equipped = false;
                                    }
                                    else
                                    {
                                        for (var j = 0; j < primarySpells.length; j++)
                                        {
                                            if (primarySpells[j].equipped)
                                            {
                                                primarySpells[j].equipped = false;
                                            }
                                        }

                                        if (this.weaponEquipped == "none")
                                        {
                                            primarySpells[i].equipped = true;
                                            this.spell = primarySpells[i];
                                        }
                                    }
                                }
                            }
                            else
                            {
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center";
                                XXX.font = "bold 40px Book Antiqua";
                                XXX.fillText(primarySpells[i].name + "  ( " + Math.floor(primarySpells[i].cost) + " )" , 700, 50 + 80 * i - (-24 + (magicPos * 80)));
                            }
                        }
                    }
                }
                else if (magicMenu == "secondary")
                {
                    for (var i = 0; i < secondarySpells.length; i++)
                    {
                        var hits = 0;
                        for (var j = 0; j < secondarySpells.length; j++)
                        {
                            if (secondarySpells[j].equipped == false)
                            {
                                hits += 1;
                            }
                        }
                        if (hits == secondarySpells.length)
                        {
                            this.spellSlotsUsed = 0;
                        }

                        if (80 * i - (-24 + (magicPos * 80)) >= 24 && 80 * i - (-24 + (magicPos * 80)) <= 501)
                        {
                            XXX.beginPath();
                            XXX.strokeStyle = "black";
                            XXX.lineWidth = 2;
                            XXX.fillStyle = "lightBlue";
                            if (secondarySpells[i].equipped)
                            {
                                XXX.fillStyle = "#007ba7";
                            }
                            XXX.rect(100, 80 * i - (-24 + (magicPos * 80)), 1200, 80);
                            XXX.fill();
                            XXX.stroke();

                            if (mouseX > 100 && mouseX < 1300 && mouseY > 80 * i - (-24 + (magicPos * 80)) && mouseY < 80 * i - (-24 + (magicPos * 80)) + 80)
                            {
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center";
                                XXX.font = "bold 16px Book Antiqua";
                                XXX.fillText(secondarySpells[i].description, 700, 45 + 80 * i - (-24 + (magicPos * 80)));

                                if (clicked && secondarySpells[i].equipped != false)
                                {
                                    clicked = false;
                                    secondarySpells[i].equipped = false;
                                    this.spellSlotsUsed -= 1;
                                }

                                if (key1 || key2 || key3 || key4 || key5 || key6 || key7 || key8 || key9)
                                {
                                    for (var j = 0; j < secondarySpells.length; j++)
                                    {
                                        if (secondarySpells[j].equipped == 1 && key1 || secondarySpells[j].equipped == 2 && key2 || secondarySpells[j].equipped == 3 && key3 || secondarySpells[j].equipped == 4 && key4 || secondarySpells[j].equipped == 5 && key5 || secondarySpells[j].equipped == 6 && key6 || secondarySpells[j].equipped == 7 && key7 || secondarySpells[j].equipped == 8 && key8 || secondarySpells[j].equipped == 9 && key9)
                                        {
                                            secondarySpells[j].equipped = false;
                                            this.spellSlotsUsed -= 1;
                                        }
                                    }

                                    if (this.spellSlotsUsed < this.spellSlots)
                                    {
                                        this.spellSlotsUsed += 1;
                                        if (key1)
                                        {
                                            secondarySpells[i].equipped = 1;
                                            this.sp1 = secondarySpells[i];
                                        }
                                        else if (key2)
                                        {
                                            secondarySpells[i].equipped = 2;
                                            this.sp2 = secondarySpells[i];
                                        }
                                        else if (key3)
                                        {
                                            secondarySpells[i].equipped = 3;
                                            this.sp3 = secondarySpells[i];
                                        }
                                        else if (key3)
                                        {
                                            secondarySpells[i].equipped = 3;
                                            this.sp3 = secondarySpells[i];
                                        }
                                        else if (key4)
                                        {
                                            secondarySpells[i].equipped = 4;
                                            this.sp4 = secondarySpells[i];
                                        }
                                        else if (key5)
                                        {
                                            secondarySpells[i].equipped = 5;
                                            this.sp5 = secondarySpells[i];
                                        }
                                        else if (key6)
                                        {
                                            secondarySpells[i].equipped = 6;
                                            this.sp6 = secondarySpells[i];
                                        }
                                        else if (key7)
                                        {
                                            secondarySpells[i].equipped = 7;
                                            this.sp7 = secondarySpells[i];
                                        }
                                        else if (key8)
                                        {
                                            secondarySpells[i].equipped = 8;
                                            this.sp8 = secondarySpells[i];
                                        }
                                        else if (key9)
                                        {
                                            secondarySpells[i].equipped = 9;
                                            this.sp9 = secondarySpells[i];
                                        }
                                    }
                                }
                            }
                            else
                            {
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center";
                                XXX.font = "bold 40px Book Antiqua";
                                XXX.fillText(secondarySpells[i].name + "  ( " + Math.floor(secondarySpells[i].cost) + " )" , 700, 50 + 80 * i - (-24 + (magicPos * 80)));

                                if (secondarySpells[i].equipped != false)
                                {
                                    XXX.fillStyle = "black";
                                    XXX.textAlign = "center";
                                    XXX.font = "bold 20px Book Antiqua";
                                    XXX.fillText(secondarySpells[i].equipped, 1275, 50 + 80 * i - (-24 + (magicPos * 80)));
                                }
                            }
                        }
                    }
                }
                if (magicMenu == "tertiary")
                {
                    for (var i = 0; i < tertiarySpells.length; i++)
                    {
                        if (80 * i - (-24 + (magicPos * 80)) >= 24 && 80 * i - (-24 + (magicPos * 80)) <= 501)
                        {
                            XXX.beginPath();
                            XXX.strokeStyle = "black";
                            XXX.lineWidth = 2;
                            XXX.fillStyle = "lightBlue";
                            if (tertiarySpells[i].equipped)
                            {
                                XXX.fillStyle = "#007ba7";
                            }
                            XXX.rect(100, 80 * i - (-24 + (magicPos * 80)), 1200, 80);
                            XXX.fill();
                            XXX.stroke();

                            if (mouseX > 100 && mouseX < 1300 && mouseY > 80 * i - (-24 + (magicPos * 80)) && mouseY < 80 * i - (-24 + (magicPos * 80)) + 80)
                            {
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center";
                                XXX.font = "bold 16px Book Antiqua";
                                XXX.fillText(tertiarySpells[i].description, 700, 45 + 80 * i - (-24 + (magicPos * 80)));

                                if (clicked)
                                {
                                    clicked = false;
                                    if (tertiarySpells[i].equipped)
                                    {
                                        tertiarySpells[i].equipped = false;
                                        for (var j = 0; j < this.passiveSpellsEquipped.length; j++)
                                        {
                                            if (tertiarySpells[i].ID == this.passiveSpellsEquipped[j].ID)
                                            {
                                                this.passiveSpellsEquipped.splice(j, 1);
                                                break;
                                            }

                                        }
                                    }
                                    else
                                    {
                                        tertiarySpells[i].equipped = true;
                                        this.passiveSpellsEquipped.push(tertiarySpells[i]);
                                    }
                                }
                            }
                            else
                            {
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center";
                                XXX.font = "bold 40px Book Antiqua";
                                XXX.fillText(tertiarySpells[i].name + "  ( " + Math.floor(tertiarySpells[i].cost) + " )" , 700, 50 + 80 * i - (-24 + (magicPos * 80)));
                            }
                        }
                    }
                }
                //scroll arrows /\  \/
                XXX.save();
                XXX.translate(700, 11);
                XXX.rotate(1/2 * Math.PI);
                //XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12 * 2, 0 - 1/2 * 64 * 2, 12 * 2, 64 * 2);
                XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12, 0 - 1/2 * 64, 12, 64);
                XXX.restore();

                XXX.save();
                XXX.translate(700, 517);
                XXX.rotate(- 1/2 * Math.PI);
                //XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12  * 2, 0 - 1/2 * 64  * 2, 12 * 2, 64 * 2);
                XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12, 0 - 1/2 * 64, 12, 64);
                XXX.restore();

                //set and track the current spell menu.
                if (magicMenu == "primary")
                {
                    currentMagicMenu = primarySpells;
                }
                else if (magicMenu == "secondary")
                {
                    currentMagicMenu = secondarySpells;
                }
                else if (magicMenu == "tertiary")
                {
                    currentMagicMenu = tertiarySpells;
                }

                if (mouseX > (700 - 64) && mouseX < (700 + 64) && mouseY > 13 - 12 && mouseY < 13 + 12 && clicked && magicPos > 0)
                {
                    clicked = false;
                    magicPos -= 1;
                }
                else if (mouseX > (700 - 64) && mouseX < (700 + 64) && mouseY > 515 - 12 && mouseY < 515 + 12 && clicked && magicPos + 6 < currentMagicMenu.length)
                {
                    clicked = false;
                    magicPos += 1;
                }
            }
        };

        //DIALOGUE
        this.displayDialogue = function()
        {
            if (lowBar == "dialogue")
            {
                //setUp Dialogue
                LXX.fillStyle = "black";
                LXX.font = "bold 20px Book Antiqua";
                LXX.textAlign = "center";

                if (this.dialogueOptions.length > 0)
                {
                    LXX.fillText(this.dialogueOptions[this.dialoguePosition][0], 700, 45);
                }

                //Scrolling through dialogue options
                    //left scroll arrow
                LXX.beginPath();
                LXX.lineWidth = 1;
                LXX.fillStyle ="darkGrey";
                LXX.strokeStyle ="black";
                LXX.rect(0.5, 0.5, 20, 79);
                LXX.fill();
                LXX.stroke();
                LXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //right scroll arrow
                LXX.beginPath();
                LXX.lineWidth = 1;
                LXX.fillStyle ="darkGrey";
                LXX.strokeStyle ="black";
                LXX.rect(1379.5, 0.5, 20, 79);
                LXX.fill();
                LXX.stroke();
                LXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);

                this.dialogueScrolling = function()
                {
                    if (playersTurnToSpeak)
                    {
                        if (this.dialogueChoiceMade == false && this.dialogueOptions.length >= 1)
                        {
                            this.speechMovementInhibitor = false;
                            if (lMouseX > 20.5 && lMouseX <= 1379.5 && lMouseY < 79.5 && lMouseY >= 0.5 && clicked == true)
                            {
                                clicked = false;

                                LXX.beginPath();
                                LXX.fillStyle = "rgba(255,215,0, 0.55)";
                                LXX.fillRect(20.5, 0.5, 1359, 79);

                                this.dialogueOptions[this.dialoguePosition][1] = true;
                                this.dialogueChoiceMade = true;
                            }
                            else if (lMouseX > 20.5 && lMouseX <= 1379.5 && lMouseY < 79.5 && lMouseY >= 0.5)
                            {
                                LXX.beginPath();
                                LXX.fillStyle = "rgba(255,215,0, 0.25)";
                                LXX.fillRect(20.5, 0.5, 1359, 79);
                            }

                            else if (this.dialoguePosition > 0 && lMouseX >= 0.5 && lMouseX <= 20.5 && lMouseY <= 79.5 && lMouseY >= 0.5 && clicked == true)
                            {
                                clicked = false;
                                this.dialoguePosition -= 1;
                            }
                            if (this.dialoguePosition < (this.dialogueOptions.length - 1) && lMouseX >= 1379.5 && lMouseX <= 1399.5 && lMouseY <= 79.5 && lMouseY >= 0.5 && clicked == true)
                            {
                                clicked = false;
                                this.dialoguePosition += 1;
                            }
                        }
                    }
                    else
                    {
                        this.speechMovementInhibitor = true;
                    }
                };
                //operations
                this.dialogueScrolling();
            }
        };

        //CRAFTING
        this.displayCrafting = function()
        {
            if (lowBar == "crafting" && crafting != "none")
            {
                //MAIN BACKGROUND
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(1, 1, 1398, 526);
                XXX.fill();
                XXX.stroke();

                //Exit bank Button
                //the button part
                if (mouseX > 2 && mouseX < 2 + 148 && mouseY > 529 && mouseY < 529 + 20)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    if (clicked == true)
                    {
                        clicked = false;
                        lowBar = "information";
                        gameState = "active";
                    }
                }
                else
                {
                    XXX.beginPath();
                    XXX.fillStyle = "E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //the text part
                XXX.font = "bold 14px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Exit Crafting Menu", 75, 543);

                //line between bank account and description
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 2;
                XXX.moveTo(0, 80);
                XXX.lineTo(1400, 80);
                XXX.stroke();

                //Determine which type of crafting menu to show...
                var preCraftMenu = 0;
                var craftMenu = [];

                if (crafting == "smithing")
                {
                    preCraftMenu = smithing;
                }
                else if (crafting == "foods")
                {
                    preCraftMenu = foods;
                }
                else if (crafting == "tailoring")
                {
                    preCraftMenu = tailoring;
                }
                else if (crafting == "jewelry")
                {
                    preCraftMenu = jewelry;
                }
                else if (crafting == "alchemy")
                {
                    preCraftMenu = alchemy;
                }
                else if (crafting == "forging")
                {
                    preCraftMenu = forge;
                }
                else if (crafting == "brewing")
                {
                    preCraftMenu = brewing;
                }
                else if (crafting == "handcrafted")
                {
                    preCraftMenu = handcrafted;
                }

                for (var i = 0; i < preCraftMenu.length; i++)
                {
                    if (this.getIntelligence() >= preCraftMenu[i].intForCraft)
                    {
                        craftMenu.push(preCraftMenu[i]);
                    }
                }

                //CRAFTING MENU
                this.showCrafting = function()
                {
                    // each inventory slot is a list with three things in it... [Item, quantity]
                    for (var i = 0; i < craftMenu.length; i++)
                    {
                        XXX.beginPath();
                        XXX.lineWidth = 2;
                        //XXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                        var hits = 0;
                        var requirementsMet = false;
                        for (var j = 0; j < craftMenu[i].ingredients.length; j++)
                        {
                            for (var k = 0; k < Inventory.length; k++)
                            {
                                if (craftMenu[i].ingredients[j][0] == Inventory[k][0].identity && craftMenu[i].ingredients[j][1] <= Inventory[k][1])
                                {
                                    hits += 1;
                                }
                            }
                        }
                        if (hits == craftMenu[i].ingredients.length)
                        {
                            requirementsMet = true
                        }

                        if (requirementsMet)
                        {
                            XXX.fillStyle ="rgba(0, 238, 0, 0.45)";
                            //XXX.strokeStyle ="darkGreen";
                            XXX.strokeStyle ="black";
                        }
                        else
                        {
                            XXX.fillStyle ="rgba(238, 0, 0, 0.45)";
                            //XXX.strokeStyle ="red";
                            XXX.strokeStyle ="black";
                        }

                        XXX.rect(craftScroll + 20.5 + (79 * i), 0.5, 79, 79);
                        XXX.fill();
                        XXX.stroke();

                        //image
                        craftMenu[i].drawShopCraftItem(craftMenu[i].type, craftScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                    }

                    //left scroll arrow
                    XXX.beginPath();
                    XXX.lineWidth = 1;
                    XXX.fillStyle ="darkGrey";
                    XXX.strokeStyle ="black";
                    XXX.rect(0.5, 0.5, 20, 79);
                    XXX.fill();
                    XXX.stroke();
                    XXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //right scroll arrow
                    XXX.beginPath();
                    XXX.lineWidth=1;
                    XXX.fillStyle ="darkGrey";
                    XXX.strokeStyle ="black";
                    XXX.rect(1379.5, 0.5, 20, 79);
                    XXX.fill();
                    XXX.stroke();
                    XXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
                };

                this.craftScrolling = function()
                {
                    //When the left inventory scroll is clicked scroll one to the left if there is one to the left otherwise don't.
                    if (this.craftPosition < craftMenu.length && mouseX > 1379.5 && mouseX < 1399.5 && mouseY > 0.5 && mouseY < 80 && clickReleased == true) //this (20.5, 0.5, 79, 79) is the position the first in the list will be in if the left scroll will not work.
                    {
                        craftScroll -= 79;
                        this.craftPosition += 1;
                    }

                    //When the right inventory scroll is clicked scroll one to the right if there is one to the right otherwise don't.
                    if (this.craftPosition > 0 && mouseX > 0.5 && mouseX < 20.5 && mouseY > 0.5 && mouseY < 80 && clickReleased == true)
                    {
                        craftScroll += 79;
                        this.craftPosition -= 1;
                    }
                };

                this.craftingInteract = function()
                {
                    var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

                    for (var i = -this.craftPosition; i < craftMenu.length - this.craftPosition; i++)
                    {
                        listOfInvX1Coords.push(20.5 + (79 * i));
                    }


                    var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

                    for (var i = -this.craftPosition; i < craftMenu.length - this.craftPosition; i++)
                    {
                        listOfInvX2Coords.push(20.5 + (79 * i) + 79);
                    }


                    var invY1Coord = 0.5; //This doesn't change.


                    var invY2Coord = 79.5; //this is just Y + 79

                    for (var i = craftMenu.length - 1; i > -1; i--)
                    {
                        if (mouseX >= 21 && mouseX <= 1329  && mouseY < 80) //This checks if the mouse is between the scroll buttons rather than on them.
                        {
                            if (clickReleased == true && mouseX > listOfInvX1Coords[i] && mouseX < listOfInvX2Coords[i] && mouseY > invY1Coord && mouseY < invY2Coord && this.REQB == false)
                            {
                                var hits = 0;
                                for (var l = 0; l < craftMenu[i].ingredients.length; l++)
                                {
                                    for (var p = 0; p < Inventory.length; p++)
                                    {
                                        if (craftMenu[i].ingredients[l][0] == Inventory[p][0].identity && craftMenu[i].ingredients[l][1] <= Inventory[p][1])
                                        {
                                            hits += 1;
                                        }
                                    }
                                }

                                var deleteIngredients = [];
                                if (hits == craftMenu[i].ingredients.length)
                                {
                                    for (var l = 0; l < craftMenu[i].ingredients.length; l++)
                                    {
                                        for (var p = 0; p < Inventory.length; p++)
                                        {
                                            if (craftMenu[i].ingredients[l][0] == Inventory[p][0].identity)
                                            {
                                                deleteIngredients.push([p, craftMenu[i].ingredients[l][1]]);
                                            }
                                        }
                                    }
                                    var listToDelete = [];
                                    for (var q = 0; q < deleteIngredients.length; q++) //todo there was a problem with crafting here....
                                    {
                                        //console.log(Inventory);
                                        //console.log(q);
                                        //console.log(deleteIngredients[q][0]);
                                        if (Inventory[deleteIngredients[q][0]][1] - deleteIngredients[q][1] == 0)
                                        {
                                            listToDelete.push(deleteIngredients[q][0]);
                                        }
                                        else
                                        {
                                            Inventory[deleteIngredients[q][0]][1] -= deleteIngredients[q][1];
                                        }
                                    }

                                    //console.log(listToDelete);
                                    for (var n = Inventory.length - 1; n > 0; n--)
                                    {
                                        for (var m = 0; m < listToDelete.length; m++)
                                        {
                                            if (listToDelete[m] == n)
                                            {
                                                Inventory.splice(n, 1);
                                            }
                                        }
                                    }
                                    //put the newly crafted creation into a pre-existing stack or a new one.
                                    var craftIt = -1;
                                    for (var l = 0; l < Inventory.length; l++)
                                    {
                                        if (Inventory[l][0].type == craftMenu[i].type)
                                        {
                                            craftIt = l;
                                            break;
                                        }
                                    }
                                    if (craftIt != -1)
                                    {
                                        Inventory[craftIt][1] += craftMenu[i].yield;
                                    }
                                    else
                                    {
                                        Inventory.push([craftMenu[i], craftMenu[i].yield]);
                                    }

                                    //give the player any created biproducts of the crafting recipe. (items that accompany the main item being crafted.)
                                    for (var bi = 0; bi < craftMenu[i].biproducts.length; bi ++)
                                    {
                                        craftIt = -1;
                                        for (var l = 0; l < Inventory.length; l++)
                                        {
                                            if (Inventory[l][0].type == craftMenu[i].biproducts[bi][0])
                                            {
                                                craftIt = l;
                                                break;
                                            }
                                        }
                                        if (craftIt != -1)
                                        {
                                            Inventory[craftIt][1] += craftMenu[i].biproducts[bi][1];
                                        }
                                        else
                                        {
                                            Inventory.push([craftMenu[i].biproducts[bi][0], craftMenu[i].biproducts[bi][1]]);
                                        }
                                    }
                                }
                            }
                            else if (mouseX > listOfInvX1Coords[i] && mouseX < listOfInvX2Coords[i] && mouseY > invY1Coord && mouseY < invY2Coord) //give the name of the Item and its stats when hovered over.
                            {

                                //The Name of the Item
                                XXX.font = "bold 40px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(craftMenu[i].identity, 1/2 * CCC.width, 150);

                                var recipe = [];
                                var anti = [];
                                var punch = 0;
                                for (var l = 0; l < craftMenu[i].ingredients.length; l++)
                                {
                                    punch = 0;
                                    for (var p = 0; p < Inventory.length; p++)
                                    {
                                        if (Inventory[p][0].identity == craftMenu[i].ingredients[l][0])
                                        {
                                            punch = 1;
                                        }

                                        if (punch)
                                        {
                                            if (craftMenu[i].ingredients[l][0] == Inventory[p][0].identity && craftMenu[i].ingredients[l][1] <= Inventory[p][1])
                                            {
                                                var preRecipe = craftMenu[i].ingredients[l][0] + " x " + craftMenu[i].ingredients[l][1];
                                                recipe.push(preRecipe);
                                            }
                                            else if (craftMenu[i].ingredients[l][0] == Inventory[p][0].identity && craftMenu[i].ingredients[l][1] >= Inventory[p][1])
                                            {
                                                var preRecipe = craftMenu[i].ingredients[l][0] + " x " + craftMenu[i].ingredients[l][1];
                                                anti.push(preRecipe);
                                            }
                                        }
                                    }
                                    if (!punch)
                                    {
                                        var preRecipe = craftMenu[i].ingredients[l][0] + " x " + craftMenu[i].ingredients[l][1];
                                        anti.push(preRecipe);
                                    }
                                }
                                //console.log(anti);
                                //Ingredient Info (normal: ingredients that you do have)
                                XXX.font = "bold 32px Book Antiqua";
                                XXX.fillStyle = "darkGreen";
                                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(recipe.join("    "), 1/2 * CCC.width, 300);

                                //Ingredient Info (anti: missing ingredients)
                                XXX.font = "bold 32px Book Antiqua";
                                XXX.fillStyle = "crimson";
                                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(anti.join("    "), 1/2 * CCC.width, 500);
                            }
                        }
                    }
                };

                this.displayCrafterInventory = function()
                {
                    // each inventory slot is a list with three things in it... [Item, quantity]
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].equipped == true)
                        {
                            LXX.beginPath();
                            LXX.lineWidth = 2;
                            LXX.fillStyle ="rgba(102, 255, 102, 0.35)";
                            LXX.strokeStyle ="black";
                            LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                            LXX.fill();
                            LXX.stroke();
                            Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                            //quantity
                            LXX.font="16px Book Antiqua";
                            LXX.textAlign="left";
                            LXX.fillStyle ="black";
                            if (Inventory[i][1] < 1000)
                            {
                                LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                            {
                                LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000000)
                            {
                                LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            //weight
                            LXX.font="10px Book Antiqua";
                            LXX.fillStyle ="black";
                            LXX.textAlign="right";
                            LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                            LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                        }
                        else
                        {
                            LXX.beginPath();
                            LXX.lineWidth = 2;
                            LXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                            LXX.strokeStyle ="black";
                            LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                            LXX.fill();
                            LXX.stroke();
                            Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                            //quantity
                            LXX.font="16px Book Antiqua";
                            LXX.textAlign="left";
                            LXX.fillStyle ="black";
                            if (Inventory[i][1] < 1000)
                            {
                                LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                            {
                                LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000000)
                            {
                                LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            //weight
                            LXX.font="10px Book Antiqua";
                            LXX.fillStyle ="black";
                            LXX.textAlign="right";
                            LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                            LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                        }
                    }

                    //left scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth = 1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(0.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //weight display
                    LXX.beginPath();
                    LXX.fillStyle ="lightGray";
                    LXX.strokeStyle ="black";
                    LXX.rect(1329.5, 0.1, 50, 79.8);
                    LXX.fill();
                    LXX.stroke();
                    //Draw a cover on the weight display to represent the amount of carry weight filled.
                    LXX.beginPath();
                    //LXX.fillStyle ="rgba(255, 255, 255, 0.65)"; //white fill in colour
                    //LXX.fillStyle ="rgba(139, 134, 78, 0.8)"; //beige fill in colour
                    //LXX.fillStyle = "rgba(138, 54, 15, 0.65)"; //burnt sienna colour
                    LXX.fillStyle ="grey";
                    LXX.rect(1329.6, 79.5, 50, -79 * this.carryWeight / this.carryWeightMAX);
                    LXX.fill();
                    //Draw the weight number on the top and bottom and the deviding bar.
                    LXX.font="16px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign="center";
                    LXX.fillText(JSON.stringify(Math.floor(this.carryWeight)), 1352, 25);
                    //dividing line
                    LXX.beginPath();
                    LXX.strokeStyle="black";
                    LXX.lineWidth=3;
                    LXX.moveTo(1334, 39.5);
                    LXX.lineTo(1374, 39.5);
                    LXX.stroke();
                    //divisor
                    LXX.font="16px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign="center";
                    LXX.fillText(JSON.stringify(Math.floor(this.carryWeightMAX)), 1352, 64.5);
                    LXX.textAlign="left"; //this is to reset it to the standard for the rest to come.

                    //right scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth=1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(1379.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
                };
                this.crafterInventoryInteract = function()
                {
                    var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX1Coords.push(20.5 + (79 * i));
                    }


                    var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX2Coords.push(20.5 + (79 * i) + 79);
                    }


                    var invY1Coord = 0.5; //This doesn't change.


                    var invY2Coord = 79.5; //this is just Y + 79

                    for (var i = Inventory.length - 1; i > -1; i--)
                    {
                        if (lMouseX >= 21 && lMouseX <= 1329) //This checks if the mouse is between the scroll buttons rather than on them.
                        {
                            if (lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord) //give the name of the Item and its stats when hovered over.
                            {
                                var sizer = 0;

                                for (var k = 0; k < Inventory[i][0].identity.length; k++)
                                {
                                    if (Inventory[i][0].identity[k] == "'")
                                    {
                                        sizer += 1;
                                    }
                                    else if (Inventory[i][0].identity[k].indexOf(' ') != -1)
                                    {
                                        sizer += 0;
                                    }
                                    else if (Inventory[i][0].identity[k] == Inventory[i][0].identity[k].toUpperCase() )
                                    {
                                        sizer += 17; //9.21;
                                    }
                                    else if (Inventory[i][0].identity[k] == Inventory[i][0].identity[k].toLowerCase())
                                    {
                                        sizer += 12;
                                    }
                                }

                                XXX.beginPath();
                                XXX.fillStyle="white";
                                XXX.fillRect(3, 503, sizer, 22);
                                //The Name of the Item
                                XXX.font = "bold 22px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(Inventory[i][0].identity, 4, 522);
                            }
                        }
                    }
                };

                //OPERATIONS
                this.displayCrafterInventory();
                this.crafterInventoryInteract();
                this.showCrafting();
                this.craftScrolling();
                this.craftingInteract();
            }
        };

        //BEAST JOURNAL
        this.displayBeastJournal = function()
        {
            if (lowBar == "beastJournal")
            {
                //MAIN BACKGROUND
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(1, 1, 1398, 526);
                XXX.fill();
                XXX.stroke();

                //Exit bank Button
                //the button part
                if (mouseX > 2 && mouseX < 2 + 148 && mouseY > 529 && mouseY < 529 + 20)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    if (clicked == true)
                    {
                        clicked = false;
                        lowBar = "information";
                        gameState = "active";
                    }
                }
                else
                {
                    XXX.beginPath();
                    XXX.fillStyle = "E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //the text part
                XXX.font = "bold 14px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Exit Beast Journal", 75, 543);

                //DISPLAY PLAYER'S INVENTORY
                this.showBeastBar = function()
                {
                    // each inventory slot is a list with three things in it... [Item, quantity]
                    for (var i = 0; i < beastJournal.length; i++)
                    {

                        LXX.beginPath();
                        LXX.lineWidth = 2;
                        LXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                        LXX.strokeStyle ="black";
                        LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                        LXX.fill();
                        LXX.stroke();
                        LXX.save();
                        LXX.translate(invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                        //sourcing image from list: beastJournal -- each element in which is an object.
                        //              IMG                         Start X                    Start Y                  Width                      Height                        Centering X            +  Adjust X                            Centering Y          +  Adjust Y                       SizeX                    SizeY
                        LXX.drawImage(beastJournal[i].image[0], beastJournal[i].image[1], beastJournal[i].image[2], beastJournal[i].image[3], beastJournal[i].image[4], -1/2 * beastJournal[i].image[7] + beastJournal[i].image[5], -1/2 * beastJournal[i].image[8] + beastJournal[i].image[6], beastJournal[i].image[7], beastJournal[i].image[8])
                        LXX.restore();
                    }

                    //left scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth = 1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(0.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //right scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth=1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(1379.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
                };

                //Show Beast Stats
                this.showBeastStats = function()
                {
                    var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX1Coords.push(20.5 + (79 * i));
                    }


                    var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX2Coords.push(20.5 + (79 * i) + 79);
                    }


                    var invY1Coord = 0.5; //This doesn't change.


                    var invY2Coord = 79.5; //this is just Y + 79

                    for (var i = beastJournal.length - 1; i > -1; i--)
                    {
                        if (lMouseX >= 21 && lMouseX <= 1329) //This checks if the mouse is between the scroll buttons rather than on them.
                        {
                            if (clickReleased == true && lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord && this.REQB == false) //When you click on a beast it shows you its information.
                            {
                                showBeastStat = i;
                            }
                        }
                    }

                    if (showBeastStat != -1) //Show the stats of the clicked on beast in the list
                    {
                        //The Name of the Beast
                        XXX.font = "bold 42px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText(beastJournal[showBeastStat].name, 1/2 * CCC.width, 50);

                        for (var i = 0; i < beastJournal[showBeastStat].description.length; i++)
                        {
                            //The description of the Beast
                            XXX.font = "bold 20px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText(beastJournal[showBeastStat].description[i], 1/2 * CCC.width, 85 + (i * 25));
                        }

                        //FIRST ROW
                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Health: " + beastJournal[showBeastStat].health, 4, 25 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Armour: " + beastJournal[showBeastStat].armour, 224, 25 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Damage: " + beastJournal[showBeastStat].damage, 444, 25 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Armour Negation: " + beastJournal[showBeastStat].negate, 664, 25 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Ability: " + beastJournal[showBeastStat].ability, 944, 25 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Fire-Proofing: " + beastJournal[showBeastStat].fireProof, 1204, 25 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //SECOND ROW
                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Habitat: " + beastJournal[showBeastStat].habitat, 4, 100 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Variety: " + beastJournal[showBeastStat].alpha, 364, 100 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Longest Range of Sight: " + beastJournal[showBeastStat].sight, 624, 100 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Magic-Proofing: " + beastJournal[showBeastStat].magicProof, 944, 100 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Vital Area Radius: " + beastJournal[showBeastStat].size, 1174, 100 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //THIRD ROW
                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Movement Speed: " + beastJournal[showBeastStat].speed, 4, 175 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Rotation Speed: " + beastJournal[showBeastStat].rotation, 304, 175 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Attack Rate: " + beastJournal[showBeastStat].rate, 604, 175 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));

                        //The description of the Beast
                        XXX.font = "bold 20px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText("Experience Earned For Killing: " + beastJournal[showBeastStat].experience, 944, 175 + ( 85 + (beastJournal[showBeastStat].description.length * 25)));
                    }
                };

                this.beastBarScrolling = function()
                {
                    //When the left inventory scroll is clicked scroll one to the left if there is one to the left otherwise don't.
                    if (this.inventoryPosition < beastJournal.length && lMouseX > 1379.5 && lMouseX < 1399.5 && lMouseY > 0.5 && lMouseY < 80 && clickReleased == true) //this (20.5, 0.5, 79, 79) is the position the first in the list will be in if the left scroll will not work.
                    {
                        this.timeSinceLastScrolled = new Date().getTime();
                        invScroll -= 79;
                        this.inventoryPosition += 1;
                    }

                    //When the right inventory scroll is clicked scroll one to the right if there is one to the right otherwise don't.
                    if (this.inventoryPosition > 0 && lMouseX > 0.5 && lMouseX < 20.5 && lMouseY > 0.5 && lMouseY < 80 && clickReleased == true)
                    {
                        this.timeSinceLastScrolled = new Date().getTime();
                        invScroll += 79;
                        this.inventoryPosition -= 1;
                    }
                };

                this.beastBarScrolling();
                this.showBeastBar();
                this.showBeastStats();
            }
        };

        //QUEST LOG
        this.displayQuestLog = function()
        {
            if (lowBar == "questLog")
            {
                //MAIN BACKGROUND
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(1, 1, 1398, 526);
                XXX.fill();
                XXX.stroke();

                //Fame Box
                if (mouseX > 2 && mouseX < 2 + 148 && mouseY > 529 && mouseY < 529 + 20)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    //the text part
                    XXX.font = "bold 14px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(player.fame, 75, 543);
                }
                else
                {
                    XXX.beginPath();
                    XXX.fillStyle = "E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    //the text part
                    XXX.font = "bold 14px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText("Fame", 75, 543);
                }

                //low bar controls which quests you see.
                if (lMouseY > 0 && lMouseY < 80)
                {
                    if (clicked)
                    {
                        clicked = false;

                        questScroll = 0;

                        if (quests.questMenu == "active")
                        {
                            quests.questMenu = "complete";
                        }
                        else if (quests.questMenu == "complete")
                        {
                            quests.questMenu = "active";
                        }
                    }
                }

                if (quests.questMenu == "active")
                {
                    //the text
                    LXX.font = "bold 46px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign = "center";
                    LXX.fillText("Active Quests ( " + quests.activeQuests.length + " )", 1398 / 2, 55);
                }
                else if (quests.questMenu == "complete")
                {
                    //the text
                    LXX.font = "bold 46px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign = "center";
                    LXX.fillText("Completed Quests ( " + quests.completeQuests.length + " )", 1398 / 2, 55);
                }

                this.questScrolling = function()
                {
                    //scroll arrows /\  \/
                    XXX.save();
                    XXX.translate(700, 11);
                    XXX.rotate(1/2 * Math.PI);
                    //XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12 * 2, 0 - 1/2 * 64 * 2, 12 * 2, 64 * 2);
                    XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12, 0 - 1/2 * 64, 12, 64);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(700, 517);
                    XXX.rotate(- 1/2 * Math.PI);
                    //XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12  * 2, 0 - 1/2 * 64  * 2, 12 * 2, 64 * 2);
                    XXX.drawImage(polyPNG, 1, 735, 11, 30, 0 - 1/2 * 12, 0 - 1/2 * 64, 12, 64);
                    XXX.restore();

                    var currentQuestMenuLength;
                    if (quests.questMenu == "active")
                    {
                        currentQuestMenuLength = quests.activeQuests.length;
                    }
                    else if (quests.questMenu == "complete")
                    {
                        currentQuestMenuLength = quests.completeQuests.length;
                    }

                    if (mouseX > (700 - 64) && mouseX < (700 + 64) && mouseY > 13 - 12 && mouseY < 13 + 12 && clicked && questScroll > 0)
                    {
                        clicked = false;
                        questScroll -= 1;
                    }
                    else if (mouseX > (700 - 64) && mouseX < (700 + 64) && mouseY > 515 - 12 && mouseY < 515 + 12 && clicked && questScroll + 12 < currentQuestMenuLength)
                    {
                        clicked = false;
                        questScroll += 1;
                    }
                };

                this.buildQuestList = function()
                {
                    if (quests.questMenu == "active")
                    {
                        for (var i = 0; i < quests.activeQuests.length; i ++)
                        {
                            if ((i - questScroll) >= 0 && (i - questScroll) <= 11)
                            {
                                if (mouseY > 50 + (36 * i) - (questScroll * 36) && mouseY < 50 + (36 * i) - (questScroll * 36) + 36)
                                {
                                    XXX.beginPath();
                                    XXX.fillStyle = "gold";
                                    XXX.strokeStyle = "black";
                                    XXX.lineWidth = 2;
                                    XXX.rect(1, 50 + (36 * i) - (questScroll * 36), 1398, 36);
                                    XXX.fill();
                                    XXX.stroke();

                                    //the text
                                    XXX.font = "bold 18px Book Antiqua";
                                    XXX.fillStyle = "black";
                                    XXX.textAlign = "center";
                                    XXX.fillText(quests.activeQuests[i].description, 1398 / 2, 50 + (36 * i) - (questScroll * 36) + 23.5);
                                }
                                else
                                {
                                    XXX.beginPath();
                                    XXX.fillStyle = "white";
                                    XXX.strokeStyle = "black";
                                    XXX.lineWidth = 2;
                                    XXX.rect(1, 50 + (36 * i) - (questScroll * 36), 1398, 36);
                                    XXX.fill();
                                    XXX.stroke();

                                    //the text
                                    XXX.font = "bold 26px Book Antiqua";
                                    XXX.fillStyle = "black";
                                    XXX.textAlign = "center";
                                    XXX.fillText(quests.activeQuests[i].name, 1398 / 2, 50 + (36 * i) - (questScroll * 36) + 27);
                                }
                            }
                        }
                    }
                    else if (quests.questMenu == "complete")
                    {
                        for (var i = 0; i < quests.completeQuests.length; i ++)
                        {
                            if ((i - questScroll) >= 0 && (i - questScroll) <= 11)
                            {
                                if (mouseY > 50 + (36 * i) - (questScroll * 36) && mouseY < 50 + (36 * i) - (questScroll * 36) + 36)
                                {
                                    XXX.beginPath();
                                    XXX.fillStyle = "gold";
                                    XXX.strokeStyle = "black";
                                    XXX.lineWidth = 2;
                                    XXX.rect(1, 50 + (36 * i) - (questScroll * 36), 1398, 36);
                                    XXX.fill();
                                    XXX.stroke();

                                    //the text
                                    XXX.font = "bold 18px Book Antiqua";
                                    XXX.fillStyle = "black";
                                    XXX.textAlign = "center";
                                    XXX.fillText(quests.completeQuests[i].description, 1398 / 2, 50 + (36 * i) - (questScroll * 36) + 23.5);
                                }
                                else
                                {
                                    XXX.beginPath();
                                    XXX.fillStyle = "white";
                                    XXX.strokeStyle = "black";
                                    XXX.lineWidth = 2;
                                    XXX.rect(1, 50 + (36 * i) - (questScroll * 36), 1398, 36);
                                    XXX.fill();
                                    XXX.stroke();

                                    //the text
                                    XXX.font = "bold 26px Book Antiqua";
                                    XXX.fillStyle = "black";
                                    XXX.textAlign = "center";
                                    XXX.fillText(quests.completeQuests[i].name, 1398 / 2, 50 + (36 * i) - (questScroll * 36) + 27);
                                }
                            }
                        }
                    }
                };

                this.questCompleter = function() //if there is a quest of the same name in the complete quests lists as in the active list it will delete the one in the active list.
                {
                    var hit = -1;
                    for (var i = 0; i < quests.completeQuests.length; i++)
                    {
                        for (var j = 0; j < quests.activeQuests.length; j++)
                        {
                            if (quests.activeQuests[j].name == quests.completeQuests[i].name)
                            {
                                hit = j;
                                break;
                            }
                        }
                    }

                    if (hit >= 0)
                    {
                        quests.activeQuests.splice(hit, 1);
                    }
                };

                this.questCompleter();
                this.questScrolling();
                this.buildQuestList();
            }
        };

        //BANKING
        this.displayBank = function()
        {
            if (lowBar == "bank")
            {
                //MAIN BACKGROUND
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(1, 1, 1398, 526);
                XXX.fill();
                XXX.stroke();

                //Exit bank Button
                //the button part
                if (mouseX > 2 && mouseX < 2 + 148 && mouseY > 529 && mouseY < 529 + 20)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    if (clicked == true)
                    {
                        clicked = false;
                        lowBar = "information";
                        gameState = "active";
                    }
                }
                else
                {
                    XXX.beginPath();
                    XXX.fillStyle = "E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //the text part
                XXX.font = "bold 14px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Exit Bank", 75, 543);

                //line between bank account and description
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 2;
                XXX.moveTo(0, 80);
                XXX.lineTo(1400, 80);
                XXX.stroke();

                //DISPLAY PLAYER'S INVENTORY
                this.displayCustomerInventory = function()
                {
                    // each inventory slot is a list with three things in it... [Item, quantity]
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].equipped == true)
                        {
                            LXX.beginPath();
                            LXX.lineWidth = 2;
                            LXX.fillStyle ="rgba(102, 255, 102, 0.35)";
                            LXX.strokeStyle ="black";
                            LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                            LXX.fill();
                            LXX.stroke();
                            Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                            //quantity
                            LXX.font="16px Book Antiqua";
                            LXX.textAlign="left";
                            LXX.fillStyle ="black";
                            if (Inventory[i][1] < 1000)
                            {
                                LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                            {
                                LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000000)
                            {
                                LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            //weight
                            LXX.font="10px Book Antiqua";
                            LXX.fillStyle ="black";
                            LXX.textAlign="right";
                            LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                            LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                        }
                        else
                        {
                            LXX.beginPath();
                            LXX.lineWidth = 2;
                            LXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                            LXX.strokeStyle ="black";
                            LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                            LXX.fill();
                            LXX.stroke();
                            Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                            //quantity
                            LXX.font="16px Book Antiqua";
                            LXX.textAlign="left";
                            LXX.fillStyle ="black";
                            if (Inventory[i][1] < 1000)
                            {
                                LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                            {
                                LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000000)
                            {
                                LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            //weight
                            LXX.font="10px Book Antiqua";
                            LXX.fillStyle ="black";
                            LXX.textAlign="right";
                            LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                            LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                        }
                    }

                    //left scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth = 1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(0.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //weight display
                    LXX.beginPath();
                    LXX.fillStyle ="lightGray";
                    LXX.strokeStyle ="black";
                    LXX.rect(1329.5, 0.1, 50, 79.8);
                    LXX.fill();
                    LXX.stroke();
                    //Draw a cover on the weight display to represent the amount of carry weight filled.
                    LXX.beginPath();
                    //LXX.fillStyle ="rgba(255, 255, 255, 0.65)"; //white fill in colour
                    //LXX.fillStyle ="rgba(139, 134, 78, 0.8)"; //beige fill in colour
                    //LXX.fillStyle = "rgba(138, 54, 15, 0.65)"; //burnt sienna colour
                    LXX.fillStyle ="grey";
                    LXX.rect(1329.6, 79.5, 50, -79 * this.carryWeight / this.carryWeightMAX);
                    LXX.fill();
                    //Draw the weight number on the top and bottom and the deviding bar.
                    LXX.font="16px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign="center";
                    LXX.fillText(JSON.stringify(Math.floor(this.carryWeight)), 1352, 25);
                    //dividing line
                    LXX.beginPath();
                    LXX.strokeStyle="black";
                    LXX.lineWidth=3;
                    LXX.moveTo(1334, 39.5);
                    LXX.lineTo(1374, 39.5);
                    LXX.stroke();
                    //divisor
                    LXX.font="16px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign="center";
                    LXX.fillText(JSON.stringify(Math.floor(this.carryWeightMAX)), 1352, 64.5);
                    LXX.textAlign="left"; //this is to reset it to the standard for the rest to come.

                    //right scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth=1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(1379.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
                };

                //
                //THE INVENTORY's SCROLLING IS LEAKING INTO BOTH SHOP AND BANK SYSTEMS So an extra inventory scroll is not needed here.
                //

                //DISPLAY BANK ACCOUNT
                this.displayBankAccount = function()
                {
                    // each inventory slot is a list with three things in it... [Item, quantity]
                    for (var i = 0; i < bankSlots; i++)
                    {
                        XXX.beginPath();
                        XXX.lineWidth = 2;
                        XXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                        XXX.strokeStyle ="black";
                        XXX.rect(bankScroll + 20.5 + (79 * i), 0.5, 79, 79);
                        XXX.fill();
                        XXX.stroke();
                        if (i < bankAccount.length)
                        {
                            //image
                            bankAccount[i][0].drawShopCraftItem(bankAccount[i][0].type, bankScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                            //quantity
                            XXX.font="16px Book Antiqua";
                            XXX.textAlign="left";
                            XXX.fillStyle ="black";
                            if (bankAccount[i][1] < 1000)
                            {
                                XXX.fillText(bankAccount[i][1], bankScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (bankAccount[i][1] >= 1000 && bankAccount[i][1] < 1000000)
                            {
                                XXX.fillText(Math.floor(bankAccount[i][1] / 1000) + "K", bankScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (bankAccount[i][1] >= 1000000)
                            {
                                XXX.fillText((Math.floor(bankAccount[i][1] / 100000) / 10) + "M", bankScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            //weight
                            XXX.font="10px Book Antiqua";
                            XXX.fillStyle ="black";
                            XXX.textAlign="right";
                            XXX.fillText("W:" + bankAccount[i][0].weight, bankScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                            XXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                        }
                    }

                    //left scroll arrow
                    XXX.beginPath();
                    XXX.lineWidth = 1;
                    XXX.fillStyle ="darkGrey";
                    XXX.strokeStyle ="black";
                    XXX.rect(0.5, 0.5, 20, 79);
                    XXX.fill();
                    XXX.stroke();
                    XXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //right scroll arrow
                    XXX.beginPath();
                    XXX.lineWidth=1;
                    XXX.fillStyle ="darkGrey";
                    XXX.strokeStyle ="black";
                    XXX.rect(1379.5, 0.5, 20, 79);
                    XXX.fill();
                    XXX.stroke();
                    XXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
                };

                this.bankAccountScrolling = function()
                {
                    //When the left inventory scroll is clicked scroll one to the left if there is one to the left otherwise don't.
                    if (this.bankPosition < bankSlots && mouseX > 1379.5 && mouseX < 1399.5 && mouseY > 0.5 && mouseY < 80 && clickReleased == true) //this (20.5, 0.5, 79, 79) is the position the first in the list will be in if the left scroll will not work.
                    {
                        bankScroll -= 79;
                        this.bankPosition += 1;
                    }

                    //When the right inventory scroll is clicked scroll one to the right if there is one to the right otherwise don't.
                    if (this.bankPosition > 0 && mouseX > 0.5 && mouseX < 20.5 && mouseY > 0.5 && mouseY < 80 && clickReleased == true)
                    {
                        bankScroll += 79;
                        this.bankPosition -= 1;
                    }
                };

                this.customerInventoryInteract = function()
                {
                    var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX1Coords.push(20.5 + (79 * i));
                    }


                    var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX2Coords.push(20.5 + (79 * i) + 79);
                    }


                    var invY1Coord = 0.5; //This doesn't change.


                    var invY2Coord = 79.5; //this is just Y + 79

                    for (var i = Inventory.length - 1; i > -1; i--)
                    {
                        if (lMouseX >= 21 && lMouseX <= 1329) //This checks if the mouse is between the scroll buttons rather than on them.
                        {
                            if (clickReleased == true && lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord && this.REQB == false) //When you click on an item you either access its utility or you equip it.
                            {
                                if (Inventory[i][0].equipped == false)
                                {
                                    var gotIn = false;
                                    var deletion = false;
                                    var deleteNum = -1;
                                    for (var j = bankAccount.length - 1; j > -1; j--)
                                    {
                                        //console.log("i: " + i + " j: " + j + " bankAccount.length: " + bankAccount.length + " Inventory.length: " + Inventory.length);
                                        //console.log("bank: " + bankAccount[j]);
                                        //console.log("Inv: " + Inventory[i][0]);
                                        if (bankAccount[j][0].type == Inventory[i][0].type)
                                        {
                                            gotIn = true;
                                            if (altKey)
                                            {
                                                altKey = false;
                                                var amount = prompt("Enter the amount you would like to deposit.");
                                                var amountt = JSON.parse(amount);
                                                if (Inventory[i][1] - amountt <= 0)
                                                {
                                                    if (Inventory[i][1] - amountt == 0)
                                                    {
                                                        bankAccount[j][1] += amountt;
                                                        deletion = true;
                                                        deleteNum = i;
                                                        //Inventory.splice(i, 1);
                                                    }
                                                }
                                                else
                                                {
                                                    bankAccount[j][1] += amountt;
                                                    Inventory[i][1] -= amountt;
                                                }
                                            }
                                            else if (shiftKey)
                                            {
                                                bankAccount[j][1] += Inventory[i][1];
                                                deletion = true;
                                                deleteNum = i;
                                                //Inventory.splice(i, 1);
                                            }
                                            else
                                            {
                                                bankAccount[j][1] += 1;
                                                if (Inventory[i][1] - 1 < 1)
                                                {
                                                    deletion = true;
                                                    deleteNum = i;
                                                    //Inventory.splice(i, 1);
                                                }
                                                else
                                                {
                                                    Inventory[i][1] -= 1;
                                                }
                                            }
                                        }
                                    }
                                    if (gotIn == false)
                                    {
                                        if (bankAccount.length < bankSlots)
                                        {
                                            var invenType = Inventory[i][0].type;
                                            if (altKey)
                                            {
                                                altKey = false;
                                                var amount = prompt("Enter the amount you would like to deposit.");
                                                var amountt = JSON.parse(amount);
                                                console.log(amountt);
                                                if (Inventory[i][1] - amountt <= 0)
                                                {
                                                    if (Inventory[i][1] - amountt == 0)
                                                    {
                                                        bankAccount.push([new Item(invenType, false, false), amountt]);
                                                        deletion = true;
                                                        deleteNum = i;
                                                        //Inventory.splice(i, 1);
                                                    }
                                                }
                                                else
                                                {
                                                    bankAccount.push([new Item(invenType, false, false), amountt]);
                                                    Inventory[i][1] -= amountt;
                                                }
                                            }
                                            else if (shiftKey)
                                            {
                                                bankAccount.push([new Item(invenType, false, false), Inventory[i][1]]);
                                                deletion = true;
                                                deleteNum = i;
                                                //Inventory.splice(i, 1);
                                            }
                                            else
                                            {
                                                bankAccount.push([new Item(invenType, false, false), 1]);
                                                if (Inventory[i][1] - 1 < 1)
                                                {
                                                    deletion = true;
                                                    deleteNum = i;
                                                    //Inventory.splice(i, 1);
                                                }
                                                else
                                                {
                                                    Inventory[i][1] -= 1;
                                                }
                                            }
                                        }
                                    }

                                    if (deletion == true)
                                    {
                                        deletion = false;
                                        Inventory.splice(deleteNum, 1);
                                    }
                                }
                            }
                            else if (lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord) //give the name of the Item and its stats when hovered over.
                            {
                                var sizer = 0;

                                for (var k = 0; k < Inventory[i][0].identity.length; k++)
                                {
                                    if (Inventory[i][0].identity[k] == "'")
                                    {
                                        sizer += 1;
                                    }
                                    else if (Inventory[i][0].identity[k].indexOf(' ') != -1)
                                    {
                                        sizer += 0;
                                    }
                                    else if (Inventory[i][0].identity[k] == Inventory[i][0].identity[k].toUpperCase() )
                                    {
                                        sizer += 17; //9.21;
                                    }
                                    else if (Inventory[i][0].identity[k] == Inventory[i][0].identity[k].toLowerCase())
                                    {
                                        sizer += 12;
                                    }
                                }

                                XXX.beginPath();
                                XXX.fillStyle="white";
                                XXX.fillRect(3, 503, sizer, 22);
                                //The Name of the Item
                                XXX.font = "bold 22px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(Inventory[i][0].identity, 4, 522);
                            }
                        }
                    }
                };

                this.bankAccountInteract = function()
                {
                    var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

                    for (var i = -this.bankPosition; i < bankAccount.length - this.bankPosition; i++)
                    {
                        listOfInvX1Coords.push(20.5 + (79 * i));
                    }


                    var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

                    for (var i = -this.bankPosition; i < bankAccount.length - this.bankPosition; i++)
                    {
                        listOfInvX2Coords.push(20.5 + (79 * i) + 79);
                    }


                    var invY1Coord = 0.5; //This doesn't change.


                    var invY2Coord = 79.5; //this is just Y + 79

                    for (var i = bankAccount.length - 1; i > -1; i--)
                    {
                        if (mouseX >= 21 && mouseX <= 1329  && mouseY < 80) //This checks if the mouse is between the scroll buttons rather than on them.
                        {
                            if (clickReleased == true && mouseX > listOfInvX1Coords[i] && mouseX < listOfInvX2Coords[i] && mouseY > invY1Coord && mouseY < invY2Coord && this.REQB == false)
                            {
                                var gotIn = false;
                                for (var j = Inventory.length - 1; j > -1; j--)
                                {
                                    //console.log("i: " + i + " j: " + j + "bankAccount.length: " + bankAccount.length);
                                    //console.log("bank: " + bankAccount[i]);
                                    //console.log("Inv: " + Inventory[j][0]);
                                    if (bankAccount[i][0].type == Inventory[j][0].type)
                                    {
                                        gotIn = true;
                                        if (altKey)
                                        {
                                            altKey = false;
                                            var amount = prompt("Enter the amount you would like to withdraw.");
                                            var amountt = JSON.parse(amount);
                                            if (bankAccount[i][1] - amountt <= 0)
                                            {
                                                if (bankAccount[i][1] - amountt == 0)
                                                {
                                                    Inventory[j][1] += amountt;
                                                    bankAccount.splice(i, 1);
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                Inventory[j][1] += amountt;
                                                bankAccount[i][1] -= amountt;
                                            }
                                        }
                                        else if (shiftKey)
                                        {
                                            Inventory[j][1] += bankAccount[i][1];
                                            bankAccount.splice(i, 1);
                                            break;
                                        }
                                        else
                                        {
                                            Inventory[j][1] += 1;
                                            if (bankAccount[i][1] - 1 < 1)
                                            {
                                                bankAccount.splice(i, 1);
                                                break;
                                            }
                                            else
                                            {
                                                bankAccount[i][1] -= 1;
                                            }
                                        }
                                    }
                                }

                                if (gotIn == false)
                                {
                                    var invenType = bankAccount[i][0].type;
                                    if (altKey)
                                    {
                                        altKey = false;
                                        var amount = prompt("Enter the amount you would like to withdraw.");
                                        var amountt = JSON.parse(amount);
                                        if (bankAccount[i][1] - amountt <= 0)
                                        {
                                            if (bankAccount[i][1] - amountt == 0)
                                            {
                                                Inventory.push([new Item(invenType, false, false), amountt]);
                                                bankAccount.splice(i, 1);
                                            }
                                        }
                                        else
                                        {
                                            Inventory.push([new Item(invenType, false, false), amountt]);
                                            bankAccount[i][1] -= amountt;
                                        }
                                    }
                                    else if (shiftKey)
                                    {
                                        Inventory.push([new Item(invenType, false, false), bankAccount[i][1]]);
                                        bankAccount.splice(i, 1);
                                    }
                                    else
                                    {
                                        Inventory.push([new Item(invenType, false, false), 1]);
                                        if (bankAccount[i][1] - 1 < 1)
                                        {
                                            bankAccount.splice(i, 1);
                                        }
                                        else
                                        {
                                            bankAccount[i][1] -= 1;
                                        }
                                    }
                                }
                            }
                            else if (mouseX > listOfInvX1Coords[i] && mouseX < listOfInvX2Coords[i] && mouseY > invY1Coord && mouseY < invY2Coord) //give the name of the Item and its stats when hovered over.
                            {
                                var sizer = 0;

                                for (var k = 0; k < bankAccount[i][0].identity.length; k++)
                                {
                                    if (bankAccount[i][0].identity[k] == "'")
                                    {
                                        sizer += 1;
                                    }
                                    else if (bankAccount[i][0].identity[k].indexOf(' ') != -1)
                                    {
                                        sizer += 0;
                                        console.log("space");
                                    }
                                    else if (bankAccount[i][0].identity[k] == bankAccount[i][0].identity[k].toUpperCase() )
                                    {
                                        sizer += 17; //9.21;
                                    }
                                    else if (bankAccount[i][0].identity[k] == bankAccount[i][0].identity[k].toLowerCase())
                                    {
                                        sizer += 12;
                                    }
                                }

                                XXX.beginPath();
                                XXX.fillStyle="white";
                                XXX.fillRect(3, 82, sizer, 22);
                                //The Name of the Item
                                XXX.font = "bold 22px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign = "left"; //this is to reset it to the standard for the rest to come.
                                console.log(bankAccount);
                                XXX.fillText(bankAccount[i][0].identity, 4, 100);
                            }
                        }
                    }
                };
                //TITLE
                XXX.font = "bold 60px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                XXX.fillText("The Golden Glove Banking Company", 1/2 * CCC.width, 152.5);
                XXX.font = "bold 60px Book Antiqua";
                XXX.fillStyle = "gold";
                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                XXX.fillText("The Golden Glove Banking Company", 1/2 * CCC.width, 155);

                //BUY BANK SLOTS (option 1)
                if (mouseX > 1/2 * CCC.width - 200 && mouseX < 1/2 * CCC.width - 200 + 400 && mouseY > 200 && mouseY < 235)
                {
                    XXX.beginPath();
                    XXX.lineWidth=4;
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.rect(1/2 * CCC.width - 200, 200, 400, 35);
                    XXX.fill();
                    XXX.stroke();
                    //Text part
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                    XXX.fillText(bankSlotCost + " Coins", 1/2 * CCC.width, 228);
                    if (clickReleased)
                    {
                        var paid = false;
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].type == "coins" && Inventory[i][1] - bankSlotCost > 0)
                            {
                                Inventory[i][1] -= bankSlotCost;
                                bankSlots += 1;
                                paid = true;
                                break;
                            }
                            else if (Inventory[i][0].type == "coins" && Inventory[i][1] - bankSlotCost == 0)
                            {
                                Inventory.splice(i, 1);
                                bankSlots += 1;
                                paid = true;
                                break;
                            }
                        }
                        if (paid == false)
                        {
                            for (var i = 0; i < bankAccount.length; i++)
                            {
                                if (bankAccount[i][0].type == "coins" && bankAccount[i][1] - bankSlotCost > 0)
                                {
                                    bankAccount[i][1] -= bankSlotCost;
                                    bankSlots += 1;
                                    paid = true;
                                    break;
                                }
                                else if (bankAccount[i][0].type == "coins" && bankAccount[i][1] - bankSlotCost == 0)
                                {
                                    bankAccount.splice(i, 1);
                                    bankSlots += 1;
                                    paid = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    XXX.beginPath();
                    XXX.lineWidth=4;
                    XXX.fillStyle = "#ffbf00";
                    XXX.strokeStyle = "black";
                    XXX.rect(1/2 * CCC.width - 200, 200, 400, 35);
                    XXX.fill();
                    XXX.stroke();
                    //Text part
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                    XXX.fillText("Purchase a Banking Slot", 1/2 * CCC.width, 226);
                }

                this.bankSlotPricer = function()
                {
                    if (bankSlots == 1)
                    {
                        bankSlotCost = 25;
                    }
                    else if (bankSlots == 2)
                    {
                        bankSlotCost = 50;
                    }
                    else if (bankSlots == 3)
                    {
                        bankSlotCost = 75;
                    }
                    else if (bankSlots == 4)
                    {
                        bankSlotCost = 100;
                    }
                    else if (bankSlots == 5)
                    {
                        bankSlotCost = 150;
                    }
                    else if (bankSlots == 6)
                    {
                        bankSlotCost = 200;
                    }
                    else if (bankSlots == 7)
                    {
                        bankSlotCost = 250;
                    }
                    else if (bankSlots == 8)
                    {
                        bankSlotCost = 300;
                    }
                    else if (bankSlots >= 9)
                    {
                        bankSlotCost = 350;
                    }
                };

                this.bankAccountInteract();
                this.customerInventoryInteract();
                this.displayBankAccount();
                this.bankAccountScrolling();
                this.displayCustomerInventory();
                this.bankSlotPricer();
            }
        };

        //SAVE SLOTS
        this.displaySaves = function()
        {
            if (lowBar == "save")
            {
                //box 1
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(1, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 1", 87.5, 52);
                //sensing/action
                if (lMouseX > 1 && lMouseX < 175 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(1, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 1;

                        popType = "save1";
                        confirmed = false;
                        save1 = null;
                    }
                }

                //box 2
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(176, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 2", 176 + 87.5, 52);
                //sensing/action
                if (lMouseX > 176 && lMouseX < 176 + 173 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(176, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 2;

                        popType = "save2";
                        confirmed = false;
                        save2 = null;
                    }
                }

                //box 3
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(351, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 3", 351 + 87.5, 52);
                //sensing/action
                if (lMouseX > 351 && lMouseX < 351 + 173 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(351, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 3;

                        popType = "save3";
                        confirmed = false;
                        save3 = null;
                    }
                }

                //box 4
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(526, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 4", 526 + 87.5, 52);
                //sensing/action
                if (lMouseX > 526 && lMouseX < 526 + 173 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(526, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 4;

                        popType = "save4";
                        confirmed = false;
                        save4 = null;
                    }
                }
                //box 5
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(701, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 5", 701 + 87.5, 52);
                //sensing/action
                if (lMouseX > 701 && lMouseX < 701 + 173 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(701, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 5;

                        popType = "save5";
                        confirmed = false;
                        save5 = null;
                    }
                }
                //box 6
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(876, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 6", 876 + 87.5, 52);
                //sensing/action
                if (lMouseX > 876 && lMouseX < 876 + 173 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(876, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 6;

                        popType = "save6";
                        confirmed = false;
                        save6 = null;
                    }
                }
                //box 7
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(1051, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 7", 1051 + 87.5, 52);
                //sensing/action
                if (lMouseX > 1051 && lMouseX < 1051 + 173 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(1051, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 7;

                        popType = "save7";
                        confirmed = false;
                        save7 = null;
                    }
                }
                //box 8
                LXX.beginPath();
                LXX.fillStyle = "lightGrey";
                LXX.lineWidth=2;
                LXX.strokeStyle = "black";
                LXX.rect(1226, 1, 175 - 2, 78);
                LXX.fill();
                LXX.stroke();
                //text
                LXX.fillStyle = "black";
                LXX.textAlign ="center";
                LXX.font="bold 30px Book Antiqua";
                LXX.fillText("Save 8", 1226 + 87.5, 52);
                //sensing/action
                if (lMouseX > 1226 && lMouseX < 1226 + 173 && lMouseY > 1 && lMouseY < 78)
                {
                    //highlight
                    LXX.beginPath();
                    LXX.fillStyle = "rgba(255,215,0, 0.35)";
                    LXX.lineWidth=2;
                    LXX.strokeStyle = "black";
                    LXX.rect(1226, 1, 175 - 2, 78);
                    LXX.fill();
                    LXX.stroke();
                    //save
                    if (clicked == true)
                    {
                        clicked = false;

                        saveType = 8;

                        popType = "save8";
                        confirmed = false;
                        save8 = null;
                    }
                }
            }
        };

        //SHOP
        this.displayShop = function()
        {
            if (lowBar == "shop")
            {
                //MAIN BACKGROUND
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(1, 1, 1398, 526);
                XXX.fill();
                XXX.stroke();

                //Exit Shop Button
                //the button part
                if (mouseX > 2 && mouseX < 2 + 148 && mouseY > 529 && mouseY < 529 + 20)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    if (clicked == true)
                    {
                        clicked = false;
                        lowBar = "information";
                        gameState = "active";
                    }
                }
                else
                {
                    XXX.beginPath();
                    XXX.fillStyle = "E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //the text part
                XXX.font = "bold 14px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Exit Shop", 75, 543);

                //line between inventory and description
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 2;
                XXX.moveTo(0, 80);
                XXX.lineTo(1400, 80);
                XXX.stroke();

                //DISPLAY PLAYER'S INVENTORY
                this.displaySellInventory = function()
                {
                    // each inventory slot is a list with three things in it... [Item, quantity]
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].equipped == true)
                        {
                            LXX.beginPath();
                            LXX.lineWidth = 2;
                            LXX.fillStyle ="rgba(102, 255, 102, 0.35)";
                            LXX.strokeStyle ="black";
                            LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                            LXX.fill();
                            LXX.stroke();
                            Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                            //quantity
                            LXX.font="16px Book Antiqua";
                            LXX.textAlign="left";
                            LXX.fillStyle ="black";
                            if (Inventory[i][1] < 1000)
                            {
                                LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                            {
                                LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000000)
                            {
                                LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            //weight
                            LXX.font="10px Book Antiqua";
                            LXX.fillStyle ="black";
                            LXX.textAlign="right";
                            LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                            LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                        }
                        else
                        {
                            LXX.beginPath();
                            LXX.lineWidth = 2;
                            LXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                            LXX.strokeStyle ="black";
                            LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                            LXX.fill();
                            LXX.stroke();
                            Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                            //quantity
                            LXX.font="16px Book Antiqua";
                            LXX.textAlign="left";
                            LXX.fillStyle ="black";
                            if (Inventory[i][1] < 1000)
                            {
                                LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                            {
                                LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            else if (Inventory[i][1] >= 1000000)
                            {
                                LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                            }
                            //weight
                            LXX.font="10px Book Antiqua";
                            LXX.fillStyle ="black";
                            LXX.textAlign="right";
                            LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                            LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                        }
                    }

                    //left scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth = 1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(0.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //weight display
                    LXX.beginPath();
                    LXX.fillStyle ="lightGray";
                    LXX.strokeStyle ="black";
                    LXX.rect(1329.5, 0.1, 50, 79.8);
                    LXX.fill();
                    LXX.stroke();
                    //Draw a cover on the weight display to represent the amount of carry weight filled.
                    LXX.beginPath();
                    //LXX.fillStyle ="rgba(255, 255, 255, 0.65)"; //white fill in colour
                    //LXX.fillStyle ="rgba(139, 134, 78, 0.8)"; //beige fill in colour
                    //LXX.fillStyle = "rgba(138, 54, 15, 0.65)"; //burnt sienna colour
                    LXX.fillStyle ="grey";
                    LXX.rect(1329.6, 79.5, 50, -79 * this.carryWeight / this.carryWeightMAX);
                    LXX.fill();
                    //Draw the weight number on the top and bottom and the deviding bar.
                    LXX.font="16px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign="center";
                    LXX.fillText(JSON.stringify(Math.floor(this.carryWeight)), 1352, 25);
                    //dividing line
                    LXX.beginPath();
                    LXX.strokeStyle="black";
                    LXX.lineWidth=3;
                    LXX.moveTo(1334, 39.5);
                    LXX.lineTo(1374, 39.5);
                    LXX.stroke();
                    //divisor
                    LXX.font="16px Book Antiqua";
                    LXX.fillStyle = "black";
                    LXX.textAlign="center";
                    LXX.fillText(JSON.stringify(Math.floor(this.carryWeightMAX)), 1352, 64.5);
                    LXX.textAlign="left"; //this is to reset it to the standard for the rest to come.

                    //right scroll arrow
                    LXX.beginPath();
                    LXX.lineWidth=1;
                    LXX.fillStyle ="darkGrey";
                    LXX.strokeStyle ="black";
                    LXX.rect(1379.5, 0.5, 20, 79);
                    LXX.fill();
                    LXX.stroke();
                    LXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
                };

                this.sellInventoryInteract = function()
                {
                    var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX1Coords.push(20.5 + (79 * i));
                    }


                    var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

                    for (var i = -this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
                    {
                        listOfInvX2Coords.push(20.5 + (79 * i) + 79);
                    }


                    var invY1Coord = 0.5; //This doesn't change.


                    var invY2Coord = 79.5; //this is just Y + 79

                    for (var i = Inventory.length - 1; i > -1; i--)
                    {
                        if (lMouseX >= 21 && lMouseX <= 1329) //This checks if the mouse is between the scroll buttons rather than on them.
                        {
                            if (clickReleased == true && lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord && this.REQB == false) //When you click on an item you either access its utility or you equip it.
                            {
                                if (Inventory[i][1] - itemAmount >= 0 && Inventory[i][0].type != "coins" && Inventory[i][0].equipped == false)
                                {
                                    var badDeal = false;
                                    var shifted = 0;
                                    var newMoney = -1;
                                    var money = -1;
                                    var shopMoney = -1;
                                    var targetItem = -1; //the item that will be added to the shops inventory.
                                    for (var j = shopInventory.length - 1; j > -1; j--)
                                    {
                                        if (shopInventory[j][0].type == "coins")
                                        {
                                            shopMoney = j;
                                        }
                                        if (shopInventory[j][0].type == Inventory[i][0].type)
                                        {
                                            targetItem = j;
                                        }
                                    }
                                    for (var k = Inventory.length - 1; k > -1; k--)
                                    {
                                        if (Inventory[k][0].type == "coins")
                                        {
                                            money = k;
                                        }
                                    }

                                    if (shopMoney != -1)
                                    {
                                        if (shopInventory[shopMoney][1] >= Inventory[i][0].sellValue * itemAmount)
                                        {
                                            shopInventory[shopMoney][1] -= Inventory[i][0].sellValue * itemAmount;

                                            if (money != -1)
                                            {
                                                Inventory[money][1] += Inventory[i][0].sellValue * itemAmount;
                                            }
                                            else
                                            {
                                                newMoney = [new Item("coins", false, false), (Inventory[i][0].sellValue * itemAmount)];
                                                Inventory.unshift(newMoney);
                                                money = 0;
                                                shifted = 1;
                                            }

                                            //Item Transference
                                            if (Inventory[i + shifted][1] - itemAmount == 0)
                                            {
                                                if (targetItem != -1)
                                                {
                                                    shopInventory[targetItem][1] += itemAmount;
                                                }
                                                else
                                                {
                                                    shopInventory.push([Inventory[i + shifted][0], itemAmount]);
                                                }
                                                Inventory.splice(i + shifted, 1);
                                            }
                                            else
                                            {
                                                Inventory[i + shifted][1] -= itemAmount;
                                                if (targetItem != -1)
                                                {
                                                    shopInventory[targetItem][1] += itemAmount;
                                                }
                                                else
                                                {
                                                    shopInventory.push([Inventory[i + shifted][0], itemAmount]);
                                                }
                                            }

                                            //Since the location may have been altered we need to reset money and shopMoney
                                            for (var j = shopInventory.length - 1; j > -1; j--)
                                            {
                                                if (shopInventory[j][0].type == "coins")
                                                {
                                                    shopMoney = j;
                                                }
                                            }
                                            for (var k = Inventory.length - 1; k > -1; k--)
                                            {
                                                if (Inventory[k][0].type == "coins")
                                                {
                                                    money = k;
                                                }
                                            }

                                            if (shopInventory[shopMoney][1] <= 0)
                                            {
                                                shopInventory.splice(shopMoney, 1);
                                            }

                                            if (money != -1)
                                            {
                                                console.log(Inventory);
                                                if (Inventory[money][1] <= 0)
                                                {
                                                    Inventory.splice(money, 1);
                                                }
                                            }
                                        }
                                        else //If the shop can't afford to buy it you sell it anyway for whatever the shop has left.
                                        {
                                            if (itemAmount > 1)
                                            {
                                                badDeal = confirm("Are you sure you want to sell your " + itemAmount + " " + Inventory[i][0].identity + "s for only " + shopInventory[shopMoney][1] + " coins?");
                                            }
                                            else
                                            {
                                                badDeal = confirm("Are you sure you want to sell your " + Inventory[i][0].identity + " for only " + shopInventory[shopMoney][1] + " coins?");
                                            }


                                            if (badDeal == true)
                                            {
                                                badDeal = shopInventory[shopMoney][1];
                                                shopInventory[shopMoney][1] -= shopInventory[shopMoney][1];

                                                if (money != -1)
                                                {
                                                    Inventory[money][1] += badDeal;
                                                }
                                                else
                                                {
                                                    newMoney = [new Item("coins", false, false), badDeal];
                                                    Inventory.unshift(newMoney);
                                                    money = 0;
                                                    shifted = 1;
                                                }

                                                //Item Transference
                                                if (Inventory[i + shifted][1] - itemAmount == 0)
                                                {
                                                    if (targetItem != -1)
                                                    {
                                                        shopInventory[targetItem][1] += itemAmount;
                                                    }
                                                    else
                                                    {
                                                        shopInventory.push([Inventory[i + shifted][0], itemAmount]);
                                                    }
                                                    Inventory.splice(i + shifted, 1);
                                                }
                                                else
                                                {
                                                    Inventory[i + shifted][1] -= itemAmount;
                                                    if (targetItem != -1)
                                                    {
                                                        shopInventory[targetItem][1] += itemAmount;
                                                    }
                                                    else
                                                    {
                                                        shopInventory.push([Inventory[i + shifted][0], itemAmount]);
                                                    }
                                                }

                                                //Since the location may have been altered we need to reset money and shopMoney
                                                for (var j = shopInventory.length - 1; j > -1; j--)
                                                {
                                                    if (shopInventory[j][0].type == "coins")
                                                    {
                                                        shopMoney = j;
                                                    }
                                                }
                                                for (var k = Inventory.length - 1; k > -1; k--)
                                                {
                                                    if (Inventory[k][0].type == "coins")
                                                    {
                                                        money = k;
                                                    }
                                                }

                                                if (shopInventory[shopMoney][1] <= 0)
                                                {
                                                    shopInventory.splice(shopMoney, 1);
                                                }

                                                if (money != -1)
                                                {
                                                    if (Inventory[money][1] <= 0)
                                                    {
                                                        Inventory.splice(money, 1);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord) //give the name of the Item and its stats when hovered over.
                            {
                                //The Name of the Item
                                XXX.font = "bold 60px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(Inventory[i][0].identity, 1/2 * CCC.width, 140);

                                //Sell Price

                                XXX.font = "bold 140px Book Antiqua";
                                XXX.fillStyle = "gold";
                                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(Inventory[i][0].sellValue * itemAmount, 1/2 * CCC.width, 340);

                            }
                        }
                    }
                };

                //DISPLAY SHOP INVENTORY
                this.displayMerchandise = function()
                {
                    // each inventory slot is a list with three things in it... [Item, quantity]
                    for (var i = 0; i < shopInventory.length; i++)
                    {
                        XXX.beginPath();
                        XXX.lineWidth = 2;
                        XXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                        XXX.strokeStyle ="black";
                        XXX.rect(merchScroll + 20.5 + (79 * i), 0.5, 79, 79);
                        XXX.fill();
                        XXX.stroke();
                        shopInventory[i][0].drawShopCraftItem(shopInventory[i][0].type, merchScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                        //quantity
                        XXX.font="16px Book Antiqua";
                        XXX.textAlign="left";
                        XXX.fillStyle ="black";
                        if (shopInventory[i][1] < 1000)
                        {
                            XXX.fillText(shopInventory[i][1], merchScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        else if (shopInventory[i][1] >= 1000 && shopInventory[i][1] < 1000000)
                        {
                            XXX.fillText(Math.floor(shopInventory[i][1] / 1000) + "K", merchScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        else if (shopInventory[i][1] >= 1000000)
                        {
                            XXX.fillText((Math.floor(shopInventory[i][1] / 100000) / 10) + "M", merchScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        //weight
                        XXX.font="10px Book Antiqua";
                        XXX.fillStyle ="black";
                        XXX.textAlign="right";
                        XXX.fillText("W:" + shopInventory[i][0].weight, merchScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                        XXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                    }

                    //left scroll arrow
                    XXX.beginPath();
                    XXX.lineWidth = 1;
                    XXX.fillStyle ="darkGrey";
                    XXX.strokeStyle ="black";
                    XXX.rect(0.5, 0.5, 20, 79);
                    XXX.fill();
                    XXX.stroke();
                    XXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                    //right scroll arrow
                    XXX.beginPath();
                    XXX.lineWidth=1;
                    XXX.fillStyle ="darkGrey";
                    XXX.strokeStyle ="black";
                    XXX.rect(1379.5, 0.5, 20, 79);
                    XXX.fill();
                    XXX.stroke();
                    XXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
                };

                this.merchandiseInteract = function()
                {
                    var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

                    for (var i = -this.merchPosition; i < shopInventory.length - this.merchPosition; i++)
                    {
                        listOfInvX1Coords.push(20.5 + (79 * i));
                    }


                    var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

                    for (var i = -this.merchPosition; i < shopInventory.length - this.merchPosition; i++)
                    {
                        listOfInvX2Coords.push(20.5 + (79 * i) + 79);
                    }


                    var invY1Coord = 0.5; //This doesn't change.


                    var invY2Coord = 79.5; //this is just Y + 79

                    for (var i = shopInventory.length - 1; i > -1; i--)
                    {
                        if (mouseX >= 21 && mouseX <= 1329  && mouseY < 80) //This checks if the mouse is between the scroll buttons rather than on them.
                        {
                            if (clickReleased == true && mouseX > listOfInvX1Coords[i] && mouseX < listOfInvX2Coords[i] && mouseY > invY1Coord && mouseY < invY2Coord && this.REQB == false)
                            {
                                if (shopInventory[i][1] - itemAmount >= 0 && shopInventory[i][0].type != "coins")
                                {
                                    var shifted = 0;
                                    var newMoney = -1;
                                    var money = -1;
                                    var shopMoney = -1;
                                    var targetItem = -1;
                                    for (var j = Inventory.length - 1; j > -1; j--)
                                    {
                                        if (Inventory[j][0].type == "coins")
                                        {
                                            money = j;
                                        }
                                        if (Inventory[j][0].type == shopInventory[i][0].type)
                                        {
                                            targetItem = j;
                                        }
                                    }
                                    for (var k = shopInventory.length - 1; k > -1; k--)
                                    {
                                        if (shopInventory[k][0].type == "coins")
                                        {
                                            shopMoney = k;
                                        }
                                    }

                                    if (money != -1)
                                    {
                                        if (Inventory[money][1] >= shopInventory[i][0].buyValue * itemAmount)
                                        {
                                            Inventory[money][1] -= shopInventory[i][0].buyValue * itemAmount;

                                            if (shopMoney != -1)
                                            {
                                                shopInventory[shopMoney][1] += shopInventory[i][0].buyValue * itemAmount;
                                            }
                                            else
                                            {
                                                newMoney = [new Item("coins", false, false), (shopInventory[i][0].buyValue * itemAmount)];
                                                shopInventory.unshift(newMoney);
                                                shopMoney = 0;
                                                shifted = 1;
                                            }

                                            //Item Transference
                                            if (shopInventory[i + shifted][1] - itemAmount == 0)
                                            {
                                                if (targetItem != -1)
                                                {
                                                    Inventory[targetItem][1] += itemAmount;
                                                }
                                                else
                                                {
                                                    Inventory.push([shopInventory[i + shifted][0], itemAmount]);
                                                }
                                                shopInventory.splice(i + shifted, 1);
                                            }
                                            else
                                            {
                                                shopInventory[i + shifted][1] -= itemAmount;

                                                if (targetItem != -1)
                                                {
                                                    Inventory[targetItem][1] += itemAmount;
                                                }
                                                else
                                                {
                                                    Inventory.push([shopInventory[i + shifted][0], itemAmount]);
                                                }
                                            }

                                            //Since the location may have been altered we need to reset shopMoney and money
                                            for (var j = Inventory.length - 1; j > -1; j--)
                                            {
                                                if (Inventory[j][0].type == "coins")
                                                {
                                                    money = j;
                                                }
                                            }
                                            for (var k = shopInventory.length - 1; k > -1; k--)
                                            {
                                                if (shopInventory[k][0].type == "coins")
                                                {
                                                    shopMoney = k;
                                                }
                                            }

                                            if (Inventory[money][1] <= 0)
                                            {
                                                Inventory.splice(money, 1);
                                            }

                                            if (shopMoney != -1)
                                            {
                                                if (shopInventory[shopMoney][1] <= 0)
                                                {
                                                    shopInventory.splice(shopMoney, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (mouseX > listOfInvX1Coords[i] && mouseX < listOfInvX2Coords[i] && mouseY > invY1Coord && mouseY < invY2Coord) //give the name of the Item and its stats when hovered over.
                            {
                                //The Name of the Item
                                XXX.font = "bold 60px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(shopInventory[i][0].identity, 1/2 * CCC.width, 140);

                                //Buy Price
                                XXX.font = "bold 140px Book Antiqua";
                                XXX.fillStyle = "gold";
                                XXX.textAlign = "center"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText(shopInventory[i][0].buyValue * itemAmount, 1/2 * CCC.width, 340);
                            }
                        }
                    }
                };

                this.merchandiseScrolling = function()
                {
                    //When the left inventory scroll is clicked scroll one to the left if there is one to the left otherwise don't.
                    if (this.merchPosition < shopInventory.length && mouseX > 1379.5 && mouseX < 1399.5 && mouseY > 0.5 && mouseY < 80 && clickReleased == true) //this (20.5, 0.5, 79, 79) is the position the first in the list will be in if the left scroll will not work.
                    {
                        this.timeSinceLastScrolled = new Date().getTime();
                        merchScroll -= 79;
                        this.merchPosition += 1;
                    }

                    //When the right inventory scroll is clicked scroll one to the right if there is one to the right otherwise don't.
                    if (this.merchPosition > 0 && mouseX > 0.5 && mouseX < 20.5 && mouseY > 0.5 && mouseY < 80 && clickReleased == true)
                    {
                        this.timeSinceLastScrolled = new Date().getTime();
                        merchScroll += 79;
                        this.merchPosition -= 1;
                    }
                };

                var selectNumber = 0;

                this.drawAmountSelector = function()
                {
                    //Draw Left Scroller
                    XXX.drawImage(polyPNG, 1, 735, 11, 30, (1/2 * CCC.width - 40) - 11, 440, 6, 32);
                    //Draw Name Display
                    XXX.beginPath();
                    XXX.fillStyle = "lightGrey";
                    XXX.lineWidth = 1;
                    XXX.strokeStyle = "black";
                    XXX.rect((1/2 * CCC.width - 40), 440, 80, 30);
                    XXX.fill();
                    XXX.stroke();
                    //Draw Right Scroller
                    XXX.drawImage(polyPNG, 11, 735, 11, 30, (1/2 * CCC.width - 40) + 84, 440, 6, 32);
                };

                this.amountScroll = function()
                {
                    //left Scroll
                    if (itemAmount > 1 && mouseX < (1/2 * CCC.width - 40) && mouseX >= (1/2 * CCC.width - 40) - 13 && mouseY > 440 && mouseY < 440 + 30 && clicked == true)
                    {
                        clicked = false;
                        if (shiftKey)
                        {
                            itemAmount = 1;
                        }
                        else
                        {
                            itemAmount -= 1;
                        }
                    }
                    else if (mouseX > (1/2 * CCC.width - 40) + 80 && mouseX <= (1/2 * CCC.width - 40) + 93 && mouseY > 440 && mouseY < 440 + 30 && clicked == true)
                    {
                        clicked = false;
                        if (shiftKey)
                        {
                            itemAmount = itemAmount * 2;
                        }
                        else
                        {
                            itemAmount += 1;
                        }
                    }

                    //Write number of amount in box
                    XXX.font = "bold 22px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(itemAmount, (1/2 * CCC.width - 40) + 40, 462.5)
                };

                //activate internal methods
                this.displaySellInventory();
                this.sellInventoryInteract();
                this.merchandiseScrolling();
                this.displayMerchandise();
                this.merchandiseInteract();
                this.drawAmountSelector();
                this.amountScroll();
            }
        };

        //SKILLS
        this.displayCharacterInfo = function ()
        {

            if (lowBar == "skills")
            {
                //MAIN BACKGROUND
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(1, 1, 1398, 526);
                XXX.fill();
                XXX.stroke();

                //CHARACTER DETAILS BOX
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 4;
                XXX.strokeRect(0, 0, 350, 215);

                //LEVEL AND MAGIC LEVEL BOX
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 4;
                XXX.strokeRect(0, 215, 350, 309);

                //EXPERIENCE SWITCHER BUTTON
                //the button part
                if (mouseX > 2 && mouseX < 2 + 148 && mouseY > 529 && mouseY < 529 + 20)
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();

                    if (clicked == true)
                    {
                        clicked = false;
                        if (this.experienceToggle == "normal")
                        {
                            this.experienceToggle = "magical";
                        }
                        else if (this.experienceToggle == "magical")
                        {
                            this.experienceToggle = "normal";
                        }
                    }
                }
                else
                {
                    XXX.beginPath();
                    XXX.fillStyle = "E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 3;
                    XXX.rect(2, 529, 148, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //the text part
                XXX.font = "12px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Toggle Experience Type", 75, 542);

                //EXPERIENCE BAR
                if (this.experienceToggle == "normal")
                {
                    LXX.beginPath();
                    LXX.fillStyle = "goldenrod";
                    LXX.fillRect(0, 0, (this.experience / this.experienceRequiredToLevel) * 1400, 80);

                    if (lMouseX > 0 && lMouseX < 1400 && lMouseY > 0 && lMouseY < 80)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "45px Book Antiqua";
                        LXX.textAlign = "center";
                        LXX.fillText("Experience: " + Math.floor(this.experience) + " / " + this.experienceRequiredToLevel, 700, 55);
                    }
                }
                else if (this.experienceToggle == "magical")
                {
                    LXX.beginPath();
                    LXX.fillStyle = "indigo";
                    LXX.fillRect(0, 0, (this.magicalExperience / this.magicalExperienceRequiredToLevel) * 1400, 80);

                    if (lMouseX > 0 && lMouseX < 1400 && lMouseY > 0 && lMouseY < 80)
                    {
                        LXX.fillStyle = "black";
                        LXX.font = "45px Book Antiqua";
                        LXX.textAlign = "center";
                        LXX.fillText("Magic Experience: " + Math.floor(this.magicalExperience) + " / " + this.magicalExperienceRequiredToLevel, 700, 55);
                    }
                }

                //PLAYER DETAILS
                //NAME
                //box
                XXX.beginPath();
                XXX.fillStyle = "lightGrey";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 3;
                XXX.rect(0, 0, 350, 51);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "bold 35px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.name, 174, 36);

                //Race
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 61, 85, 40);
                XXX.fill();
                XXX.stroke();

                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Race", 10 + (1 / 2 * 85), 90);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(105, 61, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.raceName, 105 + (1 / 2 * 235), 90);

                //Gender
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 111, 85, 40);
                XXX.fill();
                XXX.stroke();

                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Sex", 10 + (1 / 2 * 85), 90 + 50);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(105, 111, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.gender, 105 + (1 / 2 * 235), 90 + 50);

                //Status
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 161, 85, 40);
                XXX.fill();
                XXX.stroke();

                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Status", 10 + (1 / 2 * 85), 90 + 100);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(105, 161, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.title, 105 + (1 / 2 * 235), 90 + 100);

                //LEVEL

                //Level
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 76 + 150, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Level", 10 + (1 / 2 * 235), 105 + 150);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(255, 76 + 150, 85, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.level, 255 + (1 / 2 * 85), 105 + 150);

                //Skill Points
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 76 + 200, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Skill Points", 10 + (1 / 2 * 235), 105 + 200);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(255, 76 + 200, 85, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.skillPoints, 255 + (1 / 2 * 85), 105 + 200);

                //Total Skill Points
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 76 + 250, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Total Skill Points", 10 + (1 / 2 * 235), 105 + 250);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(255, 76 + 250, 85, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.totalSkillPoints, 255 + (1 / 2 * 85), 105 + 250);

                //Deviding line between level and magic level stuff
                XXX.beginPath();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 3;
                XXX.moveTo(0, 376);
                XXX.lineTo(350, 376);
                XXX.stroke();

                //Magic Level
                //Magic Level
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 86 + 300, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Magic Level", 10 + (1 / 2 * 235), 115 + 300);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(255, 86 + 300, 85, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.magicLevel, 255 + (1 / 2 * 85), 115 + 300);

                //Magic Points
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 86 + 345, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Magic Points", 10 + (1 / 2 * 235), 115 + 345);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(255, 86 + 345, 85, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.magicalSkillPoints, 255 + (1 / 2 * 85), 115 + 345);

                //Total Magic Points
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(10, 86 + 390, 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Total Magic Points", 10 + (1 / 2 * 235), 115 + 390);

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(255, 86 + 390, 85, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText(this.totalMagicPoints, 255 + (1 / 2 * 85), 115 + 390);

                //THE SKILLS
                //Constitution
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + (-87), 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Constitution", 360 + (1 / 2 * 235), 137 + (-87));

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + (-87), 105, 40);
                XXX.fill();
                XXX.stroke();
                //text
                if (this.AdConstitution > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.constitution + " + " + this.AdConstitution, 605 + (1 / 2 * 105), 137 + (-87));
                }
                else if (this.AdConstitution < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.constitution + " - " + (this.AdConstitution * -1), 605 + (1 / 2 * 105), 137 + (-87));
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.constitution, 605 + (1 / 2 * 105), 137 + (-87));
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + (-87) && mouseY < 138 + (-87))
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.constitution < 50)
                        {
                            this.skillPoints -= 1;
                            this.constitution += 1;
                            this.health += 2;
                        }
                    }

                    //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + (-87), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                    //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + (-87), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + (-87));

                    //Endurance
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + (-37), 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Endurance", 360 + (1 / 2 * 235), 137 + (-37));

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + (-37), 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdEndurance > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.endurance + " + " + this.AdEndurance, 605 + (1 / 2 * 105), 137 + (-37));
                }
                else if (this.AdEndurance < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.endurance + " - " + (this.AdEndurance * -1), 605 + (1 / 2 * 105), 137 + (-37));
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.endurance, 605 + (1 / 2 * 105), 137 + (-37));
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + (-37) && mouseY < 138 + (-37))
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.endurance < 50)
                        {
                            this.skillPoints -= 1;
                            this.endurance += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + (-37), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + (-37), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + (-37));

                    //Strength
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 13, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Strength", 360 + (1 / 2 * 235), 137 + 13);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 13, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdStrength > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.strength + " + " + this.AdStrength, 605 + (1 / 2 * 105), 137 + 13);
                }
                else if (this.AdStrength < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.strength + " - " + (this.AdStrength * -1), 605 + (1 / 2 * 105), 137 + 13);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.strength, 605 + (1 / 2 * 105), 137 + 13);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 13 && mouseY < 138 + 13)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.strength < 50)
                        {
                            this.skillPoints -= 1;
                            this.strength += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 13, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 13, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 13);

                    //Toughness
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 63, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Toughness", 360 + (1 / 2 * 235), 137 + 63);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 63, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdToughness > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.toughness + " + " + this.AdToughness, 605 + (1 / 2 * 105), 137 + 63);
                }
                else if (this.AdToughness < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.toughness + " - " + (this.AdToughness * -1), 605 + (1 / 2 * 105), 137 + 63);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.toughness, 605 + (1 / 2 * 105), 137 + 63);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 63 && mouseY < 138 + 63)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.toughness < 50)
                        {
                            this.skillPoints -= 1;
                            this.toughness += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 63, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 63, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 63);

                    //Stamina
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 113, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Stamina", 360 + (1 / 2 * 235), 137 + 113);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 113, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdStamina > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.stamina + " + " + this.AdStamina, 605 + (1 / 2 * 105), 137 + 113);
                }
                else if (this.AdStamina < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.stamina + " - " + (this.AdStamina * -1), 605 + (1 / 2 * 105), 137 + 113);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.stamina, 605 + (1 / 2 * 105), 137 + 113);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 113 && mouseY < 138 + 113)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.stamina < 50)
                        {
                            this.skillPoints -= 1;
                            this.stamina += 1;
                            this.energy += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 113, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 113, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 113);

                    //Dexterity
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 163, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Dexterity", 360 + (1 / 2 * 235), 137 + 163);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 163, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdDexterity > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.dexterity + " + " + this.AdDexterity, 605 + (1 / 2 * 105), 137 + 163);
                }
                else if (this.AdDexterity < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.dexterity + " - " + (this.AdDexterity * -1), 605 + (1 / 2 * 105), 137 + 163);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.dexterity, 605 + (1 / 2 * 105), 137 + 163);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 163 && mouseY < 138 + 163)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.dexterity < 50)
                        {
                            this.skillPoints -= 1;
                            this.dexterity += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 163, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 163, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 163);

                    //RANGED
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 213, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Ranged", 360 + (1 / 2 * 235), 137 + 213);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 213, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdRanged > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.ranged + " + " + this.AdRanged, 605 + (1 / 2 * 105), 137 + 213);
                }
                else if (this.AdRanged < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.ranged + " - " + (this.AdRanged * -1), 605 + (1 / 2 * 105), 137 + 213);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.ranged, 605 + (1 / 2 * 105), 137 + 213);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 213 && mouseY < 138 + 213)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.ranged < 50)
                        {
                            this.skillPoints -= 1;
                            this.ranged += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 213, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 213, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 213);

                    //Stealth
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 263, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Stealth", 360 + (1 / 2 * 235), 137 + 263);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 263, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdStealth > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.stealth + " + " + this.AdStealth, 605 + (1 / 2 * 105), 137 + 263);
                }
                else if (this.AdStealth < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.stealth + " - " + (this.AdStealth * -1), 605 + (1 / 2 * 105), 137 + 263);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.stealth, 605 + (1 / 2 * 105), 137 + 263);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 263 && mouseY < 138 + 263)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.stealth < 50)
                        {
                            this.skillPoints -= 1;
                            this.stealth += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 263, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 263, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 263);

                    //Intelligence
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 313, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Intelligence", 360 + (1 / 2 * 235), 137 + 313);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 313, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdIntelligence > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.intelligence + " + " + this.AdIntelligence, 605 + (1 / 2 * 105), 137 + 313);
                }
                else if (this.AdIntelligence < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.intelligence + " - " + (this.AdIntelligence * -1), 605 + (1 / 2 * 105), 137 + 313);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.intelligence, 605 + (1 / 2 * 105), 137 + 313);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 313 && mouseY < 138 + 313)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.intelligence < 50)
                        {
                            this.skillPoints -= 1;
                            this.intelligence += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 313, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 313, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 313);

                    //Charisma
                        //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360, 108 + 363, 235, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Charisma", 360 + (1 / 2 * 235), 137 + 363);

                        //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605, 108 + 363, 105, 40);
                XXX.fill();
                XXX.stroke();
                            //text
                if (this.AdCharisma > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.charisma + " + " + this.AdCharisma, 605 + (1 / 2 * 105), 137 + 363);
                }
                else if (this.AdCharisma < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.charisma + " - " + (this.AdCharisma * -1), 605 + (1 / 2 * 105), 137 + 363);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.charisma, 605 + (1 / 2 * 105), 137 + 363);
                }

                if (mouseX > 720 && mouseX < 740 && mouseY > 118 + 363 && mouseY < 138 + 363)
                {
                    if (clicked == true && this.skillPoints >= 1)
                    {
                        clicked = false;
                        if (this.charisma < 50)
                        {
                            this.skillPoints -= 1;
                            this.charisma += 1;
                        }
                    }

                        //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 363, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                        //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720, 118 + 363, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                            //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730, 136 + 363);

                    //Knowledge
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360 + 530, 108 + (-87), 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Knowledge", 360 + 530+ (1 / 2 * 235), 137 + (-87)); //29 more

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605 + 530, 108 + (-87), 105, 40);
                XXX.fill();
                XXX.stroke();
                //text
                if (this.AdKnowledge > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.knowledge + " + " + this.AdKnowledge, 605 + 530 + (1 / 2 * 105), 137 -87);
                }
                else if (this.AdKnowledge < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.knowledge + " - " + (this.AdKnowledge * -1), 605 + 530 + (1 / 2 * 105), 137 -87);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.knowledge, 605 + 530 + (1 / 2 * 105), 137 -87);
                }

                if (mouseX > 720 + 530 && mouseX < 740 + 530 && mouseY > 118 - 87 && mouseY < 138 - 87)
                {
                    if (clicked == true && this.magicalSkillPoints >= 1)
                    {
                        clicked = false;
                        if (this.knowledge < 50)
                        {
                            this.magicalSkillPoints -= 1;
                            this.knowledge += 1;
                        }
                    }

                    //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118  -87, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                    //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 - 87, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730 + 530, 136 -87);

                    //Memory
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360 + 530, 108 + (-37), 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Memory", 360 + 530+ (1 / 2 * 235), 137 + (-37)); //29 more

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605 + 530, 108 + (-37), 105, 40);
                XXX.fill();
                XXX.stroke();
                //text
                if (this.AdMemory > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.memory + " + " + this.AdMemory, 605 + 530 + (1 / 2 * 105), 137 -37);
                }
                else if (this.AdMemory < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.memory + " - " + (this.AdMemory * -1), 605 + 530 + (1 / 2 * 105), 137 -37);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.memory, 605 + 530 + (1 / 2 * 105), 137 -37);
                }

                if (mouseX > 720 + 530 && mouseX < 740 + 530 && mouseY > 118 - 37 && mouseY < 138 - 37)
                {
                    if (clicked == true && this.magicalSkillPoints >= 1)
                    {
                        clicked = false;
                        if (this.memory < 50)
                        {
                            this.magicalSkillPoints -= 1;
                            this.memory += 1;
                        }
                    }

                    //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118  -37, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                    //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 - 37, 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730 + 530, 136 -37);

                    //willpower
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360 + 530, 108 + (13), 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Willpower", 360 + 530 + (1 / 2 * 235), 137 + (13)); //29 more

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605 + 530, 108 + (13), 105, 40);
                XXX.fill();
                XXX.stroke();
                //text
                if (this.AdWillpower > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.willpower + " + " + this.AdWillpower, 605 + 530 + (1 / 2 * 105), 137 + 13);
                }
                else if (this.AdWillpower < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.willpower + " - " + (this.AdWillpower * -1), 605 + 530 + (1 / 2 * 105), 137 + 13);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.willpower, 605 + 530 + (1 / 2 * 105), 137 + 13);
                }

                if (mouseX > 720 + 530 && mouseX < 740 + 530 && mouseY > 118 + (13) && mouseY < 138 + (13))
                {
                    if (clicked == true && this.magicalSkillPoints >= 1)
                    {
                        clicked = false;
                        if (this.willpower < 50)
                        {
                            this.magicalSkillPoints -= 1;
                            this.willpower += 1;
                        }
                    }

                    //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 + (13), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                    //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 + (13), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730 + 530, 136 + (13));

                    //Concentration
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360 + 530, 108 + (63), 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Concentration", 360 + 530 + (1 / 2 * 235), 137 + (63)); //29 more

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605 + 530, 108 + (63), 105, 40);
                XXX.fill();
                XXX.stroke();
                //text
                if (this.AdConcentration > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.concentration + " + " + this.AdConcentration, 605 + 530 + (1 / 2 * 105), 137 + 63);
                }
                else if (this.AdConcentration < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.concentration + " - " + (this.AdConcentration * -1), 605 + 530 + (1 / 2 * 105), 137 + 63);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.concentration, 605 + 530 + (1 / 2 * 105), 137 + 63);
                }

                if (mouseX > 720 + 530 && mouseX < 740 + 530 && mouseY > 118 + (63) && mouseY < 138 + (63))
                {
                    if (clicked == true && this.magicalSkillPoints >= 1)
                    {
                        clicked = false;
                        if (this.concentration < 50)
                        {
                            this.magicalSkillPoints -= 1;
                            this.concentration += 1;
                        }
                    }

                    //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 + (63), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                    //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 + (63), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730 + 530, 136 + (63));

                    //Eminence
                //box: subject half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(360 + 530, 108 + (113), 235, 40);
                XXX.fill();
                XXX.stroke();
                //text
                XXX.font = "30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("Eminence", 360 + 530 + (1 / 2 * 235), 137 + (113)); //29 more

                //box: response half
                XXX.beginPath();
                XXX.fillStyle = "#E8E8E8";
                XXX.strokeStyle = "black";
                XXX.lineWidth = 1;
                XXX.rect(605 + 530, 108 + (113), 105, 40);
                XXX.fill();
                XXX.stroke();
                //text
                if (this.AdEminence + this.emiBoost > 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#00EE76";
                    XXX.textAlign = "center";
                    XXX.fillText(this.eminence + " + " + (this.AdEminence + this.emiBoost), 605 + 530 + (1 / 2 * 105), 137 + 113);
                }
                else if (this.AdEminence + this.emiBoost < 0)
                {
                    XXX.font = "bold 30px Book Antiqua";
                    XXX.fillStyle = "#EE0000";
                    XXX.textAlign = "center";
                    XXX.fillText(this.eminence + " - " + ((this.AdEminence + this.emiBoost) * -1), 605 + 530 + (1 / 2 * 105), 137 + 113);
                }
                else
                {
                    XXX.font = "30px Book Antiqua";
                    XXX.fillStyle = "black";
                    XXX.textAlign = "center";
                    XXX.fillText(this.eminence, 605 + 530 + (1 / 2 * 105), 137 + 113);
                }

                if (mouseX > 720 + 530 && mouseX < 740 + 530 && mouseY > 118 + (113) && mouseY < 138 + (113))
                {
                    if (clicked == true && this.magicalSkillPoints >= 1)
                    {
                        clicked = false;
                        if (this.eminence < 50)
                        {
                            this.magicalSkillPoints -= 1;
                            this.eminence += 1;
                        }
                    }

                    //box: Upgrade box (hovered over)
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 + (113), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                else
                {
                    //box: Upgrade box
                    XXX.beginPath();
                    XXX.fillStyle = "#E8E8E8";
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 1;
                    XXX.rect(720 + 530, 118 + (113), 20, 20);
                    XXX.fill();
                    XXX.stroke();
                }
                //text
                XXX.font = "italic 30px Book Antiqua";
                XXX.fillStyle = "black";
                XXX.textAlign = "center";
                XXX.fillText("+", 730 + 530, 136 + (113));
            }
        };

            //INVENTORY
        this.displayInventory = function()
        {
            if (lowBar == "inventory")
            {
                // each inventory slot is a list with three things in it... [Item, quantity]
                for (var i = 0; i < Inventory.length; i++)
                {
                    if (Inventory[i][0].equipped == true)
                    {
                        LXX.beginPath();
                        LXX.lineWidth = 2;
                        LXX.fillStyle ="rgba(102, 255, 102, 0.35)";
                        LXX.strokeStyle ="black";
                        LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                        LXX.fill();
                        LXX.stroke();
                        Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                        //quantity
                        LXX.font="16px Book Antiqua";
                        LXX.textAlign="left";
                        LXX.fillStyle ="black";
                        if (Inventory[i][1] < 1000)
                        {
                            LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                        {
                            LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        else if (Inventory[i][1] >= 1000000)
                        {
                            LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        //drop button
                        LXX.drawImage(polyPNG, 183, 7, 17, 15, invScroll +20.5 + (79 * i) + 62, 3, 18.7, 16.5);
                        //weight
                        LXX.font="10px Book Antiqua";
                        LXX.fillStyle ="black";
                        LXX.textAlign="right";
                        LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                        LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                    }
                    else
                    {
                        LXX.beginPath();
                        LXX.lineWidth = 2;
                        LXX.fillStyle ="rgba(222, 184, 135, 0.15)";
                        LXX.strokeStyle ="black";
                        LXX.rect(invScroll + 20.5 + (79 * i), 0.5, 79, 79);
                        LXX.fill();
                        LXX.stroke();
                        Inventory[i][0].drawInventoryItem(Inventory[i][0].type, invScroll + 20.5 + (79 * i) + (1/2 * 79), 1/2 * 79);
                        //quantity
                        LXX.font="16px Book Antiqua";
                        LXX.textAlign="left";
                        LXX.fillStyle ="black";
                        if (Inventory[i][1] < 1000)
                        {
                            LXX.fillText(Inventory[i][1], invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        else if (Inventory[i][1] >= 1000 && Inventory[i][1] < 1000000)
                        {
                            LXX.fillText(Math.floor(Inventory[i][1] / 1000) + "K", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        else if (Inventory[i][1] >= 1000000)
                        {
                            LXX.fillText((Math.floor(Inventory[i][1] / 100000) / 10) + "M", invScroll + 20.5 + (79 * i) + (1/2 * 79) - 37, (39/40 * 79));
                        }
                        //drop button
                        LXX.drawImage(polyPNG, 183, 7, 17, 15, invScroll +20.5 + (79 * i) + 62, 3, 18.7, 16.5);
                        //weight
                        LXX.font="10px Book Antiqua";
                        LXX.fillStyle ="black";
                        LXX.textAlign="right";
                        LXX.fillText("W:" + Inventory[i][0].weight, invScroll + 20.5 + (79 * i) + (1/2 * 79) + 37, (39/40 * 79));
                        LXX.textAlign="left"; // this is to reset it back to standard for those oldies out there...
                    }
                }

                //left scroll arrow
                LXX.beginPath();
                LXX.lineWidth = 1;
                LXX.fillStyle ="darkGrey";
                LXX.strokeStyle ="black";
                LXX.rect(0.5, 0.5, 20, 79);
                LXX.fill();
                LXX.stroke();
                LXX.drawImage(polyPNG, 1, 735, 11, 30, 4, 8, 12, 64);

                //weight display
                LXX.beginPath();
                LXX.fillStyle ="lightGray";
                LXX.strokeStyle ="black";
                LXX.rect(1329.5, 0.1, 50, 79.8);
                LXX.fill();
                LXX.stroke();
                //Draw a cover on the weight display to represent the amount of carry weight filled.
                LXX.beginPath();
                //LXX.fillStyle ="rgba(255, 255, 255, 0.65)"; //white fill in colour
                //LXX.fillStyle ="rgba(139, 134, 78, 0.8)"; //beige fill in colour
                //LXX.fillStyle = "rgba(138, 54, 15, 0.65)"; //burnt sienna colour
                LXX.fillStyle ="grey";
                LXX.rect(1329.6, 79.5, 50, -79 * this.carryWeight / this.carryWeightMAX);
                LXX.fill();
                //Draw the weight number on the top and bottom and the deviding bar.
                LXX.font="16px Book Antiqua";
                LXX.fillStyle = "black";
                LXX.textAlign="center";
                LXX.fillText(JSON.stringify(Math.floor(this.carryWeight)), 1352, 25);
                    //dividing line
                LXX.beginPath();
                LXX.strokeStyle="black";
                LXX.lineWidth=3;
                LXX.moveTo(1334, 39.5);
                LXX.lineTo(1374, 39.5);
                LXX.stroke();
                    //divisor
                LXX.font="16px Book Antiqua";
                LXX.fillStyle = "black";
                LXX.textAlign="center";
                LXX.fillText(JSON.stringify(Math.floor(this.carryWeightMAX)), 1352, 64.5);
                LXX.textAlign="left"; //this is to reset it to the standard for the rest to come.

                //right scroll arrow
                LXX.beginPath();
                LXX.lineWidth=1;
                LXX.fillStyle ="darkGrey";
                LXX.strokeStyle ="black";
                LXX.rect(1379.5, 0.5, 20, 79);
                LXX.fill();
                LXX.stroke();
                LXX.drawImage(polyPNG, 11, 735, 11, 30, 1384, 8, 12, 64);
            }
        };

        this.interactWithInventory = function()
        {
            var listOfInvX1Coords = []; //this is the list of the X coordinates for the Inventory Slots.

            for (var i = - this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
            {
                listOfInvX1Coords.push(20.5 + (79 * i));
            }


            var listOfInvX2Coords = []; //This is the same as the X1 coords except for with an added 79 to each.

            for (var i = - this.inventoryPosition; i < Inventory.length - this.inventoryPosition; i++)
            {
                listOfInvX2Coords.push(20.5 + (79 * i) + 79);
            }


            var invY1Coord = 0.5; //This doesn't change.


            var invY2Coord = 79.5; //this is just Y + 79

            for (var i = Inventory.length - 1; i > -1; i--)
            {
                if (lMouseX >= 21 && lMouseX <= 1329) //This checks if the mouse is between the scroll buttons rather than on them.
                {
                    if (shiftKey != true && lowBar == "inventory" && clickReleased == true && lMouseX > listOfInvX1Coords[i] + 64 && lMouseX < listOfInvX2Coords[i] && lMouseY > 3 && lMouseY < 20 && Inventory[i][0].equipped == false && this.REQB == false) //Drop item when the X button is pressed.
                    {
                        Inventory[i][1] -= 1;
                        if (Inventory[i][1] <= 0)
                        {
                            Inventory[i][0].X = X;
                            Inventory[i][0].Y = Y;
                            worldItems.push([Inventory[i][0], 1]);

                            Inventory.splice(i, 1);
                        }
                        else
                        {
                            worldItems.push([new Item(Inventory[i][0].type, X, Y), 1]);
                        }
                    }
                    else if (shiftKey == true && lowBar == "inventory"  && clickReleased == true && lMouseX > listOfInvX1Coords[i] + 64 && lMouseX < listOfInvX2Coords[i] && lMouseY > 3 && lMouseY < 20 && Inventory[i][0].equipped == false && this.REQB == false) //Drop all items when the X button is pressed.
                    {
                        worldItems.push([new Item(Inventory[i][0].type, X, Y), Inventory[i][1] + cheatItem]);
                        Inventory.splice(i, 1);
                    }
                    else if (clickReleased == true && lowBar == "inventory" && lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord && this.REQB == false) //When you click on an item you either access its utility or you equip it.
                    {
                        //console.log(Inventory[i][0].equipped);
                        if (Inventory[i][0].utility == "food")
                        {
                            //Eating/Drinking
                            this.hunger = Math.min(this.hungerMAX, this.hunger + Inventory[i][0].hunger);
                            this.energy = Math.min(this.energyMAX, this.energy + Inventory[i][0].generation);
                            this.health = Math.min(this.healthMAX, this.health + Inventory[i][0].heal);
                            this.will = Math.min(this.willMAX, this.will + Inventory[i][0].replenish);
                            this.warmth = Math.min(this.warmthMAX, this.warmth + Inventory[i][0].warmth);
                            this.thirst = Math.min(this.thirstMAX, this.thirst + Inventory[i][0].thirst);
                            this.sleep = Math.min(this.sleepMAX, this.sleep + Inventory[i][0].wake);
                            this.inebriation += Inventory[i][0].alcohol;

                            //some items when used will give you an item when they are used.
                            if (Inventory[i][0].subUtility == "reusable")
                            {
                                var hits = 0;
                                for (var rr = 0; rr < Inventory[i][0].refund.length; rr ++)
                                {
                                    for (var r = 0; r < Inventory.length; r ++)
                                    {
                                        if (Inventory[r][0].type == Inventory[i][0].refund[rr][0])
                                        {
                                            Inventory[r][1] += Inventory[i][0].refund[rr][1];
                                            break;
                                        }
                                        else
                                        {
                                            hits += 1;
                                        }
                                    }
                                    if (hits == Inventory.length)
                                    {
                                        Inventory.push([new Item(Inventory[i][0].refund[rr][0], false, false), Inventory[i][0].refund[rr][1]]);
                                    }
                                }
                            }
                            //Inside of this IF statement is the place to write the effects gained from eating/drinking etc.
                            if (Inventory[i][0].ability != "none")
                            {
                                //Effects

                                if (Inventory[i][0].ability == "gutWorms" && this.gutWorms == false) //gut worms
                                {
                                    var gutwormz = Math.round(Math.random()); //this makes it so that you will only get the gut worms 50% of the time.
                                    if (gutwormz)
                                    {
                                        this.gutWorms = true;
                                    }
                                }
                                else if (Inventory[i][0].ability == "gojii") //gojii berry poison
                                {
                                    this.gojiiTimer = new Date().getTime();
                                    this.gojiiVomit = true;
                                }
                                else if (Inventory[i][0].ability == "satiate") //Food with this effect will keep you fed for a little bit.
                                {
                                    this.fed = true;
                                }
                                else if (Inventory[i][0].ability == "quench") //Food with this effect will keep you quenched for a little bit.
                                {
                                    this.watered = true;
                                }
                                else if (Inventory[i][0].ability == "sensational") //Food with this effect will keep you fed and quenched for a little bit.
                                {
                                    this.watered = true;
                                    this.fed = true;
                                }
                                else if (Inventory[i][0].ability == "healthVI") //This is the highest level of health regeneration.
                                {
                                    this.recoveryTime = 200;
                                    this.recoverV = true;
                                }
                                else if (Inventory[i][0].ability == "healthV") //This is the highest level of health regeneration.
                                {
                                    this.recoveryTime = 100;
                                    this.recoverV = true;
                                }
                                else if (Inventory[i][0].ability == "healthIV") //This is the fourth level of health regeneration.
                                {
                                    this.recoveryTime = 100;
                                    this.recoverIV = true;
                                }
                                else if (Inventory[i][0].ability == "healthIII") //This is the third level of health regeneration.
                                {
                                    this.recoveryTime = 100;
                                    this.recoverIII = true;
                                }
                                else if (Inventory[i][0].ability == "healthII") //This is the third level of health regeneration.
                                {
                                    this.recoveryTime = 100;
                                    this.recoverII = true;
                                }
                                else if (Inventory[i][0].ability == "healthI") //This is the third level of health regeneration.
                                {
                                    this.recoveryTime = 100;
                                    this.recoverI = true;
                                }
                                else if (Inventory[i][0].ability == "fatigueV") //This is the highest level of health regeneration.
                                {
                                    this.energilTime = 600;
                                    this.fatigueV = true;
                                }
                                else if (Inventory[i][0].ability == "fatigueIV") //This is the fourth level of health regeneration.
                                {
                                    this.energilTime = 600;
                                    this.fatigueIV = true;
                                }
                                else if (Inventory[i][0].ability == "fatigueIII") //This is the third level of health regeneration.
                                {
                                    this.energilTime = 600;
                                    this.fatigueIII = true;
                                }
                                else if (Inventory[i][0].ability == "fatigueII") //This is the third level of health regeneration.
                                {
                                    this.energilTime = 600;
                                    this.fatigueII = true;
                                }
                                else if (Inventory[i][0].ability == "fatigueI") //This is the third level of health regeneration.
                                {
                                    this.energilTime = 600;
                                    this.fatigueI = true;
                                }
                                else if (Inventory[i][0].ability == "energilV") //This is the highest level of health regeneration.
                                {
                                    this.energilTime = 400;
                                    this.energilV = true;
                                }
                                else if (Inventory[i][0].ability == "energilIV") //This is the fourth level of health regeneration.
                                {
                                    this.energilTime = 400;
                                    this.energilIV = true;
                                }
                                else if (Inventory[i][0].ability == "energilIII") //This is the third level of health regeneration.
                                {
                                    this.energilTime = 400;
                                    this.energilIII = true;
                                }
                                else if (Inventory[i][0].ability == "energilII") //This is the third level of health regeneration.
                                {
                                    this.energilTime = 400;
                                    this.energilII = true;
                                }
                                else if (Inventory[i][0].ability == "energilI") //This is the third level of health regeneration.
                                {
                                    this.energilTime = 400;
                                    this.energilI = true;
                                }
                                else if (Inventory[i][0].ability == "energyV") //This is the highest level of health regeneration.
                                {
                                    this.energizeTime = 100;
                                    this.energizeV = true;
                                }
                                else if (Inventory[i][0].ability == "energyIV") //This is the fourth level of health regeneration.
                                {
                                    this.energizeTime = 100;
                                    this.energizeIV = true;
                                }
                                else if (Inventory[i][0].ability == "energyIII") //This is the third level of health regeneration.
                                {
                                    this.energizeTime = 100;
                                    this.energizeIII = true;
                                }
                                else if (Inventory[i][0].ability == "energyII") //This is the third level of health regeneration.
                                {
                                    this.energizeTime = 100;
                                    this.energizeII = true;
                                }
                                else if (Inventory[i][0].ability == "energyI") //This is the third level of health regeneration.
                                {
                                    this.energizeTime = 100;
                                    this.energizeI = true;
                                }
                                else if (Inventory[i][0].ability == "ogardPerfume") //This makes you smell good therefore enchanting those you interact with to like you more and give you better deals... that is if you are not a man.
                                {
                                    this.perfume = "ogard";
                                    this.perfumeTime = 540;
                                    this.perfumeStoreTime = new Date().getTime();
                                }
                                else if (Inventory[i][0].ability == "speedI") //This is for enhancing dexterity.
                                {
                                    this.dexTime = new Date().getTime();
                                    this.speedI = true;
                                }
                                else if (Inventory[i][0].ability == "speedII") //This is for enhancing dexterity.
                                {
                                    this.dexTime = new Date().getTime();
                                    this.speedII = true;
                                }
                                else if (Inventory[i][0].ability == "speedIII") //This is for enhancing dexterity.
                                {
                                    this.dexTime = new Date().getTime();
                                    this.speedIII = true;
                                }
                                else if (Inventory[i][0].ability == "speedIV") //This is for enhancing dexterity.
                                {
                                    this.dexTime = new Date().getTime();
                                    this.speedIV = true;
                                }
                                else if (Inventory[i][0].ability == "speedV") //This is for enhancing dexterity.
                                {
                                    this.dexTime = new Date().getTime();
                                    this.speedV = true;
                                }
                                else if (Inventory[i][0].ability == "gassiness") //This gives the player indigestion (bad gasses)
                                {
                                        this.gassinessTime += 20;
                                }
                                else if (Inventory[i][0].ability == "fleshMites") //This gives the player fleshMites
                                {
                                    var fleshMitez = Math.floor(Math.random() * 4);
                                    if (fleshMitez)
                                    {
                                        this.fleshMites = true;
                                    }
                                }
                                else if (Inventory[i][0].ability == "cleansing")
                                {
                                    //takes away satiation and quenched
                                    this.fedClock = 0;
                                    this.wateredClock = 0;

                                    //takes away up to poisonIII
                                    this.poisonI = false;
                                    this.poisonII = false;
                                    this.poisonIII = false;
                                    this.poisonIV = false;
                                    if (this.poisonV == true)
                                    {
                                        this.poisonV = false;
                                        this.poisonI = true;
                                    }
                                    this.fleshMites = false;
                                    this.gutWorms = false;
                                    this.brainMaggots = false;
                                    this.gojiiTimer = 0;
                                    this.gojiiPoisoned = false;
                                    this.insomniaTime = 0;
                                    this.insomniaStoreTime = 0;
                                    this.insomniated = false; //this is a flag that lets thing give the player permanent insomnia until this is switched off by something.


                                    //food poison and reduced hunger.
                                    if (this.timeSinceBadFoodEaten == 0)
                                    {
                                        this.timeSinceBadFoodEaten = new Date().getTime();
                                    }
                                }
                                else if (Inventory[i][0].ability == "foodPoisoning") //this effect makes the player vomit and lose 22 hunger.
                                {
                                    if (this.timeSinceBadFoodEaten == 0)
                                    {
                                        this.timeSinceBadFoodEaten = new Date().getTime();
                                    }
                                    else if (new Date().getTime() - this.timeSinceBadFoodEaten < 33000 - 11500)
                                    {
                                        this.timeSinceBadFoodEaten -= 11000
                                    }
                                    else if (new Date().getTime() - this.timeSinceBadFoodEaten < 33000 - 4500)
                                    {
                                        this.timeSinceBadFoodEaten -= 4000
                                    }
                                }
                                else if (Inventory[i][0].ability == "potentialFoodPoisoning") //this effect makes the player vomit and lose 22 hunger.
                                {
                                    var chanse = Math.floor(Math.random() * 3); //By the way I know that chance is not spelled with an S this is so that I won't be repetitive with variable names.

                                    if (chanse == 0)
                                    {
                                        if (this.timeSinceBadFoodEaten == 0)
                                        {
                                            this.timeSinceBadFoodEaten = new Date().getTime();
                                        }
                                    }

                                    if (this.timeSinceBadFoodEaten != 0 && new Date().getTime() - this.timeSinceBadFoodEaten < 33000 - 11500)
                                    {
                                        this.timeSinceBadFoodEaten -= 11000
                                    }
                                    else if (this.timeSinceBadFoodEaten != 0 && new Date().getTime() - this.timeSinceBadFoodEaten < 33000 - 4500)
                                    {
                                        this.timeSinceBadFoodEaten -= 4000
                                    }
                                }
                                else if (Inventory[i][0].ability == "trollPoison") //trollPoison
                                {
                                    this.poisonI = true;
                                    this.timeSinceRawTrollBlood = new Date().getTime();
                                }
                                else if (Inventory[i][0].ability == "undriedCyrinthilim") //if a fresh cyrinthilim mushroom is eaten...
                                {
                                    this.poisonIV = true;
                                    if (this.cyrinthilimTime < 0)
                                    {
                                        this.cyrinthilimTime = 0;
                                    }
                                    this.cyrinthilimTime += 36;
                                }
                                else if (Inventory[i][0].ability == "cyrinthilim") //if a dried cyrinthilim mushroom is eaten...
                                {
                                    if (this.cyrinthilimTime < 0)
                                    {
                                        this.cyrinthilimTime = 0;
                                    }
                                    this.cyrinthilimTime += Math.floor(Math.random() * 11) + 10;
                                }
                                else if (Inventory[i][0].ability == "poisonI") //poisonI
                                {
                                    this.poisonI = true;
                                }
                                else if (Inventory[i][0].ability == "poisonII") //poisonII
                                {
                                    this.poisonII = true;
                                }
                                else if (Inventory[i][0].ability == "poisonIII") //poisonIII
                                {
                                    this.poisonIII = true;
                                }
                                else if (Inventory[i][0].ability == "poisonIV") //poisonIV
                                {
                                    this.poisonIV = true;
                                }
                                else if (Inventory[i][0].ability == "poisonV") //poisonV
                                {
                                    this.poisonV = true;
                                }
                            }

                            if (Inventory[i][1] <= 1)
                            {
                                Inventory.splice(i, 1);
                            }
                            else
                            {
                                Inventory[i][1] -= 1;
                            }
                        }
                        else if (Inventory[i][0].utility == "weapon")
                        {
                            //equpping a weapon
                            if (this.isWeaponEquipped == false)
                            {
                                Inventory[i][0].equipped = true;
                                this.isWeaponEquipped = true;
                                this.weaponEquipped = Inventory[i][0].type;
                                this.weaponIsRanged = false;
                            }
                            else
                            {
                                //unequipping a weapon
                                if (Inventory[i][0].equipped == true)
                                {
                                    this.isWeaponEquipped = false;
                                    Inventory[i][0].equipped = false;
                                    this.weaponEquipped = "none";
                                    this.weaponIsRanged = false;
                                }

                            }
                        }
                        else if (Inventory[i][0].utility == "spell")
                        {
                            var slaps = 0;
                            //learning a spell
                            if (Inventory[i][0].spellGroup == "Form" && player.getKnowledge() >= Inventory[i][0].spellKnowledgeRequirement)
                            {
                                for (var sp = 0; sp < primarySpells.length; sp++)
                                {
                                    if (Inventory[i][0].spellID == primarySpells[sp].ID)
                                    {
                                        primarySpells[sp].name = Inventory[i][0].spellName;
                                        primarySpells[sp].cost = Inventory[i][0].spellCost;
                                        primarySpells[sp].cooldown = Inventory[i][0].spellCooldown;
                                        primarySpells[sp].description = Inventory[i][0].spellDescription;
                                        primarySpells[sp].EXP = Inventory[i][0].spellEXP;
                                        slaps += 1;
                                    }
                                }

                                if (slaps == 0 && (this.memory - 1) >= 0)
                                {
                                    this.will = 0;
                                    this.memory -= 1;
                                    this.spellzLearned += 1;
                                    primarySpells.push({name: Inventory[i][0].spellName, ID: Inventory[i][0].spellID, equipped: false, cost: Inventory[i][0].spellCost, cooldown: Inventory[i][0].spellCooldown, description: Inventory[i][0].spellDescription, EXP: Inventory[i][0].spellEXP});
                                }
                            }
                            else if (Inventory[i][0].spellGroup == "Incantation" && player.getKnowledge() >= Inventory[i][0].spellKnowledgeRequirement)
                            {
                                for (var ssp = 0; ssp < secondarySpells.length; ssp++)
                                {
                                    if (Inventory[i][0].spellID == secondarySpells[ssp].ID)
                                    {
                                        secondarySpells[ssp].name = Inventory[i][0].spellName;
                                        secondarySpells[ssp].cost = Inventory[i][0].spellCost;
                                        secondarySpells[ssp].cooldown = Inventory[i][0].spellCooldown;
                                        secondarySpells[ssp].description = Inventory[i][0].spellDescription;
                                        secondarySpells[ssp].EXP = Inventory[i][0].spellEXP;
                                        slaps += 1;
                                    }
                                }

                                if (slaps == 0 && (this.memory - 1) >= 0)
                                {
                                    this.will = 0;
                                    this.memory -= 1;
                                    this.spellzLearned += 1;
                                    secondarySpells.push({name: Inventory[i][0].spellName, ID: Inventory[i][0].spellID, equipped: false, cost: Inventory[i][0].spellCost, cooldown: Inventory[i][0].spellCooldown, description: Inventory[i][0].spellDescription, EXP: Inventory[i][0].spellEXP});
                                }
                            }
                            //TODO add learning of the other two types of spells.
                        }
                        else if (Inventory[i][0].utility == "ranged")
                        {
                            //equpping a ranged weapon
                            if (this.isWeaponEquipped == false)
                            {
                                Inventory[i][0].equipped = true;
                                this.isWeaponEquipped = true;
                                this.weaponEquipped = Inventory[i][0].type;
                                this.rangedWeaponType = Inventory[i][0].subUtility;
                                this.weaponIsRanged = true;

                                if (Inventory[i][0].subUtility == "bow")
                                {
                                    this.projectileReleased = true;
                                }
                                else if (Inventory[i][0].subUtility == "bow")
                                {
                                    this.projectileReleased = false;
                                }
                            }
                            else
                            {
                                //unequipping a ranged weapon
                                if (Inventory[i][0].equipped == true)
                                {
                                    Inventory[i][0].equipped = false;
                                    this.isWeaponEquipped = false;
                                    this.rangedWeaponType = "none";
                                    this.weaponEquipped = "none";
                                    this.weaponIsRanged = false;
                                }
                            }
                        }
                        else if (Inventory[i][0].utility == "ammunition")
                        {
                            //equpping a ranged weapon
                            if (this.isAmmoEquipped == false)
                            {
                                Inventory[i][0].equipped = true;
                                this.isAmmoEquipped = true;
                            }
                            else
                            {
                                //unequipping a ranged weapon
                                if (Inventory[i][0].equipped == true)
                                {
                                    Inventory[i][0].equipped = false;
                                    this.isAmmoEquipped = false;
                                }
                            }
                        }
                        else if (Inventory[i][0].utility == "worn")
                        {
                            if (Inventory[i][0].subUtility == "armour" || Inventory[i][0].subUtility == "clothing" || Inventory[i][0].subUtility == "magic")
                            {
                                //equpping armour
                                if (this.isArmourEquipped == false)
                                {
                                    Inventory[i][0].equipped = true;
                                    this.isArmourEquipped = true;
                                    this.outfitEquipped = Inventory[i][0].type;
                                    //console.log(Inventory[i][0].type + " :: " + this.armour);
                                }
                                else
                                {
                                    //console.log(Inventory[i][0].type + " :: " + this.armour);
                                    //unequipping armour
                                    if (Inventory[i][0].equipped == true)
                                    {
                                        Inventory[i][0].equipped = false;
                                        this.isArmourEquipped = false;
                                        this.outfitEquipped = "none";
                                    }
                                }
                            }
                            else if (Inventory[i][0].subUtility == "gloves")
                            {
                                //equpping gloves
                                if (this.areGlovesEquipped == false)
                                {
                                    Inventory[i][0].equipped = true;
                                    this.areGlovesEquipped = true;
                                    this.glovesEquipped = Inventory[i][0].type;
                                }
                                else
                                {
                                    //unequipping gloves
                                    if (Inventory[i][0].equipped == true)
                                    {
                                        Inventory[i][0].equipped = false;
                                        this.areGlovesEquipped = false;
                                        this.glovesEquipped = "none";
                                    }
                                }
                            }
                            else if (Inventory[i][0].subUtility == "necklace")
                            {
                                //equpping necklace
                                if (this.isNecklaceEquipped == false)
                                {
                                    Inventory[i][0].equipped = true;
                                    this.isNecklaceEquipped = true;
                                    this.necklaceEquipped = Inventory[i][0].type;
                                }
                                else
                                {
                                    //unequipping necklace
                                    if (Inventory[i][0].equipped == true)
                                    {
                                        Inventory[i][0].equipped = false;
                                        this.isNecklaceEquipped = false;
                                        this.necklaceEquipped = "none";
                                    }
                                }
                            }
                            //TODO add equipping for other accessories such as rings, and shoes/boots.
                        }
                        else
                        {
                            if (Inventory[i][0].ability == "lighter")
                            {

                                var useLight = false;

                                for (var f = 0; f < Inventory.length; f++)
                                {
                                    if (Inventory[f][0].type == "fireStarter")
                                    {
                                        useLight = true;
                                        break;
                                    }
                                }

                                if (useLight)
                                {
                                    //Light instruments give light effect to player when used.
                                    if (Inventory[i][0].type == "oilLantern" || Inventory[i][0].type == "oilLantern4" || Inventory[i][0].type == "oilLantern3" || Inventory[i][0].type == "oilLantern2" || Inventory[i][0].type == "oilLantern1")
                                    {
                                        if (shiftKey)
                                        {
                                            useLight = false;
                                            if (Inventory[i][0].type == "oilLantern")
                                            {
                                                scenicList.push(new Scenery("oilLantern", X, Y, Math.random() * Math.PI, false, [1800, 5]));
                                            }
                                            else if (Inventory[i][0].type == "oilLantern4")
                                            {
                                                scenicList.push(new Scenery("oilLantern", X, Y, Math.random() * Math.PI, false, [1800, 4]));
                                            }
                                            else if (Inventory[i][0].type == "oilLantern3")
                                            {
                                                scenicList.push(new Scenery("oilLantern", X, Y, Math.random() * Math.PI, false, [1800, 3]));
                                            }
                                            else if (Inventory[i][0].type == "oilLantern2")
                                            {
                                                scenicList.push(new Scenery("oilLantern", X, Y, Math.random() * Math.PI, false, [1800, 2]));
                                            }
                                            else
                                            {
                                                scenicList.push(new Scenery("oilLantern", X, Y, Math.random() * Math.PI, false, [1800, 1]));
                                            }
                                        }
                                        else
                                        {
                                            player.timeSinceLightSourceFuelUsed = new Date().getTime();
                                            player.lightSourceDuration = 1800;
                                            player.lightSource = "oilLantern";
                                        }
                                    }
                                    else if (Inventory[i][0].type == "oilLamp" || Inventory[i][0].type == "oilLamp2" || Inventory[i][0].type == "oilLamp1")
                                    {
                                        if (shiftKey)
                                        {
                                            useLight = false;
                                            if (Inventory[i][0].type == "oilLamp")
                                            {
                                                scenicList.push(new Scenery("oilLamp", X, Y, Math.random() * Math.PI, false, [1200, 3]));
                                            }
                                            else if (Inventory[i][0].type == "oilLamp2")
                                            {
                                                scenicList.push(new Scenery("oilLamp", X, Y, Math.random() * Math.PI, false, [1200, 2]));
                                            }
                                            else
                                            {
                                                scenicList.push(new Scenery("oilLamp", X, Y, Math.random() * Math.PI, false, [1200, 1]));
                                            }
                                        }
                                        else
                                        {
                                            player.timeSinceLightSourceFuelUsed = new Date().getTime();
                                            player.lightSourceDuration = 1200;
                                            player.lightSource = "oilLamp";
                                        }
                                    }
                                    else if (Inventory[i][0].type == "candle" || Inventory[i][0].type == "candle2" || Inventory[i][0].type == "candle1")
                                    {
                                        if (shiftKey)
                                        {
                                            useLight = false;
                                            if (Inventory[i][0].type == "candle")
                                            {
                                                scenicList.push(new Scenery("candle", X, Y, Math.random() * Math.PI, false, [180, 3]));
                                            }
                                            else if (Inventory[i][0].type == "candle2")
                                            {
                                                scenicList.push(new Scenery("candle", X, Y, Math.random() * Math.PI, false, [180, 2]));
                                            }
                                            else
                                            {
                                                scenicList.push(new Scenery("candle", X, Y, Math.random() * Math.PI, false, [180, 1]));
                                            }
                                        }
                                        else
                                        {
                                            player.timeSinceLightSourceFuelUsed = new Date().getTime();
                                            player.lightSourceDuration = 180;
                                            player.lightSource = "candle";
                                        }
                                    }
                                    else if (Inventory[i][0].type == "jackOLantern" || Inventory[i][0].type == "jackOLantern2" || Inventory[i][0].type == "jackOLantern1")
                                    {
                                        if (shiftKey)
                                        {
                                            useLight = false;
                                            if (Inventory[i][0].type == "jackOLantern")
                                            {
                                                scenicList.push(new Scenery("jackOLantern", X, Y, Math.random() * Math.PI, false, [540, 3]));
                                            }
                                            else if (Inventory[i][0].type == "jackOLantern2")
                                            {
                                                scenicList.push(new Scenery("jackOLantern", X, Y, Math.random() * Math.PI, false, [540, 2]));
                                            }
                                            else
                                            {
                                                scenicList.push(new Scenery("jackOLantern", X, Y, Math.random() * Math.PI, false, [540, 1]));
                                            }
                                        }
                                        else
                                        {
                                            player.timeSinceLightSourceFuelUsed = new Date().getTime();
                                            player.lightSourceDuration = 540;
                                            player.lightSource = "jackOLantern";
                                        }
                                    }

                                    //some items when used will give you an item when they are used.
                                    if (Inventory[i][0].subUtility == "reusable" && useLight)
                                    {
                                        var hits = 0;
                                        for (var rr = 0; rr < Inventory[i][0].refund.length; rr ++)
                                        {
                                            for (var r = 0; r < Inventory.length; r ++)
                                            {
                                                if (Inventory[r][0].type == Inventory[i][0].refund[rr][0])
                                                {
                                                    Inventory[r][1] += Inventory[i][0].refund[rr][1];
                                                    break;
                                                }
                                                else
                                                {
                                                    hits += 1;
                                                }
                                            }
                                            if (hits == Inventory.length)
                                            {
                                                Inventory.push([new Item(Inventory[i][0].refund[rr][0], false, false), Inventory[i][0].refund[rr][1]]);
                                            }
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                    }
                                    else
                                    {
                                        Inventory.splice(i, 1);
                                    }
                                }
                            }
                            else if (Inventory[i][0].ability == "mofuHatch")
                            {
                                var canPlace = true;
                                var hits = 0;
                                for (var j = 0; j < scenicList.length; j++)
                                {
                                    //5 is the radius of mofuEgg Scenery Object.
                                    if (scenicList[j].X - 5 <= X + scenicList[j].radius && scenicList[j].X + 5 >= X - scenicList[j].radius && scenicList[j].Y - 5 <= Y + scenicList[j].radius && scenicList[j].Y + 5 >= Y - scenicList[j].radius)
                                    {
                                        canPlace = false;
                                    }
                                }

                                if (canPlace == true)
                                {
                                    scenicList.push(new Scenery("fertilizedMofuEgg", X, Y, (Math.random() * (2 * Math.PI)), false));

                                    if (Inventory[i][1] - 1 <= 0)
                                    {
                                        Inventory.splice(i, 1);
                                    }
                                    else
                                    {
                                        Inventory[i][1] -= 1;
                                    }
                                    break;
                                }
                            }
                            else if (Inventory[i][0].subUtility == "campFire")
                            {
                                var canPlace = true;
                                var hits = 0;
                                for (var j = 0; j < scenicList.length; j++)
                                {
                                    //19 is the radius of campFire Scenery Object.
                                    if (scenicList[j].X - 19 <= X + scenicList[j].radius && scenicList[j].X + 19 >= X - scenicList[j].radius && scenicList[j].Y - 19 <= Y + scenicList[j].radius && scenicList[j].Y + 19 >= Y - scenicList[j].radius)
                                    {
                                        canPlace = false;
                                    }
                                }
                                for (var j = 0; j < Inventory.length; j++)
                                {
                                    if (Inventory[j][0].identity != "Fire-Starter")
                                    {
                                        hits += 1;
                                    }
                                }

                                if (hits == Inventory.length)
                                {
                                    canPlace = false;
                                }

                                if (canPlace == true)
                                {
                                    scenicList.push(new Scenery("campFire", X, Y, (Math.random() * (2 * Math.PI)), false));

                                    if (Inventory[i][1] - 1 <= 0)
                                    {
                                        Inventory.splice(i, 1);
                                    }
                                    else
                                    {
                                        Inventory[i][1] -= 1;
                                    }
                                    break;
                                }
                            }
                            else if (Inventory[i][0].subUtility == "tent" && this.weaponEquipped == "hammer")
                            {
                                var canPlace = true;
                                var hits = 0;
                                var inFrontY = Y + Math.sin(this.rotation + 1/2 * Math.PI) * 52;
                                var inFrontX = X + Math.cos(this.rotation + 1/2 * Math.PI) * 52;
                                for (var j = 0; j < scenicList.length; j++)
                                {
                                    //42 is the radius of tent Scenery Object.
                                    if (scenicList[j].X - 42 <= inFrontX + scenicList[j].radius && scenicList[j].X + 42 >= inFrontX - scenicList[j].radius && scenicList[j].Y - 42 <= inFrontY + scenicList[j].radius && scenicList[j].Y + 42 >= inFrontY - scenicList[j].radius)
                                    {
                                        canPlace = false;
                                    }
                                }

                                if (canPlace == true)
                                {
                                    scenicList.push(new Scenery("tent", inFrontX, inFrontY, (this.rotation), false));

                                    if (Inventory[i][1] - 1 <= 0)
                                    {
                                        Inventory.splice(i, 1);
                                    }
                                    else
                                    {
                                        Inventory[i][1] -= 1;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    else if (lowBar == "inventory" && lMouseX > listOfInvX1Coords[i] && lMouseX < listOfInvX2Coords[i] && lMouseY > invY1Coord && lMouseY < invY2Coord) //give the name of the Item and its stats when hovered over.
                    {
                        itemDescriptionBox = true;
                        //this allows intelligence based descriptions if the player's character meets the correct requirements in intelligence.
                        var regProps;
                        var intDes;

                        if (Inventory[i][0].isRegenerative == true)
                        {
                            regProps = true;
                        }
                        else
                        {
                            regProps = false;
                        }

                        if (this.intelligence >= Inventory[i][0].intForDes)
                        {
                            intDes = true;
                        }
                        else
                        {
                            intDes = false;
                        }

                        //This is the Item Information Pannel
                        XXX.beginPath();
                        XXX.lineWidth = 1;
                        XXX.fillStyle = "lightGrey";
                        XXX.strokeStyle = "black";
                        XXX.rect(152, 458, 1247, 68);
                        XXX.fill();
                        XXX.stroke();

                        //The Name of the Item
                        XXX.font="bold 16px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                        XXX.fillText(Inventory[i][0].identity, 157, 474);

                        //The description of the item and perhaps also the intelligence description...
                        XXX.font="italic 15px Book Antiqua";
                        XXX.fillStyle = "black";
                        XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                        if (intDes == true)
                        {
                            XXX.fillText( " - " + Inventory[i][0].description + "   ' " + Inventory[i][0].intDescription + " ' ", 157, 490);
                        }
                        else
                        {
                            XXX.fillText( " - " + Inventory[i][0].description, 157, 490);
                        }

                        //Based on the utility of the item, different information is displayed to the player.
                        if (Inventory[i][0].utility == "food")
                        {
                                //How much hunger, thirst, and warmth it gives.
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            if (regProps == true)
                            {
                                XXX.fillText("      Food + " + Inventory[i][0].hunger + "   Drink + " + Inventory[i][0].thirst + "    Warming + " + Inventory[i][0].warmth + "    Energy + " + Inventory[i][0].generation + "    Health + " + Inventory[i][0].heal + "    Will + " + Inventory[i][0].replenish, 157, 514);
                            }
                            else
                            {
                                XXX.fillText("      Food + " + Inventory[i][0].hunger + "   Drink + " + Inventory[i][0].thirst + "    Warming + " + Inventory[i][0].warmth, 157, 514);
                            }
                        }
                        else if (Inventory[i][0].utility == "weapon")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText("      Damage + " + Math.floor(Inventory[i][0].damage) + "   Armour Negation + " + Math.floor(Inventory[i][0].negateArmour) + "    Magic + " + Math.floor(Inventory[i][0].magicalDamage) + "    Range + " + Math.floor(Inventory[i][0].distance) + "    Reach + " + Math.floor(Inventory[i][0].range) + "    Rate + " + Math.floor(Inventory[i][0].rate) + "    Energy Cost: " + Math.floor(Inventory[i][0].energyCost), 157, 514);
                        }
                        else if (Inventory[i][0].utility == "ranged")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            if (Inventory[i][0].subUtility == "bow")
                            {
                                XXX.fillText("      Range + " + Math.floor(Inventory[i][0].range) + "   Rate + " + Math.floor(Inventory[i][0].rate) + "    Projectile Speed + " + Math.floor(Inventory[i][0].speed) + "    Armour Negation + " + Math.floor(Inventory[i][0].negateArmour), 157, 514);
                            }
                            else if (Inventory[i][0].subUtility == "crossbow")
                            {
                                XXX.fillText("      Range + " + Math.floor(Inventory[i][0].range) + "    Projectile Speed + " + Math.floor(Inventory[i][0].speed) + "    Armour Negation + " + Math.floor(Inventory[i][0].negateArmour), 157, 514);
                            }

                        }
                        else if (Inventory[i][0].utility == "ammunition")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText("      Type: " + Inventory[i][0].subUtilityName + "   Damage + " + Math.floor(Inventory[i][0].damage) + "    Magical Damage + " + Math.floor(Inventory[i][0].magicalDamage), 157, 514);
                        }
                        else if (Inventory[i][0].utility == "spell")
                        {
                            if (this.getKnowledge() >= Inventory[i][0].spellKnowledgeRequirement)
                            {
                                XXX.font="14px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                                if (Inventory[i][0].spellGroup != "Bind")
                                {
                                    if (Inventory[i][0].damages == true)
                                    {
                                        XXX.fillText("      Type: " + Inventory[i][0].spellGroup + "   Genre: " + Inventory[i][0].spellGenre + "    Damage + " + Math.floor(Inventory[i][0].spellDamage) + "    Cooldown + " + Math.floor(Inventory[i][0].spellCooldown) + "    Casting Distance: " + Inventory[i][0].spellRange + "    Knowledge Requirement: " + Math.floor(Inventory[i][0].spellKnowledgeRequirement), 157, 514);
                                    }
                                    else
                                    {
                                        XXX.fillText("      Type: " + Inventory[i][0].spellGroup + "   Genre: " + Inventory[i][0].spellGenre + "    Cooldown + " + Math.floor(Inventory[i][0].spellCooldown) + "    Knowledge Requirement: " + Math.floor(Inventory[i][0].spellKnowledgeRequirement), 157, 514);
                                    }
                                }
                                else
                                {
                                    XXX.fillText("      Type: " + Inventory[i][0].spellGroup + "   Genre: " + Inventory[i][0].spellGenre + "    Knowledge Requirement: " + Math.floor(Inventory[i][0].spellKnowledgeRequirement), 157, 514);
                                }
                            }
                            else
                            {
                                XXX.font="14px Book Antiqua";
                                XXX.fillStyle = "black";
                                XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                                XXX.fillText("      Junk", 157, 514);
                            }
                        }
                        else if (Inventory[i][0].utility == "material")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText("      Material", 157, 514);
                        }
                        else if (Inventory[i][0].utility == "currency")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText(Inventory[i][1], 237, 514);
                            XXX.fillText("      Currency", 157, 514);
                        }
                        else if (Inventory[i][0].utility == "junk")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText("      Junk", 157, 514);
                        }
                        else if (Inventory[i][0].utility == "tool")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText("      Utility", 157, 514);
                        }
                        else if (Inventory[i][0].utility == "questItem")
                        {
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            XXX.fillText("      Quest Item", 157, 514);
                        }
                        else if (Inventory[i][0].utility == "worn")
                        {
                            //How much hunger, thirst, and warmth it gives.
                            XXX.font="14px Book Antiqua";
                            XXX.fillStyle = "black";
                            XXX.textAlign="left"; //this is to reset it to the standard for the rest to come.
                            if (Inventory[i][0].subUtility == "armour")
                            {
                                XXX.fillText("      Armour + " + Math.floor(Inventory[i][0].protection) + "   Magical Resistance  + " + Inventory[i][0].magicalProtection + "    Heat Resistance + " + Inventory[i][0].thirstRetention + "    Cold Resistance + " + Inventory[i][0].warmthRetention + "    Toughness Required: " + Math.floor(Inventory[i][0].toughnessRequirement), 157, 514);
                            }
                            else if (Inventory[i][0].subUtility == "clothing" || Inventory[i][0].subUtility == "gloves" || Inventory[i][0].subUtility == "boots")
                            {
                                XXX.fillText("      Heat Resistance + " + Inventory[i][0].thirstRetention + "    Cold Resistance + " + Inventory[i][0].warmthRetention, 157, 514);
                            }
                            else if (Inventory[i][0].subUtility == "necklace")
                            {
                                XXX.fillText("      Pendant", 157, 514);
                            }
                            else if (Inventory[i][0].subUtility == "ring")
                            {
                                XXX.fillText("      Ring", 157, 514);
                            }
                        }
                    }
                }
            }
        };

        this.pickUpItem = function()
        {
            if (worldItems.length > 0 && gameState == "active" || worldItems.length > 0 && gameState == "stopTime")
            {
                if (dClick == true)
                {
                    console.log( "worldItems:" );
                    console.log( worldItems );

                     for (var i = worldItems.length - 1; i > -1; i -= 1)
                     {
                         this.distanceFromMouse = Math.sqrt((X - (X - mouseX + (1/2 * CCC.width)))  *   (X - (X - mouseX + (1/2 * CCC.width)))   +  (Y - (Y - mouseY + (1/2 * CCC.height)))  *   (Y - (Y - mouseY + (1/2 * CCC.height)))); //distanceToPlayerFromMouse
                         var itemDistanceToMouse = Math.sqrt((worldItems[i][0].X - (X - mouseX + (1/2 * CCC.width))) * (worldItems[i][0].X - (X - mouseX + (1/2 * CCC.width))) + (worldItems[i][0].Y - (Y - mouseY + (1/2 * CCC.height))) * (worldItems[i][0].Y - (Y - mouseY + (1/2 * CCC.height)))); //distanceToItemFromMouse
                         if (this.distanceFromMouse <= this.lootRadius && itemDistanceToMouse <= worldItems[i][0].size)
                         {
                             //console.log(i + " ;; " + itemDistanceToMouse + " ;; " + worldItems[i].type);
                             if (Inventory.length > 0)
                             {
                                 var hits = 0;
                                 for (var j = Inventory.length - 1; j > -1; j -= 1)
                                 {
                                     if (Inventory[j][0].type == worldItems[i][0].type)
                                     {
                                         //console.log("sameType, changing quantity!");
                                         Inventory[j][1] += worldItems[i][1];
                                         worldItems.splice(i, 1);
                                         break;
                                     }
                                     else
                                     {
                                         hits += 1; // if the type is not the same then add a hit.
                                     }
                                 }

                                 if (hits >= Inventory.length) // if hits is equal to the length of the inventory that means that none of the inventory item types are matching.
                                 {
                                     //console.log("notSameType, adding item!")
                                     Inventory.push([new Item(worldItems[i][0].type, false, false), worldItems[i][1]]);
                                     worldItems.splice(i, 1);
                                     break;
                                 }
                             }
                             else
                             {
                                 //console.log("no items in list, adding item!")

                                 Inventory.push([new Item(worldItems[i][0].type, false, false), worldItems[i][1]]);
                                 worldItems.splice(i, 1);
                             }
                         }
                     }
                }
            }
        };

        this.inventoryScrolling = function()
        {
            //When the left inventory scroll is clicked scroll one to the left if there is one to the left otherwise don't.
            if (this.inventoryPosition < Inventory.length && lMouseX > 1379.5 && lMouseX < 1399.5 && lMouseY > 0.5 && lMouseY < 80 && clickReleased == true) //this (20.5, 0.5, 79, 79) is the position the first in the list will be in if the left scroll will not work.
            {
                this.timeSinceLastScrolled = new Date().getTime();
                invScroll -= 79;
                this.inventoryPosition += 1;
            }

            //When the right inventory scroll is clicked scroll one to the right if there is one to the right otherwise don't.
            if (this.inventoryPosition > 0 && lMouseX > 0.5 && lMouseX < 20.5 && lMouseY > 0.5 && lMouseY < 80 && clickReleased == true)
            {
                this.timeSinceLastScrolled = new Date().getTime();
                invScroll += 79;
                this.inventoryPosition -= 1;
            }
        };

            //Health bar
        this.drawHealthBar = function()
        {
            //This is the background for the bar.
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.fillStyle = "lightGrey";
            XXX.rect(1, 527, 150, 22);
            XXX.fill();
            XXX.stroke();
            //This is the layer that shows how much has been lost in the current fight.
            XXX.beginPath();
            XXX.fillStyle = "red";
            XXX.rect((this.health / this.healthMAX) * 151, 527, (this.decreaseInHealth / this.healthMAX) * 150, 22);
            XXX.fill();
            //This is the layer that changes to represent the amount.
            XXX.beginPath();
            XXX.fillStyle = "lightGreen";
            XXX.rect(1, 527, (this.health / this.healthMAX) * 150, 22);
            XXX.fill();

            // When the mouse hovers over it says its type.
            if (mouseX > 1 && mouseX < 151 && mouseY > 527 && mouseY < 549)
            {
                XXX.fillStyle ="black";
                XXX.font = "16px Serif";
                XXX.fillText("Health: " + Math.floor(this.health) + "/" + Math.floor(this.healthMAX), 31, 544);
            }

        };

        //Health bar
        this.drawAntiVenomBar = function()
        {
            var avY;
            if (showAntiVenomBar)
            {
                avY = 1;
            }
            else
            {
                avY = -200;
            }

            //This is the background for the bar.
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.fillStyle = "lightGrey";
            XXX.rect(1, avY + 27, 150, 22);
            XXX.fill();
            XXX.stroke();

            //This is the layer that changes to represent the amount.
            XXX.beginPath();
            XXX.fillStyle = "Green";
            XXX.rect(1, avY + 27, (this.health / this.healthMAX) * 150, 22);
            XXX.fill();

            // When the mouse hovers over it says its type.
            if (mouseX > 1 && mouseX < 151 && mouseY > avY + 27 && mouseY < avY + 49)
            {
                XXX.fillStyle ="black";
                XXX.font = "16px Serif";
                XXX.fillText("Anti-Venom: " + Math.floor(this.antiVenom) + "/" + Math.floor(this.antiVenomMAX), 31, avY + 44);
            }
        };
            //Energy Bar
        this.drawStaminaBar = function()
        {
            XXX.beginPath();
            XXX.strokeStyle = "black";
            XXX.fillStyle = "lightGrey";
            XXX.lineWidth = 1;
            XXX.rect(1, 504, 150, 22);
            XXX.fill();
            XXX.stroke();
            //This is the layer that changes to represent the amount.
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.fillStyle = "yellow";
            XXX.rect(1, 504, (this.energy / this.energyMAX) * 150, 22);
            XXX.fill();

            // When the mouse hovers over it says its type.
            if (mouseX > 1 && mouseX < 151 && mouseY > 504 && mouseY < 526)
            {
                XXX.fillStyle ="black";
                XXX.font = "16px Serif";
                XXX.fillText("Energy: " + Math.floor(this.energy) + "/" + this.energyMAX, 31, 521);
            }

        };
            //Hunger Bar
        this.drawHungerBar = function()
        {
            //This is the background for the bar.
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.fillStyle = "lightGrey";
            XXX.rect(1, 481, 150, 22);
            XXX.fill();
            XXX.stroke();
            //This is the layer that changes to represent the amount.
            XXX.beginPath();
            XXX.fillStyle = "orangered";
            XXX.rect(1, 481, (this.hunger / this.hungerMAX) * 150, 22);
            XXX.fill();

            // When the mouse hovers over it says its type.
            if (mouseX > 1 && mouseX < 151 && mouseY > 481 && mouseY < 503)
            {
                XXX.fillStyle ="black";
                XXX.font = "16px Serif";
                XXX.fillText("Hunger: " + Math.floor(this.hunger) + "/" + this.hungerMAX, 31, 498);
            }

        };
            //Willpower Bar
        this.drawWillBar = function()
        {
            //This is the background for the bar.
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.fillStyle = "lightGrey";
            XXX.rect(1, 435, 150, 22);
            XXX.fill();
            XXX.stroke();
            //This is the layer that changes to represent the amount.
            XXX.beginPath();
            XXX.fillStyle = "mediumpurple";
            XXX.rect(1, 435, (this.will / this.willMAX) * 150, 22);
            XXX.fill();

            // When the mouse hovers over it says its type.
            if (mouseX > 1 && mouseX < 151 && mouseY > 435 && mouseY < 457)
            {
                XXX.fillStyle ="black";
                XXX.font = "16px Serif";
                XXX.fillText("Will: " + Math.floor(this.will) + "/" + Math.floor(this.willMAX), 31, 452);
            }
        };
            //Thirst Bar
        this.drawThirstBar = function()
        {
            //This is the background for the bar.
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.strokeStyle = "black";
            XXX.fillStyle = "lightGrey";
            XXX.rect(1, 458, 150, 22);
            XXX.fill();
            XXX.stroke();
            //This is the layer that changes to represent the amount.
            XXX.beginPath();
            XXX.fillStyle = "lightBlue";
            XXX.rect(1, 458, (this.thirst / this.thirstMAX) * 150, 22);
            XXX.fill();

            // When the mouse hovers over it says its type.
            if (mouseX > 1 && mouseX < 151 && mouseY > 458 && mouseY < 480)
            {
                XXX.fillStyle ="black";
                XXX.font = "16px Serif";
                XXX.fillText("Thirst: " + Math.floor(this.thirst) + "/" + Math.floor(this.thirstMAX), 31, 475);
            }
        };

        //FUNCTION FOR COMPACTING ALL USER INTERFACE FUNCTIONS
        this.UI = function()
        {

            //UI Bar
            this.buildUIBar(); //#UI Bar
            this.uiButton(); //#Inventory
            this.highlightSelectedUI(); //#UI Bar
            this.toggleUIIcon(); //#UI Bar

            //Stat Bars
            if (gameState == "active" || gameState == "stopTime" || gameState == "popUp")
            {
                XXX.textAlign = "left";
                this.drawWillBar(); //#Stat Bar
                this.drawHungerBar(); //#Stat Bar
                this.drawStaminaBar(); //#Stat Bar
                this.drawHealthBar(); //#Stat Bar
                this.drawThirstBar(); //#Stat Bar
            }
            this.drawAntiVenomBar(); //#Stat Bar //this is a developer stat bar only and it also is used to take the fall for an animation glitch that only affects the last stat bar drawn.

            //Dialogue
            this.displayDialogue(); //#Dialogue

            //Crafting
            this.displayCrafting(); //#Crafting

            //Spellbook
            this.displayMagicMenu(); //#Spellbook

            //Shop
            this.displayShop(); //#Shop

            //Bank
            this.displayBank(); //#Bank

            //Beast Journal
            this.displayBeastJournal(); //#BeastJournal

            //Quest Log
            this.displayQuestLog(); //#QuestLog

            //Skills
            this.displayCharacterInfo(); //#Skills

            //Dialogue
            //this.displayDialogueOptions(); //#Diaglogue

            //Saves
            this.displaySaves(); //#Saves

            //Inventory
            if (lowBar != "beastJournal")
            {
                this.inventoryScrolling(); //#Inventory
            }
            this.displayInventory(); //#Inventory
            this.pickUpItem(); //#Inventory
            this.interactWithInventory(); //#Inventory
        };

        //STAT RECHARGING
            //Health
        this.healthRegeneration = function()
        {
            if (this.health < this.healthMAX && this.health > 0 && this.fleshMites == false && this.hunger > 0 && this.thirst > 0)
            {
                this.health += 1 * (TTD / (45000 - 420 * this.getEndurance() * 2));
            }
            if (this.health > this.healthMAX)
            {
                this.health = this.healthMAX;
            }
            else if (this.health < 0)
            {
                this.health = 0;
            }
        };

        this.antiVenomRegeneration = function()
        {
            if (this.antiVenom < this.antiVenomMAX)
            {
                this.antiVenom += 1 * (TTD / (120000 - 820 * this.getEndurance() * 2));
            }
            if (this.antiVenom > this.antiVenomMAX)
            {
                this.antiVenom = this.antiVenomMAX;
            }
            else if (this.antiVenom < 0)
            {
                this.antiVenom = 0;
            }
        };

            //Energy
        this.energyRegeneration = function()
        {
            if (this.movingType != 2)
            {
                //ENERGY REGENERATION
                if (this.hunger > 1/10 * this.hungerMAX) //if the hunger is greater than 1/10 regeneration is allowed.
                {
                    if (this.energy < this.energyMAX)
                    {
                        this.energy += 1 * (TTD / (6000 - 57 * this.getEndurance() * 2));
                    }

                    //increased regeneration speed when not in combat and not moving and when you are not at lower than two thirds of your maximum energy.
                    if (this.movingType == 0 && this.inCombat == false && spaceKey == false && this.attacking == false) //Restore energy faster if not in combat and not moving.
                    {
                        if (this.energy >= (2/3 * this.energyMAX))
                        {
                            this.energy += 1 * (TTD / (2000 - 10 * this.getEndurance() * 2));
                        }
                    }

                    //Sets energy to max if it exceeds maximum energy.
                    if (this.energy > this.energyMAX)
                    {
                        this.energy = this.energyMAX;
                    }
                }
            }
            else if (this.movingType == 2) //Drain energy while running rather than regenerate it.
            {
                if (this.energy > 0)
                {
                    this.energy -= 1 * energil * (TTD / (1300 + 50 * this.getEndurance() * 2));
                }

                if (this.energy < 0)
                {
                    this.energy = -5;
                }
            }
        };
            //Hunger
                //this is a timer that starts whenever food is eaten, it makes it so that hunger doesn't go down for a little while directly after eating food.
        this.fedTimer = function()
        {
            if (this.fed == true)
            {
                this.fedClock = 50 + 1/2 * this.getEndurance() * 2;
                this.fed = false;
            }
            if (this.fedClock > 0)
            {
                this.satiated = true;
                this.fedClock -= 1 * (TTD / 1400);
            }
            else
            {
                //console.log(this.fedClock);
                this.satiated = false;
            }

            if (this.watered == true)
            {
                this.wateredClock = 50 + 1/2 * this.getEndurance() * 2;
                this.watered = false;
            }
            if (this.wateredClock > 0)
            {
                this.quenched = true;
                this.wateredClock -= 1 * (TTD / 1400);
            }
            else
            {
                this.quenched = false;
            }
        };
                //this is the hunger timer.
        this.hungerClock = function()
        {
            if (this.satiated == false)
            {
                this.hunger -= 1 * (TTD / (40000 + 300 * this.getEndurance() * 2));

                if (this.hunger <= 1/10 * this.hungerMAX && this.hunger > -10) // at 1/10 of hunger the player loses the use of energy... That means no attacks.
                {
                    this.energy = Math.max(-5, this.energy - 1 * (TTD / (1000 + 100 * this.getEndurance() * 2)));
                }
                if (this.hunger <= 0)
                {
                    this.hunger = 0;
                    this.health -= 1 * (TTD / (1000 + 100 * this.getEndurance() * 2));
                }
            }
        };
        //this is the hunger timer.
        this.thirstClock = function()
        {
            if (this.quenched == false)
            {
                this.thirst -= 1 * (TTD / (60000 + 200 * this.getEndurance() * 2));

                if (this.thirst <= 0)
                {
                    console.log("pass");
                    this.thirst = 0;
                    this.health -= 2 * (TTD / (1000 + 100 * this.getEndurance() * 2));
                }
            }

            if (this.thirst >= this.thirstMAX)
            {
                this.thirst = this.thirstMAX;
            }
        };
            //WILL
        this.willRegeneration = function()
        {
            if (this.will < this.willMAX)
            {
                this.will += 1 * (TTD / (10000 - 95 * this.getMemory()));
            }
            if (this.will > this.willMAX)
            {
                this.will = this.willMAX;
            }

            if (this.will < -10)
            {
                this.will = -10;
            }
        };
        //FUNCTION FOR COMPACTING ALL STAT RECHARGE FUNCTIONS
        this.statRecharge = function()
        {
            this.willRegeneration();
            this.fedTimer();
            this.hungerClock();
            this.thirstClock();
            this.energyRegeneration();
            this.antiVenomRegeneration();
            if (this.inCombat == false)
            {
                this.healthRegeneration();
            }
            else
            {
                if (this.health > this.healthMAX)
                {
                    this.health = this.healthMAX;
                }
                else if (this.health < 0)
                {
                    this.health = 0;
                }
            }
        };

        //OUT OF COMBAT SENSING
        this.engagedSenser = function()
        {
            if (this.inCombat == true)
            {
                var hits = 0;
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i ++)
                {
                    if (ArtificialIntelligenceAccess[i].playerSeen == false || ArtificialIntelligenceAccess[i].playerSeen == true && ArtificialIntelligenceAccess[i].disturbed == false && ArtificialIntelligenceAccess[i].type == "Soldier" || ArtificialIntelligenceAccess[i].playerSeen == true && ArtificialIntelligenceAccess[i].disturbed == false && ArtificialIntelligenceAccess[i].type == "Person")
                    {
                        hits += 1;
                    }
                }

                if (hits == ArtificialIntelligenceAccess.length) // || this.noticed == false
                {
                    this.inCombat = false;
                    this.decreaseInHealth = 0; // this is how much health is displayed as blood red for the player;
                }
            }
        };
        //DEATH SENSING
        this.deathSensor = function()
        {
            if (this.health <= 0 && this.playerDeath != true)
            {
                //Do death stuff
                this.playerDeath = true;
                gameState = "paused";
                //Go to main menu upon death.
                location.reload();

                /*
                //respawn
                X = spawnX;
                Y = spawnY;

                //clear effects
                this.gojiiPoisoned = false;
                this.gojiiTimer = 0;
                this.poisoned = false;
                this.poisonI = false;
                this.poisonII = false;
                this.poisonIII = false;
                this.poisonIV = false;
                this.poisonV = false;
                this.gutWorms = false;
                this.freezing = false;
                this.recoveryTime = 0;
                this.energizeTime = 0;
                this.timeSinceRawTrollBlood = 0;

                //refresh all stats to max
                this.health = this.healthMAX;
                this.energy = this.energyMAX;
                this.hunger = this.hungerMAX;
                this.will = this.willMAX;
                this.warmth = this.warmthMAX;
                this.antiVenom = this.antiVenomMAX;

                //reset functionality variables
                this.inCombat = false;
                this.decreaseInHealth = 0;

                //respawn bonus effects
                this.fed = true;

                //all items that are not equipped are lossed upon death
                for (var i = Inventory.length - 1; i > -1; i--)
                {
                    if (Inventory[i][0].equipped == false)
                    {
                        Inventory.splice(i, 1);
                    }
                }
                //all experience gained is lost
                this.experience = 0;
                this.magicalExperience = 0;

                //all units still alive get their health reset and their disturbance set back to false.
                for (var i = ArtificialIntelligenceAccess.length - 1; i > -1; i--)
                {
                    if (ArtificialIntelligenceAccess[i].health < ArtificialIntelligenceAccess[i].healthMAX || ArtificialIntelligenceAccess[i].disturbed == true)
                    {
                        ArtificialIntelligenceAccess[i].disturbedTime = 0;
                        ArtificialIntelligenceAccess[i].extraRangeTime = 0;
                        ArtificialIntelligenceAccess[i].extraRange = 0;
                        ArtificialIntelligenceAccess[i].disturbed = false;
                        ArtificialIntelligenceAccess[i].health = ArtificialIntelligenceAccess[i].healthMAX;
                    }
                }
                */
            }
        };

        //This is a test function that displays the players coords on the screen as text.
        this.tellCoordinates = function()
        {
            if (tellCoords == true)
            {
                XXX.beginPath();
                XXX.fillStyle ="gold";
                XXX.font = "30px courier";
                XXX.fillText("X: " + Math.floor(X) + " " + "Y: " + Math.floor(Y), this.myScreenX - 140, this.myScreenY + 60);
            }
        };

        //OPERATIONS [this is where everysingle function relating to the main character is activated from]
        this.operations = function(zindex)
        {
            if (zindex == this.zIndex)
            {
                //this sets the players stats and is in charge of leveling for normal skills and magical ones.
                this.skillOperations();
                this.engagedSenser(); //This should be a more accurate way for not in combat to be registered.


                if (gameState == "active" || gameState == "stopTime") //This makes it so that the players operations do not play while the game is paused.
                {
                    this.deathSensor();
                    //stat based or altering effects
                    this.effects();
                    this.motion();
                    this.pointAtMouse();
                    this.movement();
                }
            }

            if (zindex == 6)
            {
                //USER INTERFACE
                this.UI(); //The user interface has to go here because otherwise it will break some of the player drawing animations...
            }

            if (zindex == this.zIndex)
            {
                if (gameState == "active" || gameState == "stopTime" || gameState == "popUp") //This makes it so that the players operations do not play while the game is paused.
                {
                    //Draw the player

                    //the player's legs
                    this.drawLegs();

                    if (this.outfitZ == false)
                    {
                        this.drawOutfit();
                    }

                    //this is rare, but some weapons draw below the body layer.
                    if (this.weaponEquipped == "freydicSword" || this.weaponEquipped == "freydicGreatSword" || this.weaponEquipped == "longbow" || this.weaponEquipped == "crossbow" || this.weaponEquipped == "nirineseSpear" || this.weaponEquipped == "iceBlade" || this.weaponEquipped == "kellishClaymore") //add more cases for more overhead weapons.
                    {
                        this.drawArms();
                    }

                    //For specific outfits there will be parts under and above so extra stuf will draw here for outfits. CAPES AND STUFF LIKE THAT...
                    if (this.outfitEquipped == "freydicRoyalOutfit")
                    {
                        if (this.movingType == 2 && this.energy > 0 && this.freeze <= 2)
                        {
                            this.wasCapeFlapping = true; //this lets the cape know it was showing so when the player slows down or stops moving the cape will ease back.
                            this.capeFlappiness += 1; //this is a variable that determines what costume the cape will be.
                            if (this.capeFlappiness > 100)
                            {
                                this.capeFlappiness = 0;
                            }

                            if (this.capeFlappiness <= 12.5 || this.capeFlappiness > 25 && this.capeFlappiness <= 37.5 || this.capeFlappiness > 50 && this.capeFlappiness <= 62.5 || this.capeFlappiness > 75 && this.capeFlappiness <= 87.5)
                            {
                                XXX.save();
                                XXX.translate(this.myScreenX, this.myScreenY);
                                XXX.rotate(this.rotation);
                                XXX.drawImage(verse, 3959, 347, 23, 33, -(1 / 2 * 27.6) + 2.7, -(1 / 2 * 39.6) + 20.5, 27.6, 39.6);
                                XXX.restore();
                            }
                            else if (this.capeFlappiness > 12.5 && this.capeFlappiness <= 25 || this.capeFlappiness > 37.5 && this.capeFlappiness <= 50 || this.capeFlappiness > 62.5 && this.capeFlappiness <= 75 || this.capeFlappiness > 87.5)
                            {
                                XXX.save();
                                XXX.translate(this.myScreenX, this.myScreenY);
                                XXX.rotate(this.rotation);
                                XXX.drawImage(verse, 3959, 286, 23, 33, -(1 / 2 * 27.6) + 2.7, -(1 / 2 * 39.6) + 20.5, 27.6, 39.6);
                                XXX.restore();
                            }
                        }
                        else if (this.wasCapeFlapping == true)
                        {
                            this.capeFlappiness = 40;
                            this.wasCapeFlapping = "gooblebunches";
                            //display the cape while codey stuff happens...
                            XXX.save();
                            XXX.translate(this.myScreenX, this.myScreenY);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(verse, 3959, 286, 23, 33, -(1 / 2 * 27.6) + 2.7, -(1 / 2 * 39.6) + 20.5, 27.6, 39.6);
                            XXX.restore();
                        }
                        else if (this.wasCapeFlapping == "gooblebunches")
                        {
                            this.capeFlappiness -= 1; //this time cape flappiness referrs to the cape flapping down on its way out of being displayed.
                            if (this.capeFlappiness < 1)
                            {
                                this.capeFlappiness = 0;
                                this.wasCapeFlapping = false;
                            }

                            if (this.capeFlappiness > 0)
                            {
                                XXX.save();
                                XXX.translate(this.myScreenX, this.myScreenY);
                                XXX.rotate(this.rotation);
                                XXX.drawImage(verse, 3959, 286, 23, 33, -(1 / 2 * 27.6) + 2.7, -(1 / 2 * 39.6) + 20.5, 27.6, this.capeFlappiness);
                                XXX.restore();
                            }
                        }
                    }
                    else if (this.outfitEquipped == "varnFurCloak")
                    {
                        if (this.movingType == 2 && this.energy > 0 && this.freeze <= 2)
                        {
                            this.wasCapeFlapping = true; //this lets the cape know it was showing so when the player slows down or stops moving the cape will ease back.
                            this.capeFlappiness += 1; //this is a variable that determines what costume the cape will be.
                            if (this.capeFlappiness > 100)
                            {
                                this.capeFlappiness = 0;
                            }

                            if (this.capeFlappiness <= 12.5 || this.capeFlappiness > 25 && this.capeFlappiness <= 37.5 || this.capeFlappiness > 50 && this.capeFlappiness <= 62.5 || this.capeFlappiness > 75 && this.capeFlappiness <= 87.5)
                            {
                                XXX.save();
                                XXX.translate(this.myScreenX, this.myScreenY);
                                XXX.rotate(this.rotation);
                                XXX.drawImage(verse, 3962, 384, 20, 30, -(1 / 2 * 26) - 1, -(1 / 2 * 39) + 20.5, 29.5, 39);
                                XXX.restore();
                            }
                            else if (this.capeFlappiness > 12.5 && this.capeFlappiness <= 25 || this.capeFlappiness > 37.5 && this.capeFlappiness <= 50 || this.capeFlappiness > 62.5 && this.capeFlappiness <= 75 || this.capeFlappiness > 87.5)
                            {
                                XXX.save();
                                XXX.translate(this.myScreenX, this.myScreenY);
                                XXX.rotate(this.rotation);
                                XXX.drawImage(verse, 3962, 414, 20, 30, -(1 / 2 * 26) - 1, -(1 / 2 * 39) + 20.5, 29.5, 39);
                                XXX.restore();
                            }
                        }
                        else if (this.wasCapeFlapping == true)
                        {
                            this.capeFlappiness = 39;
                            this.wasCapeFlapping = "gooblebunches";
                            //display the cape while codey stuff happens...
                            XXX.save();
                            XXX.translate(this.myScreenX, this.myScreenY);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(verse, 3962, 384, 20, 30, -(1 / 2 * 26) - 1, -(1 / 2 * 39) + 20.5, 29.5, 39);
                            XXX.restore();
                        }
                        else if (this.wasCapeFlapping == "gooblebunches")
                        {
                            this.capeFlappiness -= 1; //this time cape flappiness referrs to the cape flapping down on its way out of being displayed.
                            if (this.capeFlappiness < 1)
                            {
                                this.capeFlappiness = 0;
                                this.wasCapeFlapping = false;
                            }

                            if (this.capeFlappiness > 0)
                            {
                                XXX.save();
                                XXX.translate(this.myScreenX, this.myScreenY);
                                XXX.rotate(this.rotation);
                                XXX.drawImage(verse, 3962, 384, 20, 30, -(1 / 2 * 26) - 1, -(1 / 2 * 39) + 20.5, 29.5, this.capeFlappiness);
                                XXX.restore();
                            }
                        }
                    }

                    //the player's body
                    this.drawBody();

                    //most weapons draw beneath the armour layer.
                    if (this.weaponEquipped != "nirineseSabre" && this.weaponEquipped != "longSpikedMorningStar" && this.weaponEquipped != "freydicSword" && this.weaponEquipped != "freydicGreatSword" && this.weaponEquipped != "longbow" && this.weaponEquipped != "crossbow" && this.weaponEquipped != "nirineseSpear" && this.weaponEquipped != "iceBlade" && this.weaponEquipped != "kellishClaymore") //add more cases for more overhead weapons.
                    {
                        this.drawArms();
                    }

                    //draw the armour/clothing here.
                    if (this.outfitZ == true)
                    {
                        this.drawOutfit();
                    }
                    //For specific outfits there will be parts under and above so extra stuf will draw here for outfits.
                    if (this.outfitEquipped == "freydicRoyalDress")
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3228, 215, 33, 15, -(1 / 2 * 38) + 2.7, -(1 / 2 * 42) + 12.5, 33, 15);
                        XXX.restore();
                    }
                    else if (this.outfitEquipped == "winterWolfDress")
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3226, 234, 33, 15, -(1 / 2 * 38) + 2.2, -(1 / 2 * 42) + 14.5, 33, 15);
                        XXX.restore();
                    }
                    else if (this.outfitEquipped == "varnFurDress")
                    {
                        XXX.save();
                        XXX.translate(this.myScreenX, this.myScreenY);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 8, 469, 33, 15, -(1 / 2 * 38) + 1.9, -(1 / 2 * 42) + 14.5, 33, 15);
                        XXX.restore();
                    }

                    //certain weapons draw over the armour layer
                    if (this.weaponEquipped == "nirineseSabre" || this.weaponEquipped == "longSpikedMorningStar") //add more cases for more overhead weapons.
                    {
                        this.drawArms();
                    }
                }
            }

            if (gameState == "active" || gameState == "stopTime")
            {
                if (zindex == 6)
                {
                    //effect notices, and deveoper functions, etc.
                    this.miniNotices();

                    //Stat recharging
                    this.statRecharge();
                }

                if (zindex == this.zIndex)
                {
                    //This enables the players weapons and attacking
                    this.weaponSetup();
                    this.attack();
                    this.defend();
                }

                //Quick fixes are my lazy way of solving challenging or bothersom problems!
                if (zindex == 6)
                {
                    this.quickFixes();
                }
            }
        };
    }

    //sleep function
    function sleep(safe)
    {
        if (player.insomnia == false)
        {
            var durationOfSleep = prompt("For how many hours would you like to sleep?");
            var dOS = JSON.parse(durationOfSleep);

            if (typeof dOS == "number")
            {
                if (dOS > 0 && dOS < 25)
                {
                    sleeperTime += (60 * 60 * dOS);

                    //make the screen dark
                    player.blindedTime = dOS;
                    player.blindedStoreTime = new Date().getTime();

                    //reduce drug effects
                        //alcohol
                            //hangover
                    if (player.inebriation >= 3 * (100 + (3 * player.getToughness())))
                    {
                        //todo give player a hangover.
                    }
                    player.inebriation = Math.max(0, player.inebriation - (225 * dOS));
                    //todo decrease other drug effect's time as well.

                    //Give the player rest -- if you sleep for a reasonable amount of time your get more rest
                    if (dOS >= 8)
                    {
                        dOS = dOS * 3;
                    }
                    else if (dOS >= 6)
                    {
                        dOS = dOS * 2.5;
                    }
                    else
                    {
                        dOS = dOS * 2;
                    }

                    player.sleep = Math.min(player.totalSleep, player.sleep + dOS);

                    //this is where if you are sleeping in an untraditional way you could be ambushed and will certainly be "sore" in the morning.
                    if (safe == false)
                    {
                        //todo add potential monster/enemy ambush and add soreness which will weaken constitution and dexterity and ranged and strength and endurance and stealth and all magic skills except knowledge by - 1 //booble
                    }
                }
            }
        }
    }

    //Official Magic Class
    function Magic(spellInfo, caster, instructions, unitSelf) //caster means either the player or an AI UNIT true: player false: AI UNIT //unitSelf is the object that the unit is so that this function can track its data. (this is for AI UNITS only) //instructions is for any extra input the spell might need.
    {
        if (spellInfo != "none")
        {
            //VARIABLES FOR ALL SPELLS
            this.spellType = spellInfo.ID;
            this.X = false;
            this.Y = false;
            this.rotation = 0;
            this.zIndex = 4;
            //VARIABLES for some or even single spells
            this.flashFrame = 0;
            this.flashFrameTime = new Date().getTime();
            this.contactDamageTime = new Date().getTime();
            this.spellTime = new Date().getTime();
            this.distanceCovered = 0;
            this.playerRotation = player.rotation;
            this.ticCount = 0;
            this.repeated = false;
            this.size = 0;
            this.claim = "none"; //this is used as part of the claim and chase movement method.
            this.doOnce = true; //this is not to be used for a function.
            //SPELL BUILDER (functions that can be given to each individual spell to define its characteristics)
            this.spellTimer = function(duration)
            {
                if (new Date().getTime() - this.spellTime >= duration * 1000)
                {
                    for (var i = 0; i < magicList.length; i++)
                    {
                        if (magicList[i] === this)
                        {
                            magicList.splice(i, 1);
                            break;
                        }
                    }
                }
            };

            this.orientToCaster = function (radius, rotate)
            {
                if (caster)
                {
                    this.Y = Y + Math.sin(player.rotation + rotate) * radius;
                    this.X = X + Math.cos(player.rotation + rotate) * radius;
                }
                else
                {
                    this.Y = unitSelf.Y + Math.sin(unitSelf.rotation + rotate) * radius;
                    this.X = unitSelf.X + Math.cos(unitSelf.rotation + rotate) * radius;
                }
            };

            this.flashAnimate = function(framerate, rotation, transparency, list, repeat, deleteAfter)
            {
                //use a list with coords for images: [{image:, imgX:, imgY:, portionW:, portionH:, adjX:, adjY:, width:, height:}, ... etc.]
                if (this.flashFrame >= list.length)
                {
                    this.repeated = true;
                    this.flashFrame = 0;
                }

                if (repeat != false || repeat == false && this.repeated == false)
                {
                    if (rotation != false)
                    {
                        XXX.save();
                        XXX.globalAlpha = transparency;
                        XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                        XXX.rotate(rotation);
                        XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.globalAlpha = transparency;
                        XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, X - this.X + (1 / 2 * CCC.width) + list[this.flashFrame].adjX, Y - this.Y + (1 / 2 * CCC.height) + list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                        XXX.restore();
                    }

                    if (new Date().getTime() - this.flashFrameTime >= framerate)
                    {
                        this.flashFrameTime = new Date().getTime();
                        this.flashFrame += 1;
                    }
                }
                else
                {
                    if (deleteAfter == true)
                    {
                        for (var j=0; j < magicList.length; j++)
                        {
                            if (magicList[j] === this)
                            {
                                magicList.splice(j, 1);
                                break;
                            }
                        }
                    }
                }
            };

            this.drawWithRotation = function (image, imgX, imgY, portionW, portionH, width, height, rotation, adjX, adjY)
            {
                XXX.save();
                XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                XXX.rotate(rotation);
                XXX.drawImage(image, imgX, imgY, portionW, portionH, adjX, adjY, width, height);
                XXX.restore();
            };

            this.project = function(rotation, range, speed, selfDelete)
            {
                if (this.distanceCovered < range)
                {
                    this.distanceCovered += speed * (TTD / 16.75);
                    this.X += (Math.cos(rotation) * speed) * (TTD / 16.75);
                    this.Y += (Math.sin(rotation) * speed) * (TTD / 16.75);
                }
                else if (selfDelete)
                {
                    for (var i = 0; i < magicList.length; i++)
                    {
                        if (magicList[i] === this)
                        {
                            magicList.splice(i, 1);
                            break;
                        }
                    }
                }
            };

            this.ticCounter = function(rate)
            {
                this.ticCount += rate * 0.001 * (TTD / 16.75);
                return this.ticCount;
            };

            var checkClosestClaimDist;
            var closestClaimDist = "none";
            var closestClaim = "none";
            var chasingLightsLockOn = false;

            //CLAIM AND CHASE - pick a target and follow them.
            this.claimAndChase = function(range, speed, extraRot)
            {
                if (this.claim == "none")
                {
                    var otherClaims = [];
                    for (var i = 0; i < magicList.length; i++)
                    {
                        if (magicList[i].claim != "none" && magicList[i].spellType == this.spellType)
                        {
                            otherClaims.push(magicList[i].claim);
                        }
                    }

                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                    {
                        var claimHitz = 0;
                        for (var j = 0; j < otherClaims.length; j++)
                        {
                            if (ArtificialIntelligenceAccess[i] !== otherClaims[j])
                            {
                                claimHitz += 1;
                            }
                        }
                        if (claimHitz >= otherClaims.length)
                        {
                            checkClosestClaimDist = Math.sqrt((this.X - ArtificialIntelligenceAccess[i].X)*(this.X - ArtificialIntelligenceAccess[i].X) + (this.Y - ArtificialIntelligenceAccess[i].Y)*(this.Y - ArtificialIntelligenceAccess[i].Y));
                            if (range == true || checkClosestClaimDist <= range)
                            {
                                if (closestClaimDist == "none")
                                {
                                    closestClaimDist = checkClosestClaimDist;
                                    closestClaim = ArtificialIntelligenceAccess[i];
                                }
                                else if (checkClosestClaimDist < closestClaimDist)
                                {
                                    closestClaimDist = checkClosestClaimDist;
                                    closestClaim = ArtificialIntelligenceAccess[i];
                                }
                            }
                        }
                    }

                    console.log(closestClaim);
                    if (closestClaim == "none")
                    {
                        for (var i = 0; i < magicList.length; i++)
                        {
                            if (this === magicList[i])
                            {
                                magicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                    else
                    {
                        this.claim = closestClaim;
                    }
                }


                if (this.spellType == "chasingLights")
                {
                    if (chasingLightsLockOn == false)
                    {
                        if (gameLoopNumber % 3)
                        {
                            checkClosestClaimDist = Math.sqrt((this.X - this.claim.X)*(this.X - this.claim.X) + (this.Y - this.claim.Y)*(this.Y - this.claim.Y));
                        }
                        this.rotation = Math.atan2(this.claim.Y - this.Y, this.claim.X - this.X) + extraRot;
                        this.X += Math.cos(this.rotation + extraRot) * speed;
                        this.Y += Math.sin(this.rotation + extraRot) * speed;

                        if (checkClosestClaimDist <= this.claim.sizeRadius)
                        {
                            chasingLightsLockOn = true;
                        }
                        this.size = 4;
                    }
                    else
                    {
                        this.size = this.claim.sizeRadius * 2.2;
                        this.X = this.claim.X;
                        this.Y = this.claim.Y;
                    }
                }
                else
                {
                    this.rotation = Math.atan2(this.claim.Y - this.Y, this.claim.X - this.X) + extraRot;
                    this.X += Math.cos(this.rotation + extraRot) * speed;
                    this.Y += Math.sin(this.rotation + extraRot) * speed;
                }
            };

            this.damageThenGoAway = function(radius, whatDoIDo, damage, negate, affectPlayer)
            {
                if (affectPlayer == true)
                {
                    var distanceToPlayer = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y - this.Y));

                    if (distanceToPlayer <= radius + player.mySize)
                    {
                        if (whatDoIDo == "drainOrb")
                        {
                            player.health += damage;
                        }

                        for (var j=0; j < magicList.length; j++)
                        {
                            if (magicList[j] === this)
                            {
                                magicList.splice(j, 1);
                                break;
                            }
                        }
                    }
                }
                else
                {
                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                    {
                        var distanceToEnemy = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y - this.Y));

                        if (distanceToEnemy <= radius + ArtificialIntelligenceAccess[i].sizeRadius)
                        {
                            if (whatDoIDo == "physicalDamage")
                            {
                                ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - negate));
                                ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                            }
                            else if (whatDoIDo == "iceSpike")
                            {
                                ArtificialIntelligenceAccess[i].health -= Math.max(0, 3 + (1/50 * player.getConcentration()) - Math.max(0, ArtificialIntelligenceAccess[i].armour - Math.max(0, 100 - 19 * ArtificialIntelligenceAccess[i].magicalResistance)));
                                ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                            }
                            else if (whatDoIDo == "draining")
                            {
                                ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                //todo add that it turns lifeforce successfully stolen into magical life orbs that shoot off to the player and heal him/her.
                                var counterOrbCount = 0;
                                if (ArtificialIntelligenceAccess[i].health < 0)
                                {
                                    counterOrbCount = Math.round(- ArtificialIntelligenceAccess[i].health);
                                }
                                var orbsAllowed = Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance - counterOrbCount)
                                for (var j = 0; j < orbsAllowed; j++)
                                {
                                    magicList.push(new Magic({ID: "drainOrb"}, false, 0, ArtificialIntelligenceAccess[i]));
                                }
                            }

                            for (var j=0; j < magicList.length; j++)
                            {
                                if (magicList[j] === this)
                                {
                                    magicList.splice(j, 1);
                                    break;
                                }
                            }
                        }
                    }
                }
            };

            this.contactDamage = function(dangerous, radius, damage, frequency, kind, effect)
            {
                //kind is so that certain restistances can apply in avoiding damage like heatResistance for fire!
                if (dangerous == true) //if dangerous is true it hurts all, even the caster.
                {
                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                    {
                        var distanceToEnemy = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y - this.Y));

                        if (distanceToEnemy <= radius + ArtificialIntelligenceAccess[i].sizeRadius)
                        {
                            if (new Date().getTime() - this.contactDamageTime >= frequency)
                            {
                                if (i != 0)
                                {
                                    this.contactDamageTime = new Date().getTime();
                                }
                                if (kind == "fire")
                                {
                                    ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].heatResistance);
                                    ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                                }
                                else if (kind == "frostwind")
                                {
                                    ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                    ArtificialIntelligenceAccess[i].frozenTime = new Date().getTime();
                                    ArtificialIntelligenceAccess[i].X -= ((6 * player.getConcentration()) / 50) * Math.cos(this.playerRotation - 1/2* Math.PI);
                                    ArtificialIntelligenceAccess[i].Y -= ((6 * player.getConcentration()) / 50) * Math.sin(this.playerRotation - 1/2* Math.PI);
                                }
                                else if (kind == "force")
                                {
                                    ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                    ArtificialIntelligenceAccess[i].X -= (2+ 4 * ArtificialIntelligenceAccess[i].speed) * Math.cos(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y) - 1/2 * Math.PI);
                                    ArtificialIntelligenceAccess[i].Y -= (2+ 4 * ArtificialIntelligenceAccess[i].speed) * Math.sin(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y) - 1/2 * Math.PI);
                                }
                                else if (kind == "magic")
                                {
                                    ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                }
                                else if (kind == "blinding")
                                {
                                    ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                    ArtificialIntelligenceAccess[i].blindedTime = new Date().getTime();
                                }

                                if (kind != "blinding")
                                {
                                    ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                                    ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                }
                            }
                        }

                        if (i == 0)
                        {
                            var distanceToPlayer = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y - this.Y));

                            if (distanceToPlayer <= radius + ArtificialIntelligenceAccess[i].sizeRadius)
                            {
                                if (new Date().getTime() - this.contactDamageTime >= frequency)
                                {
                                    if (kind == "fire")
                                    {
                                        player.health -= Math.max(0, damage - player.heatResistance);
                                        player.thirst -= Math.max(0, damage - player.heatResistance);
                                        player.burningTime = new Date().getTime();
                                    }
                                    else if (kind == "frostwind")
                                    {
                                        player.health -= Math.max(0, damage - player.warmthProtection);
                                        player.warmth -= Math.max(0, 5 - player.warmthProtection);
                                        //todo figure out how to add wind pushback based on ai rotation for the player and put it here.
                                    }
                                    else if (kind == "magic")
                                    {
                                        player.health -= Math.max(0, damage - player.magicalResistanceTotal);
                                    }
                                    else if (kind == "blinding")
                                    {
                                        player.health -= Math.max(0, damage - player.magicalResistanceTotal);
                                        //todo add blinding effects for the player
                                    }

                                    this.contactDamageTime = new Date().getTime();
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (caster)
                    {
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            var distanceToEnemy = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y - this.Y));

                            if (distanceToEnemy <= radius + ArtificialIntelligenceAccess[i].sizeRadius)
                            {
                                if (new Date().getTime() - this.contactDamageTime >= frequency)
                                {
                                    this.contactDamageTime = new Date().getTime();

                                    if (kind == "fire")
                                    {
                                        ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].heatResistance);
                                        ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                                    }
                                    else if (kind == "frostwind")
                                    {
                                        ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                        ArtificialIntelligenceAccess[i].frozenTime = new Date().getTime();
                                        ArtificialIntelligenceAccess[i].X -= ((6 * player.getConcentration()) / 50) * Math.cos(this.playerRotation - 1/2* Math.PI);
                                        ArtificialIntelligenceAccess[i].Y -= ((6 * player.getConcentration()) / 50) * Math.sin(this.playerRotation - 1/2* Math.PI);
                                    }
                                    else if (kind == "force")
                                    {
                                        ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                        ArtificialIntelligenceAccess[i].X -= (2+ 4 * ArtificialIntelligenceAccess[i].speed) * Math.cos(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y) - 1/2 * Math.PI);
                                        ArtificialIntelligenceAccess[i].Y -= (2+ 4 * ArtificialIntelligenceAccess[i].speed) * Math.sin(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y) - 1/2 * Math.PI);
                                    }
                                    else if (kind == "magic")
                                    {
                                        ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                    }
                                    else if (kind == "blinding")
                                    {
                                        ArtificialIntelligenceAccess[i].health -= Math.max(0, damage - ArtificialIntelligenceAccess[i].magicalResistance);
                                        ArtificialIntelligenceAccess[i].blindedTime = new Date().getTime();
                                    }

                                    if (kind != "blinding")
                                    {
                                        ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                                        ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var distanceToPlayer = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y - this.Y));

                        if (distanceToPlayer <= radius + ArtificialIntelligenceAccess[i].sizeRadius)
                        {
                            if (new Date().getTime() - this.contactDamageTime >= frequency)
                            {
                                this.contactDamageTime = new Date().getTime();

                                if (kind == "fire")
                                {
                                    player.health -= Math.max(0, damage - player.heatResistance);
                                    player.thirst -= Math.max(0, damage - player.heatResistance);
                                    player.burningTime = new Date().getTime();
                                }
                                else if (kind == "frostwind")
                                {
                                    player.health -= Math.max(0, damage - player.warmthProtection);
                                    player.warmth -= Math.max(0, 5 - player.warmthProtection);
                                    //todo figure out how to add wind pushback based on ai rotation for the player and put it here.
                                }
                                else if (kind == "magic")
                                {
                                    player.health -= Math.max(0, damage - player.magicalResistanceTotal);
                                }
                                else if (kind == "blinding")
                                {
                                    player.health -= Math.max(0, damage - player.magicalResistanceTotal);
                                    //todo add blinding effects for the player
                                }
                            }
                        }
                    }
                }
            };

            //SPELL OUTLINES (this section is the outline for what the spells are)
                //CHASING LIGHTS
            if (this.spellType == "chasingLights")
            {
                this.orientToCaster(0, 1 / 2 * Math.PI);
            }
                //FART
            if (this.spellType == "fart")
            {
                this.orientToCaster(10, - 1 / 2 * Math.PI);
            }
                //EMBERS
            if (this.spellType == "embers")
            {
                this.orientToCaster(17, 1 / 2 * Math.PI);
                this.drawWithRotation(polypol, 1688, 212, 29, 26, 29, 26, player.rotation, -1 / 2 * 29, -1 / 2 * 26);
            }
                //FIREBALL I
            if (this.spellType == "fireballI")
            {
                this.orientToCaster(23, 1 / 2 * Math.PI);
                this.drawWithRotation(polypol, 1691, 184, 24, 23, 29, 26, player.rotation, -1 / 2 * 24, -1 / 2 * 23);
            }
                //Draining I
            if (this.spellType == "drainingI")
            {
                this.orientToCaster(20, 0.64 / 2 * Math.PI);
                this.drawWithRotation(polypol, 1767, 266, 16, 25, 29, 26, player.rotation, -1 / 2 * 16, -1 / 2 * 25);
            }
                //DrainOrb
            if (this.spellType == "drainOrb")
            {
                this.orientToCaster(Math.random() * 24, (Math.random() * 2) / 2 * Math.PI);
            }
                //LifeTap
            if (this.spellType == "lifeTap")
            {
                this.orientToCaster(0, 1 / 2 * Math.PI);
            }
                //REPEL
            if (this.spellType == "repel")
            {
                this.orientToCaster(0, 1 / 2 * Math.PI);
            }
                //FROST WIND
            if (this.spellType == "frostWind")
            {
                var rdxn = Math.floor(Math.random() * 8);

                if (instructions == 1)
                {
                    this.orientToCaster(18, 1.2/3 * Math.PI);
                }
                else if (instructions == 2)
                {
                    this.orientToCaster(18 + rdxn, 2.2/3 * Math.PI);
                }
                else if (instructions == 3)
                {
                    this.orientToCaster(18 + rdxn, 2.8/4 * Math.PI);
                }
                else if (instructions == 4)
                {
                    this.orientToCaster(18 + rdxn, 1.2/4 * Math.PI);
                }
                else if (instructions == 5)
                {
                    this.orientToCaster(18 + rdxn, 1.9/4 * Math.PI);
                }
                else if (instructions == 6)
                {
                    this.orientToCaster(18 + rdxn, 2.1/4 * Math.PI);
                }
                else if (instructions == 7)
                {
                    this.orientToCaster(18 + rdxn, 1.95/4 * Math.PI);
                }
                else if (instructions == 8)
                {
                    this.orientToCaster(18 + rdxn, 2.05/4 * Math.PI);
                }
            }
                //ICE SPIKES
            if (this.spellType == "iceSpikes")
            {
                var rdxn = Math.floor(Math.random() * 8);

                if (instructions == 1)
                {
                    this.orientToCaster(19, 1 / 2 * Math.PI);
                }
                else if (instructions == 2)
                {
                    this.orientToCaster(16 + rdxn, 4 / 6 * Math.PI );
                }
                else if (instructions == 3)
                {
                    this.orientToCaster(16 + rdxn, 2 / 6 * Math.PI );
                }
                else if (instructions == 4)
                {
                    this.orientToCaster(16 + rdxn, 3 / 6 * Math.PI );
                }
                else if (instructions == 5)
                {
                    this.orientToCaster(16 + rdxn, 1.6 / 6 * Math.PI );
                }
                else if (instructions == 6)
                {
                    this.orientToCaster(16 + rdxn, 0.6 / 6 * Math.PI );
                }
                else if (instructions == 7)
                {
                    this.orientToCaster(16 + rdxn, 4 / 6 * Math.PI );
                }
            }
                //FLYING COLOURS
            if (this.spellType == "flyingColours")
            {
                this.orientToCaster(21, 1 / 2 * Math.PI);
                this.drawWithRotation(polypol, 1725, 238, 29, 26, 29, 26, player.rotation, -1 / 2 * 29, -1 / 2 * 26);
            }
            //Todo add the AI part to these.
            //OPERATIONS
            this.operations = function ()
            {
                //CHASING LIGHTS
                if (this.spellType == "chasingLights")
                {
                    this.claimAndChase(true, 4, 0);
                    if (caster)
                    {
                        lights.push({X: this.X, Y: this.Y, size: this.size, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: false});
                    }
                    else
                    {
                        //todo add chasing lights spell for AI
                    }


                    this.spellTimer(180 + 3 * player.getConcentration());

                }
                //ICE SPIKES
                if (this.spellType == "iceSpikes")
                {
                    if (caster)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.playerRotation);
                        XXX.drawImage(polypol, 1791, 209, 8, 28, - (1/2 * 8), - (1/2 * 28), 8, 28);
                        XXX.restore();

                        this.damageThenGoAway(7, "iceSpike");
                        this.project(this.playerRotation + 1/2 * Math.PI, 166 * ((50 + 3 * player.getConcentration()) / 50), 5 * ((50 + player.getConcentration()) / 50), true);

                    }
                    else
                    {
                        //todo add icespikes spell for AI
                    }

                    if (player.getConcentration() >= 50 && caster)
                    {
                        this.spellTimer(0.85);
                    }
                    else if (player.getConcentration() >= 40 && caster)
                    {
                        this.spellTimer(0.65);
                    }
                    else
                    {
                        this.spellTimer(0.45);
                    }
                }
                //FROST WIND
                if (this.spellType == "frostWind")
                {
                    if (caster)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.playerRotation);
                        XXX.globalAlpha = 0.45;
                        XXX.drawImage(polypol, 1815, 207, 28, 28, - (1/2 * 28), - (1/2 * 28), 28, 28);
                        XXX.restore();

                        this.contactDamage(false, 28, ((Math.random()) + 0.025 * player.getConcentration()) / 2, 250, "frostwind", "frostI");

                        if (instructions == 1)
                        {
                            this.project(this.playerRotation + 0.7 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                        else if (instructions == 2)
                        {
                            this.project(this.playerRotation + 1.3 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                        else if (instructions == 3)
                        {
                            this.project(this.playerRotation + 1.4 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                        else if (instructions == 4)
                        {
                            this.project(this.playerRotation + 0.6 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                        else if (instructions == 5)
                        {
                            this.project(this.playerRotation + 1.2 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                        else if (instructions == 6)
                        {
                            this.project(this.playerRotation + 0.8 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                        else if (instructions == 7)
                        {
                            this.project(this.playerRotation + 1.05 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                        else if (instructions == 8)
                        {
                            this.project(this.playerRotation + 0.95 / 2 * Math.PI, 90 * ((50 + 0.7 * player.getConcentration()) / 50), 2.2, true);
                        }
                    }
                    else
                    {
                        //todo add frostWind spell for AI
                    }
                }
                //REPEL
                if (this.spellType == "repel")
                {
                    if (caster)
                    {
                        if (this.ticCounter(250 + 11 * player.getConcentration()) + 40 <= 85 + player.getConcentration())
                        {
                            this.contactDamage(false, 10 + this.ticCounter(250 + 11 * player.getConcentration()), ((Math.random()) + 0.02 * player.getConcentration()) / 100, 5,  "force", "force");

                            XXX.save();
                            XXX.translate(1/2 * CCC.width, 1/2 * CCC.height);
                            XXX.globalAlpha = 0.55;
                            XXX.beginPath();
                            XXX.strokeStyle = "white";
                            XXX.lineWidth = 10 + 1/50 * this.ticCounter(250 + 11 * player.getConcentration());
                            XXX.arc(0, 0, 10 + this.ticCounter(250 + 11 * player.getConcentration()), 0, 2*Math.PI);
                            XXX.stroke();
                            XXX.restore();
                        }
                    }

                    this.spellTimer(0.65);
                }
                    //EMBERS
                if (this.spellType == "embers")
                {
                    if (caster)
                    {
                        if (player.getConcentration() >= 25)
                        {
                            this.contactDamage(false, 24, ((Math.random() + 3) + 0.2 * player.getConcentration()) / 2, 250, "fire", "fireI");
                            this.flashAnimate(90, false, 1, [{image: polypol, imgX: 1688, imgY: 212, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * 2, adjY: -1 / 2 * 26 * 2, width: 29 * 2, height: 26 * 2}, {image: polypol, imgX: 1720, imgY: 210, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * 2, adjY: -1 / 2 * 26 * 2, width: 29 * 2, height: 26 * 2}, {image: polypol, imgX: 1754, imgY: 211, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * 2, adjY: -1 / 2 * 26 * 2, width: 29 * 2, height: 26 * 2}]);
                            lights.push({X: this.X, Y: this.Y, size: 30, extraStops: true, GRD: 0.75, Alpha: 0.7, showMe: false});
                        }
                        else
                        {
                            this.contactDamage(false, 14, ((Math.random() + 3) + 0.2 * player.getConcentration()) / 2, 250,  "fire", "fireI");
                            this.flashAnimate(100, false, 1, [{image: polypol, imgX: 1688, imgY: 212, portionW: 29, portionH: 26, adjX: -1 / 2 * 29, adjY: -1 / 2 * 26, width: 29, height: 26}, {image: polypol, imgX: 1720, imgY: 210, portionW: 29, portionH: 26, adjX: -1 / 2 * 29, adjY: -1 / 2 * 26, width: 29, height: 26}, {image: polypol, imgX: 1754, imgY: 211, portionW: 29, portionH: 26, adjX: -1 / 2 * 29, adjY: -1 / 2 * 26, width: 29, height: 26}]);
                            lights.push({X: this.X, Y: this.Y, size: 17.5, extraStops: true, GRD: 0.75, Alpha: 0.7, showMe: false});
                        }
                    }
                    else
                    {
                        this.contactDamage(false, 20, ((Math.random() + 5)) / 2, 250,  "fire", "fireI");
                        this.flashAnimate(100, false, 1, [{image: polypol, imgX: 1688, imgY: 212, portionW: 29, portionH: 26, adjX: -1 / 2 * 29, adjY: -1 / 2 * 26, width: 29, height: 26}, {image: polypol, imgX: 1720, imgY: 210, portionW: 29, portionH: 26, adjX: -1 / 2 * 29, adjY: -1 / 2 * 26, width: 29, height: 26}, {image: polypol, imgX: 1754, imgY: 211, portionW: 29, portionH: 26, adjX: -1 / 2 * 29, adjY: -1 / 2 * 26, width: 29, height: 26}]);
                    }

                    if (player.getConcentration() >= 50 && caster)
                    {
                        this.spellTimer(0.85);
                    }
                    else if (player.getConcentration() >= 40 && caster)
                    {
                        this.spellTimer(0.65);
                    }
                    else
                    {
                        this.spellTimer(0.45);
                    }
                }

                if (this.spellType == "fireballI")
                {
                    if (caster)
                    {
                        if (player.getConcentration() >= 30)
                        {
                            this.contactDamage(false, 16, ((Math.random() * 6 + 6) + 0.3 * player.getConcentration()) / 5, 100,  "fire", "none");
                            this.flashAnimate(90, false, 1, [{image: polypol, imgX: 1691, imgY: 184, portionW: 24, portionH: 23, adjX: -1 / 2 * 24 * 1.5, adjY: -1 / 2 * 23 * 1.5, width: 24 * 1.5, height: 23 * 1.5}, {image: polypol, imgX: 1721, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * 24 * 1.5, adjY: -1 / 2 * 23 * 1.5, width: 24 * 1.5, height: 23 * 1.5}, {image: polypol, imgX: 1750, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * 24 * 1.5, adjY: -1 / 2 * 23 * 1.5, width: 24 * 1.5, height: 23 * 1.5}, {image: polypol, imgX: 1783, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * 24 * 1.5, adjY: -1 / 2 * 23 * 1.5, width: 24 * 1.5, height: 23 * 1.5}]);
                            lights.push({X: this.X, Y: this.Y, size: 16, extraStops: true, GRD: 0.86, Alpha: 0.7, showMe: false});
                        }
                        else
                        {
                            this.contactDamage(false, 11, ((Math.random() * 4 + 4) + 0.3 * player.getConcentration()) / 5, 100,  "fire", "none");
                            this.flashAnimate(100, false, 1, [{image: polypol, imgX: 1691, imgY: 184, portionW: 24, portionH: 23, adjX: -1 / 2 * 24, adjY: -1 / 2 * 23, width: 24, height: 23}, {image: polypol, imgX: 1721, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * 24, adjY: -1 / 2 * 23, width: 24, height: 23}, {image: polypol, imgX: 1750, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * 24, adjY: -1 / 2 * 23, width: 24, height: 23}, {image: polypol, imgX: 1783, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * 24, adjY: -1 / 2 * 23, width: 24, height: 23}]);
                            lights.push({X: this.X, Y: this.Y, size: 11, extraStops: true, GRD: 0.86, Alpha: 0.7, showMe: false});
                        }
                        this.project(this.playerRotation + 1/2 * Math.PI, 100 * ((50 + 3 * player.getConcentration()) / 50), 3 * ((50 + player.getConcentration()) / 50), true);
                    }
                    else
                    {
                        //Todo add the Ai part of this spell...
                    }
                }

                if (this.spellType == "drainingI")
                {
                    if (caster)
                    {
                        this.damageThenGoAway(10, "draining", 1 + (Math.floor(4/50 * player.getConcentration())));
                        this.flashAnimate(90, this.playerRotation, 1, [{image: polypol, imgX: 1767, imgY: 267, portionW: 16, portionH: 25, adjX: -1 / 2 * 16, adjY: -1 / 2 * 25, width: 16, height: 25}, {image: polypol, imgX: 1784, imgY: 267, portionW: 16, portionH: 25, adjX: -1 / 2 * 16, adjY: -1 / 2 * 25, width: 16, height: 25}, {image: polypol, imgX: 1809, imgY: 267, portionW: 16, portionH: 25, adjX: -1 / 2 * 16, adjY: -1 / 2 * 25, width: 16, height: 25}, {image: polypol, imgX: 1827, imgY: 267, portionW: 16, portionH: 25, adjX: -1 / 2 * 16, adjY: -1 / 2 * 25, width: 16, height: 25}]);
                        this.project(this.playerRotation + 1/2 * Math.PI, 110 * ((50 + 3 * player.getConcentration()) / 50), 4 * ((50 + player.getConcentration()) / 50), true);
                    }
                    else
                    {
                        //Todo add the Ai part of this spell...
                    }
                }

                if (this.spellType == "drainOrb")
                {
                    if (caster)
                    {
                        //Todo add the Ai part of this spell...
                    }
                    else
                    {
                        this.damageThenGoAway(6, "drainOrb", 1, 0, true);
                        this.flashAnimate(90, this.ticCounter(100), 0.75, [{image: polypol, imgX: 1668, imgY: 270, portionW: 20, portionH: 18, adjX: -1 / 2 * 20 * 0.4, adjY: -1 / 2 * 18 * 0.4, width: 20 * 0.4, height: 18 * 0.4}, {image: polypol, imgX: 1695, imgY: 270, portionW: 20, portionH: 18, adjX: -1 / 2 * 20 * 0.4, adjY: -1 / 2 * 18 * 0.4, width: 20 * 0.4, height: 18 * 0.4}, {image: polypol, imgX: 1723, imgY: 270, portionW: 20, portionH: 18, adjX: -1 / 2 * 20 * 0.4, adjY: -1 / 2 * 18 * 0.4, width: 20 * 0.4, height: 18 * 0.4}]);
                        this.project(Math.atan2(Y - this.Y, X - this.X), 100000, 3 + Math.random() * 2, true);
                    }
                }

                if (this.spellType == "lifeTap")
                {
                    if (caster)
                    {
                        this.X = X;
                        this.Y = Y;
                        this.flashAnimate(350, this.ticCounter(44) * -1, 0.85, [{image: polypol, imgX: 1758, imgY: 298, portionW: 65, portionH: 68, adjX: -1/2 * 65, adjY: -1/2 * 68, width: 65, height: 68}, {image: polypol, imgX: 1674, imgY: 298, portionW: 65, portionH: 68, adjX: -1/2 * 65, adjY: -1/2 * 68, width: 65, height: 68}, {image: polypol, imgX: 1582, imgY: 299, portionW: 65, portionH: 68, adjX: -1/2 * 65, adjY: -1/2 * 68, width: 65, height: 68}, {image: polypol, imgX: 1485, imgY: 300, portionW: 65, portionH: 68, adjX: -1/2 * 65, adjY: -1/2 * 68, width: 65, height: 68}, {image: polypol, imgX: 1480, imgY: 218, portionW: 65, portionH: 68, adjX: -1/2 * 65, adjY: -1/2 * 68, width: 65, height: 68}], false, true);
                    }
                    else
                    {
                        //Todo add the Ai part of this spell...
                    }
                }

                if (this.spellType == "fart")
                {
                    if (caster)
                    {
                        XXX.beginPath();
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.fillStyle = "saddleBrown";
                        XXX.arc(0, 0, 2 + this.ticCounter(135), 0, Math.PI * 2);
                        XXX.globalAlpha = 0.15;
                        XXX.fill();
                        XXX.restore();
                        this.spellTimer(1);
                    }
                    else
                    {
                        //todo add farting for AI
                    }
                }

                if (this.spellType == "flyingColours")
                {
                    if (caster)
                    {
                        if (player.getConcentration() >= 50)
                        {

                            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                            {
                                ArtificialIntelligenceAccess[j].blindedTime = new Date().getTime();
                            }

                            this.ticCounter(1400);
                            this.flashAnimate(25, false, 0.98, [{image: polypol, imgX: 1725, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1756, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1788, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1818, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}]);
                            this.spellTimer(2);
                            lights.push({X: this.X, Y: this.Y, size: 10000, extraStops: true, GRD: 0.95, Alpha: 0.8, showMe: false});
                        }
                        else if (player.getConcentration() >= 15)
                        {
                            this.ticCounter(120);
                            this.contactDamage(false, 20 + 6 * this.ticCount, 0, 100,  "blinding", "none");
                            this.flashAnimate(25, false, 0.98, [{image: polypol, imgX: 1725, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1756, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1788, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1818, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}]);
                            this.spellTimer(2);
                            lights.push({X: this.X, Y: this.Y, size: 20 + 10 * this.ticCount, extraStops: true, GRD: 0.65, Alpha: 0.8, showMe: false});
                        }
                        else
                        {
                            this.ticCounter(90);
                            this.contactDamage(false, 20 + 6 * this.ticCount, 0, 100,  "blinding", "none");
                            this.flashAnimate(25, false, 0.98, [{image: polypol, imgX: 1725, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1756, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1788, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}, {image: polypol, imgX: 1818, imgY: 238, portionW: 29, portionH: 26, adjX: -1 / 2 * 29 * this.ticCount, adjY: -1 / 2 * 26 * this.ticCount, width: 29 * this.ticCount, height: 26 * this.ticCount}]);
                            this.spellTimer(1.2);
                            lights.push({X: this.X, Y: this.Y, size: 20 + 8 * this.ticCount, extraStops: true, GRD: 0.65, Alpha: 0.8, showMe: false});
                        }
                        this.project(this.playerRotation + 1/2 * Math.PI, 10000, 2, true);
                    }
                    else
                    {
                        //todo add flying colours spell for AI
                    }
                }
            };
        }
    }

    function Projectile(type, startX, startY, startAngle, speed, range, negation, list, damage, magicDamage, ability)
    {
        this.X = startX;
        this.Y = startY;
        this.rotation = startAngle;
        this.distanceFromStart = 0;
        this.damage = 0;
        this.magicalDamage = 0;
        this.negateArmour = negation;
        this.ability = "none";
        this.statsSet = false;
        this.zIndex = 4;

        //random individual variables
        this.flameFrame = 0;
        this.flameTic = 0;
        this.canLight = false;

        //PROJECTILE AI
        //TODO this is where unique projectile AI like target following would be added.

            //SHOOT (project self)
        this.shoot = function()
        {
            if (list == playerProjectiles)
            {
                this.distanceFromStart = Math.sqrt((this.X - startX)*(this.X - startX)+(this.Y - startY)*(this.Y - startY));
                if (this.distanceFromStart < range)
                {
                    this.X += (Math.cos(this.rotation + (1/2 * Math.PI)) * speed) * (TTD / 16.75);
                    this.Y += (Math.sin(this.rotation + (1/2 * Math.PI)) * speed) * (TTD / 16.75);
                }
                else
                {
                    for (var i = list.length - 1; i > -1; i--)
                    {
                        if (list[i] == this)
                        {
                            list.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else if (list == unitProjectiles)
            {
                this.distanceFromStart = Math.sqrt((this.X - startX)*(this.X - startX)+(this.Y - startY)*(this.Y - startY));
                if (this.distanceFromStart < range)
                {
                    this.X += (Math.cos(this.rotation - (1/2 * Math.PI)) * speed) * (TTD / 16.75);
                    this.Y += (Math.sin(this.rotation - (1/2 * Math.PI)) * speed) * (TTD / 16.75);
                }
                else
                {
                    for (var i = list.length - 1; i > -1; i--)
                    {
                        if (list[i] == this)
                        {
                            list.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        };

        //This sets the projectiles damages and ability to that of the item its type referrs to.
        this.setStats = function()
        {
            if (list == playerProjectiles)
            {
                if (this.statsSet == false)
                {
                    for (var i = 0; i < allWeapons.length; i++)
                    {
                        if (type == allWeapons[i].type)
                        {
                            if (type == "oiledArrow")
                            {
                                for (var i = 0; i < Inventory.length; i++)
                                {
                                    if (Inventory[i][0].type == "fireStarter")
                                    {
                                        this.canLight = true;
                                    }
                                }
                            }
                            this.damage = allWeapons[i].damage;
                            this.magicalDamage = allWeapons[i].magicalDamage;
                            this.ability = allWeapons[i].ability;
                            this.statsSet = true;
                            break;
                        }
                    }
                }
            }
            else if (list == unitProjectiles)
            {
                if (this.statsSet == false)
                {
                    this.damage = damage;
                    this.magicalDamage = magicDamage;
                    this.ability = ability;
                    this.statsSet = true;
                }
            }
            //TODO make sure once abilities are added that this can also take those into account.
        };

        //Deal damage to enemy and then disappear.
        this.impact = function()
        {
            if (list == playerProjectiles)
            {
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    var distanceFromUnit = Math.sqrt((this.X - ArtificialIntelligenceAccess[i].X)*(this.X - ArtificialIntelligenceAccess[i].X)+(this.Y - ArtificialIntelligenceAccess[i].Y)*(this.Y - ArtificialIntelligenceAccess[i].Y));

                    if (distanceFromUnit < ArtificialIntelligenceAccess[i].sizeRadius)
                    {
                        ArtificialIntelligenceAccess[i].health -= Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) + Math.max(0, this.magicalDamage - ArtificialIntelligenceAccess[i].magicalResistance);
                        ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                        ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();

                        //Effects
                        if (this.ability == "stunI")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunI = true;
                            }
                        }
                        else if (this.ability == "stunII")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunII = true;
                            }
                        }
                        else if (this.ability == "stunIII")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunIII = true;
                            }
                        }
                        else if (this.ability == "stunIV")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunIV = true;
                            }
                        }
                        else if (this.ability == "stunV")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].stunTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].stunTimer = 5;
                                ArtificialIntelligenceAccess[i].stunV = true;
                            }
                        }
                        else if (this.ability == "freeze")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].frozenTime = new Date().getTime();
                            }
                        }
                        else if (this.ability == "burning")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                            }
                        }
                        else if (this.ability == "longBurning")
                        {
                            ArtificialIntelligenceAccess[i].burningTime = new Date().getTime() + 5000;
                        }
                        else if (this.ability == "leach")
                        {
                            if (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[i].armour - this.negateArmour)) > 0)
                            {
                                ArtificialIntelligenceAccess[i].health -= Math.max(0, 12 - ArtificialIntelligenceAccess[i].magicalResistance);

                                var counterOrbCount = 0;
                                if (ArtificialIntelligenceAccess[i].health < 0)
                                {
                                    counterOrbCount = Math.round(- ArtificialIntelligenceAccess[i].health);
                                }
                                var orbsAllowed = Math.max(0, 12 - ArtificialIntelligenceAccess[i].magicalResistance - counterOrbCount);
                                for (var j = 0; j < orbsAllowed; j++)
                                {
                                    magicList.push(new Magic({ID: "drainOrb"}, false, 0, ArtificialIntelligenceAccess[i]));
                                }
                            }
                        }

                        //Self Delete Projectile
                        for (var j = list.length - 1; j > -1; j--)
                        {
                            if (list[j] == this)
                            {
                                list.splice(j, 1);
                                break;
                            }
                        }
                    }
                }
            }
            else if (list == unitProjectiles)
            {
                //Unit arrows can harm the player!
                var distanceFromPlayer = Math.sqrt((this.X - X)*(this.X - X)+(this.Y - Y)*(this.Y - Y));
                if (distanceFromPlayer <= player.mySize + 1)
                {
                    player.health -= Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) + Math.max(0, this.magicalDamage - player.magicalResistance);

                    if (this.ability == "stunI")
                    {
                        if (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                        {
                            player.stunnedI = true;
                            player.stunnedTime = 5;
                        }
                    }
                    else if (this.ability == "burning")
                    {
                        if (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                        {
                            player.burningTime = new Date().getTime();
                        }
                    }
                    else if (this.ability == "freeze")
                    {
                        if (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                        {
                            player.frozenTime = new Date().getTime();
                        }
                    }
                    else if (this.ability == "longBurning")
                    {
                        player.burningTime = new Date().getTime() + 5000;
                    }

                    for (var j = list.length - 1; j > -1; j--)
                    {
                        if (list[j] == this)
                        {
                            list.splice(j, 1);
                            break;
                        }
                    }
                }
            }
        };

        //This function determines what the projectile will do and how it will draw when it is called based on its type.
        this.projectileBuilder = function()
        {
            if (type == "arrow")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    XXX.drawImage(polyPNG, 432, 554, 20, 8, 0, 0, 30, 12);
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    XXX.drawImage(polyPNG, 432, 554, 20, 8, 0, 0, 30, 12);
                    XXX.restore();
                }
            }
            else if (type == "freezingArrow")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 66, 73, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 66, 73, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
            }
            else if (type == "fireArrow")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 66, 80, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 66, 80, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
            }
            else if (type == "lifeLeachArrow")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 65, 88, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //todo add the complicated life drain spell equivelent for the AI in the Leach ability section.
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 65, 88, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
            }
            else if (type == "oiledArrow")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    if (this.canLight)
                    {
                        this.ability = "burning";
                        this.flameTic += 1;
                        if (this.flameTic % 307)
                        {
                            this.flameFrame += 1;

                            if (this.flameFrame > 2)
                            {
                                this.flameFrame = 0;
                            }
                        }
                    }
                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    if (this.canLight)
                    {
                        if (this.flameFrame == 0)
                        {
                            XXX.drawImage(mofu, 66, 49, 23, 8, 0, 0, 34.5, 12);
                        }
                        else if (this.flameFrame == 1)
                        {
                            XXX.drawImage(mofu, 66, 41, 23, 8, 0, 0, 34.5, 12);
                        }
                        else if (this.flameFrame == 2)
                        {
                            XXX.drawImage(mofu, 66, 32, 23, 8, 0, 0, 34.5, 12);
                        }
                    }
                    else
                    {
                        XXX.drawImage(mofu, 67, 57, 19, 7, 0, 0, 28.5, 10.5);
                    }
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.ability = "burning";
                    this.flameTic += 1;
                    if (this.flameTic % 307)
                    {
                        this.flameFrame += 1;

                        if (this.flameFrame > 2)
                        {
                            this.flameFrame = 0;
                        }
                    }
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    if (this.flameFrame == 0)
                    {
                        XXX.drawImage(mofu, 66, 49, 23, 8, 0, 0, 34.5, 12);
                    }
                    else if (this.flameFrame == 1)
                    {
                        XXX.drawImage(mofu, 66, 41, 23, 8, 0, 0, 34.5, 12);
                    }
                    else if (this.flameFrame == 2)
                    {
                        XXX.drawImage(mofu, 66, 32, 23, 8, 0, 0, 34.5, 12);
                    }
                    XXX.restore();
                }
            }
            else if (type == "shehidToxinArrow")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 66, 21, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    XXX.drawImage(mofu, 66, 21, 22, 9, 0, 0, 33, 13.5);
                    XXX.restore();
                }
            }
            else if (type == "steelBolt")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    XXX.drawImage(verse, 3173, 1, 25, 9, 0, 0, 30, 10.8);
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    XXX.drawImage(verse, 3173, 1, 25, 9, 6, -6, 30, 10.8);
                    XXX.restore();
                }
            }
            else if (type == "cheatMachineGunBullet")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.damage = 19;
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 3854, 492, 3, 19, 0, -40, 4.5, 28.5);
                    XXX.restore();
                }
                //no unit list for this cheat item.
            }
            else if (type == "aldrekiiArrow")
            {
                if (list == playerProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation - (1 / 2 * Math.PI));
                    XXX.drawImage(verse, 2832, 3, 41, 12, 0, 0, 32, 12);
                    XXX.restore();
                }
                else if (list == unitProjectiles)
                {
                    //WHAT IT WILL DO...
                    player.projYAd = 0;
                    player.projXAd = 0;
                    this.setStats();
                    this.shoot();
                    this.impact();

                    //HOW IT WILL DRAW...
                    XXX.save();
                    XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                    XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                    XXX.drawImage(verse, 2832, 3, 41, 12, 0, 0, 32, 12);
                    XXX.restore();
                }
            }

            //projectiles are accompanied by a gross psycodelic halucination if on a drug trip
            if (player.cyrinthilimTrip)
            {
                XXX.save();
                XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                XXX.rotate(this.rotation + (1 / 2 * Math.PI));
                XXX.drawImage(polyPNG, 876, 707, 70, 42, 0, 0, 70 / 2, 42 / 2);
                XXX.restore();
            }
        };

        this.operations = function()
        {
            this.projectileBuilder();
        };
    }

    // This is the template for building a map out of tiles.
    function outlineBuilder(width, length, terrain, extraX, extraY)
    {
        for(var i = 0; i < width; i++)
        {
            for(var j = 0; j < length; j++)
            {
                if (player.cyrinthilimTrip)
                {
                    XXX.save();
                    XXX.globalAlpha = 0.4;
                    XXX.scale(Math.random() * 6 + 1,Math.random() * 6 + 1)
                    XXX.drawImage(blurDots, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                    XXX.restore();
                }
                else if (terrain == "outline")
                {
                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.strokeStyle = "black";
                    XXX.rect((j-1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                    XXX.fill();
                    XXX.stroke();
                }
                else if (terrain == "kellstone")
                {
                    XXX.drawImage(kellStone, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "kelltile")
                {
                    XXX.drawImage(kellsStone, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "farmland")
                {
                    XXX.drawImage(farmground, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "greenGrass")
                {
                    XXX.drawImage(lushGrassEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "hotGrass")
                {
                    XXX.drawImage(greenGrassEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "jungle")
                {
                    XXX.drawImage(forestEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "crag")
                {
                    XXX.drawImage(rockyFlatEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "desert")
                {
                    XXX.drawImage(sandyEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "frost")
                {
                    XXX.drawImage(snowyEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "stoneWork")
                {
                    XXX.drawImage(stoneWorkEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "molten")
                {
                    XXX.drawImage(volcanicEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "dryGrass")
                {
                    XXX.drawImage(dryGrassEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "snow")
                {
                    XXX.drawImage(snowEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "stonePath")
                {
                    XXX.drawImage(stonePathEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "arctic")
                {
                    XXX.drawImage(frozenEnv, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
                else if (terrain == "forest")
                {
                    XXX.drawImage(nordWoods, (j - 1) * 300 + (extraX * 300) + X, (i - 1) * 300 + (extraY * 300) + Y, 300, 300);
                }
            }

        }
    }

    //This class supports ALL of the games AI. Each individual will henceforth be called a Unit.
    function Unit(unitX, unitY, type, isalpha, ID, ultra) //ultra is an object that allows for numerous unique arguments to be accessed.
    {
        //TODO add a respawn function, and a respawn rate stat, and possibly respawn coords based roughly on their set coords.
        //Priority Variables
        this.stackDominance = Math.random();
        this.ID = ID; //This is gives this unit an identity so that they can be identified if a problem comes up.
        this.X = unitX; // this is the units X position in the world
        this.Y = unitY; // this is the units Y position in the world
        this.type = type; //This determines what kind of unit it is.
        this.zIndex = 2;

        //variables concerning code functionality
        this.ultra = ultra;
        //Important Game Variables
        this.health = 0;
        this.armour = 0;
        this.damage = 0;
        this.negateArmour = 0;
        this.magicalDamage = 0;
        this.heatResistance = 0;
        this.magicalResistance = 0;
        this.speed = 0;
        this.rangeOfSight = 120;
        this.alpha = false;
        this.effect = "none"; //This is a special effect that happens on attacks against the player.
        this.drops = []; //This is the list of items that this unit will drop upon death.
        this.experience = 1; //This is the amount of experience that the player will earn from slaying this creature. It becomes either regular or magical experience depending on what means the player used to get the killing blow.
        this.resistances = [];
        //Operational game variables
        this.rotation = 0; //this is the unit's current rotation.
        this.newRotation = 0; //this is the target rotation, or the rotation that the unit would like to be at.
        this.costume = 0; //This is costume as in scratch's type of costume, like a frame... It is used for movement and attack animation frames.
        this.rotationSpeed = 0.1; // this is the speed at which the unit rotates.
        //functionality game variables
        this.engagementRadius = 15; //this is the distance before a target that the unit will stop at to leave itself appropriate room to attack or whatever interaction it will do.
        this.sizeRadius = 20; // this is the radius that represents the total size of the unit.
        this.alive = true;
        this.alpha = isalpha;
        this.alphaSize = 1;
        this.beastEntry = "none";
        //AI and sensing variables
        this.closestDistance; //this is the distance away from this unit that the closest other unit is.
        this.closestUnit; // this is the exact unit that is the closest at the moment.
        this.playerSeen = false; //This shows whether or not this unit currently sees the player.
        this.extraRange = 0; //This is range that is added to rangeOfSight so that a unit can see the player if a packmember does.
        this.extraRangeTime = 0;
        this.disturbed = false; //When activated the creature will have twice as much sight!
        this.disturbedTime = 0; //this is the timer that regulates how long a creature is in the disturbed state.
        //animation variables
        this.resetFrameOrder = true; //This switches the costumeEngine back to positive direction framerate
        this.attacking = false; //This flag is active while this unit is attacking so that the game knows when this unit is attacking.
        this.moving = false; //This flag is active while this unit is moving so that the game knows when this unit is moving.
        this.timeStoppedMoving = new Date().getTime(); //This variable is used to measure how long a unit has not been moving so that the unit can switch back to a stationary costume after an appropriate amount of time.
        //lesser animation variables
        this.healthShownTime = 0;
        this.hostile = true;
        //attacking variables (excluding the attacking flag)
        this.damageFrame = "automatic"; //When this is set to automatic it makes the last attack frame deal the damage to the target. If it is anything else the final attack frame needs to be triggered from within the front end of the animation.
        this.finalAttackCostume = false; //When this flag is triggered the Unit deals its damage to the player.
        this.damageDealt = false; //for manual Unit damage dealing (meaning damage dealt on a frame picked inside of the Units animation rather than automatically the final frame)
        this.attackStyle = "chunked";
        this.attackRate = 10;
        this.attackWait = 0.1;
        this.justAttacked = false; //just to be safe this.justAttacked should be true. This is the flag that shows whether or not a unit has just attacked.
        this.timeBetweenAttacks = new Date().getTime(); //this is a variable that regulates the wait timer for attacking.
        this.grudge = 0; //this is how long the unit will hold a grudge against the player for attacking them. 20 seconds is what it starts at so a grudge 0 seconds long would be - 20.
        this.combatMode = 0; //Some Units can switch between different styles of attacks or enter a beserker mode etc.
        //other extra variables for combat stuff
        this.keepSpeed = 0;
        //other animations variables
        this.flashFrame = 0;
        this.flashFrameTime = new Date().getTime();
        //movement specific variables
        this.fleeing = false;
        this.flying = false;
        //game pause related variables
        this.timeResistance = false;
        //death variables
        this.timeSinceDead = 0;
        this.wasAlive = true;
        this.revived = false;
        //Humanoid related Variables (for humanlike units only)
        this.lLegY = 0;
        this.rLegY = 0;
        this.legSwitch = 0;
        this.doOnDeathOnce = true; //this is for unique characters, upon their death they trigger a flag letting the game know never to respawn them.
        //Other variables
        this.mofuTargetFood = "none";
        this.mofuFood = 0;
        this.eggTimer = 0;
        //effects variables
        this.blindedTime = 0;
        this.blinded = false;
        this.burningTime = 0;
        this.burningTime2 = new Date().getTime();
        this.frozenTime = 0;
        this.stunTime = 0;
        this.stunTimer = 0;
        this.stunI = false;
        this.stunII = false;
        this.stunIII = false;
        this.stunIV = false;
        this.stunV = false;
        this.stunned = 1;
        //Artificial Intelligence

        //This makes sure that each existing Unit has a different dominance ranking and so when they get stuck on eachother the one with lower dominance will move out of the way.
        this.stackSorter = function()
        {
            this.stackDominance = Math.random();
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (this.stackDominance == ArtificialIntelligenceAccess[i].stackDominance)
                {
                    this.stackSorter();
                    break;
                }
            }
        };
        var initOrientation = Math.round(Math.random());
        if (initOrientation)
        {
            this.intendedDirection == "left";
        }
        else
        {
            this.intendedDirection == "right";
        }

        this.stackSorter();

        this.selfPosition = function(target, nextX, nextY)
        {
            var obstructorDist = Math.sqrt((target.X - nextX) * (target.X - nextX) + (target.Y - nextY) * (target.Y - nextY));
            if (obstructorDist <= this.sizeRadius + target.sizeRadius && this.attacking == false)
            {
                return true;
            }
        };

        this.unStack = function()
        {
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (gameLoopNumber % 5 == 0 && ArtificialIntelligenceAccess[i] !== this) //todo whilst this is set to == 0 it will not truly ever work but it think i prefer it not working.
                {
                    if (unitSurround)
                    {
                        //If another thing is in the way move until it is not in the way.
                        /*if (this.selfPosition(ArtificialIntelligenceAccess[i], this.X - Math.cos(this.rotation) * (TTD / 16.75) * this.speed, this.Y - Math.sin(this.rotation) * (TTD / 16.75) * this.speed))
                        {
                           if (this.selfPosition(ArtificialIntelligenceAccess[i], this.X + (this.speed) * Math.cos(Math.atan(X - this.X, Y - this.Y)), this.Y + (this.speed) * Math.sin(Math.atan(X - this.X, Y - this.Y))))
                           {
                               this.X += (this.speed) * Math.cos(Math.atan(X - this.X, Y - this.Y));
                               this.Y += (this.speed) * Math.sin(Math.atan(X - this.X, Y - this.Y));
                           }
                        }*/

                        /*if (this.stackDominance < ArtificialIntelligenceAccess[i].stackDominance)
                        {
                            //move if overlapping
                            var dFUTU = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X) * (ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y) * (ArtificialIntelligenceAccess[i].Y - this.Y));
                            if (dFUTU <= this.sizeRadius + ArtificialIntelligenceAccess[i].sizeRadius)
                            {
                                this.X += (this.speed) * Math.cos(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y));
                                this.Y += (this.speed) * Math.sin(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y));
                            }
                        }*/

                        var upcomingX = this.X - Math.cos(this.rotation) * (TTD / 16.75) * this.speed;
                        var upcomingY = this.Y - Math.sin(this.rotation) * (TTD / 16.75) * this.speed;

                        var obstructorDist = Math.sqrt((ArtificialIntelligenceAccess[i].X - upcomingX) * (ArtificialIntelligenceAccess[i].X - upcomingX) + (ArtificialIntelligenceAccess[i].Y - upcomingY) * (ArtificialIntelligenceAccess[i].Y - upcomingY));
                        if (obstructorDist <= this.sizeRadius + ArtificialIntelligenceAccess[i].sizeRadius && this.attacking == false)
                        {
                            if (ArtificialIntelligenceAccess[i].stackDominance > this.stackDominance || ArtificialIntelligenceAccess[i].attacking == true)
                            {
                                //console.log(Math.atan(X - this.X, Y - this.Y));
                                this.X += (this.speed) * Math.cos(Math.atan(X - this.X, Y - this.Y));
                                this.Y += (this.speed) * Math.sin(Math.atan(X - this.X, Y - this.Y));

                                //todo creature overlap with eachother... which is gross.
                                //todo all the creatures get stuck at a certain degree point, I need to figure out how to work around that here.
                            }
                        }
                    }
                    else
                    {
                        if (this.stackDominance < ArtificialIntelligenceAccess[i].stackDominance)
                        {
                            //move if overlapping
                            var dFUTU = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X) * (ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y) * (ArtificialIntelligenceAccess[i].Y - this.Y));
                            if (dFUTU <= this.sizeRadius + ArtificialIntelligenceAccess[i].sizeRadius)
                            {
                                this.X += (this.speed) * Math.cos(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y));
                                this.Y += (this.speed) * Math.sin(Math.atan(X - ArtificialIntelligenceAccess[i].X, Y - ArtificialIntelligenceAccess[i].Y));
                            }
                        }
                    }
                }
            }
        };

            //this function determines the distance to the player [Distance To Player]
        this.DTP = function()
        {
            return Math.sqrt((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y));
        };

        this.DTM = function()
        {
            return Math.sqrt((this.X - (X - mouseX + (1/2 * CCC.width)))*(this.X - (X - mouseX + (1/2 * CCC.width))) + (this.Y - (Y - mouseY + (1/2 * CCC.height)))*(this.Y - (Y - mouseY + (1/2 * CCC.height))));
        };

        this.interaction = function()
        {
            var self = this;
            //SC == store conversation
            self.SC = function()
            {
                for (var key in conversations)
                {
                    if (conversations[key][0] == conversationID[0])
                    {
                        conversations[key][1] = conversationID[1];
                    }
                }
            };
            //RC == restore conversation
            self.RC = function()
            {
                for (var key in conversations)
                {
                    if (conversations[key][0] == conversationID[0])
                    {
                        conversationID[1] = conversations[key][1];
                    }
                }
            };

            if (this.alive == true)
            {
                //Interaction with...
                var dtp = this.DTP();
                if (dtp < 200 )
                {
                    var dtm = this.DTM();

                    if (this.type == "Person" || this.type == "Soldier")
                    {
                        //CONVERSATION AND SOCIAL INTERACTIONS WITH AI CHARACTERS
                        if (clickReleased == true && dtm < this.sizeRadius && dtp < 100 && this.disturbed == false || conversationID[0] != "none" && dtp < 100 && this.disturbed == false || playersTurnToSpeak == false)
                        {
                            this.engagedInDialogue = true;

                            if (this.ID == "Drohfor" || conversationID[0] == "Drohfor")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Drohfor";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        if (quests.huntingWagerQuest == "complete")
                                        {
                                            player.dialogueOptions = [["Good Day!", false, "a"], ["What's that you're wearing?", false, "c"]];
                                        }
                                        else if (player.getCharisma() >= 1)
                                        {
                                            player.dialogueOptions = [["Good Day!", false, "a"], ["What are you doing?", false, "b"], ["What's that you're wearing?", false, "c"]];
                                        }
                                        else
                                        {
                                            player.dialogueOptions = [["Good Day!", false, "a"], ["What are you doing?", false, "b"], ["What's that you're wearing?", false, "c"]];
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "0a";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "0b";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    conversationID[1] = "0c";
                                                    playersTurnToSpeak = false;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    drohforGreet.play();
                                    drohforGreet.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    if (player.getCharisma() < 1 && player.title != "Nobility" && player.title != "Royalty")
                                    {
                                        drohforWastingTime.play();
                                        drohforWastingTime.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else if (player.title == "Royalty" || player.title == "Nobility")
                                    {
                                        if (player.gender == "Female")
                                        {
                                            drohforTrackingMLady.play();
                                            drohforTrackingMLady.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 1;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            drohforTrackingMLord.play();
                                            drohforTrackingMLord.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 1;
                                                self.SC();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        drohforTrackingCHA.play();
                                        drohforTrackingCHA.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 1;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0c")
                                {
                                    drohforOutfit.play();
                                    drohforOutfit.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        if (player.title == "Royalty" || player.title == "Nobility")
                                        {
                                            player.dialogueOptions = [["Carry on.", false, "a"], ["Your tracking looks an awful lot like wandering to me.", false, "c"]];
                                        }
                                        else if (player.getCharisma() >= 1)
                                        {
                                            player.dialogueOptions = [["Just curious that's all.", false, "a"], ["Don't let me keep you then.", false, "b"], ["Your tracking looks an awful lot like wandering to me.", false, "c"]];
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = true;
                                                    player.dialoguePosition = 0;
                                                    conversationID[1] = 0;
                                                    self.SC();
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = true;
                                                    player.dialoguePosition = 0;
                                                    conversationID[1] = 0;
                                                    self.SC();
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    conversationID[1] = "1c";
                                                    playersTurnToSpeak = false;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1c")
                                {
                                    if (player.title == "Royalty" || player.title == "Nobility")
                                    {
                                        if (player.gender == "Female" && player.getCharisma > 1 && player.raceName != "Thengar" || player.gender == "Female" && player.getCharisma > 1 && player.raceName != "Freynor" || player.gender == "Female" && player.getCharisma > 1 && player.raceName != "Kellish")
                                        {
                                            drohforLadyWins.play();
                                            drohforLadyWins.onended = function ()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            if (player.gender == "Male")
                                            {
                                                drohforHighbornLad.play();
                                                drohforHighbornLad.onended = function ()
                                                {
                                                    playersTurnToSpeak = true;
                                                    player.dialoguePosition = 0;
                                                    quests.activeQuests.push({name: "Hunting Wager", description: "After insulting Drohfor he suggested that you would no better at hunting the pack of peculiar friches he was after."});
                                                    conversationID[1] = 2;
                                                    quests.huntingWagerFrichPack = true;
                                                    change = "none";
                                                    self.SC();
                                                }
                                            }
                                            else
                                            {
                                                drohforHighbornLasse.play();
                                                drohforHighbornLasse.onended = function ()
                                                {
                                                    playersTurnToSpeak = true;
                                                    player.dialoguePosition = 0;
                                                    quests.activeQuests.push({name: "Hunting Wager", description: "After insulting Drohfor he suggested that you would no better at hunting the pack of peculiar friches he was after."});
                                                    conversationID[1] = 2;
                                                    quests.huntingWagerFrichPack = true;
                                                    change = "none";
                                                    self.SC();
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (player.gender == "Female")
                                        {
                                            drohforSoEasy.play();
                                            drohforSoEasy.onended = function ()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                quests.activeQuests.push({name: "Hunting Wager", description: "After insulting Drohfor he bet you 15 coins that you would do no better at hunting the peculiar pack of friches he was after."});
                                                conversationID[1] = 2;
                                                quests.huntingWagerFrichPack = true;
                                                change = "none";
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            drohforTailBetweenLegs.play();
                                            drohforTailBetweenLegs.onended = function ()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                quests.activeQuests.push({name: "Hunting Wager", description: "After insulting Drohfor he bet you 15 coins that you would do no better at hunting the peculiar pack of friches he was after."});
                                                conversationID[1] = 2;
                                                quests.huntingWagerFrichPack = true;
                                                change = "none";
                                                self.SC();
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == 2)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        if (player.title == "Royalty" || player.title == "Nobility")
                                        {
                                            player.dialogueOptions = [["The task is complete.", false, "a"]];
                                        }
                                        else if (player.getCharisma() >= 1)
                                        {
                                            player.dialogueOptions = [["Done.", false, "a"]];
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "2a";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2a")
                                {
                                    console.log(quests.huntingWagerKillCount);
                                    if (quests.huntingWagerKillCount >= 3 && quests.huntingWagerQuest == false)
                                    {
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 3;
                                        playersTurnToSpeak = false;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 3)
                                {
                                    if (quests.huntingWagerKillCount >= 3 && quests.huntingWagerQuest == false)
                                    {
                                        quests.huntingWagerQuest = "complete";
                                        quests.completeQuests.push({name: "Hunting Wager", description: "You successfully tracked down and slayed the pack of giant friches that Drohfor had been after."});
                                        quests.huntingWagerFrichPack = false;
                                        player.experience += 110;
                                        player.fame += 1;
                                        worldItems.push([new Item("coins", X, Y), 15]);

                                        if (player.title == "Royalty" || player.title == "Nobility")
                                        {
                                            if (player.gender = "Male")
                                            {
                                                drohforLordVictory.play();
                                            }
                                            else
                                            {
                                                drohforLadyVictory.play();
                                            }
                                        }
                                        else
                                        {
                                            drohforCommonerVictory.play();
                                        }
                                    }
                                    else
                                    {
                                        playersTurnToSpeak = true;
                                    }

                                    if (quests.huntingWagerQuest == "complete")
                                    {
                                        if (player.dialogueChoiceMade == false)
                                        {
                                            if (player.title == "Royalty" || player.title == "Nobility")
                                            {
                                                player.dialogueOptions = [["I'll be on my way.", false, "a"]];
                                            }
                                            else if (player.getCharisma() >= 1)
                                            {
                                                player.dialogueOptions = [["I'll be on my way.", false, "a"], ["As I said before, wandering!", false, "b"]];
                                            }
                                        }
                                        else if (player.dialogueChoiceMade == true)
                                        {
                                            player.dialogueChoiceMade = false;
                                            for (var i = 0; i < player.dialogueOptions.length; i++)
                                            {
                                                if (player.dialogueOptions[i][1] == true)
                                                {
                                                    if (player.dialogueOptions[i][2] == "a")
                                                    {
                                                        conversationID[1] = "3a";
                                                    }
                                                    else if (player.dialogueOptions[i][2] == "b")
                                                    {
                                                        conversationID[1] = "3b";
                                                        playersTurnToSpeak = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "3a")
                                {
                                    playersTurnToSpeak = true;
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();

                                }
                                else if (conversationID[1] == "3b")
                                {
                                    if (player.gender == "Female")
                                    {
                                        drohforNoMore.play();
                                        drohforNoMore.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        drohforShutUp.play();
                                        drohforShutUp.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                            }

                            if (this.ID == "Toggin" || conversationID[0] == "Toggin")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Toggin";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        if (quests.teshirNorthRoadQuest == "complete")
                                        {
                                            player.dialogueOptions = [["Good Day to you ser.", false, "a"], ["What is your trade?", false, "b"]];
                                        }
                                        else if (player.getCharisma() >= 2)
                                        {
                                            player.dialogueOptions = [["Good Day to you ser.", false, "a"], ["What is your trade?", false, "b"], ["Is something bothering you? You seem worried.", false, "d"]];
                                        }
                                        else
                                        {
                                            player.dialogueOptions = [["Good Day to you ser.", false, "a"], ["What is your trade?", false, "b"], ["Is something bothering you? You look worried.", false, "c"]];
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "0a";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "0b";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    conversationID[1] = "0c";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    conversationID[1] = "0d";
                                                    playersTurnToSpeak = false;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    togginGreet.play();
                                    togginGreet.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    togginLiving.play();
                                    togginLiving.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0c")
                                {
                                    //This is the polite declination of sharing the quest
                                    if (player.title == "Royalty" && player.raceName == "Freynor" || player.title == "Royalty" && player.freynorFaction > -50 || player.title == "Nobility" && player.freynorFaction > -50)
                                    {
                                        if (player.gender == "Female")
                                        {
                                            togginFDecline.play();
                                            togginFDecline.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            togginMDecline.play();
                                            togginMDecline.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        togginScat.play();
                                        togginScat.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0d")
                                {
                                    //this introduces the quest
                                    togginAdmit.play();
                                    console.log(conversationID[0] != "none" && dtp < 100 && this.disturbed == false);
                                    togginAdmit.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 1;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["I accept.", false, "a"], ["Maybe another time.", false, "b"], ["That sounds dangerous, I don't think I'm up for it.", false, "c"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "1a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "1b";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    conversationID[1] = "1c";
                                                    playersTurnToSpeak = false;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1a")
                                {
                                    if (quests.teshirNorthRoadQuest != "complete")
                                    {
                                        player.dialoguePosition = 0;
                                        quests.activeQuests.push({name: "Teshir North Road", description: "Bandits block the road to the north, get rid of them so that Toggin can get back home."})
                                        quests.teshirNorthRoadQuest = true;
                                        conversationID[1] = 2;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1b")
                                {
                                    togginTooLong.play();
                                    togginTooLong.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 1;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1c")
                                {
                                    togginChangeMind.play();
                                    togginChangeMind.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 1;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 2)
                                {
                                    player.dialogueOptions = [];
                                    if (quests.teshirNorthRoadKillCount >= 4 && quests.teshirNorthRoadQuest != "complete" && uniqueChars.hetmerLDS == false)
                                    {
                                        togginBanditPayment.play();
                                        quests.teshirNorthRoadQuest = "complete";
                                        quests.teshirNorthRoadBandits = false;
                                        player.experience += 350;
                                        player.freynorFaction += 10;
                                        player.fame += 1;
                                        worldItems.push([new Item("coins", X, Y), 20]);
                                        quests.completeQuests.push({name: "Teshir North Road", description: "You have slain the bandits blocking the way to the north along with their fearsome bandit chieftan, Hetmer."})
                                    }
                                    togginBanditPayment.onended = function()
                                    {
                                        change = "none";
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                            }

                            if (this.ID == "Maggy the Tailor" || conversationID[0] == "Maggy")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Maggy";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Good Day.", false, "a"], ["What is that you're working on?", false, "b"], ["What's new Maggy?", false, "c"], ["How's business?", false, "d"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0d";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    maggyJustLovely.play();
                                    maggyJustLovely.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    maggyJustCleaning.play();
                                    maggyJustCleaning.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0c")
                                {
                                    maggyMostlyCleaning.play();
                                    maggyMostlyCleaning.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0d")
                                {
                                    maggyLifeStory.play();
                                    maggyLifeStory.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                            }

                            if (this.ID == "Medlia the Merchant" || conversationID[0] == "Medlia")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Medlia";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Nice day isn't it?", false, "a"], ["How's business?", false, "b"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "0a";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "0b";
                                                    playersTurnToSpeak = false;
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    if (player.getCharisma() < 2)
                                    {
                                        medliaMaybeIf.play();
                                        medliaMaybeIf.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        medliaGuessItIs.play();
                                        medliaGuessItIs.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }

                                }
                                else if (conversationID[1] == "0b")
                                {
                                    if (player.title == "Royalty" && player.freynorFaction > -50 || player.title == "Nobility" && player.freynorFaction > -50)
                                    {
                                        if (player.gender == "Male")
                                        {
                                            medliaMyMyMeLord.play();
                                            medliaMyMyMeLord.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            medliaMyMyMeLady.play();
                                            medliaMyMyMeLady.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                    }
                                    else if (player.getCharisma() > 2 && quests.medliaCompetitionControlQuest != "complete" && quests.bankruptNeculai != true)
                                    {
                                        medliaCantPretend.play();
                                        medliaCantPretend.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 1;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        medliaFine.play();
                                        medliaFine.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["What's the problem?", false, "a"], ["I didn't mean to pry.", false, "b"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "1a";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "1b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1a")
                                {
                                    if (player.raceName == "Freynor")
                                    {
                                        medliaOurProblem.play();
                                        medliaOurProblem.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 2;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        medliaTheProblem.play();
                                        medliaTheProblem.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 2;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1b")
                                {
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == 2)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Is there something I can do?", false, "a"], ["I'm done with this subject for now.", false, "b"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "2a";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "2b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2a")
                                {
                                    medliaTen.play();
                                    medliaTen.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        quests.medliaCompetitionControlReward = 10;
                                        conversationID[1] = 3;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "2b")
                                {
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == 3)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        if (player.getCharisma() > 5)
                                        {
                                            player.dialogueOptions = [["I think that doing away with your competition is worth a bit more. don't you?", false, "a"], ["It's a deal.", false, "b"], ["No deal.", false, "c"]];
                                        }
                                        else
                                        {
                                            player.dialogueOptions = [["It's a deal.", false, "b"], ["No deal.", false, "c"]];
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "3a";
                                                    playersTurnToSpeak = false;
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "3b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    conversationID[1] = "3c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "3a")
                                {
                                    medliaEighteen.play();
                                    medliaEighteen.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        quests.medliaCompetitionControlReward = 18;
                                        quests.medliaCompetitionControlQuest = true;
                                        quests.activeQuests.push({name: "Medlia's Competition Control", description: "Medlia feels that she is losing business to a Vardanian merchant that moved to town, she wants you to make him leave."});
                                        conversationID[1] = 4;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "3b")
                                {
                                    player.dialoguePosition = 0;
                                    quests.medliaCompetitionControlQuest = true;
                                    quests.activeQuests.push({name: "Medlia's Competition Control", description: "Medlia feels that she is losing business to a Vardanian merchant that moved to town, she wants you to make him leave."});
                                    conversationID[1] = 4;
                                    self.SC();
                                }
                                else if (conversationID[1] == "3c")
                                {
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == 4 && quests.medliaCompetitionControlQuest != "complete")
                                {
                                    player.dialogueOptions = [];
                                    if (quests.medliaCompetitionControlCompletionStyle == "friendly" || quests.medliaCompetitionControlCompletionStyle == "intimidate")
                                    {
                                        playersTurnToSpeak = false;
                                        medliaItWorked.play();
                                        conversationID[1] = 0;
                                        medliaItWorked.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.medliaCompetitionControlQuest = "complete";
                                            if (quests.medliaCompetitionControlCompletionStyle == "friendly")
                                            {
                                                quests.completeQuests.push({name: "Medlia's Competition Control", description: "You persuaded Neculai to leave town by kindly suggesting that he trade in a larger town with more opportunity and customers."});
                                                player.vardanFaction += 1;
                                            }
                                            else
                                            {
                                                quests.completeQuests.push({name: "Medlia's Competition Control", description: "You persuaded Neculai to leave town by threatening him."});
                                            }
                                            player.freynorFaction += 1;
                                            worldItems.push([new Item("coins", X, Y), quests.medliaCompetitionControlReward]);
                                            player.experience += 65;
                                            quests.medliaNewWealth += 55;
                                            quests.bobithNewWealth += 17;
                                            change = "none";
                                            self.SC();
                                        }
                                    }
                                    else if (uniqueChars.neculaiLDS == false)
                                    {
                                        playersTurnToSpeak = false;
                                        medliaThatFar.play();
                                        conversationID[1] = 0;
                                        medliaThatFar.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.medliaCompetitionControlCompletionStyle = "murder";
                                            quests.medliaCompetitionControlQuest = "complete";
                                            player.freynorFaction += 1;
                                            quests.completeQuests.push({name: "Medlia's Competition Control", description: "Rather than making Neculai leave town you decided to murder him."});
                                            worldItems.push([new Item("coins", X, Y), quests.medliaCompetitionControlReward]);
                                            player.experience += 65;
                                            quests.medliaNewWealth += 55;
                                            quests.bobithNewWealth += 17;
                                            change = "none";
                                            self.SC();
                                        }
                                    }
                                    else if (quests.medliaCompetitionControlCompletionStyle == "violence")
                                    {
                                        playersTurnToSpeak = false;
                                        medliaHurtHim.play();
                                        conversationID[1] = 0;
                                        medliaHurtHim.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.medliaCompetitionControlQuest = "complete";
                                            player.freynorFaction += 1;
                                            quests.completeQuests.push({name: "Medlia's Competition Control", description: "You attacked Neculai leaving him no choice but to flee town."});
                                            worldItems.push([new Item("coins", X, Y), quests.medliaCompetitionControlReward]);
                                            player.experience += 65;
                                            quests.medliaNewWealth += 55;
                                            quests.bobithNewWealth += 17;
                                            change = "none";
                                            self.SC();
                                        }
                                    }
                                }
                            }

                            if (this.ID == "Neculai the Merchant" || conversationID[0] == "Neculai")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Neculai";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        if (player.raceName == "Vardan" && quests.theBalgurMercenariesQuest != "complete" || player.raceName == "Vardan" && quests.medliaCompetitionControlCompletionStyle == "friendly" && quests.medliaCompetitionControlQuest == "complete")
                                        {
                                            player.dialogueOptions = [["What brings you so far from the homeland?", false, "a"], ["Good day.", false, "b"], ["How's business?", false, "c"]];
                                            if (quests.neculaiShopDeal == false)
                                            {
                                                player.dialogueOptions.push(["Do you have any special deals for a fellow homelander?", false, "d"]);
                                            }
                                            if (quests.medliaCompetitionControlQuest == true && quests.medliaCompetitionControlCompletionStyle == false)
                                            {
                                                player.dialogueOptions.push(["We need to talk...", false, "e"]);
                                            }
                                        }
                                        else if (player.raceName == "Vardan")
                                        {
                                            player.dialogueOptions = [["What brings you so far from the homeland?", false, "a"], ["Good day.", false, "b"]];
                                            if (quests.neculaiShopDeal == false)
                                            {
                                                player.dialogueOptions.push(["Do you have any special deals for a fellow homelander?", false, "d"]);
                                            }
                                            if (quests.medliaCompetitionControlQuest == true && quests.medliaCompetitionControlCompletionStyle == false)
                                            {
                                                player.dialogueOptions.push(["We need to talk...", false, "e"]);
                                            }
                                        }
                                        else if (quests.theBalgurMercenariesQuest != "complete" || quests.medliaCompetitionControlCompletionStyle == "friendly" && quests.medliaCompetitionControlQuest == "complete")
                                        {
                                            player.dialogueOptions = [["Good day.", false, "b"], ["How's business?", false, "c"]];
                                            if (quests.medliaCompetitionControlQuest == true && quests.medliaCompetitionControlCompletionStyle == false)
                                            {
                                                player.dialogueOptions.push(["We need to talk...", false, "e"]);
                                            }
                                        }
                                        else
                                        {
                                            player.dialogueOptions = [["Good day.", false, "b"]];
                                            if (quests.medliaCompetitionControlQuest == true && quests.medliaCompetitionControlCompletionStyle == false)
                                            {
                                                player.dialogueOptions.push(["We need to talk...", false, "e"]);
                                            }
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0d";
                                                }
                                                else if (player.dialogueOptions[i][2] == "e")
                                                {
                                                    conversationID[1] = "0e";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    neculaiBountyHere.play();
                                    neculaiBountyHere.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    neculaiEveryDay.play();
                                    neculaiEveryDay.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0c")
                                {
                                    if (quests.medliaCompetitionControlCompletionStyle == "friendly" && quests.medliaCompetitionControlQuest == "complete")
                                    {
                                        neculaiMuchBetter.play();
                                        neculaiMuchBetter.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        neculaiBiggerProblem.play();
                                        neculaiBiggerProblem.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 2;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0d")
                                {
                                    if (player.getCharisma() > 5)
                                    {
                                        neculaiSpecialDeals.play();
                                        neculaiSpecialDeals.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            quests.neculaiShopDeal = true;
                                            worldItems.push([new Item("frichPelt", X, Y), 6]);
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        neculaiStirUp.play();
                                        neculaiStirUp.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }

                                }
                                else if (conversationID[1] == "0e")
                                {
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 1;
                                    self.SC();
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        if (player.getCharisma() >= 10)
                                        {
                                            player.dialogueOptions = [["[convince Neculai that he would make more money trading in a larger town]", false, "a"], ["You're not wanted here, pack up your shop and leave, before I make you leave.", false, "b"]];
                                        }
                                        else
                                        {
                                            player.dialogueOptions = [["You're not wanted here, pack up your shop and leave, before I make you leave.", false, "b"]];
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1a")
                                {
                                    neculaiLots.play();
                                    neculaiLots.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        quests.medliaCompetitionControlCompletionStyle = "friendly";
                                        player.experience += 15;
                                        player.vardanFaction += 1;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1b")
                                {
                                    if (player.getCharisma() > 4 && player.getStrength() > 9)
                                    {
                                        neculaiZes.play();
                                        neculaiZes.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            quests.medliaCompetitionControlCompletionStyle = "intimidate";
                                            player.experience += 15;
                                            player.vardanFaction -= 1;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        neculaiDontThinkSo.play();
                                        neculaiDontThinkSo.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.vardanFaction -= 1;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == 2)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Is there anything that I can do?", false, "a"], ["Good luck with that... I don't care.", false, "b"], ["Can we talk about something else?", false, "c"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2a")
                                {
                                    neculaiThenganMercs.play();
                                    neculaiThenganMercs.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 3;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "2b")
                                {
                                    playersTurnToSpeak = true;
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == "2c")
                                {
                                    playersTurnToSpeak = true;
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == 3)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["It's a deal.", false, "a"], ["I will do it for 40.", false, "b"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    conversationID[1] = "3a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "3b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "3a")
                                {
                                    player.dialoguePosition = 0;
                                    quests.theBalgurMercenariesReward = 30;
                                    quests.theBalgurMercenariesQuest = true;
                                    quests.activeQuests.push({name: "The Balgur Mercenaries", description: "Neculai hired you to get rid of a crew of mercenaries that have been harrassing him."});
                                    change = "none";
                                    conversationID[1] = 4;
                                    self.SC();
                                }
                                else if (conversationID[1] == "3b")
                                {
                                    if (player.getCharisma() > 10)
                                    {
                                        neculaiFine.play();
                                        neculaiFine.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.theBalgurMercenariesReward = 40;
                                            quests.theBalgurMercenariesQuest = true;
                                            quests.activeQuests.push({name: "The Balgur Mercenaries", description: "Neculai hired you to get rid of a crew of mercenaries that have been harrassing him."});
                                            change = "none";
                                            conversationID[1] = 4;
                                            self.SC();
                                        }
                                    }
                                    else if (player.getCharisma() > 7)
                                    {
                                        neculaiRid.play();
                                        neculaiRid.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.theBalgurMercenariesReward = 35;
                                            quests.theBalgurMercenariesQuest = true;
                                            quests.activeQuests.push({name: "The Balgur Mercenaries", description: "Neculai hired you to get rid of a crew of mercenaries that have been harrassing him."});
                                            change = "none";
                                            conversationID[1] = 4;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        neculaiZertyOne.play();
                                        neculaiZertyOne.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.theBalgurMercenariesReward = 31;
                                            quests.theBalgurMercenariesQuest = true;
                                            quests.activeQuests.push({name: "The Balgur Mercenaries", description: "Neculai hired you to get rid of a crew of mercenaries that have been harrassing him."});
                                            change = "none";
                                            conversationID[1] = 4;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == 4)
                                {
                                    player.dialogueOptions = [];
                                    if (quests.theBalgurMercenariesMercsKilled >= 8 && uniqueChars.kronheimeLDS == false || quests.theBalgurMercenariesCompletionStyle == "paidMercs" || quests.theBalgurMercenariesCompletionStyle == "threaten" || quests.theBalgurMercenariesCompletionStyle == "royalProtection")
                                    {
                                        playersTurnToSpeak = false;
                                        neculaiZerGone.play();
                                        conversationID[1] = 0;
                                        neculaiZerGone.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            if (quests.theBalgurMercenariesMercsKilled >= 8 && uniqueChars.kronheimeLDS == false)
                                            {
                                                quests.theBalgurMercenariesCompletionStyle = "killedMercs";
                                                quests.completeQuests.push({name: "The Balgur Mercenaries", description: "You slayed the entire band of mercenaries that had been harrassing Neculai."});
                                                player.fame += 2;
                                            }
                                            else
                                            {
                                                if (quests.theBalgurMercenariesCompletionStyle == "paidMercs")
                                                {
                                                    quests.completeQuests.push({name: "The Balgur Mercenaries", description: "The band of mercenaries left after you paid them the money that Neculai owed."});
                                                }
                                                else if (quests.theBalgurMercenariesCompletionStyle == "threaten")
                                                {
                                                    quests.completeQuests.push({name: "The Balgur Mercenaries", description: "You threatened to kill the mercenaries, who saw that they were no match for you and left without any trouble."});
                                                }
                                                else
                                                {
                                                    quests.completeQuests.push({name: "The Balgur Mercenaries", description: "Declaring your royal freydic patronage you decreed Neculai was under your kingdom's protection."});
                                                }
                                                player.fame += 1;
                                            }
                                            quests.theBalgurMercenariesQuest = "complete";
                                            worldItems.push([new Item("coins", X, Y), quests.theBalgurMercenariesReward]);
                                            player.experience += 350;
                                            self.SC();
                                        }
                                    }
                                }
                            }

                            if (this.ID == "Mercenary Captain Kronheime" || conversationID[0] == "Kronheim")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Kronheime";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [];
                                        if (player.theBalgurMercenariesRank == "none")
                                        {
                                            player.dialogueOptions.push(["Who are the balgur mercenaries exactly?", false, "a"]);
                                        }
                                        if (player.theBalgurMercenariesFaction > - 50 && player.theBalgurMercenariesRank == "none")
                                        {
                                            player.dialogueOptions.push(["What would I have to do to join this mercenary group?", false, "b"]);
                                        }
                                        if (quests.theBalgurMercenariesQuest == true)
                                        {
                                            player.dialogueOptions.push(["About Neculai...", false, "c"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    kronheimeHaventHeard.play();
                                    kronheimeHaventHeard.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    if (player.getStrength() < 20 && player.fame < 65)
                                    {
                                        kronheimeLastADay.play();
                                        kronheimeLastADay.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        kronheimeTalkTo.play();
                                        kronheimeTalkTo.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 1;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0c")
                                {
                                    if (player.fame < 65 && player.getStrength() < 40 && player.getConstitution() < 35 && player.getStamina() < 35 && player.magicLevel < 99)
                                    {
                                        kronheimeTalkQuick.play();
                                        kronheimeTalkQuick.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 2;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        kronheimeYourWith.play();
                                        kronheimeYourWith.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 2;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Where is the commander?", false, "a"], ["Enough of this topic for now.", false, "b"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "1b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1a")
                                {
                                    kronheimeWheresTheBoss.play();
                                    kronheimeWheresTheBoss.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1b")
                                {
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == 2)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Leave or face my wrath!", false, "a"], ["How much does he owe you?", false, "b"]];
                                        if (player.raceName == "Freynor" && player.title == "Royalty")
                                        {
                                            player.dialogueOptions.unshift(["As the heir to the crown of Freynor I hereby command you to take your group and leave, Neculai is under this kingdom's protection.", false, "c"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2a")
                                {
                                    if (player.fame >= 65 || player.getStrength() >= 40 && player.getConstitution() >= 35 && player.getStamina() >= 35 || player.magicLevel > 99)
                                    {
                                        kronheimeLeaving.play();
                                        kronheimeLeaving.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.theBalgurMercenariesCompletionStyle = "threaten";
                                            player.theBalgurMercenariesFaction -= 15;
                                            player.blindedTime = 2;
                                            player.blindedStoreTime = new Date().getTime();
                                            ArtificialIntelligenceAccess = [];
                                            player.dialogueOptions = [];
                                            change = "none";
                                            conversationID[1] = 0;
                                            lowBar = "information";
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        if (player.gender == "Male")
                                        {
                                            kronheimeKillHim.play();
                                            kronheimeKillHim.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                                this.disturbed = true;
                                            }
                                        }
                                        else if (player.gender == "Female")
                                        {
                                            kronheimeKillHer.play();
                                            kronheimeKillHer.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                                this.disturbed = true;
                                            }
                                        }
                                        else
                                        {
                                            kronheimeKillIt.play();
                                            kronheimeKillIt.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                                this.disturbed = true;
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2b")
                                {
                                    kronheimeNoLess.play();
                                    kronheimeNoLess.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 3;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "2c")
                                {
                                    kronheimeThisSlight.play();
                                    kronheimeThisSlight.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        quests.theBalgurMercenariesCompletionStyle = "royalProtection";
                                        player.theBalgurMercenariesFaction -= 3;
                                        player.blindedTime = 2;
                                        player.blindedStoreTime = new Date().getTime();
                                        ArtificialIntelligenceAccess = [];
                                        player.dialogueOptions = [];
                                        change = "none";
                                        conversationID[1] = 0;
                                        lowBar = "information";
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 3)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Why have haven't you collected your money from him then?", false, "a"], ["I will pay Neculai's debt.", false, "b"], ["[go back to last set of options]", false, "c"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "3a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "3b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    conversationID[1] = "3c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "3a")
                                {
                                    kronheimeThatVardanian.play();
                                    kronheimeThatVardanian.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 4;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "3b")
                                {
                                    var hasEnoughToPay = -1;
                                    for (var i = 0; i < Inventory.length; i++)
                                    {
                                        if (Inventory[i][0].type == "coins" && Inventory[i][1] >= 200)
                                        {
                                            hasEnoughToPay = i;
                                        }
                                    }

                                    if (hasEnoughToPay == -1)
                                    {
                                        kronheimeDontHaveEnough.play();
                                        kronheimeDontHaveEnough.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 3;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        if (Inventory[hasEnoughToPay][1] > 200)
                                        {
                                            Inventory[hasEnoughToPay][1] -= 200;
                                        }
                                        else
                                        {
                                            Inventory.splice(hasEnoughToPay, 1);
                                        }

                                        kronheimeSimple.play();
                                        conversationID[1] = 0;
                                        kronheimeSimple.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            quests.theBalgurMercenariesCompletionStyle = "paidMercs";
                                            player.theBalgurMercenariesFaction += 5;
                                            player.blindedTime = 2;
                                            player.blindedStoreTime = new Date().getTime();
                                            ArtificialIntelligenceAccess = [];
                                            player.dialogueOptions = [];
                                            change = "none";
                                            lowBar = "information";
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "3c")
                                {
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 2;
                                    self.SC();
                                }
                                else if (conversationID[1] == 4)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["I could try to convince him to pay.", false, "a"], ["[go back to last set of options]", false, "b"]];
                                        if (player.raceName == "Freynor" && player.title == "Royalty")
                                        {
                                            if (uniqueChars.neculaiLDS == true)
                                            {
                                                player.dialogueOptions.unshift(["As heir to the crown of Freynor, I will have him executed and brought to you along with his possessions.", false, "d"]);
                                                player.dialogueOptions.unshift(["As heir to the crown of Freynor I grant you permission to take what you are owed, but leave him alive and unharmed.", false, "c"]);
                                            }
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "4a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    conversationID[1] = "4b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "4c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "4d";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "4a")
                                {
                                    kronheimeEarAsProof.play();
                                    kronheimeEarAsProof.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 5;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "4b")
                                {
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 3;
                                    self.SC();
                                }
                                else if (conversationID[1] == "4c")
                                {
                                    kronheimeDidntRealize.play();
                                    kronheimeDidntRealize.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        quests.theBalgurMercenariesCompletionStyle = "bankruptedNeculai";
                                        player.theBalgurMercenariesFaction += 10;
                                        player.blindedTime = 2;
                                        player.blindedStoreTime = new Date().getTime();
                                        quests.bankruptNeculai = true;
                                        quests.theBalgurMercenariesQuest = "complete";
                                        quests.completeQuests.push({name: "The Balgur Mercenaries", description: "As the heir to The Kingdom of Freynor you allowed the mercenaries to take what they were owed from Neculai so long as they left him unharmed."});
                                        player.experience += 350;
                                        player.fame += 1;
                                        ArtificialIntelligenceAccess = [];
                                        player.dialogueOptions = [];
                                        change = "none";
                                        conversationID[1] = 0;
                                        lowBar = "information";
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "4d")
                                {
                                    kronheimeDidntRealize.play();
                                    kronheimeDidntRealize.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        quests.theBalgurMercenariesCompletionStyle = "executedNeculai";
                                        player.theBalgurMercenariesFaction += 15;
                                        player.blindedTime = 2;
                                        player.blindedStoreTime = new Date().getTime();
                                        uniqueChars.neculaiLDS = false;
                                        quests.theBalgurMercenariesQuest = "complete";
                                        quests.completeQuests.push({name: "The Balgur Mercenaries", description: "With the power vested in you as the heir to The Kingdom of Freynor you ordered Neculai to be Executed and brought to the mercenaries along with all of his possessions."});
                                        player.experience += 350;
                                        player.fame += 1;
                                        ArtificialIntelligenceAccess = [];
                                        player.dialogueOptions = [];
                                        change = "none";
                                        conversationID[1] = 0;
                                        lowBar = "information";
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 5)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["I'll do it.", false, "a"], ["What will I get in exchange for this? ", false, "b"], ["I'm not killing anyone for you.", false, "c"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "5a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "5b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "5c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "5a")
                                {
                                    kronheimeGood.play();
                                    kronheimeGood.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 7;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "5b")
                                {
                                    kronheimeNecklace.play();
                                    kronheimeNecklace.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 6;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "5c")
                                {
                                    kronheimeGetAway.play();
                                    kronheimeGetAway.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 4;
                                        player.theBalgurMercenariesFaction -= 3;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 6)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["I'll do it.", false, "a"], ["I'll have to think about this. ", false, "b"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "6a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "6b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "6a")
                                {
                                    kronheimeGood.play();
                                    kronheimeGood.onended = function()
                                    {
                                        quests.theBalgurMercenariesNecklace = true;
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 7;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "6b")
                                {
                                    playersTurnToSpeak = true;
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 4;
                                    self.SC();
                                }
                                else if (conversationID[1] == 7)
                                {
                                    player.dialogueOptions = [];

                                    var hasPlayerDoneTheStuff = false;
                                    if (uniqueChars.neculaiLDS == false && quests.theBalgurMercenariesQuest == true)
                                    {
                                        for (var i = 0; i < Inventory.length; i++)
                                        {
                                            if (Inventory[i][0].type == "neculaisEar")
                                            {
                                                hasPlayerDoneTheStuff = true;
                                                Inventory.splice(i, 1);
                                                break;
                                            }
                                        }

                                        if (hasPlayerDoneTheStuff)
                                        {
                                            kronheimeAnotherEar.play();
                                            conversationID[1] = 0;
                                            kronheimeAnotherEar.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                quests.theBalgurMercenariesCompletionStyle = "murderedNeculai";
                                                player.theBalgurMercenariesFaction += 15;
                                                player.blindedTime = 2;
                                                player.blindedStoreTime = new Date().getTime();
                                                quests.theBalgurMercenariesQuest = "complete";
                                                quests.completeQuests.push({name: "The Balgur Mercenaries", description: "You turned the tables on Neculai, instead of getting rid of the mercenaries, you took up the mercenaries' offer to kill Neculai."});
                                                player.experience += 350;
                                                player.fame += 1;
                                                ArtificialIntelligenceAccess = [];
                                                change = "none";
                                                if (quests.theBalgurMercenariesNecklace == true)
                                                {
                                                    Inventory.unshift([new Item("BerulnToothNecklace", X, Y), 1]);
                                                }
                                                player.dialoguePosition = 0;
                                                lowBar = "information";
                                                self.SC();
                                            }
                                        }
                                    }
                                }
                            }

                            if (this.ID == "Torg Commissioner Stendor" || conversationID[0] == "Stendor")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Stendor";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Good Day.", false, "a"], ["Is there anything I can do to improve my relations with the kingdom of Freynor.", false, "b"], ["Can I see the active bounties for this town?", false, "c"], ["Goodbye.", false, "d"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0d";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    stendorGoodDay.play();
                                    stendorGoodDay.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    if (player.title == "Royalty" && player.raceName == "Freynor" || player.title == "Nobility" && player.raceName == "Freynor")
                                    {
                                        stendorYourPeople.play();
                                        stendorYourPeople.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        stendorHelpingPeople.play();
                                        stendorHelpingPeople.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0c")
                                {
                                    stendorHereTheyAre.play();
                                    stendorHereTheyAre.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 1;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0d")
                                {
                                    if (player.title == "Royalty" || player.title == "Nobility")
                                    {
                                        if (player.gender == "Male")
                                        {
                                            stendorHealth.play();
                                            stendorHealth.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            stendorFairThee.play();
                                            stendorFairThee.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                    }
                                    else if (player.title == "Highfolk")
                                    {
                                        stendorBeWell.play();
                                        stendorBeWell.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        stendorTrouble.play();
                                        stendorTrouble.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    lowBar = "information";
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [];
                                        if (quests.theMasterThiefOfTeshirQuest == false)
                                        {
                                            player.dialogueOptions.push(["{ Wanted: Master Thief ; 65 coins }", false, "a"]);
                                        }
                                        if (quests.bountyHetmerQuest == false && uniqueChars.hetmerLDS == true)
                                        {
                                            player.dialogueOptions.push(["{ Wanted: Bandit Chief Hetmer ; 38 coins }", false, "b"]);
                                        }
                                        if (quests.bountyteberQuest == false && uniqueChars.teberLDS == true)
                                        {
                                            player.dialogueOptions.push(["{ Wanted: Teber the Deserter ; 25 coins }", false, "c"]);
                                        }
                                        if (player.dialogueOptions.length < 1)
                                        {
                                            player.dialogueOptions.push(["(No Active Bounties: return to previous dialogue selection)", false, "d"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1d";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1a")
                                {
                                    stendorItemsGo.play();
                                    stendorItemsGo.onended = function()
                                    {
                                        quests.theMasterThiefOfTeshirQuest = true;
                                        quests.activeQuests.push({name: "The Master Thief of Teshir", description: "You took a bounty to aprehend or kill the skilled thief that has been stealing goods in the city of Teshir."});
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 2;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1b")
                                {
                                    stendorHetmerTough.play();
                                    stendorHetmerTough.onended = function()
                                    {
                                        quests.bountyHetmerQuest = true;
                                        quests.activeQuests.push({name: "Bounty: Hetmer the Bandit Chieftain", description: "Kill Hetmer the Bandit Chieftain and then return to Commissioner Stendor for payment."});
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 4;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1c")
                                {
                                    stendorPoorWretch.play();
                                    stendorPoorWretch.onended = function()
                                    {
                                        quests.bountyTeberQuest = true;
                                        quests.activeQuests.push({name: "Bounty: Teber the Deserter", description: "Kill Teber, a soldier who deserted the freydic jarl Torg's army."});
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 5;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1d")
                                {
                                    playersTurnToSpeak = true;
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == 2)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [];
                                        if (quests.theMasterThiefOfTeshirNeevKnown == true)
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 3;
                                            self.SC();
                                        }
                                        else
                                        {
                                            player.dialogueOptions.push(["Where should I start looking?", false, "a"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2a";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2a")
                                {
                                    stendorTryAsking.play();
                                    stendorTryAsking.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 2;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 3)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [];
                                        if (quests.theMasterThiefOfTeshirQuest == true && quests.theMasterThiefOfTeshirNeevKnown == true && quests.theMasterThiefOfTeshirNeevSlain == true)
                                        {
                                            player.dialogueOptions.push(["It turns out the thief was a Neev, I've slain it for all to see.", false, "a"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "3a";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "3a")
                                {
                                    if (quests.theMasterThiefOfTeshirQuest == true && quests.theMasterThiefOfTeshirNeevKnown == true && quests.theMasterThiefOfTeshirNeevSlain == true)
                                    {
                                        stendorNeevsAreReal.play();
                                        stendorNeevsAreReal.onended = function()
                                        {
                                            quests.theMasterThiefOfTeshirQuest = "complete";
                                            quests.completeQuests.push({name: "The Master Thief of Teshir", description: "You killed the thief, which turned out to be a magical creature commonly known as a beer fairy."});
                                            worldItems.push([new Item("coins", X, Y), 65]);
                                            player.freynorFaction += 25;
                                            player.fame += 1;
                                            if (player.class == "Mage")
                                            {
                                                player.magicalExperience += 75;
                                            }
                                            else
                                            {
                                                player.experience += 75;
                                            }
                                            player.magicalExperience += 25;
                                            player.experience += 25;
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == 4)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [];
                                        if (uniqueChars.hetmerLDS == false)
                                        {
                                            player.dialogueOptions.push(["The bandit Hetmer has been brought to justice.", false, "a"]);
                                        }
                                        else
                                        {
                                            player.dialogueOptions.push(["Where might I find him?", false, "b"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "4a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "4b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "4a")
                                {
                                    if (quests.bountyHetmerQuest == true)
                                    {
                                        stendorExcellent.play();
                                        stendorExcellent.onended = function()
                                        {
                                            quests.bountyHetmerQuest = "complete";
                                            quests.completeQuests.push({name: "Bounty: Hetmer the Bandit Chieftain", description: "You killed the bandit chieftan Hetmer and collected your payment."});
                                            worldItems.push([new Item("coins", X, Y), 38]);
                                            player.freynorFaction += 5;
                                            player.fame += 1;
                                            player.experience += 75;
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "4b")
                                {
                                    stendorAlwaysComeBack.play();
                                    stendorAlwaysComeBack.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 4;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 5)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [];
                                        if (quests.bountyTeberQuest == "complete")
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                        else if (uniqueChars.teberLDS == false)
                                        {
                                            player.dialogueOptions.push(["Teber has been dealt with.", false, "a"]);
                                        }
                                        else
                                        {
                                            player.dialogueOptions.push(["Do you know where he is?", false, "b"]);
                                            if (player.title == "Royalty" && player.raceName == "Freynor")
                                            {
                                                player.dialogueOptions.push(["As the heir to the kingdom of Freynor I hereby clear all charges against this soldier.", false, "c"]);
                                            }
                                            else if (player.title == "Nobility" && player.raceName == "Freynor")
                                            {
                                                player.dialogueOptions.push(["As the heir to the house of Torg I declare Teber cleared of all charges against him.", false, "d"]);
                                            }
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "5a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "5b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "5c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "5d";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "5a")
                                {
                                    if (quests.bountyTeberQuest == true)
                                    {
                                        stendorPoorSoul.play();
                                        stendorPoorSoul.onended = function()
                                        {
                                            quests.bountyTeberQuest = "complete";
                                            quests.bountyTeberCompletionStyle = "killed teber";
                                            quests.completeQuests.push({name: "Bounty: Teber the Deserter", description: "You tracked down and killed the soldier that had deserted Jarl Torg's army then collected payment."});
                                            worldItems.push([new Item("coins", X, Y), 25]);
                                            player.freynorFaction += 2;
                                            player.fame += 1;
                                            player.experience += 55;
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "5b")
                                {
                                    stendorFarSouth.play();
                                    stendorFarSouth.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 5;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "5c")
                                {
                                    if (quests.bountyTeberQuest == true)
                                    {
                                        stendorHighness.play();
                                        stendorHighness.onended = function()
                                        {
                                            quests.bountyTeberQuest = "complete";
                                            quests.bountyTeberCompletionStyle = "royal pardon";
                                            quests.completeQuests.push({name: "Bounty: Teber the Deserter", description: "As the heir to the kingdom of Freynor, you pardoned Teber's desertion."});
                                            player.experience += 25;
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "5d")
                                {
                                    if (quests.bountyTeberQuest == true)
                                    {
                                        if (player.gender == "Female")
                                        {
                                            stendorWishLady.play();
                                            stendorWishLady.onended = function()
                                            {
                                                quests.bountyTeberQuest = "complete";
                                                quests.bountyTeberCompletionStyle = "royal pardon";
                                                quests.completeQuests.push({name: "Bounty: Teber the Deserter", description: "As the heir to the house of Torg, the very house whose army Teber deserted from, You pardoned Teber's Desertion."});
                                                player.experience += 25;
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            stendorWishLord.play();
                                            stendorWishLord.onended = function()
                                            {
                                                quests.bountyTeberQuest = "complete";
                                                quests.bountyTeberCompletionStyle = "royal pardon";
                                                quests.completeQuests.push({name: "Bounty: Teber the Deserter", description: "As the heir to the house of Torg, the very house whose army Teber deserted from, You pardoned Teber's Desertion."});
                                                player.experience += 25;
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 0;
                                                self.SC();
                                            }
                                        }
                                    }
                                }
                            }

                            if (this.ID == "Kedwin" || conversationID[0] == "Kedwin")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Kedwin";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["How goes the day?", false, "a"]];
                                        if (quests.theMasterThiefOfTeshirQuest == true && quests.theMasterThiefOfTeshirNeevKnown == false)
                                        {
                                            player.dialogueOptions.push(["Have you heard any rumors that would help me find the thief that is on the loose?", false, "b"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0b";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    kedwinBetter.play();
                                    kedwinBetter.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    kedwinRumors.play();
                                    kedwinRumors.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 1;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["[give harst ale]", false, "a"], ["[threaten him into telling you]", false, "b"], ["Actually let's not discuss rumors.", false, "c"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1a")
                                {
                                    var gaveAleToKed = -1;
                                    for (var i = 0; i < Inventory.length; i++)
                                    {
                                        if (Inventory[i][0].type == "harstAle")
                                        {
                                            gaveAleToKed = i;
                                        }
                                    }

                                    if (gaveAleToKed != -1)
                                    {
                                        quests.theMasterThiefOfTeshirNeevKnown = true;
                                        if (quests.theMasterThiefOfTeshirNeevSlain == false)
                                        {
                                            kedwinGobblin.play();
                                            kedwinGobblin.onended = function()
                                            {
                                                if (Inventory[gaveAleToKed][1] > 1)
                                                {
                                                    Inventory[gaveAleToKed][1] -= 1;
                                                }
                                                else
                                                {
                                                    Inventory.splice(gaveAleToKed, 1);
                                                }

                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 2;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            kedwinSomeone.play();
                                            kedwinSomeone.onended = function()
                                            {
                                                if (Inventory[gaveAleToKed][1] > 1)
                                                {
                                                    Inventory[gaveAleToKed][1] -= 1;
                                                }
                                                else
                                                {
                                                    Inventory.splice(gaveAleToKed, 1);
                                                }

                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 3;
                                                self.SC();
                                            }
                                        }
                                    }
                                    else
                                    {

                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 1;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1b")
                                {
                                    if (player.getCharisma() >= 15)
                                    {
                                        quests.theMasterThiefOfTeshirNeevKnown = true;
                                        if (quests.theMasterThiefOfTeshirNeevSlain == false)
                                        {
                                            kedwinGobblin.play();
                                            kedwinGobblin.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 2;
                                                self.SC();
                                            }
                                        }
                                        else
                                        {
                                            kedwinSomeone.play();
                                            kedwinSomeone.onended = function()
                                            {
                                                playersTurnToSpeak = true;
                                                player.dialoguePosition = 0;
                                                conversationID[1] = 3;
                                                self.SC();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                        this.disturbedTime = new Date().getTime();
                                    }
                                }
                                else if (conversationID[1] == "1c")
                                {
                                    playersTurnToSpeak = true;
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == 2)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["What is a Beer Fairy?", false, "a"]];
                                        if (player.getIntelligence() > 11)
                                        {
                                            player.dialogueOptions.unshift(["Beer fairies are just fairytales, they don't actually exist. Now tell me something useful.", false, "b"]);
                                        }
                                        if (player.getIntelligence() > 19)
                                        {
                                            player.dialogueOptions.push(["Sounds like a Neev to me...", false, "c"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2a")
                                {
                                    kedwinNeverHeard.play();
                                    kedwinNeverHeard.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 3;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "2b")
                                {
                                    kedwinEitherWay.play();
                                    kedwinEitherWay.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 3;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "2c")
                                {
                                    kedwinCause.play();
                                    kedwinCause.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 3)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["That's bogus!", false, "a"], ["Thanks for the help.", false, "b"], ["This is what I get for asking a drunk to help me with a serious problem...", false, "c"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "3a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "3b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "3c";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "3a" || conversationID[1] == "3c")
                                {
                                    kedwinYourLoss.play();
                                    kedwinYourLoss.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "3b")
                                {
                                    kedwinNothing.play();
                                    kedwinNothing.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                            }

                            if (this.ID == "Teber the Deserter" || this.ID == "Teber the Artisan" || conversationID[0] == "Teber")
                            {
                                lowBar = "dialogue";
                                conversationID[0] = "Teber";

                                if (clickReleased)
                                {
                                    self.RC();
                                }

                                //CONVERSATION
                                if (conversationID[1] == 0)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["Good Day.", false, "a"], ["What skills do you know?", false, "b"]];
                                        if (player.raceName == "Kel")
                                        {
                                            player.dialogueOptions.push(["What brings you to our tribe?", false, "c"]);
                                        }
                                        else
                                        {
                                            player.dialogueOptions.push(["What brings you so far from your land?", false, "c"]);
                                        }
                                        if (quests.bountyTeberCompletionStyle != "doublecross")
                                        {
                                            player.dialogueOptions.push(["[trade 5 mofu feathers and 52 coins for a mofu feather necklace]", false, "d"]);
                                        }
                                        if (quests.bountyTeberCompletionStyle == false && quests.bountyTeberQuest == true)
                                        {
                                            player.dialogueOptions.push(["I'm here to kill you deserter... any last words?", false, "e"]);
                                        }
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0d";
                                                }
                                                else if (player.dialogueOptions[i][2] == "e")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "0e";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0a")
                                {
                                    teberShanToor.play();
                                    teberShanToor.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0b")
                                {
                                    teberSkills.play();
                                    teberSkills.onended = function()
                                    {
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0c")
                                {
                                    if (player.getCharisma() >= 10)
                                    {
                                        teberArtCareer.play();
                                        teberArtCareer.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        teberLastJob.play();
                                        teberLastJob.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == "0d")
                                {
                                    teberQueBellas.play();
                                    teberQueBellas.onended = function()
                                    {
                                        //todo actually make the trade take place here. //booble
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 0;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "0e")
                                {
                                    if (player.level >= 8 || player.magicLevel >= 6)
                                    {
                                        teberPleaseDont.play();
                                        teberPleaseDont.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 1;
                                            self.SC();
                                        }
                                    }
                                    else
                                    {
                                        teberDontWant.play();
                                        teberDontWant.onended = function()
                                        {
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                                else if (conversationID[1] == 1)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["If you pay me double your bounty I will let you live. (LIE)", false, "a"], ["If you pay me double your bounty I will let you live. (TRUTH)", false, "d"], ["Enough groveling deserter... Stand and fight me with whatever last scraps of honor you still have.", false, "b"], ["Okay... I won't kill you... but that doesn't mean somebody else won't, you're a wanted man.", false, "c"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1a";
                                                }
                                                else if (player.dialogueOptions[i][2] == "b")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1b";
                                                }
                                                else if (player.dialogueOptions[i][2] == "c")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1c";
                                                }
                                                else if (player.dialogueOptions[i][2] == "d")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "1d";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "1a")
                                {
                                    teberAnyways.play();
                                    teberAnyways.onended = function()
                                    {
                                        quests.bountyTeberCompletionStyle = "doublecross";
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 2;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == "1b")
                                {
                                    this.disturbedTime = new Date().getTime();
                                }
                                else if (conversationID[1] == "1c")
                                {
                                    quests.bountyTeberCompletionStyle = "spare";
                                    quests.bountyTeberQuest = "complete";
                                    quests.completeQuests.push({name: "Bounty: Teber the Deserter", description: "After hearing Teber's side of the story you decided to let him live."});
                                    player.kelFaction += 3;
                                    player.freynorFaction -= 5;
                                    player.experience += 45;
                                    playersTurnToSpeak = true;
                                    player.dialoguePosition = 0;
                                    conversationID[1] = 0;
                                    self.SC();
                                }
                                else if (conversationID[1] == "1d")
                                {
                                    teberAnyways.play();
                                    teberAnyways.onended = function()
                                    {
                                        quests.bountyTeberCompletionStyle = "doublespare";
                                        playersTurnToSpeak = true;
                                        player.dialoguePosition = 0;
                                        conversationID[1] = 2;
                                        self.SC();
                                    }
                                }
                                else if (conversationID[1] == 2)
                                {
                                    if (player.dialogueChoiceMade == false)
                                    {
                                        player.dialogueOptions = [["I could kill you and take your money now if you would like...", false, "a"]];
                                    }
                                    else if (player.dialogueChoiceMade == true)
                                    {
                                        player.dialogueChoiceMade = false;
                                        for (var i = 0; i < player.dialogueOptions.length; i++)
                                        {
                                            if (player.dialogueOptions[i][1] == true)
                                            {
                                                if (player.dialogueOptions[i][2] == "a")
                                                {
                                                    playersTurnToSpeak = false;
                                                    conversationID[1] = "2a";
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (conversationID[1] == "2a")
                                {
                                    teberOkay.play();
                                    teberOkay.onended = function()
                                    {
                                        if (quests.bountyTeberCompletionStyle == "doublespare")
                                        {
                                            quests.bountyTeberQuest = "complete";
                                            quests.completeQuests.push({name: "Bounty: Teber the Deserter", description: "You spared Teber in exchange for double the price of his bounty."});
                                            player.freynorFaction -= 5;
                                            worldItems.push([new Item("coins", X, Y), 50]);
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                        else
                                        {
                                            worldItems.push([new Item("coins", X, Y), 50]);
                                            playersTurnToSpeak = true;
                                            player.dialoguePosition = 0;
                                            conversationID[1] = 0;
                                            self.SC();
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (conversationID[0] != "none" && this.engagedInDialogue == true)
                            {
                                this.engagedInDialogue = false;
                                player.dialoguePosition = 0;
                                player.inventoryPosition = 0;
                                invScroll = 0;
                                conversationID[0] = "none";
                                conversationID[1] = 0;
                                lowBar = "information";
                            }
                        }
                        //ACCESS SHOPS BANKS AND OTHER AI SERVICES
                        if (dtm < this.sizeRadius)
                        {
                            if (this.hostile == true)
                            {
                                XXX.fillStyle = "red";
                            }
                            else
                            {
                                XXX.fillStyle = "gold";
                            }
                            XXX.textAlign = "center";
                            XXX.font = "bold 15px Book Antiqua";
                            XXX.fillText(this.ID, X - this.X + 1 / 2 * CCC.width, Y - this.Y - 16 + 1 / 2 * CCC.height);

                            //click-based interaction
                            if (this.ultra.faction != "outlander" && this.ultra.faction != "hostile")
                            {
                                var parsedFactionRelation = eval("player." + this.ultra.faction.toLowerCase() + "Faction");
                            }
                            else
                            {
                                var parsedFactionRelation = 0;
                            }
                            
                            if (dClick == true && this.ultra.merchant == true && dtp < 100 && this.disturbed == false && parsedFactionRelation >= -25)
                            {
                                shopInventory = this.ultra.merchandise;
                                shopID = this.ID;
                                lowBar = "shop";
                                gameState = "paused";
                            }
                            else if (dClick == true && this.ultra.banker == true && dtp < 100 && this.disturbed == false && parsedFactionRelation >= -49)
                            {
                                lowBar = "bank";
                                gameState = "paused";
                            }
                        }
                    }
                }
            }
        };
            //this points the unit toward the main character.
        this.pointTowardsPlayer = function()
        {
            var dtp = this.DTP();
            if (dtp < this.rangeOfSight && this.blinded == false) //if the player is close enough to the unit the unit will rotate toward him/her.
            {
                this.playerSeen = true;
                this.newRotation = Math.atan2(Y - this.Y, X - this.X) + Math.PI;
                //console.log(this.rotation + " | " + this.newRotation);
            }
            else if (this.blinded == true)
            {
                this.playerSeen = false;
                var rndmz = Math.floor(Math.random() * 13);
                if (rndmz <= 3)
                {
                    this.newRotation += 1 * Math.PI;
                }
                else if (rndmz > 3 && rndmz <= 7)
                {
                    this.newRotation -= 1/2 * Math.PI;
                }
                else if (rndmz > 7 && rndmz <= 9)
                {
                    this.newRotation = Math.atan2(Y - this.Y, X - this.X) + Math.PI;
                }
            }
            else
            {
                this.playerSeen = false;
            }
        };

        this.noticePlayer = function()
        {
            var dtp = this.DTP();
            if (dtp < this.rangeOfSight && this.blinded == false) //if the player is close enough to the unit the unit will rotate toward him/her.
            {
                this.playerSeen = true;
            }
            else
            {
                this.playerSeen = false;
            }
        };
            //this points away from the player.
        this.pointAwayFromPlayer = function()
        {
            var dtp = this.DTP();
            if (dtp < this.rangeOfSight && this.blinded == false) //if the player is close enough to the unit the unit will rotate toward him/her.
            {
                this.playerSeen = true;
                this.fleeing = true;
                this.newRotation = Math.atan2(Y - this.Y, X - this.X);
                //console.log(this.rotation + " | " + this.newRotation);
            }
            else if (this.blinded == true)
            {
                this.playerSeen = false;
                var rndmz = Math.floor(Math.random() * 14);
                if (rndmz <= 3)
                {
                    this.newRotation -= 1 * Math.PI;
                }
                else if (rndmz > 3 && rndmz <= 7)
                {
                    this.newRotation += 1 / 2 * Math.PI;
                }
                else if (rndmz > 7 && rndmz <= 9)
                {
                    this.newRotation = Math.atan2(Y - this.Y, X - this.X);
                }
            }
            else
            {
                this.fleeing = false;
                this.playerSeen = false;
            }
        };

            //Patrol -- move between set locations on the map.
        this.patrolStart = true;

        this.patrolDTP = this.DTP();
        this.patrolDestinationX;
        this.patrolDestinationY;
        this.patrolDistance;
        this.patrolArrived = false;
        this.patrolProgress = 0;

        this.patrol = function(numberOfStops, loop) //number of places that the unit goes to; whether or not the unit will head back towards the first stop or retrace its steps;
        {

            this.dtd = function() // distance to destination
            {
                this.patrolDistance = Math.sqrt((this.patrolDestinationX - this.X)*(this.patrolDestinationX - this.X) + (this.patrolDestinationY - this.Y)*(this.patrolDestinationY - this.Y));
            };

            if (numberOfStops == 1)
            {
                this.patrolArrived = false;
                this.patrolDestinationX = this.ultra.route[0][0];
                this.patrolDestinationY = this.ultra.route[0][1];
                if (this.patrolArrived == false)
                {
                    this.dtd();
                }
            }
            else if (numberOfStops == 2)
            {
                if (this.patrolProgress == 0)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 1 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[1][0];
                    this.patrolDestinationY = this.ultra.route[1][1];
                    this.patrolArrived = false;
                }

                if (this.patrolProgress == 2 && this.patrolArrived == true && loop == true)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolProgress = 0;
                    this.patrolArrived = false;
                }

                if (this.patrolArrived == false)
                {
                    this.dtd();
                }
            }
            else if (numberOfStops == 3)
            {
                if (this.patrolProgress == 0)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 1 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[1][0];
                    this.patrolDestinationY = this.ultra.route[1][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 2 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[2][0];
                    this.patrolDestinationY = this.ultra.route[2][1];
                    this.patrolArrived = false;
                }

                if (this.patrolProgress == 3 && this.patrolArrived == true && loop == true)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolProgress = 0;
                    this.patrolArrived = false;
                }

                if (this.patrolArrived == false)
                {
                    this.dtd();
                }
            }
            else if (numberOfStops == 4)
            {
                if (this.patrolProgress == 0)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 1 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[1][0];
                    this.patrolDestinationY = this.ultra.route[1][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 2 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[2][0];
                    this.patrolDestinationY = this.ultra.route[2][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 3 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[3][0];
                    this.patrolDestinationY = this.ultra.route[3][1];
                    this.patrolArrived = false;
                }

                if (this.patrolProgress == 4 && this.patrolArrived == true && loop == true)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolProgress = 0;
                    this.patrolArrived = false;
                }

                if (this.patrolArrived == false)
                {
                    this.dtd();
                }
            }
            else if (numberOfStops == 5)
            {
                if (this.patrolProgress == 0)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 1 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[1][0];
                    this.patrolDestinationY = this.ultra.route[1][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 2 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[2][0];
                    this.patrolDestinationY = this.ultra.route[2][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 3 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[3][0];
                    this.patrolDestinationY = this.ultra.route[3][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 4 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[4][0];
                    this.patrolDestinationY = this.ultra.route[4][1];
                    this.patrolArrived = false;
                }

                if (this.patrolProgress == 5 && this.patrolArrived == true && loop == true)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolProgress = 0;
                    this.patrolArrived = false;
                }

                if (this.patrolArrived == false)
                {
                    this.dtd();
                }
            }
            else if (numberOfStops == 6)
            {
                if (this.patrolProgress == 0)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 1 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[1][0];
                    this.patrolDestinationY = this.ultra.route[1][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 2 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[2][0];
                    this.patrolDestinationY = this.ultra.route[2][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 3 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[3][0];
                    this.patrolDestinationY = this.ultra.route[3][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 4 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[4][0];
                    this.patrolDestinationY = this.ultra.route[4][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 5 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[5][0];
                    this.patrolDestinationY = this.ultra.route[5][1];
                    this.patrolArrived = false;
                }

                if (this.patrolProgress == 6 && this.patrolArrived == true && loop == true)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolProgress = 0;
                    this.patrolArrived = false;
                }

                if (this.patrolArrived == false)
                {
                    this.dtd();
                }
            }
            else if (numberOfStops == 7)
            {
                if (this.patrolProgress == 0)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 1 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[1][0];
                    this.patrolDestinationY = this.ultra.route[1][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 2 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[2][0];
                    this.patrolDestinationY = this.ultra.route[2][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 3 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[3][0];
                    this.patrolDestinationY = this.ultra.route[3][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 4 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[4][0];
                    this.patrolDestinationY = this.ultra.route[4][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 5 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[5][0];
                    this.patrolDestinationY = this.ultra.route[5][1];
                    this.patrolArrived = false;
                }
                else if (this.patrolProgress == 6 && this.patrolArrived == true)
                {
                    this.patrolDestinationX = this.ultra.route[6][0];
                    this.patrolDestinationY = this.ultra.route[6][1];
                    this.patrolArrived = false;
                }

                if (this.patrolProgress == 7 && this.patrolArrived == true && loop == true)
                {
                    this.patrolDestinationX = this.ultra.route[0][0];
                    this.patrolDestinationY = this.ultra.route[0][1];
                    this.patrolProgress = 0;
                    this.patrolArrived = false;
                }


                if (this.patrolArrived == false)
                {
                    this.dtd();
                }
            }

            this.patrolDTP = this.DTP();
            if (this.patrolDTP < this.rangeOfSight) //if the player is close enough to the unit the unit will rotate toward him/her.
            {
                this.playerSeen = true;
            }
            else
            {
                this.playerSeen = false;
            }

            if (numberOfStops != 0)
            {
                this.newRotation = Math.atan2(this.patrolDestinationY - this.Y, this.patrolDestinationX - this.X) + Math.PI; //Point toward the destination.

                if (this.patrolDistance > ((TTD / 16.75) * this.speed + 1)) //If the buffer between the target and this unit is not reached yet, and this has not been obstructed by anything, and the target is within sight then move a little bit in the direction of that target.
                {
                    var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * this.speed);
                    var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * this.speed);

                    if (!this.isObstructed(nextX, nextY))
                    {
                        this.X = nextX;
                        this.Y = nextY;
                        this.moving = true;
                    }
                }
                else
                {
                    this.patrolArrived = true;
                    this.moving = false;
                    if (this.patrolProgress == 0)
                    {
                        this.patrolProgress = 1;
                    }
                    else if (this.patrolProgress == 1)
                    {
                        this.patrolProgress = 2;
                    }
                    else if (this.patrolProgress == 2)
                    {
                        this.patrolProgress = 3;
                    }
                    else if (this.patrolProgress == 3)
                    {
                        this.patrolProgress = 4;
                    }
                    else if (this.patrolProgress == 4)
                    {
                        this.patrolProgress = 5;
                    }
                    else if (this.patrolProgress == 5)
                    {
                        this.patrolProgress = 6;
                    }
                    else if (this.patrolProgress == 6)
                    {
                        this.patrolProgress = 7;
                    }
                }
            }

        };

            //this determines a unit's range of sight in a number of different situations.
        this.rangeOfSightCalculator = function(baseSight, hostile) //base sight is the base amount of rangeOfSight that the unit has, hostile implys that this particular type of unit will persue its prey for much longer than others would.
        {
            // if the extra range is expired then set it to 0.
            if (new Date().getTime() - this.extraRangeTime > 4000)
            {
                this.extraRange = 0;
            }
            //rangeOfSight When player is sneaking.
            if (this.disturbed == true)
            {
                this.rangeOfSight = baseSight * 4 + this.extraRange;
            }
            else if (wKey == true && shiftKey == true && this.playerSeen == false)
            {
                if (hostile == false)
                {
                    this.rangeOfSight = baseSight * 1.1 + this.extraRange;
                }
                else
                {
                    this.rangeOfSight = baseSight * 1.35 + this.extraRange;
                }
            }
            else if (altKey == true && wKey == false && this.playerSeen == false && this.disturbed == false) // If sneaking and the player has not yet been noticed by the enemy...
            {
                this.rangeOfSight = baseSight * (13 / (14 + (player.getStealth() * 2))) + this.extraRange; // the enemy's sight is severely lowered.
            }
            else if (this.playerSeen == false) //otherwise if the enemy had already noticed the player...
            {
                this.rangeOfSight = baseSight + this.extraRange; //the enemy will retain its rangeOfSight.
            }
            else if (this.playerSeen == true && hostile == false || this.disturbed == true && hostile == false)
            {
                this.rangeOfSight = baseSight * 1.2 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "mildly" || this.disturbed == true && hostile == "mildly")
            {
                this.rangeOfSight = baseSight * 1.45 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == true || this.disturbed == true && hostile == true)
            {
                this.rangeOfSight = baseSight * 1.7 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "very" || this.disturbed == true && hostile == "very")
            {
                this.rangeOfSight = baseSight * 2 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "extremely" || this.disturbed == true && hostile == "extremely")
            {
                this.rangeOfSight = baseSight * 2.5 + this.extraRange;
            }
            else if (this.playerSeen == true && hostile == "unrelenting" || this.disturbed == true && hostile == "unrelenting")
            {
                this.rangeOfSight = baseSight * 3 + this.extraRange;
            }
        };

            //This moves the unit forwards either away from or toward the player.
        this.moveInRelationToPlayer = function() //the fraction of PI is the amount of angle-adjustment for the specific type of unit.
        {
            var dtp = this.DTP();
            if (dtp > this.engagementRadius && dtp < this.rangeOfSight || this.fleeing == true && dtp < this.rangeOfSight) //If the buffer between the target and this unit is not reached yet, and this has not been obstructed by anything, and the target is within sight then move a little bit in the direction of that target.
            {

                var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned;
                var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned;

                if (! this.isObstructed( nextX, nextY ) || this.flying == true)
                {
                    this.X = nextX;
                    this.Y = nextY;
                    this.moving = true;
                }
                else
                {
                    if (this.moving && this.attacking == false)
                    {
                        this.timeStoppedMoving = new Date().getTime();
                    }
                    this.moving = false;

                    if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                    {
                        this.costume = 0;
                    }
                }
            }
            else
            {
                if (this.moving && this.attacking == false)
                {
                    this.timeStoppedMoving = new Date().getTime();
                }
                this.moving = false;

                if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                {
                    this.costume = 0;
                }
            }
        };

        this.distanceFinder = function(thing1, thing2)
        {
            return Math.sqrt((thing1.X - thing2.X)*(thing1.X - thing2.X)+(thing1.Y - thing2.Y)*(thing1.Y - thing2.Y));
        };

        this.pointTowards = function(thing)
        {
            if (this.blinded == false)
            {
                this.newRotation = Math.atan2(thing.Y - this.Y, thing.X - this.X) + Math.PI;
            }
            else if (this.blinded == true)
            {
                var rndmz = Math.floor(Math.random() * 13);
                if (rndmz <= 3)
                {
                    this.newRotation += 1 * Math.PI;
                }
                else if (rndmz > 3 && rndmz <= 7)
                {
                    this.newRotation -= 1/2 * Math.PI;
                }
                else if (rndmz > 7 && rndmz <= 9)
                {
                    this.newRotation = Math.atan2(thing.Y - this.Y, thing.X - this.X) + Math.PI;
                }
            }
        };

        this.moveInRelationToThing = function(thing) //move towards target thing.
        {
            var dTo = this.distanceFinder(this, thing);
            if (dTo > this.engagementRadius && dTo < this.rangeOfSight || this.fleeing == true && dTo < this.rangeOfSight) //If the buffer between the target and this unit is not reached yet, and this has not been obstructed by anything, and the target is within sight then move a little bit in the direction of that target.
            {

                var nextX = this.X - Math.cos(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned;
                var nextY = this.Y - Math.sin(this.rotation) * ((TTD / 16.75) * this.speed) * this.stunned;

                if (! this.isObstructed( nextX, nextY ) || this.flying == true)
                {
                    this.X = nextX;
                    this.Y = nextY;
                    this.moving = true;
                }
                else
                {
                    if (this.moving && this.attacking == false)
                    {
                        this.timeStoppedMoving = new Date().getTime();
                    }
                    this.moving = false;

                    if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                    {
                        this.costume = 0;
                    }
                }
            }
            else
            {
                if (this.moving && this.attacking == false)
                {
                    this.timeStoppedMoving = new Date().getTime();
                }
                this.moving = false;

                if (new Date().getTime() - this.timeStoppedMoving > 500 && this.attacking == false)
                {
                    this.costume = 0;
                }
            }
        };

        this.Attack = function(randomDamage, setDamage)
        {
            //this method relies on the class variable being set: this.timeBetweenAttacks = new Date().getTime();
            var dtp = this.DTP();
            if (dtp <= this.engagementRadius && dtp <= this.rangeOfSight)
            {
                this.attacking = true;
            }
            else
            {
                this.attacking = false;
            }

            if (this.attacking == true)
            {
                player.inCombat = true;
                if (this.attackStyle == "rapid")
                {
                    if (this.damage > player.armourTotal)
                    {
                        this.damage = Math.floor(Math.random() * (randomDamage + 1)) + setDamage;
                        player.health -= Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) * (TTD / (16.75 + (100 * this.attackRate)));
                        player.decreaseInHealth += Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) * (TTD / (16.75 + (100 * this.attackRate))); // this is how much health is displayed as blood red for the player;
                    }
                }
                if (this.attackStyle == "chunked")
                {
                        if (this.justAttacked == true)
                        {
                            this.finalAttackCostume = false;
                            this.justAttacked = false;
                            this.damage = Math.floor(Math.random() * (randomDamage + 1)) + setDamage;
                        }

                        if (this.finalAttackCostume)
                        {
                            //console.log(this.damage + " is the damage done by " + this.ID + " through an armour total of " + player.armourTotal + ". The resulting damage was " + Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) * (TTD / 16.75) + ".");
                            player.health -= Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour));
                            player.decreaseInHealth += Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour));
                            this.justAttacked = true;

                            //Special Attacking Effects
                            if (this.effect == "poisonIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                            {
                                player.poisonIII = true;
                            }
                            else if (this.effect == "poisonII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                            {
                                player.poisonII = true;
                            }
                            else if (this.effect == "poisonI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                            {
                                player.poisonI = true;
                            }
                            else if (this.effect == "stunIII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                            {
                                player.stunnedIII = true;
                                player.stunnedTime = 11;
                            }
                            else if (this.effect == "stunII" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                            {
                                player.stunnedII = true;
                                player.stunnedTime = 8;
                            }
                            else if (this.effect == "stunI" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                            {
                                player.stunnedI = true;
                                player.stunnedTime = 5;
                            }
                            else if (this.effect == "narthwarpToxin" && (Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) > 0))
                            {
                                player.energy -= Math.max(0, this.damage - Math.max(0, player.armourTotal - this.negateArmour)) / 4;
                            }
                        }
                }
                if (this.attackStyle == "magical")
                {

                }
            }

        };

        this.flashAnimate = function(framerate, rotation, transparency, list)
        {
            //use a list with coords for images: [{image:, imgX:, imgY:, portionW:, portionH:, adjX:, adjY:, width:, height:}, ... etc.]
            if (this.flashFrame >= list.length)
            {
                this.flashFrame = 0;
            }

            if (rotation != false)
            {
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                XXX.rotate(rotation);
                XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.globalAlpha = transparency;
                XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, X - this.X + (1 / 2 * CCC.width) + list[this.flashFrame].adjX, Y - this.Y + (1 / 2 * CCC.height) + list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
                XXX.restore();
            }

            if (new Date().getTime() - this.flashFrameTime >= framerate)
            {
                this.flashFrameTime = new Date().getTime();
                this.flashFrame += 1;
            }
        };

        //this function deals with all of the effects that can effect AI UNITS.
        this.effected = function(resistancesList)
        {
            //Resistances to effects
                //variables that signify restant or not.
            var frozenResistance = false;
            var burningResistance = false;
            var blindedResistance = false;
            var stunResistance = false;
                //for loop to check for resistance
            for (var i = 0; i < resistancesList.length; i++)
            {
                if (resistancesList[i] == "frozen")
                {
                    frozenResistance = true;
                }
                else if (resistancesList[i] == "burning")
                {
                    burningResistance = true;
                }
                else if (resistancesList[i] == "blinded")
                {
                    blindedResistance = true;
                }
                else if (resistancesList[i] == "stun")
                {
                    stunResistance = true;
                }
            }

                //Burning Effect
            if (burningResistance == false && new Date().getTime() - this.burningTime <= 9000 && (1.2 - this.heatResistance) > 0)
            {
                this.frozenTime = 0;
                this.flashAnimate(90, false, 0.90, [{image: polypol, imgX: 1691, imgY: 184, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}, {image: polypol, imgX: 1721, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}, {image: polypol, imgX: 1750, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}, {image: polypol, imgX: 1783, imgY: 185, portionW: 24, portionH: 23, adjX: -1 / 2 * ((24 * 1.5)/10) * this.sizeRadius, adjY: -1 / 2 * ((23 * 1.5)/10) * this.sizeRadius, width: ((24 * 1.5)/10) * this.sizeRadius, height: ((23 * 1.5)/10) * this.sizeRadius}]);
                if (new Date().getTime() - this.burningTime2 >= 99)
                {
                    this.burningTime2 = new Date().getTime();
                    this.health -= Math.max(0, 0.12 - (this.heatResistance / 10));
                }
            }
                //Frozen Effect
            if (new Date().getTime() - this.frozenTime > 4500)
            {
                if (this.hasBeenFrozen)
                {
                    this.speed = this.freezeKeepSpeed;
                }
                this.freezeKeepSpeed = this.speed;
                this.hasBeenFrozen = false;
            }
            if (frozenResistance == false && new Date().getTime() - this.frozenTime <= 4500)
            {
                this.burningTime = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.globalAlpha = 0.9;
                XXX.drawImage(polypol, 1691, 240, 28, 24, - 1/2 * (28 * 1.2) / 10 * this.sizeRadius, - 1/2 * (24 * 1.2) / 10 * this.sizeRadius, (28 * 1.2) / 10 * this.sizeRadius, (24 * 1.2) / 10 * this.sizeRadius);
                XXX.restore();

                this.speed = this.freezeKeepSpeed / 4.5;
                this.hasBeenFrozen = true;
            }
                //Blinded Effect
            if (blindedResistance == false && new Date().getTime() - this.blindedTime <= 5000 + (1000 * (player.getConcentration() / 5)))
            {
                this.blinded = true;
            }
            else
            {
                this.blinded = false;
            }
                //Stun Effect
            if (stunResistance == false && new Date().getTime() - this.stunTime <= this.stunTimer * 1000)
            {
                if (this.stunV)
                {
                    this.stunned = 0;
                }
                else if (this.stunIV)
                {
                    this.stunned = 0.2;
                }
                else if (this.stunIII)
                {
                    this.stunned = 0.3;
                }
                else if (this.stunII)
                {
                    this.stunned = 0.5;
                }
                else if (this.stunI)
                {
                    this.stunned = 0.75;
                }
            }
            else
            {
                this.stunned = 1;
                this.stunV = false;
                this.stunIV = false;
                this.stunIII = false;
                this.stunII = false;
                this.stunI = false;
            }
        };
            //This function increases the rangeOfSight of all of the surrounding nearby units.
        this.callForNearbyHelpFromType = function(range, type)
        {
            var nearbyUnitsList = [];
            this.findNearbyUnitTypeGroup(range, type, nearbyUnitsList);

            if (this.playerSeen == true) // If this unit sees the player call friends over to help in the attack.
            {
                for (var i = 0; i < nearbyUnitsList.length; i++)
                {
                    //distanceFromOtherToPlayer
                    var dfotp = Math.sqrt((X-nearbyUnitsList[i].X)*(X-nearbyUnitsList[i].X) + (Y-nearbyUnitsList[i].Y)*(Y-nearbyUnitsList[i].Y));

                    if (nearbyUnitsList[i].rangeOfSight < dfotp) //If other units range is less than their distance from the player...
                    {
                        var rangeNeeded = Math.max(0, dfotp - nearbyUnitsList[i].rangeOfSight);
                        nearbyUnitsList[i].extraRange = rangeNeeded + 20; // the extra range they will need to spy the player will be added.
                        nearbyUnitsList[i].extraRangeTime = new Date().getTime();
                    }
                    else
                    {
                        if (type == "Soldier" && nearbyUnitsList[i].ultra.faction == this.ultra.faction || type == "Shehid")
                        {
                            nearbyUnitsList[i].disturbed = true;
                        }
                    }
                }
            }
        };

            //this unit's rangeOfSight is shown as a transparent red bubble.
        this.visibleSight = function()
        {
            if (showSight == true)
            {
                XXX.beginPath();
                XXX.fillStyle = "rgba( 255, 0, 0, 0.075)";
                XXX.arc(X - this.X + CCC.width / 2, Y - this.Y + CCC.height / 2, this.rangeOfSight, 0, 2 * Math.PI);
                XXX.fill();
            }
        };

        this.isObstructed = function(x, y)
        {
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (ArtificialIntelligenceAccess[i] !== this)
                {
                    var focusUnit = ArtificialIntelligenceAccess[i]; //This is the current unit focused on other than this unit.
                    var x1 = focusUnit.X; //the focus unit's X position.
                    var y1 = focusUnit.Y; //the focus unit's Y position.
                    var d = Math.sqrt( (x-x1)*(x-x1) + (y-y1)*(y-y1) ); //This is the distance between this unit and the focus unit.
                    if (d < this.sizeRadius + focusUnit.sizeRadius && focusUnit.alive == true) // if the total distance between this unit and the focus unit is less than the size of the two radiuses then it returns true to the movement function which calls it.
                    {
                        return true; //d == this.sizeRadius + focusUnit.sizeRadius :: this is the point at which the two units would be exactly touching eachother with no overlap.
                    }
                }
            }
            for (var i = 0; i < scenicList.length; i++)
            {
                if (scenicList[i].solid == true || scenicList[i].type == "campFire" && scenicList[i].lit == true && this.X > scenicList[i].X - scenicList[i].radius && this.X < scenicList[i].X + scenicList[i].radius && this.Y > scenicList[i].Y - scenicList[i].radius && this.Y < scenicList[i].Y + scenicList[i].radius)
                {
                    var focusObject = scenicList[i]; //This is the current unit focused on other than this unit.
                    var x1 = focusObject.X; //the focus unit's X position.
                    var y1 = focusObject.Y; //the focus unit's Y position.
                    var d = Math.sqrt( (x-x1)*(x-x1) + (y-y1)*(y-y1) ); //This is the distance between this unit and the focus unit.
                    if (d < this.sizeRadius + focusObject.radius) // if the total distance between this unit and the focus unit is less than the size of the two radiuses then it returns true to the movement function which calls it.
                    {
                        return true;
                    }
                }
            }
        };

        this.drawHumanArms = function()
        {
            if (this.ranged == true)
            {
                var dtp = this.DTP();
                if (this.disturbed == true && dtp <= this.rangeOfSight && this.playerSeen == true) //otherwise if it is attacking then initiate attacking animation, and if neither...
                {
                    this.attacking = true;
                    if(new Date().getTime() - this.timeBetweenAttacks > (this.ultra.ranged[8] * 1000))
                    {
                        if (this.weapon == "longbow")
                        {
                            this.costumeEngine(8, 0.20, false);
                        }
                        else if (this.weapon == "crossbow")
                        {
                            this.costumeEngine(28, 0.10, false);
                        }
                    }
                    //this is the actual launch
                    if (this.finalAttackCostume == true)
                    {
                        this.finalAttackCostume = false;
                        this.timeBetweenAttacks = new Date().getTime();
                        unitProjectiles.push(new Projectile(this.ultra.ranged[1], this.X, this.Y, this.rotation -  1 / 2 * Math.PI, this.ultra.ranged[2], this.ultra.ranged[3], this.ultra.ranged[4], unitProjectiles, this.ultra.ranged[5], this.ultra.ranged[6], this.ultra.ranged[7]));
                    }
                }
            }

            var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
            //manual damaging
            if (this.weapon == "none")
            {
                if (theCostume <= 0)
                {
                    this.drawUnit(polyPNG, 631, 55, 92, 30, -22, -17, 46, 22, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(polyPNG, 638, 118, 80, 37, -24, -17, 46, 22, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(polyPNG, 639, 195, 80, 37, -26, -20, 46, 22, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(polyPNG, 643, 276, 80, 37, -28.5, -20, 48, 23, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 4)
                {
                    this.drawUnit(polyPNG, 653, 352, 80, 37, -26.5, -21, 48, 23, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "longbow")
            {
                if (theCostume <= 0)
                {
                    this.drawUnit(polyPNG, 421, 589, 40, 43, -17, -41, 50, 53.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(polyPNG, 487, 589, 40, 43, -11, -42, 50, 53.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(polyPNG, 536, 589, 40, 43, -16, -39, 50, 53.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(polyPNG, 576, 588, 40, 43, -19, -41, 50, 53.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(polyPNG, 608, 588, 40, 43, -21, -41, 50, 53.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(polyPNG, 645, 589, 40, 43, -16, -40, 50, 53.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 6)
                {
                    this.drawUnit(polyPNG, 681, 582, 40, 43, -22, -38.5, 50, 53.75, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 7)
                {
                    this.drawUnit(polyPNG, 717, 583, 40, 43, -17, -38.5, 50, 53.75, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "crossbow")
            {
                if (theCostume <= 0)
                {
                    this.drawUnit(verse, 3911, 695, 50, 40, -27, -43, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(verse, 2788, 695, 50, 40, -25, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(verse, 2843, 695, 50, 40, -26, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(verse, 2899, 695, 50, 40, -28, -39.5, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(verse, 2950, 695, 50, 40, -26, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(verse, 2994, 695, 50, 40, -28, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 6)
                {
                    this.drawUnit(verse, 3044, 695, 50, 40, -25.5, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 7)
                {
                    this.drawUnit(verse, 3089, 695, 50, 40, -27, -39.5, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 8)
                {
                    this.drawUnit(verse, 3135, 695, 50, 40, -26, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 9)
                {
                    this.drawUnit(verse, 3183, 695, 50, 40, -27.85, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 10)
                {
                    this.drawUnit(verse, 3227, 695, 50, 40, -26.85, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 11)
                {
                    this.drawUnit(verse, 3270, 695, 50, 40, -28, -39.5, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 12)
                {
                    this.drawUnit(verse, 3313, 695, 50, 40, -26.35, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 13)
                {
                    this.drawUnit(verse, 3358, 695, 50, 40, -26.85, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 14)
                {
                    this.drawUnit(verse, 3403, 695, 50, 40, -26.85, -42, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 15)
                {
                    this.drawUnit(verse, 3452, 695, 50, 40, -25.85, -41, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 16)
                {
                    this.drawUnit(verse, 3498, 695, 50, 40, -25, -40, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 17)
                {
                    this.drawUnit(verse, 3552, 695, 50, 40, -23.6, -39, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 18)
                {
                    this.drawUnit(verse, 3608, 698, 50, 40, -22.5, -36, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 19)
                {
                    this.drawUnit(verse, 3665, 698, 50, 40, -23.5, -37.25, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 20)
                {
                    this.drawUnit(verse, 3717, 698, 50, 40, -26, -38.25, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 21)
                {
                    this.drawUnit(verse, 3770, 698, 50, 40, -26, -38.25, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 22)
                {
                    this.drawUnit(verse, 3817, 698, 50, 40, -27, -38.25, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 23)
                {
                    this.drawUnit(verse, 3865, 698, 50, 40, -27, -38.25, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 26)
                {
                    this.drawUnit(verse, 3865, 698, 50, 40, -27, -38.25, 52.5, 42, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 27)
                {
                    this.drawUnit(verse, 3911, 695, 50, 40, -27, -43, 52.5, 42, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "freydicSword")
            {
                this.damageFrame = "automatic";
                if (theCostume <= 0)
                {
                    this.drawUnit(oldverse, 2210, 1, 73, 63, -13, -60, 91.875, 78.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(oldverse, 2290, 1, 73, 63, -17.5, -60, 91.875, 78.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(oldverse, 2367, 1, 73, 63, -25, -61, 91.875, 78.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(oldverse, 2438, 1, 73, 63, -31, -61.5, 91.875, 78.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(oldverse, 2513, 1, 73, 63, -36, -64, 91.875, 78.75, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(oldverse, 2577, 1, 73, 63, -44, -69, 91.875, 78.75, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 6)
                {
                    this.drawUnit(oldverse, 2635, 1, 73, 63, -49.25, -69, 91.875, 78.75, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "freydicGreatSword")
            {
                this.damageFrame = "automatic";
                if (theCostume <= 0)
                {
                    this.drawUnit(oldverse, 2205, 203, 89, 88, -7, -80, 106.8, 105.6, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(oldverse, 2305, 203, 89, 88, -6, -83.5, 106.8, 105.6, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(oldverse, 2405, 203, 89, 88, -8, -85.5, 106.8, 105.6, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(oldverse, 2505, 203, 89, 88, -13.5, -87, 106.8, 105.6, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(oldverse, 2605, 203, 89, 88, -21, -90, 106.8, 105.6, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(oldverse, 2678, 203, 89, 88, -49, -93, 106.8, 105.6, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 6)
                {
                    this.drawUnit(oldverse, 2750, 203, 89, 88, -55, -92.5, 106.8, 105.6, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 7)
                {
                    this.drawUnit(oldverse, 2830, 203, 89, 88, -65, -90, 106.8, 105.6, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "timberAxe")
            {
                this.damageFrame = "automatic";
                if (theCostume <= 0)
                {
                    this.drawUnit(verse, 334, 332, 54, 49, -60.25, -42, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(verse, 390, 328, 54, 49, -56.25, -47, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(verse, 453, 330, 54, 49, -44.25, -60, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(verse, 516, 330, 54, 49, -35, -60, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(verse, 576, 332, 54, 49, -30, -56, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(verse, 634, 332, 54, 49, -25, -49, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 6)
                {
                    this.drawUnit(verse, 680, 332, 54, 49, -16, -43, 54 * 1.4, 49 * 1.4, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "longSpikedMorningStar")
            {
                this.damageFrame = "automatic";
                if (theCostume <= 0)
                {
                    this.drawUnit(poly, 207, 143, 55, 58, -34, -39, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(poly, 260, 145, 55, 58, -30, -42, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(poly, 307, 147, 55, 58, -31, -40, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(poly, 356, 147, 55, 58, -33, -39, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(poly, 400, 142, 55, 58, -30, -47, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(poly, 452, 141, 55, 58, -31, -51, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 6)
                {
                    this.drawUnit(poly, 452, 141, 55, 58, -31, -51, 55 * 1.15, 58 * 1.15, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "rasper")
            {
                this.damageFrame = "automatic";
                if (theCostume <= 0)
                {
                    this.drawUnit(freeverse, 683, 43, 55, 51, -47, -49, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(freeverse, 755, 37, 55, 51, -39, -55, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(freeverse, 834, 38, 55, 51, -36, -54, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(freeverse, 903, 35, 55, 51, -30, -54.5, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 4)
                {
                    this.drawUnit(freeverse, 928, 346, 55, 51, -27, -54, 55 * 1.3, 51 * 1.3, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "warHammer")
            {
                this.damageFrame = "automatic";
                if (theCostume <= 0)
                {
                    this.drawUnit(polypol, 32, 605, 93, 87, -21, -43, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(polypol, 169, 605, 93, 87, -21, -43, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(polypol, 304, 605, 93, 87, -22, -45, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(polypol, 443, 605, 93, 87, -29, -46, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(polypol, 589, 599, 93, 87, -32, -50, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(polypol, 720, 590, 93, 87, -36, -53, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 6)
                {
                    this.drawUnit(polypol, 836, 594, 93, 87, -46, -50, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 7)
                {
                    this.drawUnit(polypol, 958, 593, 93, 87, -49, -47.5, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 8)
                {
                    this.drawUnit(polypol, 1083, 591, 93, 87, -51.5, -45, 93 / 1.3, 87 / 1.3, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "kellishClaymore")
            {
                this.damageFrame = "automatic";
                if (theCostume <= 0)
                {
                    this.drawUnit(polypol, 491, 830, 135, 135, -50, -90, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(polypol, 654, 827, 135, 135, -50, -93, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(polypol, 870, 837, 135, 135, -46, -85, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.drawUnit(polypol, 1100, 838, 135, 135, -44, -80, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    this.drawUnit(polypol, 1386, 832, 135, 135, -14, -81, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(polypol, 1652, 828, 135, 135, -10, -79, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 6)
                {
                    this.drawUnit(polypol, 513, 993, 135, 135, -15, -82, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 7)
                {
                    this.drawUnit(polypol, 673, 990, 135, 135, -21, -83, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 8)
                {
                    this.drawUnit(polypol, 892, 981, 135, 135, -17, -93, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 9)
                {
                    this.drawUnit(polypol, 1106, 971, 135, 135, -18, -113, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 10)
                {
                    this.drawUnit(polypol, 1333, 963, 135, 135, -59, -124, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 11)
                {
                    this.drawUnit(polypol, 1611, 961, 135, 135, -74, -124, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 12)
                {
                    this.drawUnit(polypol, 503, 1162, 135, 135, -75, -117, 135, 135, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 13)
                {
                    this.drawUnit(polypol, 680, 1158, 135, 135, -88, -112, 135, 135, 1 / 2 * Math.PI);
                }
            }
            else if (this.weapon == "flail")
            {
                this.damageFrame = "manual";
                if (theCostume <= 0) //11 frames
                {
                    this.drawUnit(oldverse, 2194, 128, 66, 72, -42, -102, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 1)
                {
                    this.drawUnit(oldverse, 2253, 128, 66, 72, -47.5, -103, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 2)
                {
                    this.drawUnit(oldverse, 2313, 128, 66, 72, -41.75, -103, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 3)
                {
                    this.doAttackThisFrame = true;
                    this.drawUnit(oldverse, 2373, 128, 66, 72, -46.5, -102, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 4)
                {
                    //this is the frame that should do the damage.
                    if (this.doAttackThisFrame)
                    {
                        this.doAttackThisFrame = false;
                        this.finalAttackCostume = true;
                    }
                    this.drawUnit(oldverse, 2430, 128, 66, 72, -62, -104.5, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 5)
                {
                    this.drawUnit(oldverse, 2489, 128, 66, 72, -57.5, -105, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 6)
                {
                    this.drawUnit(oldverse, 2539, 128, 66, 72, -59.25, -103, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 7)
                {
                    this.drawUnit(oldverse, 2588, 128, 66, 72, -61.5, -104.5, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 8)
                {
                    this.drawUnit(oldverse, 2639, 128, 66, 72, -58, -104, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume <= 9)
                {
                    this.drawUnit(oldverse, 2689, 128, 66, 72, -62, -104, 99, 108, 1 / 2 * Math.PI);
                }
                else if (theCostume >= 10)
                {
                    this.drawUnit(oldverse, 2744, 128, 66, 72, -51.5, -105, 99, 108, 1 / 2 * Math.PI);
                }
            }
        };

        this.switchToRanged = function(weapon)
        {
            if (this.disturbed == true)
            {
                var dtp = this.DTP();
                if (this.engagementRadius < dtp)
                {
                    this.weapon = weapon;
                    this.ranged = true;
                    this.attacking = true;
                }
                else
                {
                    this.weapon = this.ultra.weapon[0];
                    this.ranged = false;
                }
            }
            else
            {
                this.attacking = false;
            }
        };

        //Basic Functionality

        this.disturbedTimer = function()
        {
            if (new Date().getTime() - this.disturbedTime < 20000 + (this.grudge * 1000))
            {
                this.disturbed = true;
            }
            else
            {
                if (this.type != "Soldier")
                {
                    this.disturbed = false;
                }
            }
        };
        //death checker -- checks to see if they should be dead.
        this.deathChecker = function()
        {
            if (this.health <= 0)
            {
                this.alive = false;

                this.attacking = false;
                this.moving = false;
                this.playerSeen = false;
                this.disturbedTime = 0;
                this.disturbed = false;
                this.extraRangeTime = 0;
                this.extraRange = 0;

                if (this.wasAlive == true)
                {
                    this.wasAlive = false;
                    this.timeSinceDead = new Date().getTime();

                    //loot and experience
                    if (player.spell == "none")
                    {
                        player.experience += this.experience;
                    }

                    if (this.revived != true)
                    {
                        for (var i = 0; i < this.drops.length; i++)
                        {
                            worldItems.push([this.drops[i][0], this.drops[i][1]]);
                        }
                    }
                    else
                    {
                        worldItems.push([new Item("nechromanticDust", this.X, this.Y), 1 + Math.floor(this.healthMAX / 35)]);
                    }

                    if (this.beastEntry != "none")
                    {
                        if (player.getIntelligence() >= this.beastEntry.intReq)
                        {
                            var addEntry = true;
                            for (var i = 0; i < beastJournal.length; i++)
                            {
                                if (this.beastEntry.name == beastJournal[i].name && this.beastEntry.alpha == beastJournal[i].alpha)
                                {
                                    addEntry = false;
                                    break;
                                }
                            }

                            if (addEntry)
                            {
                                beastJournal.push(this.beastEntry);
                            }
                        }
                    }

                    //transference into the list of the dead...
                    var me = ArtificialIntelligenceAccess.indexOf(this);
                    deadAIList.push(this);
                    ArtificialIntelligenceAccess.splice(me, 1);
                }
            }
        };

        //draw X and Y point.
        this.testForCenter = function()
        {
            XXX.beginPath();
            XXX.fillStyle="gold";
            XXX.arc(X - this.X + (CCC.width / 2) , Y - this.Y + (CCC.height / 2), 4, 0, 2 * Math.PI);
            XXX.fill();
        };
        //this draws a circle that represents the size of the AI Unit
        this.testForSize = function()
        {
            XXX.beginPath();
            XXX.strokeStyle ="rgba(255, 255, 255, 0)";
            XXX.fillStyle="rgba(255, 255, 255, 0.4)";
            XXX.arc(X - this.X + (CCC.width / 2) , Y - this.Y + (CCC.height / 2), this.sizeRadius, 0, 2 * Math.PI);
            XXX.fill();
        };

        //if damaged a mini health bar will be displayed.
        this.showHealthWhenHurt = function()
        {
            if (this.health < this.healthMAX && (new Date().getTime() - this.healthShownTime) < 5000)
            {
                XXX.beginPath();
                XXX.fillStyle ="red";
                XXX.fillRect(X - this.X + (CCC.width / 2), Y - this.Y + (CCC.height / 2), 12, 3);
                if (this.health >= 0)
                {
                    XXX.beginPath();
                    XXX.fillStyle ="lightGreen";
                    XXX.fillRect(X - this.X + (CCC.width / 2), Y - this.Y + (CCC.height / 2), (12 * this.health / this.healthMAX), 3);
                }
            }
        };

        //finds the unit nearest this unit and its distance and sets them to class accessible variables.
        this.findNearestUnit = function()
        {
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                var distanceToOther = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X) * (ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y) * (ArtificialIntelligenceAccess[i].Y - this.Y)); // this is the distance formula and in this line it is being used to find the distance each Unit is away from this one...
                if (this.closestDistance == null && ArtificialIntelligenceAccess[i] != this) // if the process is just starting there will not have been a closest yet to compare with so it is set to the first unit in the list.
                {
                    this.closestDistance = distanceToOther;
                    this.closestUnit = ArtificialIntelligenceAccess[i];
                }
                else if (distanceToOther < this.closestDistance && ArtificialIntelligenceAccess[i] != this) //this compares the distance of the unit that is being focused on with that of the one stored in the variable closest. Only the one with the least distance from this Unit can hold the title closest.
                {
                    this.closestDistance = distanceToOther;
                    this.closestUnit = ArtificialIntelligenceAccess[i];
                }
            }
        };

        //This function finds all nearby units within a certain range and puts them in a given list. This is a function called by other functions.
        this.findNearbyUnitTypeGroup = function(range, type, list)
        {

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                var distanceToOther = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X) * (ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y) * (ArtificialIntelligenceAccess[i].Y - this.Y)); // this is the distance formula and in this line it is being used to find the distance each Unit is away from this one...

                if (ArtificialIntelligenceAccess[i] !== this && ArtificialIntelligenceAccess[i].type == type && distanceToOther <= range)
                {
                    list.push(ArtificialIntelligenceAccess[i]);
                }
            }
        };

        // find the difference between two angles, and the sign of the difference
        this.angleDelta = function(start, end)
        {
            var delta = end - start;

            if (delta > Math.PI)
            {
                delta = delta - (Math.PI * 2)
            }
            else if (delta < - Math.PI)
            {
                delta = delta + (Math.PI * 2)
            }

            return delta;
        };

            // turns to the rotation that the unit would like to be at.
        this.turnToDestination = function()
        {
            var quickestRotation = this.angleDelta(this.rotation, this.newRotation); //This is a number that represents the quickest rotation possible.
            if (Math.abs(quickestRotation) > this.rotationSpeed)
            {
                if (quickestRotation < 0 - this.rotationSpeed) // if the rotation would bring the unit to a rotation that is less than zero then
                {
                    this.rotation -= this.rotationSpeed;
                }
                else if (quickestRotation >= 0 + this.rotationSpeed)
                {
                    this.rotation += this.rotationSpeed;
                }
            }
        };

        //BUILD-LAB [this section is where the individualized ai unit skeletons will start to form up a bit.
            //this is a quick draw self function to make things a lot easier...
        this.drawUnit = function(img, cutX, cutY, width, length, positionX, positionY, skewW, skewL, extraRotation)
        {
            //DRAW SELF
            XXX.save();
            // translate to...
            //  X - this.X   >>>  gives you screen coordinates with (0,0) at center of canvas
            //    + canvasWidth/2  >>> gives you screen coordinates relative to top left of canvas
            // ... but ...  that is a point, and you want to center your images, so ...
            //    you will want to subtract half the image's width // I do this externally through positionX and PositionY
            //
            // and do the same thing for Y of course
            var extraRot;
            if (extraRotation != undefined)
            {
                extraRot = extraRotation;
            }
            else
            {
                extraRot = 0;
            }

            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(this.rotation + extraRot);
            XXX.beginPath();
            XXX.drawImage(img, cutX, cutY, width, length, positionX, positionY , skewW, skewL);
            XXX.restore();
        };

        this.drawHuman = function()
        {
            XXX.save();
            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
            XXX.rotate(this.rotation);
            XXX.beginPath();
            if (this.ultra.race == "Freynor")
            {
                XXX.fillStyle = "navy";
            }
            else if (this.ultra.race == "Orgell")
            {
                XXX.fillStyle = "gold";
            }
            else if (this.ultra.race == "Vardan")
            {
                XXX.fillStyle = "#1c1c1c";
            }
            else if (this.ultra.race == "Thengar")
            {
                XXX.fillStyle = "#663300";
            }
            else if (this.ultra.race == "Nirwaden")
            {
                XXX.fillStyle = "#e68900";
            }
            else if (this.ultra.race == "Kel")
            {
                XXX.fillStyle = "green";
            }
            else if (this.ultra.race == "Aldrek")
            {
                XXX.fillStyle = "darkRed";
            }
            else if (this.ultra.race == "Cephrite")
            {
                XXX.fillStyle = "purple";
            }
            else if (this.ultra.race == "Outlander")
            {
                XXX.fillStyle = "white";
            }
            else
            {
                //Faelan fairy Princess is the default.
                XXX.fillStyle = "pink";
            }

            XXX.arc(0, 0, 10, 0, 2 * Math.PI);
            XXX.fill();
            XXX.strokeStyle = "black";
            XXX.lineWidth = 0.5;
            XXX.stroke();
            XXX.restore();
        };

        this.drawHumanOutfit = function(outfit, dead)
        {
            //Unit Worn Outfits
            if (dead != true)
            {
                XXX.save();
                if (outfit == "chainArmour")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation + 1/2 * Math.PI);
                    XXX.drawImage(verse, 1915, 1, 31, 27, -(1 / 2 * 26) - 1.3, -(1 / 2 * 27) + 1.5, 27, 27);
                }
                else if (outfit == "walrusLeatherArmour")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 804, 262, 35, 24, -(1 / 2 * 45.5) + 8, -(1 / 2 * 31.2) + 1.25, 42, 28.8);
                }
                else if (outfit == "winterWolfClothing")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation + 1/2 * Math.PI);
                    XXX.drawImage(verse, 3185, 165, 33, 28, -(1 / 2 * 26.4) + 0, -(1 / 2 * 22.4) - 0.75, 29.7, 25.2);
                }
                else if (outfit == "hetmerArmour")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polyPNG, 792, 308, 52, 48, -(1 / 2 * 62.4) + 0, -(1 / 2 * 57.6) - 2.5, 67.6, 62.4);
                }
                else if (outfit == "frichFurClothing")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation + 1/2 * Math.PI);
                    XXX.drawImage(verse, 2106, 5, 29, 24, -(1 / 2 * 29) + 1.75, -(1 / 2 * 24) - 0, 26, 26);
                }
                else if (outfit == "naapridLeatherArmour")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation + 1/2 * Math.PI);
                    XXX.drawImage(verse, 3062, 1, 35, 22, -(1 / 2 * 49) + 0.5, -(1 / 2 * 30.8) + 2.25, 49, 30.8);
                }
                else if (outfit == "balgurMercArmour")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation - 1/2 * Math.PI);
                    XXX.drawImage(poly, 48, 106, 40, 32, -(1 / 2 * 40 * 1.2) - 3.65, -(1 / 2 * 32 * 1.2) -18.25, 40 * 1.38, 32 * 1.73);
                }
                else if (outfit == "balgurCaptainArmour")
                {
                    XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                    XXX.rotate(this.rotation - 1/2 * Math.PI);
                    XXX.drawImage(poly, 50, 140, 36, 36, -(1 / 2 * 36 * 1.2) + 5, -(1 / 2 * 36 * 1.2) -9.5, 36 * 0.9, 36 * 1.45);
                }
                XXX.restore();
            }
        };

            //This sets each unique unit's skills based on their type, for both normal and alpha, also it is where positioning for alphas or units who differ from the normal size will be.
        this.designUnits = function() //this includes all of the non-variable unit design as well as drops.
        {
            if (this.type == "Etyr")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = 1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0; //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 6) + 6;
                    this.health = this.healthMAX;
                    this.armour = 3;
                    this.speed = 2.75;
                    this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.025; // 0.01 is a standard turn speed.
                    this.engagementRadius = 39;
                    this.sizeRadius = 30;
                    this.negateArmour = 5;
                    this.attackWait = 0.55;
                    this.beastEntry = {intReq: 3, name: "Etyr", health: "6 - 11", armour: "3", damage: "1 - 7", negate: "5", ability: "none", fireProof: 1, habitat: "Jungle", sight: 600, alpha: "Alpha", magicProof: 0, size: 30, speed: 2.75, rotation: 0.025, rate: 0.55, experience: 40, description: ["Etyr's are scaley reptilian creatures that have a behavior similar to that of a wolf. They hunt in packs, it is very", "rare to find one alone, and if you do the rest of its pack is probably about to ambush you. They", "usually lurk about the forest floor eating whatever small critters they can get their jaws around."], image: [theCrack, 56, 18, 53, 41, 0, 0, 53 * 1.5 / 3, 41 * 1.5 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 10;
                    this.xAdjustment = 13; // was 0
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 3) + 3;
                    this.health = this.healthMAX;
                    this.armour = 1;
                    this.speed = 2;
                    this.rangeOfSight = 450; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 29;
                    this.sizeRadius = 20;
                    this.negateArmour = 3;
                    this.attackWait = 0.57;
                    this.beastEntry = {intReq: 1, name: "Etyr", health: "3 - 5", armour: "1", damage: "1 - 4", negate: "3", ability: "none", fireProof: 1, habitat: "Jungle", sight: 450, alpha: "Normal", magicProof: 0, size: 20, speed: 2, rotation: 0.1, rate: 0.57, experience: 22, description: ["Etyr's are scaley reptilian creatures that have a behavior similar to that of a wolf. They hunt in packs, it is very", "rare to find one alone, and if you do the rest of its pack is probably about to ambush you. They", "usually lurk about the forest floor eating whatever small critters they can get their jaws around."], image: [theCrack, 56, 18, 53, 0, 0, 20, 53 / 3, 41 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;

                }
            }
            else if (this.type == "Walrus")
            {
                this.damageFrame = "automatic";
                this.resistances = ["frozen"];

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = 3;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 40) + 100;
                    this.health = this.healthMAX;
                    this.armour = 2;
                    this.speed = 1.1;
                    this.rangeOfSight = 330; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.035;
                    this.engagementRadius = 65; //was 55
                    this.sizeRadius = 45;
                    this.negateArmour = 17;
                    this.attackWait = 1.75;
                    this.beastEntry = {intReq: 13, name: "Walrus", health: "100 - 139", armour: "2", damage: "32 - 77", negate: "17", ability: "Cold Resistant", fireProof: 3, habitat: "Ice Flats", sight: 330, alpha: "Elder", magicProof: 0, size: 45, speed: 1.1, rotation: 0.035, rate: 1.75, experience: 104, description: ["It is said that elder walruses are just walruses that have lived for hundreds of years. They tend to be fairly solitary unlike", "the younger variety, except of course when they have to mate, then the male usually protects the female while it is pregnant."], image: [polyPNG, 871, 695, 77, 63, 0, 0, 146 * 1.35 / 3, 126 * 1.35 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.35; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 21;
                    this.xAdjustment = 39; // was 0
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 2;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 10) + 18;
                    this.health = this.healthMAX;
                    this.armour = 1;
                    this.speed = 0.85;
                    this.rangeOfSight = 250; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.025; // 0.01 is a standard turn speed.
                    this.engagementRadius = 59; //was 49
                    this.sizeRadius = 40;
                    this.negateArmour = 6;
                    this.attackWait = 3.25;
                    this.beastEntry = {intReq: 4, name: "Walrus", health: "18 - 27", armour: "1", damage: "2 - 14", negate: "6", ability: "Cold Resistant", fireProof: 2, habitat: "Ice Flats", sight: 250, alpha: "Normal", magicProof: 0, size: 40, speed: 0.85, rotation: 0.025, rate: 3.25, experience: 28, description: ["Walruses are large tusked animals with thick skin and a large blubber layer of fat to keep them warm in the harsh cold climate that they", "live in. They tend to group together so as to keep predators away by numbers, but it is not uncommon for one to be found alone."], image: [polyPNG, 871, 695, 77, 63, 0, 0, 146 / 3, 126 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;

                }
            }
            else if (this.type == "Shehid")
            {
                this.damageFrame = "automatic";
                this.awake = Math.round(Math.random());
                this.formChange = false; //this is for transforming from awake to asleep or sleep to awake... it signals that a change has been made so that an animation can play.
                this.resistances = ["stun"];

                if (this.alpha == true)
                {
                    this.magicalResistance = 5;
                    this.heatResistance = 1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 17) + 26;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 1.65;
                    this.rangeOfSight = 285; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.085;
                    this.engagementRadius = 37;
                    this.sizeRadius = 25;
                    this.negateArmour = 10;
                    this.attackWait = 2;
                    this.effect = "stunII";
                    this.beastEntry = {intReq: 20, name: "Shehid", health: "26 - 42", armour: "0 - 56", damage: "6 - 20", negate: "10", ability: "StunII", fireProof: "1 - 56", habitat: "Northern / Temperate Forests", sight: "65 - 285", alpha: "Alpha", magicProof: 5, size: 25, speed: 1.65, rotation: 0.085, rate: 2, experience: 77, description: ["Shehids are a form of living ooze creature that has a biologically formed shell and insectoid legs. The shehid's ooze is highly toxic to the", "extent of paralasis and it is used to melt and absorb its prey. Shehids normally rest in their shell which is colored to look like a mossy", "rock so that they can ooze out and devour unsuspecting creatures that happen to wander by."], image: [polypol, 1170, 11, 43, 40, 0, 0, 43 * 2 / 3, 40 * 2 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 22;
                    this.xAdjustment = 20; // was 0
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 2;
                    this.heatResistance = 1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 9) + 12;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 1.35;
                    this.rangeOfSight = 185; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.085; // 0.01 is a standard turn speed.
                    this.engagementRadius = 29; //was 49
                    this.sizeRadius = 14;
                    this.negateArmour = 10;
                    this.attackWait = 1.25;
                    this.effect = "stunI";
                    this.beastEntry = {intReq: 14, name: "Shehid", health: "12 - 20", armour: "0 - 30", damage: "3 - 10", negate: "10", ability: "StunI", fireProof: "1 - 30", habitat: "Northern / Temperate Forests", sight: "65 - 185", alpha: "Normal", magicProof: 2, size: 14, speed: 1.35, rotation: 0.085, rate: 1.25, experience: 38, description: ["Shehids are a form of living ooze creature that has a biologically formed shell and insectoid legs. The shehid's ooze is highly toxic to the", "extent of paralysis and it is used to melt and absorb its prey. Shehids normally rest in their shell which is colored to look like a mossy", "rock so that they can ooze out and devour unsuspecting creatures that happen to wander by."], image: [polypol, 1170, 11, 43, 40, 0, 0, 43 / 3, 40 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;

                }
            }
            else if (this.type == "Grush")
            {
                this.damageFrame = "automatic";
                this.awake = Math.round(Math.random());
                this.formChange = false; //this is for transforming from awake to asleep or sleep to awake... it signals that a change has been made so that an animation can play.

                if (this.alpha == "giant")
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 40) + 204;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.2;
                    this.rangeOfSight = 285; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.09;
                    this.engagementRadius = 84;
                    this.sizeRadius = 25;
                    this.negateArmour = 11;
                    this.attackWait = 0.6;
                    this.effect = "none";
                    this.beastEntry = {intReq: 30, name: "Grush", health: "204 - 243", armour: "0 - 75", damage: "10 - 18", negate: "11", ability: "none", fireProof: -1, habitat: "Grasslands", sight: "80 - 140", alpha: "Giant", magicProof: 0, size: 25, speed: 3.2, rotation: 0.09, rate: 0.6, experience: 1100, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resember the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have itself a feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near there", "resting place or they go back to sleep."], image: [mofu, 877, 1, 72, 72, 0, 0, 72 * 3 / 3, 72 * 3 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 3; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0; // was 0
                }
                else if (this.alpha == "baby")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 1) + 1;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 0.85;
                    this.rangeOfSight = 100; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 24;
                    this.sizeRadius = 8;
                    this.negateArmour = 0.1;
                    this.attackWait = 0.5;
                    this.effect = "none";
                    this.beastEntry = {intReq: 6, name: "Grush", health: "1", armour: "0 - 15", damage: "0.5 - 1", negate: 0.1, ability: "none", fireProof: -1, habitat: "Grasslands", sight: "45 - 60", alpha: "Baby", magicProof: 0, size: 8, speed: 0.85, rotation: 0.05, rate: 0.5, experience: 4, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resemble the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have itself a feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near their", "resting place or they go back to sleep."], image: [mofu, 877, 1, 72, 72, 0, 0, 72 * 0.6 / 3, 72 * 0.6 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 0.6; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0; // was 0
                }
                else if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 10) + 44;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 1.6;
                    this.rangeOfSight = 285; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.085;
                    this.engagementRadius = 47;
                    this.sizeRadius = 21;
                    this.negateArmour = 2.5;
                    this.attackWait = 0.6;
                    this.effect = "none";
                    this.beastEntry = {intReq: 16, name: "Grush", health: "44 - 53", armour: "0 - 55", damage: "3 - 9", negate: "2.5", ability: "none", fireProof: -1, habitat: "Grasslands", sight: "55 - 90", alpha: "Alpha", magicProof: 0, size: 21, speed: 1.6, rotation: 0.085, rate: 0.6, experience: 95, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resemble the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have a itself feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near their", "resting place or they go back to sleep."], image: [mofu, 877, 1, 72, 72, 0, 0, 72 * 1.5 / 3, 72 * 1.5 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.

                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 7) + 29;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 1;
                    this.rangeOfSight = 100; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 36; //was 49
                    this.sizeRadius = 14;
                    this.negateArmour = 1;
                    this.attackWait = 0.5;
                    this.effect = "none";
                    this.beastEntry = {intReq: 9, name: "Grush", health: "29 - 36", armour: "0 - 35", damage: "2 - 6", negate: 1, ability: "none", fireProof: -1, habitat: "Grasslands", sight: "45 - 60", alpha: "Normal", magicProof: 0, size: 14, speed: 1, rotation: 0.05, rate: 0.5, experience: 45, description: ["Grushes live in a protective shell that grows biological plantlike fibers from its pores that strongly resemble the plant grush weed that grushes", "usually live around. A grush will not leave its shell until its prey comes right next to it which is when it will poke its long sharp toothed", "jaw out and gnaw whatever it finds apart and then pull what it can of the mangled flesh back into its shell to have a itself feast. Grushes are", "incredily lazy and they will stop persuing a target almost as fast as they had started, either they succeed at eating it while it's near their", "resting place or they go back to sleep."], image: [mofu, 877, 1, 72, 72, 0, 0, 72 / 3, 72 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
            }
            else if (this.type == "Narthwarp")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = 1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 17) + 53;
                    this.health = this.healthMAX;
                    this.armour = 4.5;
                    this.speed = 2.75;
                    this.rangeOfSight = 550; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.09;
                    this.engagementRadius = 46;
                    this.sizeRadius = 25;
                    this.negateArmour = 1;
                    this.attackWait = 1.5;
                    this.effect = "narthwarpToxin";
                    this.beastEntry = {intReq: 28, name: "Narthwarp", health: "53 - 69", armour: 4.5, damage: "7 - 21", negate: 1, ability: "Narthwarp Toxin", fireProof: 1, habitat: "Northern / Temperate Forests", sight: 550, alpha: "Alpha", magicProof: 0, size: 25, speed: 2.75, rotation: 0.09, rate: 1.5, experience: 95, description: ["Narthwarps are large six-legged armoured insects that have a long barbed appendage that it uses as a tool for food absorption as well as to release", "its toxins into its prey. The toxins a narthwarp produces cause their victim to lose energy and if the injection was large enough they could", "even faint."], image: [polypol, 29, 400, 71, 81, 0, 0, 71 * 2 / 3, 81 * 2 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 45;
                    this.xAdjustment = 24; // was 0
                }
                else if (this.alpha == "baby")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 0.1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 3) + 3;
                    this.health = this.healthMAX;
                    this.armour = 0.5;
                    this.speed = 1.75;
                    this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 24;
                    this.sizeRadius = 10;
                    this.negateArmour = 0;
                    this.attackWait = 0.85;
                    this.effect = "narthwarpToxin";
                    this.beastEntry = {intReq: 4, name: "Narthwarp", health: "3 - 5", armour: 0.5, damage: "1 - 2", negate: 0, ability: "Narthwarp Toxin", fireProof: 0.1, habitat: "Northern / Temperate Forests", sight: 300, alpha: "Baby", magicProof: 0, size: 10, speed: 1.75, rotation: 0.1, rate: 0.85, experience: 4, description: ["Narthwarps are large six-legged armoured insects that have a long barbed appendage that it uses as a tool for food absorption as well as to release", "its toxins into its prey. The toxins a narthwarp produces cause their victim to lose energy and if the injection was large enough they could", "even faint."], image: [polypol, 29, 400, 71, 81, 0, 0, 71 * 0.5 / 3, 81 * 0.5 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 0.5;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -17;
                    this.xAdjustment = -25;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 0.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 10) + 16;
                    this.health = this.healthMAX;
                    this.armour = 1.5;
                    this.speed = 2.25;
                    this.rangeOfSight = 425; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.095; // 0.01 is a standard turn speed.
                    this.engagementRadius = 29;
                    this.sizeRadius = 14;
                    this.negateArmour = 0.5;
                    this.attackWait = 1.45;
                    this.effect = "narthwarpToxin";
                    this.beastEntry = {intReq: 8, name: "Narthwarp", health: "16 - 25", armour: 1.5, damage: "4 - 9", negate: 0.5, ability: "Narthwarp Toxin", fireProof: 0.5, habitat: "Northern / Temperate Forests", sight: 425, alpha: "Normal", magicProof: 0, size: 14, speed: 2.25, rotation: 0.095, rate: 1.45, experience: 36, description: ["Narthwarps are large six-legged armoured insects that have a long barbed appendage that it uses as a tool for food absorption as well as to release", "its toxins into its prey. The toxins a narthwarp produces cause their victim to lose energy and if the injection was large enough they could", "even faint."], image: [polypol, 29, 400, 71, 81, 0, 0, 71 / 3, 81 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 4;
                    this.xAdjustment = -7;
                }
            }
            else if (this.type == "Beruln")
            {
                this.damageFrame = "manual";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 26) + 36;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 6.1 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.075; // was 0.05
                    this.engagementRadius = 69;
                    this.sizeRadius = 50;
                    this.negateArmour = 10;
                    this.attackWait = 0.75;
                    this.beastEntry = {intReq: 13, name: "Beruln", health: "36 - 61", armour: 0, damage: "8 - 22", negate: 10, ability: "None", fireProof: -1, habitat: "Northern Rocky Barrens", sight: 900, alpha: "Alpha", magicProof: 0, size: 50, speed: "6.1 - 6.5", rotation: 0.075, rate: 0.75, experience: 93, description: ["Berulns are massive grey furred beasts that are known for their ferocity. They have an extra thick patch of fur that goes from the back of their", "head and widenes as it bristles back toward their tail end. Berulns are skilled hunters and they can be fairly silent while stalking prey and can", "also be exceptionally good climbers. Berulns are savage when it comes to eating, they will grasp their victim in their jaws and swing it around and", "smash it into the ground or large rocks before finally settling down to eat it. Alpha Berulns are slightly larger than the normal ones and they are a bit more agressive and perceptive to prey as well."], image: [polyPNG, 92, 599, 77, 54, 0, 0, 154 * 1.1 / 3, 108 * 1.1 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.1; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 5;
                    this.xAdjustment = 4;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 14) + 32;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 5.8 + (Math.floor(Math.random() * 3) / 10);
                    this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.075; // was 0.05
                    this.engagementRadius = 61;
                    this.sizeRadius = 42;
                    this.negateArmour = 9;
                    this.attackWait = 0.85;
                    this.beastEntry = {intReq: 11, name: "Beruln", health: "32 - 45", armour: 0, damage: "7 - 22", negate: 9, ability: "None", fireProof: -1, habitat: "Northern Rocky Barrens", sight: 850, alpha: "Normal", magicProof: 0, size: 42, speed: "5.8 - 6", rotation: 0.075, rate: 0.85, experience: 81, description: ["Berulns are massive grey furred beasts that are known for their ferocity. They have an extra thick patch of fur that goes from the back of their", "head and widenes as it bristles back toward their tail end. Berulns are skilled hunters and they can be fairly silent while stalking prey and can", "also be exceptionally good climbers. Berulns are savage when it comes to eating, they will grasp their victim in their jaws and swing it around and", "smash it into the ground or large rocks before finally settling down to eat it."], image: [polyPNG, 92, 599, 77, 54, 0, 0, 154 / 3, 108 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;

                }
            }
            else if (this.type == "Olkrin")
            {
                this.damageFrame = "manual";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = 0;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 101) + 500;
                    this.health = this.healthMAX;
                    this.armour = 9;
                    this.speed = 7.1 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 1100; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // was 0.05
                    this.engagementRadius = 69;
                    this.sizeRadius = 47;
                    this.negateArmour = 20;
                    this.attackWait = 3;
                    this.beastEntry = {intReq: 45, name: "Olkrin", health: "500 - 600", armour: 9, damage: "36 - 64", negate: 20, ability: "None", fireProof: 0, habitat: "Rocky Barrens", sight: 1100, alpha: "Goliath", magicProof: 0, size: 47, speed: "7.1 - 7.5", rotation: 0.1, rate: 3, experience: 1400, description: ["Olkrins are thought to be of only of myth and legend for the reason that they are not common to find, which is because they are humongous beasts with vast appetites that need to be filled and many places do not have the right ecosystem to support their species' size. Those who do recognize there existence often consider olkrins to be a type of demon, but in truth they are just an ancient species of abnormally huge ferocious monsters that may be on the verge of extinction."], image: [verse, 156, 706, 117, 157, 0, 0, 117 * 2.4 / 3, 157 * 2.4 / 3]};

                    //alpha has a larger size body and skills.
                    this.alphaSize = 2.40; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 55;
                    this.xAdjustment = 35;
                }
                else if (this.alpha == "baby")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 0;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 16) + 45;
                    this.health = this.healthMAX;
                    this.armour = 2.5;
                    this.speed = 5.1 + (Math.floor(Math.random() * 3) / 10);
                    this.rangeOfSight = 750; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 35;
                    this.sizeRadius = 24;
                    this.negateArmour = 10;
                    this.attackWait = 2;
                    this.beastEntry = {intReq: 35, name: "Olkrin", health: "45 - 60", armour: 2.5, damage: "12 - 20", negate: 10, ability: "None", fireProof: 0, habitat: "Rocky Barrens", sight: 750, alpha: "Baby", magicProof: 0, size: 24, speed: "5.1 - 5.3", rotation: 0.1, rate: 2, experience: 172, description: ["Olkrins are thought to be of only of myth and legend for the reason that they are not common to find, which is because they are humongous beasts with vast appetites that need to be filled and many places do not have the right ecosystem to support their species' size. Those who do recognize there existence often consider olkrins to be a type of demon, but in truth they are just an ancient species of abnormally huge ferocious monsters that may be on the verge of extinction."], image: [verse, 156, 706, 117, 157, 0, 0, 117 * 1.1 / 3, 157 * 1.1 / 3]};

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1.1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -50;
                    this.xAdjustment = -32;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 0;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 86) + 225;
                    this.health = this.healthMAX;
                    this.armour = 5;
                    this.speed = 6.8 + (Math.floor(Math.random() * 3) / 10);
                    this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // was 0.05
                    this.engagementRadius = 61;
                    this.sizeRadius = 42;
                    this.negateArmour = 14;
                    this.attackWait = 3;
                    this.beastEntry = {intReq: 40, name: "Olkrin", health: "225 - 310", armour: 5, damage: "24 - 40", negate: 14, ability: "None", fireProof: 0, habitat: "Rocky Barrens", sight: 900, alpha: "Normal", magicProof: 0, size: 42, speed: "6.8 - 7", rotation: 0.1, rate: 3, experience: 1000, description: ["Olkrins are thought to be of only of myth and legend for the reason that they are not common to find, which is because they are humongous beasts with vast appetites that need to be filled and many places do not have the right ecosystem to support their species' size. Those who do recognize there existence often consider olkrins to be a type of demon, but in truth they are just an ancient species of abnormally huge ferocious monsters that may be on the verge of extinction."], image: [verse, 156, 706, 117, 157, 0, 0, 117 * 1.75 / 3, 157 * 1.75 / 3]}; //booble : last entry so far

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1.75;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
            }
            else if (this.type == "BogTroll")
            {
                this.justAttacked = true;

                if (this.alpha == true)
                {
                    this.magicalResistance = 5;
                    this.heatResistance = 7;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 41) + 160;
                    this.health = this.healthMAX;
                    this.armour = 1;
                    this.speed = 5.2 + (Math.floor(Math.random() * 6) / 10);
                    this.keepSpeed = this.speed;
                    this.rangeOfSight = 1000; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.035; // was 0.05
                    this.engagementRadius = 91;
                    this.sizeRadius = 80;
                    this.negateArmour = 16;
                    this.attackWait = 4.2;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 52;
                    this.xAdjustment = 53;
                }
                else if (this.alpha == "baby")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 1.5;
                    this.heatResistance = 3;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 9) + 17;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.1 + (Math.floor(Math.random() * 7) / 10);
                    this.keepSpeed = this.speed;
                    this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.035; // was 0.05
                    this.engagementRadius = 61;
                    this.sizeRadius = 42;
                    this.negateArmour = 3;
                    this.attackWait = 3.2;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 0.65;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -19;
                    this.xAdjustment = -32;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 3;
                    this.heatResistance = 5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 36) + 80;
                    this.health = this.healthMAX;
                    this.armour = 1;
                    this.speed = 4.4 + (Math.floor(Math.random() * 7) / 10);
                    this.keepSpeed = this.speed;
                    this.rangeOfSight = 850; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.035; // was 0.05
                    this.engagementRadius = 61;
                    this.sizeRadius = 42;
                    this.negateArmour = 10;
                    this.attackWait = 3.2;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1.4;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 20;
                    this.xAdjustment = 17;
                }
            }
            else if (this.type == "WinterWolf")
            {
                this.damageFrame = "manual";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 26) + 30;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 5 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 665; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.085; // was 0.05
                    this.engagementRadius = 59;
                    this.sizeRadius = 35;
                    this.negateArmour = 3;
                    this.attackWait = 1.5;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 3.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -2;
                    this.xAdjustment = 4;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 9) + 9;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 4.7 + (Math.floor(Math.random() * 3) / 10);
                    this.rangeOfSight = 600; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.085; // was 0.05
                    this.engagementRadius = 35;
                    this.sizeRadius = 24;
                    this.negateArmour = 1;
                    this.attackWait = 1.5;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1.8;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -24;
                    this.xAdjustment = -33;

                }
            }
            else if (this.type == "Gulfrey")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = 4;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 19) + 13;
                    this.health = this.healthMAX;
                    this.armour = 8;
                    this.speed = 3 + (Math.floor(Math.random() * 3) / 10);
                    this.rangeOfSight = 490; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 42;
                    this.sizeRadius = 33;
                    this.negateArmour = 7;
                    this.attackWait = 0.5;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -15; //was - 10
                    this.xAdjustment = 26; //was 30
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 5) + 4;
                    this.health = this.healthMAX;
                    this.armour = 4;
                    this.speed = 2.8 + (Math.floor(Math.random() * 4) / 10);
                    this.rangeOfSight = 440; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 22;
                    this.sizeRadius = 13;
                    this.negateArmour = 4;
                    this.attackWait = 0.5;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 0.65;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -37; //was -34
                    this.xAdjustment = -26; //was - 26

                }
            }
            else if (this.type == "Neev")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 7;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 16) + 39;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.2 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 32;
                    this.sizeRadius = 16;
                    this.negateArmour = 1;
                    this.attackWait = 1;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.8; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 20;
                    this.xAdjustment = 6;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 5;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 7) + 11;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 2.4 + (Math.floor(Math.random() * 6) / 10);
                    this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 23;
                    this.sizeRadius = 13;
                    this.negateArmour = 0;
                    this.attackWait = 1;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 4; //was -34
                    this.xAdjustment = -11; //was - 26

                }
            }
            else if (this.type == "Frich")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 4) + 4;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 2.8 + (Math.floor(Math.random() * 4) / 10);
                    this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 42;
                    this.sizeRadius = 17;
                    this.negateArmour = 0;
                    this.attackWait = 0.55;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 3.5; //was - 10
                    this.xAdjustment = 6; //was 30
                }
                else if (this.alpha == "massive")
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 8) + 12;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.3 + (Math.floor(Math.random() * 3) / 10);
                    this.rangeOfSight = 525; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 49;
                    this.sizeRadius = 19;
                    this.negateArmour = 1;
                    this.attackWait = 0.80;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.6; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 5.5;
                    this.xAdjustment = 26;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 3) + 3;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 2.6 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 385; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 40;
                    this.sizeRadius = 15;
                    this.negateArmour = 0;
                    this.attackWait = 0.55;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0; //was -34
                    this.xAdjustment = 0; //was - 26

                }
            }
            else if (this.type == "Varn")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 5) + 10;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.2 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 525; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 41.5;
                    this.sizeRadius = 19;
                    this.negateArmour = 0;
                    this.attackWait = 0.5;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.45; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 1; //was - 3.5
                    this.xAdjustment = 6; //was 6
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 4) + 7;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 2.9 + (Math.floor(Math.random() * 6) / 10);
                    this.rangeOfSight = 450; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 38.5;
                    this.sizeRadius = 18;
                    this.negateArmour = 0;
                    this.attackWait = 0.5;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1.3;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0; //was -34
                    this.xAdjustment = 0; //was - 26

                }
            }
            else if (this.type == "Grib")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 5) + 16;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.9 + (Math.floor(Math.random() * 4) / 10);
                    this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 40;
                    this.sizeRadius = 19;
                    this.negateArmour = 0;
                    this.attackWait = 0.85;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.75; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 5; //was - 3.5
                    this.xAdjustment = 6; //was 6
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 6) + 8;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.3 + (Math.floor(Math.random() * 4) / 10);
                    this.rangeOfSight = 350; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 28;
                    this.sizeRadius = 15;
                    this.negateArmour = 0;
                    this.attackWait = 0.85;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1.3;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -2; //was -34
                    this.xAdjustment = 0; //was - 26

                }
            }
            else if (this.type == "BlackBear")
            {
                this.damageFrame = "automatic";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 11) + 32;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 2.2 + (Math.floor(Math.random() * 8) / 10);
                    this.rangeOfSight = 425; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 41.5;
                    this.sizeRadius = 20;
                    this.negateArmour = 3;
                    this.attackWait = 1.65;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.4; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 7; //was - 3.5
                    this.xAdjustment = 10; //was 6
                }
                else if (this.alpha == "giant")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 41) + 155;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 6.5 + (Math.floor(Math.random() * 6) / 10);
                    this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 78;
                    this.sizeRadius = 44;
                    this.negateArmour = 15;
                    this.attackWait = 3.5;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 3.35;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 45; //was -34
                    this.xAdjustment = 80; //was - 26

                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.attackStyle = "chunked";
                    this.heatResistance = -1;
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 11) + 20;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 2 + (Math.floor(Math.random() * 6) / 10);
                    this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 33;
                    this.sizeRadius = 15;
                    this.negateArmour = 1.5;
                    this.attackWait = 1.35;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0; //was -34
                    this.xAdjustment = 0; //was - 26

                }
            }
            else if (this.type == "Viper")
            {
                this.damageFrame = "automatic";
                this.effect = "poisonII";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = 0.1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 11) + 16;
                    this.health = this.healthMAX;
                    this.armour = 1;
                    this.speed = 3.8 + (Math.floor(Math.random() * 6) / 10);
                    this.rangeOfSight = 425; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 31.5;
                    this.sizeRadius = 18;
                    this.negateArmour = 4;
                    this.attackWait = 1.65;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 20;
                    this.xAdjustment = 56;
                }
                else if (this.alpha == "giant")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = 0.25;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 25) + 64;
                    this.health = this.healthMAX;
                    this.armour = 6;
                    this.speed = 5.5 + (Math.floor(Math.random() * 6) / 10);
                    this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05;
                    this.engagementRadius = 40;
                    this.sizeRadius = 30;
                    this.negateArmour = 19;
                    this.attackWait = 2.4;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 3.4;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 50;
                    this.xAdjustment = 120;

                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.attackStyle = "chunked";
                    this.heatResistance = 0;
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random()) + 3;
                    this.health = this.healthMAX;
                    this.armour = 0.2;
                    this.speed = 2.7 + (Math.floor(Math.random() * 6) / 10);
                    this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1;
                    this.engagementRadius = 33;
                    this.sizeRadius = 15;
                    this.negateArmour = 3;
                    this.attackWait = 1.2;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;

                }
            }
            else if (this.type == "Naaprid")
            {
                this.damageFrame = "manual";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -2;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 8) + 9;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.8 + (Math.floor(Math.random() * 4) / 10);
                    this.rangeOfSight = 385; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 59;
                    this.sizeRadius = 35;
                    this.negateArmour = 2;
                    this.attackWait = 2.5;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 2.15; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 10; //was - 10
                    this.xAdjustment = 11; //was 30
                }
                else if (this.alpha == "baby")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 3) + 3;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.1 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 300; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 38;
                    this.sizeRadius = 17;
                    this.negateArmour = 2;
                    this.attackWait = 2.5;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = -13.5; //was -34
                    this.xAdjustment = -26; //was - 26
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -2;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 8) + 5;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 3.6 + (Math.floor(Math.random() * 5) / 10);
                    this.rangeOfSight = 350; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.1; // 0.01 is a standard turn speed.
                    this.engagementRadius = 47;
                    this.sizeRadius = 25;
                    this.negateArmour = 2;
                    this.attackWait = 2.5;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1.75;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0; //was -34
                    this.xAdjustment = 0; //was - 26
                }
            }
            else if (this.type == "Mofu") //moe-foo
            {
                this.damageFrame = "manual";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -0.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = 7 + Math.round(Math.random());
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 1.35;
                    this.rangeOfSight = 900; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 24;
                    this.sizeRadius = 18;
                    this.negateArmour = 0;
                    this.attackWait = 2.5;

                    //alpha has a larger size body and skills.
                    this.alphaSize = 2; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
                else if (this.alpha == "baby")
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -0.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = 1;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 0.8;
                    this.rangeOfSight = 400; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 6;
                    this.sizeRadius = 4.5;
                    this.negateArmour = 0;
                    this.attackWait = 3.5;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 0.5;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -0.5;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = 4;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 1;
                    this.rangeOfSight = 800; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = 0.05; // 0.01 is a standard turn speed.
                    this.engagementRadius = 12;
                    this.sizeRadius = 9;
                    this.negateArmour = 0;
                    this.attackWait = 3;

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;
                }
            }
            else if (this.type == "Torper")
            {
                this.damageFrame = "automatic";
                this.effect = "poisonIII";

                if (this.alpha == true)
                {
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 10) + 9;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 5.5 + (Math.floor(Math.random() * 8) / 10);
                    this.rangeOfSight = 675; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = Math.PI / 10; // 0.01 is a standard turn speed.
                    this.engagementRadius = 36;
                    this.sizeRadius = 16;
                    this.negateArmour = 7;
                    this.attackWait = 0.7 + (Math.floor(Math.random() * 5) / 10);

                    //alpha has a larger size body and skills.
                    this.alphaSize = 1.5; //this multiplies the draw image skew numbers by 1.5 so that this unit is 1.5 times as large as the original.
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 18; //was - 10
                    this.xAdjustment = 24; //was 30
                }
                else
                {
                    //STATS (non-variable)
                    this.magicalResistance = 0;
                    this.heatResistance = -1;
                    this.attackStyle = "chunked";
                    this.attackRate = 0;  //this is for rapid style combat only.
                    this.healthMAX = Math.floor(Math.random() * 7) + 7;
                    this.health = this.healthMAX;
                    this.armour = 0;
                    this.speed = 5 + (Math.floor(Math.random() * 8) / 10);
                    this.rangeOfSight = 550; //This is just to set the variable initially. The rest is variable.
                    this.rotationSpeed = Math.PI / 10; // 0.01 is a standard turn speed.
                    this.engagementRadius = 30;
                    this.sizeRadius = 12;
                    this.negateArmour = 4;
                    this.attackWait = 0.7 + (Math.floor(Math.random() * 5) / 10);

                    //this multiplies the draw image skew numbers by 1 so that it stays the same
                    this.alphaSize = 1;
                    // this is the adjustment the alpha type of Etyr needs to be centered.
                    this.yAdjustment = 0;
                    this.xAdjustment = 0;

                }
            }
            else if (this.type == "Person")
            {
                this.damageFrame = "automatic";
                this.customEXP = false;

                //Personality effected STATS
                if (this.ultra.personality == "scared")
                {
                    this.grudge = 40;
                }
                else if (this.ultra.personality == "violent")
                {
                    this.grudge = 20;
                }
                else if (this.ultra.personality == "calculated")
                {
                    this.grudge = 10;
                }

                //STATS (non-variable)
                this.ranged = this.ultra.ranged[0];
                this.outfit = this.ultra.outfit[0];
                this.weapon = this.ultra.weapon[0];
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = (Math.floor(Math.random() * 4) * 4) + 0.1;
                this.health = this.healthMAX;
                this.armour = this.ultra.outfit[1];
                this.speed = 0.65 + (Math.floor(Math.random() * 12) / 10);
                this.rangeOfSight = 500; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.15; // 0.01 is a standard turn speed.
                this.engagementRadius = 30 + this.ultra.weapon[3];
                this.sizeRadius = 10;
                this.negateArmour = this.ultra.weapon[2];
                this.attackWait = this.ultra.weapon[4];

                //this multiplies the draw image skew numbers by 1 so that it stays the same
                this.alphaSize = 1;
                // this is the adjustment the alpha type of Etyr needs to be centered.
                this.yAdjustment = 0;
                this.xAdjustment = 0;

            }
            else if (this.type == "Soldier")
            {
                this.damageFrame = "automatic";

                //STATS (non-variable)
                this.ranged = this.ultra.ranged[0];
                this.con = this.ultra.con;
                this.outfit = this.ultra.outfit[0];
                this.weapon = this.ultra.weapon[0];
                this.magicalResistance = 0;
                this.heatResistance = 0;
                this.attackStyle = "chunked";
                this.attackRate = 0;  //this is for rapid style combat only.
                this.healthMAX = this.con * 4 + 0.1;
                this.health = this.healthMAX;
                this.armour = this.ultra.outfit[1];
                this.speed = this.ultra.speed;
                this.rangeOfSight = 650; //This is just to set the variable initially. The rest is variable.
                this.rotationSpeed = 0.15; // 0.01 is a standard turn speed.
                this.engagementRadius = 30 + this.ultra.weapon[3];
                this.sizeRadius = 10;
                this.negateArmour = this.ultra.weapon[2];
                this.attackWait = this.ultra.weapon[4];
            }
        };
        this.designUnits();

            //This makes the AI draw themselves to the world and alters the AI's variable STATS and also runs all of the AI functions.
        this.activateUnits = function()
        {
            var self = this;
            this.costumeEngine = function(maxcostume, framerate, bothwaysBool)
            {
                if (this.resetFrameOrder == true)
                {
                    this.frameOrder = "positive"; // this sets the animation frame cycling direction to positive when the attack is initialized.
                    this.resetFrameOrder = false; // this keeps the reset from messing up reverse swings that may come after the primary positive direction attack.
                }
                if (this.frameOrder == "positive")
                {
                    self.costume += framerate * TTD / (16.75 - 0.1 * self.speed); //This is the part that actually changes the frame in the positive direction.
                    if (self.costume >= maxcostume)
                    {
                        self.costume = maxcostume - 0.001;

                        if (this.attacking && this.damageFrame == "automatic")
                        {
                            this.finalAttackCostume = true;
                        }

                        if (bothwaysBool == false) // if the animation is one way it ends here...
                        {
                            self.costume = 0;
                            if (this.attacking)
                            {
                                this.timeBetweenAttacks = new Date().getTime();
                            }
                        }
                        else if (bothwaysBool == true) //but if it is two directional it swings back to frame zero.
                        {
                            this.frameOrder = "negative";
                        }
                    }
                }

                if (this.frameOrder == "negative") //This stuff is for the swing back.
                {
                    self.costume -= framerate * TTD / (16.75 - 0.1 * self.speed); //This is the part that actually changes the frame in the positive direction.
                    if (self.costume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.timeBetweenAttacks = new Date().getTime();
                        }
                        self.costume = 0 + 0.001;
                        this.resetFrameOrder = true; //This variable resets the order of the frames so that it always starts cycling through the animations in the positive direction.
                    }
                }
            };

            //UNITS BY TYPE (this includes all of the variable unit design as well as animations and AI)
                //ETYR
            if (this.type == "Etyr")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 40 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (40 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("etyrHide", this.X, this.Y), 2], [new Item("rawEtyrFlesh", this.X, this.Y), 2]];
                }
                else
                {
                    if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 22 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (22 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("etyrHide", this.X, this.Y), 1], [new Item("rawEtyrFlesh", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(600, "very");
                }
                else
                {
                    this.rangeOfSightCalculator(450, "very");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(6, 1);
                    }
                    else
                    {
                        this.Attack(3, 1);
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.callForNearbyHelpFromType(350, "Etyr");
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();
                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(2, 0.1, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(2, 0.07, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(theCrack, 282, 18, 53, 41, -25 - this.xAdjustment, -19 - this.yAdjustment, 53 * this.alphaSize, 41 * this.alphaSize);
                            //this.drawUnit(theCrack, 131, 18, 53, 41, -26 - this.xAdjustment, -20 - this.yAdjustment, 53 * this.alphaSize, 41 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(theCrack, 56, 18, 53, 41, -26 - this.xAdjustment, -20 - this.yAdjustment, 53 * this.alphaSize, 41 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(theCrack, 205, 18, 53, 41, -27 - this.xAdjustment, -19 - this.yAdjustment, 53 * this.alphaSize, 41 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(theCrack, 131, 18, 53, 41, -26 - this.xAdjustment, -19 - this.yAdjustment, 53 * this.alphaSize, 41 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(theCrack, 360, 18, 53, 41, -25 - this.xAdjustment, -19 - this.yAdjustment, 53 * this.alphaSize, 41 * this.alphaSize);
                }

            }
            //WALRUS
            if (this.type == "Walrus")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 60 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 104 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        (this.experience = 104 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("elderWalrusHide", this.X, this.Y), 1], [new Item("rawWalrusFlesh", this.X, this.Y), 4], [new Item("blubber", this.X, this.Y), 2], [new Item("elderWalrusTusks", this.X, this.Y), 1]];
                }
                else
                {
                    if (Math.max(0, 14 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 28 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        (this.experience = 28 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("walrusHide", this.X, this.Y), 1], [new Item("rawWalrusFlesh", this.X, this.Y), 2], [new Item("blubber", this.X, this.Y), 1], [new Item("walrusTusks", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(330, "very");
                }
                else
                {
                    this.rangeOfSightCalculator(250, "very");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(45, 32);
                        this.callForNearbyHelpFromType(160, "Walrus");
                    }
                    else
                    {
                        this.Attack(12, 2);
                        this.callForNearbyHelpFromType(100, "Walrus");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(2, 0.05, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(2, 0.03, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polyPNG, 871, 695, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polyPNG, 871, 695, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polyPNG, 798, 643, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polyPNG, 713, 687, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(polyPNG, 676, 624, 77, 63, -91 - this.xAdjustment, -64 - this.yAdjustment, 146 * this.alphaSize, 126 * this.alphaSize);
                }
            }
            //FRICH
            if (this.type == "Frich")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 15 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (15 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("frichPelt", this.X, this.Y), 1], [new Item("rawFrichFlesh", this.X, this.Y), 1]];
                }
                else if (this.alpha == "massive")
                {
                    if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 33 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (33 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("frichPelt", this.X, this.Y), 4], [new Item("rawFrichFlesh", this.X, this.Y), 4]];
                }
                else
                {
                    if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 11 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 11 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    this.drops = [[new Item("frichPelt", this.X, this.Y), 1], [new Item("rawFrichFlesh", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(431, "mildly");
                }
                else if (this.alpha == "massive")
                {
                    this.rangeOfSightCalculator(525, "mildly");
                }
                else
                {
                    this.rangeOfSightCalculator(400, "mildy");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(3, 1);
                        this.callForNearbyHelpFromType(381, "Frich");
                    }
                    if (this.alpha == "massive")
                    {
                        this.Attack(5, 2);
                        this.callForNearbyHelpFromType(505, "Frich");
                    }
                    else
                    {
                        this.Attack(1, 1);
                        this.callForNearbyHelpFromType(350, "Frich");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }
                else
                {
                    //do stuff when a frich dies...
                    if (this.doOnDeathOnce == true)
                    {
                        //track Deaths Of Certain Non-Unique Units During Certain Quests
                        if (this.alpha == "massive")
                        {
                            quests.huntingWagerKillCount += 1;
                        }

                        this.doOnDeathOnce = false;
                    }
                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(2, 0.075, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(2, 0.03, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 1529, 3, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 1290, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 1641, 3, 83, 33, -55 - this.xAdjustment, -18 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 1402, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(verse, 1742, 5, 83, 33, -55 - this.xAdjustment, -16 - this.yAdjustment, 83 * this.alphaSize, 33 * this.alphaSize);
                }

            }
            //SHEHID
            if (this.type == "Shehid")
            {
                //If it is attacked it will wake up.
                this.dtp = this.DTP();

                if (this.disturbed == true && this.disturbedPrereq == true|| this.dtp <= this.rangeOfSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtp > this.rangeOfSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    if (this.alpha == true)
                    {
                        this.armour = 56;
                        this.heatResistance = 56;
                    }
                    else
                    {
                        this.armour = 30;
                        this.heatResistance = 30;
                    }
                }
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 20 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 77 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (77 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("shehidShellLrg", this.X, this.Y), 1], [new Item("shehidOozeLrg", this.X, this.Y), 1]];
                }
                else
                {
                    if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 38 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 38 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    this.drops = [[new Item("shehidShellSml", this.X, this.Y), 1], [new Item("shehidOozeSml", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    if (this.awake == 0)
                    {
                        this.rangeOfSightCalculator(65, false);
                    }
                    else
                    {
                        this.rangeOfSightCalculator(285, "very");
                    }
                }
                else
                {
                    if (this.awake == 0)
                    {
                        this.rangeOfSightCalculator(65, false);
                    }
                    else
                    {
                        this.rangeOfSightCalculator(185, true);
                    }
                }

                //AI
                if (this.alive == true && this.awake == 1 && this.formChange == false)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(14, 6);
                        this.callForNearbyHelpFromType(250, "Shehid");
                    }
                    else
                    {
                        this.Attack(7, 3);
                        this.callForNearbyHelpFromType(150, "Shehid");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.costumeEngine(7, 0.025, false);
                        }
                        else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                        {
                            if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                            {
                                this.costumeEngine(3, 0.15, true);
                            }
                        }
                        else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                        {
                            this.costumeEngine(4, 0.075, false);
                        }
                        else
                        {
                            this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.costumeEngine(7, 0.025, false);
                        }
                        else
                        {
                            this.drawUnit(polypol, 805, 3, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                if (this.formReset == true)
                                {
                                    this.formChange = false;
                                    this.formReset = false;
                                }
                                this.drawUnit(polypol, 805, 3, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                            else if (this.attacking)
                            {
                                this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(polypol, 1170, 11, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formReset == true)
                            {
                                this.formChange = false;
                                this.formReset = false;
                            }
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 1)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(polypol, 840, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                            else if (this.attacking)
                            {
                                this.drawUnit(polypol, 1211, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(polypol, 1046, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(polypol, 974, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 2)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(polypol, 873, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                            else if (this.attacking)
                            {
                                this.drawUnit(polypol, 1260, 11, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(polypol, 1083, 10, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(polypol, 940, 7, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 3)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(polypol, 906, 6, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(polypol, 1123, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(polypol, 906, 6, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 4)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(polypol, 940, 7, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(polypol, 873, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 5)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(polypol, 975, 8, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(polypol, 840, 5, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                            }
                        }
                    }
                    else if (theCostume >= 6)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(polypol, 1010, 9, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                                this.formReset = true;
                                this.armour = 0;
                                this.heatResistance = 0;
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(polypol, 805, 3, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                                this.formReset = true;
                            }
                        }
                    }
                }
                else
                {
                    this.drawUnit(polypol, 1390, 12, 43, 40, -20 - this.xAdjustment, -22 - this.yAdjustment, 43 * this.alphaSize, 40 * this.alphaSize);
                }

            }
            //Grush
            if (this.type == "Grush")
            {
                //If it is attacked it will wake up.
                this.dtp = this.DTP();

                if (this.disturbed == true && this.disturbedPrereq == true || this.dtp <= this.rangeOfSight)
                {
                    if (this.awake == 0 || this.formChange == "wake")
                    {
                        this.formChange = "wake";
                    }
                    else
                    {
                        this.formChange = false;
                    }

                    this.awake = 1;
                    this.disturbedPrereq = false;
                }

                //If the player is no longer being persued it will go to sleep (this is primarily my way of making it good against archers)
                if (this.dtp > this.rangeOfSight)
                {
                    if (this.awake == 1 || this.formChange == "sleep")
                    {
                        this.formChange = "sleep";
                    }
                    else
                    {
                        this.formChange = false;
                    }
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.awake = 0;
                }
                //Armour is much greater while asleep
                if (this.awake == 0)
                {
                    this.attacking = false; // just in case...
                    this.disturbed = false;
                    this.disturbedPrereq = true;

                    if (this.alpha == true)
                    {
                        this.armour = 55;
                    }
                    else if (this.alpha == "giant")
                    {
                        this.armour = 75;
                    }
                    else if (this.alpha == "baby")
                    {
                        this.armour = 15;
                    }
                    else
                    {
                        this.armour = 35;
                    }
                }
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 95 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (95 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 6 + Math.floor(Math.random() * 3)], [new Item("grushFur", this.X, this.Y), 4 + Math.floor(Math.random() * 3)]];
                }
                else if (this.alpha == "giant")
                {
                    if (Math.max(0, 18 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 1100 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (1100 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 12 + Math.floor(Math.random() * 7)], [new Item("grushFur", this.X, this.Y), 10 + Math.floor(Math.random() * 3)]];
                }
                else if (this.alpha == "baby")
                {
                    if (Math.max(0, 1 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 4 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (4 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (Math.round(Math.random()))
                    {
                        this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 1], [new Item("grushFur", this.X, this.Y), 1]];
                    }
                    else
                    {
                        this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 1]];
                    }
                }
                else
                {
                    if (Math.max(0, 6 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 45 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 45 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    this.drops = [[new Item("rawGrushFlesh", this.X, this.Y), 3], [new Item("grushFur", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    if (this.awake == 0)
                    {
                        this.rangeOfSightCalculator(55, false);
                    }
                    else
                    {
                        this.rangeOfSightCalculator(90, false);
                    }
                }
                else if (this.alpha == "giant")
                {
                    if (this.awake == 0)
                    {
                        this.rangeOfSightCalculator(80, false);
                    }
                    else
                    {
                        this.rangeOfSightCalculator(140, false);
                    }
                }
                else if (this.alpha == "baby")
                {
                    if (this.awake == 0)
                    {
                        this.rangeOfSightCalculator(45, false);
                    }
                    else
                    {
                        this.rangeOfSightCalculator(60, false);
                    }
                }
                else
                {
                    if (this.awake == 0)
                    {
                        this.rangeOfSightCalculator(45, false);
                    }
                    else
                    {
                        this.rangeOfSightCalculator(60, false);
                    }
                }

                //AI
                if (this.alive == true && this.awake == 1 && this.formChange == false)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(6, 3);
                    }
                    else if (this.alpha == "giant")
                    {
                        this.Attack(8, 10);
                    }
                    else if (this.alpha == "baby")
                    {
                        this.Attack(0.5, 0.5);
                    }
                    else
                    {
                        this.Attack(4, 2);
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.awake == 1)
                    {
                        if (this.formChange == "wake")
                        {
                            this.costumeEngine(4, 0.045, false);
                        }
                        else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                        {
                            if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                            {
                                this.costumeEngine(2, 0.15, true);
                            }
                        }
                        else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                        {
                            this.costumeEngine(2, 0.060, false);
                        }
                        else
                        {
                            this.drawUnit(mofu, 690, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                        }
                    }
                    else
                    {
                        if (this.formChange == "sleep")
                        {
                            this.costumeEngine(4, 0.045, false);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 3022, 233, 40, 42, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 42 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 42 * this.alphaSize);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                if (this.formReset == true)
                                {
                                    this.formChange = false;
                                    this.formReset = false;
                                }
                                this.drawUnit(oldverse, 3022, 233, 40, 42, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 42 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 42 * this.alphaSize);
                            }
                            else if (this.attacking)
                            {
                                this.drawUnit(mofu, 973, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                            else if (this.moving && !this.attacking)
                            {
                                this.drawUnit(mofu, 782, 3, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formReset == true)
                            {
                                this.formChange = false;
                                this.formReset = false;
                            }
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(mofu, 690, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 1)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(mofu, 546, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                            else if (this.attacking)
                            {
                                this.drawUnit(mofu, 1056, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * (72 - 4) * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                            else if (this.moving && !this.attacking)
                            {
                                this.drawUnit(mofu, 877, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(mofu, 619, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 2)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(mofu, 620, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(mofu, 547, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                            }
                        }
                    }
                    if (theCostume == 3)
                    {
                        if (this.awake == 1)
                        {
                            if (this.formChange == "wake")
                            {
                                this.drawUnit(mofu, 690, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                                this.formReset = true;
                                this.armour = 0;
                            }
                        }
                        else
                        {
                            if (this.formChange == "sleep")
                            {
                                this.drawUnit(oldverse, 3022, 233, 40, 42, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 42 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 42 * this.alphaSize);
                                this.formReset = true;
                            }
                        }
                    }
                }
                else
                {
                    this.drawUnit(mofu, 1133, 1, 72, 72, -1/2 * 72 * this.alphaSize - this.xAdjustment, -1/2 * 72 * this.alphaSize - this.yAdjustment, 72 * this.alphaSize, 72 * this.alphaSize);
                }

            }
            //VARN
            if (this.type == "Varn")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 7 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 24 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (24 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("varnPelt", this.X, this.Y), 2], [new Item("rawVarnFlesh", this.X, this.Y), 1]];
                }
                else
                {
                    if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 17 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 17 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    this.drops = [[new Item("varnPelt", this.X, this.Y), 1], [new Item("rawVarnFlesh", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(525, "mildly");
                }
                else
                {
                    this.rangeOfSightCalculator(450, "mildy");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(5, 2);
                        this.callForNearbyHelpFromType(350, "Varn");
                    }
                    else
                    {
                        this.Attack(2, 2);
                        this.callForNearbyHelpFromType(275, "Varn");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(3, 0.085, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(3, 0.110, true);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3095, 254, 54, 32, -35 - this.xAdjustment, -22 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 2933, 254, 54, 32, -35 - this.xAdjustment, -22 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3154, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 2985, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3214, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3037, 254, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(verse, 2929, 283, 54, 32, -35 - this.xAdjustment, -22 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                }
            }
            //NEEV
            if (this.type == "Neev")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 11 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 55 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (55 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("neevFlesh", this.X, this.Y), 3], [new Item("neevFur", this.X, this.Y), 2]];
                }
                else
                {
                    if (Math.max(0, 4.5 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 20 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    this.drops = [[new Item("neevFlesh", this.X, this.Y), 1], [new Item("neevFur", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(800, true);
                }
                else
                {
                    this.rangeOfSightCalculator(650, "mildy");
                }

                //AI
                if (this.alive == true)
                {
                    //NEEV BRAIN
                    //Process

                    if (this.DTP() <= 1/6 * this.rangeOfSight && player.inebriation >= 100 + (player.getToughness() * 3))
                    {
                        this.disturbedTime = new Date().getTime();
                    }

                    if (this.disturbed == false) //if not frightened...
                    {
                        this.mofuTargetFood = "none";
                        this.moving = false;
                        this.attacking = false;

                        if (player.inebriation < 100 + (player.getToughness() * 3) && this.DTP() <= 1/12 * this.rangeOfSight) //somehow this: && this.disturbed == false actually fixes the running around...
                        {
                            this.pointAwayFromPlayer();
                            this.moveInRelationToPlayer();
                        }
                        else
                        {
                            for (var i = 0; i < worldItems.length; i++) //look for any item but quest items to eat/steal.
                            {
                                if (worldItems[i][0].utility != "questItem")
                                {
                                    if (this.distanceFinder(this, worldItems[i][0]) <= this.rangeOfSight)
                                    {
                                        if (this.mofuTargetFood == "none")
                                        {
                                            this.mofuTargetFood = worldItems[i][0];
                                        }
                                        else
                                        {
                                            if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.mofuTargetFood))
                                            {
                                                this.mofuTargetFood = worldItems[i][0];
                                            }
                                        }
                                    }
                                }
                            }
                            if (this.mofuTargetFood != "none")
                            {
                                if (this.distanceFinder(this, this.mofuTargetFood) <= this.engagementRadius)
                                {
                                    this.eating = true;

                                    //Actually eat the thing at the right frame.
                                    if (Math.floor(this.costume) <= 1)
                                    {
                                        this.mofuFeastPrepped = true;
                                    }
                                    else if (Math.floor(this.costume) <= 2)
                                    {
                                        if (this.mofuFeastPrepped == true)
                                        {
                                            for (var i = 0; i < worldItems.length; i++)
                                            {
                                                if (worldItems[i][0] === this.mofuTargetFood)
                                                {
                                                    this.mofuFood += 1;
                                                    if (worldItems[i][1] > 1)
                                                    {
                                                        worldItems[i][1] -= 1;
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        this.mofuTargetFood = "none";
                                                        worldItems.splice(i, 1);
                                                        break;
                                                    }
                                                }
                                            }
                                            this.mofuFeastPrepped = false;
                                        }
                                    }
                                    //end of eating item code block
                                }
                                else
                                {
                                    this.eating = false;
                                    this.pointTowards(this.mofuTargetFood);
                                    this.moveInRelationToThing(this.mofuTargetFood);
                                }
                            }
                            else
                            {
                                this.eating = false;
                            }
                        }
                    }
                    else if (this.disturbed == true)
                    {
                        if (this.alpha == true)
                        {
                            this.Attack(8, 3);
                            this.callForNearbyHelpFromType(2000, "Neev");
                        }
                        else
                        {
                            this.Attack(3, 1.5);
                            this.callForNearbyHelpFromType(2000, "Neev");
                        }

                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();

                    //FOR NEEVS ANIMATION STARTER IS MOVED RIGHT HERE
                    if (this.moving && !this.attacking && !this.eating) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(4, 0.09, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(3, 0.20, true);
                        }
                    }
                    else if (this.eating) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(4, 0.11, true);
                        }
                    }
                }
                else
                {
                    if (this.doOnDeathOnce)
                    {
                        if (this.ID == "Easter")
                        {
                            quests.theMasterThiefOfTeshirNeevSlain = true;
                        }

                        this.doOnDeathOnce = false;
                    }
                }

                //ANIMATIONS

                if (this.alive == true && player.inebriation >= 100 + (player.getToughness() * 3))
                {
                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(poly, 284, 46, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                        else if (this.eating)
                        {
                            this.drawUnit(poly, 235, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(poly, 186, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(poly, 235, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                        else if (this.eating)
                        {
                            this.drawUnit(poly, 285, 1, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(poly, 387, 4, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(poly, 234, 45, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                        else if (this.eating)
                        {
                            this.drawUnit(poly, 331, 4, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(poly, 186, 3, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 3)
                    {
                        if (this.attacking || this.eating)
                        {
                            this.drawUnit(poly, 234, 45, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(poly, 439, 6, 48, 51, -35 - this.xAdjustment, -22 - this.yAdjustment, 48 * this.alphaSize, 51 * this.alphaSize);
                        }
                    }
                }
                else if (this.alive == false)
                {
                    this.drawUnit(poly, 124, 7, 65, 41, -35 - this.xAdjustment, -22 - this.yAdjustment, 65 * this.alphaSize, 41 * this.alphaSize);
                }
            }
            //GRIB
            if (this.type == "Grib")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 45 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (45 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("gribPelt", this.X, this.Y), 2], [new Item("rawGribFlesh", this.X, this.Y), 3]];
                }
                else
                {
                    if (Math.max(0, 8 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 24 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 24 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    this.drops = [[new Item("gribPelt", this.X, this.Y), 1], [new Item("rawGribFlesh", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(400, "mildly");
                }
                else
                {
                    this.rangeOfSightCalculator(350, "mildy");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(9, 4);
                        this.callForNearbyHelpFromType(400, "Grib");
                    }
                    else
                    {
                        this.Attack(5, 3);
                        this.callForNearbyHelpFromType(350, "Grib");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(3, 0.085, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(6, 0.110, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1636, 154, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 1226, 155, 49, 29, -35 - this.xAdjustment, -22 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1451, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 1305, 155, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1513, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 1373, 156, 54, 32, -35 - this.xAdjustment, -21 - this.yAdjustment, 54 * this.alphaSize, 32 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 3)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1578, 154, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 4)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1513, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 5)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1451, 157, 49, 29, -35 - this.xAdjustment, -21 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(oldverse, 1145, 143, 53, 44, -35 - this.xAdjustment, -22 - this.yAdjustment, 53 * this.alphaSize, 44 * this.alphaSize);
                }

            }
            //BLACK BEAR
            if (this.type == "BlackBear")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 20 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 99 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (99 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (player.getIntelligence() >= 5)
                    {
                        this.drops = [[new Item("medBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 2], [new Item("rawBearTongue", this.X, this.Y), 1]];
                    }
                    else
                    {
                        this.drops = [[new Item("medBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 2]];
                    }
                }
                else if (this.alpha == "giant")
                {
                    if (Math.max(0, 70 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 1111 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (1111 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("lrgBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 13]];
                }
                else
                {
                    if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 62 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 62 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    if (player.getIntelligence() >= 5)
                    {
                        this.drops = [[new Item("smlBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 1], [new Item("rawBearTongue", this.X, this.Y), 1]];
                    }
                    else
                    {
                        this.drops = [[new Item("smlBlackBearPelt", this.X, this.Y), 1], [new Item("rawBearFlesh", this.X, this.Y), 1]];
                    }
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(425, "mildly");
                }
                else if (this.alpha == "giant")
                {
                    this.rangeOfSightCalculator(650, true);
                }
                else
                {
                    this.rangeOfSightCalculator(400, false);
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(13, 7);
                        this.callForNearbyHelpFromType(300, "BlackBear");
                    }
                    else if (this.alpha == "giant")
                    {
                        this.Attack(40, 30);
                        this.callForNearbyHelpFromType(250, "BlackBear");
                    }
                    else
                    {
                        this.Attack(7, 6);
                        this.callForNearbyHelpFromType(300, "BlackBear");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(4, 0.085, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(6, 0.110, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 224, 8, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 0, 5, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 301, 9, 61, 40, -34 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 67, 8, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 384, 10, 61, 40, -31 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 0, 5, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 3)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 301, 9, 61, 40, -33 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 141, 7, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 4)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 224, 8, 61, 40, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(polypol, 471, 16, 61, 40, -35 - this.xAdjustment, -22 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                }
            }
            //VIPER
            if (this.type == "Viper")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 13 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 92 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (92 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (player.getIntelligence() >= 23)
                    {
                        this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 6], [new Item("viperVenomGland", this.X, this.Y), 1], [new Item("viperSnakeSkin", this.X, this.Y), 6]];
                    }
                    else
                    {
                        this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 6], [new Item("viperSnakeSkin", this.X, this.Y), 6]];
                    }
                }
                else if (this.alpha == "giant")
                {
                    if (Math.max(0, 51 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 499 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (499 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }


                    this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 17], [new Item("viperSnakeSkin", this.X, this.Y), 17]];
                }
                else
                {
                    if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = 20 * ((player.getIntelligence() / 50) + 1) / 10;
                    }

                    if (player.getIntelligence() >= 18)
                    {
                        this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 1], [new Item("viperVenomGland", this.X, this.Y), 1], [new Item("viperSnakeSkin", this.X, this.Y), 1]];
                    }
                    else
                    {
                        this.drops = [[new Item("rawViperFlesh", this.X, this.Y), 1], [new Item("viperSnakeSkin", this.X, this.Y), 1]];
                    }
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(700, "mildly");
                }
                else if (this.alpha == "giant")
                {
                    this.rangeOfSightCalculator(900, "mildly");
                }
                else
                {
                    this.rangeOfSightCalculator(260, true);
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(9, 4);
                    }
                    else if (this.alpha == "giant")
                    {
                        this.Attack(34, 17);
                    }
                    else
                    {
                        this.Attack(3, 1);
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(7, 0.090, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(7, 0.145, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(freeverse, 438, 5, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(freeverse, 438, 5, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(freeverse, 518, 6, 70, 30, -34 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(freeverse, 438, 33, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(freeverse, 598, 5, 70, 30, -31 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(freeverse, 438, 5, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 3)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(freeverse, 678, 7, 70, 30, -33 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(freeverse, 438, 7, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 4)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(freeverse, 764, 9, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(freeverse, 438, 120, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume <= 5)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(freeverse, 850, 7, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(freeverse, 438, 147, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 6)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(freeverse, 921, 7, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(freeverse, 438, 172, 70, 30, -35 - this.xAdjustment, -21 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(freeverse, 436, 199, 70, 30, -35 - this.xAdjustment, -22 - this.yAdjustment, 61 * this.alphaSize, 40 * this.alphaSize);
                }

            }
            //BERULN
            if (this.type == "Beruln")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 93 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (93 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("bigBerulnPelt", this.X, this.Y), 1], [new Item("berulnSkull", this.X, this.Y), 1], [new Item("rawBerulnFlesh", this.X, this.Y), 4]];
                }
                else
                {
                    if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 81 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (81 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("berulnPelt", this.X, this.Y), 1], [new Item("berulnSkull", this.X, this.Y), 1], [new Item("rawBerulnFlesh", this.X, this.Y), 3]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(900, "extremely");
                }
                else
                {
                    this.rangeOfSightCalculator(850, "extremely");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(14, 8);
                        this.callForNearbyHelpFromType(300, "Beruln");
                    }
                    else
                    {
                        this.Attack(15, 7);
                        this.callForNearbyHelpFromType(300, "Beruln");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(2, 0.100, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(3, 0.095, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                        //manual damaging
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polyPNG, 92, 599, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polyPNG, 8, 658, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                            {
                                this.finalAttackCostume = true; //deal the damage!
                                this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                            }
                            this.drawUnit(polyPNG, 93, 655, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polyPNG, 94, 547, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 2)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                        if (this.attacking)
                        {
                            this.drawUnit(polyPNG, 93, 709, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(polyPNG, 11, 598, 77, 54, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                }

            }
            //OLKRIN
            if (this.type == "Olkrin")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    var randoom = Math.round(Math.random());
                    if (Math.max(0, 57 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 1400 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (1400 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (randoom == 0)
                    {
                        this.drops = [[new Item("goliathOlkrinSkull", this.X, this.Y), 1], [new Item("rawOlkrinFlesh", this.X, this.Y), 10]];
                    }
                    else
                    {
                        this.drops = [[new Item("olkrinHorn", this.X, this.Y), 2], [new Item("rawOlkrinFlesh", this.X, this.Y), 12]];
                    }
                }
                else if (this.alpha == "baby")
                {
                    if (Math.max(0, 18 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 172 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (172 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("rawOlkrinFlesh", this.X, this.Y), 1]];
                }
                else
                {
                    var randoom = Math.round(Math.random());
                    if (Math.max(0, 36 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 1000 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (1000 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (randoom)
                    {
                        this.drops = [[new Item("olkrinSkull", this.X, this.Y), 1], [new Item("rawOlkrinFlesh", this.X, this.Y), 4]];
                    }
                    else
                    {
                        this.drops = [[new Item("olkrinArm", this.X, this.Y), 1], [new Item("olkrinHorn", this.X, this.Y), 2], [new Item("rawOlkrinFlesh", this.X, this.Y), 3]];
                    }
                }

                //RANGE OF SIGHT (anything related to range of sight)

                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(1100, "very");
                }
                else if (this.alpha == "baby")
                {
                    this.rangeOfSightCalculator(750, "very");
                }
                else
                {
                    this.rangeOfSightCalculator(900, "very");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(28, 36);
                        this.callForNearbyHelpFromType(1000, "Olkrin");
                    }
                    else if (this.alpha == "baby")
                    {
                        this.Attack(8, 12);
                        this.callForNearbyHelpFromType(1600, "Olkrin");
                    }
                    else
                    {
                        this.Attack(16, 24);
                        this.callForNearbyHelpFromType(1000, "Olkrin");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(4, 0.070, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(15, 0.225, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    //manual damaging
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 156, 904, 117, 157, -99 - this.xAdjustment, -131 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 143, 395, 117, 157, -106 - this.xAdjustment, -136 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 165, 1082, 117, 157, -87 - this.xAdjustment, -110 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 3)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 163, 1228, 117, 157, -92 - this.xAdjustment, -108 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 147, 551, 117, 157, -102 - this.xAdjustment, -108 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 4)
                    {
                        if (this.attacking)
                        {
                            if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                            {
                                this.finalAttackCostume = true; //deal the damage!
                                this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                            }
                            this.drawUnit(verse, 163, 1228, 117, 157, -90 - this.xAdjustment, -109 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 5)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 163, 1228, 117, 157, -92 - this.xAdjustment, -108 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 6)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 165, 1082, 117, 157, -87 - this.xAdjustment, -110 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 7)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 156, 904, 117, 157, -99 - this.xAdjustment, -131 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 8)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    } // back to frame 0 here.
                    else if (theCostume == 9)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 30, 902, 117, 157, -100 - this.xAdjustment, -155 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 10)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 38, 1071, 117, 157, -88 - this.xAdjustment, -163 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 11)
                    {
                        if (this.attacking)
                        {
                            if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                            {
                                this.finalAttackCostume = true; //deal the damage!
                                this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                            }

                            this.drawUnit(verse, 43, 1228, 117, 157, -90 - this.xAdjustment, -171 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 12)
                    {
                        if (this.attacking)
                        {
                            this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.
                            this.drawUnit(verse, 38, 1071, 117, 157, -88 - this.xAdjustment, -163 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 13)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 30, 902, 117, 157, -100 - this.xAdjustment, -155 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 14)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 156, 706, 117, 157, -91 - this.xAdjustment, -145 - this.yAdjustment, 117 * this.alphaSize, 157 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    if (this.alpha == false)
                    {
                        this.drawUnit(verse, 10, 1413, 133, 92, -186 - this.xAdjustment, -80 - this.yAdjustment, 133 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else if (this.alpha == true)
                    {
                        this.drawUnit(verse, 10, 1413, 133, 92, -186 - this.xAdjustment, -80 - this.yAdjustment, 133 * this.alphaSize, 92 * this.alphaSize);
                    }
                    else if (this.alpha == "baby")
                    {
                        this.drawUnit(verse, 10, 1413, 133, 92, -156 - this.xAdjustment, -100 - this.yAdjustment, 133 * this.alphaSize, 92 * this.alphaSize);
                    }
                }

            }
            //NAAPRID
            if (this.type == "Naaprid")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 20 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (20 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("naapridPelt", this.X, this.Y), 1], [new Item("rawNaapridFlesh", this.X, this.Y), 1], [new Item("naapridHorn", this.X, this.Y), 1]];
                }
                else if (this.alpha == "baby")
                {
                    if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 6 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (6 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("rawYoungNaapridFlesh", this.X, this.Y), 1]];
                }
                else
                {
                    if (Math.max(0, 6 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 14 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (14 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }
                    this.drops = [[new Item("naapridPelt", this.X, this.Y), 1], [new Item("rawNaapridFlesh", this.X, this.Y), 1], [new Item("naapridHorn", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(345, "mildy");
                }
                else if (this.alpha == "baby")
                {
                    this.rangeOfSightCalculator(285, "very");
                }
                else
                {
                    this.rangeOfSightCalculator(300, "very");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(7, 2);
                        this.callForNearbyHelpFromType(385, "Naaprid");
                    }
                    else if (this.alpha == "baby")
                    {
                        this.Attack(2, 0);
                        this.callForNearbyHelpFromType(300, "Naaprid");
                    }
                    else
                    {
                        this.Attack(5, 1);
                        this.callForNearbyHelpFromType(350, "Naaprid");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    if (this.alpha == true)
                    {
                        this.pointTowardsPlayer();
                    }
                    else if (this.alpha == "baby")
                    {
                        this.pointAwayFromPlayer();
                    }
                    else
                    {
                        if (this.disturbed == true && this.health > (this.healthMAX * (3/4)))
                        {
                            this.pointTowardsPlayer();
                        }
                        else
                        {
                            this.pointAwayFromPlayer();
                        }
                    }
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(3, 0.140, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(6, 0.225, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    //manual damaging
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 2849, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 2849, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 2928, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3088, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 2)
                    {
                        if (this.attacking)
                        {
                            if (this.damageDealt == false && this.alpha == true || this.alpha != "baby" && this.disturbed == true && this.health > (this.healthMAX * (3/4)) && this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                            {
                                this.finalAttackCostume = true; //deal the damage!
                                this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                            }
                            this.drawUnit(verse, 2852, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 3005, 50, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 3)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 2935, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 4)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 2852, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 5)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3007, 84, 61, 37, -55 - this.xAdjustment, -32 - this.yAdjustment, 61 * this.alphaSize, 37 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(verse, 3080, 90, 71, 48, -55 - this.xAdjustment, -32 - this.yAdjustment, 71 * this.alphaSize, 48 * this.alphaSize);
                }

            }
            //MOFU
            if (this.type == "Mofu") //pronounced moe-foo
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    this.experience = (2 * ((player.getIntelligence() / 50) + 1));
                    this.drops = [[new Item("rawLargeMofuFlesh", this.X, this.Y), 1], [new Item("mofuFeather", this.X, this.Y), Math.floor(Math.random() * 5) + 1], [new Item("mofuFoot", this.X, this.Y), 2]];
                }
                else if (this.alpha == "baby")
                {
                    this.experience = (2 * ((player.getIntelligence() / 50) + 1));
                    this.drops = [[new Item("rawMofflingFlesh", this.X, this.Y), 1]];
                }
                else
                {
                    this.experience = (2 * ((player.getIntelligence() / 50) + 1));
                    this.drops = [[new Item("rawMofuFlesh", this.X, this.Y), 1], [new Item("mofuFeather", this.X, this.Y), Math.floor(Math.random() * 2) + 1], [new Item("mofuFoot", this.X, this.Y), 2]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(1000, false);
                }
                else if (this.alpha == "baby")
                {
                    this.rangeOfSightCalculator(400, false);
                }
                else
                {
                    this.rangeOfSightCalculator(800, false);
                }

                //AI
                if (this.alive == true)
                {
                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();

                    //Growth by food (leveling/evolution)
                    if (this.alpha == "baby")
                    {
                        if (this.mofuFood >= 14)
                        {
                            this.mofuFood = 0;
                            this.alpha = false;

                            //new stats below:
                            //----------------

                            this.healthMAX = 4;
                            this.health = this.healthMAX;
                            this.engagementRadius = 12;
                            this.sizeRadius = 9;
                            this.attackWait = 3;
                            this.alphaSize = 1;
                        }
                    }
                    else if (this.alpha == false)
                    {
                        if (this.mofuFood >= 26)
                        {
                            this.mofuFood = 0;
                            this.alpha = true;

                            //new stats below:
                            //----------------

                            this.healthMAX = 7 + Math.round(Math.random());
                            this.health = this.healthMAX;
                            this.engagementRadius = 24;
                            this.sizeRadius = 18;
                            this.attackWait = 2.5;
                            this.alphaSize = 2;
                        }
                    }
                    else if (this.alpha == true)
                    {
                        if (this.mofuFood >= 66)
                        {
                            this.drops = [[new Item("rawLargeMofuFlesh", this.X, this.Y), 1], [new Item("mofuFeather", this.X, this.Y), Math.floor(Math.random() * 5) + 1], [new Item("mofuFoot", this.X, this.Y), 2], [new Item("fattyMofuLiver", this.X, this.Y), 1]];
                        }
                    }

                    if (this.alpha == false || this.alpha == true)
                    {
                        //egg laying
                        this.eggTimer += 1 * (TTD / 16.75);
                        if (this.eggTimer >= 10000)
                        {
                            this.eggTimer = 0;

                            var canPlace = true;
                            var hits = 0;
                            for (var j = 0; j < scenicList.length; j++)
                            {
                                //5 is the radius of mofuEgg Scenery Object.
                                if (scenicList[j].X - 5 <= this.X + scenicList[j].radius && scenicList[j].X + 5 >= this.X - scenicList[j].radius && scenicList[j].Y - 5 <= this.Y + scenicList[j].radius && scenicList[j].Y + 5 >= this.Y - scenicList[j].radius)
                                {
                                    canPlace = false;
                                }
                            }

                            if (canPlace == true)
                            {
                                scenicList.push(new Scenery("fertilizedMofuEgg", this.X, this.Y, (Math.random() * (2 * Math.PI)), false));
                            }

                            this.mofuFood = Math.max(0, this.mofuFood - 1)
                        }
                    }

                    //BIRD BRAIN
                    //Process
                    if (this.DTP() <= 1/3 * this.rangeOfSight && shiftKey == true && wKey == true && player.getStealth() < 40 || this.alpha != true && this.DTP() <= 28 && this.attacking == false && altKey == false || this.alpha == true && this.DTP() <= 41 && this.attacking == false && altKey == false)
                    {
                        this.disturbedTime = new Date().getTime();
                    }

                    if (this.disturbed == false) //if not frightened...
                    {
                        this.mofuTargetFood = "none";
                        this.moving = false;
                        this.attacking = false;
                        this.flying = false;
                        if (this.alpha == false)
                        {
                            this.speed = 1;
                        }
                        else if (this.alpha == true)
                        {
                            this.speed = 1.35;
                        }
                        else if (this.alpha == "baby")
                        {
                            this.speed = 0.85;
                        }
                        for (var i = 0; i < worldItems.length; i++) //look for food... (grains and breads)
                        {
                            if (worldItems[i][0].type == "santhGrain" || worldItems[i][0].type == "harstGrain" || worldItems[i][0].type == "santhBread"|| worldItems[i][0].type == "butteredSanthBread" || worldItems[i][0].type == "harstBread" || worldItems[i][0].type == "butteredHarstBread")
                            {
                                if (this.distanceFinder(this, worldItems[i][0]) <= (this.rangeOfSight / 2)) // if grains are easy to get to go after them.
                                {
                                    if (this.mofuTargetFood == "none")
                                    {
                                        this.mofuTargetFood = worldItems[i][0];
                                    }
                                    else
                                    {
                                        if (this.distanceFinder(this, worldItems[i][0]) < this.distanceFinder(this, this.mofuTargetFood))
                                        {
                                            this.mofuTargetFood = worldItems[i][0];
                                        }
                                    }
                                }
                            }
                        }
                        if (this.mofuTargetFood != "none")
                        {
                            if (this.distanceFinder(this, this.mofuTargetFood) <= this.engagementRadius)
                            {
                                this.attacking = true;
                            }
                            else
                            {
                                this.attacking = false;
                                this.pointTowards(this.mofuTargetFood);
                                this.moveInRelationToThing(this.mofuTargetFood);
                            }
                        }
                    }
                    else
                    {
                        this.attacking = false;
                        this.flying = true;
                        if (this.alpha == false)
                        {
                            this.speed = 5;
                        }
                        else if (this.alpha == true)
                        {
                            this.speed = 6.5;
                        }
                        else if (this.alpha == "baby")
                        {
                            this.speed = 3.85;
                        }
                        this.pointAwayFromPlayer();
                        this.moveInRelationToPlayer();
                    }
                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking && this.disturbed == false) //walking (towards food)
                    {
                        this.costumeEngine(2, 0.05, false);
                    }
                    else if (this.moving && !this.attacking && this.disturbed == true) //flying (away from player)
                    {
                        this.costumeEngine(2, 0.065, false);
                    }
                    else if (this.attacking) //eating food (off the ground)
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(3, 0.04, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    //manual damaging
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(mofu, 108, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                        else if (this.moving && !this.flying)
                        {
                            this.drawUnit(mofu, 194, 10, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                        else if (this.flying)
                        {
                            this.drawUnit(mofu, 163, 48, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(mofu, 108, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.mofuFeastPrepped = true;
                            this.drawUnit(mofu, 152, 10, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                        else if (!this.flying)
                        {
                            this.drawUnit(mofu, 236, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(mofu, 205, 47, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 2)
                    {
                        if (this.attacking)
                        {
                            if (this.mofuFeastPrepped == true)
                            {
                                for (var i = 0; i < worldItems.length; i++)
                                {
                                    if (worldItems[i][0] === this.mofuTargetFood)
                                    {
                                        this.mofuFood += 1;
                                        if (worldItems[i][1] > 1)
                                        {
                                            worldItems[i][1] -= 1;
                                            break;
                                        }
                                        else
                                        {
                                            this.mofuTargetFood = "none";
                                            worldItems.splice(i, 1);
                                            break;
                                        }
                                    }
                                }
                                this.mofuFeastPrepped = false;
                            }
                            this.drawUnit(mofu, 152, 10, 40, 36, -1 / 2 * 40 * this.alphaSize - this.xAdjustment, -1 / 2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(mofu, 108, 9, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(mofu, 348, 5, 40, 36, -1/2 * 40 * this.alphaSize - this.xAdjustment, -1/2 * 36 * this.alphaSize - this.yAdjustment, 40 * this.alphaSize, 36 * this.alphaSize);
                }

            }
            //BOG TROLL
            if (this.type == "BogTroll")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 90 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 1580 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (1580 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("hugeBogTrollSkull", this.X, this.Y), 1], [new Item("trollFlesh", this.X, this.Y), 12]];
                }
                else if (this.alpha == "baby")
                {
                    if (Math.max(0, 12 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 116 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (116 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("babyBogTrollSkull", this.X, this.Y), 1], [new Item("trollFlesh", this.X, this.Y), 1]];
                }
                else
                {
                    if (Math.max(0, 22 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 940 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (940 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("bogTrollSkull", this.X, this.Y), 1], [new Item("trollFlesh", this.X, this.Y), 7]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(1000, true);
                }
                else if (this.alpha == "baby")
                {
                    this.rangeOfSightCalculator(600, false);
                }
                else
                {
                    this.rangeOfSightCalculator(850, true);
                }

                //AI
                if (this.alive == true)
                {
                    if (this.health <= this.healthMAX / 2)
                    {
                        this.combatMode = 1;
                    }
                    else
                    {
                        this.combatMode = 0;
                    }
                    if (this.alpha == true)
                    {
                        //troll health regeneration
                        if (this.health < this.healthMAX)
                        {
                            this.health += 0.14;
                        }
                        else
                        {
                            this.health = this.healthMAX;
                        }

                        if (this.combatMode == 1)
                        {
                            this.damageFrame = "manual";
                            this.Attack(60, 40);
                            this.speed = 6.2;
                            this.rotationSpeed = 0.025; // was 0.05
                            this.engagementRadius = 141;
                            this.sizeRadius = 75;
                            this.negateArmour = 10;
                            this.attackWait = 3.7;
                        }
                        else
                        {
                            this.damageFrame = "automatic";
                            this.Attack(55, 35);
                            this.speed = this.keepSpeed;
                            this.rotationSpeed = 0.035; // was 0.05
                            this.engagementRadius = 97;
                            this.sizeRadius = 75;
                            this.negateArmour = 16;
                            this.attackWait = 4.5;
                        }
                    }
                    else if (this.alpha == "baby")
                    {
                        this.callForNearbyHelpFromType(750, "wTroll");

                        //troll health regeneration
                        if (this.health < this.healthMAX)
                        {
                            this.health += 0.025; //was 0.0185
                        }
                        else
                        {
                            this.health = this.healthMAX;
                        }

                        if (this.combatMode == 1)
                        {
                            this.damageFrame = "manual";
                            this.Attack(10, 4);
                            this.speed = 4.1;
                            this.rotationSpeed = 0.025; // was 0.05
                            this.engagementRadius = 47;
                            this.sizeRadius = 30;
                            this.negateArmour = 1;
                            this.attackWait = 2.7;
                        }
                        else
                        {
                            this.Attack(9, 3);
                            this.speed = this.keepSpeed;
                            this.rotationSpeed = 0.035; // was 0.05
                            this.engagementRadius = 42;
                            this.sizeRadius = 30;
                            this.negateArmour = 3;
                            this.attackWait = 3.5;
                            this.damageFrame = "automatic";

                        }
                    }
                    else
                    {
                        //troll health regeneration
                        if (this.health < this.healthMAX)
                        {
                            this.health += 0.09;
                        }
                        else
                        {
                            this.health = this.healthMAX;
                        }

                        if (this.combatMode == 1)
                        {
                            this.damageFrame = "manual";
                            this.Attack(38, 23);
                            this.speed = 5.4;
                            this.rotationSpeed = 0.025; // was 0.05
                            this.engagementRadius = 92;
                            this.sizeRadius = 47;
                            this.negateArmour = 5;
                            this.attackWait = 3.7;
                        }
                        else
                        {
                            this.Attack(35, 20);
                            this.speed = this.keepSpeed;
                            this.rotationSpeed = 0.035; // was 0.05
                            this.engagementRadius = 72;
                            this.sizeRadius = 47;
                            this.negateArmour = 10;
                            this.attackWait = 4.5;
                            this.damageFrame = "automatic";
                        }
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {

                        this.costumeEngine(4, 0.065, false);

                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            if (this.combatMode == 0)
                            {
                                this.costumeEngine(5, 0.2, true);
                            }
                            else if (this.combatMode == 1)
                            {
                                this.costumeEngine(4, 0.2, false);
                            }
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
                    //manual damaging
                    if (this.combatMode == 0)
                    {
                        if (theCostume <= 0)
                        {
                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3331, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                        }
                        else if (theCostume == 1)
                        {
                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3225, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(verse, 3872, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);

                            }
                        }
                        else if (theCostume == 2)
                        {
                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3331, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                        }
                        else if (theCostume == 3)
                        {
                            this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3441, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(verse, 3665, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                        }
                        else if (theCostume >= 4)
                        {

                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3558, 10, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                        }
                    }
                    else if (this.combatMode == 1)
                    {
                        if (theCostume <= 0)
                        {
                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }

                        }
                        else if (theCostume == 1)
                        {

                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3735, 138, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                                if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                                {
                                    this.finalAttackCostume = true; //deal the damage!
                                    this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                                }
                            }
                            else
                            {
                                this.drawUnit(verse, 3872, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);

                            }
                        }
                        else if (theCostume == 2)
                        {
                            this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3873, 138, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(verse, 3770, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                        }
                        else if (theCostume == 3)
                        {

                            if (this.attacking)
                            {
                                this.drawUnit(verse, 3735, 138, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(verse, 3665, 16, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                            }
                        }
                        else if (theCostume >= 4)
                        {
                            this.drawUnit(verse, 11, 598, 106, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(verse, 3586, 134, 115, 129, -77 - this.xAdjustment, -53 - this.yAdjustment, 154 * this.alphaSize, 108 * this.alphaSize);
                }
            }
            //WINTER WOLF
            if (this.type == "WinterWolf")
            {
                var rndm = Math.round(Math.random());
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 25 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 100 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (100 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (rndm)
                    {
                        this.drops = [[new Item("massiveWinterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 3], [new Item("rawWolfLiver", this.X, this.Y), 1]];
                    }
                    else
                    {
                        this.drops = [[new Item("massiveWinterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 3]];
                    }
                }
                else
                {
                    if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 49 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (49 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (rndm)
                    {
                        this.drops = [[new Item("winterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 1], [new Item("rawWolfLiver", this.X, this.Y), 1]];
                    }
                    else
                    {
                        this.drops = [[new Item("winterWolfPelt", this.X, this.Y), 1], [new Item("rawWinterWolfFlesh", this.X, this.Y), 1]];
                    }
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(775, "very");
                }
                else
                {
                    this.rangeOfSightCalculator(665, "very");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(19, 6);
                        this.callForNearbyHelpFromType(350, "WinterWolf");
                    }
                    else
                    {
                        this.Attack(6, 4);
                        this.callForNearbyHelpFromType(640, "WinterWolf");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(3, 0.100, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(5, 0.1, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                    //manual damaging
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 2853, 17, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 2853, 17, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.damageDealt == false) // if the Unit has not yet dealt damage to its target then...
                        {
                            this.finalAttackCostume = true; //deal the damage!
                            this.damageDealt = true; //tell the loop that the Unit has already dealt the damage for this attack.
                        }

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 2911, 18, 49, 29, -89 - this.xAdjustment, -48 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 2730, 16, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 2)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                        if (this.attacking)
                        {
                            this.drawUnit(verse, 2968, 18, 49, 29, -89 - this.xAdjustment, -53 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(verse, 2791, 17, 49, 29, -89 - this.xAdjustment, -52 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 3)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3027, 18, 49, 29, -89 - this.xAdjustment, -55 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 4)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(verse, 3083, 21, 49, 29, -89 - this.xAdjustment, -51 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(verse, 3139, 24, 49, 29, -93 - this.xAdjustment, -44 - this.yAdjustment, 49 * this.alphaSize, 29 * this.alphaSize);
                }

            }
            //GULFREY
            if (this.type == "Gulfrey")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 21 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (21 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("gulfreyShell", this.X, this.Y), 3], [new Item("rawGulfreyFlesh", this.X, this.Y), 3], [new Item("gulfreyMandibles", this.X, this.Y), 1]];
                }
                else
                {
                    if (Math.max(0, 4 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 8 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (8 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("rawGulfreyFlesh", this.X, this.Y), 1]];
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(490, true);
                }
                else
                {
                    this.rangeOfSightCalculator(440, true);
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(6, 4);
                        this.callForNearbyHelpFromType(300, "Gulfrey");
                    }
                    else
                    {
                        this.Attack(2, 2);
                        this.callForNearbyHelpFromType(440, "Gulfrey");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(4, 0.125, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(4, 0.35, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.

                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 103, 172, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 242, 10, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 103, 92, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 103, 172, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 103, 172, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 241, 94, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 3)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 100, 12, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 241, 173, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(oldverse, 163, 225, 123, 52, -77 - this.xAdjustment, -53 - this.yAdjustment, 123 * this.alphaSize, 52 * this.alphaSize);
                }

            }
            //TORPER
            if (this.type == "Torper")
            {
                //Set Drops and experience
                var rndmzr = Math.floor(Math.random() * 3);
                if (this.alpha == true)
                {
                    if (Math.max(0, 14 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 75 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (75 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (player.getIntelligence >= 42)
                    {
                        this.drops = [[new Item("torperFuzz", this.X, this.Y), 1], [new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 2]];
                    }
                    else
                    {
                        if (rndmzr == 2)
                        {
                            this.drops = [[new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 2]];
                        }
                        else
                        {
                            this.drops = [[new Item("rawTorperFlesh", this.X, this.Y), 2]];
                        }
                    }

                }
                else
                {
                    if (Math.max(0, 10 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 45 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (45 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    if (player.getIntelligence >= 48)
                    {
                        this.drops = [[new Item("torperFuzz", this.X, this.Y), 1], [new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 1]];
                    }
                    else
                    {
                        if (rndmzr == 2)
                        {
                            this.drops = [[new Item("torperVenomSac", this.X, this.Y), 1], [new Item("rawTorperFlesh", this.X, this.Y), 1]];
                        }
                        else
                        {
                            this.drops = [[new Item("rawTorperFlesh", this.X, this.Y), 1]];
                        }
                    }
                }

                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(675, "unrelenting");
                }
                else
                {
                    this.rangeOfSightCalculator(575, "unrelenting");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(10, 4);
                        this.callForNearbyHelpFromType(675, "Torper");
                    }
                    else
                    {
                        this.Attack(7, 3);
                        this.callForNearbyHelpFromType(575, "Torper");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(3, 1/3, true);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(5, 0.150, true);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor( this.costume ); //This rounds this.costume down to the nearest whole number.
                    //manual damaging
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1592, 40, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 1304, 38, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1671, 42, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 1409, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1740, 40, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(oldverse, 1504, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 3)
                    {
                        this.damageDealt = false; //this resets the potential for the Unit to damage its target, because by this point the unit has already passed the damaging phase.

                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1808, 40, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 4)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(oldverse, 1877, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(oldverse, 1967, 41, 75, 75, -43 - this.xAdjustment, -38 - this.yAdjustment, 75 * this.alphaSize, 75 * this.alphaSize);
                }
            }
            //NARTHWARP
            if (this.type == "Narthwarp")
            {
                //Set Drops and experience
                if (this.alpha == true)
                {
                    if (Math.max(0, 21 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 95 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (95 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("lrgNarthwarpMouth", this.X, this.Y), 1]];
                }
                else if (this.alpha == "baby")
                {
                    if (Math.max(0, 2 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 4 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (4 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [];
                }
                else
                {
                    if (Math.max(0, 9 - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 36 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (36 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }

                    this.drops = [[new Item("narthwarpMouth", this.X, this.Y), 1]];
                }


                //RANGE OF SIGHT (anything related to range of sight)
                if (this.alpha == true)
                {
                    this.rangeOfSightCalculator(550, "mildly");
                }
                else if (this.alpha == "baby")
                {
                    this.rangeOfSightCalculator(300, "mildly");
                }
                else
                {
                    this.rangeOfSightCalculator(425, "mildly");
                }

                //AI
                if (this.alive == true)
                {
                    if (this.alpha == true)
                    {
                        this.Attack(14, 7);
                        this.callForNearbyHelpFromType(550, "Narthwarp");
                    }
                    else if (this.alpha == "baby")
                    {
                        this.Attack(1, 1);
                        this.callForNearbyHelpFromType(300, "Narthwarp");
                    }
                    else
                    {
                        this.Attack(5, 4);
                        this.callForNearbyHelpFromType(425, "Narthwarp");
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                    this.pointTowardsPlayer();
                    this.moveInRelationToPlayer();

                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costumeEngine(4, 0.145, false);
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            this.costumeEngine(8, 0.4, false);
                        }
                    }

                    // the frames/stages/costumes of the animation.
                    var theCostume = Math.floor(this.costume); //This rounds this.costume down to the nearest whole number.
                    //manual damaging
                    if (theCostume <= 0)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 29, 400, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                        else
                        {
                            if (this.moving == false)
                            {
                                this.drawUnit(polypol, 29, 400, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                            }
                            else
                            {
                                this.drawUnit(polypol, 115, 401, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                            }
                        }
                    }
                    else if (theCostume == 1)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 32, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 212, 404, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 2)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 122, 491, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 308, 403, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 3)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 32, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                        else
                        {
                            this.drawUnit(polypol, 409, 404, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 4)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 29, 400, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 5)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 217, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                    else if (theCostume == 6)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 318, 489, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                    else if (theCostume >= 7)
                    {
                        if (this.attacking)
                        {
                            this.drawUnit(polypol, 217, 488, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                        }
                    }
                }
                else
                {
                    this.drawUnit(polypol, 416, 489, 71, 81, -43 - this.xAdjustment, -38 - this.yAdjustment, 71 * this.alphaSize, 81 * this.alphaSize);
                }
            }
            //PERSON
            if (this.type == "Person")
            {
                //RANGE OF SIGHT (anything related to range of sight)

                this.rangeOfSightCalculator(600, "true");

                //Unique Characters and special type -- drops and experience
                if (this.ID == "Laandeg the Alchemist")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 12]];
                }
                if (this.ID == "Svehn the Smith")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 95 + (quests.bobithNewWealth / 2)]];
                }
                else if (this.ID == "Medlia the Merchant")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 109 + (quests.medliaNewWealth / 2)]];
                }
                else if (this.ID == "Drohfor")
                {
                    this.drops = [[new Item("longbow", this.X, this.Y), 1], [new Item("arrow", this.X, this.Y), 19]];
                    this.customEXP = true;
                    this.experience = 65 * ((player.getIntelligence() / 50) + 1);
                }
                else if (this.ID == "Maggy the Tailor")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 115]];
                }
                else if (this.ID == "Odee the Banker")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 145]];
                }
                else if (this.ID == "Toggin")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 20], [new Item("timberAxe", this.X, this.Y), 1]];
                    this.customEXP = true;
                    this.experience = 25 * ((player.getIntelligence() / 50) + 1);
                }
                else if (this.ID == "Kedwin")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 2], [new Item("pintGlass", this.X, this.Y), 1]];
                    this.customEXP = true;
                    this.experience = 6 * ((player.getIntelligence() / 50) + 1);
                }
                else if (this.ID == "Neculai the Merchant")
                {
                    if (quests.bankruptNeculai != true || quests.medliaCompetitionControlCompletionStyle == "friendly" && quests.medliaCompetitionControlQuest == "complete")
                    {
                        this.drops = [[new Item("coins", this.X, this.Y), 17 + (quests.neculaiNewWealth / 2)]];
                    }
                    else
                    {
                        this.drops = [];
                    }

                    if (quests.theBalgurMercenariesQuest == true)
                    {
                       this.drops.push([new Item("neculaisEar", this.X, this.Y), 1]);
                    }



                    if (this.health < this.healthMAX && quests.medliaCompetitionControlCompletionStyle != "friendly" && quests.medliaCompetitionControlQuest == true)
                    {
                        quests.medliaCompetitionControlCompletionStyle = "violence";
                    }
                }
                else if (this.ID == "Roselin the Tailor")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 13]];
                }
                else if (this.ID == "Fenwik the Smith")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 38]];
                }
                else if (this.ID == "Chieftan Schuylar")
                {
                    this.drops = [[new Item("coins", this.X, this.Y), 97], [new Item("kellishClaymore", this.X, this.Y), 1]];
                    this.customEXP = true;
                    this.experience = 91 * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.drops = [];
                }

                if (this.customEXP == false)
                {
                    if (Math.max(0, (this.ultra.weapon[1][1] + this.ultra.weapon[1][0]) - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                    {
                        this.experience = 5 * ((player.getIntelligence() / 50) + 1);
                    }
                    else
                    {
                        this.experience = (5 * ((player.getIntelligence() / 50) + 1)) / 10;
                    }
                }

                //AI
                if (this.alive == true)
                {

                    if (this.disturbed == true)
                    {
                        this.hostile = true; //let the games animation know to display the person's name in red.

                        if (this.ultra.personality == "violent")
                        {
                            this.pointTowardsPlayer();
                            this.moveInRelationToPlayer();
                            if (this.ranged == false)
                            {
                                this.Attack(this.ultra.weapon[1][1], this.ultra.weapon[1][0]);
                            }

                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(1850, "Soldier");
                            }
                        }
                        else if (this.ultra.personality == "calculated")
                        {
                            if (player.weaponEquipped == "none" && player.armourTotal < 0.5)
                            {
                                this.fleeing = false;
                                this.ranged = this.ultra.ranged[0];
                                this.pointTowardsPlayer();
                                this.moveInRelationToPlayer();
                                if (this.ranged == false)
                                {
                                    this.Attack(this.ultra.weapon[1][1], this.ultra.weapon[1][0]);
                                }

                                if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                                {
                                    this.callForNearbyHelpFromType(1850, "Soldier");
                                }
                            }
                            else
                            {
                                this.ranged = false;
                                this.attacking = false;
                                this.moveInRelationToPlayer();
                                this.pointAwayFromPlayer();
                                if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                                {
                                    this.callForNearbyHelpFromType(1850, "Soldier");
                                }
                            }
                        }
                        else if (this.ultra.personality == "scared")
                        {
                            this.ranged = false;
                            this.moveInRelationToPlayer();
                            this.pointAwayFromPlayer();
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(1850, "Soldier");
                            }
                        }
                    }
                    else
                    {
                        this.hostile = false;
                        this.attacking = false;
                        this.fleeing = false;
                        this.dtp = this.DTP();
                        if (this.dtp > 35)
                        {
                            this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                        }
                        else
                        {
                            this.pointTowardsPlayer();
                            this.moving = false;
                        }
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                }
                else
                {
                    if (this.doOnDeathOnce == true)
                    {
                        //Faction relation decreases
                        if (this.ultra.faction == "Freynor")
                        {
                            player.freynorFaction -= 25;
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(1850, "Soldier");
                            }
                        }
                        else if (this.ultra.faction == "Orgell")
                        {
                            player.orgellFaction -= 25;
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(1850, "Soldier");
                            }
                        }
                        else if (this.ultra.faction == "Vardan")
                        {
                            player.vardanFaction -= 25;
                            if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(1850, "Soldier");
                            }
                        }

                        //Unique Characters Permanent Death
                        if (this.ID == "Laandeg the Alchemist")
                        {
                            uniqueChars.laandegLDS = false;
                            player.freynorFaction -= 6;
                        }
                        if (this.ID == "Svehn the Smith")
                        {
                            uniqueChars.bobithLDS = false;
                            player.freynorFaction -= 9;
                        }
                        else if (this.ID == "Medlia the Merchant")
                        {
                            uniqueChars.medliaLDS = false;
                            player.freynorFaction -= 12;
                        }
                        else if (this.ID == "Kedwin")
                        {
                            uniqueChars.kedwinLDS = false;
                            player.freynorFaction -= 7;
                        }
                        else if (this.ID == "Teber the Deserter" || this.ID == "Teber the Artisan")
                        {
                            uniqueChars.teberLDS = false;
                        }
                        else if (this.ID == "Hilmund the Innkeeper")
                        {
                            uniqueChars.hilmundLDS = false;
                            player.freynorFaction -= 15;
                        }
                        else if (this.ID == "Drohfor")
                        {
                            uniqueChars.drohforLDS = false;
                            player.freynorFaction -= 2;
                        }
                        else if (this.ID == "Maggy the Tailor")
                        {
                            uniqueChars.maggyLDS = false;
                            player.freynorFaction -= 14;
                        }
                        else if (this.ID == "Odee the Banker")
                        {
                            uniqueChars.odeeLDS = false;
                            player.freynorFaction -= 11;
                        }
                        else if (this.ID == "Toggin")
                        {
                            uniqueChars.togginLDS = false;
                            player.freynorFaction -= 6;
                        }
                        else if (this.ID == "Neculai the Merchant" || this.ID == "Neculai the Beggar")
                        {
                            uniqueChars.neculaiLDS = false;
                        }
                        else if (this.ID == "Fenwik the Smith")
                        {
                            uniqueChars.fenwikLDS = false;
                            player.kelFaction -= 10;
                        }
                        else if (this.ID == "Roselin the Tailor")
                        {
                            uniqueChars.roselinLDS = false;
                            player.kelFaction -= 12;
                        }
                        else if (this.ID == "Chieftan Schuylar")
                        {
                            uniqueChars.schuylarLDS = false;
                            player.kelFaction -= 100;
                        }
                        else
                        {
                            this.drops = [];
                        }

                        this.doOnDeathOnce = false;
                    }
                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving == false && this.attacking == false)
                    {
                        this.costume = 0;
                    }
                    else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costume = 0;
                        // the right leg goes back 25 pixles and the left goes forward 25.
                        if (this.lLegY < 23 && this.legSwitch == 0 )
                        {
                            // this makes the legs extend
                            this.lLegY += 11 / (16.75 - (0.17 / 2 * 80));
                            this.rLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                            //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                        }
                        else
                        {
                            //switch to the right leg forward routine.
                            this.legSwitch = 1;
                        }

                        // the left leg goes back 25 pixles and the right goes forward 25.
                        if (this.lLegY > -23 && this.legSwitch == 1)
                        {
                            // this makes the legs extend
                            this.lLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                            this.rLegY += 11 / (16.75 - (0.17 / 2 * 80));
                            //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                        }
                        else
                        {
                            // switch to the left leg forward routine.
                            this.legSwitch = 0;
                        }

                        //to put it simply, this function draws two lines that represent the main character's legs.
                        this.drawLegs = function()
                        {
                            XXX.save();
                            XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                            XXX.rotate(this.rotation - 1/2 * Math.PI);
                            XXX.beginPath();
                            XXX.strokeStyle ="black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(-4, 0);
                            XXX.lineTo(-4, 0 + this.lLegY);
                            XXX.stroke();
                            XXX.beginPath();
                            XXX.strokeStyle ="black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(4, 0);
                            XXX.lineTo(4, 0 + this.rLegY);
                            XXX.stroke();
                            XXX.restore();
                        };
                        this.drawLegs();
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if(new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            if (this.weapon == "none")
                            {
                                this.costumeEngine(6, 0.2, true);
                            }
                            else if (this.weapon == "freydicSword")
                            {
                                this.costumeEngine(7, 0.2, true);
                            }
                            else if (this.weapon == "freydicGreatSword")
                            {
                                this.costumeEngine(8, 0.23, true);
                            }
                            else if (this.weapon == "timberAxe")
                            {
                                this.costumeEngine(7, 0.25, true);
                            }
                            else if (this.weapon == "rasper")
                            {
                                this.costumeEngine(5, 0.20, true);
                            }
                            else if (this.weapon == "longSpikedMorningStar")
                            {
                                this.costumeEngine(7, 0.125, true);
                            }
                            else if (this.weapon == "warHammer")
                            {
                                this.costumeEngine(9, 0.22, true);
                            }
                            else if (this.weapon == "kellishClaymore")
                            {
                                this.costumeEngine(14, 0.32, true);
                            }
                            else if (this.weapon == "flail")
                            {
                                this.costumeEngine(11, 0.18, false);
                            }
                        }
                    }
                    //draw some weapons underneath the body
                    if (this.weapon == "freydicSword" || this.weapon == "longbow" || this.weapon == "crossbow" || this.weapon == "kellishClaymore")
                    {
                        this.drawHumanArms();
                    }

                    //Draw the Person's body
                    this.drawHuman();

                    //draw the others over it.
                    if (this.weapon != "freydicSword" && this.weapon != "longbow" && this.weapon != "crossbow" && this.weapon != "longSpikedMorningStar" && this.weapon != "kellishClaymore")
                    {
                        this.drawHumanArms();
                    }

                    //draw the Person's Outfit.
                    this.drawHumanOutfit(this.ultra.outfit[0], false);

                    //draw some weapons over the outfit
                    if (this.weapon == "longSpikedMorningStar")
                    {
                        this.drawHumanArms();
                    }
                }
                else
                {
                    this.drawHuman();
                    this.drawHumanOutfit("none", true);
                    this.drawUnit(verse, 0, 302, 35, 80, -20.5, -20, 57, 100, 1/2 * Math.PI);
                }
            };
            //SOLDIER
            if (this.type == "Soldier")
            {
                //Set Drops and experience

                if (Math.max(0, (this.ultra.weapon[1][0] + this.ultra.weapon[1][1]) - Math.max(0, player.armourTotal - this.negateArmour)) > 0)
                {
                    this.experience = 20 * this.con * ((player.getIntelligence() / 50) + 1);
                }
                else
                {
                    this.experience = (20 * this.con * ((player.getIntelligence() / 50) + 1)) / 10;
                }

                //AI
                if (this.alive == true)
                {
                    if (this.ultra.faction == "Freynor")
                    {
                        if (this.ID == "Torg Soldier" || this.ID == "Torg Captain" || this.ID == "Torg Commissioner Stendor")
                        {
                            //RANGE OF SIGHT (anything related to range of sight)
                            this.rangeOfSightCalculator(750, "true");

                            //All of this factions guards drop this:
                            this.drops = [[new Item("coins", this.X, this.Y), 1 + Math.random() * 24]];

                            lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                            // If the target has too low a level of relations with the faction they are an enemy.
                            if (player.freynorFaction <= -50)
                            {
                                if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction || player.freynorFaction <= -500)
                                {
                                    this.disturbed = true;
                                }
                                else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction|| this.health >= this.healthMAX * 5/6 && player.title == "Nobility" && player.raceName == this.ultra.faction)
                                {
                                    this.disturbed = false;
                                }
                            }
                            else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction|| this.health >= this.healthMAX * 5/6 && player.title == "Nobility" && player.raceName == this.ultra.faction)
                            {
                                this.disturbed = false;
                            }

                            //Call for help from other guards unless the culprit is the royal leader.
                            if (this.disturbed == true)
                            {
                                if (player.title != "Royalty" && player.title != "Nobility" || player.raceName != this.ultra.faction)
                                {
                                    this.callForNearbyHelpFromType(2000, "Soldier");
                                }
                            }

                            this.switchToRanged("longbow");
                        }
                        else
                        {
                            //RANGE OF SIGHT (anything related to range of sight)
                            this.rangeOfSightCalculator(750, "true");

                            //All of this factions guards drop this:
                            this.drops = [];

                            lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                            // If the target has too low a level of relations with the faction they are an enemy.
                            if (player.freynorFaction <= -50)
                            {
                                if (player.title != "Royalty" || player.raceName != this.ultra.faction || player.freynorFaction <= -500)
                                {
                                    this.disturbed = true;
                                }
                                else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction)
                                {
                                    this.disturbed = false;
                                }
                            }
                            else if (this.health >= this.healthMAX * 5/6 && player.title == "Royalty" && player.raceName == this.ultra.faction)
                            {
                                this.disturbed = false;
                            }

                            //Call for help from other guards unless the culprit is the royal leader.
                            if (this.disturbed == true)
                            {
                                if (player.title != "Royalty" || player.raceName != this.ultra.faction)
                                {
                                    this.callForNearbyHelpFromType(2000, "Soldier");
                                }
                            }

                            this.switchToRanged("longbow");
                        }
                    }
                    else if (this.ultra.faction == "Kel")
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(750, "true");

                        //All of this factions guards drop this:
                        this.drops = [];

                        lights.push({X: this.X, Y: this.Y, size: 85, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: false});
                        // If the target has too low a level of relations with the faction they are an enemy.
                        if (player.kelFaction <= -50)
                        {
                            this.disturbed = true;
                        }

                        //Call for help from other guards unless the culprit is the royal leader.
                        if (this.disturbed == true)
                        {
                            this.callForNearbyHelpFromType(2000, "Soldier");
                        }
                    }
                    else if (this.ultra.faction == "TheBalgurMercenaries")
                    {
                        if (player.theBalgurMercenariesFaction <= -50)
                        {
                            this.disturbed = true;
                        }

                        if (this.ID == "Mercenary Captain Kronheime")
                        {
                            //RANGE OF SIGHT (anything related to range of sight)
                            this.rangeOfSightCalculator(325, false);

                            this.drops = [[new Item("balgurCaptainArmour", this.X, this.Y), 1], [new Item("berulnToothNecklace", this.X, this.Y), 1], [new Item("flail", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), Math.floor(Math.random() * 140) + 43]];

                            if (this.disturbed == true)
                            {
                                this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                            }
                        }
                        else if (this.ID == "Balgur Mercenary")
                        {
                            //RANGE OF SIGHT (anything related to range of sight)
                            this.rangeOfSightCalculator(300, false);

                            this.drops = [[new Item("balgurMercArmour", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), Math.floor(Math.random() * 14) + 5]];

                            if (this.disturbed == true)
                            {
                                this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                            }
                        }
                    }
                    else if (this.ultra.faction == "hostile")
                    {
                        if (this.ID == "Northern Bandit")
                        {
                            //RANGE OF SIGHT (anything related to range of sight)
                            this.rangeOfSightCalculator(325, false);

                            this.drops = [[new Item("coins", this.X, this.Y), Math.floor(Math.random() * 5) + 1]];

                            this.disturbed = true;

                            if (this.disturbed == true)
                            {
                                this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                            }
                        }
                        if (this.ID == "Hetmer The Bandit Chief")
                        {
                            //RANGE OF SIGHT (anything related to range of sight)
                            this.rangeOfSightCalculator(350, false);

                            this.drops = [[new Item("hetmerArmour", this.X, this.Y), 1], [new Item("coins", this.X, this.Y), Math.floor(Math.random() * 33) + 6]];

                            this.disturbed = true;

                            if (this.disturbed == true)
                            {
                                this.callForNearbyHelpFromType(this.rangeOfSight, "Soldier");
                            }

                            this.switchToRanged("longbow");
                        }
                    }
                    else
                    {
                        //RANGE OF SIGHT (anything related to range of sight)
                        this.rangeOfSightCalculator(750, "true");

                        //Call for help from other guards unless the culprit is the royal leader.
                        if (this.disturbed == true)
                        {
                            if (player.title != "Royalty" || player.raceName != this.ultra.faction)
                            {
                                this.callForNearbyHelpFromType(2000, "Soldier");
                            }
                        }

                        this.drops = [];
                    }

                    if (this.disturbed == true)
                    {
                        this.hostile = true; //let the games animation know to display the person's name in red.
                        this.pointTowardsPlayer();
                        this.moveInRelationToPlayer();
                        if (this.ranged == false)
                        {
                            this.Attack(this.ultra.weapon[1][1], this.ultra.weapon[1][0]);
                        }
                    }
                    else
                    {
                        this.weapon = this.ultra.weapon[0];
                        this.hostile = false;
                        this.attacking = false;
                        this.dtp = this.DTP();
                        if (this.dtp > 35)
                        {
                            this.patrol(this.ultra.patrolStops, this.ultra.patrolLoop);
                        }
                        else
                        {
                            this.pointTowardsPlayer();
                            this.moving = false;
                        }
                    }

                    //this.deathChecker();
                    this.disturbedTimer();
                    this.visibleSight();
                }
                else
                {
                    if (this.doOnDeathOnce == true)
                    {
                        if (this.ultra.faction == "hostile")
                        {
                            if (this.ID == "Northern Bandit" || this.ID == "Hetmer The Bandit Chief")
                            {
                                this.callForNearbyHelpFromType(350, "Soldier");
                            }
                        }
                        else if (player.title != "Royalty" || player.raceName != this.ultra.faction)
                        {
                            this.callForNearbyHelpFromType(2000, "Soldier");
                        }
                        //Faction relation decreases
                        if (this.ultra.faction == "Freynor")
                        {
                            player.freynorFaction -= 50;
                        }
                        //Unique Characters Permanent Death
                        if (this.ID == "Hetmer The Bandit Chief")
                        {
                            uniqueChars.hetmerLDS = false;
                        }
                        else if (this.ID == "Mercenary Captain Kronheime")
                        {
                            uniqueChars.kronheimeLDS = false;
                            player.theBalgurMercenariesFaction -= 75;
                        }
                        else if (this.ID == "Torg Commissioner Stendor")
                        {
                            uniqueChars.stendorLDS = false;
                            player.freynorFaction -= 80;
                        }

                        //track Deaths Of Certain Non-Unique Units During Certain Quests

                            //during the TeshirNorthRoadQuest the number of bandits you kill is tracked.
                        if (quests.teshirNorthRoadQuest == true)
                        {
                            if (this.ID == "Northern Bandit")
                            {
                                quests.teshirNorthRoadKillCount += 1;
                            }
                        }
                        if (quests.theBalgurMercenariesQuest == true)
                        {
                            if (this.ID == "Balgur Mercenary")
                            {
                                quests.theBalgurMercenariesMercsKilled += 1;
                                player.theBalgurMercenariesFaction -= 50;
                            }
                        }

                        this.doOnDeathOnce = false;
                    }
                }

                //ANIMATIONS

                if (this.alive == true)
                {
                    if (this.moving == false && this.attacking == false)
                    {
                        this.costume = 0;
                    }
                    else if (this.moving && !this.attacking) //If moving and not attacking initiate moving animation...
                    {
                        this.costume = 0;
                        // the right leg goes back 25 pixles and the left goes forward 25.
                        if (this.lLegY < 23 && this.legSwitch == 0)
                        {
                            // this makes the legs extend
                            this.lLegY += 11 / (16.75 - (0.17 / 2 * 80));
                            this.rLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                            //console.log("left" + " " + self.lLegY + " " + self.rLegY);
                        }
                        else
                        {
                            //switch to the right leg forward routine.
                            this.legSwitch = 1;
                        }

                        // the left leg goes back 25 pixles and the right goes forward 25.
                        if (this.lLegY > -23 && this.legSwitch == 1)
                        {
                            // this makes the legs extend
                            this.lLegY -= 11 / (16.75 - (0.17 / 2 * 80));
                            this.rLegY += 11 / (16.75 - (0.17 / 2 * 80));
                            //console.log("right" + " " + self.lLegY + " " + self.rLegY);
                        }
                        else
                        {
                            // switch to the left leg forward routine.
                            this.legSwitch = 0;
                        }

                        //to put it simply, this function draws two lines that represent the main character's legs.
                        this.drawLegs = function ()
                        {
                            XXX.save();
                            XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
                            XXX.rotate(this.rotation - 1 / 2 * Math.PI);
                            XXX.beginPath();
                            XXX.strokeStyle = "black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(-4, 0);
                            XXX.lineTo(-4, 0 + this.lLegY);
                            XXX.stroke();
                            XXX.beginPath();
                            XXX.strokeStyle = "black";
                            XXX.lineWidth = 2;
                            XXX.moveTo(4, 0);
                            XXX.lineTo(4, 0 + this.rLegY);
                            XXX.stroke();
                            XXX.restore();
                        };
                        this.drawLegs();
                    }
                    else if (this.attacking) //otherwise if it is attacking then initiate attacking animation, and if neither...
                    {
                        if (new Date().getTime() - this.timeBetweenAttacks > (this.attackWait * 1000))
                        {
                            if (this.weapon == "none")
                            {
                                this.costumeEngine(6, 0.2, true);
                            }
                            else if (this.weapon == "freydicSword")
                            {
                                this.costumeEngine(7, 0.2, true);
                            }
                            else if (this.weapon == "freydicGreatSword")
                            {
                                this.costumeEngine(8, 0.23, true);
                            }
                            else if (this.weapon == "timberAxe")
                            {
                                this.costumeEngine(7, 0.25, true);
                            }
                            else if (this.weapon == "rasper")
                            {
                                this.costumeEngine(5, 0.20, true);
                            }
                            else if (this.weapon == "longSpikedMorningStar")
                            {
                                this.costumeEngine(7, 0.125, true);
                            }
                            else if (this.weapon == "warHammer")
                            {
                                this.costumeEngine(9, 0.22, true);
                            }
                            else if (this.weapon == "kellishClaymore")
                            {
                                this.costumeEngine(14, 0.32, true);
                            }
                            else if (this.weapon == "flail")
                            {
                                this.costumeEngine(11, 0.18, false);
                            }
                        }
                    }
                    //draw some weapons underneath the body
                    if (this.weapon == "freydicSword" || this.weapon == "longbow" || this.weapon == "crossbow" || this.weapon == "kellishClaymore")
                    {
                        this.drawHumanArms();
                    }

                    //Draw the Person's body
                    this.drawHuman();

                    //draw the others over it.
                    if (this.weapon != "freydicSword" && this.weapon != "longbow" && this.weapon != "crossbow" && this.weapon != "longSpikedMorningStar" && this.weapon != "kellishClaymore")
                    {
                        this.drawHumanArms();
                    }

                    //draw the Person's Outfit.
                    this.drawHumanOutfit(this.ultra.outfit[0], false);

                    //draw some weapons over the outfit
                    if (this.weapon == "longSpikedMorningStar")
                    {
                        this.drawHumanArms();
                    }
                }
                else
                {
                    this.drawHuman();
                    this.drawHumanOutfit("none", true);
                    this.drawUnit(verse, 0, 302, 35, 80, -20.5, -20, 57, 100, 1 / 2 * Math.PI);
                }
            }
        };
        //OPERATION [all of the functions in this class are activated here]
        this.operation = function()
        {
            this.activateUnits();

            if (this.alive == true)
            {
                this.turnToDestination();
                this.deathChecker();
                this.unStack();
                this.effected(this.resistances);
            }

            if (this.alive == true || new Date().getTime() - this.timeSinceDead < 1000)
            {
                this.showHealthWhenHurt();
            }
            else if (new Date().getTime() - this.timeSinceDead > 90000)
            {
                var me = deadAIList.indexOf(this);
                deadAIList.splice(me, 1);
            }

            //this is a test to see where the true center of the unit is.
            if (testingUnitCenters == true && this.alive == true)
            {
                this.testForCenter();
            }

            //Error Sponge: this sucks up the nasty draw errors that affect the last thing drawn.
            XXX.beginPath();
            XXX.lineWidth = 1;
            XXX.fillStyle = "black";
            XXX.arc(-100, -100, 5, 0, Math.PI);
            XXX.fill();
            XXX.stroke();
            
            //this is a test to see what the true size of the unit is.
            if (testingUnitSizes == true && this.alive == true)
            {
                this.testForSize();
            }
        };
    };

    function Scenery(type, x, y, rotation, longevity, information) //longevity is used either to portray permanence or ownership, information is an extra input for anything
    {
        this.type = type;
        this.X = x;
        this.Y = y;
        this.radius = 1;
        this.rotation = rotation;
        this.temporary = longevity; //This is whether or not it will stay permanently or is subject to despawning after time.
        this.owned = longevity; //if an items longevity is unimportant or is obvious that can be used to define its ownership.
        this.solid = false;
        this.mouser = 10000; //this is the measurement of the mouse's distance from the Scenery object.
        this.playerer = 10000; //this is the measurement of the player's distance from the Scenery object.
        this.counter = 0; //this is a call regulating variable that works to make sure heavy code isn't called too often.
        this.activate = false; //this is a flag that turns true when the Scenery object is clicked.
        this.interactionRange = 0;
        this.zIndex = 1;
        this.loopNum = 0;
        this.loopRate = 0;
        this.frameLoopComplete = false;
        this.runOneTime = true; //this will not be used in general functions, only for making sure each type of scenery can run something only once.
        //Campfire variables
        this.lit = false;
        this.fireCostume = 0;
        this.campFireTime = 0;
        this.burnt = false;
        this.burntTime = 0;
        this.gotFireStarter = false;
        //Well Variables
        this.wellListo = true;
        this.toggleWell = false;
        this.wellUp = false;
        this.wellChange = false;
        //Tree Variables
        this.treePhase = 0;
        this.treeHealth = 120;
        //Bird variables
        this.eggHatchTimer = 0;
        //Plant Variables
        this.phase = 0;
        //light source variables
        this.lightGetTime = new Date().getTime();
        this.lightTime = 0;

        this.changeFactionRelation = function(changeAmount)
        {
            if (this.owned.length > 1)
            {
                if (this.owned = "freynor")
                {
                    player.freynorFaction += changeAmount;
                }
                else if (this.owned = "kel")
                {
                    player.kelFaction += changeAmount;
                }
                else if (this.owned = "vardan")
                {
                    player.vardanFaction += changeAmount;
                }
                else if (this.owned = "nirwaden")
                {
                    player.nirwadenFaction += changeAmount;
                }
                else if (this.owned = "outlander")
                {
                    player.outlanderFaction += changeAmount;
                }
                else if (this.owned = "aldrek")
                {
                    player.aldrekFaction += changeAmount;
                }
                else if (this.owned = "cephrite")
                {
                    player.cephriteFaction += changeAmount;
                }
                else if (this.owned = "orgel")
                {
                    player.orgelFaction += changeAmount;
                }
                else if (this.owned = "thengar")
                {
                    player.thengarFaction += changeAmount;
                }
            }
        };

        this.countAdder = function()
        {
            this.counter += 1 * (TTD / 16.75);
        };

        this.count = function()
        {
            if (this.counter >= 80)
            {
                this.counter = 0;
                return true;
            }
            else
            {
                return false;
            }
        };

        // []
        this.frameLoop = function(theLoop, loopLimit, loopingRate, endless)
        {
            if (theLoop != [])
            {
                if (this.frameLoopComplete == false)
                {
                    this.loopRate += 1;
                }

                if (this.loopRate > loopingRate)
                {
                    this.loopRate = 0;

                    if (this.frameLoopComplete == false)
                    {
                        this.loopNum += 1;
                    }
                }

                if (this.loopNum > loopLimit)
                {
                    this.loopNum = 0;
                    if (endless == false)
                    {
                        this.frameLoopComplete = true;
                    }
                }

                if (this.frameLoopComplete == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theLoop[this.loopNum][0], theLoop[this.loopNum][1], theLoop[this.loopNum][2], theLoop[this.loopNum][3], theLoop[this.loopNum][4], -(1/2 * theLoop[this.loopNum][5]), -(1/2 * theLoop[this.loopNum][6]), theLoop[this.loopNum][5], theLoop[this.loopNum][6]);
                    XXX.restore();
                }
            }
        };


        this.mouseSensing = function()
        {
            if (this.count())
            {
                this.mouser = Math.sqrt(((X - mouseX + 1/2 * CCC.width) - this.X)*((X - mouseX + 1/2 * CCC.width) - this.X) + ((Y - mouseY + 1/2 * CCC.height) - this.Y)*((Y - mouseY + 1/2 * CCC.height) - this.Y));
                this.playerer = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y - this.Y));
                //console.log("mouser " + this.mouser + " playerer " + this.playerer);
            }

            if (this.mouser <= this.radius && this.playerer <= this.interactionRange)
            {
                //Make sure the player and the mouse are both still there...
                this.mouser = Math.sqrt(((X - mouseX + 1/2 * CCC.width) - this.X)*((X - mouseX + 1/2 * CCC.width) - this.X) + ((Y - mouseY + 1/2 * CCC.height) - this.Y)*((Y - mouseY + 1/2 * CCC.height) - this.Y));
                this.playerer = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y - this.Y));

                if (dClick)
                {
                    dClick = false;
                    this.activate = true;
                }
            }

        };

        this.typeBuilder = function()
        {
            if (this.type == "pineStumps")
            {
                //TRAITS
                this.solid = false;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 1, 1685, 156, 109, -(1/2 * 156 * 8), -(1/2 * 109 * 8), 156 * 8, 109 * 8);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 17;

            }
            else if (this.type == "mofuNest")
            {
                //TRAITS
                this.solid = false;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mofu, 123, 89, 30, 29, -(1/2 * 30 * longevity), -(1/2 * 29 * longevity), 30 * longevity, 29 * longevity);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 20;

            }
            else if (this.type == "anvil")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2877, 149, 27, 15, -(1/2 * 54), -(1/2 * 30), 54, 30);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 17;

                //INTERACTION
                if (this.activate == true && player.weaponEquipped == "hammer")
                {
                    this.activate = false;
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "smithing";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
            else if (this.type == "candle")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 45;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 33, 16, 9, 9, -(1/2 * 9 * 1.2), -(1/2 * 9 * 1.2), 9 * 1.2, 9 * 1.2);
                XXX.restore();

                // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
                if (this.runOneTime == true)
                {
                    this.runOneTime = false;
                    this.lightTime = information[0];
                }

                if (longevity != true)
                {
                    if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                    {
                        lights.push({X: this.X, Y: this.Y, size: 65, extraStops: true, GRD: 0.35, Alpha: 0.5, showMe: false});
                    }
                    else
                    {
                        if (information[1] == 3)
                        {
                            worldItems.push([new Item("candle2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("candle1", this.X, this.Y), 1])
                        }
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                else
                {
                    lights.push({X: this.X, Y: this.Y, size: 65, extraStops: true, GRD: 0.35, Alpha: 0.5, showMe: false});
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 8;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    if (player.getIntelligence() < 1)
                    {
                        player.health = Math.min(player.health, player.health - (0.25 - player.heatResistance)); //it burns the players finger :( ... or not
                    }
                    else if (longevity != true)
                    {
                        if (information[1] == 3)
                        {
                            worldItems.push([new Item("candle2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("candle1", this.X, this.Y), 1])
                        }
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }

                }
            }
            else if (this.type == "jackOLantern")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 45;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 4, 100, 17, 18, - (1/2 * 17 * 1.2), - (1/2 * 18 * 1.2), 17 * 1.2, 18 * 1.2);
                XXX.restore();

                // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
                if (this.runOneTime == true)
                {
                    this.runOneTime = false;
                    this.lightTime = information[0];
                }

                if (longevity != true)
                {
                    if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                    {
                        lights.push({X: this.X, Y: this.Y, size: 85, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: false});
                    }
                    else
                    {
                        if (information[1] == 3)
                        {
                            worldItems.push([new Item("jackOLantern2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("jackOLantern1", this.X, this.Y), 1])
                        }
                        else if (information[1] == 1)
                        {
                            worldItems.push([new Item("jackOLanternEmpty", this.X, this.Y), 1])
                        }

                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                else
                {
                    lights.push({X: this.X, Y: this.Y, size: 85, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: false});
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 14;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    if (longevity != true)
                    {
                        if (information[1] == 3)
                        {
                            worldItems.push([new Item("jackOLantern2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("jackOLantern1", this.X, this.Y), 1])
                        }
                        else if (information[1] == 1)
                        {
                            worldItems.push([new Item("jackOLanternEmpty", this.X, this.Y), 1])
                        }

                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            }
            else if (this.type == "oilLamp")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 45;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 51, 110, 14, 15, - (1/2 * 14 * 1.2), - (1/2 * 15 * 1.2), 14 * 1.2, 15 * 1.2);
                XXX.restore();

                // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
                if (this.runOneTime == true)
                {
                    this.runOneTime = false;
                    this.lightTime = information[0];
                }

                if (longevity != true)
                {
                    if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                    {
                        lights.push({X: this.X, Y: this.Y, size: 175, extraStops: true, GRD: 0.7, Alpha: 0.8, showMe: false});
                    }
                    else
                    {
                        if (information[1] == 3)
                        {
                            worldItems.push([new Item("oilLamp2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("oilLamp1", this.X, this.Y), 1])
                        }
                        else if (information[1] == 1)
                        {
                            worldItems.push([new Item("oilLampEmpty", this.X, this.Y), 1])
                        }

                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                else
                {
                    lights.push({X: this.X, Y: this.Y, size: 175, extraStops: true, GRD: 0.7, Alpha: 0.8, showMe: false});
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 11;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    if (longevity != true)
                    {
                        if (information[1] == 3)
                        {
                            worldItems.push([new Item("oilLamp2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("oilLamp1", this.X, this.Y), 1])
                        }
                        else if (information[1] == 1)
                        {
                            worldItems.push([new Item("oilLampEmpty", this.X, this.Y), 1])
                        }

                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            }
            else if (this.type == "oilLantern")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 45;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 26, 109, 16, 16, - (1/2 * 16 * 1.2), - (1/2 * 16 * 1.2), 16 * 1.2, 16 * 1.2);
                XXX.restore();

                // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
                if (this.runOneTime == true)
                {
                    this.runOneTime = false;
                    this.lightTime = information[0];
                }

                if (longevity != true)
                {
                    if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                    {
                        lights.push({X: this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                    }
                    else
                    {
                        if (information[1] == 5)
                        {
                            worldItems.push([new Item("oilLantern4", this.X, this.Y), 1])
                        }
                        else if (information[1] == 4)
                        {
                            worldItems.push([new Item("oilLantern3", this.X, this.Y), 1])
                        }
                        else if (information[1] == 3)
                        {
                            worldItems.push([new Item("oilLantern2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("oilLantern1", this.X, this.Y), 1])
                        }
                        else if (information[1] == 1)
                        {
                            worldItems.push([new Item("oilLanternEmpty", this.X, this.Y), 1])
                        }

                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                else
                {
                    lights.push({X: this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 11;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    if (longevity != true)
                    {
                        if (information[1] == 5)
                        {
                            worldItems.push([new Item("oilLantern4", this.X, this.Y), 1])
                        }
                        else if (information[1] == 4)
                        {
                            worldItems.push([new Item("oilLantern3", this.X, this.Y), 1])
                        }
                        else if (information[1] == 3)
                        {
                            worldItems.push([new Item("oilLantern2", this.X, this.Y), 1])
                        }
                        else if (information[1] == 2)
                        {
                            worldItems.push([new Item("oilLantern1", this.X, this.Y), 1])
                        }
                        else if (information[1] == 1)
                        {
                            worldItems.push([new Item("oilLanternEmpty", this.X, this.Y), 1])
                        }

                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            }
            else if (this.type == "fertilizedMofuEgg")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 55;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mofu, 109, 54, 8, 11, -(1/2 * 8), -(1/2 * 11), 8, 11);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 5;

                //HATCHING
                this.eggHatchTimer += 1 * (TTD / 16.75);
                if (this.eggHatchTimer >= 15000)
                {
                    this.eggHatchTimer = -1000000;
                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Mofu", "baby", "Generic Mofu"));
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    worldItems.push([new Item("mofuEgg", this.X, this.Y), 1]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else if (this.type == "rubbledHome")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 135;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 273, 416, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                XXX.drawImage(freeverse, 306, 487, 28, 13, -(8.5 * 2.5), (19 * 2.5), 28 * 2.5, 13 * 2.5);
                XXX.drawImage(freeverse, 363, 411, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 90;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                }
            }
            else if (this.type == "brokenWell")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 146, 336, 47, 40, -(1/2 * 47 * 1.6), -(1/2 * 40 * 1.6), 47 * 1.6, 40 * 1.6);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 27;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                }
            }
            else if (this.type == "well")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF

                if (this.wellChange == true)
                {
                    this.wellListo = false;
                    if (this.toggleWell == true)
                    {
                        this.frameLoop([[freeverse, 87, 46, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87, 85, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 145, 84, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 202, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 306, 82, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 308, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 198, 125, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 140, 126, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87.65, 125.65, 47, 40, 47 * 1.6, 40 * 1.6]], 10, 18, false);
                        if (this.frameLoopComplete == true)
                        {
                            this.wellChange = false;
                            this.wellUp = true;
                            this.wellListo = true;
                        }
                    }
                    else if (this.toggleWell == false)
                    {
                        this.frameLoop([[freeverse, 87.65, 125.65, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 140, 126, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 198, 125, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 308, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 306, 82, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 202, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 145, 84, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87, 85, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87, 46, 47, 40, 47 * 1.6, 40 * 1.6]], 10, 18, false);
                        if (this.frameLoopComplete == true)
                        {
                            this.wellChange = false;
                            this.wellUp = false;
                            this.wellListo = true;
                        }
                    }
                }

                if (this.wellChange == false)
                {
                    if (this.wellUp == true)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(freeverse, 87.65, 125.65, 47, 40, -(1/2 * 47 * 1.6), -(1/2 * 40 * 1.6), 47 * 1.6, 40 * 1.6);
                        XXX.restore();
                    }
                    else if (this.wellUp == false)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(freeverse, 87, 46, 47, 40, -(1/2 * 47 * 1.6), -(1/2 * 40 * 1.6), 47 * 1.6, 40 * 1.6);
                        XXX.restore();
                    }
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 27;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    if (this.wellListo)
                    {
                        this.wellChange = true;
                        this.loopNum = 0;
                        this.loopRate = 0;
                        this.frameLoopComplete = false;

                        //fill container with water
                        if (this.wellUp == true)
                        {
                            this.doBreak = false;
                            this.yaTiene = false;

                            for (var i = 0; i < Inventory.length; i++)
                            {
                                for (var j = 0; j < wellConversionList.length; j++)
                                {
                                    //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                    if (Inventory[i][0].type == wellConversionList[j][0])
                                    {
                                        for (var k = 0; k < Inventory.length; k++)
                                        {
                                            if (Inventory[k][0].type == wellConversionList[j][1])
                                            {
                                                this.yaTiene = k;
                                            }
                                        }

                                        if (Inventory[i][1] > 1)
                                        {
                                            Inventory[i][1] -= 1;
                                            if (this.yaTiene == false)
                                            {
                                                Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                            }
                                            else
                                            {
                                                Inventory[this.yaTiene][1] +=1;
                                            }
                                            this.doBreak = true;
                                            break;
                                        }
                                        else
                                        {
                                            if (this.yaTiene == false)
                                            {
                                                Inventory.splice(i, 1);
                                                Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                            }
                                            else
                                            {
                                                Inventory[this.yaTiene][1] +=1;
                                                Inventory.splice(i, 1);
                                            }
                                            this.doBreak = true;
                                            break;
                                        }
                                    }
                                }
                                if (this.doBreak == true)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    if (this.toggleWell == false && this.wellListo)
                    {
                        this.toggleWell = true;
                    }
                    else if (this.toggleWell == true && this.wellListo)
                    {
                        this.toggleWell = false;
                    }
                }
            }
            else if (this.type == "forge")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2907, 149, 35, 19, -(1/2 * 70), -(1/2 * 38), 70, 38);
                XXX.restore();

                //produce light
                if (timeOfDay != "Day")
                {
                    lights.push({X:this.X, Y: this.Y, size: 100, extraStops: true, GRD: 0.25, Alpha: 0.875, showMe: false});
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 25;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "forging";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
            else if (this.type == "loom")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2841, 139, 34, 26, -(1/2 * 68), -(1/2 * 52), 68, 52);
                XXX.drawImage(verse, 2841, 139, 34, 26, -(1/2 * 68), -(1/2 * 52), 68, 52);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "tailoring";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
            else if (this.type == "lab")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2890, 125, 32, 22, -(1/2 * 64), -(1/2 * 44), 64, 44);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "alchemy";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
            else if (this.type == "grushweedPlant")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 3022, 233, 40, 42, -1/2 * 20 * longevity, -1/2 * 42 * longevity, 40 * longevity, 42 * longevity);
                    XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 16 * longevity;
            }
            else if (this.type == "neprilnePlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 100;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2029, 501, 46, 42, -(1/2 * 46), -(1/2 * 42), 46, 42);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2088, 501, 46, 42, -(1/2 * 46), -(1/2 * 42), 46, 42);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "neprilneBerries")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("neprilneBerries", false, false), 1]);
                    }
                }
            }
            else if (this.type == "potatoPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 40;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2912, 68, 20, 19, -(1/2 * 20), -(1/2 * 19), 20, 19);
                    XXX.restore();
                }
                else
                {
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 18;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";

                    //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-7);
                        }
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "potato")
                        {
                            Inventory[i][1] += Math.floor(Math.random() * 6) + 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("potato", false, false), Math.floor(Math.random() * 6) + 1]);
                    }
                }
            }
            else if (this.type == "carrotPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 40;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2892, 73, 13, 12, -(1/2 * 13), -(1/2 * 12), 13, 12);
                    XXX.restore();
                }
                else
                {
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 18;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";

                    //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-5);
                        }
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "carrot")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("carrot", false, false), 1]);
                    }
                }
            }
            else if (this.type == "glinPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 60;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 26, 1, 26, 23, -(1/2 * 26), -(1/2 * 23), 26, 23);
                    XXX.restore();
                }
                else
                {
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 18;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "glinMushrooms")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("glinMushrooms", false, false), 1]);
                    }
                }
            }
            else if (this.type == "halcifPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 45;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 7, 58, 26, 22, -(1/2 * 26), -(1/2 * 22), 26, 22);
                    XXX.restore();
                }
                else
                {
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 14;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    if (player.glovesEquipped == "none")
                    {
                        player.poisonIII = true;
                    }
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "halcifMushroom")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("halcifMushroom", false, false), Math.floor(1 + Math.random() * 6)]);
                    }
                }
            }
            else if (this.type == "cyrinthilimPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 60;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 7, 29, 38, 23, -(1/2 * 38), -(1/2 * 23), 38, 23);
                    XXX.restore();
                }
                else
                {
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 18;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "cyrinthilimMushroom")
                        {
                            Inventory[i][1] += Math.floor(Math.random() * 5) + 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("cyrinthilimMushroom", false, false), Math.floor(Math.random() * 5) + 1]);
                    }
                }
            }
            else if (this.type == "culprisPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 85;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2075, 194, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2120, 195, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 17;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "culprisLeaf")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("culprisLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
            else if (this.type == "harstPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 85;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 240, 27, 17, 19, -(1/2 * 17 * 2), -(1/2 * 19 * 2), 17 * 2, 19 * 2);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 261, 42, 17, 19, -(1/2 * 17 * 2), -(1/2 * 19 * 2), 17 * 2, 19 * 2);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 17;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";

                    //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-5);
                        }
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "harstGrain")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("harstGrain", false, false), Math.floor(1 + Math.random() * 2)]);
                    }
                }
            }
            else if (this.type == "santhPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 85;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2972, 178, 24, 23, -(1/2 * 24), -(1/2 * 23), 24, 23);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2941, 178, 24, 23, -(1/2 * 24), -(1/2 * 23), 24, 23);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 17;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";

                    //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-19);
                        }
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "santhGrain")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("santhGrain", false, false), 1]);
                    }
                }
            }
            else if (this.type == "suuliPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 90;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2878, 92, 49, 50, -(1/2 * 49), -(1/2 * 50), 49, 50);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(oldverse, 2947, 94, 49, 50, -(1/2 * 49), -(1/2 * 50), 49, 50);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 17;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";

                    //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-17);
                        }
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "suuliMelon")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("suuliMelon", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
            else if (this.type == "pumpkinPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 80;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(candlewic, 27, 28, 56, 39, -(1/2 * 56 * 1.2), -(1/2 * 39 * 1.2), 56 * 1.2, 39 * 1.2);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(candlewic, 27, 64, 56, 39, -(1/2 * 56 * 1.2), -(1/2 * 39 * 1.2), 56 * 1.2, 39 * 1.2);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 17;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";

                    //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-14);
                        }
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "pumpkin")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("pumpkin", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
            else if (this.type == "tylunPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 60;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2113, 150, 32, 30, -(1/2 * 32), -(1/2 * 30), 32, 30);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2078, 150, 32, 30, -(1/2 * 32), -(1/2 * 30), 32, 30);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 19;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "tylunFlower")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("tylunFlower", false, false), 1]);
                    }
                }
            }
            else if (this.type == "akerPlant")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 95;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2103, 73, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2060, 73, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "akerBerries")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 5);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("akerBerries", false, false), Math.floor(1 + Math.random() * 5)]);
                    }
                }
            }
            else if (this.type == "bushkaPlant")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 80;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(candlewic, 1, 174, 41, 33, -(1/2 * 41), -(1/2 * 33), 41, 33);
                    XXX.restore();
                }
                if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(candlewic, 2, 138, 41, 33, -(1/2 * 41), -(1/2 * 33), 41, 33);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(candlewic, 40, 138, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 18;

                //INTERACTION
                if (this.activate == true && this.phase != "picked")
                {
                    this.activate = false;
                    if (this.phase == 0)
                    {

                        this.phase = 1;
                        var hits = 0;
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].type == "bushkaBerries")
                            {
                                Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                                break;
                            }
                            else
                            {
                                hits += 1;
                            }
                        }
                        if (hits == Inventory.length)
                        {
                            Inventory.push([new Item("bushkaBerries", false, false), Math.floor(1 + Math.random() * 6)]);
                        }
                    }
                    else if (this.phase == 1)
                    {

                        this.phase = "picked";
                        var hits = 0;
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].type == "bushkaLeaves")
                            {
                                Inventory[i][1] += Math.floor(2 + Math.random() * 7);
                                break;
                            }
                            else
                            {
                                hits += 1;
                            }
                        }
                        if (hits == Inventory.length)
                        {
                            Inventory.push([new Item("bushkaLeaves", false, false), Math.floor(2 + Math.random() * 7)]);
                        }
                    }
                }
            }
            else if (this.type == "pluttPlant")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 95;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2064, 245, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2113, 245, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "pluttBerries")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("pluttBerries", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
            else if (this.type == "stomwikPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 90;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2112, 112, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2078, 108, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 18;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "stomwikLeaf")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 5);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("stomwikLeaf", false, false), Math.floor(1 + Math.random() * 5)]);
                    }
                }
            }
            else if (this.type == "techiPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 90;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(candlewic, 79, 108, 18, 21, -(1/2 * 18), -(1/2 * 21), 18, 21);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(candlewic, 79, 128, 18, 21, -(1/2 * 18), -(1/2 * 21), 18, 21);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 18;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "techiLeaf")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("techiLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
            else if (this.type == "ogardPlant")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 85;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 60, 66, 34, 32, -(1/2 * 34 * 1.3), -(1/2 * 32 * 1.3), 34 * 1.3, 32 * 1.3);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(poly, 19, 65, 34, 32, -(1/2 * 34 * 1.3), -(1/2 * 32 * 1.3), 34 * 1.3, 32 * 1.3);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "ogard")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("ogard", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
            else if (this.type == "tent")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 110;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 162, 1436, 40, 45, -(1/2 * 80), -(1/2 * 90), 80, 90);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 42;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    if (player.weaponEquipped == "hammer" && longevity == false) //if hammer is equipped deconstruct the tent.
                    {
                        worldItems.push([new Item("tent", this.X, this.Y), 1]);
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }

                    }
                    else
                    {
                        sleep();
                    }
                }
            }
            else if (this.type == "pineTree")
            {
                //TRAITS
                this.solid = true;
                this.interactionRange = 120;

                //DRAWSELF
                if (this.treePhase == 0)
                {
                    if (this.playerer < 130)
                    {
                        this.zIndex = 5;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * 4.5), -(1/2 * 28 * 4.5), 28 * 4.5, 28 * 4.5);
                        XXX.restore();

                        XXX.globalAlpha = 0.96;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3783, 317, 79, 71, -(1/2 * 79 * 4.5), -(1/2 * 71 * 4.5), 79 * 4.5, 71 * 4.5);
                        XXX.restore();
                        XXX.globalAlpha = 1;
                    }
                    else
                    {
                        this.zIndex = 5;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3783, 317, 79, 71, -(1/2 * 79 * 4.5), -(1/2 * 71 * 4.5), 79 * 4.5, 71 * 4.5);
                        XXX.restore();
                    }
                }
                else if (this.treePhase == 1)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 1, 1597, 165, 82, -(1/2 * 25 * 4.5), -(1/2 * 80 * 4.5), 165 * 4.5, 82 * 4.5);
                    XXX.restore();
                }
                else if (this.treePhase == 2)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * 4.5), -(1/2 * 26 * 4.5), 28 * 4.5, 28 * 4.5);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 30;

                //INTERACTION
                if (this.activate == true)
                {
                    if (this.treePhase == 1)
                    {
                        var hits = 0;
                        for (var i = 0; i < Inventory.length; i ++)
                        {
                            if (Inventory[i][0].type == "wood")
                            {
                                Inventory[i][1] += 60;
                                this.treePhase = 2;
                                break;
                            }
                            else
                            {
                                hits += 1;
                            }
                        }
                        if (hits == Inventory.length)
                        {
                            Inventory.push([new Item("wood", false, false), 60]);
                            this.treePhase = 2;
                        }
                    }
                    this.activate = false;
                }

                if (this.treePhase == 0) //if this tree is in its cut down phase.
                {
                    console.log(player.finalAttackStage);
                    if (player.weaponEquipped == "vardanianAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "vardanianAxeDual" && player.cutcut == true && this.playerer < 130)
                    {
                        var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                        console.log(distFromCutCut);
                        if (distFromCutCut <= player.weapon.range * 7 + 35)
                        {
                            this.treeHealth -= 0.2;
                            player.cutcut = false;
                        }

                        if (this.treeHealth <= 0)
                        {
                            this.treePhase = 1
                        }
                    }
                    else if (player.weaponEquipped == "timberAxe" && player.cutcut == true && this.playerer < 130)
                    {
                        var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                        console.log(distFromCutCut);
                        if (distFromCutCut <= player.weapon.range * 7 + 35)
                        {
                            this.treeHealth -= 1;
                            player.cutcut = false;
                        }

                        if (this.treeHealth <= 0)
                        {
                            this.treePhase = 1
                        }
                    }
                    else if (player.weaponEquipped == "vardanianBattleAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "freydicWarAxe" && player.cutcut == true  && this.playerer < 130)
                    {
                        var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                        console.log(distFromCutCut);
                        if (distFromCutCut <= player.weapon.range * 7 + 35)
                        {
                            this.treeHealth -= 0.4;
                            player.cutcut = false;
                        }

                        if (this.treeHealth <= 0)
                        {
                            this.treePhase = 1
                        }
                    }
                }
            }
            else if (this.type == "campFire")
            {
                //TRAITS
                this.solid = false;
                this.interactionRange = 35;

                //animate
                if (this.lit == true)
                {
                    lights.push({X:this.X, Y: this.Y, size: 140, extraStops: true, GRD: 0.5, Alpha: 0.75, showMe: false});
                    this.fireCostume += 1;
                    this.campFireTime += 1;

                    //die out over time
                    if (this.campFireTime >= 10000)
                    {
                        this.campFireTime = 0;
                        this.lit = false;
                        this.burnt = true;
                    }
                }

                if (this.burnt == true)
                {
                    this.burntTime += 1;

                    if (this.burntTime >= 2000)
                    {
                        this.burntTime = 0;
                        if (longevity == false)
                        {
                            for (var i = 0; i < scenicList.length; i++)
                            {
                                if (scenicList[i] === this)
                                {
                                    scenicList.splice(i, 1);
                                    break;
                                }
                            }
                        }
                    }
                }

                //DRAWSELF
                if (this.lit == false)
                {
                    if (this.burnt == false)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 2917, 174, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                        XXX.drawImage(verse, 2917, 174, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 2890, 173, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                        XXX.drawImage(verse, 2890, 173, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                        XXX.restore();
                    }
                }
                else if (this.fireCostume <= 14)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                    XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                    XXX.restore();
                }
                else if (this.fireCostume > 14 && this.fireCostume <= 28)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2939, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                    XXX.drawImage(verse, 2939, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                    XXX.restore();
                }
                else if (this.fireCostume > 28 && this.fireCostume <= 42)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2966, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                    XXX.drawImage(verse, 2966, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                    XXX.restore();
                }
                else if (this.fireCostume > 42)
                {
                    this.fireCostume = 0;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                    XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                    XXX.restore();
                }

                if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
                {
                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
                else if (this.playerer <= 50 && this.lit == true)
                {
                    player.warmth += Math.max(0, (0.65 - (player.heatResistance / 200)));
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 19;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;

                    if (this.lit == false && this.burnt == false || this.lit == false && longevity == true)
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].identity == "Fire-Starter")
                            {
                                this.gotFireStarter = true;
                            }
                        }

                        if (this.gotFireStarter)
                        {
                            this.burntTime = 0;
                            this.lit = true;
                        }
                    }
                    else if (this.lit == true && this.burnt == false)
                    {
                        player.craftPosition = 0;
                        craftScroll = 0;
                        crafting = "foods";
                        lowBar = "crafting";
                        gameState = "paused";
                    }
                }
            }
        };

        this.operations = function()
        {
            this.countAdder();
            this.mouseSensing();
            this.typeBuilder();
        }
    }

    function Item(type, x, y)
    {
        this.type = type;
        this.X = x;
        this.Y = y;
        this.equipped = false; //this is for the inventory and equipping to the player.
        this.zIndex = 1;
        this.biproducts = []; //these are the accompanying items that come along with the main item being crafted.
        this.alcohol = 0;
        this.wake = 0;

        this.setItemID = function()
        {
            //defaults
            this.subUtility = "none";

            // because I don't want damage to be decreased from the starting amount by the multiplyer this makes sure that it is evened out at one before taking level into consideration.
            if (player.getStrength() >= 25)
            {
                this.leveledDamageMultiple = player.getStrength();
            }
            else
            {
                this.leveledDamageMultiple = 25;
            }
            //if strength is less than 4 all weapons are 1 damage weaker unless they only do 1 damage.
            if (player.getStrength() >= 4)
            {
                this.damageHandicap = 0;
            }
            else
            {
                this.damageHandicap = 1;
            }
            //For some weapons if the player's strength is less than 25 they will get a deduction
            if (player.getStrength() >= 25)
            {
                this.damageHandicapII = 0;
            }
            else if (player.getStrength() >= 20)
            {
                this.damageHandicapII = 1;
            }
            else if (player.getStrength() >= 15)
            {
                this.damageHandicapII = 3;
            }
            else if (player.getStrength() >= 10)
            {
                this.damageHandicapII = 4;
            }
            else
            {
                this.damageHandicapII = 5;
            }

            //INDIVIDUAL ITEM DETAILS


                //FISTS (not a real item)
            if (this.type == "none")
            {
                //For All Items
                this.identity = "Fists";
                this.weight = 0;
                this.size = 10;
                this.description = "Your Fists.";
                this.intForDes = 4;
                this.intDescription = "Face Punch!";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 0;
                this.range = 1;
                this.rate = 25;
                this.damage = player.fistDamage;
                this.magicalDamage = player.fistMagicalDamage;
                this.negateArmour = 0;

                //ability
                this.ability = player.onTouchSpell;
            }
            else if (this.type == "nude")
            {
                //For All Items
                this.identity = "Nakedness";
                this.weight = 0;
                this.size = 0;
                this.description = "your player's body... IN THE NUDE!!!";
                this.intForDes = 0;
                this.intDescription = "You are sooo naked right now!";

                //Define Utility
                this.utility = "worn";
                //the this.type of armour/clothing it is...
                this.subUtility = "none";
                //Utility Focused
                //protections
                this.protection = 0;
                this.toughnessRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0;
                this.thirstRetention = 0;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 0;
                this.sellValue = 0;
            }

                //ACTUAL ITEMS
            else if (this.type == "coins")
            {
                //For All Items
                this.identity = "Coins";
                this.weight = 0.005;
                this.size = 6;
                this.description = "A currency that is widely accepted among the several kingdoms in the land.";
                this.intForDes = 0;
                this.intDescription = "Although they may appear to be made of solid gold, it is only actually their outermost layer that is made of gold.";

                //Define Utility
                this.utility = "currency";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1;
                this.sellValue = 1;
            }
            else if (this.type == "iceClaymore")
            {
                //For All Items
                if (player.getKnowledge() >= 6)
                {
                    this.identity = "Tablet of Ice Blade";
                    this.description = "Studying this magically engraved stone tablet will teach you how to summon a claymore formed of magical ice.";
                    this.intForDes = 0;
                    this.intDescription = "The summoned blade melts away the moment you let go of it.";
                    this.buyValue = 900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 700.
                    this.sellValue = 486 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 686.
                }
                else
                {
                    this.identity = "Engraved Stone Tablet";
                    this.description = "There are strange symbols engraved in the stone.";
                    this.intForDes = 6;
                    this.intDescription = "Perhaps this stone is an artifact from an ancient culture.";
                    this.buyValue = 900 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 700.
                    this.sellValue = 65 + Math.floor(player.getCharisma() / 2);; // at max, sell for 90.
                }
                this.weight = 2.5;
                this.size = 13;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = false;
                this.spellCost = Math.max(1, 4 + (1 / 12.5) * player.getConcentration() - (1 / 7) * player.getEminence());
                this.spellGroup = "Incantation";
                this.spellGenre = "Ice";
                this.spellName = "Ice Blade";
                this.spellID = "iceClaymore";
                this.spellEXP = 14 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(1, 3 + (3/50) * player.getConcentration() - (5/50) * player.getEminence());
                this.spellDescription = "Forms a magical claymore out of ice; it gains strength from your magic and it can freeze its targets. " + "  Damage: " + Math.floor(allWeapons[29].damage + allWeapons[29].magicalDamage) + "   Rate: " + Math.floor(allWeapons[29].rate) + "   Reach: " + Math.floor(allWeapons[29].range) + "   Range: " + allWeapons[29].distance + "   Energy Cost: " + Math.ceil(allWeapons[29].energyCost);
                this.spellKnowledgeRequirement = 6;
                this.spellRange = "Near";
            }
            else if (this.type == "flyingColours")
            {
                //For All Items
                if (player.getKnowledge() >= 2)
                {
                    this.identity = "Scroll of Flying Colours";
                    this.description = "Studying this scroll will teach you how to blast colorful lights from your palms.";
                    this.intForDes = 0;
                    this.intDescription = "This spell can be used to blind the target momentarily.";
                    this.buyValue = 190 - Math.floor(player.getCharisma() / 1); // at max, buy for 145.
                    this.sellValue = 95 + Math.floor(player.getCharisma() / 1); // at max, sell for 145.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 190 - Math.floor(player.getCharisma() / 1); // at max, buy for 145.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = false;
                if (player.getConcentration() >= 50)
                {
                    this.spellCost = Math.max(1, 3 + 14 / 50 * player.getConcentration() - (1 / 6) * player.getEminence());
                }
                else
                {
                    this.spellCost = Math.max(1, 1 + (1 / 15) * player.getConcentration() - (1 / 15) * player.getEminence());
                }
                this.spellGroup = "Form";
                this.spellGenre = "Illusion";
                this.spellName = "Flying Colours";
                this.spellID = "flyingColours";
                this.spellEXP = 6 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(0.1, 3 + (3/50) * player.getConcentration() - (6/50) * player.getEminence());
                this.spellDescription = "A beautiful flurry of flying orbs of colourful light bright enough to blind that which gets too close.";
                this.spellKnowledgeRequirement = 2;
                this.spellRange = "Medium";
            }
            else if (this.type == "chasingLights")
            {
                //For All Items
                if (player.getKnowledge() >= 8)
                {
                    this.identity = "Scroll of Chasing Lights";
                    this.description = "Studying this scroll will teach you how to conjure spheres of light that race to the nearest beings around aside from the caster.";
                    this.intForDes = 0;
                    this.intDescription = "This spell is best used to find enemies during the night.";
                    this.buyValue = 340 - Math.floor(player.getCharisma() / 1); // at max, buy for 290.
                    this.sellValue = 190 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 290.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 340 - Math.floor(player.getCharisma() / 1); // at max, buy for 290.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = false;
                this.spellCost = Math.max(1, 3 + 7 / 50 * player.getConcentration() - (1 / 7) * player.getEminence());
                this.spellGroup = "Incantation";
                this.spellGenre = "Illusion";
                this.spellName = "Chasing Lights";
                this.spellID = "chasingLights";
                this.spellEXP = 4 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(0.1, 3 + (6/50) * player.getConcentration() - (7/50) * player.getEminence());
                this.spellDescription = "Spheres of light that are attracted to any beings nearby.";
                this.spellKnowledgeRequirement = 8;
                this.spellRange = "Medium-Long";
            }
            else if (this.type == "repel")
            {
                //For All Items
                if (player.getKnowledge() >= 4)
                {
                    this.identity = "Scroll of the Repelling Word";
                    this.description = "Studying this scroll will teach you how to blast a wave of magical force that repels all within a close proximity of you.";
                    this.intForDes = 0;
                    this.intDescription = "This spell can be used in combination with forms or melee styles.";
                    this.buyValue = 1277 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1077.
                    this.sellValue = 762 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 962.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 4;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 1277 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 1077.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = true;
                this.spellDamage = 0.5 + 0.02 * player.getConcentration();
                this.spellCost = Math.max(1, 1 + 2 * player.getConcentration() - 2 * player.getEminence());
                this.spellGroup = "Incantation";
                this.spellGenre = "Cosmic";
                this.spellName = "Repel";
                this.spellID = "repel";
                this.spellEXP = 4 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(0.65, 1 + (2/50) * player.getConcentration() - (2/50) * player.getEminence());
                this.spellDescription = "A blast of cosmic force that repels all beings within range.";
                this.spellKnowledgeRequirement = 4;
                this.spellRange = "Short";
            }
            else if (this.type == "frostWind")
            {
                //For All Items
                if (player.getKnowledge() >= 3)
                {
                    this.identity = "Scroll of Frost Wind";
                    this.description = "Studying this scroll will teach you how to send forth a chilling gust that freezes nearly all thing it contacts.";
                    this.intForDes = 0;
                    this.intDescription = "This is a staple spell for the ice discipline of magic.";
                    this.buyValue = 1120 - Math.floor(player.getCharisma() / 0.414); // at max, buy for 1000.
                    this.sellValue = 540 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 940.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 1120 - Math.floor(player.getCharisma() / 0.414); // at max, buy for 1000.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = true;
                this.spellDamage = 0.5 + (4.5/50 * player.getConcentration());
                this.spellCost = Math.max(1, 3 + 22 / 50 * player.getConcentration() - (15 / 50) * player.getEminence());
                this.spellGroup = "Form";
                this.spellGenre = "Ice";
                this.spellName = "Frost Wind";
                this.spellID = "frostWind";
                this.spellEXP = 14 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(0.1, 8 + (10/50) * player.getConcentration() - (12/50) * player.getEminence());
                this.spellDescription = "A chilling blast of icy wind that can freeze flesh in an instant. ";
                this.spellKnowledgeRequirement = 3;
                this.spellRange = "Short-Medium";
            }
            else if (this.type == "iceSpikes")
            {
                //For All Items
                if (player.getKnowledge() >= 1)
                {
                    this.identity = "Scroll of Ice Spikes";
                    this.description = "Studying this scroll will teach you how to shoot spikes of ice from your hands.";
                    this.intForDes = 0;
                    this.intDescription = "The more powerful the caster is the more numerous and sharp the spikes will be.";
                    this.buyValue = 500 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 400.
                    this.sellValue = 300 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 400.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 500 - Math.floor(player.getCharisma() / 1); // at max, buy for 145.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = false;
                this.spellCost = Math.max(1, 1 + 16 / 50 * player.getConcentration() - (13 / 50) * player.getEminence());
                this.spellGroup = "Form";
                this.spellGenre = "Ice";
                if (player.concentration >= 10)
                {
                    this.spellName = "Ice Spikes";
                    this.spellDescription = "Deadly spikes of magical ice sharper than any blade.";
                }
                else
                {
                    this.spellName = "Ice Spike";
                    this.spellDescription = "A deadly spike of magical ice sharper than any blade.";
                }
                this.spellID = "iceSpikes";
                this.spellEXP = 8 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(1, 2 + (4/50) * player.getConcentration() - (1/10) * player.getEminence());
                this.spellKnowledgeRequirement = 1;
                this.spellRange = "Medium-Long";
            }
            else if (this.type == "lifeTap")
            {
                //For All Items
                if (player.getKnowledge() >= 1)
                {
                    this.identity = "Scroll of Life-Tap";
                    this.description = "Studying this scroll will teach you how to transform your own lifeforce into magical energy.";
                    this.intForDes = 0;
                    this.intDescription = "If one is not careful with this spell they will surely die.";
                    this.buyValue = 880 - Math.floor(player.getCharisma() / 1); // at max, buy for 830.
                    this.sellValue = 730 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 830.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 880 - Math.floor(player.getCharisma() / 1); // at max, buy for 830.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = false;
                this.spellCost = 0;
                this.spellGroup = "Incantation";
                this.spellGenre = "Necromancy";
                this.spellName = "Life-Tap";
                this.spellID = "lifeTap";
                this.spellDamage = 0;
                this.spellEXP = 2 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(3, 6 + (5/50) * player.getConcentration() - (8/50) * player.getEminence());
                this.spellDescription = "Drain your own lifeforce and convert it into magical energy.";
                this.spellKnowledgeRequirement = 6;
                this.spellRange = "Self";
            }
            else if (this.type == "drainingI")
            {
                //For All Items
                if (player.getKnowledge() >= 1)
                {
                    this.identity = "Scroll of Draining I";
                    this.description = "Studying this scroll will teach you how to cast a shadowy blast that will steel the life force of its target and give it to the caster.";
                    this.intForDes = 0;
                    this.intDescription = "Reading the ancient markings sends an anxious chill through your bones.";
                    this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                    this.sellValue = 250 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 350.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = true;
                this.spellCost = Math.max(1, 1 + (26 / 50) * player.getConcentration() - (20 / 50) * player.getEminence());
                this.spellGroup = "Form";
                this.spellGenre = "Necromancy";
                this.spellName = "Draining I";
                this.spellID = "drainingI";
                this.spellDamage = 1 + (Math.floor(4/50 * player.getConcentration()));
                this.spellEXP = 5 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(1, 8 + (7/50) * player.getConcentration() - (12/50) * player.getEminence());
                this.spellDescription = "A shadowy blast that steels the lifeforce of its target and gives it to the caster.";
                this.spellKnowledgeRequirement = 1;
                this.spellRange = "Medium-Long";
            }
            else if (this.type == "vivification")
            {
                //For All Items
                if (player.getKnowledge() >= 20)
                {
                    this.identity = "Scroll of Vivification";
                    this.description = "Studying this scroll will teach you how to give life to the recently diseased.";
                    this.intForDes = 4;
                    this.intDescription = "If the target of this spell has been dead too long it is impossible to revive them for their soul will have already departed.";
                    this.buyValue = 1239 - Math.floor(player.getCharisma() / 1.27); // at max, buy for 1200.
                    this.sellValue = 1000 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1200.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 1239 - Math.floor(player.getCharisma() / 1.27); // at max, buy for 1200.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = false;
                if (player.getConcentration() >= 50)
                {
                    this.spellCost = Math.max(1, 15 + 5 / 50 * player.getConcentration() - (1 / 10) * player.getEminence());
                }
                else
                {
                    this.spellCost = Math.max(1, 20 + 10 / 50 * player.getConcentration() - (1 / 10) * player.getEminence());
                }
                this.spellGroup = "Form";
                this.spellGenre = "Necromancy";
                this.spellName = "Vivification";
                this.spellID = "vivification";
                this.spellEXP = 10 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(2, 60 + (35/50) * player.getConcentration() - (65/50) * player.getEminence());
                this.spellDescription = "A manipulation of the very fabric of life and death, forcing the dead target's soul back into its body.";
                this.spellKnowledgeRequirement = 20;
                this.spellRange = "Near";
            }
            else if (this.type == "embers")
            {
                //For All Items
                if (player.getKnowledge() >= 1)
                {
                    this.identity = "Scroll of Embers";
                    this.description = "Studying this scroll will teach you how to cast a spiraling dance of fire.";
                    this.intForDes = 0;
                    this.intDescription = "Although this is a novice spell it is actually quite effective when used by skilled magi.";
                    this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                    this.sellValue = 250 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 350.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 450 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 12;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = true;
                this.spellCost = Math.max(1, 1 + (1 / 12.5) * player.getConcentration() - (1 / 12.5) * player.getEminence());
                this.spellGroup = "Form";
                this.spellGenre = "Fire";
                this.spellName = "Embers";
                this.spellID = "embers";
                this.spellDamage = 3 + (0.2 * player.getConcentration());
                this.spellEXP = 9 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(0.5, 4 + (3.5/50) * player.getConcentration() - (7/50) * player.getEminence());
                this.spellDescription = "A fiery burst that forms several swirling masses of flame.";
                this.spellKnowledgeRequirement = 1;
                this.spellRange = "Near";
            }
            else if (this.type == "fireballI")
            {
                //For All Items
                if (player.getKnowledge() >= 2)
                {
                    this.identity = "Scroll of Fireball I";
                    this.description = "Studying this scroll will teach you how to cast a flaming hot ball of fire.";
                    this.intForDes = 0;
                    this.intDescription = "This scroll looks old and withered, but the magical writing is still clear enough to read.";
                    this.buyValue = 750 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 650.
                    this.sellValue = 550 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 650.
                }
                else
                {
                    this.identity = "Scroll";
                    this.description = "The markings on this scroll are incomprehensible; what a waste of paper!";
                    this.intForDes = 2;
                    this.intDescription = "Scrolls are supposed to be used for storing knowledge or sending messages, it looks like this one wasn't used for either.";
                    this.buyValue = 750 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 350.
                    this.sellValue = 1; // at max, sell for 1.
                }
                this.weight = 0.02;
                this.size = 14;

                //Define Utility
                this.utility = "spell";

                //ability
                this.ability = "none";

                //Utility Focused
                this.damages = true;
                this.spellCost = Math.max(2, 2 + (1 / 10) * player.getConcentration() - (1 / 10) * player.getEminence());
                this.spellGroup = "Form";
                this.spellGenre = "Fire";
                this.spellName = "Fireball I";
                this.spellID = "fireballI";
                this.spellDamage = 7.5 + 0.3 * player.getConcentration()
                this.spellEXP = 12 * ((50 + player.getMemory()) / 50);
                this.spellCooldown = Math.max(1, 5 + (3/50) * player.getConcentration() - (7/50) * player.getEminence());
                this.spellDescription = "A burning hot ball of flames projected from the caster's hands.";
                this.spellKnowledgeRequirement = 2;
                this.spellRange = "Medium-Long";
            }
            else if (this.type == "etyrMeat")
            {
                //For All Items
                this.identity = "Etyr Meat";
                this.weight = 1;
                this.size = 6;
                this.description = "The cooked meat of an Etyr.";
                this.intForDes = 1;
                this.intDescription = "Stringy, chewy, and tough... but it's edible.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 6; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.


                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 2;
                this.ingredients = [["Raw Etyr Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "hugeBogTrollSkull")
            {
                //For All Items
                this.identity = "Huge Bog Troll Skull";
                this.weight = 50;
                this.size = 30;
                this.description = "The skull of a humongous bog troll.";
                this.intForDes = 1;
                this.intDescription = "A testament to the valor and might of the one that has slain such a monstrous beast!";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3000 - Math.floor(player.getCharisma() / 0.05125); // at max, buy for 2025.
                this.sellValue = 1445 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 1845.
            }
            else if (this.type == "bogTrollSkull")
            {
                //For All Items
                this.identity = "Bog Troll Skull";
                this.weight = 35;
                this.size = 24;
                this.description = "The skull of a bog troll.";
                this.intForDes = 1;
                this.intDescription = "A testament to the valor and might of the one that has slain such a beast!";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1900 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 1500.
                this.sellValue = 1060 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 1260.
            }
            else if (this.type == "babyBogTrollSkull")
            {
                //For All Items
                this.identity = "Baby Bog Troll Skull";
                this.weight = 8;
                this.size = 15;
                this.description = "The skull of a baby bog troll.";
                this.intForDes = 1;
                this.intDescription = "A trophy of a sort, for a troll is a troll, even a baby is dangerous...";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 70 - Math.floor(player.getCharisma() / 2); // at max, buy for 45.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 3); // at max, sell for 45.
            }
            else if (this.type == "trollFlesh")
            {
                //For All Items
                this.identity = "Troll Flesh";
                this.weight = 4;
                this.size = 11;
                this.description = "The raw flesh of a Troll.";
                this.intForDes = 40;
                this.intDescription = "This meat can be strained for the troll's blood which has regenerative properties.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                if (player.getIntelligence >= 25)
                {
                    this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                }
                else
                {
                    this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                }
                this.hunger = 1; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -6; //recoops lost energy.
                this.replenish = -6; //restores will.

                //ability
                this.ability = "poisonI";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 135 - Math.floor(player.getCharisma() / 2); // at max, buy for 110.
                this.sellValue = 80 + Math.floor(player.getCharisma() / 2); // at max, sell for 105.
            }
            else if (this.type == "trollMeat")
            {
                //For All Items
                this.identity = "Troll Meat";
                this.weight = 3;
                this.size = 11;
                this.description = "The cooked meat of a troll.";
                this.intForDes = 5;
                this.intDescription = "It is tough to chew, and quite frankly it tastes disgusting...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 4; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -2; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 1;
                this.ingredients = [["Troll Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 25); // at max, sell for 10.
            }
            else if (this.type == "rawOlkrinFlesh")
            {
                //For All Items
                this.identity = "Raw Olkrin Flesh";
                this.weight = 35;
                this.size = 20;
                this.description = "The raw flesh of an Olkrin: it smells sour and stale, and with purple threads of tough fibers running though it it looks absolutely indigestible.";
                this.intForDes = 14;
                this.intDescription = "Olkrin flesh is toxic.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                if (player.getIntelligence() >= 14)
                {
                    this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                }
                else
                {
                    this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                }
                this.hunger = 6; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = -6; //heals health.
                this.generation = -6; //recoops lost energy.
                this.replenish = 0; //restores will.


                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 197 - Math.floor(player.getCharisma() / 1); // at max, buy for 147.
                this.sellValue = 93 + Math.floor(player.getCharisma() / 1.5); // at max, sell for 123.
            }
            else if (this.type == "olkrinMeat")
            {
                //For All Items
                this.identity = "Olkrin Meat";
                this.weight = 33;
                this.size = 20;
                this.description = "The cooked meat of an Olkrin has a strange almost plastic-like smell and it has a meaty yet grossly bitter taste.";
                this.intForDes = 1;
                this.intDescription = "It's safe to eat, but just because you can doesn't mean that you should...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                if (player.getIntelligence() >= 14)
                {
                    this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                }
                else
                {
                    this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                }
                this.hunger = 33; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -4; //recoops lost energy.
                this.replenish = 0; //restores will.


                //ability
                this.ability = "potentialFoodPoisoning";

                //Crafting
                this.yield = 1;
                this.intForCraft = 19;
                this.ingredients = [["Raw Olkrin Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 39 - Math.floor(player.getCharisma() / 3); // at max, buy for 24.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 3); // at max, sell for 22.
            }
            else if (this.type == "nechromanticDust")
            {
                //For All Items
                this.identity = "Nechromantic Dust";
                this.weight = 0.5;
                this.size = 10;
                this.description = "A shadowy dust finer than silt, smooth like silk to the touch, that exudes the very essence of both life and death.";
                this.intForDes = 37;
                this.intDescription = "Nechromantic dust is a rare alchemy ingredient.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1;
                this.sellValue = 1;
            }
            else if (this.type == "narthwarpMouth")
            {
                //For All Items
                this.identity = "Narthwarp Mouth";
                this.weight = 3;
                this.size = 9;
                this.description = "The razor-toothed external eating appendage of a narthwarp.";
                this.intForDes = 23;
                this.intDescription = "Narthwarps release a dangerous toxin through this appendage that is known to cause extreme weakness and fatigue.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 37 - Math.floor(player.getCharisma() / 3); // at max, buy for 22.
                this.sellValue = 12 + Math.floor(player.getCharisma() / 5); // at max, sell for 22.
            }
            else if (this.type == "lrgNarthwarpMouth")
            {
                //For All Items
                this.identity = "Narthwarp Mouth";
                this.weight = 6;
                this.size = 16;
                this.description = "The razor-toothed external eating appendage of a large narthwarp.";
                this.intForDes = 23;
                this.intDescription = "Narthwarps release a dangerous toxin through this appendage that is known to cause extreme weakness and fatigue.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 42 - Math.floor(player.getCharisma() / 3); // at max, buy for 27.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 5); // at max, sell for 24.
            }
            else if (this.type == "fermentedNarthwarpMouth")
            {
                //For All Items
                this.identity = "Fermented Narthwarp Mouth";
                this.weight = 19;
                this.size = 19;
                this.description = "What was once the mouth of a narthwarp is now a swollen oozing mess.";
                this.intForDes = 23;
                this.intDescription = "Fermenting the toxins in narthwarp venom creates a new substance that can be used in some alchemy recipes.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 23;
                this.ingredients = [["Narthwarp Mouth", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 46 - Math.floor(player.getCharisma() / 3); // at max, buy for 31.
                this.sellValue = 19 + Math.floor(player.getCharisma() / 5); // at max, sell for 29.
            }
            else if (this.type == "olkrinHorn")
            {
                //For All Items
                this.identity = "Olkrin Horn";
                this.weight = 19;
                this.size = 19;
                this.description = "The horn of an Olkrin.";
                this.intForDes = 38;
                this.intDescription = "When in its powdered form it can be used in alchemy to produce or enhance certain effects in potions.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 480 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 380.
                this.sellValue = 250 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 350.
            }
            else if (this.type == "olkrinArm")
            {
                //For All Items
                this.identity = "Olkrin Arm";
                this.weight = 160;
                this.size = 40;
                this.description = "The Arm of an Olkrin.";
                this.intForDes = 1;
                this.intDescription = "This is a trophy that represents the spectacular achievement of having slain an Olkrin.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1360 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 960.
                this.sellValue = 550 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 950.
            }
            else if (this.type == "olkrinSkull")
            {
                //For All Items
                this.identity = "Olkrin Skull";
                this.weight = 100;
                this.size = 24;
                this.description = "The skull of an Olkrin.";
                this.intForDes = 1;
                this.intDescription = "This is a trophy that represents the spectacular achievement of having slain an Olkrin.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1860 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 1460.
                this.sellValue = 900 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 1300.
            }
            else if (this.type == "goliathOlkrinSkull")
            {
                //For All Items
                this.identity = "Goliath Olkrin Skull";
                this.weight = 140;
                this.size = 35;
                this.description = "The skull of a goliath sized Olkrin.";
                this.intForDes = 1;
                this.intDescription = "This was once part of an unimaginably powerful creature, and now it is yours!";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 9200 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 8800.
                this.sellValue = 6592 + Math.floor(player.getCharisma() / 0.025); // at max, sell for 8592.
            }
            else if (this.type == "rawGribFlesh")
            {
                //For All Items
                this.identity = "Raw Grib Flesh";
                this.weight = 1;
                this.size = 10;
                this.description = "The raw flesh of a grib.";
                this.intForDes = 1;
                this.intDescription = "Raw grib meat is often infested with flesh mites.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = -1; //restores will.


                //ability
                this.ability = "fleshMites";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
            }
            else if (this.type == "gribMeat")
            {
                //For All Items
                this.identity = "Grib Meat";
                this.weight = 1;
                this.size = 10;
                this.description = "The cooked meat of a grib.";
                this.intForDes = 2;
                this.intDescription = "Gribs are foul creatures and their meat is not much better.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 8; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = -1; //restores will.


                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 6;
                this.ingredients = [["Raw Grib Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 15 - Math.floor(player.getCharisma() / 8); // at max, buy for 9.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 10); // at max, sell for 9.
            }
            else if (this.type == "gribPelt")
            {
                //For All Items
                this.identity = "Grib Pelt";
                this.weight = 2;
                this.size = 18;
                this.description = "The prickly brown fur of a grib.";
                this.intForDes = 6;
                this.intDescription = "Due to the strong odor that gribs release to mark their territory grib pelts are not commonly sought after.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "rawWalrusFlesh")
            {
                //For All Items
                this.identity = "Raw Walrus Flesh";
                this.weight = 2;
                this.size = 11;
                this.description = "The raw flesh of a land walrus.";
                this.intForDes = 1;
                this.intDescription = "Eating this raw would be tough...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = 0; //restores will.


                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 9 - Math.floor(player.getCharisma() / 15); // at max, buy for 6.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
            }
            else if (this.type == "walrusMeat")
            {
                //For All Items
                this.identity = "Walrus Meat";
                this.weight = 2;
                this.size = 11;
                this.description = "The cooked meat of a land walrus.";
                this.intForDes = 3;
                this.intDescription = "Land walrus meat is filling and hearty, and even more it can provide you with the energy you need to endure in cold climates.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 19; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 4; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.


                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 9;
                this.ingredients = [["Raw Walrus Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 18 - Math.floor(player.getCharisma() / 6.25); // at max, buy for 10.
                this.sellValue = 6 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 10.
            }
            else if (this.type == "ogoFruit")
            {
                //For All Items
                this.identity = "Ogo Fruit";
                this.weight = 1;
                this.size = 7;
                this.description = "The ogo fruit is sweet, tender, and smooth.";
                this.intForDes = 19;
                this.intDescription = "The ogo fruit has been known to make people get a bit hyper!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 3; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 1; //recoops lost energy.
                this.replenish = 0; //restores will.


                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 37 - Math.floor(player.getCharisma() / 2); // at max, buy for 12.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
            }
            else if (this.type == "rawEtyrFlesh")
            {
                //For All Items
                this.identity = "Raw Etyr Flesh";
                this.weight = 1;
                this.size = 6;
                this.description = "The raw flesh from an Etyr.";
                this.intForDes = 3;
                this.intDescription = "Rare, with extra gut worms!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "gutWorms";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "neevFlesh")
            {
                //For All Items
                this.identity = "Neev Flesh";
                this.weight = 1;
                this.size = 6;
                this.description = "A pure black flesh gooey with sticky tar-like black blood.";
                this.intForDes = 0;

                if (player.getIntelligence() < 20)
                {
                    this.intDescription = "This does not look like something anyone would want to ingest.";
                }
                else
                {
                    this.intDescription = "This can be drained for the blood which can be used as a base for some powerful alchemy recipes.";
                }

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = -10; //satisfies hunger.
                this.thirst = -10; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = -5; //heals health.
                this.generation = -5; //recoops lost energy.
                this.replenish = -25; //restores will.

                //ability
                this.ability = "foodPoisoning";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 105 - Math.floor(player.getCharisma() / 1.5); // at max, buy for 72.
                this.sellValue = 42 + Math.floor(player.getCharisma() / 2); // at max, sell for 67.
            }
            else if (this.type == "frichMeat")
            {
                //For All Items
                this.identity = "Frich Meat";
                this.weight = 1;
                this.size = 12;
                this.description = "The cooked flesh of a Frich.";
                this.intForDes = 2;
                this.intDescription = "Cooking it didn't do much to soften it up, but at least it is safe to eat...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 2;
                this.ingredients = [["Raw Frich Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
            }
            else if (this.type == "rawFrichFlesh")
            {
                //For All Items
                this.identity = "Raw Frich Flesh";
                this.weight = 1;
                this.size = 12;
                this.description = "The raw flesh from a Frich.";
                this.intForDes = 4;
                this.intDescription = "It is tough, slimy with curdling blood, and finished with an occasionally gut worm here or there.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "gutWorms";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "rawYoungNaapridFlesh")
            {
                //For All Items
                this.identity = "Raw Young-Naaprid Flesh";
                this.weight = 1;
                this.size = 9;
                this.description = "The raw flesh of a sweet and innocent baby naaprid.";
                this.intForDes = 1;
                this.intDescription = "The flesh of a young-naaprid is more tender and supple than that of an adult of the species.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 24 - Math.floor(player.getCharisma() / 10); // at max, buy for 19.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 10); // at max sell for 19.
            }
            else if (this.type == "youngNaapridMeat")
            {
                //For All Items
                this.identity = "Young-Naaprid Meat";
                this.weight = 1;
                this.size = 9;
                this.description = "The tender and succulent meat of a sweet and innocent baby naaprid.";
                this.intForDes = 1;
                this.intDescription = "Naaprid Meat is eaten as a luxury meal by some nobility.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 15; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 2; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 16;
                this.ingredients = [["Raw Young-Naaprid Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 29 - Math.floor(player.getCharisma() / 10); // at max, buy for 24.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 8); // at max sell for 20.
            }
            else if (this.type == "rawNaapridFlesh")
            {
                //For All Items
                this.identity = "Raw Naaprid Flesh";
                this.weight = 8;
                this.size = 22;
                this.description = "A large hunk of flesh from a naaprid.";
                this.intForDes = 4;
                this.intDescription = "It would be rather difficult to eat this raw, plus it would be sort of, well, raw...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 4; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -4; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 12 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 8.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max sell for 7.
            }
            else if (this.type == "naapridMeat")
            {
                //For All Items
                this.identity = "Naaprid Meat";
                this.weight = 8;
                this.size = 22;
                this.description = "A sizable cut of meat from a naaprid: the cooked meat has strong gamey flavour and a distinct savory taste.";
                this.intForDes = 4;
                this.intDescription = "This amount of food could tide someone over for a while!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 30; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 4; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 14;
                this.ingredients = [["Raw Naaprid Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 34 - Math.floor(player.getCharisma() / 8); // at max, buy for 28.
                this.sellValue = 16 + Math.floor(player.getCharisma() / 5); // at max sell for 26.
            }
            else if (this.type == "naapridPelt")
            {
                //For All Items
                this.identity = "Naaprid Pelt";
                this.weight = 3;
                this.size = 22;
                this.description = "The thick matted fur pelt of a naaprid.";
                this.intForDes = 5;
                this.intDescription = "This is a good material to form leather out of.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 21 - Math.floor(player.getCharisma() / 8); // at max, buy for 15.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 8); // at max, sell for 13.
            }
            else if (this.type == "naapridHorn")
            {
                //For All Items
                this.identity = "Naaprid Horn";
                this.weight = 1;
                this.size = 14;
                this.description = "A curved horn from a naaprid.";
                this.intForDes = 7;
                this.intDescription = "In a powdered form this can be used to thicken certain mixtures.";
                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
            }
            else if (this.type == "smlBlackBearPelt")
            {
                //For All Items
                this.identity = "Black Bear Pelt";
                this.weight = 2;
                this.size = 20;
                this.description = "The pelt of a black bear.";
                this.intForDes = 3;
                this.intDescription = "This can be used to make bear fur apparel.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 25 - Math.floor(player.getCharisma() / 8); // at max, buy for 19.
                this.sellValue = 11 + Math.floor(player.getCharisma() / 6); // at max, sell for 19.
            }
            else if (this.type == "medBlackBearPelt")
            {
                //For All Items
                this.identity = "Black Bear Pelt";
                this.weight = 2;
                this.size = 33;
                this.description = "The pelt of a large black bear.";
                this.intForDes = 3;
                this.intDescription = "This can be used to make bear fur apparel.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 34 - Math.floor(player.getCharisma() / 5); // at max, buy for 24.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 5); // at max, sell for 24.
            }
            else if (this.type == "lrgBlackBearPelt")
            {
                //For All Items
                this.identity = "Elder Black Bear Pelt";
                this.weight = 2;
                this.size = 65;
                this.description = "The pelt of an elder black bear.";
                this.intForDes = 3;
                this.intDescription = "This can be used to make the finest bear fur apparel.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 214 - Math.floor(player.getCharisma() / 1); // at max, buy for 164.
                this.sellValue = 113 + Math.floor(player.getCharisma() / 1); // at max, sell for 163.
            }
            else if (this.type == "rawBearFlesh")
            {
                //For All Items
                this.identity = "Raw Bear Flesh";
                this.weight = 3.5;
                this.size = 15;
                this.description = "A hunk of meat from a bear.";
                this.intForDes = 2;
                this.intDescription = "A bear's flesh is often unsafe to eat raw due to the parasites that are common in some of the creatures that they eat.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -0.5; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "fleshMites";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 50); // at max, sell for 5.
            }
            else if (this.type == "bearMeat")
            {
                //For All Items
                this.identity = "Bear Meat";
                this.weight = 3.5;
                this.size = 17;
                this.description = "Cooked meat from a bear.";
                this.intForDes = 1;
                this.intDescription = "The meat is rather tough, but its strong meaty flavour makes up for it.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 21; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 3; //warms player.
                this.heal = 0; //heals health.
                this.generation = -0.5; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 17;
                this.ingredients = [["Raw Bear Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 24 - Math.floor(player.getCharisma() / 12); // at max, buy for 20.
                this.sellValue = 12 + Math.floor(player.getCharisma() / 6); // at max, sell for 20.
            }
            else if (this.type == "rawBearTongue")
            {
                //For All Items
                this.identity = "Raw Bear Tongue";
                this.weight = 2;
                this.size = 15;
                this.description = "A bear's tongue; it is thick, fleshy and covered with sticky moist partially dried saliva.";
                this.intForDes = 5;
                this.intDescription = "Bear tongue is an important ingredient in some alchemy recipes.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                if (player.getIntelligence() >= 20)
                {
                    this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                }
                else
                {
                    this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                }
                this.hunger = 1; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = 1; //restores will.

                //ability
                this.ability = "potentialFoodPoisoning";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 19 - Math.floor(player.getCharisma() / 12); // at max, buy for 15.
                this.sellValue = 10 + Math.floor(player.getCharisma() / 10); // at max, sell for 15.
            }
            else if (this.type == "bearTongue")
            {
                //For All Items
                this.identity = "Bear Tongue";
                this.weight = 2;
                this.size = 17;
                this.description = "Cooked bear tongue.";
                this.intForDes = 1;
                this.intDescription = "Bear tongue is an important part of a healthy diet, its very nutritious!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 9; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 2; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 12;
                this.ingredients = [["Raw Bear Tongue", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 15 - Math.floor(player.getCharisma() / 25); // at max, buy for 13.
                this.sellValue = 9 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 13.
            }
            else if (this.type == "rawBerulnFlesh")
            {
                //For All Items
                this.identity = "Raw Beruln Flesh";
                this.weight = 2;
                this.size = 17;
                this.description = "A chunk of rib flesh from a beruln.";
                this.intForDes = 2;
                this.intDescription = "The meat is tough and sticky with blood. It is going to be a challenge to eat it in this state...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "fleshMites";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
                this.sellValue = 2; // at max, sell for 2.
            }
            else if (this.type == "berulnMeat")
            {
                //For All Items
                this.identity = "Beruln Meat";
                this.weight = 2;
                this.size = 17;
                this.description = "Cooked rib meat from a beruln.";
                this.intForDes = 1;
                this.intDescription = "The meat is too tough to chew comfortably...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 7; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 3;
                this.ingredients = [["Raw Beruln Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
                this.sellValue = 3; // at max, sell for 3.
            }
            else if (this.type == "yaihefBerries")
            {
                //For All Items
                this.identity = "Yaihef Berries";
                this.weight = 0.5;
                this.size = 7;
                this.description = "Juicy light blue berries with a plumlike texture.";
                this.intForDes = 2;
                this.intDescription = "They're the quenchiest!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 3; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "akerBerries")
            {
                //For All Items
                this.identity = "Aker Berries";
                this.weight = 0.5;
                this.size = 7;
                this.description = "Scrumptious red berrys with a sweet and tangy flavour!";
                this.intForDes = 6;
                this.intDescription = "These berries have no interesting effects.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "bushkaBerries")
            {
                //For All Items
                this.identity = "Bushka Berries";
                this.weight = 0.1;
                this.size = 6;
                this.description = "Little white berries that are mildly sweet and have a weirdly exotic aftertaste.";
                this.intForDes = 10;
                this.intDescription = "Bushka plants only live in cold and snowy climates, they also appear in warmer climates during the winter.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.6; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.05; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "driedPluttBerries")
            {
                //For All Items
                this.identity = "Dried Plutt Berries";
                this.weight = 0.7;
                this.size = 7;
                this.description = "Sweet chewy and flavorful dried berries.";
                this.intForDes = 6;
                this.intDescription = "These make an excellent dessert when served with honey.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 2;
                this.ingredients = [["Plutt Berries", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 9 - Math.floor(player.getCharisma() / 12); // at max, buy for 5.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
            }
            else if (this.type == "pluttBerries")
            {
                //For All Items
                this.identity = "Plutt Berries";
                this.weight = 1;
                this.size = 7;
                this.description = "Juicy, plump, and sweet berries about the size of a small child's fist.";
                this.intForDes = 6;
                this.intDescription = "These make an excellent dessert when dried and served with honey.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2; //satisfies hunger.
                this.thirst = 0.25; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.25; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
            }
            else if (this.type == "neprilneBerries")
            {
                //For All Items
                this.identity = "Neprilne Berries";
                this.weight = 0.1;
                this.size = 7;
                this.description = "Tiny blue coloured berries picked from a neprilne plant.";
                this.intForDes = 10;
                this.intDescription = "These are mildly poisonous and the body will often react to them by expelling the contents of one's stomach.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "foodPoisoning";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 7 - Math.floor(player.getCharisma() / 50);; // at max, buy for 6.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
            }
            else if (this.type == "culprisLeaf")
            {
                //For All Items
                this.identity = "Culpris Leaf";
                this.weight = 0.1;
                this.size = 7;
                this.description = "A soft green leaf from a culpris plant.";
                this.intForDes = 8;
                this.intDescription = "Culpris Leaves are known to have restorative properties.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0.25; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.25; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 12 - Math.floor(player.getCharisma() / 10); // at max, buy for 7.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
            }
            else if (this.type == "bushkaLeaves")
            {
                //For All Items
                this.identity = "Bushka Leaves";
                this.weight = 0.1;
                this.size = 7;
                this.description = "Small waxy hard turquoise colored leaves from a bushka plant.";
                this.intForDes = 3;
                this.intDescription = "These can be used in several alchemy recipes.";

                //Define Utility
                this.utility = "Material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
            else if (this.type == "harstGrain")
            {
                //For All Items
                this.identity = "Harst Grain";
                this.weight = 0.1;
                this.size = 7;
                this.description = "A rough and hard shelled dark grain.";
                this.intForDes = 8;
                this.intDescription = "Raw, harst grain is crunchy and unappetizing; it must be boiled for over an hour to reach a more edible state.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "santhGrain")
            {
                //For All Items
                this.identity = "Santh Grain";
                this.weight = 0.1;
                this.size = 7;
                this.description = "The lightest and finest grain anyone would ever find, santh is used to craft the most artisan of confections.";
                this.intForDes = 1;
                this.intDescription = "Santh is revered by all those who have tried the baked goods made from it.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 12 - Math.floor(player.getCharisma() / 10); // at max, buy for 7.
                this.sellValue = 7; // at max, sell for 7.
            }
            else if (this.type == "santhFlour")
            {
                //For All Items
                this.identity = "Santh Flour";
                this.weight = 0.1;
                this.size = 7;
                this.description = "The lightest and finest grain anyone would ever find, santh is used to craft the most artisan of confections.";
                this.intForDes = 1;
                this.intDescription = "Santh is revered by all those who have tried the baked goods made from it.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 9;
                this.ingredients = [["Santh Grain", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 18 - Math.floor(player.getCharisma() / 6); // at max, buy for 10.
                this.sellValue = 10; // at max, sell for 10.
            }
            else if (this.type == "bagOfSanthFlour")
            {
                //For All Items
                this.identity = "Bag of Santh Flour";
                this.weight = 8;
                this.size = 12;
                this.description = "A bag full of santh flour.";
                this.intForDes = 1;
                this.intDescription = "The bag holds fifty loads of flour.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 1;
                this.ingredients = [["Santh Flour", 50]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 900 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 800.
                this.sellValue = 700 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 800.
            }
            else if (this.type == "emptyBag")
            {
                //For All Items
                this.identity = "Empty Bag";
                this.weight = 8;
                this.size = 12;
                this.description = "A bag with nothing in it.";
                this.intForDes = 0;
                this.intDescription = "If there is nothing in the bag, isn't there something in it?";

                //Define Utility
                this.utility = "material";
                this.subUtility = "reusable";
                this.refund = [["santhFlour", 50]];

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 1;
                this.ingredients = [["Bag of Santh Flour", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
            else if (this.type == "kellishSanthDough")
            {
                //For All Items
                this.identity = "Santh Dough";
                this.weight = 0.3;
                this.size = 7;
                this.description = "A dough for santh bread made from traditional Kellish products.";
                this.intForDes = 2;
                this.intDescription = "Santh like in many other cultures is highly valued by the Kellish.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 6; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -4; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 20;
                this.ingredients = [["Santh Flour", 3], ["Naaprid Butter", 1], ["Kellish Clay Pot of Naaprid Milk", 1], ["Mofu Egg", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 40 - Math.floor(player.getCharisma() / 3); // at max, buy for 25.
                this.sellValue = 25; // at max, sell for 25.
            }
            else if (this.type == "santhBread")
            {
                //For All Items
                this.identity = "Santh Bread";
                this.weight = 0.3;
                this.size = 7;
                this.description = "The smoothest, lightest, whitest, and most delicate bread one could ever eat.";
                this.intForDes = 1;
                this.intDescription = "Properly made santh bread is of a quality suitable for kings and queens.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 22; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 3; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.25; //recoops lost energy.
                this.replenish = 0.25; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 20;
                this.ingredients = [["Santh Dough", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 50 - Math.floor(player.getCharisma() / 3); // at max, buy for 35.
                this.sellValue = 35; // at max, sell for 35.
            }
            else if (this.type == "butteredSanthBread")
            {
                //For All Items
                this.identity = "Santh Bread";
                this.weight = 0.3;
                this.size = 7;
                this.description = "The smoothest, lightest, whitest, and most delicate bread one could ever eat... With Butter!";
                this.intForDes = 1;
                this.intDescription = "Properly made santh bread is of a quality suitable for kings and queens.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 26; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 3; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.4; //recoops lost energy.
                this.replenish = 0.35; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 1;
                this.ingredients = [["Santh Bread", 1], ["Naaprid Butter", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 61 - Math.floor(player.getCharisma() / 3); // at max, buy for 46.
                this.sellValue = 46; // at max, sell for 46.
            }
            else if (this.type == "naapridButter")
            {
                //For All Items
                this.identity = "Naaprid Buttter";
                this.weight = 0.1;
                this.size = 5;
                this.description = "Creamy fatty butter from a naaprid.";
                this.intForDes = 1;
                this.intDescription = "Naaprid butter is used in many kellish and southern freydic recipes.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 10;
                this.intForCraft = 20;
                this.ingredients = [["Kellish Clay Pot of Naaprid Milk", 1]];
                this.biproducts = [[new Item("kellishClayPot", false), 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 11 - Math.floor(player.getCharisma() / 25); // at max, buy for 9.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
            }
            else if (this.type == "ogard")
            {
                //For All Items
                this.identity = "Ogard";
                this.weight = 0.9;
                this.size = 8;
                this.description = "Ogard is a large ovular hard seed produced by the ogard plant.";
                if (player.raceName == "Freynor")
                {
                    this.intForDes = 0;
                }
                else
                {
                    this.intForDes = 4;
                }
                this.intDescription = "It is popularly used ground as a spice to flavour certain foods and drinks.";

                //Define Utility
                this.utility = "material";

                //Utility Focused

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 46 - Math.floor(player.getCharisma() / 5); // at max, buy for 36.
                this.sellValue = 18 + Math.floor(player.getCharisma() / 3); // at max, sell for 33.
            }
            else if (this.type == "groundOgard")
            {
                //For All Items
                this.identity = "Ground Ogard";
                this.weight = 0.9;
                this.size = 8;
                this.description = "Ground ogard has a strong, hot, nutty, wood aromatic.";
                if (player.raceName == "Freynor")
                {
                    this.intForDes = 0;
                }
                else
                {
                    this.intForDes = 4;
                }

                this.intDescription = "This spice originates from the north where it is commonly used in hot drinks, baked goods, and desserts.";

                //Define Utility
                this.utility = "material";

                //Utility Focused

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 9;
                this.intForCraft = 2;
                this.ingredients = [["Ogard", 1]];
                this.biproducts = [[new Item("ogardPollen", false), 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
            else if (this.type == "ogardPollen")
            {
                //For All Items
                this.identity = "Ogard Pollen";
                this.weight = 0.02;
                this.size = 8;
                this.description = "Ogard Pollen is a light yellow fluffy airy substance that smells imensely sweet, hot, and nutty.";
                if (player.raceName == "Freynor")
                {
                    this.intForDes = 2;
                }
                else
                {
                    this.intForDes = 7;
                }
                this.intDescription = "Ogard pollen is used in alchemy and to make fine perfume.";

                //Define Utility
                this.utility = "material";

                //Utility Focused

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
                this.sellValue = 10 + Math.floor(player.getCharisma() / 12); // at max, sell for 14.
            }
            else if (this.type == "driedTechiLeaf")
            {
                //For All Items
                this.identity = "Dried Techi Leaf";
                this.weight = 0.1;
                this.size = 7;
                this.description = "The dried leaf of a techi weed.";
                this.intForDes = 5;
                this.intDescription = "This dried herb makes up the body of much of the tea drunk throughout the lands.";

                //Define Utility
                this.utility = "material";

                //Utility Focused

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 2;
                this.ingredients = [["Techi Leaf", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "techiLeaf")
            {
                //For All Items
                this.identity = "Techi Leaf";
                this.weight = 0.1;
                this.size = 7;
                this.description = "Techi weeds grow scattered among the northern plains.";
                this.intForDes = 5;
                this.intDescription = "Techi leaf can be used in alchemy or it can be dried and made into a bitter tea.";

                //Define Utility
                this.utility = "material";

                //Utility Focused

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "stomwikLeaf")
            {
                //For All Items
                this.identity = "Stomwik Leaf";
                this.weight = 0.1;
                this.size = 7;
                this.description = "The stomwik plant has an unforgetably foul odor, imagine wet sweaty socks that have begun to mold mixed with a hint of wrotten egg then sprinkled with a just a dab of cat urine.";
                this.intForDes = 0;
                this.intDescription = "";

                //Define Utility
                this.utility = "material";

                //Utility Focused

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 15 - Math.floor(player.getCharisma() / 10); // at max, buy for 10.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 10); // at max, sell for 8.
            }
            else if (this.type == "tylunFlower")
            {
                //For All Items
                this.identity = "Tylun Flower";
                this.weight = 0.1;
                this.size = 7;
                this.description = "A gorgeous pink flower with pointed petals and a velvety soft stem.";
                this.intForDes = 5;
                this.intDescription = "This rare flower can be used in many alchemy recipes.";

                //Define Utility
                this.utility = "material";

                //Utility Focused

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 22 - Math.floor(player.getCharisma() / 10); // at max, buy for 17.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 6); // at max, sell for 16.
            }
            else if (this.type == "gojiiBerries")
            {
                //For All Items
                this.identity = "Gojii Berries";
                this.weight = 0.5;
                this.size = 7;
                this.description = "Sweet smelling light green berries dotted with three red spots.";
                this.intForDes = 44;
                this.intDescription = "The Gojii berry contains one of the most poisonous compounds in the world...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "gojii";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 45 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 25.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 5); // at max, sell for 15.
            }
            else if (this.type == "healingSalve")
            {
                //For All Items
                this.identity = "Jar of Healing Salve";
                this.weight = 3;
                this.size = 6;
                this.description = "An expertly devised alchemic mixture that can be used to heal minor wounds.";
                this.intForDes = 6;
                this.intDescription = "Healing salve is the most commonly used medacine in the lands.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["glassJar", 1]];

                //Utility Focused
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 2; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "healthI";

                //Crafting
                this.yield = 1;
                this.intForCraft = 10;
                this.ingredients = [["glassJar", 1], ["Naaprid Butter", 1], ["Culpris Leaf", 8], ["blubber", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 70 - Math.floor(player.getCharisma() / 2); // at max, buy for 45.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 3); // at max, sell for 45.
            }
            else if (this.type == "trollsBlood")
            {
                //For All Items
                this.identity = "Jar of Tempered Troll's Blood";
                this.weight = 3;
                this.size = 6;
                this.description = "Troll's blood that has been tempered at a perfect temperature over the course of several days.";
                this.intForDes = 24;
                this.intDescription = "Trolls' blood is responsible for their uncanny ability to regenerate from injuries.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["glassJar", 1]];

                //Utility Focused
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 3; //quenches thirst.
                this.warmth = 3; //warms player.
                this.heal = 15; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "healthVI";

                //Crafting
                this.yield = 1;
                this.intForCraft = 49;
                this.ingredients = [["Jar of Troll's Blood", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1000 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 800.
                this.sellValue = 300 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 500.
            }
            else if (this.type == "rawTrollsBlood")
            {
                //For All Items
                this.identity = "Jar of Troll's Blood";
                this.weight = 4;
                this.size = 6;
                this.description = "The blood of a troll stored in a jar.";
                this.intForDes = 20;
                this.intDescription = "Troll's have a slight natural magic resistance; their raw blood exhibits this feature!";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["glassJar", 1]];

                //Utility Focused
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 3; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = -4; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = -20; //restores will.

                //ability
                this.ability = "trollPoison";

                //Crafting
                this.yield = 1;
                this.intForCraft = 27;
                this.ingredients = [["Glass Jar", 1], ["Troll Flesh", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 690 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 590.
                this.sellValue = 185 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 285.
            }
            else if (this.type == "bucketOfNaapridMilk")
            {
                //For All Items
                this.identity = "Bucket of Naaprid Milk";
                this.weight = 6;
                this.size = 12;
                this.description = "An iron bucket filled with the thick creamy milk of a naaprid.";
                this.intForDes = 3;
                this.intDescription = "The Kellish were the first people to tame and farm naaprids for milk and meat.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["bucket", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 10; //satisfies hunger.
                this.thirst = 35; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 2; //recoops lost energy.
                this.replenish = 1; //restores will.

                //ability
                this.ability = "quench";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 38 - Math.floor(player.getCharisma() / 4); // at max, buy for 26.
                this.sellValue = 18 + Math.floor(player.getCharisma() / 6); // at max, sell for 26.
            }
            else if (this.type == "bucketOfWater")
            {
                //For All Items
                this.identity = "Bucket of Water";
                this.weight = 6;
                this.size = 12;
                this.description = "An iron bucket filled to the brim with water.";
                this.intForDes = 1;
                this.intDescription = "Buckets of water are only used in recipes that require a lot of water.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["bucket", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 35; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 1; //recoops lost energy.
                this.replenish = 1; //restores will.

                //ability
                this.ability = "quench";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 10 - Math.floor(player.getCharisma() / 10); // at max, buy for 5.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "bucketOfTechiTea")
            {
                //For All Items
                this.identity = "Bucket of Techi Tea";
                this.weight = 6;
                this.size = 12;
                this.description = "An iron bucket filled to the brim with hot leave juice.";
                this.intForDes = 1;
                this.intDescription = "Techi weed is the standard base for almost all tea in the lands.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["bucket", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 35; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 2.5; //recoops lost energy.
                this.replenish = 4; //restores will.
                this.wake = 5; //awakens player.

                //ability
                this.ability = "quench";

                //Crafting
                this.yield = 1;
                this.intForCraft = 1;
                this.ingredients = [["Bucket of Water", 1], ["Dried Techi Leaf", 9]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue =  45 - Math.floor(player.getCharisma() / 2); // at max, buy for 20.
                this.sellValue = 12 + Math.floor(player.getCharisma() / 6); // at max, sell for 20.
            }
            else if (this.type == "techiTea")
            {
                //For All Items
                this.identity = "Techi Tea";
                this.weight = 1;
                this.size = 6;
                this.description = "A pint glass filled with plain unflavoured techi tea.";
                this.intForDes = 2;
                this.intDescription = "It is a hot drink that is both energizing and calming.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["pintGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 4; //quenches thirst.
                this.warmth = 5; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.25; //recoops lost energy.
                this.replenish = 0.5; //restores will.
                this.wake = 0.5; //awakens player.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 10;
                this.intForCraft = 0;
                this.ingredients = [["Pint Glass", 10], ["Bucket of Techi Tea", 1]];
                this.biproducts = [[new Item("bucket", false), 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
            }
            else if (this.type == "bucketOfPluttJuice")
            {
                //For All Items
                this.identity = "Bucket of Plutt Juice";
                this.weight = 7;
                this.size = 12;
                this.description = "An iron bucket filled to the brim with fresh squeezed plutt berry juice.";
                if (player.raceName == "Freynor")
                {
                    this.intForDes = 1;
                }
                else
                {
                    this.intForDes = 11;
                }
                this.intDescription = "Hot plutt berry cider, a freydic specialty, can be made by heating plutt berry juice with some ground ogard.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["bucket", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 14; //satisfies hunger.
                this.thirst = 40; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 1; //recoops lost energy.
                this.replenish = 2; //restores will.

                //ability
                this.ability = "quench";

                //Crafting
                this.yield = 1;
                if (player.raceName == "Freynor")
                {
                    this.intForCraft = 0;
                }
                else
                {
                    this.intForCraft = 4;
                }
                this.ingredients = [["Bucket", 1], ["Plutt Berries", 14]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 75 - Math.floor(player.getCharisma() / 5); // at max, buy for 65.
                this.sellValue = 35 + Math.floor(player.getCharisma() / 3); // at max, sell for 50.
            }
            else if (this.type == "pluttJuicePintGlass")
            {
                //For All Items
                this.identity = "Pint Glass of Plutt Juice";
                this.weight = 1;
                this.size = 6;
                this.description = "A pint glass filled with fresh squeezed plutt berry juice.";
                this.intForDes = 0;
                this.intDescription = "It has a pulpy somewhat viscous texture and a strong natural sweetness.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["pintGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1.4; //satisfies hunger.
                this.thirst = 5; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = 0.2; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 10;
                this.intForCraft = 0;
                this.ingredients = [["Pint Glass", 10], ["Bucket of Plutt Juice", 1]];
                this.biproducts = [[[new Item("bucket", false), 1]]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 9 - Math.floor(player.getCharisma() / 50); // at max, buy for 8.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
            }
            else if (this.type == "bucketOfHotPluttBerryCider")
            {
                //For All Items
                this.identity = "Bucket of Hot Plutt Berry Cider";
                this.weight = 7;
                this.size = 12;
                this.description = "An iron bucket filled to the brim with sweet spiced plutt berry cider.";
                this.intForDes = 0;
                this.intDescription = "The cider fills the air around it with a hot, nutty and sweet berry scent.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["bucket", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 15; //satisfies hunger.
                this.thirst = 40; //quenches thirst.
                this.warmth = 40; //warms player.
                this.heal = 0; //heals health.
                this.generation = 1; //recoops lost energy.
                this.replenish = 2; //restores will.

                //ability
                this.ability = "quench";

                //Crafting
                this.yield = 1;
                if (player.raceName == "Freynor")
                {
                    this.intForDes = 1;
                }
                else
                {
                    this.intForDes = 11;
                }
                this.ingredients = [["Bucket of Plutt Juice", 1], ["Ground Ogard", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 100 - Math.floor(player.getCharisma() / 5); // at max, buy for 90.
                this.sellValue = 55 + Math.floor(player.getCharisma() / 3); // at max, sell for 70.
            }
            else if (this.type == "pluttCiderPintGlass")
            {
                //For All Items
                this.identity = "Pint Glass of Hot Plutt Berry Cider";
                this.weight = 1;
                this.size = 6;
                this.description = "A pint glass filled with spiced plutt berry cider.";
                this.intForDes = 0;
                this.intDescription = "Plutt berry cider has a strong spicy and nutty aroma that accompanies that of the plutt berries.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["pintGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1.5; //satisfies hunger.
                this.thirst = 5; //quenches thirst.
                this.warmth = 5; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = 0.2; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 10;
                this.intForCraft = 0;
                this.ingredients = [["Pint Glass", 10], ["Bucket of Hot Plutt Berry Cider", 1]];
                this.biproducts = [[[new Item("bucket", false), 1]]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 14 - Math.floor(player.getCharisma() / 15); // at max, buy for 11.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 12); // at max, sell for 9.
            }
            else if (this.type == "walrusLeatherWaterskinFull")
            {
                //For All Items
                this.identity = "Walrus Leather Waterskin (full)";
                this.weight = 3;
                this.size = 8;
                this.description = "A water skin made from walrus hide.";
                this.intForDes = 0;
                this.intDescription = "The walrus skin holds the water well.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["walrusLeatherWaterskinTwo", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 4; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 15); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "walrusLeatherWaterskinTwo")
            {
                //For All Items
                this.identity = "Walrus Leather Waterskin (2)";
                this.weight = 2;
                this.size = 8;
                this.description = "A water skin made from walrus hide.";
                this.intForDes = 0;
                this.intDescription = "The walrus skin holds the water well.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["walrusLeatherWaterskinOne", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 4; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "walrusLeatherWaterskinOne")
            {
                //For All Items
                this.identity = "Walrus Leather Waterskin (1)";
                this.weight = 1;
                this.size = 8;
                this.description = "A water skin made from walrus hide.";
                this.intForDes = 0;
                this.intDescription = "There's about one good drink left in it.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["walrusLeatherWaterskin", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 4; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3; // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "harstAle")
            {
                //For All Items
                this.identity = "Harst Ale";
                this.weight = 1;
                this.size = 6;
                this.description = "A glass pint of harst ale.";
                this.intForDes = 1;
                this.intDescription = "This ale is made from harst grain.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["pintGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.5; //satisfies hunger.
                this.thirst = 4; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.5; //recoops lost energy.
                this.replenish = -2; //restores will.
                this.alcohol = 35; //intoxicates the mind.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 200;
                this.intForCraft = 0;
                this.ingredients = [["Pint Glass", 200], ["Barrel of Harst Ale", 1]];
                this.biproducts = [[[new Item("barrel", false), 1]]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3 - Math.floor(player.getCharisma() / 50); // at max, buy for 2.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
            else if (this.type == "pluttWine")
            {
                //For All Items
                this.identity = "Pint of Plutt Wine";
                this.weight = 1;
                this.size = 6;
                this.description = "A glass pint of plutt wine.";
                this.intForDes = 1;
                this.intDescription = "This wine is made from plutt berries.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["pintGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.5; //satisfies hunger.
                this.thirst = 4; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.5; //recoops lost energy.
                this.replenish = -3; //restores will.
                this.alcohol = 50; //intoxicates the mind.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 200;
                this.intForCraft = 0;
                this.ingredients = [["Bottle of Plutt Wine", 1], ["Pint Glass", 4]];
                this.biproducts = [[[new Item("glassBottle", false), 1]]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 22 - Math.floor(player.getCharisma() / 15); // at max, buy for 19.
                this.sellValue = 17 + Math.floor(player.getCharisma() / 25); // at max, sell for 19.
            }
            else if (this.type == "glassBottleOfPluttWine")
            {
                //For All Items
                this.identity = "Bottle of Plutt Wine";
                this.weight = 4;
                this.size = 6;
                this.description = "A bottle of plutt berry wine.";
                this.intForDes = 0;
                this.intDescription = "It is a fairly sweet wine with notes of honey, spice and a butteryness attained by aging in wood.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["glassBottle", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2; //satisfies hunger.
                this.thirst = 16; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 2; //recoops lost energy.
                this.replenish = -12; //restores will.
                this.alcohol = 200; //intoxicates the mind.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 40;
                this.intForCraft = 0;
                this.ingredients = [["Glass Bottle", 50], ["Cask of Plutt Wine", 1]];
                this.biproducts = [[[new Item("barrel", false), 1]]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 82 - Math.floor(player.getCharisma() / 5); // at max, buy for 72.
                this.sellValue = 66 + Math.floor(player.getCharisma() / 8); // at max, sell for 72.
            }
            else if (this.type == "glassBottleOfWater")
            {
                //For All Items
                this.identity = "Bottle of Water";
                this.weight = 4;
                this.size = 6;
                this.description = "A bottle of water.";
                this.intForDes = 0;
                this.intDescription = "The water inside the bottle is wet... be careful.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["glassBottle", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 16; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.4; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
                this.sellValue = 2; // at max, sell for 72.
            }
            else if (this.type == "glassBottle")
            {
                //For All Items
                this.identity = "Glass Bottle";
                this.weight = 0.5;
                this.size = 6;
                this.description = "An empty bottle made of glass.";
                this.intForDes = 0;
                this.intDescription = "Usually this type of container is used to hold wine or other fancy alcoholic drinks.";

                //Define Utility
                this.utility = "Material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 13;
                this.ingredients = [["Glass", 1]];


                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2; // at max, buy for 2.
                this.sellValue = 2; // at max, sell for 2.
            }
            else if (this.type == "waterPintGlass")
            {
                //For All Items
                this.identity = "Pint Glass of Water";
                this.weight = 1;
                this.size = 6;
                this.description = "A pint glass filled with water.";
                this.intForDes = 0;
                this.intDescription = "A less intoxicating alternative to alcohol!";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["pintGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 4; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.1; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 10;
                this.intForCraft = 0;
                this.ingredients = [["Pint Glass", 10], ["Bucket of Water", 1]];
                this.biproducts = [[[new Item("bucket", false), 1]]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2; // at max, buy for 2.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "kellishClayPotOfNaapridMilk")
            {
                //For All Items
                this.identity = "Kellish Clay Pot of Naaprid Milk";
                this.weight = 40;
                this.size = 12;
                this.description = "A kellish style of pot filled with the milk of a naaprid.";
                this.intForDes = 8;
                if (player.raceName == "Kel")
                {
                    this.intForDes = 0;
                }
                this.intDescription = "This type of pot is traditionally used by the kellish to collect milk from the local naaprids.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["kellishClayPot", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 18; //satisfies hunger.
                this.thirst = 60; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 3; //recoops lost energy.
                this.replenish = 2; //restores will.

                //ability
                this.ability = "quench";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 85 - Math.floor(player.getCharisma() / 5); // at max, buy for 75.
                this.sellValue = 48 + Math.floor(player.getCharisma() / 2); // at max, sell for 73.
            }
            else if (this.type == "kellishClayPotOfMushroomStew")
            {
                //For All Items
                this.identity = "Kellish Clay Pot of Mushroom Stew";
                this.weight = 45;
                this.size = 12;
                this.description = "A kellish style of pot filled with a brothy stew of mushrooms, potatoes, and harst grain.";
                this.intForDes = 3;
                if (player.raceName == "Kel")
                {
                    this.intForDes = 1;
                }
                this.intDescription = "This stew can be portioned into smaller servings if you have clay bowls at hand.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["kellishClayPot", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 60; //satisfies hunger.
                this.thirst = 60; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 2; //restores will.

                //ability
                this.ability = "sensational";

                //Crafting
                this.yield = 2;
                this.intForCraft = 23;
                if (player.raceName == "Kel")
                {
                    this.intForCraft = 9;
                }
                this.ingredients = [["Kellish Clay Pot of Water", 1], ["Boiled Glin Mushrooms", 8], ["Potato", 12], ["Harst Grain", 9]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 154 - Math.floor(player.getCharisma() / 2); // at max, buy for 129.
                this.sellValue = 87 + Math.floor(player.getCharisma() / 2); // at max, sell for 112.
            }
            else if (this.type == "kellishClayPotOfWater")
            {
                //For All Items
                this.identity = "Kellish Clay Pot of Water";
                this.weight = 40;
                this.size = 12;
                this.description = "A kellish style of pot filled with water.";
                this.intForDes = 2;
                this.intDescription = "This style of pot holds a lot of water.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["kellishClayPot", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 60; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 2; //restores will.

                //ability
                this.ability = "quench";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 17 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
            }
            else if (this.type == "pintGlass")
            {
                //For All Items
                this.identity = "Pint Glass";
                this.weight = 0.1;
                this.size = 6;
                this.description = "A glass that can hold up to a pint of liquid.";
                this.intForDes = 0;
                this.intDescription = "This type of container is most oftenly used for alcohol such as beer.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 2;
                this.intForCraft = 5;
                this.ingredients = [["Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "walrusLeatherWaterskin")
            {
                //For All Items
                this.identity = "Walrus Leather Waterskin (empty)";
                this.weight = 0.1;
                this.size = 8;
                this.description = "A water skin made from walrus hide.";
                this.intForDes = 0;
                this.intDescription = "It seems to be empty right now.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 8;
                this.intForCraft = 15;
                this.ingredients = [["Walrus Hide", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3; // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "kellishClayPot")
            {
                //For All Items
                this.identity = "Kellish Clay Pot";
                this.weight = 15;
                this.size = 15;
                this.description = "A kellish style of pot made from from clay.";
                this.intForDes = 7;
                if (player.raceName == "Kel")
                {
                    this.intForDes = 0;
                }
                this.intDescription = "This is used for holding huge amounts of liquids, as well as for cooking soups and stews in.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 14;
                if (player.raceName == "Kel")
                {
                    this.intForCraft = 5;
                }
                this.ingredients = [["Clay", 5]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 14 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 15); // at max, sell for 11.
            }
            else if (this.type == "bucket")
            {
                //For All Items
                this.identity = "Bucket";
                this.weight = 2;
                this.size = 12;
                this.description = "An iron bucket.";
                this.intForDes = 4;
                this.intDescription = "This is used for holding large amounts of liquids.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 8;
                this.ingredients = [["Iron", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8 - Math.floor(player.getCharisma() / 10); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "glassJar")
            {
                //For All Items
                this.identity = "Glass Jar";
                this.weight = 1;
                this.size = 6;
                this.description = "A jar made of glass sealed tighly with a metal lid.";
                this.intForDes = 4;
                this.intDescription = "This can be used to contain magical substances and other such commodities that should be stored in a vaccum sealed container.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 4;
                this.ingredients = [["Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 25); // at max, buy for 2.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
            else if (this.type == "jarOfOil")
            {
                //For All Items
                this.identity = "Jar of Oil";
                this.weight = 2;
                this.size = 6;
                this.description = "A glass jar full to the brim with flammable oil.";
                this.intForDes = 9;
                this.intDescription = "This can be used to fuel torches and lamps as well as to set flammable traps or craft flammable arrows.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 9;
                this.ingredients = [["Blubber", 1], ["Glass Jar", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 24 - Math.floor(player.getCharisma() / 12); // at max, buy for 20.
                this.sellValue = 9 + Math.floor(player.getCharisma() / 5); // at max, sell for 19.
            }
            else if (this.type == "potionGlass")
            {
                //For All Items
                this.identity = "Potion Glass";
                this.weight = 0.2;
                this.size = 6;
                this.description = "A glass container specifically designed for holding liquid alchemic mixtures.";
                this.intForDes = 1;
                this.intDescription = "This type of container is necessary in order to make most potions.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 2;
                this.intForCraft = 6;
                this.ingredients = [["Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "vialOfWater")
            {
                //For All Items
                this.identity = "Vial of Water";
                this.weight = 0.5;
                this.size = 5;
                this.description = "A potion glass full of water.";
                this.intForDes = 4;
                this.intDescription = "Most potions require water as their base.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["potionGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2 - Math.floor(player.getCharisma() / 50); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "ogardPerfume")
            {
                //For All Items
                this.identity = "Ogard Perfume";
                this.weight = 0.5;
                this.size = 5;
                this.description = "A liquid perfume with the scent of ogard spice.";
                this.intForDes = 0;
                this.intDescription = "It smells sweet and wild, with a hot, nutty aroma.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["potionGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "ogardPerfume";

                //Crafting
                this.yield = 1;
                this.intForCraft = 14;
                this.ingredients = [["Vial of Water", 1], ["Ogard Pollen", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 34 - Math.floor(player.getCharisma() / 6); // at max, buy for 26.
                this.sellValue = 20 + Math.floor(player.getCharisma() / 8); // at max, sell for 26.
            }
            else if (this.type == "cleansingPotion")
            {
                //For All Items
                this.identity = "Potion of Cleansing";
                this.weight = 0.5;
                this.size = 5;
                this.description = "A light coloured liquid that is both tasteless and odorless.";
                this.intForDes = 41;
                this.intDescription = "This potion causes the player to become sick with a magical illness that cures poisons and other biological afflictions.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["potionGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = -2; //satisfies hunger.
                this.thirst = -10; //quenches thirst.
                this.warmth = -10; //warms player.
                this.heal = 0; //heals health.
                this.generation = -2; //recoops lost energy.
                this.replenish = 1; //restores will.

                //ability
                this.ability = "cleansing";

                //Crafting
                this.yield = 1;
                this.intForCraft = 35;
                this.ingredients = [["Potion Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 925 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 725.
                this.sellValue = 495 + Math.floor(player.getCharisma() / 0.25); // at max, sell for 695.
            }
            else if (this.type == "energyPotionI")
            {
                //For All Items
                this.identity = "Potion of Energizing";
                this.weight = 0.5;
                this.size = 5;
                this.description = "The smooth syrup thick yellow liquid ripples quickly; you can feel the vibrations it makes through its glass container.";
                this.intForDes = 41;
                this.intDescription = "This potion restores your energy slowly over time.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["potionGlass", 1]];

                //Utility Focused
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "energyI";

                //Crafting
                this.yield = 1;
                this.intForCraft = 32;
                this.ingredients = [["Potion Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 140 - Math.floor(player.getCharisma() / 1); // at max, buy for 90.
                this.sellValue = 65 + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
            }
            else if (this.type == "energilPotionI")
            {
                //For All Items
                this.identity = "Syrum of Tirelessness";
                this.weight = 0.5;
                this.size = 5;
                this.description = "A thick and glistening pink liquid with a slight opaqueness to it.";
                this.intForDes = 35;
                this.intDescription = "This potion reduces the cost of all actions that would normally consume energy.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["potionGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "energilI";

                //Crafting
                this.yield = 1;
                this.intForCraft = 30;
                this.ingredients = [["Potion Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 208 - Math.floor(player.getCharisma() / 1); // at max, buy for 158.
                this.sellValue = 96 + Math.floor(player.getCharisma() / 2); // at max, sell for 121.
            }
            else if (this.type == "energilPotionII")
            {
                //For All Items
                this.identity = "Syrum of Tirelessness";
                this.weight = 0.5;
                this.size = 5;
                this.description = "A thick and glistening pink liquid with a slight opaqueness to it.";
                this.intForDes = 35;
                this.intDescription = "This potion reduces the cost of all actions that would normally consume energy.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["potionGlass", 1]];

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "energilII";

                //Crafting
                this.yield = 1;
                this.intForCraft = 36;
                this.ingredients = [["Potion Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 349 - Math.floor(player.getCharisma() / 1); // at max, buy for 299.
                this.sellValue = 199 + Math.floor(player.getCharisma() / 1); // at max, sell for 249.
            }
            else if (this.type == "speedPotionI")
            {
                //For All Items
                this.identity = "Elixer of Dexterity";
                this.weight = 0.5;
                this.size = 5;
                this.description = "A glimmering yellow liquid swirls around rapidly in the glass as if it itself is restless.";
                this.intForDes = 0;
                this.intDescription = "This potion magically enhances your dexterity.";

                //Define Utility
                this.utility = "food";
                this.subUtility = "reusable";
                this.refund = [["potionGlass", 1]];

                //Utility Focused
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 1; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "speedI";

                //Crafting
                this.yield = 1;
                this.intForCraft = 33;
                this.ingredients = [["Potion Glass", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 225 - Math.floor(player.getCharisma() / 1); // at max, buy for 175.
                this.sellValue = 95 + Math.floor(player.getCharisma() / 2); // at max, sell for 120.
            }
            else if (this.type == "etyrHide")
            {
                //For All Items
                this.identity = "Etyr Hide";
                this.weight = 1;
                this.size = 11;
                this.description = "Scaley hide from an Etyr.";
                this.intForDes = 6;
                this.intDescription = "This looks like it could sell for about 2 coins, but if I haggle I might be able to raise that to 5.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 9 - Math.floor(player.getCharisma() / 15); // at max, buy for 6.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
            }
            else if (this.type == "neevFur")
            {
                //For All Items
                this.identity = "Neev Fur";
                this.weight = 0.5;
                this.size = 15;
                this.description = "The soft matted greyish brown fur of a neev.";
                this.intForDes = 9;
                this.intDescription = "The fur is incredibly soft, durable, and it has high elasticity.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 268 - Math.floor(player.getCharisma() / 0.35); // at max, buy for 126.
                this.sellValue = 75 + Math.floor(player.getCharisma() / 1); // at max, sell for 125.
            }
            else if (this.type == "frichPelt")
            {
                //For All Items
                this.identity = "Frich Pelt";
                this.weight = 1;
                this.size = 12;
                this.description = "The foul smelling, mangy, grey pelt of a Frich.";
                this.intForDes = 4;
                this.intDescription = "This can be made into inexpensive clothing.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5 - Math.floor(player.getCharisma() / 15); // at max, buy for 2.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
            else if (this.type == "neculaisEar")
            {
                //For All Items
                this.identity = "Neculai's Ear";
                this.weight = 0.05;
                this.size = 6;
                this.description = "After killing Neculai you cut off his ear.";
                this.intForDes = 1;
                this.intDescription = "Without his ear he can't hear, oh dear!";

                //Define Utility
                this.utility = "questItem";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "beesWax")
            {
                //For All Items
                this.identity = "Wax";
                this.weight = 1.8;
                this.size = 12;
                this.description = "A hefty glob of bee's wax.";
                this.intForDes = 0;
                this.intDescription = "It has an enchanting aroma of honey.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5; // at max, buy for 5.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
            }
            else if (this.type == "candle")
            {
                //For All Items
                this.identity = "Candle";
                this.weight = 0.6;
                this.size = 12;
                this.description = "A stick of wax with a wick, usually referred to as a candle.";
                this.intForDes = 0;
                this.intDescription = "This candle has not been used yet.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["candle2", 1]];

                //ability
                this.ability = "lighter";

                //Crafting
                this.yield = 3;
                this.intForCraft = 7;
                this.ingredients = [["Wax", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2; // at max, buy for 2.
                this.sellValue = 2; // at max, sell for 2.
            }
            else if (this.type == "candle2")
            {
                //For All Items
                this.identity = "Candle (2)";
                this.weight = 0.4;
                this.size = 12;
                this.description = "A stick of wax with a wick, usually referred to as a candle.";
                this.intForDes = 0;
                this.intDescription = "This candle has been worn in.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["candle1", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "candle1")
            {
                //For All Items
                this.identity = "Candle (1)";
                this.weight = 0.2;
                this.size = 12;
                this.description = "A stick of wax with a wick, usually referred to as a candle.";
                this.intForDes = 0;
                this.intDescription = "This candle is almost all the way melted.";

                //Define Utility
                this.utility = "tool";

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "jackOLantern")
            {
                //For All Items
                this.identity = "Jack O Lantern";
                this.weight = 7;
                this.size = 12;
                this.description = "A decoratively carved pumpkin lit with several candles.";
                this.intForDes = 0;
                this.intDescription = "All of its candles are unused as of this point.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["jackOLantern2", 1]];

                //ability
                this.ability = "lighter";

                //Crafting
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Burnt Out Jack O Lantern", 1], ["Candle", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 23 - Math.floor(player.getCharisma() / 10); // at max, buy for 18.
                this.sellValue = 12 + Math.floor(player.getCharisma() / 8); // at max, sell for 18.
            }
            else if (this.type == "jackOLantern2")
            {
                //For All Items
                this.identity = "Jack O Lantern (2)";
                this.weight = 7;
                this.size = 12;
                this.description = "A decoratively carved pumpkin lit with several candles.";
                this.intForDes = 0;
                this.intDescription = "Its candles are all somewhat melted.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["jackOLantern1", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 21 - Math.floor(player.getCharisma() / 10); // at max, buy for 16.
                this.sellValue = 10 + Math.floor(player.getCharisma() / 8); // at max, sell for 16.
            }
            else if (this.type == "jackOLantern1")
            {
                //For All Items
                this.identity = "Jack O Lantern (1)";
                this.weight = 7;
                this.size = 12;
                this.description = "A decoratively carved pumpkin lit with several candles.";
                this.intForDes = 0;
                this.intDescription = "Its candles are almost completely melted.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["jackOLanternEmpty", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 8); // at max, sell for 14.
            }
            else if (this.type == "jackOLanternEmpty")
            {
                //For All Items
                this.identity = "Burnt Out Jack O Lantern";
                this.weight = 7;
                this.size = 12;
                this.description = "A decoratively carved pumpkin.";
                this.intForDes = 0;
                this.intDescription = "Its candles are the way melted.";

                //Define Utility
                this.utility = "tool";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                if (player.raceName == "Kel")
                {
                    this.intForCraft = 0;
                }
                else
                {
                    this.intForCraft = 3;
                }
                this.ingredients = [["Pumpkin", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 16 - Math.floor(player.getCharisma() / 10); // at max, buy for 11.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 8); // at max, sell for 11.
            }
            else if (this.type == "pumpkin")
            {
                //For All Items
                this.identity = "Pumpkin";
                this.weight = 11;
                this.size = 12;
                this.description = "A large rounded orange squash.";
                this.intForDes = 0;
                this.intDescription = "Pumpkins are primarily cultivated by the kellish tribes; they are used as food and for carving.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 11 - Math.floor(player.getCharisma() / 12); // at max, buy for 7.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 15); // at max, sell for 7.
            }
            else if (this.type == "roastedPumpkin")
            {
                //For All Items
                this.identity = "Roasted Pumpkin";
                this.weight = 10;
                this.size = 6;
                this.description = "A stringy textured mildly sweet roasted pumpkin squash.";
                this.intForDes = 10;
                this.intDescription = "Cooked pumpkin is best used in pumpkin bread or pumpkin pie.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 9; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 3; //warms player.
                this.heal = 0; //heals health.
                this.generation = -4; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                if (player.raceName == "Kel")
                {
                    this.intForCraft = 4;
                }
                else
                {
                    this.intForCraft = 10;
                }
                this.ingredients = [["Pumpkin", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
            }
            else if (this.type == "oilLamp")
            {
                //For All Items
                this.identity = "Oil Lamp";
                this.weight = 3;
                this.size = 12;
                this.description = "An oil burning lamp.";
                this.intForDes = 0;
                this.intDescription = "The lamp is full of oil.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLamp2", 1]];

                //ability
                this.ability = "lighter";

                //Crafting
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Empty Oil Lamp", 1], ["Jar of Oil", 1]];
                this.biproducts = [[new Item("glassJar", false), 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 50 - Math.floor(player.getCharisma() / 6); // at max, buy for 42.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 4); // at max, sell for 42.
            }
            else if (this.type == "oilLamp2")
            {
                //For All Items
                this.identity = "Oil Lamp (2)";
                this.weight = 2.6;
                this.size = 12;
                this.description = "An oil burning lamp.";
                this.intForDes = 0;
                this.intDescription = "There is a fair amount of oil in this lamp.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLamp1", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 44 - Math.floor(player.getCharisma() / 6); // at max, buy for 36.
                this.sellValue = 24 + Math.floor(player.getCharisma() / 4); // at max, sell for 36.
            }
            else if (this.type == "oilLamp1")
            {
                //For All Items
                this.identity = "Oil Lamp (1)";
                this.weight = 2.3;
                this.size = 12;
                this.description = "An oil burning lamp.";
                this.intForDes = 0;
                this.intDescription = "This lamp is almost out of oil.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLampEmpty", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 40 - Math.floor(player.getCharisma() / 6); // at max, buy for 32.
                this.sellValue = 20 + Math.floor(player.getCharisma() / 4); // at max, sell for 32.
            }
            else if (this.type == "oilLampEmpty")
            {
                //For All Items
                this.identity = "Empty Oil Lamp";
                this.weight = 2;
                this.size = 12;
                this.description = "An oil burning lamp.";
                this.intForDes = 0;
                this.intDescription = "This lamp is out of oil.";

                //Define Utility
                this.utility = "tool";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 19;
                this.ingredients = [["Iron", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 38 - Math.floor(player.getCharisma() / 6); // at max, buy for 30.
                this.sellValue = 18 + Math.floor(player.getCharisma() / 4); // at max, sell for 30.
            }
            else if (this.type == "oilLantern")
            {
                //For All Items
                this.identity = "Oil Lantern";
                this.weight = 4;
                this.size = 12;
                this.description = "A finely crafted lantern that runs on oil.";
                this.intForDes = 0;
                this.intDescription = "The lantern is full of oil.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLantern4", 1]];

                //ability
                this.ability = "lighter";

                //Crafting
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Empty Oil Lantern", 1], ["Jar of Oil", 1]];
                this.biproducts = [[new Item("glassJar", false), 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 82 - Math.floor(player.getCharisma() / 3); // at max, buy for 67.
                this.sellValue = 48 + Math.floor(player.getCharisma() / 3); // at max, sell for 63.
            }
            else if (this.type == "oilLantern4")
            {
                //For All Items
                this.identity = "Oil Lantern (4)";
                this.weight = 3.8;
                this.size = 12;
                this.description = "A finely crafted lantern that runs on oil.";
                this.intForDes = 0;
                this.intDescription = "Most of the oil in the lantern remains.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLantern3", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 78 - Math.floor(player.getCharisma() / 3); // at max, buy for 63.
                this.sellValue = 44 + Math.floor(player.getCharisma() / 3); // at max, sell for 59.
            }
            else if (this.type == "oilLantern3")
            {
                //For All Items
                this.identity = "Oil Lantern (3)";
                this.weight = 3.6;
                this.size = 12;
                this.description = "A finely crafted lantern that runs on oil.";
                this.intForDes = 0;
                this.intDescription = "The lantern has just over half of its oil.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLantern2", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 74 - Math.floor(player.getCharisma() / 3); // at max, buy for 59.
                this.sellValue = 40 + Math.floor(player.getCharisma() / 3); // at max, sell for 55.
            }
            else if (this.type == "oilLantern2")
            {
                //For All Items
                this.identity = "Oil Lantern (2)";
                this.weight = 3.4;
                this.size = 12;
                this.description = "A finely crafted lantern that runs on oil.";
                this.intForDes = 0;
                this.intDescription = "The lantern has just under half of its oil.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLantern1", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 72 - Math.floor(player.getCharisma() / 3); // at max, buy for 57.
                this.sellValue = 38 + Math.floor(player.getCharisma() / 3); // at max, sell for 53.
            }
            else if (this.type == "oilLantern1")
            {
                //For All Items
                this.identity = "Oil Lantern (1)";
                this.weight = 3.2;
                this.size = 12;
                this.description = "A finely crafted lantern that runs on oil.";
                this.intForDes = 0;
                this.intDescription = "The lantern is running low on oil..";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "reusable";
                this.refund = [["oilLanternEmpty", 1]];

                //ability
                this.ability = "lighter";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 71 - Math.floor(player.getCharisma() / 3); // at max, buy for 56.
                this.sellValue = 38 + Math.floor(player.getCharisma() / 3); // at max, sell for 53.
            }
            else if (this.type == "oilLanternEmpty")
            {
                //For All Items
                this.identity = "Empty Oil Lantern";
                this.weight = 3;
                this.size = 12;
                this.description = "A finely crafted lantern that runs on oil.";
                this.intForDes = 0;
                this.intDescription = "The Lantern has run out of oil.";

                //Define Utility
                this.utility = "tool";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 22;
                this.ingredients = [["Wood", 1], ["Iron", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 70 - Math.floor(player.getCharisma() / 3); // at max, buy for 55.
                this.sellValue = 38 + Math.floor(player.getCharisma() / 3); // at max, sell for 53.
            }
            else if (this.type == "mofuFeather")
            {
                //For All Items
                this.identity = "Mofu Feather";
                this.weight = 0.001;
                this.size = 8;
                this.description = "A feather from a mofu bird.";
                this.intForDes = 2;
                this.intDescription = "Mofu feathers can be used in many creations.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
            }
            else if (this.type == "mofuEgg")
            {
                //For All Items
                this.identity = "Mofu Egg";
                this.weight = 0.001;
                this.size = 5;
                this.description = "An egg laid by a mofu bird.";
                this.intForDes = 2;
                this.intDescription = "Mofu eggs can either be cooked or left to hatch.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "mofuHatch";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
            else if (this.type == "mofuFoot")
            {
                //For All Items
                this.identity = "Mofu Foot";
                this.weight = 0.001;
                this.size = 8;
                this.description = "A hard rough bird foot from a mofu.";
                this.intForDes = 7;
                this.intDescription = "Mofu feet can be used in some alchemy recipes.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "rawMofflingFlesh")
            {
                //For All Items
                this.identity = "Raw Moffling Flesh";
                this.weight = 0.1;
                this.size = 6;
                this.description = "The defeathered, eviscerated, whole body of a moffling ";
                this.intForDes = 3;
                this.intDescription = "Moffling is a commonly used name to refer to a baby mofu bird. Oh by the way... don't eat this raw.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "gutWorms";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
            else if (this.type == "cookedMofuEgg")
            {
                //For All Items
                this.identity = "Egg";
                this.weight = 0.1;
                this.size = 6;
                this.description = "A cooked egg from a mofu bird.";
                this.intForDes = 1;
                this.intDescription = "Eggs are a good source of protein... and fat.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.05; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 5;
                this.ingredients = [["Mofu Egg", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 15); // at max, sell for 4.
            }
            else if (this.type == "fermentedMofuEgg")
            {
                //For All Items
                this.identity = "Fermented Egg";
                this.weight = 0.1;
                this.size = 6;
                this.description = "A fermented egg from a mofu bird.";
                this.intForDes = 9;
                this.intDescription = "Fermented egg is popular in Orgish cuisine, but it is also used in some alchemy recipes.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.05; //recoops lost energy.
                this.replenish = -0.25; //restores will.
                this.alcohol = 6; //intoxicates the mind.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 13;
                this.ingredients = [["Mofu Egg", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
            }
            else if (this.type == "mofflingMeat")
            {
                //For All Items
                this.identity = "Moffling Meat";
                this.weight = 0.1;
                this.size = 6;
                this.description = "A whole roasted moffling.";
                this.intForDes = 1;
                this.intDescription = "In freydic tradition moffling is sometimes served as a delicacy served with fine berry sauce.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 4; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 2; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.1; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 20;
                this.ingredients = [["Raw Moffling Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 18 - Math.floor(player.getCharisma() / 15); // at max, buy for 15.
                this.sellValue = 10 + Math.floor(player.getCharisma() / 10); // at max, sell for 15.
            }
            else if (this.type == "pluttMoffling")
            {
                //For All Items
                this.identity = "Moffling Meat in Plutt Berry Sauce";
                this.weight = 0.1;
                this.size = 6;
                this.description = "A whole roasted moffling served with a thick sweet plutt berry sauce poured over it.";
                this.intForDes = 1;
                this.intDescription = "Moffling with plutt berry sauce is a delicacy enjoyed even by freydic nobles.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 7; //satisfies hunger.
                this.thirst = 0.25; //quenches thirst.
                this.warmth = 4; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.2; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 25;
                this.ingredients = [["Moffling Meat", 1], ["Plutt Berries", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 30 - Math.floor(player.getCharisma() / 10); // at max, buy for 25.
                this.sellValue = 20 + Math.floor(player.getCharisma() / 10); // at max, sell for 25.
            }
            else if (this.type == "akerMoffling")
            {
                //For All Items
                this.identity = "Moffling Meat in Aker Berry Sauce";
                this.weight = 0.1;
                this.size = 6;
                this.description = "A whole roasted moffling served with a tart aker berry sauce poured over it.";
                this.intForDes = 1;
                this.intDescription = "Moffling with aker berry sauce is a delicacy enjoyed even by freydic nobles.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 5.5; //satisfies hunger.
                this.thirst = 0.1; //quenches thirst.
                this.warmth = 4; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.2; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 23;
                this.ingredients = [["Moffling Meat", 1], ["Aker Berries", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 25 - Math.floor(player.getCharisma() / 10); // at max, buy for 20.
                this.sellValue = 15 + Math.floor(player.getCharisma() / 10); // at max, sell for 20.
            }
            else if (this.type == "rawMofuFlesh")
            {
                //For All Items
                this.identity = "Raw Mofu Flesh";
                this.weight = 3;
                this.size = 8;
                this.description = "The defeathered, eviscerated, whole body of a matured mofu bird. ";
                this.intForDes = 3;
                this.intDescription = "Mofu birds flesh is not safe to eat raw, be sure to cook it thoroughly.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "gutWorms";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 13 - Math.floor(player.getCharisma() / 12); // at max, buy for 9.
                this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
            }
            else if (this.type == "mofuMeat")
            {
                //For All Items
                this.identity = "Mofu Meat";
                this.weight = 3;
                this.size = 8;
                this.description = "A whole roasted mofu.";
                this.intForDes = 0;
                this.intDescription = "Mofu is always a beloved addition to any meal!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 12; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 5; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.2; //restores will.

                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 20;
                this.ingredients = [["Raw Mofu Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 30 - Math.floor(player.getCharisma() / 6); // at max, buy for 22.
                this.sellValue = 18 + Math.floor(player.getCharisma() / 12); // at max, sell for 22.
            }
            else if (this.type == "rawLargeMofuFlesh")
            {
                //For All Items
                this.identity = "Raw Large Mofu Flesh";
                this.weight = 5;
                this.size = 19;
                this.description = "The defeathered, eviscerated, whole body of a a large mofu bird. ";
                this.intForDes = 3;
                this.intDescription = "Mofu birds can grow huge when there is enough food available to permit them to. Oh and by the way, Don't eat the meat raw.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 3.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -3; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "gutWorms";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 26 - Math.floor(player.getCharisma() / 10); // at max, buy for 21.
                this.sellValue = 16 + Math.floor(player.getCharisma() / 10); // at max, sell for 21.
            }
            else if (this.type == "largeMofuMeat")
            {
                //For All Items
                this.identity = "Large Mofu Meat";
                this.weight = 5;
                this.size = 19;
                this.description = "A whole, slow roasted, and exceptionally large mofu.";
                this.intForDes = 3;
                this.intDescription = "Mofu this large is more often served at a noble's feast than a peasant's table.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 33; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 6; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.35; //restores will.

                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 26;
                this.ingredients = [["Raw Large Mofu Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 50 - Math.floor(player.getCharisma() / 5); // at max, buy for 40.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 5); // at max, sell for 40.
            }
            else if (this.type == "fattyMofuLiver")
            {
                //For All Items
                this.identity = "Fatty Mofu Liver";
                this.weight = 3;
                this.size = 9;
                this.description = "Tender and creamy but firm mofu bird liver, known well as a culinary extravagence.";
                this.intForDes = 4;
                this.intDescription = "It is proper to eat fatty mofu liver raw.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 14; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0.05; //heals health.
                this.generation = 0.3; //recoops lost energy.
                this.replenish = 0.5; //restores will.

                //ability
                this.ability = "satiate";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 157 - Math.floor(player.getCharisma() / 5); // at max, buy for 147.
                this.sellValue = 134 + Math.floor(player.getCharisma() / 5); // at max, sell for 144.
            }
            else if (this.type == "grushFur")
            {
                //For All Items
                this.identity = "Grush Fur";
                this.weight = 1;
                this.size = 10;
                this.description = "A section of green plant-like bristly fur.";
                this.intForDes = 36;
                this.intDescription = "Grushes natural developed this strange fur to hide among patches of grushweed unnoticed.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 9 - Math.floor(player.getCharisma() / 12); // at max, buy for 5.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
            }
            else if (this.type == "rawGrushFlesh")
            {
                //For All Items
                this.identity = "Raw Grush Flesh";
                this.weight = 2;
                this.size = 9;
                this.description = "The raw earthy flesh of a grush.";
                this.intForDes = 6;
                this.intDescription = "If you eat it raw you may find yourself with a bit of indigestion.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -0.5; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "gassiness";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "grushMeat")
            {
                //For All Items
                this.identity = "Grush Meat";
                this.weight = 2;
                this.size = 9;
                this.description = "The cooked meat of a grush.";
                this.intForDes = 0;
                this.intDescription = "The meat has a natural and earthy flavor, and it is also juicy and tender.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 3; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 2; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 1;
                this.ingredients = [["Raw Grush Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "blubber")
            {
                //For All Items
                this.identity = "Blubber";
                this.weight = 1;
                this.size = 10;
                this.description = "A glob of fat...";
                this.intForDes = 9;
                this.intDescription = "This can be used to make oil which is a highly valued commodity.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 14 - Math.floor(player.getCharisma() / 10); // at max, buy for 9.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 10); // at max, sell for 9.
            }
            else if (this.type == "walrusTusks")
            {
                //For All Items
                this.identity = "Walrus Tusks";
                this.weight = 2;
                this.size = 12;
                this.description = "The tusks of a land walrus.";
                this.intForDes = 12;
                this.intDescription = "Walrus tusks are used in the creation of several Freydic weapons and armours.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 17 - Math.floor(player.getCharisma() / 6); // at max, buy for 9.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 7.
            }
            else if (this.type == "fireStarter")
            {
                //For All Items
                this.identity = "Fire-Starter";
                this.weight = 1;
                this.size = 12;
                this.description = "A box of flints with an iron side to strike them against.";
                this.intForDes = 1;
                this.intDescription = "If this tool is in your inventory you can click on wood to place it as a campfire and then double click the campfire to light it!";

                //Define Utility
                this.utility = "tool";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 5;
                this.ingredients = [["Iron", 1], ["Flint", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 13 - Math.floor(player.getCharisma() / 15); // at max, buy for 10.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
            }
            else if (this.type == "tent")
            {
                //For All Items
                this.identity = "Tent";
                this.weight = 6;
                this.size = 15;
                this.description = "A quick-to-set-up inhabitance that provides safe and comfortable rest.";
                this.intForDes = 1;
                this.intDescription = "If you have a hammer equipped click the tent in your inventory to place it, and double click on the placed tent to disassemble it.";

                //Define Utility
                this.utility = "tool";
                this.subUtility = "tent";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 15;
                this.ingredients = [["Cloth", 6], ["Iron", 1], ["Fiber", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 55 - Math.floor(player.getCharisma() / 2); // at max, buy for 30.
                this.sellValue = 25 + Math.floor(player.getCharisma() / 10); // at max, sell for 30.
            }
            else if (this.type == "wood")
            {
                //For All Items
                this.identity = "Wood";
                this.weight = 2;
                this.size = 12;
                this.description = "Timber from trees.";
                this.intForDes = 3;
                this.intDescription = "This is an important raw material used in the crafting of many different things.";

                //Define Utility
                this.utility = "material";
                    //subUtility
                this.subUtility = "campFire";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 25); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
            else if (this.type == "iron")
            {
                //For All Items
                this.identity = "Iron";
                this.weight = 4;
                this.size = 10;
                this.description = "A forged iron bar.";
                this.intForDes = 2;
                this.intDescription = "This is an important raw material used in the crafting of many different weapons and armours.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 10 - Math.floor(player.getCharisma() / 15); // at max, buy for 7.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 25); // at max, sell for 7.
            }
            else if (this.type == "elderWalrusTusks")
            {
                //For All Items
                this.identity = "Elder Walrus Tusks";
                this.weight = 7;
                this.size = 20;
                this.description = "The tusks of an elder walrus.";
                this.intForDes = 16;
                this.intDescription = "Elder Walrus tusks can sell for up to 37 coins and can be used to make specialized Freydic weapons and armour.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 59 - Math.floor(player.getCharisma() / 3); // at max, buy for 40.
                this.sellValue = 18 + Math.floor(player.getCharisma() / 3); // at max, sell for 37.
            }
            else if (this.type == "walrusHide")
            {
                //For All Items
                this.identity = "Walrus Hide";
                this.weight = 6;
                this.size = 35;
                this.description = "The hide of a land walrus.";
                this.intForDes = 15;
                this.intDescription = "Walrus hide is particularly thick and can be made into a number of different items!";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 16 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 12.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
            }
            else if (this.type == "vomit")
            {
                //For All Items
                this.identity = "Vomit";
                this.weight = 1;
                this.size = 17;
                this.description = "This is well, vomit... Maybe I shouldn't be carrying this.";
                this.intForDes = 4;
                this.intDescription = "Vomiting usually occurs when a disease or poison affects hunger. A massive loss of hunger usually accompanies vomiting.";

                //Define Utility
                this.utility = "junk";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 0; // at max, sell for 0.
            }
            else if (this.type == "suuliMelon")
            {
                //For All Items
                this.identity = "Suuli Melon";
                this.weight = 0.1;
                this.size = 13;
                this.description = "A green striped melon native to the more northern climates.";
                this.intForDes = 2;
                this.intDescription = "Although this type of melon grows in cold climates it can not survive the snowy tundras of the far north.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 12; //satisfies hunger.
                this.thirst = 6; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.2; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 24 - Math.floor(player.getCharisma() / 10); // at max, buy for 19.
                this.sellValue = 9 + Math.floor(player.getCharisma() / 5); // at max, sell for 19.
            }
            else if (this.type == "suuliMelonSlice")
            {
                //For All Items
                this.identity = "Suuli Melon Slice";
                this.weight = 0.1;
                this.size = 13;
                this.description = "A slice of suuli melon; it has a light green colour and is incredibly juicy and sweet.";
                this.intForDes = 2;
                this.intDescription = "Shops prefer to buy melons whole rather than cut up.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2; //satisfies hunger.
                this.thirst = 1; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0.1; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 6;
                this.intForCraft = 2;
                this.ingredients = [["Suuli Melon", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5 - Math.floor(player.getCharisma() / 50); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
            }
            else if (this.type == "carrot")
            {
                //For All Items
                this.identity = "Carrot";
                this.weight = 0.1;
                this.size = 9;
                this.description = "A ripe orange carrot.";
                this.intForDes = 5;
                this.intDescription = "Carrots can be used in some recipes to create more complex dishes.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1.5; //satisfies hunger.
                this.thirst = 0.1; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -0.2; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 2; // at max, buy for 2.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
            else if (this.type == "potato")
            {
                //For All Items
                this.identity = "Potato";
                this.weight = 0.1;
                this.size = 9;
                this.description = "A starchy dry variety of potato.";
                this.intForDes = 5;
                this.intDescription = "This is the standard variety of potato and is the most common variety to be grown in farms.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.3; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -0.5; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "cookedPotato")
            {
                //For All Items
                this.identity = "Roasted Potato";
                this.weight = 0.1;
                this.size = 9;
                this.description = "A cooked potato; be careful it's hot don't drop it.";
                this.intForDes = 1;
                this.intDescription = "Eating Potatoes is a good way to restore hunger.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 3; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 1;
                this.ingredients = [["Potato", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "berulnPelt")
            {
                //For All Items
                this.identity = "Buruln Pelt";
                this.weight = 7;
                this.size = 38;
                this.description = "The pelt of a Beruln.";
                this.intForDes = 23;
                this.intDescription = "Beruln fur can be used to make warm clothing as well as to line fine Thengan Armours.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 116 - Math.floor(player.getCharisma() / 1); // at max, buy for 66.
                this.sellValue = 24 + Math.floor(player.getCharisma() / 1.25); // at max, sell for 64.
            }
            else if (this.type == "bigBerulnPelt")
            {
                //For All Items
                this.identity = "Large Buruln Pelt";
                this.weight = 10;
                this.size = 43;
                this.description = "The pelt of a Beruln.";
                this.intForDes = 23;
                this.intDescription = "Beruln fur can be used to make warm clothing as well as to line fine Thengan Armours.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 136 - Math.floor(player.getCharisma() / 1); // at max, buy for 86.
                this.sellValue = 34 + Math.floor(player.getCharisma() / 1.25); // at max, sell for 74.
            }
            else if (this.type == "berulnSkull")
            {
                //For All Items
                this.identity = "Beruln Skull";
                this.weight = 3;
                this.size = 11;
                this.description = "The skull of a beruln.";
                this.intForDes = 1;
                this.intDescription = "This beruln is not going to hurt anyone anymore...";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 98 - Math.floor(player.getCharisma() / 1); // at max, buy for 48.
                this.sellValue = 13 + Math.floor(player.getCharisma() / 2); // at max, sell for 38.
            }
            else if (this.type == "glinMushrooms")
            {
                //For All Items
                this.identity = "Glin Mushrooms";
                this.weight = 0.5;
                this.size = 10;
                this.description = "Light brown mushrooms that grow from a spongy white mycelium that rests just below the surface of the soil.";
                this.intForDes = 5;
                this.intDescription = "Glin mushrooms are poisonous but they are edible when boiled.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "poisonI";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 9 - Math.floor(player.getCharisma() / 15); // at max, buy for 6.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 12); // at max, sell for 6.
            }
            else if (this.type == "halcifMushroom")
            {
                //For All Items
                this.identity = "Halcif Mushroom";
                this.weight = 0.01;
                this.size = 5;
                this.description = "A ghostly white mushroom.";
                if (player.getIntelligence() >= 0 && player.getIntelligence() < 25)
                {
                    this.intForDes = 10;
                    this.intDescription = "Halcif mushrooms are so poisonous that if you touch them with your bare skin you may die.";
                }
                else
                {
                    this.intForDes = 25;
                    this.intDescription = "Although even touching a halcif mushroom can kill someone, when combined with other reactants the poison can be easily neutralized.";
                }

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = true; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 4; //restores will.

                //ability
                this.ability = "poisonIV";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 45 - Math.floor(player.getCharisma() / 3); // at max, buy for 30.
                this.sellValue = 18 + Math.floor(player.getCharisma() / 4); // at max, sell for 30.
            }
            else if (this.type == "cyrinthilimMushroom")
            {
                //For All Items
                this.identity = "Cyrinthilim Mushroom";
                this.weight = 0.4;
                this.size = 10;
                this.description = "A red mushroom with white specles that grows upon a bed of buried light-pink mycelium.";
                this.intForDes = 28;
                this.intDescription = "When dried, cyrinthilim mushrooms' toxins are somewhat neutralized.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.25; //recoops lost energy.
                this.replenish = -3; //restores will.

                //ability
                this.ability = "undriedCyrinthilim";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 14 - Math.floor(player.getCharisma() / 12); // at max, buy for 10.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 12); // at max, sell for 7.
            }
            else if (this.type == "driedCyrinthilimMushroom")
            {
                //For All Items
                this.identity = "Dried Cyrinthilim Mushroom";
                this.weight = 0.2;
                this.size = 10;
                this.description = "A dried cyrinthilim mushroom.";
                this.intForDes = 28;
                this.intDescription = "Dried cyrinthilim mushrooms contain a toxin that causes intense visual halucinations and sometimes even death when it is consumed.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0.1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.1; //recoops lost energy.
                this.replenish = -1.5; //restores will.

                //ability
                this.ability = "cyrinthilim";

                //Crafting
                this.yield = 1;
                this.intForCraft = 29;
                this.ingredients = [["Cyrinthilim Mushroom", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 18 - Math.floor(player.getCharisma() / 15); // at max, buy for 15.
                this.sellValue = 6 + Math.floor(player.getCharisma() / 10); // at max, sell for 11.
            }
            else if (this.type == "boiledGlinMushrooms")
            {
                //For All Items
                this.identity = "Boiled Glin Mushrooms";
                this.weight = 0.5;
                this.size = 10;
                this.description = "The boiled mushrooms have a firm texture and a savory taste.";
                this.intForDes = 5;
                this.intDescription = "Glin mushrooms that have been boiled for hours to remove their poison.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 2; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 6;
                this.intForCraft = 5;
                this.ingredients = [["Glin Mushrooms", 6], ["Bucket of Water", 1]];
                this.biproducts = [[new Item("bucket", false), 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 11 - Math.floor(player.getCharisma() / 12); // at max, buy for 7.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 12); // at max, sell for 7.
            }
            else if (this.type == "cloth")
            {
                //For All Items
                this.identity = "Cloth";
                this.weight = 0.5;
                this.size = 12;
                this.description = "Thin fibers sewn together to form a smooth and consistent fabric.";
                this.intForDes = 1;
                this.intDescription = "Cloth is a basic material used in many crafting recipies.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 17;
                this.ingredients = [["Fiber", 5]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 15); // at max, buy for 3.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 50); // at max, sell for 3.
            }
            else if (this.type == "naapridFiber")
            {
                //For All Items
                this.identity = "Fiber";
                this.weight = 0.1;
                this.size = 10;
                this.description = "Strong thin strands of fiber.";
                this.intForDes = 1;
                this.intDescription = "Fiber is a basic material used in many crafting recipies.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 10;
                this.intForCraft = 25;
                this.ingredients = [["Naaprid Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 1; // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "winterWolfPelt")
            {
                //For All Items
                this.identity = "Winter Wolf Pelt";
                this.weight = 2;
                this.size = 16;
                this.description = "The pale white fur of a winter wolf.";
                this.intForDes = 17;
                this.intDescription = "Winter wolf fur is used to make fine Freydic clothing.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 24 - Math.floor(player.getCharisma() / 8); // at max, buy for 20.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 3); // at max, sell for 20.
            }
            else if (this.type == "massiveWinterWolfPelt")
            {
                //For All Items
                this.identity = "Massive Winter Wolf Pelt";
                this.weight = 6;
                this.size = 24;
                this.description = "The pale white fur of a monstrously huge winter wolf.";
                this.intForDes = 17;
                this.intDescription = "The fur from this rare breed of winter wolf is often made into clothing for those of higher class in Freydic society.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 115 - Math.floor(player.getCharisma() / 2); // at max, buy for 90.
                this.sellValue = 60 + Math.floor(player.getCharisma() / 2); // at max, sell for 85.
            }
            else if (this.type == "rawWinterWolfFlesh")
            {
                //For All Items
                this.identity = "Raw Winter Wolf Flesh";
                this.weight = 1;
                this.size = 14;
                this.description = "A tough slab of meat cut from a winter wolf.";
                this.intForDes = 2;
                this.intDescription = "Winter wolf flesh is a commonly used commodity in the land of the Freynor.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                if (player.raceName == "Freynor")
                {
                    this.generation = 0; //recoops lost energy.
                }
                else
                {
                    this.generation = -1; //recoops lost energy.
                }
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 7 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
            else if (this.type == "winterWolfMeat")
            {
                //For All Items
                this.identity = "Winter Wolf Meat";
                this.weight = 1;
                this.size = 14;
                this.description = "The cooked meat of a winter wolf.";
                this.intForDes = 4;
                this.intDescription = "The Freynor have adapted to this tough meat after many generations of traditional meals and recipes.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.thirst = 0; //quenches thirst.
                this.heal = 0; //heals health.
                this.replenish = 0; //restores will.
                if (player.raceName == "Freynor")
                {
                    this.hunger = 8; //satisfies hunger.
                    this.warmth = 2; //warms player.
                    this.generation = 0; //recoops lost energy.
                    //ability
                    this.ability = "satiate";
                }
                else
                {
                    this.hunger = 5; //satisfies hunger.
                    this.warmth = 0; //warms player.
                    this.generation = -1; //recoops lost energy.
                    //ability
                    this.ability = "none";
                }

                //Crafting
                this.yield = 1;
                this.intForCraft = 5;
                this.ingredients = [["Raw Winter Wolf Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 12 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 8.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 8); // at max, sell for 8.
            }
            else if (this.type == "rawWolfLiver")
            {
                //For All Items
                this.identity = "Raw Wolf Liver";
                this.weight = 0.5;
                this.size = 9;
                this.description = "The liver organ of a wolf.";
                this.intForDes = 6;
                this.intDescription = "Wolf Livers can make a wholesome food when cooked and has alchemical properties while raw.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 11 - Math.floor(player.getCharisma() / 25); // at max, buy for 9.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 10); // at max, sell for 9.
            }
            else if (this.type == "wolfLiver")
            {
                //For All Items
                this.identity = "Wolf Liver";
                this.weight = 0.5;
                this.size = 9;
                this.description = "Cooked liver from a wolf.";
                this.intForDes = 3;
                this.intDescription = "High iron content!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 4; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.25; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 2;
                this.ingredients = [["Raw Wolf Liver", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 15); // at max, sell for 5.
            }
            else if (this.type == "elderWalrusHide")
            {
                //For All Items
                this.identity = "Elder Walrus Hide";
                this.weight = 17;
                this.size = 45;
                this.description = "The hide of an elder walrus.";
                this.intForDes = 20;
                this.intDescription = "Elder Walrus hide can be made into a unique freydic armor!";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 120 - Math.floor(player.getCharisma() / 1); // at max, buy for 70.
                this.sellValue = 43 + Math.floor(player.getCharisma() / 3); // at max, sell for 59.
            }
            else if (this.type == "gulfreyShell")
            {
                //For All Items
                this.identity = "Gulfrey Shell Section";
                this.weight = 3;
                this.size = 17;
                this.description = "A piece of a gulfrey's shell plating.";
                this.intForDes = 30;
                this.intDescription = "Gulfreys are hot blooded and their shell helps to retain their heat in the frozen climates they inhabit.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 59 - Math.floor(player.getCharisma() / 2); // at max, buy for 34.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 5); // at max, sell for 18.
            }
            else if (this.type == "gulfreyMandibles")
            {
                //For All Items
                this.identity = "Gulfrey Mandibles";
                this.weight = 3;
                this.size = 17;
                this.description = "The mandibles of a gulfrey.";
                this.intForDes = 2;
                this.intDescription = "Gulfreys use their mandibles to grab and devour their prey.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 29 - Math.floor(player.getCharisma() / 5); // at max, buy for 19.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 5); // at max, sell for 15.
            }
            else if (this.type == "rawGulfreyFlesh")
            {
                //For All Items
                this.identity = "Raw Gulfrey Flesh";
                this.weight = 1;
                this.size = 17;
                this.description = "The slick and tender meat of a gulfrey. It has a sweet and meaty flavor.";
                this.intForDes = 12;
                this.intDescription = "The meat is supposed to be eaten raw, because when it is cooked it curdles and darkens.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 6; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 14 - Math.floor(player.getCharisma() / 10); // at max, buy for 9.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 10); // at max, sell for 8.
            }
            else if (this.type == "gulfreyMeat")
            {
                //For All Items
                this.identity = "Gulfrey Meat";
                this.weight = 1;
                this.size = 17;
                this.description = "The cooked gulfrey meat is curdled, gooey, and quite frankly, disgusting!";
                this.intForDes = 8;
                this.intDescription = "Gulfrey meat is not meant to be cooked; cooking the meat ruins it.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "foodPoisoning";

                //Crafting
                this.yield = 1;
                this.intForCraft = 0;
                this.ingredients = [["Raw Gulfrey Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 0; // at max, buy for 0.
                this.sellValue = 0; // at max, sell for 0.
            }
            else if (this.type == "rawTorperFlesh")
            {
                //For All Items
                this.identity = "Raw Torper Flesh";
                this.weight = 1;
                this.size = 14;
                this.description = "The slick and rubbery flesh of a Torper.";
                this.intForDes = 9;
                this.intDescription = "Although the meat has no negative properties raw, it tastes much better cooked.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 11 - Math.floor(player.getCharisma() / 10); // at max, buy for 6.
                this.sellValue = 4 + Math.floor(player.getCharisma() / 25); // at max, sell for 6.
            }
            else if (this.type == "torperMeat")
            {
                //For All Items
                this.identity = "Torper Meat";
                this.weight = 1;
                this.size = 14;
                this.description = "The mild, yet scrumptious meat of a Torper.";
                this.intForDes = 2;
                this.intDescription = "The meat is a bit chewy, but not tough at all, perhaps it would go well with some honey...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 14; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 8;
                this.ingredients = [["Raw Torper Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 17 - Math.floor(player.getCharisma() / 25); // at max, buy for 15.
                this.sellValue = 10 + Math.floor(player.getCharisma() / 15); // at max, sell for 13.
            }
            else if (this.type == "varnMeat")
            {
                //For All Items
                this.identity = "Varn Meat";
                this.weight = 1;
                this.size = 14;
                this.description = "The cooked flesh of a varn.";
                this.intForDes = 0;
                this.intDescription = "This meat is actually pretty good tasting!";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 7; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "satiate";

                //Crafting
                this.yield = 1;
                this.intForCraft = 7;
                this.ingredients = [["Raw Varn Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 14 - Math.floor(player.getCharisma() / 25); // at max, buy for 12.
                this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
            }
            else if (this.type == "rawVarnFlesh")
            {
                //For All Items
                this.identity = "Raw Varn Flesh";
                this.weight = 1;
                this.size = 14;
                this.description = "The raw flesh of a varn.";
                this.intForDes = 7;
                this.intDescription = "There is not much demand for varn flesh raw, but cooked, that is another story.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 7 - Math.floor(player.getCharisma() / 25); // at max, buy for 5.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
            }
            else if (this.type == "viperMeat")
            {
                //For All Items
                this.identity = "Viper Meat";
                this.weight = 1;
                this.size = 14;
                this.description = "The cooked flesh of a viper.";
                this.intForDes = 0;
                this.intDescription = "It is chewy and sort of rubbery in texture and has a mild meaty bland taste.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 3.5; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0.1; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0.05; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 6;
                this.ingredients = [["Raw Viper Flesh", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8 - Math.floor(player.getCharisma() / 25); // at max, buy for 6.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
            else if (this.type == "rawViperFlesh")
            {
                //For All Items
                this.identity = "Raw Viper Flesh";
                this.weight = 1;
                this.size = 14;
                this.description = "The raw flesh of a viper.";
                this.intForDes = 3;
                this.intDescription = "Although Vipers are poisonous their flesh is not.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 1; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = -0.5; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5 - Math.floor(player.getCharisma() / 25); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 50); // at max, sell for 2.
            }
            else if (this.type == "viperVenomGland")
            {
                //For All Items
                this.identity = "Viper Venom Gland";
                this.weight = 0.05;
                this.size = 7;
                this.description = "The gland within a viper that allows it to produce its venom.";
                this.intForDes = 14;
                this.intDescription = "Certain reactants in this venom could be used for alchemaic practises if they were to be fermented.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "poisonII";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 31 - Math.floor(player.getCharisma() / 10); // at max, buy for 26.
                this.sellValue = 9 + Math.floor(player.getCharisma() / 5); // at max, sell for 19.
            }
            else if (this.type == "fermentedViperVenomGland")
            {
                //For All Items
                this.identity = "Fermented Viper Venom Gland";
                this.weight = 1;
                this.size = 9;
                this.description = "The sour smelling bulged swolen fermented venom gland from a viper.";
                this.intForDes = 13;
                this.intDescription = "The poison becomes slightly less toxic after fermentation.";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "poisonI";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 34 - Math.floor(player.getCharisma() / 10); // at max, buy for 29.
                this.sellValue = 13 + Math.floor(player.getCharisma() / 5); // at max, sell for 23.
            }
            else if (this.type == "viperSnakeSkin")
            {
                //For All Items
                this.identity = "Viper Snake Skin";
                this.weight = 0.85;
                this.size = 13;
                this.description = "The green scaled skin of a viper.";
                this.intForDes = 11;
                this.intDescription = "This snake skin can be sewn into outfits and it can also be used as an alchemy ingredient for making potions.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 7 - Math.floor(player.getCharisma() / 15); // at max, buy for 4.
                this.sellValue = 2 + Math.floor(player.getCharisma() / 25); // at max, sell for 4.
            }
            else if (this.type == "torperVenomSac")
            {
                //For All Items
                this.identity = "Torper Venom Sac";
                this.weight = 1;
                this.size = 10;
                this.description = "A torper's venom producing gland that is swolen with the venom it has created so far.";
                this.intForDes = 0;
                this.intDescription = "Oh by the way, don't eat it...";

                //Define Utility
                this.utility = "food";

                //Utility Focused
                this.isRegenerative = false; //if this is true heal, generation, and restore show up in the item's description.
                this.hunger = 0; //satisfies hunger.
                this.thirst = 0; //quenches thirst.
                this.warmth = 0; //warms player.
                this.heal = 0; //heals health.
                this.generation = 0; //recoops lost energy.
                this.replenish = 0; //restores will.

                //ability
                this.ability = "poisonIII";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 45 - Math.floor(player.getCharisma() / 3); // at max, buy for 29.
                this.sellValue = 9 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 29.
            }
            else if (this.type == "torperFuzz")
            {
                //For All Items
                this.identity = "Torper Fuzz";
                this.weight = 1;
                this.size = 15;
                this.description = "The fur from a torper.";
                this.intForDes = 44;
                this.intDescription = "Torper fuzz is highly valuable and used in expensive clothing manufacture. Not only must the fuzz be procured from a torper, a giant deadly flying insect, the individual harvesting it must be extremely skilled or else it will come off in shreds.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 90 - Math.floor(player.getCharisma() / 1.63); // at max, buy for 60.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 1.63); // at max, sell for 60.
            }
            else if (this.type == "shehidOozeSml")
            {
                //For All Items
                this.identity = "Shehid Ooze";
                this.weight = 9;
                this.size = 15;
                this.description = "The toxic gelatinous body of a shehid.";
                this.intForDes = 10;
                this.intDescription = "From whats left among the goo it looks like the primary diet of this creature was lizards and insects.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 47 - Math.floor(player.getCharisma() / 3); // at max, buy for 32.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 2); // at max, sell for 32.
            }
            else if (this.type == "shehidShellSml")
            {
                //For All Items
                this.identity = "Shehid Shell";
                this.weight = 21;
                this.size = 16;
                this.description = "The shell of a shehid; it is extremely durable and hard.";
                this.intForDes = 1;
                this.intDescription = "The inside of the shell has developed a marvelous coating that glimmers beautifully in even the dimmest lighting.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 56 - Math.floor(player.getCharisma() / 3); // at max, buy for 41.
                this.sellValue = 26 + Math.floor(player.getCharisma() / 3); // at max, sell for 41.
            }
            else if (this.type == "shehidOozeLrg")
            {
                //For All Items
                this.identity = "Shehid Ooze";
                this.weight = 29;
                this.size = 25;
                this.description = "The toxic gelatinous body of a large shehid.";
                this.intForDes = 4;
                this.intDescription = "From the melted carcasses left among the goo it looks like it would be harder to figure out what this creature doesn't eat.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 102 - Math.floor(player.getCharisma() / 1.5); // at max, buy for 69.
                this.sellValue = 35 + Math.floor(player.getCharisma() / 1.5); // at max, sell for 68.
            }
            else if (this.type == "shehidShellLrg")
            {
                //For All Items
                this.identity = "Shehid Shell";
                this.weight = 65;
                this.size = 16;
                this.description = "The shell of a large shehid; it is extremely durable and hard.";
                this.intForDes = 1;
                this.intDescription = "The inside of the shell has developed a marvelous coating that glimmers beautifully in even the dimmest lighting.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 135 - Math.floor(player.getCharisma() / 1); // at max, buy for 85.
                this.sellValue = 60 + Math.floor(player.getCharisma() / 2); // at max, sell for 85.
            }
            else if (this.type == "varnPelt")
            {
                //For All Items
                this.identity = "Varn Pelt";
                this.weight = 1;
                this.size = 15;
                this.description = "The fur of a wild varn.";
                this.intForDes = 2;
                this.intDescription = "This can be used to make leather armour and fur clothing.";

                //Define Utility
                this.utility = "material";

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8 - Math.floor(player.getCharisma() / 15); // at max, buy for 5.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 25); // at max, sell for 5.
            }
            else if (this.type == "mace")
            {
                //For All Items
                this.identity = "Mace";
                this.weight = 4;
                this.size = 19;
                this.description = "An average sized iron mace.";
                this.intForDes = 4;
                this.intDescription = "This looks like it could do some good against light armoured enemies.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 2;
                this.distance = 24 + (this.range * 7);
                this.range = 1;
                this.rate = 155;
                this.damage = (3.5 - (this.damageHandicap * 1.5)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 5;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 7;
                this.ingredients = [["Iron", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 18 - Math.floor(player.getCharisma() / 6); // at max, buy for 12.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 10); // at max, sell for 12.
            }
            else if (this.type == "longSpikedMorningStar")
            {
                //For All Items
                this.identity = "Long-Spiked Morning Star";
                this.weight = 8;
                this.size = 19;
                this.description = "A morning star build with long steel spikes for piercing armour. ";
                this.intForDes = 1;
                this.intDescription = "This weapon is meant to be used to pierce well-armoured enemies.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 7.5;
                this.distance = 31 + (this.range * 7);
                this.range = 1 + 4/7;
                this.rate = 240;
                this.damage = (10 - (this.damageHandicap * 2)) * (this.leveledDamageMultiple / 25) + ((6/50) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 14;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 34;
                this.ingredients = [["Steel", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 67 - Math.floor(player.getCharisma() / 3); // at max, buy for 52.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 3); // at max, sell for 45.
            }
            else if (this.type == "hammer")
            {
                //For All Items
                this.identity = "Hammer";
                this.weight = 2;
                this.size = 15;
                this.description = "A multipurpose tool, it can be used for battle as well as for smithing.";
                this.intForDes = 1;
                this.intDescription = "This must be equipped in order to perform metalwork at an anvil.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 1;
                this.distance = 10 + (this.range * 7);
                this.range = 3 + 5/7;
                this.rate = 125 - (1/2 * player.getDexterity());
                this.damage = (2 - 1 * this.damageHandicap) * (this.leveledDamageMultiple / 25);
                this.magicalDamage = 0;
                this.negateArmour = 2;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 3;
                this.ingredients = [["Iron", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 10 - Math.floor(player.getCharisma() / 25); // at max, buy for 8.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 15); // at max, sell for 8.
            }
            else if (this.type == "warHammer")
            {
                //For All Items
                this.identity = "War Hammer";
                this.weight = 7;
                this.size = 19;
                this.description = "A heavy iron maul built for war.";
                this.intForDes = 3;
                this.intDescription = "Heavy blunt weapons such as this are remarkable for bashing through an enemies armour and delivering large sums of damage.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 6;
                this.distance = 10 + (this.range * 7);
                this.range = 4; // + 7/7;
                this.rate = 225 - player.getDexterity();
                this.damage = (8 - 2 * this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 8;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 12;
                this.ingredients = [["Iron", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 37 - Math.floor(player.getCharisma() / 6); // at max, buy for 29.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 3); // at max, sell for 29.
            }
            else if (this.type == "freydicSword")
            {
                //For All Items
                this.identity = "Longsword";
                this.weight = 4;
                this.size = 16;
                this.description = "A longsword made of mostly steel but forged with just a hint of jvostran ore.";
                this.intForDes = 1;
                this.intDescription = "This sword looks to be Freynor in origin.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 5;
                this.distance = 29 + (this.range * 7);
                this.range = 5;
                this.rate = 145;
                this.damage = (6 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 22;
                this.ingredients = [["Steel", 2], ["Jvostran Melt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 38 - Math.floor(player.getCharisma() / 3); // at max, buy for 22.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 10); // at max, sell for 19.
            }
            else if (this.type == "pickaxe")
            {
                //For All Items
                this.identity = "Pickaxe";
                this.weight = 2;
                this.size = 15;
                this.description = "An iron pickaxe used for mining.";
                this.intForDes = 4;
                this.intDescription = "A pickaxe is required for mining ore.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 2.5;
                this.distance = 18 + (this.range * 7);
                this.range = 3;
                this.rate = 135;
                this.damage = 2 * (this.leveledDamageMultiple / 25);
                this.magicalDamage = 0;
                this.negateArmour = 4;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 8;
                this.ingredients = [["Iron", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 26 - Math.floor(player.getCharisma() / 5); // at max, buy for 16.
                this.sellValue = 9 + Math.floor(player.getCharisma() / 10); // at max, sell for 14.
            }
            else if (this.type == "iceBlade")
            {
                //THIS IS A SUMMONED WEAPON AND CAN NOT BE USED AS A REGULAR ITEM.

                //These do not matter for summoned magical weapons.
                this.identity = "Ice Claymore";
                this.weight = 0;
                this.size = 1;
                this.description = "A claymore magically formed at your will; it is made purely of mystical ice, and it is unforgivingly sharp.";
                this.intForDes = 0;
                this.intDescription = "This is only attainable by the use of a spell, and it doesn't show up as an item only as an equipped weapon.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = Math.max(0, 6 - (player.getEminence() / 10));
                this.distance = 41 + (this.range * 7);
                this.range = 6 + 5/7;
                this.rate = Math.max(0, 175 - (75 * player.getConcentration() / 50));
                this.damage = 6 * (this.leveledDamageMultiple / 25) + ((1/5) * player.getStrength());
                this.magicalDamage = 3 + ((1/6) * player.getConcentration());
                this.negateArmour = 0;

                //ability
                this.ability = "freeze";
            }
            else if (this.type == "timberAxe")
            {
                //For All Items
                this.identity = "Timber Axe";
                this.weight = 3;
                this.size = 15;
                this.description = "An iron axe used for cutting down trees.";
                this.intForDes = 2;
                this.intDescription = "This is one of the few weapons that you can use to collect timber.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 3.5;
                this.distance = 12 + (this.range * 7);
                this.range = 5;
                this.rate = 155;
                this.damage = (7 - (this.damageHandicap * 2.5)) * (this.leveledDamageMultiple / 25);
                this.magicalDamage = 0;
                this.negateArmour = 1.5;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 13;
                this.ingredients = [["Iron", 2], ["Wood", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 45 - Math.floor(player.getCharisma() / 3); // at max, buy for 30.
                this.sellValue = 12 + Math.floor(player.getCharisma() / 3); // at max, sell for 27.
            }
            else if (this.type == "nirineseSpear")
            {
                //For All Items
                this.identity = "Nirinese Spear";
                this.weight = 4;
                this.size = 15;
                this.description = "A steel spear forged by the Nirinese.";
                this.intForDes = 2;
                this.intDescription = "A long metal polearm with a fancy steel guard and a sharp point made for piercing armour.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 5;
                this.distance = 56.5 + (this.range * 7);
                this.range = 1.5;
                this.rate = (150 - player.getDexterity());
                this.damage = (4 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 6 + ((1/6.25) * player.getStrength());

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 20;
                this.ingredients = [["Steel", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 30 - Math.floor(player.getCharisma() / 5); // at max, buy for 20.
                this.sellValue = 10 + Math.floor(player.getCharisma() / 5); // at max, sell for 20.
            }
            else if (this.type == "rasper")
            {
                //For All Items
                this.identity = "Rasp";
                this.weight = 2;
                this.size = 16;
                this.description = "A curved steel blade with a hooked pommel.";
                this.intForDes = 4;
                this.intDescription = "The notorious bandit Chieftain Nelgref often used Rasp's hook to gouge out the eyes of his victims.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 2;
                this.distance = 22 + (this.range * 7);
                this.range = 3 + 2/7;
                this.rate = (100 - (player.getDexterity() / 5));
                this.damage = 5 * (this.leveledDamageMultiple / 25) + ((4/25) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 76 - Math.floor(player.getCharisma() / 5); // at max, buy for 66.
                this.sellValue = 46 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 66.
            }
            else if (this.type == "crossbow")
            {
                //For All Items
                this.identity = "Crossbow";
                this.weight = 4;
                this.size = 23;
                this.description = "A sturdy crank-loaded steel crossbow.";
                this.intForDes = 6;
                this.intDescription = "This type of crossbow is of Nirinese design.";

                //Define Utility
                this.utility = "ranged";
                //Sub Utility
                this.subUtility = "crossbow";

                //Utility Focused
                this.range = 2500 + (500 * player.getRanged() / 50);
                //this.rate = Math.max(0.1, 35 - (34 * player.getRanged() / 50));
                this.speed = 14 + (2 * player.getRanged() / 50);
                this.negateArmour = 13 + (5 * player.getRanged() / 50);

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 50;
                this.ingredients = [["Steel", 5]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 640 - Math.floor(player.getCharisma() / 2); // at max, buy for 615.
                this.sellValue = 565 + Math.floor(player.getCharisma() / 1); // at max, sell for 615.
            }
            else if (this.type == "steelBolt")
            {
                //For All Items
                this.identity = "Steel Bolt";
                this.weight = 0.1;
                this.size = 8;
                this.description = "A crossbow bolt made of steel.";
                this.intForDes = 1;
                this.intDescription = "Don't touch the tip, it's extremely sharp!";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "bolt";
                this.subUtilityName = "Bolt";

                //Utility Focused
                this.damage = (13 + 1/3) * (1 + player.getRanged() / 25); //40 damage at max!
                this.magicalDamage = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 5;
                this.intForCraft = 45;
                this.ingredients = [["Steel", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 22 - Math.floor(player.getCharisma() / 5); // at max, buy for 12.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 12); // at max, sell for 12.
            }
            else if (this.type == "longbow")
            {
                //For All Items
                this.identity = "Long Bow";
                this.weight = 2;
                this.size = 23;
                this.description = "A well crafted long bow carved from fine and flexible wood and strung with an equally durable bowstring.";
                this.intForDes = 4;
                this.intDescription = "Long bows are known for their superior range!";

                //Define Utility
                this.utility = "ranged";
                    //Sub Utility
                this.subUtility = "bow";

                //Utility Focused
                this.range = 1800 + (500 * player.getRanged() / 50);
                this.rate = Math.max(0.1, 35 - (34 * player.getRanged() / 50));
                this.speed = 5 + (3 * player.getRanged() / 50);
                this.negateArmour = (2 * player.getRanged() / 50);

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 25;
                this.ingredients = [["Wood", 1], ["Fiber", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 44 - Math.floor(player.getCharisma() / 8); // at max, buy for 38.
                this.sellValue = 23 + Math.floor(player.getCharisma() / 3); // at max, sell for 38.
            }
            else if (this.type == "oiledArrow")
            {
                //For All Items
                this.identity = "Oiled Arrow";
                this.weight = 0.05;
                this.size = 8;
                this.description = "An arrow with a sharp iron pointed tip dipped in flammable oil.";
                this.intForDes = 12;
                this.intDescription = "The arrow will only be lit on fire when shot if a tinderbox is in your inventory.";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "arrow";
                this.subUtilityName = "Arrow";

                //Utility Focused
                this.damage = 3 * (1 + player.getRanged() / 25);
                this.magicalDamage = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 90;
                this.intForCraft = 8;
                this.ingredients = [["Iron Arrow", 90], ["Jar of Oil", 1]];
                this.biproducts = [[new Item("glassJar", false), 1]]; //these are the accompanying items that come along with the main item being crafted.

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5 - Math.floor(player.getCharisma() / 12); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "lifeLeachArrow")
            {
                //For All Items
                this.identity = "Life Leach Arrow";
                this.weight = 0.1;
                this.size = 8;
                this.description = "A steel arrow infused with nechromantic magic.";
                this.intForDes = 6;
                this.intDescription = "Upon piercing its victim the life drains out of it into the one who shot the arrow.";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "arrow";
                this.subUtilityName = "Arrow";

                //Utility Focused
                this.damage = 5 * (1 + player.getRanged() / 25);
                this.magicalDamage = 0;

                //ability
                this.ability = "leach";

                //Crafting
                this.yield = 7;
                this.intForCraft = 45;
                this.ingredients = [["Steel", 1], ["Sphere of Nechromancy", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 200.
                this.sellValue = 100 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 200.
            }
            else if (this.type == "freezingArrow")
            {
                //For All Items
                this.identity = "Freezing Arrow";
                this.weight = 0.1;
                this.size = 8;
                this.description = "A steel arrow infused with ice magic.";
                this.intForDes = 6;
                this.intDescription = "This arrow has magical ice sharpness and freezes its target upon piercing.";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "arrow";
                this.subUtilityName = "Arrow";

                //Utility Focused
                this.damage = 5 * (1 + player.getRanged() / 25);
                this.magicalDamage = 7;

                //ability
                this.ability = "freeze";

                //Crafting
                this.yield = 7;
                this.intForCraft = 45;
                this.ingredients = [["Steel", 1], ["Sphere of Ice", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 200.
                this.sellValue = 100 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 200.
            }
            else if (this.type == "fireArrow")
            {
                //For All Items
                this.identity = "Fire Arrow";
                this.weight = 0.1;
                this.size = 8;
                this.description = "A steel arrow infused with Fiery magic.";
                this.intForDes = 6;
                this.intDescription = "Simply impact with a target will engulf it in long burning flames.";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "arrow";
                this.subUtilityName = "Arrow";

                //Utility Focused
                this.damage = 5 * (1 + player.getRanged() / 25);
                this.magicalDamage = 1;

                //ability
                this.ability = "longBurning";

                //Crafting
                this.yield = 7;
                this.intForCraft = 45;
                this.ingredients = [["Steel", 1], ["Sphere of Flames", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 250 - Math.floor(player.getCharisma() / 1); // at max, buy for 200.
                this.sellValue = 100 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 200.
            }
            else if (this.type == "shehidToxinArrow")
            {
                //For All Items
                this.identity = "Shehid Toxin Arrow";
                this.weight = 0.07;
                this.size = 8;
                this.description = "An arrow with a sharp iron pointed tip dipped in shehid ooze and dried.";
                this.intForDes = 6;
                this.intDescription = "The dried shehid ooze will temporarily paralyze most targets upon successfully penetrating the flesh.";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "arrow";
                this.subUtilityName = "Arrow";

                //Utility Focused
                this.damage = 3 * (1 + player.getRanged() / 25);
                this.magicalDamage = 0;

                //ability
                this.ability = "stunIII";

                //Crafting
                this.yield = 180;
                this.intForCraft = 8;
                this.ingredients = [["Iron Arrow", 180], ["Shehid Ooze", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 6 - Math.floor(player.getCharisma() / 12); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "arrow")
            {
                //For All Items
                this.identity = "Iron Arrow";
                this.weight = 0.05;
                this.size = 8;
                this.description = "An arrow with a sharp iron pointed tip";
                this.intForDes = 4;
                this.intDescription = "It is the arrow that determines the damage, not the bow.";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "arrow";
                this.subUtilityName = "Arrow";

                //Utility Focused
                this.damage = 3 * (1 + player.getRanged() / 25);
                this.magicalDamage = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 15;
                this.intForCraft = 5;
                this.ingredients = [["Wood", 1], ["Iron", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 3 - Math.floor(player.getCharisma() / 25); // at max, buy for 1.
                this.sellValue = 1; // at max, sell for 1.
            }
            else if (this.type == "aldrekiiArrow")
            {
                //For All Items
                this.identity = "Aldrekii Arrow";
                this.weight = 0.05;
                this.size = 8;
                this.description = "A meticulously and skillfully crafted arrow of Aldrekii design.";
                this.intForDes = 4;
                this.intDescription = "The Aldrek are famed for their talent in archery, but also for their expertly crafted bows and arrows.";

                //Define Utility
                this.utility = "ammunition";
                //Sub Utility
                this.subUtility = "arrow";
                this.subUtilityName = "Arrow";

                //Utility Focused
                this.damage = 7 * (1 + player.getRanged() / 25);
                this.magicalDamage = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 10;
                this.intForCraft = 30;
                this.ingredients = [["Wood", 1], ["Ikrinium", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 20 - Math.floor(player.getCharisma() / 10); // at max, buy for 15.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 10); // at max, sell for 10.
            }
            else if (this.type == "frichFurMittens")
            {
                //For All Items
                this.identity = "Frich Fur Mittens";
                this.weight = 0.2;
                this.size = 11;
                this.description = "Mittens sewn from frich fur.";
                this.intForDes = 1;
                this.intDescription = "Frich clothing is associated with the low class.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "gloves";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0.2;
                this.thirstRetention = -0.05;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 1;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 3;
                this.intForCraft = 12;
                this.ingredients = [["Frich Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 4 - Math.floor(player.getCharisma() / 50); // at max, buy for 3.
                this.sellValue = 1 + Math.floor(player.getCharisma() / 25); // at max, sell for 3.
            }
            else if (this.type == "berulnToothNecklace")
            {
                //For All Items
                this.identity = "Beruln Tooth Necklace";
                this.weight = 0.1;
                this.size = 11;
                this.description = "A necklace made with the tooth of a beruln.";
                this.intForDes = 1;
                this.intDescription = "Either you are a fearless adventurer who slayed a beruln and put its tooth onto a string, or you bought this at a shop.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "necklace";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0;
                this.thirstRetention = 0;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 3;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 1;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 34;
                this.intForCraft = 25;
                this.ingredients = [["Fiber", 9], ["Beruln Skull", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 16 - Math.floor(player.getCharisma() / 6); // at max, buy for 8.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 15); // at max, sell for 6.
            }
            else if (this.type == "walrusLeatherArmour")
            {
                //For All Items
                this.identity = "Walrus Leather Armour";
                this.weight = 3;
                this.size = 26;
                this.description = "Armour made from the hide of a land walrus.";
                this.intForDes = 3;
                this.intDescription = "This armour helps you to retain warmth and endure cold climates!";

                //Define Utility
                this.utility = "worn";
                    //the type of armour/clothing it is...
                    this.subUtility = "armour";
                //Utility Focused
                    //protections
                this.protection = 5 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 4;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 3;
                this.thirstRetention = - 0.5;
                    //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                    //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                    //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 24;
                this.ingredients = [["Walrus Hide", 1], ["Walrus Tusks", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 71 - Math.floor(player.getCharisma() / 3); // at max, buy for 56.
                this.sellValue = 29 + Math.floor(player.getCharisma() / 2); // at max, sell for 54.
            }
            else if (this.type == "balgurMercArmour")
            {
                //For All Items
                this.identity = "Balgur Mercenary Armour";
                this.weight = 4;
                this.size = 26;
                this.description = "The standard design for all armour worn by members of the balgur mercenary crew.";
                this.intForDes = 3;
                this.intDescription = "The Balgur Mercenaries are feared and respected throughout Thengaria and the surrounding regions.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 3.5 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 3;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0.75;
                this.thirstRetention = -0.1;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 1;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 5;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 1;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 80 - Math.floor(player.getCharisma() / 3); // at max, buy for 65.
                this.sellValue = 35 + Math.floor(player.getCharisma() / 2); // at max, sell for 60.
            }
            else if (this.type == "balgurCaptainArmour")
            {
                //For All Items
                this.identity = "Balgur Mercenary Captain Armour";
                this.weight = 7;
                this.size = 26;
                this.description = "This design of armour is specially made for only the captains of The Balgur Mercenaries.";
                this.intForDes = 3;
                this.intDescription = "The captains among The Balgur Mercenaries did not attain their ranks with ease; they are some of the most fearsome warriors you would meet.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 6 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 3;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0.9;
                this.thirstRetention = -0.1;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 2;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 8;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 1;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 2;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 145 - Math.floor(player.getCharisma() / 3); // at max, buy for 130.
                this.sellValue = 100 + Math.floor(player.getCharisma() / 2); // at max, sell for 125.
            }
            else if (this.type == "hetmerArmour")
            {
                //For All Items
                this.identity = "Wild Tusked Walrus Leather Armour";
                this.weight = 6;
                this.size = 26;
                this.description = "Armour made from the hide of a land Walrus.";
                this.intForDes = 0;
                this.intDescription = "This armour was made by the bandit chieftain Hetmer who reinforced it with sharpened walrus tusks and teeth to put fear into the hearts of his enemies.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 5.5 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 5;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 3;
                this.thirstRetention = - 0.5;
                //Main Stat Bonuses
                this.strengthBonus = 1;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 6;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 2;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Crafting
                //this armour can not be crafted -- it is unique and only Hetmer the bandit chieftain can drop it.

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 111 - Math.floor(player.getCharisma() / 3); // at max, buy for 96.
                this.sellValue = 71 + Math.floor(player.getCharisma() / 2); // at max, sell for 96.
            }
            else if (this.type == "gulfreyShellArmour")
            {
                //For All Items
                this.identity = "Gulfrey Shell Plate Armour";
                this.weight = 12;
                this.size = 26;
                this.description = "Armour made from the shell sections of a gulfrey.";
                this.intForDes = 6;
                this.intDescription = "This armour is particularly light compared to metal plate armours.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 10 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 10;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0;
                this.thirstRetention = 0;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 3;
                this.rangedBonus = -3;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = -1;
                this.stealthBonus = -12;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 29;
                this.ingredients = [["Gulfrey Mandibles", 1], ["Gulfrey Shell Section", 7]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 194 - Math.floor(player.getCharisma() / 1); // at max, buy for 144.
                this.sellValue = 90 + Math.floor(player.getCharisma() / 1); // at max, sell for 140.
            }
            else if (this.type == "jvostranPlateArmour")
            {
                //For All Items
                this.identity = "Jvostran Plate Armour";
                this.weight = 172;
                this.size = 38;
                this.description = "Expertly forged armour made from refined jvostran ore.";
                this.intForDes = 12;
                this.intDescription = "Jvostran Plate armour is light blue compared to the dark blue of most jvostran because it is actually extremely thin.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 24 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 40;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0;
                this.thirstRetention = 0;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 10;
                this.rangedBonus = -20;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = -50;
                this.stealthBonus = -50;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "heavy";

                //Crafting
                this.yield = 1;
                this.intForCraft = 47;
                this.ingredients = [["Jvostran", 22]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 24000 - Math.floor(player.getCharisma() / 0.01); // at max, buy for 19000.
                this.sellValue = 18000 + Math.floor(player.getCharisma() / 0.05); // at max, sell for 80.
            }
            else if (this.type == "chainArmour")
            {
                //For All Items
                this.identity = "Chain Mail Armour";
                this.weight = 15;
                this.size = 26;
                this.description = "Armour made from many small interconnected steel rings.";
                this.intForDes = 2;
                this.intDescription = "This armour is often used by a kingdom's soldiers because it is effective yet cheap enough to equip an army with.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 8 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 7;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0;
                this.thirstRetention = 0;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = -2;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = -4;
                this.stealthBonus = -15;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 27;
                this.ingredients = [["Steel", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 95 - Math.floor(player.getCharisma() / 3); // at max, buy for 80.
                this.sellValue = 65 + Math.floor(player.getCharisma() / 3); // at max, sell for 80.
            }
            else if (this.type == "blackChainArmour")
            {
                //For All Items
                this.identity = "Black Chain Mail Armour";
                this.weight = 18;
                this.size = 26;
                this.description = "Armour made from many small interconnected rings of tempered nechrovite.";
                this.intForDes = 13;
                this.intDescription = "This armour is generally worn by soldiers in Vardania due to the land's abundance of nechrovite.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 9 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 9;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0;
                this.thirstRetention = 0;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = -2;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = -5;
                this.stealthBonus = -20;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 28;
                this.ingredients = [["Nechrovite", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 139 - Math.floor(player.getCharisma() / 3); // at max, buy for 124.
                this.sellValue = 100 + Math.floor(player.getCharisma() / 2.5); // at max, sell for 120.
            }
            else if (this.type == "naapridLeatherArmour")
            {
                //For All Items
                this.identity = "Naaprid Leather Armour";
                this.weight = 2;
                this.size = 26;
                this.description = "Leather armour made from the tanned hide of a Naaprid.";
                this.intForDes = 1;
                this.intDescription = "This armour provides moderate heat retention in cold climates.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 3 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 2;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 1.5;
                this.thirstRetention = - 0.35;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 15;
                this.ingredients = [["Naaprid Pelt", 1], ["Naaprid Horn", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 46 - Math.floor(player.getCharisma() / 3); // at max, buy for 31.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 3); // at max, sell for 29.
            }
            else if (this.type == "freydicRoyalDress")
            {
                //For All Items
                this.identity = "Freydic Royal Dress";
                this.weight = 1;
                this.size = 26;
                this.description = "The dress worn by the women in the freydic royal family.";
                this.intForDes = 5;
                this.intDescription = "This exquisite outfit is finely tailored from the fur of a massive winter wolf and lined with turquoise and sapphire engravings.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 2;
                this.thirstRetention = -1;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 30;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = -2;
                this.dexterityBonus = -5;
                this.stealthBonus = -5;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 10;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                //Crafting
                this.yield = 1;
                this.intForCraft = 43;
                this.ingredients = [["Sapphire", 1], ["Turquoise", 8], ["Massive Winter Wolf Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 5500 - Math.floor(player.getCharisma() / 0.125); // at max, buy for 5100.
                this.sellValue = 4700 + Math.floor(player.getCharisma() / 0.125); // at max, sell for 5100.
            }
            else if (this.type == "freydicRoyalOutfit")
            {
                //For All Items
                this.identity = "Freydic Royal Outfit";
                this.weight = 4;
                this.size = 26;
                this.description = "A royal outfit tailored from the fur of a massive winter wolf: reinforced with fine steel, and embellished with numerous tiny Sapphires forming the shape of the royal Freynor coat of arms.";
                this.intForDes = 2;
                this.intDescription = "An outfit worn by the men in the Freynor royal family.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "armour";
                //Utility Focused
                //protections
                this.protection = 8 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 6;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 3;
                this.thirstRetention = -2;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 35;
                this.rangedBonus = 0;
                this.constitutionBonus = 1;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 50;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 45;
                this.ingredients = [["Sapphire", 8], ["Steel", 5], ["Massive Winter Wolf Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 8950 - Math.floor(player.getCharisma() / 0.0625); // at max, buy for 8150.
                this.sellValue = 6925 + Math.floor(player.getCharisma() / 0.0625); // at max, sell for 7725.
            }
            else if (this.type == "winterWolfOutfit")
            {
                //For All Items
                this.identity = "Winter Wolf Outfit";
                this.weight = 1;
                this.size = 26;
                this.description = "An outfit made from a the fur of a winter wolf; the hood is made from the wolf's head.";
                this.intForDes = 2;
                this.intDescription = "An outfit traditionally worn by the upper class men in the kingdom of Freynor.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 2;
                this.thirstRetention = -0.5;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 9;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 20;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 29;
                this.ingredients = [["Winter Wolf Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 78 - Math.floor(player.getCharisma() / 2); // at max, buy for 53.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 5); // at max, sell for 40.
            }
            else if (this.type == "winterWolfClothing")
            {
                //For All Items
                this.identity = "Winter Wolf Clothing";
                this.weight = 1;
                this.size = 26;
                this.description = "Clothing made from the fur of a winter wolf.";
                this.intForDes = 1;
                this.intDescription = "This is particularly good for staying warm in freezing climates!";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 2;
                this.thirstRetention = -0.5;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 10;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 24;
                this.ingredients = [["Winter Wolf Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 51 - Math.floor(player.getCharisma() / 3); // at max, buy for 36.
                this.sellValue = 24 + Math.floor(player.getCharisma() / 5); // at max, sell for 34.
            }
            else if (this.type == "winterWolfDress")
            {
                //For All Items
                this.identity = "Winter Wolf Dress";
                this.weight = 1;
                this.size = 26;
                this.description = "A finely crafted dress made from the fur of a winter wolf.";
                this.intForDes = 1;
                this.intDescription = "This type of dress is often worn by wealthy or titled women in the Freynor lands. ";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 1.25;
                this.thirstRetention = -0.25;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 15;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = -2;
                this.dexterityBonus = -5;
                this.stealthBonus = -5;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 10;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 34;
                this.ingredients = [["Winter Wolf Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 90 - Math.floor(player.getCharisma() / 2); // at max, buy for 65.
                this.sellValue = 30 + Math.floor(player.getCharisma() / 2); // at max, sell for 55.
            }
            else if (this.type == "frichFurClothing")
            {
                //For All Items
                this.identity = "Frich Fur Clothing";
                this.weight = 1;
                this.size = 26;
                this.description = "Clothing sewn from the pelts of friches.";
                this.intForDes = 1;
                this.intDescription = "Frich clothing is associated with the low class.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 1;
                this.thirstRetention = -0.25;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = -1;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 11;
                this.ingredients = [["Frich Pelt", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 14 - Math.floor(player.getCharisma() / 10); // at max, buy for 9.
                this.sellValue = 5 + Math.floor(player.getCharisma() / 12); // at max, sell for 9.
            }
            else if (this.type == "grushFurClothing")
            {
                //For All Items
                this.identity = "Grush Fur Clothing";
                this.weight = 1;
                this.size = 25;
                this.description = "Clothing sewn from the plant-like green bristly fur of a Grush.";
                this.intForDes = 1;
                this.intDescription = "Grushes use their fur to camoflauge with their surroundings, perhaps you will too.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0.1;
                this.thirstRetention = 0;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = -2;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 2;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 0;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 18;
                this.ingredients = [["Grush Fur", 6]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 39 - Math.floor(player.getCharisma() / 3); // at max, buy for 24.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 5); // at max, sell for 24.
            }
            else if (this.type == "varnFurClothing")
            {
                //For All Items
                this.identity = "Varn Fur Clothing";
                this.weight = 1;
                this.size = 26;
                this.description = "Clothing sewn from the pelts of varns.";
                this.intForDes = 20;
                this.intDescription = "Varns are often found in temperate to cold forests and therefore much of the clothing produced from varns is near such regions.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 1.5;
                this.thirstRetention = -0.35;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 0;
                this.stealthBonus = 0;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 5;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 15;
                this.ingredients = [["Varn Pelt", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 19 - Math.floor(player.getCharisma() / 10); // at max, buy for 14.
                this.sellValue = 9 + Math.floor(player.getCharisma() / 10); // at max, sell for 14.
            }
            else if (this.type == "varnFurCloak")
            {
                //For All Items
                this.identity = "Varn Fur Cloak";
                this.weight = 1;
                this.size = 26;
                this.description = "A cloak sewn from varn fur.";
                this.intForDes = 20;
                this.intDescription = "Cloaks are an opportune clothing for a rogue because their design allows for easy sneaking as well as quick movements.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 1.5;
                this.thirstRetention = -0.35;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 0;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = 0;
                this.dexterityBonus = 1;
                this.stealthBonus = 1;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 5;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 17;
                this.ingredients = [["Varn Pelt", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 27 - Math.floor(player.getCharisma() / 8); // at max, buy for 21.
                this.sellValue = 13 + Math.floor(player.getCharisma() / 6); // at max, sell for 21.
            }
            else if (this.type == "varnFurDress")
            {
                //For All Items
                this.identity = "Varn Fur Dress";
                this.weight = 1;
                this.size = 26;
                this.description = "A dress sewn from varn fur.";
                this.intForDes = 2;
                this.intDescription = "The fabric is thick and durable but soft and comfortable, overall it makes for a good dress for the non-aristocratic classes.";

                //Define Utility
                this.utility = "worn";
                //the type of armour/clothing it is...
                this.subUtility = "clothing";
                //Utility Focused
                //protections
                this.protection = 0 * ((player.toughness / 100) + 1);
                this.toughnessRequirement = 0;
                this.eminenceRequirement = 0;
                this.magicalProtection = 0;
                this.warmthRetention = 0.5;
                this.thirstRetention = -0.15;
                //Main Stat Bonuses
                this.strengthBonus = 0;
                this.enduranceBonus = 0;
                this.toughnessBonus = 0;
                this.intelligenceBonus = 0;
                this.charismaBonus = 2;
                this.rangedBonus = 0;
                this.constitutionBonus = 0;
                this.staminaBonus = -2;
                this.dexterityBonus = -5;
                this.stealthBonus = -5;
                //Extra Stat Bonuses
                this.sleepBonus = 0;
                this.hungerBonus = 0;
                this.thirstBonus = 0;
                this.warmthBonus = 5;
                //Magical Stat Bonuses
                this.eminenceBonus = 0;
                this.willpowerBonus = 0;
                this.knowledgeBonus = 0;
                this.concentrationBonus = 0;
                this.memoryBonus = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 19;
                this.ingredients = [["Varn Pelt", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 33 - Math.floor(player.getCharisma() / 8); // at max, buy for 27.
                this.sellValue = 17 + Math.floor(player.getCharisma() / 5); // at max, sell for 27.
            }
            else if (this.type == "longsword")
            {
                //For All Items
                this.identity = "Longsword";
                this.weight = 3;
                this.size = 30;
                this.description = "A well forged longsword.";
                this.intForDes = 5;
                this.intDescription = "This style of longsword is made in the lands of Thengar.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 6;
                this.distance = 25 + (this.range * 7);
                this.range = 4.5;
                this.rate = 100;
                this.damage = (7 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 30;
                this.ingredients = [["Steel", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 28 - Math.floor(player.getCharisma() / 4); // at max, buy for 15.
                this.sellValue = 11 + Math.floor(player.getCharisma() / 12.4); // at max, sell for 15.
            }
            else if (this.type == "thenganSwordAndShield")
            {
                //For All Items
                this.identity = "Sword and Shield";
                this.weight = 7;
                this.size = 31;
                this.description = "A sword and a shield designed for the soldiers of Thengar.";
                this.intForDes = 5;
                this.intDescription = "";

                //Define Utility
                this.utility = "weapon";
                this.subUtility = "shield";

                //Utility Focused
                this.energyCost = 5;
                this.distance = 34 + (this.range * 7);
                this.range = 3.5;
                this.rate = 100;
                this.damage = (6 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;
                this.blocking = 19 + (player.getToughness() / 5);
                this.blockCost = 3;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 36;
                this.ingredients = [["Steel", 8]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 113 - Math.floor(player.getCharisma() / 5); // at max, buy for 103.
                this.sellValue = 65  + Math.floor(player.getCharisma() / 2); // at max, sell for 90.
            }
            else if (this.type == "freydicWarAxe")
            {
                //For All Items
                this.identity = "Freydic War Axe";
                this.weight = 8;
                this.size = 30;
                this.description = "A powerful Freynor great axe.";
                this.intForDes = 25;
                this.intDescription = "Used by the Freynor as both a hunting weapon and a weapon of war.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                if (player.getEndurance() >= 10)
                {
                    this.energyCost = 13;
                }
                else
                {
                    this.energyCost = 15;
                }
                this.distance = 23 + (this.range * 7);
                this.range = 5.4;
                this.rate = 140;
                this.damage = (11 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 2;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 32;
                this.ingredients = [["Steel", 3], ["Jvostran", 1], ["Walrus Tusks", 1], ["Walrus Hide", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 175 - Math.floor(player.getCharisma() / 1); // at max, buy for 125.
                this.sellValue = 75 + Math.floor(player.getCharisma() / 1); // at max, sell for 125.
            }
            else if (this.type == "freydicSpear")
            {
                //For All Items
                this.identity = "Freydic Spear";
                this.weight = 3;
                this.size = 30;
                this.description = "A Freydic spear used for hunting.";
                this.intForDes = 1;
                this.intDescription = "The Freydic spear is simply made with a wooden shaft wrapped in leather for the handle and a tip carved from bone.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 2;
                this.distance = 38 + (this.range * 7);
                this.range = 2.8;
                this.rate = 140;
                this.damage = (4 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 2;
                this.intForCraft = 12;
                this.ingredients = [["Wood", 2], ["Walrus Tusks", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 19 - Math.floor(player.getCharisma() / 5); // at max, buy for 9.
                this.sellValue = 7 + Math.floor(player.getCharisma() / 25); // at max, sell for 9.
            }
            else if (this.type == "vardanianAxe")
            {
                //For All Items
                this.identity = "Small War Axe";
                this.weight = 1;
                this.size = 20;
                this.description = "A small axe forged for war.";
                this.intForDes = 1;
                this.intDescription = "This axe is of Vardanian design.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 1;
                this.distance = 16 + (this.range * 7);
                this.range = 2.5;
                this.rate = 115 - player.getDexterity();
                this.damage = (3 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/50) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 3;
                this.ingredients = [["Iron", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 11 - Math.floor(player.getCharisma() / 12.5); // at max, buy for 7.
                this.sellValue = 3 + Math.floor(player.getCharisma() / 12.5); // at max, sell for 7.
            }
            else if (this.type == "vardanianAxeDual")
            {
                //For All Items
                this.identity = "Twin War Axes";
                this.weight = 2;
                this.size = 25;
                this.description = "Two small axes forged for war.";
                this.intForDes = 1;
                this.intDescription = "One axe per hand, that's how the Vardanians do it...";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 3;
                this.distance = 17 + (this.range * 7);
                this.range = 3.25;
                this.rate = 135 - player.getDexterity();
                this.damage = (6 - this.damageHandicap) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 5;
                this.ingredients = [["Iron", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 27 - Math.floor(player.getCharisma() / 5); // at max, buy for 17.
                this.sellValue = 8 + Math.floor(player.getCharisma() / 8); // at max, sell for 14.
            }
            else if (this.type == "nirineseSabre")
            {
                //For All Items
                this.identity = "Nirinese Sabre";
                this.weight = 4;
                this.size = 30;
                this.description = "A deadly Nirwaden sabre made from hardened thrice forged steel.";
                this.intForDes = 3;
                this.intDescription = "The sabre is one of the most frequently used weapons by the Nirinese.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 7;
                this.distance = 28 + (this.range * 7);
                this.range = 5.4;
                this.rate = 85;
                if (player.getDexterity() < 4)
                {
                    this.damage = 7 * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                }
                else
                {
                    this.damage = 8 * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                }
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 35;
                this.ingredients = [["Steel", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 57 - Math.floor(player.getCharisma() / 5); // at max, buy for 47.
                this.sellValue = 22 + Math.floor(player.getCharisma() / 2); // at max, sell for 47.
            }
            else if (this.type == "blueBlade")
            {
                //For All Items
                this.identity = "Ruhn-kor-gren";
                this.weight = 23;
                this.size = 32;
                this.description = "A Freydic greatsword made out of pure jvostran ore.";
                this.intForDes = 36;
                this.intDescription = "pronounced: | Run | Kar | Gren | The name means strong, long and sharp in Ancient Freydic.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 35;
                this.distance = 45 + (this.range * 7);
                this.range = 7;
                this.rate = 325;
                this.damage = (29 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 46;
                this.ingredients = [["Jvostran", 6]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 840 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 740.
                this.sellValue = 319 + Math.floor(player.getCharisma() / 0.4); // at max, sell for 444.
            }
            else if (this.type == "vardanianBattleAxe")
            {
                //For All Items
                this.identity = "Vardanian Battle Axe";
                this.weight = 17;
                this.size = 32;
                this.description = "A finely forged nechrovite and steel battle axe of Vardanian origin.";
                this.intForDes = 5;
                this.intDescription = "It is common for the most wealthy Vardanians to use a weapon such as this.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 22;
                this.distance = 16 + (this.range * 7);
                this.range = 6;
                this.rate = 175 - (1/2 * player.getDexterity());
                this.damage = (20 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 4;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 50;
                this.ingredients = [["Steel", 1], ["Nechrovite", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 720 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 620.
                this.sellValue = 290 + Math.floor(player.getCharisma() / 0.5); // at max, sell for 390.
            }
            else if (this.type == "flail")
            {
                //For All Items
                this.identity = "Flail";
                this.weight = 17;
                this.size = 24;
                this.description = "A heavy spiked metal ball attached to a handle by a chain.";
                this.intForDes = 3;
                this.intDescription = "Spikey crushy death death!";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 25;
                this.distance = 40 + (this.range * 7);
                this.range = 6;
                this.rate = 250;
                this.damage = (18 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + ((1/12.5) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 11;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 44;
                this.ingredients = [["Steel", 5]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 435 - Math.floor(player.getCharisma() / 0.25); // at max, buy for 235.
                this.sellValue = 195 + Math.floor(player.getCharisma() / 2); // at max, sell for 220.
            }
            else if (this.type == "aldrekiiBardiche")
            {
                //For All Items
                this.identity = "Aldrekii Bardiche";
                this.weight = 11;
                this.size = 32;
                this.description = "A long reaching pole axe forged by the Aldrek.";
                this.intForDes = 2;
                this.intDescription = "This weapon is used to attack enemies whilst maintaining a safe distance from them.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                if (player.getEndurance() >= 50)
                {
                    this.energyCost = 20;
                }
                else if (player.getEndurance() > 34)
                {
                    this.energyCost = 23;
                }
                else
                {
                    this.energyCost = 25;
                }
                this.distance = 55 + (this.range * 7);
                this.range = 3.6;
                this.rate = 165;
                this.damage = (20 - this.damageHandicap - this.damageHandicapII) * (this.leveledDamageMultiple / 25) + Math.floor(((1/6.6) * player.getStrength()));
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 40;
                this.ingredients = [["Ikrinium", 1], ["Steel", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 274 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 174.
                this.sellValue = 118 + Math.floor(player.getCharisma() / 1); // at max, sell for 168.
            }
            else if (this.type == "aldrekiiBlade")
            {
                //For All Items
                this.identity = "Aldrekii War Blade";
                this.weight = 3;
                this.size = 32;
                this.description = "A deeply curved blade forged by the aldrekii.";
                this.intForDes = 13;
                this.intDescription = "This blade was designed to be used in a quick fighting style.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 1.5;
                this.distance = 18 + (this.range * 7);
                this.range = 5;
                this.rate = 70 - Math.floor(player.getEndurance() / 5);
                if (player.getDexterity() >= 3 && player.getDexterity() < 10)
                {
                    this.damage = (4 - this.damageHandicap) * (this.leveledDamageMultiple / 25);
                }
                else if (player.getDexterity() >= 10)
                {
                    this.damage = (5 - this.damageHandicap) * (this.leveledDamageMultiple / 25);
                }
                else
                {
                    this.damage = (3 - this.damageHandicap) * (this.leveledDamageMultiple / 25);
                }
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 28;
                this.ingredients = [["Ikrinium", 1], ["Steel", 2]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 35 - Math.floor(player.getCharisma() / 10); // at max, buy for 30.
                this.sellValue = 14 + Math.floor(player.getCharisma() / 3); // at max, sell for 29.
            }
            else if (this.type == "freydicGreatSword")
            {
                //For All Items
                this.identity = "Greatsword";
                this.weight = 12;
                this.size = 35;
                this.description = "A powerful steel great sword of Freydic design.";
                this.intForDes = 1;
                this.intDescription = "It takes some strength to swing this blade effectively.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 18;
                this.distance = 38 + (this.range * 7);
                this.range = 8; //was 8.3
                this.rate = 235;
                if (player.getStrength() < 8)
                {
                    this.damage = (11 - (this.damageHandicap * 4)) * (this.leveledDamageMultiple / 25) + ((2/25) * player.getStrength());
                }
                else
                {
                    this.damage = 15 * (this.leveledDamageMultiple / 25) + (9 / 50 * player.getStrength());
                }
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 39;
                this.ingredients = [["Jvostran", 1], ["Steel", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 268 - Math.floor(player.getCharisma() / 0.5); // at max, buy for 168.
                this.sellValue = 110 + Math.floor(player.getCharisma() / 1); // at max, sell for 160.
            }
            else if (this.type == "kellishClaymore")
            {
                //For All Items
                this.identity = "Kellish Claymore";
                this.weight = 14;
                this.size = 38;
                this.description = "A hardy iron claymore.";
                this.intForDes = 4;
                this.intDescription = "The claymore is the most appreciated weapon among the kellish.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                if (player.getEndurance() >= 25)
                {
                    this.energyCost = 13;
                }
                else if (player.getEndurance() >= 10)
                {
                    this.energyCost = 14;
                }
                else if (player.getEndurance() >= 5)
                {
                    this.energyCost = 17;
                }
                else
                {
                    this.energyCost = 21;
                }
                this.distance = 66 + (this.range * 7);
                this.range = 7;
                this.rate = 185;
                this.damage = (14 - (this.damageHandicap * 3)) * (this.leveledDamageMultiple / 25) + ((7/50) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 40;
                this.ingredients = [["Iron", 6], ["Naaprid Pelt", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 160 - Math.floor(player.getCharisma() / 1); // at max, buy for 110.
                this.sellValue = 70 + Math.floor(player.getCharisma() / 1.25); // at max, sell for 110.
            }
            else if (this.type == "kellishSawClub")
            {
                //For All Items
                this.identity = "Kellish Saw Club";
                this.weight = 3;
                this.size = 17;
                this.description = "A flat wooden club reinforced with sharpened iron teeth on each side.";
                this.intForDes = 1;
                this.intDescription = "The iron spikes built into the sides can pierce light armour with ease.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                if (player.getEndurance() >= 5)
                {
                    this.energyCost = 1;
                }
                else
                {
                    this.energyCost = 2;
                }
                this.distance = 24 + (this.range * 7);
                this.range = 4;
                this.rate = Math.max(10, 115 - 15/50 * player.getDexterity());
                this.damage = (4 - (this.damageHandicap * 2)) * (this.leveledDamageMultiple / 25) + ((1/25) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 6;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 9;
                this.ingredients = [["Iron", 1], ["Wood", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 25 - Math.floor(player.getCharisma() / 6); // at max, buy for 17.
                this.sellValue = 11 + Math.floor(player.getCharisma() / 8); // at max, sell for 17.
            }
            else if (this.type == "vardanianCleaver")
            {
                //For All Items
                this.identity = "Vardanian War Cleaver";
                this.weight = 3.5;
                this.size = 35;
                this.description = "An expertly crafted steel war cleaver of Vardanian origin.";
                this.intForDes = 2;
                this.intDescription = "This weapon is used by the well equipped soldiers in Vardania.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                this.energyCost = 4.5;
                this.distance = 26 + (this.range * 7);
                this.range = 4;
                this.rate = 100;
                this.damage = (5.5 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 33;
                this.ingredients = [["Steel", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 50 - Math.floor(player.getCharisma() / 2.5); // at max, buy for 30.
                this.sellValue = 18 + Math.floor(player.getCharisma() / 5); // at max, sell for 28.
            }
            else if (this.type == "vardanianHeavyCleaver")
            {
                //For All Items
                this.identity = "Heavy Vardanian War Cleaver";
                this.weight = 8;
                this.size = 17;
                this.description = "A large and fearsome battle cleaver of Vardanian design.";
                this.intForDes = 2;
                this.intDescription = "This weapon is brutally effective if wielded by one skilled enough to use it.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                if (player.getEndurance() >= 10)
                {
                    this.energyCost = 10;
                }
                else
                {
                    this.energyCost = 14;
                }
                this.distance = 38 + (this.range * 7);
                this.range = (5 + 6/7);
                this.rate = 181 - (32 / (51 - player.getDexterity()));

                if (player.getStrength() >= 26)
                {
                    this.damage = (14) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                }
                else if (player.getStrength() >= 12)
                {
                    this.damage = (13) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                }
                else if (player.getStrength() >= 7)
                {
                    this.damage = (12) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                }
                else
                {
                    this.damage = (11 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getStrength());
                }

                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 44;
                this.ingredients = [["Steel", 2], ["Nechrovite", 4]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 336 - Math.floor(player.getCharisma() / 2); // at max, buy for 311.
                this.sellValue = 152 + Math.floor(player.getCharisma() / 0.33); // at max, sell for 303.
            }
            else if (this.type == "katana")
            {
                //For All Items
                this.identity = "Katana";
                this.weight = 2;
                this.size = 24;
                this.description = "A swift and deadly blade made of steel.";
                this.intForDes = 6;
                this.intDescription = "The more one trains their endurance and speed the more effective they become with the use of a katana.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                if (player.getEndurance() < 20)
                {
                    this.energyCost = 4;
                }
                else
                {
                    this.energyCost = 2;
                }
                this.distance = 26 + (this.range * 7);
                this.range = (7 + 1/7);
                if (player.getDexterity() < 25)
                {
                    this.rate = 90;
                }
                else
                {
                    this.rate = 55;
                }
                this.damage = (5 - (this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((10/50) * player.getDexterity());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 43;
                this.ingredients = [["Steel", 3]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 90 - Math.floor(player.getCharisma() / 5); // at max, buy for 65.
                this.sellValue = 32 + Math.floor(player.getCharisma() / 2); // at max, sell for 57.
            }
            else if (this.type == "dualCurvedDaggers")
            {
                //For All Items
                this.identity = "Dual Curved Daggers";
                this.weight = 1;
                this.size = 17;
                this.description = "Two curved steel daggers used in synchrony to produce a deadly fighting style.";
                this.intForDes = 6;
                this.intDescription = "The more one trains their endurance and speed the more effective they become with the use of these daggers.";

                //Define Utility
                this.utility = "weapon";

                //Utility Focused
                if (player.getEndurance() < 8)
                {
                    this.energyCost = 2.5;
                }
                else
                {
                    this.energyCost = 1.5;
                }
                this.distance = 26 + (this.range * 7);
                this.range = 3;
                if (player.getDexterity() < 7)
                {
                    this.rate = 70;
                }
                else if (player.getDexterity() < 14)
                {
                    this.rate = 60;
                }
                else
                {
                    this.rate = 45;
                }
                this.damage = (4.5 - (1.5 * this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/10) * player.getDexterity());
                this.magicalDamage = 0;
                this.negateArmour = 0;

                //ability
                this.ability = "none";

                this.yield = 1;
                this.intForCraft = 14;
                this.ingredients = [["Steel", 1]];

                //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                this.buyValue = 24 - Math.floor(player.getCharisma() / 8); // at max, buy for 18.
                this.sellValue = 13 + Math.floor(player.getCharisma() / 10); // at max, sell for 18.
            }
            else if (this.type == "curvedDagger")
                {
                    //For All Items
                    this.identity = "Curved Dagger";
                    this.weight = 0.5;
                    this.size = 17;
                    this.description = "A thin, light weight, and extremely sharp curved steel dagger.";
                    this.intForDes = 6;
                    this.intDescription = "The more one trains their endurance and speed the more effective they become with the use of this dagger.";

                    //Define Utility
                    this.utility = "weapon";

                    //Utility Focused
                    if (player.getEndurance() < 8)
                    {
                        this.energyCost = 2;
                    }
                    else
                    {
                        this.energyCost = 1;
                    }
                    this.distance = 26 + (this.range * 7);
                    this.range = (2 + 4/7);
                    if (player.getDexterity() < 7)
                    {
                        this.rate = 65;
                    }
                    else if (player.getDexterity() < 14)
                    {
                        this.rate = 55;
                    }
                    else
                    {
                        this.rate = 45;
                    }
                    this.damage = (2 - (1/2 * this.damageHandicap)) * (this.leveledDamageMultiple / 25) + ((1/16) * player.getDexterity());
                    this.magicalDamage = 0;
                    this.negateArmour = 0;

                    //ability
                    this.ability = "none";

                    this.yield = 2;
                    this.intForCraft = 13;
                    this.ingredients = [["Steel", 1]];

                    //Prices (these are standards and do not necessarily represent the exact amount every shop will trade them for)
                    this.buyValue = 12 - Math.floor(player.getCharisma() / 15); // at max, buy for 9.
                    this.sellValue = 6 + Math.floor(player.getCharisma() / 15); // at max, sell for 9.
                }
        };

        //This draws items onto the map.
        this.drawItem = function()
        {
            if (this.type == "coins")
            {
                for (var i = 0; i < worldItems.length; i++)
                {
                    if (worldItems[i][0] === this)
                    {
                        if (worldItems[i][1] <= 10)
                        {
                            XXX.beginPath();
                            XXX.drawImage(polyPNG, 405, 7, 6, 4, X - this.X + (1/2 * CCC.width) - (1/2 * 6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 4), 6, 4);
                            worldItems[i][0].size = 7;
                        }
                        else if (worldItems[i][1] > 10 && worldItems[i][1] <= 199)
                        {
                            XXX.beginPath();
                            XXX.drawImage(polyPNG, 405, 4, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 16, 17);
                            worldItems[i][0].size = 14;
                        }
                        else if (worldItems[i][1] > 199 && worldItems[i][1] <= 549)
                        {
                            XXX.beginPath();
                            XXX.drawImage(polyPNG, 482, 32, 22, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 22, 22);
                            worldItems[i][0].size = 21;
                        }
                        else if (worldItems[i][1] > 549 && worldItems[i][1] <= 2999)
                        {
                            XXX.beginPath();
                            XXX.drawImage(polyPNG, 418, 21, 27, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29), 27, 29);
                            worldItems[i][0].size = 28;
                        }
                        else if (worldItems[i][1] > 2999 && worldItems[i][1] < 10000)
                        {
                            XXX.beginPath();
                            XXX.drawImage(polyPNG, 948, 5, 56, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 56), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50), 56, 50);
                            worldItems[i][0].size = 32;
                        }
                        else if (worldItems[i][1] >= 10000  && worldItems[i][1] < 99999)
                        {
                            XXX.beginPath();
                            XXX.drawImage(freeverse, 137, 192, 110, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 110), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102), 110, 102);
                            worldItems[i][0].size = 50;
                        }
                        else if (worldItems[i][1] >= 100000)
                        {
                            XXX.beginPath();
                            XXX.drawImage(freeverse, 270, 200, 110, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 110), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102), 110, 102);
                            worldItems[i][0].size = 75;
                        }
                    }
                }
            }
            else if (this.type == "neevFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 148, 67, 21, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.25), 21 * 1.25, 17 * 1.25);
            }
            else if (this.type == "neevFur")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 176, 64, 35, 25, X - this.X + (1/2 * CCC.width) - (1/2 * 35 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25 * 1.15), 35 * 1.15, 25 * 1.15);
            }
            else if (this.type == "ogardPerfume")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 50, 4, 15, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 15, 19);
            }
            else if (this.type == "driedTechiLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 35, 6, 11, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 11, 16);
            }
            else if (this.type == "ogard")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 36, 28, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.3), 15 * 1.3, 16 * 1.3);
            }
            else if (this.type == "groundOgard")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 37, 47, 16, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14), 16, 14);
            }
            else if (this.type == "ogardPollen")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 57, 50, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.3), 9 * 1.3, 9 * 1.3);
            }
            else if (this.type == "cloth")
            {
                XXX.beginPath();
                XXX.save();
                XXX.translate(X - this.X + (1/2 * CCC.width), Y - this.Y + (1/2 * CCC.height));
                XXX.rotate(5/8 * 2 * Math.PI);
                XXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 * 1.5), - (1/2 * 10 * 1.5), 29 * 1.5, 10 * 1.5);
                XXX.restore();
            }
            else if (this.type == "naapridFiber")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 85, 46, 10, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.65), 10 * 1.65, 18 * 1.65);
            }
            else if (this.type == "tent")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 1, 1, 32, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 32 * 1.75), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32 * 1.75), 32 * 1.75, 32 * 1.75);
            }
            else if (this.type == "neculaisEar")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 71, 48, 9, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.2), 9 * 1.2, 12 * 1.2);
            }
            else if (this.type == "berulnToothNecklace")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 96, 3, 14, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21 * 1.2), 14 * 1.2, 21 * 1.2);
            }
            else if (this.type == "techiLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 83, 147, 13, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 13, 15);
            }
            else if (this.type == "bucketOfPluttJuice" || this.type == "bucketOfHotPluttBerryCider" )
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 88, 93, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 2), 12 * 2, 13 * 2);
            }
            else if (this.type == "pluttJuicePintGlass" || this.type == "pluttCiderPintGlass" )
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 2, 31, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.5), 9 * 1.5, 9 * 1.5);
            }
            else if (this.type == "glassBottle" || this.type == "glassBottleOfWater" || this.type == "glassBottleOfPluttWine")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 185, 36, 11, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 2), 11 * 2, 12 * 2);
            }
            else if (this.type == "pluttWine")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 46, 196, 11, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.5), 11 * 1.5, 11 * 1.5);
            }
            else if (this.type == "bushkaBerries")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 23, 125, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12), 13, 12);
            }
            else if (this.type == "bushkaLeaves")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 3, 118, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 14, 15);
            }
            else if (this.type == "beesWax")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 1, 2, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.4), 12 * 1.4, 13 * 1.4);
            }
            else if (this.type == "oilLantern" || this.type == "oilLantern4" || this.type == "oilLantern3" || this.type == "oilLantern2" || this.type == "oilLantern1" || this.type == "oilLanternEmpty")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 26, 109, 16, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 16 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.2), 16 * 1.2, 16 * 1.2);
            }
            else if (this.type == "oilLamp" || this.type == "oilLamp2" || this.type == "oilLamp1" || this.type == "oilLampEmpty")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 51, 110, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 1.2), 14 * 1.2, 15 * 1.2);
            }
            else if (this.type == "jackOLantern" || this.type == "jackOLantern2" || this.type == "jackOLantern1" || this.type == "jackOLanternEmpty")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 4, 100, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.2), 17 * 1.2, 18 * 1.2);
            }
            else if (this.type == "pumpkin")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 4, 100, 17, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.2), 17 * 1.2, 18 * 1.2);
            }
            else if (this.type == "roastedPumpkin")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 85, 44, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.2), 15 * 1.2, 16 * 1.2);
            }
            else if (this.type == "candle")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 14, 1, 11, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.2), 11 * 1.2, 16 * 1.2);
            }
            else if (this.type == "candle2")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 25, 1, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.2), 12 * 1.2, 13 * 1.2);
            }
            else if (this.type == "candle1")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 35, 1, 12, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.2), 12 * 1.2, 10 * 1.2);
            }
            else if (this.type == "pluttMoffling")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 1, 211, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
            }
            else if (this.type == "akerMoffling")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 22, 211, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
            }
            else if (this.type == "rawMofflingFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 86, 110, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
            }
            else if (this.type == "mofflingMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 104, 111, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 0.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
            }
            else if (this.type == "rawMofuFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 86, 110, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
            }
            else if (this.type == "mofuMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 104, 111, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
            }
            else if (this.type == "rawLargeMofuFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 86, 110, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
            }
            else if (this.type == "largeMofuMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 104, 111, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
            }
            else if (this.type == "fattyMofuLiver")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 114, 67, 9, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 9 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 2), 9 * 2, 9 * 2);
            }
            else if (this.type == "mofuFeather")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 139, 54, 11, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 11, 13);
            }
            else if (this.type == "mofuFoot")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 122, 56, 11, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7), 11, 7);
            }
            else if (this.type == "mofuEgg")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 109, 54, 8, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 8, 11);
            }
            else if (this.type == "cookedMofuEgg")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 96, 54, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10), 11, 10);
            }
            else if (this.type == "fermentedMofuEgg")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 96, 45, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10), 11, 10);
            }
            else if (this.type == "rawGrushFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1208, 27, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 14, 16);
            }
            else if (this.type == "grushMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1207, 43, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 14, 16);
            }
            else if (this.type == "grushFur")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1204, 7, 18, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 18, 16);
            }
            else if (this.type == "grushFurClothing")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1249, 69, 31, 52, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.9), Y - this.Y + (1/2 * CCC.height) - (1/2 * 52 * 1.9), 31 * 1.9, 52 * 1.9);
            }
            else if (this.type == "iron")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1212, 561, 28, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 28), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 28, 18);
            }
            else if (this.type == "santhGrain")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2943, 205, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 19, 19);
            }
            else if (this.type == "santhFlour")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2977, 204, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 19, 19);
            }
            else if (this.type == "emptyBag")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 3016, 201, 22, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28), 22, 28);
            }
            else if (this.type == "bagOfSanthFlour")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 3050, 200, 22, 28, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28), 22, 28);
            }
            else if (this.type == "kellishSanthDough")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2940, 230, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14 * 2.6), 17 * 2.6, 14 * 2.6);
            }
            else if (this.type == "naapridButter")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2940, 230, 17, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14), 17, 14);
            }
            else if (this.type == "santhBread")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2970, 225, 23, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 23), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23), 23, 23);
            }
            else if (this.type == "butteredSanthBread")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2965, 250, 32, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 32), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 32, 26);
            }
            else if (this.type == "healingSalve")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2943, 252, 11, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 1.5), 11 * 1.5, 17 * 1.5);
            }
            else if (this.type == "carrot")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2864, 68, 18, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 18, 19);
            }
            else if (this.type == "suuliMelon")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2940, 67, 16, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 16, 22);
            }
            else if (this.type == "suuliMelonSlice")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2963, 68, 16, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 14), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 14, 20);
            }
            else if (this.type == "potato")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2770, 1, 10, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 10, 16);
            }
            else if (this.type == "cookedPotato")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2782, 1, 10, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 10, 16);
            }
            else if (this.type == "nechromanticDust")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 477, 922, 72, 66, X - this.X + (1/2 * CCC.width) - (1/2 * 72 * 0.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 66 * 0.35), 72 * 0.35, 66 * 0.35);
            }
            else if (this.type == "kellishClayPot")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3036, 1, 22, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 22 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.7), 22 * 1.7, 19 * 1.7);
            }
            else if (this.type == "kellishClayPotOfNaapridMilk")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3017, 1, 20, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 20 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 1.7), 20 * 1.7, 18 * 1.7);
            }
            else if (this.type == "kellishClayPotOfWater")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 359, 37, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
            }
            else if (this.type == "kellishClayPotOfMushroomStew")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 408, 25, 18, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 18 * 1.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
            }
            else if (this.type == "rawViperFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 529, 64, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
            }
            else if (this.type == "viperMeat")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 543, 63, 13, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
            }
            else if (this.type == "viperVenomGland")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 529, 78, 10, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 7 * 1.3), 10 * 1.3, 7 * 1.3);
            }
            else if (this.type == "fermentedViperVenomGland")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 544, 77, 12, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 12 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 9 * 1.3), 12 * 1.3, 9 * 1.3);
            }
            else if (this.type == "viperSnakeSkin")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 530, 52, 28, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 28 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.3), 28 * 1.3, 10 * 1.3);
            }
            else if (this.type == "rasper")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 651, 45, 21, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 1.3), 21 * 1.3, 45 * 1.3);
            }
            else if (this.type == "jvostranPlateArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 350, 660, 66, 106, X - this.X + (1/2 * CCC.width) - (1/2 * 66), Y - this.Y + (1/2 * CCC.height) - (1/2 * 106), 66, 106);
            }
            else if (this.type == "waterPintGlass")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 204, 17, 11, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 11 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 11 * 1.5, 10 * 1.5);
            }
            else if (this.type == "harstGrain")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 241, 45, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 12, 13);
            }
            else if (this.type == "harstAle")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 247, 17, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 10 * 1.5, 10 * 1.5);
            }
            else if (this.type == "techiTea")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 21, 48, 13, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 13 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 13 * 1.5, 13 * 1.5);
            }
            else if (this.type == "pintGlass")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 149, 19, 10, 10, X - this.X + (1/2 * CCC.width) - (1/2 * 10 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10 * 1.5), 10 * 1.5, 10 * 1.5);
            }
            else if (this.type == "energilPotionI" || this.type == "energilPotionII" || this.type == "energilPotionIII" || this.type == "energilPotionIV" || this.type == "energilPotionV")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1700, 180, 12, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 12, 19);
            }
            else if (this.type == "potionGlass")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 419, 1, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
            }
            else if (this.type == "vialOfWater")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 406, 1, 10, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 10, 16);
            }
            else if (this.type == "walrusLeatherWaterskin" || this.type == "walrusLeatherWaterskinOne" || this.type == "walrusLeatherWaterskinTwo" || this.type == "walrusLeatherWaterskinFull")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 79, 5, 19, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
            }
            else if (this.type == "bucket")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 101, 27, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
            }
            else if (this.type == "bucketOfWater")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 133, 27, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
            }
            else if (this.type == "bucketOfTechiTea")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 2, 61, 17, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17 * 2), 17 * 2, 17 * 2);
            }
            else if (this.type == "bucketOfNaapridMilk")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 118, 27, 14, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 14 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15 * 2), 14 * 2, 15 * 2);
            }
            else if (this.type == "halcifMushroom")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 33, 62, 13, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 13), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 13, 15);
            }
            else if (this.type == "cyrinthilimMushroom")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 53, 27, 10, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 14), 10, 14);
            }
            else if (this.type == "glinMushrooms")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 5, 1, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 18, 18);
            }
            else if (this.type == "driedCyrinthilimMushroom")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 52, 45, 12, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 12, 11);
            }
            else if (this.type == "boiledGlinMushrooms")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 56, 1, 18, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 18, 18);
            }
            else if (this.type == "tylunFlower")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2155, 64, 28, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 28), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33), 28, 33);
            }
            else if (this.type == "stomwikLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2171, 44, 21, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 21, 16);
            }
            else if (this.type == "culprisLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2154, 160, 20, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 20, 13);
            }
            else if (this.type == "neprilneBerries")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2148, 516, 15, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 15, 16);
            }
            else if (this.type == "pluttBerries")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2111, 32, 19, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 19, 19);
            }
            else if (this.type == "driedPluttBerries")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 104, 47, 17, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 17, 19);
            }
            else if (this.type == "akerBerries")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2170, 20, 22, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 22, 19);
            }
            else if (this.type == "kellishSawClub")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 645, 466, 17, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55), 17, 55);
            }
            else if (this.type == "kellishClaymore")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 600, 435, 22, 112, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 112), 22, 112);
            }
            else if (this.type == "gribPelt")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1095, 155, 31, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 31 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19 * 1.2), 31 * 1.2, 19 * 1.2);
            }
            else if (this.type == "rawGribFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1393, 196, 20, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 20, 22);
            }
            else if (this.type == "gribMeat")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1371, 197, 20, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 20, 22);
            }
            else if (this.type == "hammer")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 512, 514, 36, 49, X - this.X + (1/2 * CCC.width) - (1/2 * 36 / 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49 / 1.3), 36 / 1.3, 49 / 1.3);
            }
            else if (this.type == "warHammer")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 535, 411, 40, 72, X - this.X + (1/2 * CCC.width) - (1/2 * 40 / 1.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 72 / 1.3), 40 / 1.3, 72 / 1.3);
            }
            else if (this.type == "iceClaymore")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1859, 36, 22, 27, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 27), 22, 27);
            }
            else if (this.type == "narthwarpMouth")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1901, 74, 30, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 30, 18);
            }
            else if (this.type == "lrgNarthwarpMouth")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1901, 74, 30, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 30 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18 * 2), 30 * 2, 18 * 2);
            }
            else if (this.type == "fermentedNarthwarpMouth")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1844, 64, 37, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 37), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32), 37, 32);
            }
            else if (this.type == "embers" || this.type == "fireballI" || this.type == "flyingColours" || this.type == "iceSpikes" || this.type == "drainingI")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1967, 67, 33, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 33, 26);
            }
            else if (this.type == "repel" || this.type == "lifeTap")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1922, 4, 23, 32, X - this.X + (1/2 * CCC.width) - (1/2 * 23), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32), 23, 32);
            }
            else if (this.type == "vivification")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1928, 39, 40, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 40), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 40, 21);
            }
            else if (this.type == "frostWind" || this.type == "chasingLights")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1773, 3, 28, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 28), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 28, 30);
            }
            else if (this.type == "rawBearFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 731, 9, 25, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
            }
            else if (this.type == "bearMeat")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 731, 27, 25, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 1.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
            }
            else if (this.type == "rawBearTongue")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 757, 12, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
            }
            else if (this.type == "bearTongue")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 757, 29, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
            }
            else if (this.type == "smlBlackBearPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 558, 18, 53, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 53), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 53, 30);
            }
            else if (this.type == "medBlackBearPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 558, 18, 53, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 1.4), 53 * 1.4, 30 * 1.4);
            }
            else if (this.type == "lrgBlackBearPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 558, 18, 53, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 53 * 3.35), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30 * 3.35), 53 * 3.35, 30 * 3.35);
            }
            else if (this.type == "vardanianHeavyCleaver")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 779, 1, 17, 68, X - this.X + (1/2 * CCC.width) - (1/2 * 17 * 1.1), Y - this.Y + (1/2 * CCC.height) - (1/2 * 68 * 1.1), 17 * 1.1, 68 * 1.1);
            }
            else if (this.type == "shehidOozeSml")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1329, 19, 21, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 21, 22);
            }
            else if (this.type == "shehidOozeLrg")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1329, 19, 21, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 21 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22 * 2), 21 * 2, 22 * 2);
            }
            else if (this.type == "shehidShellSml")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1358, 19, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 25, 24);
            }
            else if (this.type == "shehidShellLrg")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1358, 19, 25, 24, X - this.X + (1/2 * CCC.width) - (1/2 * 25 * 2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24 * 2), 25 * 2, 24 * 2);
            }
            else if (this.type == "timberAxe")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 294, 330, 29, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 29 * 1.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 45 * 1.4), 29 * 1.4, 45 * 1.4);
            }
            else if (this.type == "curvedDagger")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3538, 605, 10, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 10, 30);
            }
            else if (this.type == "dualCurvedDaggers")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3552, 605, 16, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 16, 30);
            }
            else if (this.type == "nirineseSpear")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 8, 1511, 13, 79, X - this.X + (1/2 * CCC.width) - (1/2 * 15.6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 94.8), 15.6, 94.8);
            }
            else if (this.type == "crossbow")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3169, 118, 36, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 37.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35.7), 37.8, 35.7);
            }
            else if (this.type == "steelBolt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3152, 1, 19, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 22.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 25.2), 22.8, 25.2);
            }
            else if (this.type == "varnFurDress")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 51, 387, 39, 52, X - this.X + (1/2 * CCC.width) - (1/2 * 60.45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80.6), 62.4, 83.2);
            }
            else if (this.type == "varnFurCloak")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 46, 439, 50, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 77.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 92.55), 77.5, 92.55);
            }
            else if (this.type == "varnFurClothing")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 91, 380, 50, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 80), Y - this.Y + (1/2 * CCC.height) - (1/2 * 95.6), 80, 95.6);
            }
            else if (this.type == "frichFurMittens")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 386, 21, 19, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 19 * 1.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11 * 1.2), 19 * 1.2, 11 * 1.2);
            }
            else if (this.type == "frichFurClothing")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 258, 316, 37, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 59.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 96), 59.2, 96);
            }
            else if (this.type == "hetmerArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 150, 309, 52, 66, X - this.X + (1/2 * CCC.width) - (1/2 * 72.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 92.4), 72.8, 92.4);
            }
            else if (this.type == "vardanianBattleAxe")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 374, 354, 29, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 37.7), Y - this.Y + (1/2 * CCC.height) - (1/2 * 74.1), 37.7, 74.1);
            }
            else if (this.type == "rawOlkrinFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3143, 290, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 46.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "olkrinMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3114, 290, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 46.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "olkrinSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3033, 290, 49, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 73.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54), 73.5, 54);
            }
            else if (this.type == "olkrinHorn")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3087, 287, 26, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 52), Y - this.Y + (1/2 * CCC.height) - (1/2 * 68), 52, 68);
            }
            else if (this.type == "goliathOlkrinSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3033, 290, 49, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 98), Y - this.Y + (1/2 * CCC.height) - (1/2 * 72), 98, 72);
            }
            else if (this.type == "olkrinArm")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3175, 287, 67, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 107.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 71.4), 107.2, 71.4);
            }
            else if (this.type == "olkrinMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3114, 290, 31, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 46.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "vardanianCleaver")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 250, 359, 14, 54, X - this.X + (1/2 * CCC.width) - (1/2 * 17.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 67.5), 17.5, 67.5);
            }
            else if (this.type == "rawVarnFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3099, 1, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 27, 22.5);
            }
            else if (this.type == "varnMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3115, 1, 18, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 27, 22.5);
            }
            else if (this.type == "varnPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2994, 291, 27, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 40.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 40.5, 22.5);
            }
            else if (this.type == "fireStarter")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2922, 136, 14, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16.5), 21, 16.5);
            }
            else if (this.type == "wood")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2917, 174, 23, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 34.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 34.5, 34.5);
                XXX.drawImage(verse, 2917, 174, 23, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 34.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 34.5, 34.5);
            }
            else if (this.type == "katana")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 168, 364, 16, 55, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 81), 25, 81);
            }
            else if (this.type == "winterWolfOutfit")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3126, 156, 40, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 72), Y - this.Y + (1/2 * CCC.height) - (1/2 * 90), 72, 90);
            }
            else if (this.type == "winterWolfClothing")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3223, 157, 40, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 68), Y - this.Y + (1/2 * CCC.height) - (1/2 * 85), 72, 90);
            }
            else if (this.type == "freydicRoyalOutfit")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2959, 151, 41, 60, X - this.X + (1/2 * CCC.width) - (1/2 * 74.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 108), 74.2, 108);
            }
            else if (this.type == "naapridLeatherArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3171, 59, 34, 57, X - this.X + (1/2 * CCC.width) - (1/2 * 61.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 101.6), 61.2, 101.6);
            }
            else if (this.type == "freydicRoyalDress")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3049, 148, 30, 47, X - this.X + (1/2 * CCC.width) - (1/2 * 57), Y - this.Y + (1/2 * CCC.height) - (1/2 * 87.3), 57, 87.3);
            }
            else if (this.type == "winterWolfDress")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3012, 147, 30, 47, X - this.X + (1/2 * CCC.width) - (1/2 * 57), Y - this.Y + (1/2 * CCC.height) - (1/2 * 87.3), 57, 87.3);
            }
            else if (this.type == "rawYoungNaapridFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3133, 10, 15, 9.5, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17.1), 27, 17.1);
            }
            else if (this.type == "youngNaapridMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3133, 1, 15, 9.5, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17.1), 27, 17.1);
            }
            else if (this.type == "rawNaapridFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2970, 1, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 38.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 38.5, 35);
            }
            else if (this.type == "naapridMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2995, 1, 22, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 38.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 38.5, 35);
            }
            else if (this.type == "naapridPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2924, 1, 26, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 65), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40), 65, 40);
            }
            else if (this.type == "naapridHorn")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2951, 1, 15, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 31.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29.4), 31.5, 29.4);
            }
            else if (this.type == "thenganSwordAndShield")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3515, 140, 48, 40, X - this.X + (1/2 * CCC.width) - (1/2 * 61.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 48), 61.2, 48);
            }
            else if (this.type == "rawTrollsBlood")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 452, 33, 8, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 12, 21);
            }
            else if (this.type == "jarOfOil")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 97, 3, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21.5), 15, 21.5);
            }
            else if (this.type == "glassJar")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 465, 33, 8, 14, X - this.X + (1/2 * CCC.width) - (1/2 * 12), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 12, 21);
            }
            else if (this.type == "chainArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 38, 310, 40, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 60), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91.5), 60, 91.5);
            }
            else if (this.type == "blackChainArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 80, 310, 40, 61, X - this.X + (1/2 * CCC.width) - (1/2 * 60), Y - this.Y + (1/2 * CCC.height) - (1/2 * 91.5), 60, 91.5);
            }
            else if (this.type == "freydicGreatSword")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 126, 302, 16, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 19.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 84), 19.2, 84);
            }
            else if (this.type == "hugeBogTrollSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 63, 264, 45, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 67.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54), 67.5, 54);
            }
            else if (this.type == "bogTrollSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 63, 264, 45, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 45), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 49.5, 39.6);
            }
            else if (this.type == "babyBogTrollSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 63, 264, 45, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 22.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 22.5, 18);
            }
            else if (this.type == "trollFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2875, 1, 19, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 38), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 38, 36);
            }
            else if (this.type == "trollMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2900, 1, 19, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 38), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 38, 36);
            }
            else if (this.type == "aldrekiiArrow")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2832, 3, 41, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 32), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12), 32, 12);
            }
            else if (this.type == "rawWolfLiver")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2769, 2, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 10, 15);
            }
            else if (this.type == "wolfLiver")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2782, 2, 10, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 10, 15);
            }
            else if (this.type == "winterWolfMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2812, 1, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 21, 24);
            }
            else if (this.type == "rawWinterWolfFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2794, 1, 14, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 21), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 21, 24);
            }
            else if (this.type == "winterWolfPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2737, 2, 29, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 52.2), Y - this.Y + (1/2 * CCC.height) - (1/2 * 28.8), 52.2, 28.8);
            }
            else if (this.type == "massiveWinterWolfPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2737, 2, 29, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 92.8), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51.2), 92.8, 51.2);
            }
            else if (this.type == "energyPotionI")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 38, 267, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
            }
            else if (this.type == "speedPotionI")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 86, 134, 10, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 10), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 10, 17);
            }
            else if (this.type == "cleansingPotion")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 35, 134, 11, 19, X - this.X + (1/2 * CCC.width) - (1/2 * 11), Y - this.Y + (1/2 * CCC.height) - (1/2 * 19), 11, 19);
            }
            else if (this.type == "freydicSword")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2089, 2, 13, 46, X - this.X + (1/2 * CCC.width) - (1/2 * 16.25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 57.5), 16.25, 57.5);
            }
            else if (this.type == "pickaxe")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 103, 233, 22, 26, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39), 33, 39);
            }
            else if (this.type == "aldrekiiBlade")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2057, 4, 20, 45, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 54), 24, 54);
            }
            else if (this.type == "flail")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1995, 1, 37, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 55.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 49.5), 55.5, 49.5);
            }
            else if (this.type == "torperVenomSac")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 40, 226, 17, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 17, 16);
            }
            else if (this.type == "torperFuzz")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1867, 9, 23, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 23), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 23, 20);
            }
            else if (this.type == "rawTorperFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1894, 3, 18, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 18, 11);
            }
            else if (this.type == "torperMeat")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1895, 16, 18, 11, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 11), 18, 11);
            }
            else if (this.type == "gulfreyShellArmour")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1, 157, 36, 63, X - this.X + (1/2 * CCC.width) - (1/2 * 36), Y - this.Y + (1/2 * CCC.height) - (1/2 * 63), 49.4, 90.6);
            }
            else if (this.type == "frichPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 1832, 10, 31, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 31), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 31, 18);
            }
            else if (this.type == "rawFrichFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 65, 226, 10, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 20, 24);
            }
            else if (this.type == "frichMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 79, 227, 10, 12, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 24), 20, 24);
            }
            else if (this.type == "vardanianAxe")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 53, 158, 37, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 37), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 37, 22);
            }
            else if (this.type == "vardanianAxeDual")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 48, 187, 31, 35, X - this.X + (1/2 * CCC.width) - (1/2 * 31), Y - this.Y + (1/2 * CCC.height) - (1/2 * 35), 31, 35);
            }
            else if (this.type == "gulfreyShell")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 48, 41, 31, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 31), Y - this.Y + (1/2 * CCC.height) - (1/2 * 23), 31, 23);
            }
            else if (this.type == "freydicSpear")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 4, 227, 20, 75, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 75), 20, 75);
            }
            else if (this.type == "gulfreyMandibles")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2, 92, 33, 33, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 33), 33, 33);
            }
            else if (this.type == "rawGulfreyFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 37, 9, 20, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 20, 20);
            }
            else if (this.type == "gulfreyMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 66, 9, 20, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 20), Y - this.Y + (1/2 * CCC.height) - (1/2 * 20), 20, 20);
            }
            else if (this.type == "vomit")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 55, 135, 24, 21, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 21), 24, 21);
            }
            else if (this.type == "gojiiBerries")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 615, 3, 19, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 19), Y - this.Y + (1/2 * CCC.height) - (1/2 * 15), 19, 15);
            }
            else if (this.type == "nirineseSabre")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 7, 7, 26, 80, X - this.X + (1/2 * CCC.width) - (1/2 * 26), Y - this.Y + (1/2 * CCC.height) - (1/2 * 80), 26, 80);
            }
            else if (this.type == "freezingArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 66, 73, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
            }
            else if (this.type == "fireArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 66, 80, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
            }
            else if (this.type == "lifeLeachArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 65, 88, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
            }
            else if (this.type == "oiledArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 67, 57, 19, 7, X - this.X + (1/2 * CCC.width) - (1/2 * 28.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 10.5), 28.5, 10.5);
            }
            else if (this.type == "shehidToxinArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 66, 21, 22, 9, X - this.X + (1/2 * CCC.width) - (1/2 * 33), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13.5), 33, 13.5);
            }
            else if (this.type == "arrow")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 432, 554, 20, 8, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 12), 20, 8);
            }
            else if (this.type == "ogoFruit")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 426, 4, 12, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 18), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 18, 22.5);
            }
            else if (this.type == "blueBlade")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 8, 531, 57, 63, X - this.X + (1/2 * CCC.width) - (1/2 * 68.4), Y - this.Y + (1/2 * CCC.height) - (1/2 * 75.6), 68.4, 75.6);
            }
            else if (this.type == "berulnSkull")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 446, 3, 15, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 30), Y - this.Y + (1/2 * CCC.height) - (1/2 * 40), 30, 40);
            }
            else if (this.type == "rawBerulnFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 526, 6, 21, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 31.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 31.5, 34.5);
            }
            else if (this.type == "berulnMeat")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 506, 38, 21, 23, X - this.X + (1/2 * CCC.width) - (1/2 * 31.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 34.5), 31.5, 34.5);
            }
            else if (this.type == "bigBerulnPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 465, 1, 51, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 117.3), Y - this.Y + (1/2 * CCC.height) - (1/2 * 69), 117.3, 69);
            }
            else if (this.type == "berulnPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 465, 1, 51, 30, X - this.X + (1/2 * CCC.width) - (1/2 * 102), Y - this.Y + (1/2 * CCC.height) - (1/2 * 60), 102, 60);
            }
            else if (this.type == "longbow")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 380, 593, 34, 34, X - this.X + (1/2 * CCC.width) - (1/2 * 51), Y - this.Y + (1/2 * CCC.height) - (1/2 * 51), 51, 51);
            }
            else if (this.type == "walrusLeatherArmour")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 734, 202, 52, 58, X - this.X + (1/2 * CCC.width) - (1/2 * 52), Y - this.Y + (1/2 * CCC.height) - (1/2 * 58), 72.8, 81.2);
            }
            else if (this.type == "balgurMercArmour")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 4, 105, 39, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70 * 1.5), 39 * 1.5, 70 * 1.5);
            }
            else if (this.type == "balgurCaptainArmour")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 97, 108, 39, 70, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 70 * 1.5), 39 * 1.5, 70 * 1.5);
            }
            else if (this.type == "rawWalrusFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 99, 4, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 26.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 26.5, 30);
            }
            else if (this.type == "aldrekiiBardiche")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 580, 253, 42, 137, X - this.X + (1/2 * CCC.width) - (1/2 * 42), Y - this.Y + (1/2 * CCC.height) - (1/2 * 137), 35.6, 109.6);
            }
            else if (this.type == "rawWalrusFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 99, 4, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 26.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 26.5, 30);
            }
            else if (this.type == "walrusMeat")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 257, 1, 17, 20, X - this.X + (1/2 * CCC.width) - (1/2 * 26.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 30), 26.5, 30);
            }
            else if (this.type == "walrusHide")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 287, 3, 45, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 112.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 55), 103.5, 50.6);
            }
            else if (this.type == "elderWalrusHide")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 287, 3, 45, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 157.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 77), 148.5, 72.6);
            }
            else if (this.type == "blubber")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 368, 9, 12, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 24), Y - this.Y + (1/2 * CCC.height) - (1/2 * 26), 24, 26);
            }
            else if (this.type == "walrusTusks")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 341, 10, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 42.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 32.5), 42.5, 32.5);
            }
            else if (this.type == "elderWalrusTusks")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 341, 10, 17, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 68), Y - this.Y + (1/2 * CCC.height) - (1/2 * 52), 68, 52);
            }
            else if (this.type == "mace")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 554, 10, 61, 36, X - this.X + (1/2 * CCC.width) - (1/2 * 61), Y - this.Y + (1/2 * CCC.height) - (1/2 * 36), 61, 36);
            }
            else if (this.type == "longSpikedMorningStar")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 151, 128, 39, 39, X - this.X + (1/2 * CCC.width) - (1/2 * 39 * 1.15), Y - this.Y + (1/2 * CCC.height) - (1/2 * 39 * 1.15), 39 * 1.15, 39 * 1.15);
            }
            else if (this.type == "longsword")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 75, 366, 17, 47, X - this.X + (1/2 * CCC.width) - (1/2 * 17), Y - this.Y + (1/2 * CCC.height) - (1/2 * 47), 17, 64);
            }
            else if (this.type == "freydicWarAxe")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 17, 115, 113, 104, X - this.X + (1/2 * CCC.width) - (1/2 * 113), Y - this.Y + (1/2 * CCC.height) - (1/2 * 104), 113, 104);
            }
            else if (this.type == "rawEtyrFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 43, 684, 16, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 16, 13);
            }
            else if (this.type == "etyrMeat")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 73, 684, 16, 13, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 13), 16, 13);
            }
            else if (this.type == "etyrHide")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 37, 720, 25, 18, X - this.X + (1/2 * CCC.width) - (1/2 * 25), Y - this.Y + (1/2 * CCC.height) - (1/2 * 18), 25, 18);
            }
            else if (this.type == "trollsBlood")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 385, 7, 11, 15, X - this.X + (1/2 * CCC.width) - (1/2 * 16.5), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22.5), 16.5, 22.5);
            }
            else if (this.type == "yaihefBerries")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 62, 508, 16, 16, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 16), 16, 16);
            }
        };

        this.drawInventoryItem = function(type, invX, invY)
        {
            this.invX = invX;
            this.invY = invY;
            this.type = type;

            if (this.type == "coins")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 405, 4, 16, 17, this.invX - (1/2 * 32), this.invY - (1/2 * 34), 32, 34);
            }
            else if (this.type == "neevFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 148, 67, 21, 17, this.invX - (1/2 * 21 * 1.25), this.invY - (1/2 * 17 * 1.25), 21 * 1.25, 17 * 1.25);
            }
            else if (this.type == "neevFur")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 176, 64, 35, 25, this.invX - (1/2 * 35 * 1.25), this.invY - (1/2 * 25 * 1.25), 35 * 1.25, 25 * 1.25);
            }
            else if (this.type == "ogardPerfume")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 50, 4, 15, 19, this.invX - (1/2 * 15), this.invY - (1/2 * 19), 15, 19);
            }
            else if (this.type == "driedTechiLeaf")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 35, 6, 11, 16, this.invX - (1/2 * 11), this.invY - (1/2 * 16), 11, 16);
            }
            else if (this.type == "ogard")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 36, 28, 15, 16, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 16 * 1.3), 15 * 1.3, 16 * 1.3);
            }
            else if (this.type == "groundOgard")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 37, 47, 16, 14, this.invX - (1/2 * 16), this.invY - (1/2 * 14), 16, 14);
            }
            else if (this.type == "ogardPollen")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 57, 50, 9, 9, this.invX - (1/2 * 9 * 1.3), this.invY - (1/2 * 9 * 1.3), 9 * 1.3, 9 * 1.3);
            }
            else if (this.type == "cloth")
            {
                LXX.beginPath();
                LXX.save();
                LXX.translate(this.invX, this.invY);
                LXX.rotate(5/8 * 2 * Math.PI);
                LXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 * 1.5), - (1/2 * 10 * 1.5), 29 * 1.5, 10 * 1.5);
                LXX.restore();
            }
            else if (this.type == "naapridFiber")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 85, 46, 10, 18, this.invX - (1/2 * 10 * 1.65), this.invY - (1/2 * 18 * 1.65), 10 * 1.65, 18 * 1.65);
            }
            else if (this.type == "tent")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 1, 1, 32, 32, this.invX - (1/2 * 32 * 1.5), this.invY - (1/2 * 32 * 1.5), 32 * 1.5, 32 * 1.5);
            }
            else if (this.type == "neculaisEar")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 71, 48, 9, 12, this.invX - (1/2 * 9 * 1.4), this.invY - (1/2 * 12 * 1.4), 9 * 1.4, 12 * 1.4);
            }
            else if (this.type == "berulnToothNecklace")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 96, 3, 14, 21, this.invX - (1/2 * 14 * 1.2), this.invY - (1/2 * 21 * 1.2), 14 * 1.2, 21 * 1.2);
            }
            else if (this.type == "techiLeaf")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 83, 147, 13, 15, this.invX - (1/2 * 13), this.invY - (1/2 * 15), 13, 15);
            }
            else if (this.type == "bucketOfPluttJuice" || this.type == "bucketOfHotPluttBerryCider" )
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 87, 66, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
            }
            else if (this.type == "pluttJuicePintGlass" || this.type == "pluttCiderPintGlass" )
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 1, 15, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
            }
            else if (this.type == "glassBottle")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 173, 32, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
            }
            else if (this.type == "glassBottleOfWater")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 149, 31, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
            }
            else if (this.type == "glassBottleOfPluttWine")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 45, 208, 12, 22, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 22 * 2), 12 * 2, 22 * 2);
            }
            else if (this.type == "pluttWine")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 45, 181, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
            }
            else if (this.type == "bushkaBerries")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 23, 125, 13, 12, this.invX - (1/2 * 13 * 1.15), this.invY - (1/2 * 12 * 1.15), 13 * 1.15, 12 * 1.5);
            }
            else if (this.type == "bushkaLeaves")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 3, 118, 14, 15, this.invX - (1/2 * 14 * 1.15), this.invY - (1/2 * 15 * 1.15), 14 * 1.15, 15 * 1.15);
            }
            else if (this.type == "beesWax")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 1, 2, 12, 13, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 13 * 1.4), 12 * 1.4, 13 * 1.4);
            }
            else if (this.type == "oilLantern" || this.type == "oilLantern4" || this.type == "oilLantern3" || this.type == "oilLantern2" || this.type == "oilLantern1" || this.type == "oilLanternEmpty")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 48, 1, 11, 27, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 27 * 1.2), 11 * 1.2, 27 * 1.2);
            }
            else if (this.type == "oilLamp" || this.type == "oilLamp2" || this.type == "oilLamp1" || this.type == "oilLampEmpty")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 14, 17, 12, 15, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 15 * 1.2), 12 * 1.2, 15 * 1.2);
            }
            else if (this.type == "jackOLantern" || this.type == "jackOLantern2" || this.type == "jackOLantern1" || this.type == "jackOLanternEmpty")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 82, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
            }
            else if (this.type == "pumpkin")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 64, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
            }
            else if (this.type == "roastedPumpkin")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 83, 23, 16, 18, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 18 * 1.2), 16 * 1.2, 18 * 1.2);
            }
            else if (this.type == "candle")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 14, 1, 11, 16, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 16 * 1.2), 11 * 1.2, 16 * 1.2);
            }
            else if (this.type == "candle2")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 25, 1, 12, 13, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 13 * 1.2), 12 * 1.2, 13 * 1.2);
            }
            else if (this.type == "candle1")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 35, 1, 12, 10, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 10 * 1.2), 12 * 1.2, 10 * 1.2);
            }
            else if (this.type == "pluttMoffling")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 1, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
            }
            else if (this.type == "akerMoffling")
            {
                LXX.beginPath();
                LXX.drawImage(candlewic, 22, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
            }
            else if (this.type == "rawMofflingFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
            }
            else if (this.type == "mofflingMeat")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.8, 14 * 0.8);
            }
            else if (this.type == "rawMofuFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
            }
            else if (this.type == "mofuMeat")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
            }
            else if (this.type == "rawLargeMofuFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
            }
            else if (this.type == "largeMofuMeat")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
            }
            else if (this.type == "fattyMofuLiver")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 114, 67, 9, 9, this.invX - (1/2 * 9 * 2), this.invY - (1/2 * 9 * 2), 9 * 2, 9 * 2);
            }
            else if (this.type == "mofuFeather")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 139, 54, 11, 13, this.invX - (1/2 * 11), this.invY - (1/2 * 13), 11, 13);
            }
            else if (this.type == "mofuFoot")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 122, 56, 11, 7, this.invX - (1/2 * 11), this.invY - (1/2 * 7), 11, 7);
            }
            else if (this.type == "mofuEgg")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 109, 54, 8, 11, this.invX - (1/2 * 8), this.invY - (1/2 * 11), 8, 11);
            }
            else if (this.type == "cookedMofuEgg")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 96, 54, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
            }
            else if (this.type == "fermentedMofuEgg")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 96, 45, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
            }
            else if (this.type == "rawGrushFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 1208, 27, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
            }
            else if (this.type == "grushMeat")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 1207, 43, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
            }
            else if (this.type == "grushFur")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 1204, 7, 18, 16, this.invX - (1/2 * 18), this.invY - (1/2 * 16), 18, 16);
            }
            else if (this.type == "grushFurClothing")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 1249, 69, 31, 52, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 52 * 1.2), 31 * 1.2, 52 * 1.2);
            }
            else if (this.type == "iron")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1212, 561, 28, 18, this.invX - (1/2 * 28), this.invY - (1/2 * 18), 28, 18);
            }
            else if (this.type == "santhGrain")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2943, 205, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
            }
            else if (this.type == "santhFlour")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2977, 204, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
            }
            else if (this.type == "emptyBag")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 3016, 201, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
            }
            else if (this.type == "bagOfSanthFlour")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 3050, 200, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
            }
            else if (this.type == "kellishSanthDough")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17 * 2.6), this.invY - (1/2 * 14 * 2.6), 17 * 2.6, 14 * 2.6);
            }
            else if (this.type == "naapridButter")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17), this.invY - (1/2 * 14), 17, 14);
            }
            else if (this.type == "santhBread")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2970, 225, 23, 23, this.invX - (1/2 * 23), this.invY - (1/2 * 23), 23, 23);
            }
            else if (this.type == "butteredSanthBread")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2965, 250, 32, 26, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
            }
            else if (this.type == "healingSalve")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2943, 252, 11, 17, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 17 * 1.5), 11 * 1.5, 17 * 1.5);
            }
            else if (this.type == "carrot")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2864, 68, 18, 19, this.invX - (1/2 * 18), this.invY - (1/2 * 19), 18, 19);
            }
            else if (this.type == "suuliMelon")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2940, 67, 16, 22, this.invX - (1/2 * 16), this.invY - (1/2 * 22), 16, 22);
            }
            else if (this.type == "suuliMelonSlice")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2963, 68, 16, 22, this.invX - (1/2 * 14), this.invY - (1/2 * 20), 14, 20);
            }
            else if (this.type == "potato")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2770, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
            else if (this.type == "cookedPotato")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2782, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
            else if (this.type == "nechromanticDust")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 477, 922, 72, 66, this.invX - (1/2 * 72 * 0.35), this.invY - (1/2 * 66 * 0.35), 72 * 0.35, 66 * 0.35);
            }
            else if (this.type == "kellishClayPot")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3036, 1, 22, 19, this.invX - (1/2 * 22 * 1.7), this.invY - (1/2 * 19 * 1.7), 22 * 1.7, 19 * 1.7);
            }
            else if (this.type == "kellishClayPotOfNaapridMilk")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3017, 1, 20, 18, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 18 * 1.7), 20 * 1.7, 18 * 1.7);
            }
            else if (this.type == "kellishClayPotOfWater")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 359, 37, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
            }
            else if (this.type == "kellishClayPotOfMushroomStew")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 408, 25, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
            }
            else if (this.type == "rawViperFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 529, 64, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
            }
            else if (this.type == "viperMeat")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 543, 63, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
            }
            else if (this.type == "viperVenomGland")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 529, 78, 10, 7, this.invX - (1/2 * 10 * 1.3), this.invY - (1/2 * 7 * 1.3), 10 * 1.3, 7 * 1.3);
            }
            else if (this.type == "fermentedViperVenomGland")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 544, 77, 12, 9, this.invX - (1/2 * 12 * 1.3), this.invY - (1/2 * 9 * 1.3), 12 * 1.3, 9 * 1.3);
            }
            else if (this.type == "viperSnakeSkin")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 530, 52, 28, 10, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 10 * 1.3), 28 * 1.3, 10 * 1.3);
            }
            else if (this.type == "rasper")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 651, 45, 21, 45, this.invX - (1/2 * 21 * 1.3), this.invY - (1/2 * 45 * 1.3), 21 * 1.3, 45 * 1.3);
            }
            else if (this.type == "jvostranPlateArmour")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 350, 660, 66, 106, this.invX - (1/2 * 66 * 0.75) - 3, this.invY - (1/2 * 106 * 0.75), 66 * 0.75, 106 * 0.75);
            }
            else if (this.type == "waterPintGlass")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 205, 2, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
            }
            else if (this.type == "harstGrain")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 241, 45, 12, 13, this.invX - (1/2 * 12), this.invY - (1/2 * 13), 12, 13);
            }
            else if (this.type == "harstAle")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 247, 1, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
            }
            else if (this.type == "techiTea")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 19, 32, 17, 16, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 16 * 2), 17 * 2, 16 * 2);
            }
            else if (this.type == "pintGlass")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 148, 5, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
            }
            else if (this.type == "energilPotionI" || this.type == "energilPotionII" || this.type == "energilPotionIII" || this.type == "energilPotionIV" || this.type == "energilPotionV")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1700, 180, 12, 19, this.invX - (1/2 * 12), this.invY - (1/2 * 19), 12, 19);
            }
            else if (this.type == "potionGlass")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 419, 1, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
            }
            else if (this.type == "vialOfWater")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 406, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
            else if (this.type == "walrusLeatherWaterskin" || this.type == "walrusLeatherWaterskinOne" || this.type == "walrusLeatherWaterskinTwo" || this.type == "walrusLeatherWaterskinFull")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 79, 5, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
            }
            else if (this.type == "bucket")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 103, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
            }
            else if (this.type == "bucketOfWater")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 133, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
            }
            else if (this.type == "bucketOfTechiTea")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 3, 36, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
            }
            else if (this.type == "bucketOfNaapridMilk")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 118, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
            }
            else if (this.type == "halcifMushroom")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 33, 62, 13, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 15 * 2), 13 * 2, 15 * 2);
            }
            else if (this.type == "cyrinthilimMushroom")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 53, 27, 10, 14, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 14 * 2), 10 * 2, 14 * 2);
            }
            else if (this.type == "glinMushrooms")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 5, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
            }
            else if (this.type == "driedCyrinthilimMushroom")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 52, 45, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
            }
            else if (this.type == "boiledGlinMushrooms")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 56, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
            }
            else if (this.type == "tylunFlower")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2155, 64, 28, 33, this.invX - (1/2 * 28), this.invY - (1/2 * 33), 28, 33);
            }
            else if (this.type == "stomwikLeaf")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2171, 44, 21, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 16), 21, 16);
            }
            else if (this.type == "culprisLeaf")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2154, 160, 20, 13, this.invX - (1/2 * 20), this.invY - (1/2 * 13), 20, 13);
            }
            else if (this.type == "neprilneBerries")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2148, 516, 15, 16, this.invX - (1/2 * 15), this.invY - (1/2 * 16), 15, 16);
            }
            else if (this.type == "pluttBerries")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2111, 32, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
            }
            else if (this.type == "driedPluttBerries")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 104, 47, 17, 19, this.invX - (1/2 * 17), this.invY - (1/2 * 19), 17, 19);
            }
            else if (this.type == "akerBerries")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2170, 20, 22, 19, this.invX - (1/2 * 22), this.invY - (1/2 * 19), 22, 19);
            }
            else if (this.type == "kellishSawClub")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 645, 466, 17, 55, this.invX - (1/2 * 17), this.invY - (1/2 * 55), 17, 55);
            }
            else if (this.type == "kellishClaymore")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 600, 435, 22, 112, this.invX - (1/2 * 22 * 0.7), this.invY - (1/2 * 112 * 0.7), 22 * 0.7, 112 * 0.7);
            }
            else if (this.type == "gribPelt")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1095, 155, 31, 19, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 19 * 1.2), 31 * 1.2, 19 * 1.2);
            }
            else if (this.type == "rawGribFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1393, 196, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
            }
            else if (this.type == "gribMeat")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1371, 197, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
            }
            else if (this.type == "hammer")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 512, 514, 36, 49, this.invX - (1/2 * 36 / 1.3), this.invY - (1/2 * 49 / 1.3), 36 / 1.3, 49 / 1.3);
            }
            else if (this.type == "warHammer")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 535, 411, 40, 72, this.invX - (1/2 * 40 / 1.3), this.invY - (1/2 * 72 / 1.3), 40 / 1.3, 72 / 1.3);
            }
            else if (this.type == "iceClaymore")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1859, 36, 22, 27, this.invX - (1/2 * 22), this.invY - (1/2 * 27), 22, 27);
            }
            else if (this.type == "embers" || this.type == "fireballI" || this.type == "flyingColours" || this.type == "iceSpikes" || this.type == "frostWind" || this.type == "repel" || this.type == "lifeTap" || this.type == "drainingI" || this.type == "vivification" || this.type == "chasingLights")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1738, 4, 33, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 26), 33, 26);
            }
            else if (this.type == "narthwarpMouth")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30), this.invY - (1/2 * 18), 30 , 18);
            }
            else if (this.type == "lrgNarthwarpMouth")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30 * 2), this.invY - (1/2 * 18 * 2), 30 * 2, 18 * 2);
            }
            else if (this.type == "fermentedNarthwarpMouth")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1844, 64, 37, 32, this.invX - (1/2 * 37), this.invY - (1/2 * 32), 37, 32);
            }
            else if (this.type == "rawBearFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 731, 9, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
            }
            else if (this.type == "bearMeat")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 731, 27, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
            }
            else if (this.type == "rawBearTongue")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 757, 12, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
            }
            else if (this.type == "bearTongue")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 757, 29, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
            }
            else if (this.type == "smlBlackBearPelt")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53), this.invY - (1/2 * 30), 53, 30);
            }
            else if (this.type == "medBlackBearPelt")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.25), this.invY - (1/2 * 30 * 1.25), 53 * 1.25, 30 * 1.25);
            }
            else if (this.type == "lrgBlackBearPelt")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.65), this.invY - (1/2 * 30 * 1.65), 53 * 1.65, 30 * 1.65);
            }
            else if (this.type == "vardanianHeavyCleaver")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 779, 1, 17, 68, this.invX - (1/2 * 17), this.invY - (1/2 * 68), 17, 68);
            }
            else if (this.type == "shehidOozeSml")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21), this.invY - (1/2 * 22), 21, 22);
            }
            else if (this.type == "shehidOozeLrg")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21 * 2), this.invY - (1/2 * 22 * 2), 21 * 2, 22 * 2);
            }
            else if (this.type == "shehidShellSml")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
            }
            else if (this.type == "shehidShellLrg")
            {
                LXX.beginPath();
                LXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25 * 2), this.invY - (1/2 * 24 * 2), 25 * 2, 24 * 2);
            }
            else if (this.type == "timberAxe")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 294, 330, 29, 45, this.invX - (1/2 * 29 * 1.4), this.invY - (1/2 * 45 * 1.4), 29 * 1.4, 45 * 1.4);
            }
            else if (this.type == "curvedDagger")
            {
                LXX.beginPath();
                LXX.save();
                LXX.translate(this.invX, this.invY);
                LXX.rotate(Math.PI);
                LXX.drawImage(verse, 3538, 605, 10, 30, 0 - (1/2 * 10), 0 - (1/2 * 30), 10, 30);
                LXX.restore();
            }
            else if (this.type == "dualCurvedDaggers")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3552, 605, 16, 30, this.invX - (1/2 * 16), this.invY - (1/2 * 30), 16, 30);
            }
            else if (this.type == "nirineseSpear")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 8, 1511, 13, 79, this.invX - (1/2 * 13), this.invY - (1/2 * 79), 13, 79);
            }
            else if (this.type == "crossbow")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3169, 118, 36, 34, this.invX - (1/2 * 37.8), this.invY - (1/2 * 35.7), 37.8, 35.7);
            }
            else if (this.type == "steelBolt")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3152, 1, 19, 21, this.invX - (1/2 * 22.8), this.invY - (1/2 * 25.2), 22.8, 25.2);
            }
            else if (this.type == "varnFurDress")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 51, 387, 39, 52, this.invX - (1/2 * 60.45  * 0.8), this.invY - (1/2 * 85.6 * 0.8), 62.4 * 0.8, 83.2 * 0.8);
            }
            else if (this.type == "varnFurCloak")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 46, 439, 50, 61, this.invX - (1/2 * 77.5  * 0.8), this.invY - (1/2 * 92.55 * 0.7), 77.5 * 0.8, 92.55 * 0.7);
            }
            else if (this.type == "varnFurClothing")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 91, 380, 50, 61, this.invX - (1/2 * 80  * 0.8), this.invY - (1/2 * 95.6 * 0.7), 80 * 0.8, 95.6 * 0.7);
            }
            else if (this.type == "frichFurMittens")
            {
                LXX.beginPath();
                LXX.drawImage(freeverse, 386, 21, 19, 11, this.invX - (1/2 * 19 * 1.4), this.invY - (1/2 * 11 * 1.4), 19 * 1.4, 11 * 1.4);
            }
            else if (this.type == "frichFurClothing")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 258, 316, 37, 60, this.invX - (1/2 * 44.4), this.invY - (1/2 * 72), 44.4, 72);
            }
            else if (this.type == "hetmerArmour")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 150, 309, 52, 66, this.invX - (1/2 * 62.4), this.invY - (1/2 * 79.2), 62.4, 79.2);
            }
            else if (this.type == "vardanianBattleAxe")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 374, 354, 29, 57, this.invX - (1/2 * 37.7), this.invY - (1/2 * 74.1), 37.7, 74.1);
            }
            else if (this.type == "rawOlkrinFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3143, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "olkrinMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "olkrinSkull")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
            }
            else if (this.type == "olkrinHorn")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3087, 287, 26, 34, this.invX - (1/2 * 52), this.invY - (1/2 * 68), 52, 68);
            }
            else if (this.type == "goliathOlkrinSkull")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
            }
            else if (this.type == "olkrinArm")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3175, 287, 67, 36, this.invX - (1/2 * 73.7), this.invY - (1/2 * 53.4), 73.7, 53.4);
            }
            else if (this.type == "olkrinMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "vardanianCleaver")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 250, 359, 14, 54, this.invX - (1/2 * 17.5), this.invY - (1/2 * 67.5), 17.5, 67.5);
            }
            else if (this.type == "rawVarnFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3099, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
            }
            else if (this.type == "varnMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3115, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
            }
            else if (this.type == "varnPelt")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2994, 291, 27, 15, this.invX - (1/2 * 40.5), this.invY - (1/2 * 22.5), 40.5, 22.5);
            }
            else if (this.type == "fireStarter")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2922, 136, 14, 11, this.invX - (1/2 * 21), this.invY - (1/2 * 16.5), 21, 16.5);
            }
            else if (this.type == "wood")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
                LXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
            }
            else if (this.type == "katana")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 168, 364, 16, 55, this.invX - (1/2 * 22.5), this.invY - (1/2 * 70), 22.5, 75.5);
            }
            else if (this.type == "winterWolfOutfit")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3126, 156, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
            }
            else if (this.type == "winterWolfClothing")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3223, 157, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
            }
            else if (this.type == "freydicRoyalOutfit")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2959, 151, 41, 60, this.invX - (1/2 * 52.4), this.invY - (1/2 * 78), 52.4, 78);
            }
            else if (this.type == "naapridLeatherArmour")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3171, 59, 34, 57, this.invX - (1/2 * 44.2), this.invY - (1/2 * 71.1), 44.2, 71.1);
            }
            else if (this.type == "freydicRoyalDress")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3049, 148, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
            }
            else if (this.type == "winterWolfDress")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3012, 147, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
            }
            else if (this.type == "rawYoungNaapridFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3133, 10, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
            }
            else if (this.type == "youngNaapridMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3133, 1, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
            }
            else if (this.type == "rawNaapridFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2970, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
            }
            else if (this.type == "naapridMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2995, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
            }
            else if (this.type == "naapridPelt")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2924, 1, 26, 16, this.invX - (1/2 * 65), this.invY - (1/2 * 40), 65, 40);
            }
            else if (this.type == "naapridHorn")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2951, 1, 15, 14, this.invX - (1/2 * 31.5), this.invY - (1/2 * 29.4), 31.5, 29.4);
            }
            else if (this.type == "thenganSwordAndShield")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 3515, 140, 48, 40, this.invX - (1/2 * 61.2), this.invY - (1/2 * 48), 61.2, 48);
            }
            else if (this.type == "rawTrollsBlood")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 452, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
            }
            else if (this.type == "jarOfOil")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 97, 3, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 21.5), 15, 21.5);
            }
            else if (this.type == "glassJar")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 465, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
            }
            else if (this.type == "chainArmour")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 38, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
            }
            else if (this.type == "blackChainArmour")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 80, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
            }
            else if (this.type == "freydicGreatSword")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 126, 302, 16, 70, this.invX - (1/2 * 16), this.invY - (1/2 * 70), 16, 70);
            }
            else if (this.type == "hugeBogTrollSkull")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 67.5), this.invY - (1/2 * 54), 67.5, 54);
            }
            else if (this.type == "bogTrollSkull")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 45), this.invY - (1/2 * 36), 49.5, 39.6);
            }
            else if (this.type == "babyBogTrollSkull")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 22.5), this.invY - (1/2 * 18), 22.5, 18);
            }
            else if (this.type == "trollFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2875, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
            }
            else if (this.type == "trollMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2900, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
            }
            else if (this.type == "aldrekiiArrow")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2832, 3, 41, 12, this.invX - (1/2 * 32), this.invY - (1/2 * 12), 32, 12);
            }
            else if (this.type == "rawWolfLiver")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2769, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
            }
            else if (this.type == "wolfLiver")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2782, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
            }
            else if (this.type == "winterWolfMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2812, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
            }
            else if (this.type == "rawWinterWolfFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2794, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
            }
            else if (this.type == "winterWolfPelt")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2737, 2, 26, 16, this.invX - (1/2 * 34.8), this.invY - (1/2 * 19.2), 34.8, 19.2);
            }
            else if (this.type == "massiveWinterWolfPelt")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 2737, 2, 29, 16, this.invX - (1/2 * 58), this.invY - (1/2 * 32), 58, 32);
            }
            else if (this.type == "energyPotionI")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 38, 267, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
            }
            else if (this.type == "speedPotionI")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 86, 134, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
            }
            else if (this.type == "cleansingPotion")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 35, 134, 11, 19, this.invX - (1/2 * 11), this.invY - (1/2 * 19), 11, 19);
            }
            else if (this.type == "freydicSword")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2089, 2, 13, 46, this.invX - (1/2 * 16.25), this.invY - (1/2 * 57.5), 16.25, 57.5);
            }
            else if (this.type == "pickaxe")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 103, 233, 22, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 39), 33, 39);
            }
            else if (this.type == "aldrekiiBlade")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2057, 4, 20, 45, this.invX - (1/2 * 24), this.invY - (1/2 * 54), 24, 54);
            }
            else if (this.type == "flail")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1995, 1, 37, 33, this.invX - (1/2 * 37), this.invY - (1/2 * 33), 37, 33);
            }
            else if (this.type == "torperVenomSac")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 40, 226, 17, 16, this.invX - (1/2 * 17), this.invY - (1/2 * 16), 17, 16);
            }
            else if (this.type == "torperFuzz")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1867, 9, 23, 20, this.invX - (1/2 * 23), this.invY - (1/2 * 20), 23, 20);
            }
            else if (this.type == "rawTorperFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1894, 3, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
            }
            else if (this.type == "torperMeat")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1895, 16, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
            }
            else if (this.type == "gulfreyShellArmour")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 1, 157, 36, 63, this.invX - (1/2 * 36) + 2, this.invY - (1/2 * 63), 28.4, 59.6);
            }
            else if (this.type == "frichPelt")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 1832, 10, 31, 18, this.invX - (1/2 * 31), this.invY - (1/2 * 18), 31, 18);
            }
            else if (this.type == "rawFrichFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 65, 226, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
            }
            else if (this.type == "frichMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 79, 227, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
            }
            else if (this.type == "vardanianAxe")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 53, 158, 37, 22, this.invX - (1/2 * 33.3), this.invY - (1/2 * 19.8), 33.3, 19.8);
            }
            else if (this.type == "vardanianAxeDual")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 48, 187, 31, 35, this.invX - (1/2 * 27.9), this.invY - (1/2 * 31.5), 27.9, 31.5);
            }
            else if (this.type == "freydicSpear")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 4, 227, 20, 75, this.invX - (1/2 * 17.5), this.invY - (1/2 * 56.75), 17.5, 56.75);
            }
            else if (this.type == "gulfreyShell")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 48, 41, 31, 23, this.invX - (1/2 * 31), this.invY - (1/2 * 23), 31, 23);
            }
            else if (this.type == "gulfreyMandibles")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 2, 92, 33, 33, this.invX - (1/2 * 26.6), this.invY - (1/2 * 26.6), 26.6, 26.6);
            }
            else if (this.type == "rawGulfreyFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 37, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
            }
            else if (this.type == "gulfreyMeat")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 66, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
            }
            else if (this.type == "vomit")
            {
                LXX.beginPath();
                LXX.drawImage(oldverse, 55, 135, 24, 21, this.invX - (1/2 * 24), this.invY - (1/2 * 21), 24, 21);
            }
            else if (this.type == "gojiiBerries")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 615, 3, 19, 15, this.invX - (1/2 * 38), this.invY - (1/2 * 30), 38, 30);
            }
            else if (this.type == "nirineseSabre")
            {
                LXX.beginPath();
                LXX.drawImage(verse, 7, 7, 26, 80, this.invX - (1/2 * 19.5), this.invY - (1/2 * 60), 19.5, 60);
            }
            else if (this.type == "freezingArrow")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 66, 73, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "fireArrow")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 66, 80, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "lifeLeachArrow")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 65, 88, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "oiledArrow")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 67, 57, 19, 7, this.invX - (1/2 * 38), this.invY - (1/2 * 14), 38, 14);
            }
            else if (this.type == "shehidToxinArrow")
            {
                LXX.beginPath();
                LXX.drawImage(mofu, 66, 21, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "arrow")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 432, 554, 20, 8, this.invX - (1/2 * 40), this.invY - (1/2 * 16), 40, 16);
            }
            else if (this.type == "ogoFruit")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 426, 4, 12, 15, this.invX - (1/2 * 24), this.invY - (1/2 * 30), 24, 30);
            }
            else if (this.type == "blueBlade")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 8, 531, 57, 63, this.invX - (1/2 * 51.3), this.invY - (1/2 * 56.7), 51.3, 56.7);
            }
            else if (this.type == "berulnSkull")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 446, 3, 15, 20, this.invX - (1/2 * 22.5), this.invY - (1/2 * 30), 22.5, 30);
            }
            else if (this.type == "rawBerulnFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 526, 6, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
            }
            else if (this.type == "berulnMeat")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 506, 38, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
            }
            else if (this.type == "bigBerulnPelt")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 76.5), this.invY - (1/2 * 45), 76.5, 45);
            }
            else if (this.type == "berulnPelt")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 66.3), this.invY - (1/2 * 39), 66.3, 39);
            }
            else if (this.type == "longbow")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 380, 593, 34, 34, this.invX - (1/2 * 51), this.invY - (1/2 * 51), 51, 51);
            }
            else if (this.type == "walrusLeatherArmour")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 734, 202, 52, 58, this.invX - (1/2 * 52), this.invY - (1/2 * 58), 52, 58);
            }
            else if (this.type == "balgurMercArmour")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 4, 105, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
            }
            else if (this.type == "balgurCaptainArmour")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 97, 108, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
            }
            else if (this.type == "rawWalrusFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 99, 4, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
            }
            else if (this.type == "aldrekiiBardiche")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 580, 253, 42, 137, this.invX - (1/2 * 21), this.invY - (1/2 * 68.5), 21, 68.5);
            }
            else if (this.type == "walrusMeat")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 257, 1, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
            }
            else if (this.type == "walrusHide")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 45), this.invY - (1/2 * 22), 45, 22);
            }
            else if (this.type == "elderWalrusHide")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 90) + 7, this.invY - (1/2 * 44) + 4, 77.5, 33);
            }
            else if (this.type == "blubber")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 368, 9, 12, 13, this.invX - (1/2 * 24), this.invY - (1/2 * 26), 24, 26);
            }
            else if (this.type == "walrusTusks")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 42.5), this.invY - (1/2 * 32.5), 42.5, 32.5);
            }
            else if (this.type == "elderWalrusTusks")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 68), this.invY - (1/2 * 52), 68, 52);
            }
            else if (this.type == "mace")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 554, 10, 61, 36, this.invX - (1/2 * 61), this.invY - (1/2 * 38), 61, 36);
            }
            else if (this.type == "longSpikedMorningStar")
            {
                LXX.beginPath();
                LXX.drawImage(poly, 151, 128, 39, 39, this.invX - (1/2 * 39 * 1.15), this.invY - (1/2 * 39 * 1.15), 39 * 1.15, 39 * 1.15);
            }
            else if (this.type == "longsword")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 75, 366, 17, 47, this.invX - (1/2 * 25.5), this.invY - (1/2 * 70.5) - 3, 25.5, 70.5);
            }
            else if (this.type == "rawEtyrFlesh")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 43, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
            }
            else if (this.type == "freydicWarAxe")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 17, 115, 113, 104, this.invX - (1/2 * 90.4), this.invY - (1/2 * 83.2) + 4, 90.4, 83.2);
            }
            else if (this.type == "etyrMeat")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 73, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
            }
            else if (this.type == "etyrHide")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 37, 720, 25, 18, this.invX - (1/2 * 50), this.invY - (1/2 * 36), 50, 36);
            }
            else if (this.type == "trollsBlood")
            {
                LXX.beginPath();
                LXX.drawImage(polyPNG, 385, 7, 11, 15, this.invX - (1/2 * 16.5), this.invY - (1/2 * 22.5), 16.5, 22.5);
            }
            else if (this.type == "yaihefBerries")
            {
                LXX.beginPath();
                LXX.drawImage(theCrack, 62, 508, 16, 16, this.invX - (1/2 * 32), this.invY - (1/2 * 32), 32, 32);
            }
        };

        this.drawShopCraftItem = function(type, invX, invY)
        {
            this.invX = invX;
            this.invY = invY;
            this.type = type;

            if (this.type == "coins")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 405, 4, 16, 17, this.invX - (1/2 * 32), this.invY - (1/2 * 34), 32, 34);
            }
            else if (this.type == "neevFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 148, 67, 21, 17, this.invX - (1/2 * 21 * 1.25), this.invY - (1/2 * 17 * 1.25), 21 * 1.25, 17 * 1.25);
            }
            else if (this.type == "neevFur")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 176, 64, 35, 25, this.invX - (1/2 * 35 * 1.25), this.invY - (1/2 * 25 * 1.25), 35 * 1.25, 25 * 1.25);
            }
            else if (this.type == "ogardPerfume")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 50, 4, 15, 19, this.invX - (1/2 * 15), this.invY - (1/2 * 19), 15, 19);
            }
            else if (this.type == "driedTechiLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 35, 6, 11, 16, this.invX - (1/2 * 11), this.invY - (1/2 * 16), 11, 16);
            }
            else if (this.type == "ogard")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 36, 28, 15, 16, this.invX - (1/2 * 15 * 1.3), this.invY - (1/2 * 16 * 1.3), 15 * 1.3, 16 * 1.3);
            }
            else if (this.type == "groundOgard")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 37, 47, 16, 14, this.invX - (1/2 * 16), this.invY - (1/2 * 14), 16, 14);
            }
            else if (this.type == "ogardPollen")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 57, 50, 9, 9, this.invX - (1/2 * 9 * 1.3), this.invY - (1/2 * 9 * 1.3), 9 * 1.3, 9 * 1.3);
            }
            else if (this.type == "cloth")
            {
                XXX.beginPath();
                XXX.save();
                XXX.translate(this.invX, this.invY);
                XXX.rotate(5/8 * 2 * Math.PI);
                XXX.drawImage(verse, 3955, 309, 29, 10,  - (1/2 * 29 * 1.5), - (1/2 * 10 * 1.5), 29 * 1.5, 10 * 1.5);
                XXX.restore();
            }
            else if (this.type == "naapridFiber")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 85, 46, 10, 18, this.invX - (1/2 * 10 * 1.65), this.invY - (1/2 * 18 * 1.65), 10 * 1.65, 18 * 1.65);
            }
            else if (this.type == "tent")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 1, 1, 32, 32, this.invX - (1/2 * 32 * 1.5), this.invY - (1/2 * 32 * 1.5), 32 * 1.5, 32 * 1.5);
            }
            else if (this.type == "neculaisEar")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 71, 48, 9, 12, this.invX - (1/2 * 9 * 1.4), this.invY - (1/2 * 12 * 1.4), 9 * 1.4, 12 * 1.4);
            }
            else if (this.type == "berulnToothNecklace")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 96, 3, 14, 21, this.invX - (1/2 * 14 * 1.2), this.invY - (1/2 * 21 * 1.2), 14 * 1.2, 21 * 1.2);
            }
            else if (this.type == "techiLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 83, 147, 13, 15, this.invX - (1/2 * 13), this.invY - (1/2 * 15), 13, 15);
            }
            else if (this.type == "bucketOfPluttJuice" || this.type == "bucketOfHotPluttBerryCider" )
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 87, 66, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
            }
            else if (this.type == "pluttJuicePintGlass" || this.type == "pluttCiderPintGlass" )
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 1, 15, 12, 12, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 12 * 2), 12 * 2, 12 * 2);
            }
            else if (this.type == "glassBottle")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 173, 32, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
            }
            else if (this.type == "glassBottleOfWater")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 149, 31, 10, 20, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 20 * 2), 10 * 2, 20 * 2);
            }
            else if (this.type == "glassBottleOfPluttWine")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 45, 208, 12, 22, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 22 * 2), 12 * 2, 22 * 2);
            }
            else if (this.type == "pluttWine")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 45, 181, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
            }
            else if (this.type == "bushkaBerries")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 23, 125, 13, 12, this.invX - (1/2 * 13 * 1.15), this.invY - (1/2 * 12 * 1.15), 13 * 1.15, 12 * 1.5);
            }
            else if (this.type == "bushkaLeaves")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 3, 118, 14, 15, this.invX - (1/2 * 14 * 1.15), this.invY - (1/2 * 15 * 1.15), 14 * 1.15, 15 * 1.15);
            }
            else if (this.type == "beesWax")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 1, 2, 12, 13, this.invX - (1/2 * 12 * 1.4), this.invY - (1/2 * 13 * 1.4), 12 * 1.4, 13 * 1.4);
            }
            else if (this.type == "oilLantern" || this.type == "oilLantern4" || this.type == "oilLantern3" || this.type == "oilLantern2" || this.type == "oilLantern1" || this.type == "oilLanternEmpty")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 48, 1, 11, 27, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 27 * 1.2), 11 * 1.2, 27 * 1.2);
            }
            else if (this.type == "oilLamp" || this.type == "oilLamp2" || this.type == "oilLamp1" || this.type == "oilLampEmpty")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 14, 17, 12, 15, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 15 * 1.2), 12 * 1.2, 15 * 1.2);
            }
            else if (this.type == "jackOLantern" || this.type == "jackOLantern2" || this.type == "jackOLantern1" || this.type == "jackOLanternEmpty")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 82, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
            }
            else if (this.type == "pumpkin")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 64, 2, 18, 19, this.invX - (1/2 * 18 * 1.2), this.invY - (1/2 * 19 * 1.2), 18 * 1.2, 19 * 1.2);
            }
            else if (this.type == "roastedPumpkin")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 83, 23, 16, 18, this.invX - (1/2 * 16 * 1.2), this.invY - (1/2 * 18 * 1.2), 16 * 1.2, 18 * 1.2);
            }
            else if (this.type == "candle")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 14, 1, 11, 16, this.invX - (1/2 * 11 * 1.2), this.invY - (1/2 * 16 * 1.2), 11 * 1.2, 16 * 1.2);
            }
            else if (this.type == "candle2")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 25, 1, 12, 13, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 13 * 1.2), 12 * 1.2, 13 * 1.2);
            }
            else if (this.type == "candle1")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 35, 1, 12, 10, this.invX - (1/2 * 12 * 1.2), this.invY - (1/2 * 10 * 1.2), 12 * 1.2, 10 * 1.2);
            }
            else if (this.type == "pluttMoffling")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 1, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
            }
            else if (this.type == "akerMoffling")
            {
                XXX.beginPath();
                XXX.drawImage(candlewic, 22, 211, 18, 15, this.invX - (1/2 * 18 * 0.8), this.invY - (1/2 * 15 * 0.8), 18 * 0.8, 15 * 0.8);
            }
            else if (this.type == "rawMofflingFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.5, 14 * 0.8);
            }
            else if (this.type == "mofflingMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 0.8), this.invY - (1/2 * 14 * 0.8), 17 * 0.5, 14 * 0.8);
            }
            else if (this.type == "rawMofuFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 1.2), this.invY - (1/2 * 14 * 1.2), 17 * 1.2, 14 * 1.2);
            }
            else if (this.type == "mofuMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17), this.invY - (1/2 * 14), 17, 14);
            }
            else if (this.type == "rawLargeMofuFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 86, 110, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
            }
            else if (this.type == "largeMofuMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 104, 111, 17, 14, this.invX - (1/2 * 17 * 2.3), this.invY - (1/2 * 14 * 2.3), 17 * 2.3, 14 * 2.3);
            }
            else if (this.type == "fattyMofuLiver")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 114, 67, 9, 9, this.invX - (1/2 * 9 * 2), this.invY - (1/2 * 9 * 2), 9 * 2, 9 * 2);
            }
            else if (this.type == "mofuFeather")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 139, 54, 11, 13, this.invX - (1/2 * 11), this.invY - (1/2 * 13), 11, 13);
            }
            else if (this.type == "mofuFoot")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 122, 56, 11, 7, this.invX - (1/2 * 11), this.invY - (1/2 * 7), 11, 7);
            }
            else if (this.type == "mofuEgg")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 109, 54, 8, 11, this.invX - (1/2 * 8), this.invY - (1/2 * 11), 8, 11);
            }
            else if (this.type == "cookedMofuEgg")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 96, 54, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
            }
            else if (this.type == "fermentedMofuEgg")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 96, 45, 11, 10, this.invX - (1/2 * 11), this.invY - (1/2 * 10), 11, 10);
            }
            else if (this.type == "rawGrushFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1208, 27, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
            }
            else if (this.type == "grushMeat")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1207, 43, 14, 16, this.invX - (1/2 * 14), this.invY - (1/2 * 16), 14, 16);
            }
            else if (this.type == "grushFur")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1204, 7, 18, 16, this.invX - (1/2 * 18), this.invY - (1/2 * 16), 18, 16);
            }
            else if (this.type == "grushFurClothing")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 1249, 69, 31, 52, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 52 * 1.2), 31 * 1.2, 52 * 1.2);
            }
            else if (this.type == "iron")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1212, 561, 28, 18, this.invX - (1/2 * 28), this.invY - (1/2 * 18), 28, 18);
            }
            else if (this.type == "santhGrain")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2943, 205, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
            }
            else if (this.type == "santhFlour")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2977, 204, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
            }
            else if (this.type == "emptyBag")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 3016, 201, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
            }
            else if (this.type == "bagOfSanthFlour")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 3050, 200, 22, 28, this.invX - (1/2 * 22), this.invY - (1/2 * 28), 22, 28);
            }
            else if (this.type == "kellishSanthDough")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17 * 2.6), this.invY - (1/2 * 14 * 2.6), 17 * 2.6, 14 * 2.6);
            }
            else if (this.type == "naapridButter")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2940, 230, 17, 14, this.invX - (1/2 * 17), this.invY - (1/2 * 14), 17, 14);
            }
            else if (this.type == "santhBread")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2970, 225, 23, 23, this.invX - (1/2 * 23), this.invY - (1/2 * 23), 23, 23);
            }
            else if (this.type == "butteredSanthBread")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2965, 250, 32, 26, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
            }
            else if (this.type == "healingSalve")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2943, 252, 11, 17, this.invX - (1/2 * 11 * 1.5), this.invY - (1/2 * 17 * 1.5), 11 * 1.5, 17 * 1.5);
            }
            else if (this.type == "carrot")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2864, 68, 18, 19, this.invX - (1/2 * 18), this.invY - (1/2 * 19), 18, 19);
            }
            else if (this.type == "suuliMelon")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2940, 67, 16, 22, this.invX - (1/2 * 16), this.invY - (1/2 * 22), 16, 22);
            }
            else if (this.type == "suuliMelonSlice")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2963, 68, 16, 22, this.invX - (1/2 * 14), this.invY - (1/2 * 20), 14, 20);
            }
            else if (this.type == "potato")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2770, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
            else if (this.type == "cookedPotato")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2782, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
            else if (this.type == "nechromanticDust")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 477, 922, 72, 66, this.invX - (1/2 * 72 * 0.35), this.invY - (1/2 * 66 * 0.35), 72 * 0.35, 66 * 0.35);
            }
            else if (this.type == "kellishClayPot")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3036, 1, 22, 19, this.invX - (1/2 * 22 * 1.7), this.invY - (1/2 * 19 * 1.7), 22 * 1.7, 19 * 1.7);
            }
            else if (this.type == "kellishClayPotOfNaapridMilk")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3017, 1, 20, 18, this.invX - (1/2 * 20 * 1.7), this.invY - (1/2 * 18 * 1.7), 20 * 1.7, 18 * 1.7);
            }
            else if (this.type == "kellishClayPotOfWater")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 359, 37, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
            }
            else if (this.type == "kellishClayPotOfMushroomStew")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 408, 25, 18, 20, this.invX - (1/2 * 18 * 1.7), this.invY - (1/2 * 20 * 1.7), 18 * 1.7, 20 * 1.7);
            }
            else if (this.type == "rawViperFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 529, 64, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
            }
            else if (this.type == "viperMeat")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 543, 63, 13, 12, this.invX - (1/2 * 13 * 1.3), this.invY - (1/2 * 12 * 1.3), 13 * 1.3, 12 * 1.3);
            }
            else if (this.type == "viperVenomGland")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 529, 78, 10, 7, this.invX - (1/2 * 10 * 1.3), this.invY - (1/2 * 7 * 1.3), 10 * 1.3, 7 * 1.3);
            }
            else if (this.type == "fermentedViperVenomGland")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 544, 77, 12, 9, this.invX - (1/2 * 12 * 1.3), this.invY - (1/2 * 9 * 1.3), 12 * 1.3, 9 * 1.3);
            }
            else if (this.type == "viperSnakeSkin")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 530, 52, 28, 10, this.invX - (1/2 * 28 * 1.3), this.invY - (1/2 * 10 * 1.3), 28 * 1.3, 10 * 1.3);
            }
            else if (this.type == "rasper")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 651, 45, 21, 45, this.invX - (1/2 * 21 * 1.3), this.invY - (1/2 * 45 * 1.3), 21 * 1.3, 45 * 1.3);
            }
            else if (this.type == "jvostranPlateArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 350, 660, 66, 106, this.invX - (1/2 * 66 * 0.75) - 3, this.invY - (1/2 * 106 * 0.75), 66 * 0.75, 106 * 0.75);
            }
            else if (this.type == "waterPintGlass")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 205, 2, 11, 11, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 11 * 2), 11 * 2, 11 * 2);
            }
            else if (this.type == "harstGrain")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 241, 45, 12, 13, this.invX - (1/2 * 12), this.invY - (1/2 * 13), 12, 13);
            }
            else if (this.type == "harstAle")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 247, 1, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
            }
            else if (this.type == "techiTea")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 19, 32, 17, 16, this.invX - (1/2 * 17 * 2), this.invY - (1/2 * 16 * 2), 17 * 2, 16 * 2);
            }
            else if (this.type == "pintGlass")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 148, 5, 11, 12, this.invX - (1/2 * 11 * 2), this.invY - (1/2 * 12 * 2), 11 * 2, 12 * 2);
            }
            else if (this.type == "energilPotionI" || this.type == "energilPotionII" || this.type == "energilPotionIII" || this.type == "energilPotionIV" || this.type == "energilPotionV")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1700, 180, 12, 19, this.invX - (1/2 * 12), this.invY - (1/2 * 19), 12, 19);
            }
            else if (this.type == "potionGlass")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 419, 1, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
            }
            else if (this.type == "vialOfWater")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 406, 1, 10, 16, this.invX - (1/2 * 10), this.invY - (1/2 * 16), 10, 16);
            }
            else if (this.type == "walrusLeatherWaterskin" || this.type == "walrusLeatherWaterskinOne" || this.type == "walrusLeatherWaterskinTwo" || this.type == "walrusLeatherWaterskinFull")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 79, 5, 19, 13, this.invX - (1/2 * 19 * 1.5), this.invY - (1/2 * 13 * 1.5), 19 * 1.5, 13 * 1.5);
            }
            else if (this.type == "bucket")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 103, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
            }
            else if (this.type == "bucketOfWater")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 133, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
            }
            else if (this.type == "bucketOfTechiTea")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 3, 36, 13, 20, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 20 * 2), 13 * 2, 20 * 2);
            }
            else if (this.type == "bucketOfNaapridMilk")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 118, 1, 14, 21, this.invX - (1/2 * 14 * 2), this.invY - (1/2 * 21 * 2), 14 * 2, 21 * 2);
            }
            else if (this.type == "halcifMushroom")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 33, 62, 13, 15, this.invX - (1/2 * 13 * 2), this.invY - (1/2 * 15 * 2), 13 * 2, 15 * 2);
            }
            else if (this.type == "cyrinthilimMushroom")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 53, 27, 10, 14, this.invX - (1/2 * 10 * 2), this.invY - (1/2 * 14 * 2), 10 * 2, 14 * 2);
            }
            else if (this.type == "glinMushrooms")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 5, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
            }
            else if (this.type == "driedCyrinthilimMushroom")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 52, 45, 12, 11, this.invX - (1/2 * 12 * 2), this.invY - (1/2 * 11 * 2), 12 * 2, 11 * 2);
            }
            else if (this.type == "boiledGlinMushrooms")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 56, 1, 18, 18, this.invX - (1/2 * 18 * 2), this.invY - (1/2 * 18 * 2), 18 * 2, 18 * 2);
            }
            else if (this.type == "tylunFlower")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2155, 64, 28, 33, this.invX - (1/2 * 28), this.invY - (1/2 * 33), 28, 33);
            }
            else if (this.type == "stomwikLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2171, 44, 21, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 16), 21, 16);
            }
            else if (this.type == "culprisLeaf")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2154, 160, 20, 13, this.invX - (1/2 * 20), this.invY - (1/2 * 13), 20, 13);
            }
            else if (this.type == "neprilneBerries")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2148, 516, 15, 16, this.invX - (1/2 * 15), this.invY - (1/2 * 16), 15, 16);
            }
            else if (this.type == "pluttBerries")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2111, 32, 19, 19, this.invX - (1/2 * 19), this.invY - (1/2 * 19), 19, 19);
            }
            else if (this.type == "driedPluttBerries")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 104, 47, 17, 19, this.invX - (1/2 * 17), this.invY - (1/2 * 19), 17, 19);
            }
            else if (this.type == "akerBerries")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2170, 20, 22, 19, this.invX - (1/2 * 22), this.invY - (1/2 * 19), 22, 19);
            }
            else if (this.type == "kellishSawClub")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 645, 466, 17, 55, this.invX - (1/2 * 17), this.invY - (1/2 * 55), 17, 55);
            }
            else if (this.type == "kellishClaymore")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 600, 435, 22, 112, this.invX - (1/2 * 22 * 0.7), this.invY - (1/2 * 112 * 0.7), 22 * 0.7, 112 * 0.7);
            }
            else if (this.type == "gribPelt")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1095, 155, 31, 19, this.invX - (1/2 * 31 * 1.2), this.invY - (1/2 * 19 * 1.2), 31 * 1.2, 19 * 1.2);
            }
            else if (this.type == "rawGribFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1393, 196, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
            }
            else if (this.type == "gribMeat")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1371, 197, 20, 22, this.invX - (1/2 * 20), this.invY - (1/2 * 22), 20, 22);
            }
            else if (this.type == "hammer")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 512, 514, 36, 49, this.invX - (1/2 * 36 / 1.3), this.invY - (1/2 * 49 / 1.3), 36 / 1.3, 49 / 1.3);
            }
            else if (this.type == "warHammer")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 535, 411, 40, 72, this.invX - (1/2 * 40 / 1.3), this.invY - (1/2 * 72 / 1.3), 40 / 1.3, 72 / 1.3);
            }
            else if (this.type == "iceClaymore")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1859, 36, 22, 27, this.invX - (1/2 * 22), this.invY - (1/2 * 27), 22, 27);
            }
            else if (this.type == "embers" || this.type == "fireballI" || this.type == "flyingColours" || this.type == "iceSpikes" || this.type == "frostWind" || this.type == "repel" || this.type == "lifeTap" || this.type == "drainingI" || this.type == "vivification" || this.type == "chasingLights")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1738, 4, 33, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 26), 33, 26);
            }
            else if (this.type == "narthwarpMouth")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30), this.invY - (1/2 * 18), 30 , 18);
            }
            else if (this.type == "lrgNarthwarpMouth")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1901, 74, 30, 18, this.invX - (1/2 * 30 * 2), this.invY - (1/2 * 18 * 2), 30 * 2, 18 * 2);
            }
            else if (this.type == "fermentedNarthwarpMouth")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1844, 64, 37, 32, this.invX - (1/2 * 37), this.invY - (1/2 * 32), 37, 32);
            }
            else if (this.type == "rawBearFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 731, 9, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
            }
            else if (this.type == "bearMeat")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 731, 27, 25, 16, this.invX - (1/2 * 25 * 1.6), this.invY - (1/2 * 16 * 1.6), 25 * 1.6, 16 * 1.6);
            }
            else if (this.type == "rawBearTongue")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 757, 12, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
            }
            else if (this.type == "bearTongue")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 757, 29, 17, 13, this.invX - (1/2 * 17 * 1.35), this.invY - (1/2 * 13 * 1.35), 17 * 1.35, 13 * 1.35);
            }
            else if (this.type == "smlBlackBearPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53), this.invY - (1/2 * 30), 53, 30);
            }
            else if (this.type == "medBlackBearPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.25), this.invY - (1/2 * 30 * 1.25), 53 * 1.25, 30 * 1.25);
            }
            else if (this.type == "lrgBlackBearPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 558, 18, 53, 30, this.invX - (1/2 * 53 * 1.65), this.invY - (1/2 * 30 * 1.65), 53 * 1.65, 30 * 1.65);
            }
            else if (this.type == "vardanianHeavyCleaver")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 779, 1, 17, 68, this.invX - (1/2 * 17), this.invY - (1/2 * 68), 17, 68);
            }
            else if (this.type == "shehidOozeSml")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21), this.invY - (1/2 * 22), 21, 22);
            }
            else if (this.type == "shehidOozeLrg")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1329, 19, 21, 22, this.invX - (1/2 * 21 * 2), this.invY - (1/2 * 22 * 2), 21 * 2, 22 * 2);
            }
            else if (this.type == "shehidShellSml")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25), this.invY - (1/2 * 24), 25, 24);
            }
            else if (this.type == "shehidShellLrg")
            {
                XXX.beginPath();
                XXX.drawImage(polypol, 1358, 19, 25, 24, this.invX - (1/2 * 25 * 2), this.invY - (1/2 * 24 * 2), 25 * 2, 24 * 2);
            }
            else if (this.type == "timberAxe")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 294, 330, 29, 45, this.invX - (1/2 * 29 * 1.4), this.invY - (1/2 * 45 * 1.4), 29 * 1.4, 45 * 1.4);
            }
            else if (this.type == "curvedDagger")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3538, 605, 10, 30, this.invX - (1/2 * 10), this.invY - (1/2 * 30), 10, 30);
            }
            else if (this.type == "dualCurvedDaggers")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3552, 605, 16, 30, this.invX - (1/2 * 16), this.invY - (1/2 * 30), 16, 30);
            }
            else if (this.type == "nirineseSpear")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 8, 1511, 13, 79, this.invX - (1/2 * 13), this.invY - (1/2 * 79), 13, 79);
            }
            else if (this.type == "crossbow")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3169, 118, 36, 34, this.invX - (1/2 * 37.8), this.invY - (1/2 * 35.7), 37.8, 35.7);
            }
            else if (this.type == "steelBolt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3152, 1, 19, 21, this.invX - (1/2 * 22.8), this.invY - (1/2 * 25.2), 22.8, 25.2);
            }
            else if (this.type == "varnFurDress")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 51, 387, 39, 52, this.invX - (1/2 * 60.45  * 0.8), this.invY - (1/2 * 85.6 * 0.8), 62.4 * 0.8, 83.2 * 0.8);
            }
            else if (this.type == "varnFurCloak")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 46, 439, 50, 61, this.invX - (1/2 * 77.5  * 0.8), this.invY - (1/2 * 92.55 * 0.7), 77.5 * 0.8, 92.55 * 0.7);
            }
            else if (this.type == "varnFurClothing")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 91, 380, 50, 61, this.invX - (1/2 * 80  * 0.8), this.invY - (1/2 * 95.6 * 0.7), 80 * 0.8, 95.6 * 0.7);
            }
            else if (this.type == "frichFurMittens")
            {
                XXX.beginPath();
                XXX.drawImage(freeverse, 386, 21, 19, 11, this.invX - (1/2 * 19 * 1.4), this.invY - (1/2 * 11 * 1.4), 19 * 1.4, 11 * 1.4);
            }
            else if (this.type == "frichFurClothing")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 258, 316, 37, 60, this.invX - (1/2 * 44.4), this.invY - (1/2 * 72), 44.4, 72);
            }
            else if (this.type == "hetmerArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 150, 309, 52, 66, this.invX - (1/2 * 62.4), this.invY - (1/2 * 79.2), 62.4, 79.2);
            }
            else if (this.type == "vardanianBattleAxe")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 374, 354, 29, 57, this.invX - (1/2 * 37.7), this.invY - (1/2 * 74.1), 37.7, 74.1);
            }
            else if (this.type == "rawOlkrinFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3143, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "olkrinMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "olkrinSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
            }
            else if (this.type == "olkrinHorn")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3087, 287, 26, 34, this.invX - (1/2 * 52), this.invY - (1/2 * 68), 52, 68);
            }
            else if (this.type == "goliathOlkrinSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3033, 290, 49, 36, this.invX - (1/2 * 73.5), this.invY - (1/2 * 54), 73.5, 54);
            }
            else if (this.type == "olkrinArm")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3175, 287, 67, 36, this.invX - (1/2 * 73.7), this.invY - (1/2 * 53.4), 73.7, 53.4);
            }
            else if (this.type == "olkrinMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3114, 290, 31, 29, this.invX - (1/2 * 46.5), this.invY - (1/2 * 43.5), 46.5, 43.5);
            }
            else if (this.type == "vardanianCleaver")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 250, 359, 14, 54, this.invX - (1/2 * 17.5), this.invY - (1/2 * 67.5), 17.5, 67.5);
            }
            else if (this.type == "rawVarnFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3099, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
            }
            else if (this.type == "varnMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3115, 1, 18, 15, this.invX - (1/2 * 27), this.invY - (1/2 * 22.5), 27, 22.5);
            }
            else if (this.type == "varnPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2994, 291, 27, 15, this.invX - (1/2 * 40.5), this.invY - (1/2 * 22.5), 40.5, 22.5);
            }
            else if (this.type == "fireStarter")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2922, 136, 14, 11, this.invX - (1/2 * 21), this.invY - (1/2 * 16.5), 21, 16.5);
            }
            else if (this.type == "wood")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
                XXX.drawImage(verse, 2917, 174, 23, 23, this.invX - (1/2 * 34.5), this.invY - (1/2 * 34.5), 34.5, 34.5);
            }
            else if (this.type == "katana")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 168, 364, 16, 55, this.invX - (1/2 * 22.5), this.invY - (1/2 * 70), 22.5, 75.5);
            }
            else if (this.type == "winterWolfOutfit")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3126, 156, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
            }
            else if (this.type == "winterWolfClothing")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3223, 157, 40, 50, this.invX - (1/2 * 48), this.invY - (1/2 * 60), 48, 60);
            }
            else if (this.type == "freydicRoyalOutfit")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2959, 151, 41, 60, this.invX - (1/2 * 52.4), this.invY - (1/2 * 78), 52.4, 78);
            }
            else if (this.type == "naapridLeatherArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3171, 59, 34, 57, this.invX - (1/2 * 44.2), this.invY - (1/2 * 71.1), 44.2, 71.1);
            }
            else if (this.type == "freydicRoyalDress")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3049, 148, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
            }
            else if (this.type == "winterWolfDress")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3012, 147, 30, 47, this.invX - (1/2 * 45), this.invY - (1/2 * 70.5), 45, 70.5);
            }
            else if (this.type == "rawYoungNaapridFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3133, 10, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
            }
            else if (this.type == "youngNaapridMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3133, 1, 15, 9.5, this.invX - (1/2 * 27), this.invY - (1/2 * 17.1), 27, 17.1);
            }
            else if (this.type == "rawNaapridFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2970, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
            }
            else if (this.type == "naapridMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2995, 1, 22, 20, this.invX - (1/2 * 38.5), this.invY - (1/2 * 35), 38.5, 35);
            }
            else if (this.type == "naapridPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2924, 1, 26, 16, this.invX - (1/2 * 65), this.invY - (1/2 * 40), 65, 40);
            }
            else if (this.type == "naapridHorn")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2951, 1, 15, 14, this.invX - (1/2 * 31.5), this.invY - (1/2 * 29.4), 31.5, 29.4);
            }
            else if (this.type == "thenganSwordAndShield")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 3515, 140, 48, 40, this.invX - (1/2 * 61.2), this.invY - (1/2 * 48), 61.2, 48);
            }
            else if (this.type == "rawTrollsBlood")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 452, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
            }
            else if (this.type == "jarOfOil")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 97, 3, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 21.5), 15, 21.5);
            }
            else if (this.type == "glassJar")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 465, 33, 8, 14, this.invX - (1/2 * 12), this.invY - (1/2 * 21), 12, 21);
            }
            else if (this.type == "chainArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 38, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
            }
            else if (this.type == "blackChainArmour")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 80, 310, 40, 61, this.invX - (1/2 * 40), this.invY - (1/2 * 61), 40, 61);
            }
            else if (this.type == "freydicGreatSword")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 126, 302, 16, 70, this.invX - (1/2 * 16), this.invY - (1/2 * 70), 16, 70);
            }
            else if (this.type == "hugeBogTrollSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 67.5), this.invY - (1/2 * 54), 67.5, 54);
            }
            else if (this.type == "bogTrollSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 45), this.invY - (1/2 * 36), 49.5, 39.6);
            }
            else if (this.type == "babyBogTrollSkull")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 63, 264, 45, 36, this.invX - (1/2 * 22.5), this.invY - (1/2 * 18), 22.5, 18);
            }
            else if (this.type == "trollFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2875, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
            }
            else if (this.type == "trollMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2900, 1, 19, 18, this.invX - (1/2 * 38), this.invY - (1/2 * 36), 38, 36);
            }
            else if (this.type == "aldrekiiArrow")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2832, 3, 41, 12, this.invX - (1/2 * 32), this.invY - (1/2 * 12), 32, 12);
            }
            else if (this.type == "rawWolfLiver")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2769, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
            }
            else if (this.type == "wolfLiver")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2782, 2, 10, 15, this.invX - (1/2 * 15), this.invY - (1/2 * 22.5), 15, 22.5);
            }
            else if (this.type == "winterWolfMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2812, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
            }
            else if (this.type == "rawWinterWolfFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2794, 1, 14, 16, this.invX - (1/2 * 21), this.invY - (1/2 * 24), 21, 24);
            }
            else if (this.type == "winterWolfPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2737, 2, 26, 16, this.invX - (1/2 * 34.8), this.invY - (1/2 * 19.2), 34.8, 19.2);
            }
            else if (this.type == "massiveWinterWolfPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 2737, 2, 29, 16, this.invX - (1/2 * 58), this.invY - (1/2 * 32), 58, 32);
            }
            else if (this.type == "energyPotionI")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 38, 267, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
            }
            else if (this.type == "speedPotionI")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 86, 134, 10, 17, this.invX - (1/2 * 10), this.invY - (1/2 * 17), 10, 17);
            }
            else if (this.type == "cleansingPotion")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 35, 134, 11, 19, this.invX - (1/2 * 11), this.invY - (1/2 * 19), 11, 19);
            }
            else if (this.type == "freydicSword")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2089, 2, 13, 46, this.invX - (1/2 * 16.25), this.invY - (1/2 * 57.5), 16.25, 57.5);
            }
            else if (this.type == "pickaxe")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 103, 233, 22, 26, this.invX - (1/2 * 33), this.invY - (1/2 * 39), 33, 39);
            }
            else if (this.type == "aldrekiiBlade")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2057, 4, 20, 45, this.invX - (1/2 * 24), this.invY - (1/2 * 54), 24, 54);
            }
            else if (this.type == "flail")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1995, 1, 37, 33, this.invX - (1/2 * 37), this.invY - (1/2 * 33), 37, 33);
            }
            else if (this.type == "torperVenomSac")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 40, 226, 17, 16, this.invX - (1/2 * 17), this.invY - (1/2 * 16), 17, 16);
            }
            else if (this.type == "torperFuzz")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1867, 9, 23, 20, this.invX - (1/2 * 23), this.invY - (1/2 * 20), 23, 20);
            }
            else if (this.type == "rawTorperFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1894, 3, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
            }
            else if (this.type == "torperMeat")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1895, 16, 18, 11, this.invX - (1/2 * 18), this.invY - (1/2 * 11), 18, 11);
            }
            else if (this.type == "gulfreyShellArmour")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 1, 157, 36, 63, this.invX - (1/2 * 36) + 2, this.invY - (1/2 * 63), 28.4, 59.6);
            }
            else if (this.type == "frichPelt")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 1832, 10, 31, 18, this.invX - (1/2 * 31), this.invY - (1/2 * 18), 31, 18);
            }
            else if (this.type == "rawFrichFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 65, 226, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
            }
            else if (this.type == "frichMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 79, 227, 10, 12, this.invX - (1/2 * 20), this.invY - (1/2 * 24), 20, 24);
            }
            else if (this.type == "vardanianAxe")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 53, 158, 37, 22, this.invX - (1/2 * 33.3), this.invY - (1/2 * 19.8), 33.3, 19.8);
            }
            else if (this.type == "vardanianAxeDual")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 48, 187, 31, 35, this.invX - (1/2 * 27.9), this.invY - (1/2 * 31.5), 27.9, 31.5);
            }
            else if (this.type == "freydicSpear")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 4, 227, 20, 75, this.invX - (1/2 * 17.5), this.invY - (1/2 * 56.75), 17.5, 56.75);
            }
            else if (this.type == "gulfreyShell")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 48, 41, 31, 23, this.invX - (1/2 * 31), this.invY - (1/2 * 23), 31, 23);
            }
            else if (this.type == "gulfreyMandibles")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 2, 92, 33, 33, this.invX - (1/2 * 26.6), this.invY - (1/2 * 26.6), 26.6, 26.6);
            }
            else if (this.type == "rawGulfreyFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 37, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
            }
            else if (this.type == "gulfreyMeat")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 66, 9, 20, 20, this.invX - (1/2 * 20), this.invY - (1/2 * 20), 20, 20);
            }
            else if (this.type == "vomit")
            {
                XXX.beginPath();
                XXX.drawImage(oldverse, 55, 135, 24, 21, this.invX - (1/2 * 24), this.invY - (1/2 * 21), 24, 21);
            }
            else if (this.type == "gojiiBerries")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 615, 3, 19, 15, this.invX - (1/2 * 38), this.invY - (1/2 * 30), 38, 30);
            }
            else if (this.type == "nirineseSabre")
            {
                XXX.beginPath();
                XXX.drawImage(verse, 7, 7, 26, 80, this.invX - (1/2 * 19.5), this.invY - (1/2 * 60), 19.5, 60);
            }
            else if (this.type == "freezingArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 66, 73, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "fireArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 66, 80, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "lifeLeachArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 65, 88, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "oiledArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 67, 57, 19, 7, this.invX - (1/2 * 38), this.invY - (1/2 * 14), 38, 14);
            }
            else if (this.type == "shehidToxinArrow")
            {
                XXX.beginPath();
                XXX.drawImage(mofu, 66, 21, 22, 9, this.invX - (1/2 * 44), this.invY - (1/2 * 18), 44, 18);
            }
            else if (this.type == "arrow")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 432, 554, 20, 8, this.invX - (1/2 * 40), this.invY - (1/2 * 16), 40, 16);
            }
            else if (this.type == "ogoFruit")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 426, 4, 12, 15, this.invX - (1/2 * 24), this.invY - (1/2 * 30), 24, 30);
            }
            else if (this.type == "blueBlade")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 8, 531, 57, 63, this.invX - (1/2 * 51.3), this.invY - (1/2 * 56.7), 51.3, 56.7);
            }
            else if (this.type == "berulnSkull")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 446, 3, 15, 20, this.invX - (1/2 * 22.5), this.invY - (1/2 * 30), 22.5, 30);
            }
            else if (this.type == "rawBerulnFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 526, 6, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
            }
            else if (this.type == "berulnMeat")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 506, 38, 21, 23, this.invX - (1/2 * 31.5), this.invY - (1/2 * 34.5), 31.5, 34.5);
            }
            else if (this.type == "bigBerulnPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 76.5), this.invY - (1/2 * 45), 76.5, 45);
            }
            else if (this.type == "berulnPelt")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 465, 1, 51, 30, this.invX - (1/2 * 66.3), this.invY - (1/2 * 39), 66.3, 39);
            }
            else if (this.type == "longbow")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 380, 593, 34, 34, this.invX - (1/2 * 51), this.invY - (1/2 * 51), 51, 51);
            }
            else if (this.type == "walrusLeatherArmour")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 734, 202, 52, 58, this.invX - (1/2 * 52), this.invY - (1/2 * 58), 52, 58);
            }
            else if (this.type == "balgurMercArmour")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 4, 105, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
            }
            else if (this.type == "balgurCaptainArmour")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 97, 108, 39, 70, this.invX - (1/2 * 39), this.invY - (1/2 * 70), 39, 70);
            }
            else if (this.type == "rawWalrusFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 99, 4, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
            }
            else if (this.type == "aldrekiiBardiche")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 580, 253, 42, 137, this.invX - (1/2 * 21), this.invY - (1/2 * 68.5), 21, 68.5);
            }
            else if (this.type == "walrusMeat")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 257, 1, 17, 20, this.invX - (1/2 * 26.5), this.invY - (1/2 * 30), 26.5, 30);
            }
            else if (this.type == "walrusHide")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 45), this.invY - (1/2 * 22), 45, 22);
            }
            else if (this.type == "elderWalrusHide")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 287, 3, 45, 22, this.invX - (1/2 * 90) + 7, this.invY - (1/2 * 44) + 4, 77.5, 33);
            }
            else if (this.type == "blubber")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 368, 9, 12, 13, this.invX - (1/2 * 24), this.invY - (1/2 * 26), 24, 26);
            }
            else if (this.type == "walrusTusks")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 42.5), this.invY - (1/2 * 32.5), 42.5, 32.5);
            }
            else if (this.type == "elderWalrusTusks")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 341, 10, 17, 13, this.invX - (1/2 * 68), this.invY - (1/2 * 52), 68, 52);
            }
            else if (this.type == "mace")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 554, 10, 61, 36, this.invX - (1/2 * 61), this.invY - (1/2 * 38), 61, 36);
            }
            else if (this.type == "longSpikedMorningStar")
            {
                XXX.beginPath();
                XXX.drawImage(poly, 151, 128, 39, 39, this.invX - (1/2 * 39 * 1.15), this.invY - (1/2 * 39 * 1.15), 39 * 1.15, 39 * 1.15);
            }
            else if (this.type == "longsword")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 75, 366, 17, 47, this.invX - (1/2 * 25.5), this.invY - (1/2 * 70.5) - 3, 25.5, 70.5);
            }
            else if (this.type == "rawEtyrFlesh")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 43, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
            }
            else if (this.type == "freydicWarAxe")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 17, 115, 113, 104, this.invX - (1/2 * 90.4), this.invY - (1/2 * 83.2) + 4, 90.4, 83.2);
            }
            else if (this.type == "etyrMeat")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 73, 684, 16, 13, this.invX - (1/2 * 32), this.invY - (1/2 * 26), 32, 26);
            }
            else if (this.type == "etyrHide")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 37, 720, 25, 18, this.invX - (1/2 * 50), this.invY - (1/2 * 36), 50, 36);
            }
            else if (this.type == "trollsBlood")
            {
                XXX.beginPath();
                XXX.drawImage(polyPNG, 385, 7, 11, 15, this.invX - (1/2 * 16.5), this.invY - (1/2 * 22.5), 16.5, 22.5);
            }
            else if (this.type == "yaihefBerries")
            {
                XXX.beginPath();
                XXX.drawImage(theCrack, 62, 508, 16, 16, this.invX - (1/2 * 32), this.invY - (1/2 * 32), 32, 32);
            }
        };

        this.operations = function()
        {
            this.setItemID(); //this constantly redefines the item's stats and/or details based on the players skills (for the items that use that kind of adjustment.

            if (this.X != false && this.Y != false) //this only lets an item draw if it has coordinates other than false.
            {
                this.drawItem(); //this draws the item onto the world's map.
            }
        };

    }

    function buildMaster()
    {
        if (map == "world") //If the map is the main world map.
        {
            if (region == "central") //Y < 6870
            {
                if (change != "central")
                {
                    //Delete All Non-native AI Units
                    for (var i =  ArtificialIntelligenceAccess.length - 1; i >= 0; i--) //Splice will alter the list so the numbers will be off if you loop through beginning to end, so this for loop goes from the end to the beginning.
                    {
                        if (ArtificialIntelligenceAccess[i].playerSeen == false)
                        {
                            ArtificialIntelligenceAccess.splice(i, 1);
                            console.log(i + " in list 'AI access' has been deleted. " + ArtificialIntelligenceAccess.length);
                        }
                        else
                        {
                            console.log(i + " in list 'AI access' has been saved.");
                        }
                    }

                    //Delete All Non-native Items
                    //worldItems = [];

                    //Delete All Non-native Structures
                    //todo when structures are created add their list's refresh sequence here.

                    //Delete All Non-native Scenery
                    scenicList = [];

                    //REGION CREATION
                        //Build AI Units
                    //The master thief of teshir
                    if (quests.theMasterThiefOfTeshirNeevSlain != true)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(2100, 1050, "Neev", false, "Easter"));
                    }

                    //Friches in the plains
                    ArtificialIntelligenceAccess.push(new Unit(2921, -1125, "Frich", false, "Fuzzy Wuzzy"));
                    ArtificialIntelligenceAccess.push(new Unit(2683, -1204, "Frich", false, "Ruby Soho"));
                    ArtificialIntelligenceAccess.push(new Unit(2786, -1398, "Frich", true, "Brufe"));
                    ArtificialIntelligenceAccess.push(new Unit(1739, -863, "Frich", true, "Nosey"));
                    ArtificialIntelligenceAccess.push(new Unit(1513, -803, "Frich", true, "Friskers"));
                    ArtificialIntelligenceAccess.push(new Unit(5000, 226, "Frich", false, "Tiddle"));
                    ArtificialIntelligenceAccess.push(new Unit(4976, 316, "Frich", false, "Toodle"));
                    ArtificialIntelligenceAccess.push(new Unit(4908, 230, "Frich", false, "Takkle"));
                    ArtificialIntelligenceAccess.push(new Unit(4874, 37, "Frich", false, "Tooble"));
                    ArtificialIntelligenceAccess.push(new Unit(4791, 82, "Frich", false, "Tuddle"));
                    ArtificialIntelligenceAccess.push(new Unit(-1110, 10, "Frich", false, "Tuk"));
                    ArtificialIntelligenceAccess.push(new Unit(-1166, 85, "Frich", false, "Tud"));
                    ArtificialIntelligenceAccess.push(new Unit(-1152, -22, "Frich", false, "Tux"));
                    ArtificialIntelligenceAccess.push(new Unit(-1558, -1017, "Frich", false, "boo"));
                    ArtificialIntelligenceAccess.push(new Unit(-1536, -1108, "Frich", true, "baa"));
                    ArtificialIntelligenceAccess.push(new Unit(-1687, -1365, "Frich", true, "bei"));
                    ArtificialIntelligenceAccess.push(new Unit(-1555, -1412, "Frich", false, "ban"));
                    ArtificialIntelligenceAccess.push(new Unit(-1358, 128, "Frich", false, "buk"));
                    ArtificialIntelligenceAccess.push(new Unit(4458, 3109, "Frich", false, "uk"));
                    ArtificialIntelligenceAccess.push(new Unit(4544, 3162, "Frich", false, "us"));
                    ArtificialIntelligenceAccess.push(new Unit(4422, 3236, "Frich", true, "au"));
                    ArtificialIntelligenceAccess.push(new Unit(6181, 3940, "Frich", false, "Zuke"));
                    ArtificialIntelligenceAccess.push(new Unit(6071, 3847, "Frich", false, "Cuke"));
                    ArtificialIntelligenceAccess.push(new Unit(6030, 4102, "Frich", false, "kook"));
                    ArtificialIntelligenceAccess.push(new Unit(6142, 4141, "Frich", false, "Zook"));
                    ArtificialIntelligenceAccess.push(new Unit(5333, 1329, "Frich", true, "Luke"));
                    ArtificialIntelligenceAccess.push(new Unit(5212, 1254, "Frich", false, "shook"));
                    ArtificialIntelligenceAccess.push(new Unit(3428, 4445, "Frich", false, "Tuco"));
                    ArtificialIntelligenceAccess.push(new Unit(3215, 4393, "Frich", true, "Zuko"));
                    ArtificialIntelligenceAccess.push(new Unit(3045, 4011, "Frich", false, "Jango"));
                    ArtificialIntelligenceAccess.push(new Unit(3226, 4819, "Frich", false, "Franco"));
                    ArtificialIntelligenceAccess.push(new Unit(3397, 4777, "Frich", true, "Bilbo"));
                    ArtificialIntelligenceAccess.push(new Unit(3467, 4626, "Frich", true, "Frodo"));
                    ArtificialIntelligenceAccess.push(new Unit(-339, 4588, "Frich", false, "Bambi"));
                    ArtificialIntelligenceAccess.push(new Unit(-377, 4684, "Frich", true, "Hunter"));
                    ArtificialIntelligenceAccess.push(new Unit(-622, 4606, "Frich", false, "MamaDeer"));
                    ArtificialIntelligenceAccess.push(new Unit(-692, 4814, "Frich", false, "PapaBuck"));
                    ArtificialIntelligenceAccess.push(new Unit(-2132, 5878, "Frich", true, "Rathair"));
                    ArtificialIntelligenceAccess.push(new Unit(-730, 3592, "Frich", false, "Richard"));
                    ArtificialIntelligenceAccess.push(new Unit(-923, 3404, "Frich", false, "John"));
                    ArtificialIntelligenceAccess.push(new Unit(-955, 3520, "Frich", true, "Izzy"));
                    ArtificialIntelligenceAccess.push(new Unit(-910, 3645, "Frich", false, "Charles"));
                    ArtificialIntelligenceAccess.push(new Unit(-596, 3860, "Frich", false, "Edward"));
                    ArtificialIntelligenceAccess.push(new Unit(-30, -833, "Frich", true, "Chak"));
                    ArtificialIntelligenceAccess.push(new Unit(-221, -891, "Frich", false, "Eduk"));
                    ArtificialIntelligenceAccess.push(new Unit(-121, -1062, "Frich", false, "Toog"));
                    ArtificialIntelligenceAccess.push(new Unit(-389, 2569, "Frich", false, "Gud"));
                    ArtificialIntelligenceAccess.push(new Unit(-1673, -2423, "Frich", true, "mayonzuko"));
                        //Alpha only frich pack guarding the lone farm house
                    ArtificialIntelligenceAccess.push(new Unit(-885, -1994, "Frich", true, "Chucky"));
                    ArtificialIntelligenceAccess.push(new Unit(-836, -2136, "Frich", true, "Chucky2"));
                    ArtificialIntelligenceAccess.push(new Unit(-1048, -1858, "Frich", true, "Chucky3"));
                    ArtificialIntelligenceAccess.push(new Unit(-1156, -1766, "Frich", true, "Chucky4"));
                    ArtificialIntelligenceAccess.push(new Unit(-1277, -1974, "Frich", true, "Chucky5"));
                    ArtificialIntelligenceAccess.push(new Unit(-1080, -2190, "Frich", true, "Chucky6"));

                    if (quests.huntingWagerFrichPack == true && quests.huntingWagerKillCount < 3)
                    {
                        if (quests.huntingWagerKillCount == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(3665, -624, "Frich", "massive", "Pucker"));
                            ArtificialIntelligenceAccess.push(new Unit(3927, -494, "Frich", "massive", "Tucker"));
                            ArtificialIntelligenceAccess.push(new Unit(3792, -802, "Frich", "massive", "Hunky-Dory"));
                        }
                        else if (quests.huntingWagerKillCount == 1)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(3665, -624, "Frich", "massive", "Pucker"));
                            ArtificialIntelligenceAccess.push(new Unit(3927, -494, "Frich", "massive", "Tucker"));
                        }
                        else
                        {
                            ArtificialIntelligenceAccess.push(new Unit(3792, -802, "Frich", "massive", "Hunky-Dory"));
                        }
                    }


                    //Citizens of Teshir

                        //Projectile(TYPE ultra.ranged[1],startX, startY, startAngle, SPEED ultra.ranged[2], RANGE ultra.ranged[3], NEGATION ultra.ranged[4], list, DAMAGE ultra.ranged[5], MAGIC DAMAGE ultra.ranged[6], ABILITY ultra.ranged[7])

                    ArtificialIntelligenceAccess.push(new Unit(1661, 2311, "Soldier", false, "Torg Captain", {race: "Freynor", faction: "Freynor", con: 9, speed: 1.15, outfit: ["chainArmour", 10], weapon: ["freydicGreatSword", [25, 14], 0, 35, 2.25], ranged: [false, "arrow", 7, 1800, 1, 6, 0, "stunI", 2.4], patrolStops: 4, patrolLoop: true, route:[[1654, 1507], [1661, 2311], [1864, 2315], [1852, 1499]]}));
                    ArtificialIntelligenceAccess.push(new Unit(2254, 311, "Soldier", false, "Torg Soldier", {race: "Freynor", faction: "Freynor", con: 5, speed: 1.50, outfit: ["chainArmour", 7], weapon: ["freydicSword", [9, 7], 0, 16, 1], ranged: [false, "arrow", 5, 1500, 1, 3, 0, "none", 1.50], patrolStops: 3, patrolLoop: true, route:[[3071, 314], [3014, 394], [2218, 346]]}));
                    ArtificialIntelligenceAccess.push(new Unit(2741, 1421, "Soldier", false, "Torg Soldier", {race: "Freynor", faction: "Freynor", con: 4, speed: 1.25, outfit: ["chainArmour", 9], weapon: ["freydicSword", [8, 6], 0, 16, 1], ranged: [false, "arrow", 7, 2000, 1, 6, 0, "none", 1.25], patrolStops: 4, patrolLoop: true, route:[[1833, 1424], [1848, 2413], [3046, 2407], [2741, 1421]]}));
                    ArtificialIntelligenceAccess.push(new Unit(1247, 1210, "Soldier", false, "Torg Soldier", {race: "Freynor", faction: "Freynor", con: 6, speed: 1.40, outfit: ["chainArmour", 8], weapon: ["freydicSword", [8, 9], 0, 16, 1], ranged: [false, "arrow", 6, 1950, 1, 4, 0, "none", 1.35], patrolStops: 6, patrolLoop: true, route:[[901, 1195], [969, 527], [1932, 549], [1941, 814], [1932, 549], [969, 527]]}));
                    ArtificialIntelligenceAccess.push(new Unit(2584, 1385, "Person", false, "Freynor Villager", {race: "Freynor", faction: "Freynor", personality: "calculated", outfit: ["frichFurClothing", 0], weapon: ["none", [0.1, 0.4], 0, 0, 0.40 + (Math.floor(Math.random() * 6) / 10)], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 5, patrolLoop: true, route:[[2523, 2061], [2041, 2046], [2036, 2118], [2594, 2169], [2584, 1385]]}));
                    ArtificialIntelligenceAccess.push(new Unit(2338, 1205, "Person", false, "Freynor Villager", {race: "Freynor", faction: "Freynor", personality: "calculated", outfit: ["frichFurClothing", 0], weapon: ["none", [0.1, 0.4], 0, 0, 0.40 + (Math.floor(Math.random() * 6) / 10)], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 4, patrolLoop: true, route:[[1622, 1196], [1655, 1300], [2518, 1366], [2338, 1205]]}));
                    ArtificialIntelligenceAccess.push(new Unit(2335, 924, "Person", false, "Freynor Villager", {race: "Freynor", faction: "Freynor", personality: "calculated", outfit: ["frichFurClothing", 0], weapon: ["none", [0.1, 0.4], 0, 0, 0.40 + (Math.floor(Math.random() * 6) / 10)], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 5, patrolLoop: true, route:[[1355, 935], [1402, 1962], [1402, 1962], [1461, 902], [2335, 924]]}));

                    if (uniqueChars.drohforLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Drohfor")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(2583, 818, "Person", false, "Drohfor", {race: "Freynor", faction: "Freynor", personality: "violent", outfit: ["walrusLeatherArmour", 5], weapon: ["longbow", [0.1, 0.4], 0, 0, 0.40 + (Math.floor(Math.random() * 6) / 10)], ranged: [true, "arrow", 8, 2000, 1, 6, 0, "none", 0.95], patrolStops: 6, patrolLoop: true, route:[[2001, 658], [2252, -509], [2423, -588], [2032, 440], [2030, 770], [2583, 818]]}));
                        }
                    }
                    if (quests.teshirNorthRoadQuest != "complete")
                    {
                        if (uniqueChars.togginLDS == true)
                        {
                            var hits = 0;
                            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                            {
                                if (ArtificialIntelligenceAccess[i].ID == "Toggin")
                                {
                                    hits += 1;
                                }
                            }
                            if (hits == 0)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(739, 1830, "Person", false, "Toggin", {race: "Freynor", faction: "Freynor", personality: "violent", outfit: ["winterWolfClothing", 0], weapon: ["timberAxe", [10, 4], 1.5, 12, 1.55], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 3, patrolLoop: true, route:[[739, 1830], [756, 1635], [840, 1603]]}));
                            }
                        }
                    }
                    if (uniqueChars.kedwinLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Kedwin")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(2072, 1535, "Person", false, "Kedwin", {race: "Freynor", faction: "Freynor", personality: "calculated", outfit: ["frichFurClothing", 0], weapon: ["none", [0.5, 1], 0, 0, 1.1], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 3, patrolLoop: true, route:[[2072, 1535], [1939, 1509], [2033, 1499]]}));
                            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                            {
                                if (ArtificialIntelligenceAccess[i].ID == "Kedwin")
                                {
                                    ArtificialIntelligenceAccess[i].healthMAX = 19;
                                    ArtificialIntelligenceAccess[i].health = 19;
                                }
                            }
                        }
                    }
                    if (uniqueChars.odeeLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Odee the Banker")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(2232, 1142, "Person", false, "Odee the Banker", {race: "Orgell", faction: "Freynor", personality: "calculated", outfit: ["winterWolfClothing", 0], weapon: ["none", [0.1, 0.4], 0, 0, 0.85], ranged: [false, "arrow", 8, 2000, 1, 6, 0, "none", 0.95], patrolStops: 0, patrolLoop: false, route:[[2200, 1460]], banker: true}));
                        }
                    }
                    if (uniqueChars.stendorLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Torg Commissioner Stendor")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(1949, 2282, "Soldier", false, "Torg Commissioner Stendor", {race: "Freynor", faction: "Freynor", con: 12, speed: 1.32, outfit: ["chainArmour", 10], weapon: ["freydicGreatSword", [25, 14], 0, 35, 2.25], ranged: [false, "arrow", 8, 2100, 1, 7, 0, "stunI", 2.65], patrolStops: 0, patrolLoop: true, route:[[1654, 1507], [1661, 2311], [1864, 2315], [1852, 1499]]}));
                        }
                    }
                    if (uniqueChars.laandegLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Laandeg the Alchemist")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(1171, 699, "Person", false, "Laandeg the Alchemist", {race: "Freynor", faction: "Freynor", personality: "scared", outfit: ["none", 0], weapon: ["none", [0.1, 0.4], 0, 0, 1.1], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[744, 1133], [801, 1156], [840, 373], [744, 1545]], merchant: true, merchandise: [[new Item("coins", false, false), 29], [new Item("healingSalve", false, false), 4], [new Item("trollsBlood", false, false), 1], [new Item("rawTrollsBlood", false, false), 1], [new Item("cleansingPotion", false, false), 1], [new Item("energyPotionI", false, false), 3], [new Item("speedPotionI", false, false), 2], [new Item("energilPotionI", false, false), 2], [new Item("energilPotionII", false, false), 1], [new Item("potionGlass", false, false), 18], [new Item("glassJar", false, false), 14], [new Item("rawWolfLiver", false, false), 4]]}));
                        }
                    }
                    if (uniqueChars.hilmundLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Hilmund the Innkeeper")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(2164, 1656, "Person", false, "Hilmund the Innkeeper", {race: "Freynor", faction: "Freynor", personality: "violent", outfit: ["none", 0], weapon: ["none", [0.3, 0.7], 0, 0, 0.8], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[2164, 1656]], merchant: true, merchandise: [[new Item("coins", false, false), 86], [new Item("harstAle", false, false), 64], [new Item("pluttWine", false, false), 19], [new Item("glassBottleOfPluttWine", false, false), 6], [new Item("pluttCiderPintGlass", false, false), 7], [new Item("waterPintGlass", false, false), 9], [new Item("bucketOfWater", false, false), 1], [new Item("walrusLeatherWaterskinFull", false, false), 11], [new Item("walrusMeat", false, false), 8], [new Item("bearMeat", false, false), 3], [new Item("winterWolfMeat", false, false), 5], [new Item("frichMeat", false, false), 17], [new Item("wolfLiver", false, false), 6], [new Item("suuliMelonSlice", false, false), 14]]}));
                        }
                    }
                    if (uniqueChars.bobithLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Svehn the Smith")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(1690, 1021, "Person", false, "Svehn the Smith", {race: "Freynor", faction: "Freynor", personality: "violent", outfit: ["none", 0], weapon: ["none", [0.1, 0.4], 0, 0, 0.65], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[2049, 1021], [1943, 1127], [1690, 1021]], merchant: true, merchandise: [[new Item("coins", false, false), 103 + quests.bobithNewWealth], [new Item("iron", false, false), 6], [new Item("mace", false, false), 3], [new Item("hammer", false, false), 2], [new Item("freydicSpear", false, false), 5], [new Item("freydicSword", false, false), 2], [new Item("freydicWarAxe", false, false), 1], [new Item("freydicGreatSword", false, false), 1], [new Item("chainArmour", false, false), 2], [new Item("longbow", false, false), 2], [new Item("arrow", false, false), 92], [new Item("timberAxe", false, false), 3]]}));
                        }
                    }
                    if (uniqueChars.medliaLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Medlia the Merchant")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(1930, 1793, "Person", false, "Medlia the Merchant", {race: "Freynor", faction: "Freynor", personality: "calculated", outfit: ["winterWolfClothing", 0], weapon: ["none", [0.1, 0.4], 0, 0, 1], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 3, patrolLoop: true, route:[[1710, 1717], [1812, 1835], [1713, 1882], [1930, 1793]], merchant: true, merchandise: [[new Item("coins", false, false), 179 + quests.medliaNewWealth], [new Item("wood", false, false), 48], [new Item("tent", false, false), 2], [new Item("fireStarter", false, false), 3], [new Item("jarOfOil", false, false), 1], [new Item("rawWalrusFlesh", false, false), 8], [new Item("walrusHide", false, false), 1], [new Item("walrusTusks", false, false), 1], [new Item("oilLampEmpty", false, false), 2], [new Item("oilLanternEmpty", false, false), 5], [new Item("candle", false, false), 12], [new Item("beesWax", false, false), 9], [new Item("ogardPerfume", false, false), 2], [new Item("frichPelt", false, false), 3], [new Item("rawFrichFlesh", false, false), 22], [new Item("winterWolfPelt", false, false), 3], [new Item("rawWinterWolfFlesh", false, false), 2], [new Item("rawWolfLiver", false, false), 1], [new Item("walrusLeatherWaterskin", false, false), 2], [new Item("harstGrain", false, false), 29], [new Item("potato", false, false), 8], [new Item("carrot", false, false), 13], [new Item("suuliMelon", false, false), 5], [new Item("driedTechiLeaf", false, false), 14], [new Item("ogard", false, false), 1]]}));
                        }
                    }
                    if (uniqueChars.maggyLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Maggy the Tailor")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(2672, 1594, "Person", false, "Maggy the Tailor", {race: "Freynor", faction: "Freynor", personality: "scared", outfit: ["frichFurClothing", 0], weapon: ["none", [0.1, 0.4], 0, 0, 1.2], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[2836, 2058], [2858, 1524]], merchant: true, merchandise: [[new Item("coins", false, false), 155], [new Item("frichFurClothing", false, false), 12], [new Item("frichFurMittens", false, false), 5], [new Item("varnFurClothing", false, false), 5], [new Item("varnFurCloak", false, false), 2], [new Item("varnFurDress", false, false), 3], [new Item("winterWolfClothing", false, false), 1], [new Item("winterWolfOutfit", false, false), 1], [new Item("winterWolfDress", false, false), 1], [new Item("naapridLeatherArmour", false, false), 2], [new Item("walrusLeatherArmour", false, false), 3]]}));
                        }
                    }

                    //a vardanian merchant who can be kicked out of town in a quest.
                    if (uniqueChars.neculaiLDS == true && quests.medliaCompetitionControlQuest != "complete")
                    {
                        if (player.raceName != "Freynor" || player.title != "Royalty" || player.raceName == "Freynor" && player.title == "Royalty" && player.vardanFaction >= 0) // if you are royalty of freynor your actions determine the nations friends and enemies.
                        {
                            var hits = 0;
                            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                            {
                                if (ArtificialIntelligenceAccess[i].ID == "Neculai the Merchant")
                                {
                                    hits += 1;
                                }
                            }
                            if (hits == 0)
                            {
                                if (quests.bankruptNeculai != true)
                                {
                                    ArtificialIntelligenceAccess.push(new Unit(2365, 1059, "Person", false, "Neculai the Merchant", {race: "Vardan", faction: "Vardan", personality: "calculated", outfit: ["none", 0], weapon: ["none", [0.2, 0.5], 0, 0, 0.55], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[], merchant: true, merchandise: [[new Item("coins", false, false), 37], [new Item("frichFurClothing", false, false), 3], [new Item("mace", false, false), 1], [new Item("vardanianAxe", false, false), 3], [new Item("vardanianAxeDual", false, false), 2], [new Item("vardanianCleaver", false, false), 1], [new Item("rawWolfLiver", false, false), 4], [new Item("blackChainArmour", false, false), 2], [new Item("trollFlesh", false, false), 2], [new Item("wood", false, false), 14], [new Item("freydicSword", false, false), 1], [new Item("frichPelt", false, false), 6], [new Item("rawWalrusFlesh", false, false), 5], [new Item("walrusMeat", false, false), 1]]}));
                                }
                                else
                                {
                                    ArtificialIntelligenceAccess.push(new Unit(2365, 1059, "Person", false, "Neculai the Beggar", {race: "Vardan", faction: "Vardan", personality: "calculated", outfit: ["none", 0], weapon: ["none", [0.2, 0.5], 0, 0, 0.55], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[]}));
                                }

                            }
                        }
                    }

                    //A stray herd of Naaprids in the northern grassland
                    ArtificialIntelligenceAccess.push(new Unit(4942, -1180, "Naaprid", true, "Naanav"));
                    ArtificialIntelligenceAccess.push(new Unit(4860, -1377, "Naaprid", true, "Naarimov"));
                    ArtificialIntelligenceAccess.push(new Unit(5265, -1535, "Naaprid", true, "Naastelav"));
                    ArtificialIntelligenceAccess.push(new Unit(5513, -1322, "Naaprid", false, "Naanava"));
                    ArtificialIntelligenceAccess.push(new Unit(5468, -1244, "Naaprid", "baby", "Naarimova"));
                    ArtificialIntelligenceAccess.push(new Unit(5634, -1223, "Naaprid", false, "Naastelava"));
                    ArtificialIntelligenceAccess.push(new Unit(5737, -1388, "Naaprid", false, "kaastelava"));
                    ArtificialIntelligenceAccess.push(new Unit(5896, -1482, "Naaprid", false, "Laastelava"));
                    ArtificialIntelligenceAccess.push(new Unit(5986, -1355, "Naaprid", "baby", "Aaptelava"));
                    ArtificialIntelligenceAccess.push(new Unit(6111, -943, "Naaprid", true, "Paaktolav"));

                    //Wild Varns ventured into grassland to find new food source (because of clearcut)
                    ArtificialIntelligenceAccess.push(new Unit(-42, -1983, "Varn", true, "Scrag"));
                    ArtificialIntelligenceAccess.push(new Unit(-420, -1871, "Varn", false, "Kretta"));
                    ArtificialIntelligenceAccess.push(new Unit(-2190, -1403, "Varn", false, "Arlea"));
                    ArtificialIntelligenceAccess.push(new Unit(-2033, -1369, "Varn", true, "Valentina"));
                    ArtificialIntelligenceAccess.push(new Unit(-1257, -6310, "Varn", false, "Racho"));
                    ArtificialIntelligenceAccess.push(new Unit(-1910, 4940, "Varn", false, "Ferra"));
                    ArtificialIntelligenceAccess.push(new Unit(-1549, -5102, "Varn", false, "Juanito"));
                    ArtificialIntelligenceAccess.push(new Unit(-937, 708, "Varn", false, "Domingo"));
                    ArtificialIntelligenceAccess.push(new Unit(3918, -2387, "Varn", false, "Wyhay"));
                    ArtificialIntelligenceAccess.push(new Unit(-2340, -2853, "Varn", true, "Wandigo"));
                    ArtificialIntelligenceAccess.push(new Unit(-2357, -3126, "Varn", false, "Wandago"));
                    ArtificialIntelligenceAccess.push(new Unit(-2012, -3280, "Varn", true, "wandoo"));
                    ArtificialIntelligenceAccess.push(new Unit(-2406, 757, "Varn", false, "Wiggin"));
                    ArtificialIntelligenceAccess.push(new Unit(-2206, 2201, "Varn", true, "Ender"));
                    ArtificialIntelligenceAccess.push(new Unit(-1712, 2328, "Varn", false, "Starter"));
                    ArtificialIntelligenceAccess.push(new Unit(-2187, 3320, "Varn", false, "Easer"));

                    if (uniqueChars.hetmerLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Hetmer The Bandit Chief")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(35 - 750, 5540, "Soldier", false, "Hetmer The Bandit Chief", {race: "Freynor", faction: "hostile", con: 6, speed: 1.2, outfit: ["hetmerArmour", 5.5], weapon: ["freydicSword", [6, 5], 0, 16, 1], ranged: [false, "arrow", 9, 2100, 1, 7, 0, "none", 1.2], patrolStops: 1, patrolLoop: false, route:[[221 -750, 5517]]}));
                        }
                    }

                    //Bandits and bandit chief (Bandidos Nortenos)
                    if (quests.teshirNorthRoadBandits == true)
                    {
                        //ArtificialIntelligenceAccess.push(new Unit(1663, 5750, "Soldier", false, "Northern Bandit", {race: "Freynor", faction: "hostile", con: 5, speed: 1.10, outfit: ["walrusLeatherArmour", 4], weapon: ["crossbow", [0.1, 0.4], 0, 16, 1], ranged: [true, "steelBolt", 10, 2000, 12, 23, 0, "none", 2.2], patrolStops: 1, patrolLoop: false, route:[[586, 6301]]}));
                        ArtificialIntelligenceAccess.push(new Unit(1563, 5864, "Soldier", false, "Northern Bandit", {race: "Freynor", faction: "hostile", con: 2, speed: 1.05, outfit: ["walrusLeatherArmour", 4], weapon: ["freydicSword", [4, 4], 0, 16, 1], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 4, patrolLoop: true, route:[[506, 6152], [1042, 6325], [1551, 6202], [1563, 5864]]}));
                        ArtificialIntelligenceAccess.push(new Unit(1941, 5902, "Soldier", false, "Northern Bandit", {race: "Freynor", faction: "hostile", con: 4, speed: 1.15, outfit: ["none", 0], weapon: ["longbow", [0.1, 0.4], 0, 0, 0.85], ranged: [true, "arrow", 6, 1750, 1, 4, 0, "none", 1.4], patrolStops: 3, patrolLoop: true, route:[[1941, 5902], [2384, 5809], [1926, 6003]]}));
                        ArtificialIntelligenceAccess.push(new Unit(435 - 750, 5563, "Soldier", false, "Northern Bandit", {race: "Freynor", faction: "hostile", con: 3, speed: 1.05, outfit: ["walrusLeatherArmour", 4], weapon: ["longbow", [0.1, 0.4], 0, 16, 1], ranged: [true, "arrow", 7, 1900, 1, 4, 0, "none", 1.5], patrolStops: 4, patrolLoop: true, route:[[435 - 750, 5563], [400 - 750, 5668], [636 - 750, 5860], [827 - 750, 5357]]}));
                        ArtificialIntelligenceAccess.push(new Unit(348 - 750, 5428, "Soldier", false, "Northern Bandit", {race: "Freynor", faction: "hostile", con: 5, speed: 0.90, outfit: ["none", 1], weapon: ["freydicSword", [6, 4], 0, 16, 1], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 3, patrolLoop: true, route:[[348 - 750, 5428], [391 - 750, 5303], [260 - 750, 5339]]}));
                    }

                    //a well known thengan mercenary crew's captain.
                    if (uniqueChars.kronheimeLDS == true && quests.theBalgurMercenariesQuest == true && quests.theBalgurMercenariesCompletionStyle != "threaten" && quests.theBalgurMercenariesCompletionStyle != "paidMercs"&& quests.theBalgurMercenariesCompletionStyle != "royalProtection")
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Mercenary Captain Kronheime")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(4062, 2531, "Soldier", false, "Mercenary Captain Kronheime", {race: "Thengar", faction: "TheBalgurMercenaries", con: 20, speed: 1.3, outfit: ["balgurCaptainArmour", 7], weapon: ["flail", [25, 7], 11, 63, 3.1], ranged: [false, "arrow", 7, 1800, 1, 6, 0, "none", 2.4], patrolStops: 0, patrolLoop: false, route:[[1654, 1507], [1661, 2311], [1864, 2315], [1852, 1499]]}));
                        }
                    }
                    //balgur mercenaries
                    if (quests.theBalgurMercenariesQuest == true && quests.theBalgurMercenariesCompletionStyle != "threaten" && quests.theBalgurMercenariesCompletionStyle != "paidMercs" && quests.theBalgurMercenariesCompletionStyle != "royalProtection")
                    {
                        ArtificialIntelligenceAccess.push(new Unit(4143, 2400, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 10, speed: 1.2, outfit: ["balgurMercArmour", 5], weapon: ["longSpikedMorningStar", [13, 5], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 0, patrolLoop: false, route:[[348 - 750, 5428], [391 - 750, 5303], [260 - 750, 5339]]}));
                        ArtificialIntelligenceAccess.push(new Unit(4138, 2642, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 8, speed: 1.25, outfit: ["balgurMercArmour", 3.5], weapon: ["longSpikedMorningStar", [11, 4], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 0, patrolLoop: false, route:[[348 - 750, 5428], [391 - 750, 5303], [260 - 750, 5339]]}));
                        ArtificialIntelligenceAccess.push(new Unit(4321, 2575, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 10, speed: 1.3, outfit: ["balgurMercArmour", 3.5], weapon: ["longSpikedMorningStar", [12, 4], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 0, patrolLoop: false, route:[[348 - 750, 5428], [391 - 750, 5303], [260 - 750, 5339]]}));
                        ArtificialIntelligenceAccess.push(new Unit(4322, 2486, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 12, speed: 1.225, outfit: ["balgurMercArmour", 4.5], weapon: ["longSpikedMorningStar", [14, 6], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 0, patrolLoop: false, route:[[348 - 750, 5428], [391 - 750, 5303], [260 - 750, 5339]]}));
                        ArtificialIntelligenceAccess.push(new Unit(3912, 2723, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 7, speed: 1.175, outfit: ["balgurMercArmour", 3.5], weapon: ["longSpikedMorningStar", [10, 3], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 0, patrolLoop: false, route:[[348 - 750, 5428], [391 - 750, 5303], [260 - 750, 5339]]}));
                        ArtificialIntelligenceAccess.push(new Unit(3924, 2341, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 13, speed: 1.3, outfit: ["balgurMercArmour", 5], weapon: ["longSpikedMorningStar", [14, 7], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 0, patrolLoop: false, route:[[348 - 750, 5428], [391 - 750, 5303], [260 - 750, 5339]]}));
                        ArtificialIntelligenceAccess.push(new Unit(3796, 2347, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 11, speed: 1.25, outfit: ["balgurMercArmour", 4], weapon: ["longSpikedMorningStar", [13, 6], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 2, patrolLoop: true, route:[[3409, 2704], [3796, 2347]]}));
                        ArtificialIntelligenceAccess.push(new Unit(3785, 2716, "Soldier", false, "Balgur Mercenary", {race: "Thengar", faction: "TheBalgurMercenaries", con: 9, speed: 1.25, outfit: ["balgurMercArmour", 4], weapon: ["longSpikedMorningStar", [12, 5], 14, 20, 2.4], ranged: [false, "arrow", 4, 2000, 1, 6, 0, "none", 1.4], patrolStops: 2, patrolLoop: true, route:[[3414, 2337], [3785, 2716]]}));
                    }

                    //Scenery
                        //bandit Camp in the north east
                            //tents
                    scenicList.push(new Scenery("tent", 74 - 750, 5672, (0.5/5 * 2 * Math.PI), true));
                    scenicList.push(new Scenery("tent", 544 - 750, 5618, (4.5/5 * 2 * Math.PI), true));
                    scenicList.push(new Scenery("tent", 280 - 750, 5700, 0, true));
                    scenicList.push(new Scenery("tent", 255 - 750, 5249, Math.PI, true));
                    scenicList.push(new Scenery("tent", -12 - 750, 5426, 1/2 * Math.PI, true));
                            //campfire
                    scenicList.push(new Scenery("campFire", 248 - 750, 5494, 3/4 * Math.PI, true));
                        //Teshir Shop Stuff (outdoor until buildings are added)
                    scenicList.push(new Scenery("anvil", 1751, 948, Math.PI * 3.45/4, true));
                    scenicList.push(new Scenery("forge", 1770, 1086, Math.PI, true));
                    scenicList.push(new Scenery("loom", 2625, 1569, 1/2 * Math.PI, true));
                    scenicList.push(new Scenery("lab", 1217, 728, 0, true));
                    if (quests.theBrokenWellQuest == "complete")
                    {
                        scenicList.push(new Scenery("well", 2394, 1618, 0, true));
                    }
                    else
                    {
                        scenicList.push(new Scenery("brokenWell", 2394, 1618, 0, true));
                    }

                        //The lonely farm house
                    scenicList.push(new Scenery("rubbledHome", -1107, -1974, 0, true));
                        //its own broken well
                    scenicList.push(new Scenery("brokenWell", -1398, -1886, -2.74, true));
                        //its little farm
                    scenicList.push(new Scenery("harstPlant", -940 , -1944, Math.PI * 0.58, "freynor"));
                    scenicList.push(new Scenery("harstPlant", -987 , -2007, Math.PI * 1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", -892 , -2019, -Math.PI * 2.2, "freynor"));
                    scenicList.push(new Scenery("harstPlant", -822 , -1975, Math.PI * 3, "freynor"));
                    scenicList.push(new Scenery("harstPlant", -816 , -2069, -Math.PI * 0.4675, "freynor"));

                        //The City Farm
                    scenicList.push(new Scenery("harstPlant", 2241 , 240, Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2241 , 165, Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2241 , 52, -Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2241 , -31, Math.PI * 2, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2241 , -107, Math.PI * 2.45, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2241 , -197, -Math.PI * 1.66, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2241 , -286, -Math.PI * 0.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2329 , 240, -Math.PI * 2.2, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2329 , 166, Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2329 , 76, Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2329 , -17, Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2329 , -105, Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2329 , -197, Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2329 , -297, Math.PI * 3.1, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2422 , 240, Math.PI * 0.05, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2422 , 162, Math.PI * 0.05, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2422 , 71, Math.PI * 0.05, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2422 , -12, Math.PI * 0.05, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2422 , -95, Math.PI * 0.05, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2422 , -195, Math.PI * 0.05, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2422 , -289, Math.PI * 0.05, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2498 , 240, -Math.PI * 1.56, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2498 , 164, -Math.PI * 1.56, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2498 , 59, -Math.PI * 1.56, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2498 , -24, -Math.PI * 1.56, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2498 , -95, -Math.PI * 1.56, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2498 , -192, -Math.PI * 1.56, "freynor"));
                    scenicList.push(new Scenery("harstPlant", 2498 , -286, -Math.PI * 1.56, "freynor"));

                    scenicList.push(new Scenery("potatoPlant", 2566 , 240, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2566 , 193, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2566 , 165, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2566 , 118, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2566 , 84, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2566 , 140, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2603 , 240, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2603 , 206, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2603 , 179, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2603 , 138, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2603 , 113, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2603 , 83, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2668 , 240, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2668 , 221, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2668 , 194, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2668 , 153, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2668 , 122, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2668 , 86, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2696 , 240, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2696 , 214, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2696 , 178, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2696 , 147, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2696 , 111, 0, "freynor"));
                    scenicList.push(new Scenery("potatoPlant", 2696 , 81, 0, "freynor"));

                    scenicList.push(new Scenery("suuliPlant", 2686 , 6, 1, "freynor"));
                    scenicList.push(new Scenery("suuliPlant", 2686 , -59, 2, "freynor"));
                    scenicList.push(new Scenery("suuliPlant", 2628 , 5, 3, "freynor"));
                    scenicList.push(new Scenery("suuliPlant", 2628 , -60, 0, "freynor"));
                    scenicList.push(new Scenery("suuliPlant", 2566 , 3, -0.5, "freynor"));
                    scenicList.push(new Scenery("suuliPlant", 2566 , -61, 2.34, "freynor"));

                    scenicList.push(new Scenery("carrotPlant", 2559 , -138, 1.2, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -153, -2.1, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -168, -1.2, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -183, 3, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -198, 1.78, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -213, -0.4, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -228, -3, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -243, -1.2, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -258, 3, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -273, 1.78, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -288, -0.4, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2559 , -303, -3, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -138, -0.9, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -153, -2.8, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -168, -1.9, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -183, -2, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -198, 2.34, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -213, 0.5, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -228, 1, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -243, 0, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -258, 0.1, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -273, -0.95, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -288, -3.214, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2624 , -303, 2.867, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -138, -1.8, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -153, 2.1, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -168, -1.5667, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -183, 0, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -198, 1.3, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -213, 0.4, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -228, 3, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -243, -1.5, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -258, 1.5, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -273, 1.89, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -288, -0.21, "freynor"));
                    scenicList.push(new Scenery("carrotPlant", 2680 , -303, 0.3, "freynor"));

                    scenicList.push(new Scenery("santhPlant", 2763 , -310, Math.PI * 0.14, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -285, -Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -260, Math.PI * 1.8, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -235, -Math.PI * 2.34, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -210, Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -185, Math.PI * 0.14, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -160, -Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -135, Math.PI * 1.8, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -110, -Math.PI * 2.34, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2763 , -85, Math.PI * 3.2, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -310, Math.PI * 0.14, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -285, -Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -260, Math.PI * 1.8, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -235, -Math.PI * 2.34, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -210, Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -185, Math.PI * 0.14, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -160, -Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -135, Math.PI * 1.8, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -110, -Math.PI * 2.34, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2823 , -85, Math.PI * 3.2, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -310, Math.PI * 0.14, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -285, -Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -260, Math.PI * 1.8, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -235, -Math.PI * 2.34, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -210, Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -185, Math.PI * 0.14, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -160, -Math.PI * 0.44, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -135, Math.PI * 1.8, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -110, -Math.PI * 2.34, "freynor"));
                    scenicList.push(new Scenery("santhPlant", 2883 , -85, Math.PI * 3.2, "freynor"));

                    //plains plants
                    scenicList.push(new Scenery("techiPlant", 3781 , -1155, -Math.PI * 0.2, true));
                    scenicList.push(new Scenery("techiPlant", 5001 , 164, Math.PI * 0.5, true));
                    scenicList.push(new Scenery("techiPlant", 6014 , -1047, 3, true));

                    change = "central";
                }
            }
            else if (region == "n1") //Y > 6290 && Y < 32370
            {
                if (change != "n1")
                {
                    //Delete All Non-native AI Units
                    for (var i =  ArtificialIntelligenceAccess.length - 1; i >= 0; i--) //Splice will alter the list so the numbers will be off if you loop through beginning to end, so this for loop goes from the end to the beginning.
                    {
                        if (ArtificialIntelligenceAccess[i].playerSeen == false)
                        {
                            ArtificialIntelligenceAccess.splice(i, 1);
                            console.log(i + " in list 'AI access' has been deleted. " + ArtificialIntelligenceAccess.length);
                        }
                        else
                        {
                            console.log(i + " in list 'AI access' has been saved.");
                        }
                    }

                    //Delete All Non-native Items
                    //worldItems = [];

                    //Delete All Non-native Structures
                    //todo when structures are created add their list's refresh sequence here.

                    //Delete All Non-native Scenery
                    scenicList = [];

                    //REGION CREATION
                    //Build AI Units

                    //elder walruses
                    ArtificialIntelligenceAccess.push(new Unit(1600, 7790, "Walrus", true, "Ice Toby"));
                    ArtificialIntelligenceAccess.push(new Unit(2000, 7890, "Walrus", true, "Ice Tammy"));

                    //walruses
                    ArtificialIntelligenceAccess.push(new Unit(900, 7290, "Walrus", false, "Santa Claws"));
                    ArtificialIntelligenceAccess.push(new Unit(1200, 7290, "Walrus", false, "Mary Claws"));
                    ArtificialIntelligenceAccess.push(new Unit(325, 7290, "Walrus", false, "Big Boy Ringo"));

                    //winter wolves
                    ArtificialIntelligenceAccess.push(new Unit(2400, 8820, "WinterWolf", false, "Dogmeat"));
                    ArtificialIntelligenceAccess.push(new Unit(2600, 8940, "WinterWolf", false, "Husky"));
                    ArtificialIntelligenceAccess.push(new Unit(2500, 8600, "WinterWolf", false, "German"));
                    ArtificialIntelligenceAccess.push(new Unit(4000, 10000, "WinterWolf", true, "Ghost"));


                    //Scenery
                    scenicList.push(new Scenery("bushkaPlant", 2410 , 7578, 2.5, true));
                    //Gulfreys in the jungle
                    //ArtificialIntelligenceAccess.push(new Unit(3400, 8820, "Gulfrey", true, "Plikt"));
                    //ArtificialIntelligenceAccess.push(new Unit(3600, 8940, "Gulfrey", true, "Plakt"));
                    //for (var i = 0; i < 20; i++)
                    //{
                    //    ArtificialIntelligenceAccess.push(new Unit(3000 + (i * 40), 9250, "Gulfrey", false, null));
                    //}

                    change = "n1";
                }
            }
            else if (region == "w1") //Y > 6290 && Y < 32370
            {
                if (change != "w1")
                {
                    //Delete All Non-native AI Units
                    for (var i = ArtificialIntelligenceAccess.length - 1; i >= 0; i--) //Splice will alter the list so the numbers will be off if you loop through beginning to end, so this for loop goes from the end to the beginning.
                    {
                        if (ArtificialIntelligenceAccess[i].playerSeen == false)
                        {
                            ArtificialIntelligenceAccess.splice(i, 1);
                            console.log(i + " in list 'AI access' has been deleted. " + ArtificialIntelligenceAccess.length);
                        }
                        else
                        {
                            console.log(i + " in list 'AI access' has been saved.");
                        }
                    }

                    //Delete All Non-native Items
                    //worldItems = [];

                    //Delete All Non-native Structures
                    //todo when structures are created add their list's refresh sequence here.

                    //Delete All Non-native Scenery
                    scenicList = [];

                    //REGION CREATION
                    //Build AI Units

                    //berulns in the west
                    ArtificialIntelligenceAccess.push(new Unit(10700, 1100, "Beruln", true, "Grug"));
                    ArtificialIntelligenceAccess.push(new Unit(10700, 500, "Beruln", false, "Dak"));
                    ArtificialIntelligenceAccess.push(new Unit(11900, 1300, "Beruln", false, "Nosh"));
                    ArtificialIntelligenceAccess.push(new Unit(12000, 2000, "Beruln", true, "Drelk"));
                    ArtificialIntelligenceAccess.push(new Unit(13800, 3500, "Beruln", false, "Kagim"));

                    change = "w1";
                }
            }
            else if (region == "e1") //Y > 6290 && Y < 32370
            {
                if (change != "e1")
                {
                    //Delete All Non-native AI Units
                    for (var i = ArtificialIntelligenceAccess.length - 1; i >= 0; i--) //Splice will alter the list so the numbers will be off if you loop through beginning to end, so this for loop goes from the end to the beginning.
                    {
                        if (ArtificialIntelligenceAccess[i].playerSeen == false)
                        {
                            ArtificialIntelligenceAccess.splice(i, 1);
                            console.log(i + " in list 'AI access' has been deleted. " + ArtificialIntelligenceAccess.length);
                        }
                        else
                        {
                            console.log(i + " in list 'AI access' has been saved.");
                        }
                    }

                    //Delete All Non-native Items
                    //worldItems = [];

                    //Delete All Non-native Structures
                    //todo when structures are created add their list's refresh sequence here.

                    //Delete All Non-native Scenery
                    scenicList = [];

                    //REGION CREATION
                    //Build AI Units

                    //ArtificialIntelligenceAccess.push(new Unit(1300, 2000, "BlackBear", "giant", "Lugtug"));

                    //Shehids in the forest
                    ArtificialIntelligenceAccess.push(new Unit(-8690, 2326, "Shehid", false, "clamgirl"));
                    ArtificialIntelligenceAccess.push(new Unit(-8880, 2875, "Shehid", false, "clamboy"));
                    ArtificialIntelligenceAccess.push(new Unit(-8860, 3275, "Shehid", false, "berch"));
                    ArtificialIntelligenceAccess.push(new Unit(-9490, 2941, "Shehid", false, "shamble"));
                    ArtificialIntelligenceAccess.push(new Unit(-8216, 3766, "Shehid", false, "timbson"));
                    ArtificialIntelligenceAccess.push(new Unit(-7519, 583, "Shehid", false, "timberly"));
                    ArtificialIntelligenceAccess.push(new Unit(-7460, 544, "Shehid", false, "timbar"));
                    ArtificialIntelligenceAccess.push(new Unit(-7480, 504, "Shehid", false, "timblin"));
                    ArtificialIntelligenceAccess.push(new Unit(-8094, 739, "Shehid", false, "timblo"));
                    ArtificialIntelligenceAccess.push(new Unit(-8005, 786, "Shehid", false, "timbla"));
                    ArtificialIntelligenceAccess.push(new Unit(-8080, 646, "Shehid", false, "timbli"));
                    ArtificialIntelligenceAccess.push(new Unit(-8066, 159, "Shehid", true, "timblik"));
                    ArtificialIntelligenceAccess.push(new Unit(-10170, 4248, "Shehid", true, "liklim"));
                    ArtificialIntelligenceAccess.push(new Unit(-9838, 4451, "Shehid", true, "ogklip"));
                    ArtificialIntelligenceAccess.push(new Unit(-9715, 4227, "Shehid", true, "lipsorn"));
                    ArtificialIntelligenceAccess.push(new Unit(-9198, 4538, "Shehid", false, "lipi"));
                    ArtificialIntelligenceAccess.push(new Unit(-12332, -723, "Shehid", true, "lipthorn"));
                    ArtificialIntelligenceAccess.push(new Unit(-12410, 4867, "Shehid", true, "galtong"));
                    ArtificialIntelligenceAccess.push(new Unit(-11427, 3467, "Shehid", false, "tooblo"));
                    ArtificialIntelligenceAccess.push(new Unit(-11470, 3506, "Shehid", false, "toobla"));
                    ArtificialIntelligenceAccess.push(new Unit(-12564, -2860, "Shehid", true, "pipthorn"));
                    ArtificialIntelligenceAccess.push(new Unit(-12354, -2884, "Shehid", false, "toobli"));
                    ArtificialIntelligenceAccess.push(new Unit(-12334, -3126, "Shehid", false, "tooble"));
                    ArtificialIntelligenceAccess.push(new Unit(-12465, -3230, "Shehid", false, "tooblu"));
                    ArtificialIntelligenceAccess.push(new Unit(-8377, 568, "Shehid", false, "fooblo"));
                    ArtificialIntelligenceAccess.push(new Unit(-8518, 319, "Shehid", false, "foobla"));
                    ArtificialIntelligenceAccess.push(new Unit(-8555, 411, "Shehid", false, "foobli"));
                    ArtificialIntelligenceAccess.push(new Unit(-8500, 627, "Shehid", false, "fooble"));
                    ArtificialIntelligenceAccess.push(new Unit(-8293, 713, "Shehid", false, "fooblu"));
                    ArtificialIntelligenceAccess.push(new Unit(-8410, 878, "Shehid", false, "kuabo"));
                    ArtificialIntelligenceAccess.push(new Unit(-8955, 936, "Shehid", true, "ogklap"));
                    ArtificialIntelligenceAccess.push(new Unit(-9056, -1588, "Shehid", true, "Giglap"));
                    ArtificialIntelligenceAccess.push(new Unit(-8946, -1755, "Shehid", false, "Gigi"));
                    ArtificialIntelligenceAccess.push(new Unit(-8867, -1724, "Shehid", false, "Giga"));
                    ArtificialIntelligenceAccess.push(new Unit(-9251, -1724, "Shehid", false, "Gigil"));
                    ArtificialIntelligenceAccess.push(new Unit(-9257, -1606, "Shehid", false, "Gigli"));
                    ArtificialIntelligenceAccess.push(new Unit(-9463, 4504, "Shehid", false, "Giglo"));
                    ArtificialIntelligenceAccess.push(new Unit(-9351, 4391, "Shehid", false, "Gigo"));
                    ArtificialIntelligenceAccess.push(new Unit(-9404, 4137, "Shehid", true, "timbap"));
                    ArtificialIntelligenceAccess.push(new Unit(-9062, 4191, "Shehid", false, "timbri"));
                    ArtificialIntelligenceAccess.push(new Unit(-9270, 4377, "Shehid", false, "timbro"));
                    ArtificialIntelligenceAccess.push(new Unit(-8787, 4040, "Shehid", false, "timbra"));

                    //Vipers
                    ArtificialIntelligenceAccess.push(new Unit(-9607, 2648, "Viper", false, "slitherz"));
                    ArtificialIntelligenceAccess.push(new Unit(-11027, 239, "Viper", false, "Serpil"));

                    //narthwarps
                    ArtificialIntelligenceAccess.push(new Unit(-11292, 3177, "Narthwarp", true, "krinklestitch"));
                    ArtificialIntelligenceAccess.push(new Unit(-10291, -2926, "Narthwarp", false, "krinklestitchenheimerIII"));
                    ArtificialIntelligenceAccess.push(new Unit(-10449, -2880, "Narthwarp", false, "krinklestitchenheimerII"));
                    ArtificialIntelligenceAccess.push(new Unit(-10398, -3076, "Narthwarp", false, "krinklestitchenheimerI"));
                    ArtificialIntelligenceAccess.push(new Unit(-12321, -1836, "Narthwarp", true, "Kacklkromf"));
                    ArtificialIntelligenceAccess.push(new Unit(-12708, -1973, "Narthwarp", false, "kacklkromfenheimerI"));
                    ArtificialIntelligenceAccess.push(new Unit(-12549, -1447, "Narthwarp", false, "kacklkromfenheimerII"));
                    ArtificialIntelligenceAccess.push(new Unit(-12662, -1314, "Narthwarp", false, "kacklkromfenheimerIII"));
                    ArtificialIntelligenceAccess.push(new Unit(-9366, -1072, "Narthwarp", false, "Mokinshanks"));
                    ArtificialIntelligenceAccess.push(new Unit(-9330, -1403, "Narthwarp", false, "Kronkenstocks"));
                    ArtificialIntelligenceAccess.push(new Unit(-8989, -1015, "Narthwarp", false, "Bokinshanks"));
                    ArtificialIntelligenceAccess.push(new Unit(-9117, -713, "Narthwarp", false, "Fronkenstocks"));

                    //Varns of the woodlands
                    ArtificialIntelligenceAccess.push(new Unit(-7847, -139, "Varn", true, "rain"));
                    ArtificialIntelligenceAccess.push(new Unit(-7462, -39, "Varn", true, "sun"));
                    ArtificialIntelligenceAccess.push(new Unit(-7105, -695, "Varn", false, "snow"));
                    ArtificialIntelligenceAccess.push(new Unit(-8007, -989, "Varn", true, "wind"));
                    ArtificialIntelligenceAccess.push(new Unit(-10694, 2278, "Varn", true, "si"));
                    ArtificialIntelligenceAccess.push(new Unit(-11065, 2029, "Varn", true, "no"));
                    ArtificialIntelligenceAccess.push(new Unit(-10738, 2083, "Varn", true, "gracias"));
                    ArtificialIntelligenceAccess.push(new Unit(-11350, 2166, "Varn", false, "denada"));
                    ArtificialIntelligenceAccess.push(new Unit(-11276, 1877, "Varn", true, "todos"));
                    ArtificialIntelligenceAccess.push(new Unit(-10630, 2151, "Varn", false, "ningunos"));
                    ArtificialIntelligenceAccess.push(new Unit(-7303, -3040, "Varn", true, "hail"));
                    ArtificialIntelligenceAccess.push(new Unit(-7116, -3121, "Varn", true, "storm"));
                    ArtificialIntelligenceAccess.push(new Unit(-6537, -3078, "Varn", true, "will"));
                    ArtificialIntelligenceAccess.push(new Unit(-6983, -2796, "Varn", true, "eatyou"));
                    ArtificialIntelligenceAccess.push(new Unit(-11059, -839, "Varn", true, "wewill"));
                    ArtificialIntelligenceAccess.push(new Unit(-11155, -958, "Varn", false, "wewil"));
                    ArtificialIntelligenceAccess.push(new Unit(-11311, -1134, "Varn", true, "lrock"));
                    ArtificialIntelligenceAccess.push(new Unit(-11420, -1109, "Varn", false, "you!"));
                    ArtificialIntelligenceAccess.push(new Unit(-11613, -1079, "Varn", false, "Living"));
                    ArtificialIntelligenceAccess.push(new Unit(-11783, -1025, "Varn", true, "ona"));
                    ArtificialIntelligenceAccess.push(new Unit(-11664, -901, "Varn", true, "sunnybeach"));
                    ArtificialIntelligenceAccess.push(new Unit(-11890, -897, "Varn", true, "heckyeah!!!"));
                    ArtificialIntelligenceAccess.push(new Unit(-7175, 5260, "Varn", true, "johny"));
                    ArtificialIntelligenceAccess.push(new Unit(-7497, 5379, "Varn", true, "james"));
                    ArtificialIntelligenceAccess.push(new Unit(-7517, 5188, "Varn", true, "jillian"));
                    ArtificialIntelligenceAccess.push(new Unit(-7513, 4941, "Varn", true, "jude"));
                    ArtificialIntelligenceAccess.push(new Unit(-7374, 4660, "Varn", true, "julian"));
                    ArtificialIntelligenceAccess.push(new Unit(-7625, 4700, "Varn", true, "july"));
                    ArtificialIntelligenceAccess.push(new Unit(-6621, 4758, "Varn", true, "jekkle"));
                    ArtificialIntelligenceAccess.push(new Unit(-6580, 4418, "Varn", false, "jazz"));
                    ArtificialIntelligenceAccess.push(new Unit(-6799, 3911, "Varn", true, "June"));
                    ArtificialIntelligenceAccess.push(new Unit(-7090, 3991, "Varn", false, "Jed"));
                    ArtificialIntelligenceAccess.push(new Unit(-6317, 204, "Varn", true, "Tal"));
                    ArtificialIntelligenceAccess.push(new Unit(-6594, 46, "Varn", true, "Til"));
                    ArtificialIntelligenceAccess.push(new Unit(-7581, -1658, "Varn", true, "Tyl"));
                    ArtificialIntelligenceAccess.push(new Unit(-7128, 1989, "Varn", false, "Tol"));
                    ArtificialIntelligenceAccess.push(new Unit(-5986, 2947, "Varn", true, "Tul"));
                    ArtificialIntelligenceAccess.push(new Unit(-6329, -3246, "Varn", false, "Tel"));
                    ArtificialIntelligenceAccess.push(new Unit(-5897, -3461, "Varn", false, "Tela"));
                    ArtificialIntelligenceAccess.push(new Unit(-4240, -1519, "Varn", true, "Tula"));

                    //lions tigers and BLACKBEARS oh my!
                    ArtificialIntelligenceAccess.push(new Unit(-11630, 5669, "BlackBear", true, "Jugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-12041, 4710, "BlackBear", false, "Yugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-12275, 4426, "BlackBear", true, "Pugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-12170, 6191, "BlackBear", false, "Tugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-7769, 640, "BlackBear", false, "Hugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-12765, -2427, "BlackBear", true, "Nugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-9195, -3204, "BlackBear", false, "Luvtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-11660, -1679, "BlackBear", false, "Duvtuv"));
                    ArtificialIntelligenceAccess.push(new Unit(-12407, -86, "BlackBear", false, "Guvtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-12203, 677, "BlackBear", false, "Ruvtuv"));
                    ArtificialIntelligenceAccess.push(new Unit(-12686, 843, "BlackBear", true, "Mugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-8550, 6131, "BlackBear", true, "Grugtug"));
                    ArtificialIntelligenceAccess.push(new Unit(-8251, 5968, "BlackBear", false, "Yuvtuv"));
                    ArtificialIntelligenceAccess.push(new Unit(-10860, 5750, "BlackBear", false, "Juvtuv"));
                    ArtificialIntelligenceAccess.push(new Unit(-9664, -2658, "BlackBear", true, "Ugug"));

                    //ferocious gribs...
                    ArtificialIntelligenceAccess.push(new Unit(-11836, 3742, "Grib", true, "stuckan"));
                    ArtificialIntelligenceAccess.push(new Unit(-11601, 3904, "Grib", true, "frukkan"));
                    ArtificialIntelligenceAccess.push(new Unit(-9993, 3965, "Grib", true, "fuckan"));
                    ArtificialIntelligenceAccess.push(new Unit(-7932, -2046, "Grib", false, "lucytoodlewop"));
                    ArtificialIntelligenceAccess.push(new Unit(-8480, -1979, "Grib", false, "mandybibblbop"));
                    ArtificialIntelligenceAccess.push(new Unit(-7960, -2824, "Grib", true, "buckan"));
                    ArtificialIntelligenceAccess.push(new Unit(-11080, -3075, "Grib", true, "truckan"));
                    ArtificialIntelligenceAccess.push(new Unit(-11318, -3167, "Grib", true, "krukkan"));
                    ArtificialIntelligenceAccess.push(new Unit(-11579, -3048, "Grib", false, "tucytoodletop"));
                    ArtificialIntelligenceAccess.push(new Unit(-13110, -514, "Grib", true, "Gruckan"));
                    ArtificialIntelligenceAccess.push(new Unit(-9919, 5837, "Grib", false, "Gucytoodlewop"));
                    ArtificialIntelligenceAccess.push(new Unit(-9269, 5971, "Grib", false, "Tandybibblbop"));
                    ArtificialIntelligenceAccess.push(new Unit(-9446, 5542, "Grib", false, "Quilcytoodlewop"));
                    ArtificialIntelligenceAccess.push(new Unit(-9827, 5637, "Grib", false, "Vandybibblbop"));
                    ArtificialIntelligenceAccess.push(new Unit(-6214, 3512, "Grib", true, "Vandybibblbeed"));

                    //naaprids of the southern grasslands
                    ArtificialIntelligenceAccess.push(new Unit(-5031, -2683, "Naaprid", "baby", "Naarimo"));
                    ArtificialIntelligenceAccess.push(new Unit(-4966, -2960, "Naaprid", false, "Naaste"));
                    ArtificialIntelligenceAccess.push(new Unit(-5207, -2871, "Naaprid", false, "kaaste"));
                    ArtificialIntelligenceAccess.push(new Unit(-5169, -3136, "Naaprid", false, "Laaste"));
                    ArtificialIntelligenceAccess.push(new Unit(-3817, -3336, "Naaprid", false, "phaashe"));
                    ArtificialIntelligenceAccess.push(new Unit(-4940, -2567, "Naaprid", true, "Yaahmo"));

                    //friches of the grasslands before the wuncwer woods
                    ArtificialIntelligenceAccess.push(new Unit(-3891, -2492, "Frich", false, "Sansa"));
                    ArtificialIntelligenceAccess.push(new Unit(-3961, -2617, "Frich", false, "Aria"));

                    if (player.level > 8 && player.level < 13 || Math.floor(Math.random() * 9) == 8) // summon giant friches if between these levels.
                    {
                        ArtificialIntelligenceAccess.push(new Unit(-5441, -2609, "Frich", "massive", "Edard"));
                        ArtificialIntelligenceAccess.push(new Unit(-5434, -2411, "Frich", "massive", "Robert"));
                        ArtificialIntelligenceAccess.push(new Unit(-5570, -2522, "Frich", "massive", "Stannis"));
                    }
                    else
                    {
                        ArtificialIntelligenceAccess.push(new Unit(-3797, -2540, "Frich", true, "Edard"));
                        ArtificialIntelligenceAccess.push(new Unit(-5434, -2411, "Frich", false, "Robert"));
                        ArtificialIntelligenceAccess.push(new Unit(-5342, -2290, "Frich", false, "Stannis"));
                    }
                    ArtificialIntelligenceAccess.push(new Unit(-5110, -2116, "Frich", false, "Renely"));

                    ArtificialIntelligenceAccess.push(new Unit(-5334, -1338, "Frich", true, "Tjon"));
                    ArtificialIntelligenceAccess.push(new Unit(-5593, -1410, "Frich", false, "Sam"));
                    ArtificialIntelligenceAccess.push(new Unit(-5990, -910, "Frich", false, "RedDeadWalder"));
                    ArtificialIntelligenceAccess.push(new Unit(-5508, -566, "Frich", true, "Robbstar"));

                    ArtificialIntelligenceAccess.push(new Unit(-4086, 159, "Frich", true, "Ramsay"));
                    ArtificialIntelligenceAccess.push(new Unit(-4591, -361, "Frich", false, "Umber"));
                    ArtificialIntelligenceAccess.push(new Unit(-4428, -2500, "Frich", false, "Tormund"));
                    ArtificialIntelligenceAccess.push(new Unit(-5508, -566, "Frich", true, "Daavos"));

                    ArtificialIntelligenceAccess.push(new Unit(-4318, -3341, "Frich", false, "inspector"));
                    ArtificialIntelligenceAccess.push(new Unit(-4688, -3525, "Frich", true, "Harold"));
                    ArtificialIntelligenceAccess.push(new Unit(-5143, 2663, "Frich", true, "gadget"));
                    ArtificialIntelligenceAccess.push(new Unit(-4428, 2433, "Frich", true, "toolbox"));

                    ArtificialIntelligenceAccess.push(new Unit(-4757, 4016, "Frich", true, "Gizmo"));
                    ArtificialIntelligenceAccess.push(new Unit(-5201, 5973, "Frich", true, "Gear"));

                    //Trees of the forest
                    scenicList.push(new Scenery("pineTree", -7703 , 1761, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -7319 , 2158, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -7918 , 2493, 0, true));
                    scenicList.push(new Scenery("pineTree", -7110 , 2531, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -7087 , 2950, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -7632 , 2872, 0.19, true));
                    scenicList.push(new Scenery("pineTree", -7427 , 3301, 1.87 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -7061 , 3661, - Math.PI * 1.33, true));
                    scenicList.push(new Scenery("pineTree", -7800 , 3550, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -8284 , 3238, Math.PI * 1.61, true));
                    scenicList.push(new Scenery("pineTree", -8340 , 2685, - Math.PI * 0.91, true));
                    scenicList.push(new Scenery("pineTree", -8155 , 2015, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -7714 , 3982, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -8399 , 3798, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -8743 , 3450, 0, true));
                    scenicList.push(new Scenery("pineTree", -8926 , 2996, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -8743 , 2291, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -8525 , 1670, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -9151 , 1782, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -9362 , 2188, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -9395 , 2720, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -9642 , 3192, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -9325 , 3380, Math.PI * 0.33, true));
                    scenicList.push(new Scenery("pineTree", -9090 , 3989, - 0.77, true));
                    scenicList.push(new Scenery("pineTree", -7316 , 1029, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -7765 , 940, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -7479 , 711, 0, true));
                    scenicList.push(new Scenery("pineTree", -7994 , 834, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -7514 , 458, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -8097 , 566, 0.19, true));
                    scenicList.push(new Scenery("pineTree", -7160 , 59, - Math.PI * 1.33, true));
                    scenicList.push(new Scenery("pineTree", -7969 , 87, 1.87 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -8431 , 160, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -8451 , 4238, Math.PI * 1.61, true));
                    scenicList.push(new Scenery("pineTree", -8741 , 4800, - Math.PI * 0.91, true));
                    scenicList.push(new Scenery("pineTree", -9093 , 4430, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -9666 , 4132, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -9920 , 3648, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -10249 , 3374, 0, true));
                    scenicList.push(new Scenery("pineTree", -9999 , 2766, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -9820 , 2337, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -10049 , 1824, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -9652 , 1798, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -8554 , 925, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -8781 , 522, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -9014 , 39, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -8653 , -317, Math.PI * 0.33, true));
                    scenicList.push(new Scenery("pineTree", -7708 , -319, - 0.77, true));
                    scenicList.push(new Scenery("pineTree", -8189 , -266, 0.56, true));
                    scenicList.push(new Scenery("pineTree", -7885 , -733, 0.995, true));
                    scenicList.push(new Scenery("pineTree", -7896 , -1224, - Math.PI * 0.666, true));
                    scenicList.push(new Scenery("pineTree", -8270 , -971, 0.454545, true));
                    scenicList.push(new Scenery("pineTree", -8702 , -727, - 0.126, true));
                    scenicList.push(new Scenery("pineTree", -9432 , -354, 0.65, true));
                    scenicList.push(new Scenery("pineTree", -8519 , 5313, Math.PI * 0.21, true));
                    scenicList.push(new Scenery("pineTree", -9431 , 4798, - 0.283, true));
                    scenicList.push(new Scenery("pineTree", -9919 , 4570, -0.19, true));
                    scenicList.push(new Scenery("pineTree", -10308 , 4227, 0.26, true));
                    scenicList.push(new Scenery("pineTree", -10453 , 3825, 0.066, true));
                    scenicList.push(new Scenery("pineTree", -10923 , 4107, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -11056 , 3599, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -10740 , 3190, 0, true));
                    scenicList.push(new Scenery("pineTree", -10583 , 2834, Math.PI * 1.55, true));
                    scenicList.push(new Scenery("pineTree", -10612 , 2370, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -10448 , 2047, 0.16, true));
                    scenicList.push(new Scenery("pineTree", -10572 , 1661, 1.93 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -10953 , 1579, - Math.PI * 1.33, true));
                    scenicList.push(new Scenery("pineTree", -11358 , 3550, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -12008 , 1780, Math.PI * 1.61, true));
                    scenicList.push(new Scenery("pineTree", -11401 , 1922, - Math.PI * 0.91, true));
                    scenicList.push(new Scenery("pineTree", -11539 , 1630, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -12573 , 1643, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -12635 , 2024, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -12515 , 2375, 0.1, true));
                    scenicList.push(new Scenery("pineTree", -11440 , 2401, -48.1, true));
                    scenicList.push(new Scenery("pineTree", -10936 , 2016, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -11183 , 2742, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -11025 , 2984, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -11590 , 3174, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -11921 , 3713, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -11604 , 3829, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -11311 , 3952, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -11245 , 4527, Math.PI * 0.33, true));
                    scenicList.push(new Scenery("pineTree", -10739 , 4526, - 0.80, true));
                    scenicList.push(new Scenery("pineTree", -10336 , 4787, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -9734 , 5002, Math.PI * 0.65, true));
                    scenicList.push(new Scenery("pineTree", -10894 , 4991, -Math.PI * 1.25, true));
                    scenicList.push(new Scenery("pineTree", -10183 , 5372, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -9067 , 5036, 0.995, true));
                    scenicList.push(new Scenery("pineTree", -9449 , 5429, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -8885 , 5550, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -8545 , 5837, - Math.PI * 0.50, true));
                    scenicList.push(new Scenery("pineTree", -9187 , 6047, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -9077 , 6365, Math.PI * 0.33, true));
                    scenicList.push(new Scenery("pineTree", -8313 , 6303, Math.PI * 1.24, true));
                    scenicList.push(new Scenery("pineTree", -7475 , 6291, 0.27, true));
                    scenicList.push(new Scenery("pineTree", -7921 , 6103, - 0.40, true));
                    scenicList.push(new Scenery("pineTree", -7804 , 5809, Math.PI * 0.20, true));
                    scenicList.push(new Scenery("pineTree", -9923 , 5734, 0.2, true));
                    scenicList.push(new Scenery("pineTree", -9864 , 6233, Math.PI * 1.24, true));
                    scenicList.push(new Scenery("pineTree", -10591 , 6072, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -10783 , 6306, - Math.PI * 1.33, true));
                    scenicList.push(new Scenery("pineTree", -11250 , 5783, 1.87 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -11392 , 4881, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -11725 , 4243, Math.PI * 1.61, true));
                    scenicList.push(new Scenery("pineTree", -12296 , 4005, - Math.PI * 0.91, true));
                    scenicList.push(new Scenery("pineTree", -12193 , 3257, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -11689 , 2800, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -11972 , 2192, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -10249 , 3374, 0, true));
                    scenicList.push(new Scenery("pineTree", -12220 , 2789, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -12853 , 2723, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -10049 , 1824, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -13093 , 2211, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -13164 , 1675, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -10576 , 5660, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -11448 , 5333, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -11935 , 4582, - 0.77, true));
                    scenicList.push(new Scenery("pineTree", -11526 , 6213, 0.56, true));
                    scenicList.push(new Scenery("pineTree", -11860 , 6012, 0.995, true));
                    scenicList.push(new Scenery("pineTree", -12024 , 5545, - Math.PI * 0.666, true));
                    scenicList.push(new Scenery("pineTree", -11899 , 5050, 0.454545, true));
                    scenicList.push(new Scenery("pineTree", -12542 , 6099, - 0.126, true));
                    scenicList.push(new Scenery("pineTree", -12891 , 5725, 0.65, true));
                    scenicList.push(new Scenery("pineTree", -13251 , 6393, Math.PI * 0.21, true));
                    scenicList.push(new Scenery("pineTree", -12082 , 6404, - 0.283, true));
                    scenicList.push(new Scenery("pineTree", -12650 , 5221, -0.19, true));
                    scenicList.push(new Scenery("pineTree", -13097 , 4946, 0.26, true));
                    scenicList.push(new Scenery("pineTree", -12725 , 4595, 0.066, true));
                    scenicList.push(new Scenery("pineTree", -13011 , 3906, - 0.40, true));
                    scenicList.push(new Scenery("pineTree", -12663 , 3593, Math.PI * 0.20, true));
                    scenicList.push(new Scenery("pineTree", -13022 , 3142, 0.2, true));
                    scenicList.push(new Scenery("pineTree", -12583 , 3044, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -9214 , 892, -Math.PI * 1.25, true));
                    scenicList.push(new Scenery("pineTree", -9615 , 1045, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -9823 , 20, 0.995, true));
                    scenicList.push(new Scenery("pineTree", -8217 , -1658, - Math.PI * 0.50, true));
                    scenicList.push(new Scenery("pineTree", -7891 , -1934, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -7370 , -2314, Math.PI * 0.33, true));
                    scenicList.push(new Scenery("pineTree", -7139 , -3469, Math.PI * 1.24, true));
                    scenicList.push(new Scenery("pineTree", -7245 , -3134, 0.27, true));
                    scenicList.push(new Scenery("pineTree", -9322 , 437, - 0.40, true));
                    scenicList.push(new Scenery("pineTree", -10063 , 713, Math.PI * 0.20, true));
                    scenicList.push(new Scenery("pineTree", -10309 , 243, 0.2, true));
                    scenicList.push(new Scenery("pineTree", -9978 , -465, Math.PI * 1.24, true));
                    scenicList.push(new Scenery("pineTree", -9245 , -705, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -8896 , -1116, - Math.PI * 1.33, true));
                    scenicList.push(new Scenery("pineTree", -11250 , 5783, 1.87 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -8684 , -1417, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -8455 , -2074, Math.PI * 1.61, true));
                    scenicList.push(new Scenery("pineTree", -7879 , -2381, - Math.PI * 0.91, true));
                    scenicList.push(new Scenery("pineTree", -7395 , -2737, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -7737 , -3007, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -7693 , -3388, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -8189 , -2732, 0, true));
                    scenicList.push(new Scenery("pineTree", -8213 , -3275, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -8500 , -3458, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -8904 , -3271, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -9120 , -3546, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -9665 , -3381, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -9772 , -2970, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -9539 , -2410, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -9194 , -2915, - 0.77, true));
                    scenicList.push(new Scenery("pineTree", -8634 , -2906, 0.56, true));
                    scenicList.push(new Scenery("pineTree", -8846 , -2378, 0.995, true));
                    scenicList.push(new Scenery("pineTree", -9027 , -1800, - Math.PI * 0.666, true));
                    scenicList.push(new Scenery("pineTree", -9454 , -1422, 0.454545, true));
                    scenicList.push(new Scenery("pineTree", -10054 , -1709, - 0.126, true));
                    scenicList.push(new Scenery("pineTree", -10143 , -2230, 0.65, true));
                    scenicList.push(new Scenery("pineTree", -10155 , -2715, Math.PI * 0.21, true));
                    scenicList.push(new Scenery("pineTree", -10087 , -3247, - 0.283, true));
                    scenicList.push(new Scenery("pineTree", -10340 , -3485, -0.19, true));
                    scenicList.push(new Scenery("pineTree", -10708 , -3304, 0.26, true));
                    scenicList.push(new Scenery("pineTree", -10591 , 557, 0.066, true));
                    scenicList.push(new Scenery("pineTree", -10433 , 990, - 0.40, true));
                    scenicList.push(new Scenery("pineTree", -11134 , 889, Math.PI * 0.20, true));
                    scenicList.push(new Scenery("pineTree", -10553 , -117, 0.23467, true));
                    scenicList.push(new Scenery("pineTree", -10620 , -573, 0.37, true));
                    scenicList.push(new Scenery("pineTree", -11684 , 1035, 0.19, true));
                    scenicList.push(new Scenery("pineTree", -11574 , 557, 1.87 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -11037 , 319, - Math.PI * 1.33, true));
                    scenicList.push(new Scenery("pineTree", -11063 , -160, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -11296 , -475, Math.PI * 1.61, true));
                    scenicList.push(new Scenery("pineTree", -10957 , -904, - Math.PI * 0.91, true));
                    scenicList.push(new Scenery("pineTree", -10408 , -1066, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -9813 , -855, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -10063 , -1277, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -10673 , -2910, 0, true));
                    scenicList.push(new Scenery("pineTree", -11317 , -3284, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -12008 , -3076, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -12445 , -3415, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -10452 , -1525, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -10634 , -1999, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -10572 , -2536, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -11802 , -3406, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -12137 , 1018, Math.PI * 0.33, true));
                    scenicList.push(new Scenery("pineTree", -13073 , -3473, - 0.77, true));
                    scenicList.push(new Scenery("pineTree", -12807 , -3020, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -13094 , -2621, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -12440 , -2139, 0, true));
                    scenicList.push(new Scenery("pineTree", -12634 , 915, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -13149 , 1028, - Math.PI * 0.19, true));
                    scenicList.push(new Scenery("pineTree", -12778 , 670, 0.19, true));
                    scenicList.push(new Scenery("pineTree", -13103 , 381, - Math.PI * 1.33, true));
                    scenicList.push(new Scenery("pineTree", -12750 , 128, 1.87 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -13105 , -609, - 0.25, true));
                    scenicList.push(new Scenery("pineTree", -12693 , -1046, Math.PI * 1.61, true));
                    scenicList.push(new Scenery("pineTree", -12994 , -1378, - Math.PI * 0.91, true));
                    scenicList.push(new Scenery("pineTree", -12778 , -1823, 0.32, true));
                    scenicList.push(new Scenery("pineTree", -13100 , -1978, Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -12501 , -2696, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -12004 , -2395, 0, true));
                    scenicList.push(new Scenery("pineTree", -11552 , -2709, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -11084 , -2969, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -11138 , -2620, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -11009 , -1658, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -10875 , -1273, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -11771 , -879, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -11539 , -11, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -13155 , -213, Math.PI * 0.63, true));
                    scenicList.push(new Scenery("pineTree", -12654 , -352, 0, true));
                    scenicList.push(new Scenery("pineTree", -12388 , -742, Math.PI * 1.45, true));
                    scenicList.push(new Scenery("pineTree", -12297 , -1401, Math.PI * 0.72, true));
                    scenicList.push(new Scenery("pineTree", -12041 , -1866, - 0.39, true));
                    scenicList.push(new Scenery("pineTree", -11418 , -2293, 1.98 * Math.PI, true));
                    scenicList.push(new Scenery("pineTree", -11077 , -2148, Math.PI * 1.53, true));
                    scenicList.push(new Scenery("pineTree", -11568 , -1864, - 0.50, true));
                    scenicList.push(new Scenery("pineTree", -11381 , -1227, - Math.PI * 1.20, true));
                    scenicList.push(new Scenery("pineTree", -12263 , -638, - 0.77, true));
                    scenicList.push(new Scenery("pineTree", -11751 , -1497, Math.PI * 0.68, true));
                    scenicList.push(new Scenery("pineTree", -12002 , -324, -0.454545, true));
                    scenicList.push(new Scenery("pineTree", -12193 , 88, - 0.126, true));
                    scenicList.push(new Scenery("pineTree", -12332 , 430, 0.54, true));
                    scenicList.push(new Scenery("pineTree", -12017 , 569, Math.PI * 0.21, true));

                    //plants of the forest
                    scenicList.push(new Scenery("neprilnePlant", -9639 , 2010, 0.11, true));
                    scenicList.push(new Scenery("neprilnePlant", -10556 , -1226, -0.39, true));
                    scenicList.push(new Scenery("neprilnePlant", -7891 , -297, 0.47, true));
                    scenicList.push(new Scenery("stomwikPlant", -11300 , -195, -0.25, true));
                    scenicList.push(new Scenery("stomwikPlant", -11227 , 3073, 0.25, true));
                    scenicList.push(new Scenery("akerPlant", -8231 , 3819, 0.25, true));
                    scenicList.push(new Scenery("akerPlant", -9761 , 2581, -0.35, true));
                    scenicList.push(new Scenery("akerPlant", -9448 , 4934, 0.85, true));
                    scenicList.push(new Scenery("pluttPlant", -11859 , 4788, -1.99, true));
                    scenicList.push(new Scenery("pluttPlant", -12504 , 4632, -1.99, true));
                    scenicList.push(new Scenery("tylunPlant", -12021 , 4296, 0, true));
                    scenicList.push(new Scenery("akerPlant", -12083 , 3772, 0.38, true));
                    scenicList.push(new Scenery("culprisPlant", -11508 , 3369, 3, true));
                    scenicList.push(new Scenery("culprisPlant", -11188 , 2437, 1, true));
                    scenicList.push(new Scenery("neprilnePlant", -12402 , 5071, -0.12, true));
                    scenicList.push(new Scenery("akerPlant", -12137 , 6239, 0.67, true));
                    scenicList.push(new Scenery("akerPlant", -7797 , 584, 2.15, true));
                    scenicList.push(new Scenery("stomwikPlant", -8318 , -1954, -2.25, true));
                    scenicList.push(new Scenery("pluttPlant", -7905 , -3013, Math.PI, true));
                    scenicList.push(new Scenery("culprisPlant", -10581 , -3108, -2, true));
                    scenicList.push(new Scenery("neprilnePlant", -11731 , -3186, 0.15, true));
                    scenicList.push(new Scenery("neprilnePlant", -12416 , -3062, -0.45, true));
                    scenicList.push(new Scenery("stomwikPlant", -12630 , -3084, 1.16, true));
                    scenicList.push(new Scenery("akerPlant", -12526 , -2289, -2.75, true));
                    scenicList.push(new Scenery("pluttPlant", -9196 , -3085, -1.99, true));
                    scenicList.push(new Scenery("culprisPlant", -12176 , -1052, -1, true));
                    scenicList.push(new Scenery("akerPlant", -12591 , 24, 0.44, true));
                    scenicList.push(new Scenery("akerPlant", -12324 , 50, 1.26, true));
                    scenicList.push(new Scenery("neprilnePlant", -12246 , -174, -2.3122512, true));
                    scenicList.push(new Scenery("neprilnePlant", -8865 , 815, 1.4822332, true));
                    scenicList.push(new Scenery("pluttPlant", -8549 , 5995, Math.PI, true));
                    scenicList.push(new Scenery("neprilnePlant", -10044 , 5079, 1.89314221, true));
                    scenicList.push(new Scenery("glinPlant", -8443 , 3193, 0, true));
                    scenicList.push(new Scenery("glinPlant", -10762 , 2744, 1, true));
                    scenicList.push(new Scenery("glinPlant", -9620 , -923, 0, true));
                    scenicList.push(new Scenery("glinPlant", -9585 , -1144, 3, true));
                    scenicList.push(new Scenery("glinPlant", -9353 , 4496, 0, true));
                    scenicList.push(new Scenery("glinPlant", -9422 , 4483, -2, true));
                    scenicList.push(new Scenery("glinPlant", -9447 , 4519, 2.9, true));
                    scenicList.push(new Scenery("glinPlant", -9493 , 4485, 1, true));
                    scenicList.push(new Scenery("glinPlant", -9195 , -1943, 0.65, true));
                    scenicList.push(new Scenery("culprisPlant", -10156 , -2418, -3.212, true));
                    scenicList.push(new Scenery("akerPlant", -9458 , -2568, -2.75, true));
                    scenicList.push(new Scenery("glinPlant", -11587 , -2109, 2, true));
                    scenicList.push(new Scenery("stomwikPlant", -11965 , -1414, 0, true));
                    scenicList.push(new Scenery("glinPlant", -12768 , -1507, -1.55, true));
                    scenicList.push(new Scenery("glinPlant", -9157 , 4196, -1.55, true));
                    scenicList.push(new Scenery("halcifPlant", -11413 , 3822, -0.55, true));
                    scenicList.push(new Scenery("cyrinthilimPlant", -11015 , 152, 1.23, true));

                    //stumps of the "Wuncwer" woods
                    scenicList.push(new Scenery("pineStumps", -6474 , 1900, 0, true));
                    scenicList.push(new Scenery("pineStumps", -6496 , 548, -0.75, true));
                    scenicList.push(new Scenery("pineStumps", -6191 , 2871, 1.6, true));
                    scenicList.push(new Scenery("pineStumps", -7423 , 4794, 0.2, true));
                    scenicList.push(new Scenery("pineStumps", -6544 , 5895, -0.9, true));
                    scenicList.push(new Scenery("pineStumps", -6659 , 4000, 0.23, true));

                    scenicList.push(new Scenery("pineStumps", -6248 , 4985, -1.6, true));
                    scenicList.push(new Scenery("pineStumps", -5852 , -329, 0, true));
                    scenicList.push(new Scenery("pineStumps", -6818 , -650, -1.4, true));
                    scenicList.push(new Scenery("pineStumps", -7003 , -1749, 0, true));
                    scenicList.push(new Scenery("pineStumps", -6395 , -2816, -0.88, true));
                    scenicList.push(new Scenery("pineStumps", -7911 , 5498, -0.3, true));


                    change = "e1";
                }
            }
            else if (region == "s1") //Y > 6290 && Y < 32370
            {
                if (change != "s1")
                {
                    //Delete All Non-native AI Units
                    for (var i = ArtificialIntelligenceAccess.length - 1; i >= 0; i--) //Splice will alter the list so the numbers will be off if you loop through beginning to end, so this for loop goes from the end to the beginning.
                    {
                        if (ArtificialIntelligenceAccess[i].playerSeen == false)
                        {
                            ArtificialIntelligenceAccess.splice(i, 1);
                            console.log(i + " in list 'AI access' has been deleted. " + ArtificialIntelligenceAccess.length);
                        }
                        else
                        {
                            console.log(i + " in list 'AI access' has been saved.");
                        }
                    }

                    //Delete All Non-native Items
                    //worldItems = [];

                    //Delete All Non-native Structures
                    //todo when structures are created add their list's refresh sequence here.

                    //Delete All Non-native Scenery
                    scenicList = [];

                    //REGION CREATION
                    //Build AI Units
                    var bushornot = Math.floor(Math.random() * 9);
                    if (bushornot == 1)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(2977, -4894, "Grush", false, "turtlebob"));
                        ArtificialIntelligenceAccess.push(new Unit(3082, -4954, "Grush", "baby", "turtletim"));
                        ArtificialIntelligenceAccess.push(new Unit(5669, -4701, "Grush", false, "turtledahlia"));
                    }
                    else
                    {
                        scenicList.push(new Scenery("grushweedPlant", 2977, -4894, 0, 1)); //for grush weed the last number determines its size multiplier.
                        scenicList.push(new Scenery("grushweedPlant", 3082, -4954, 0, 0.6)); //for grush weed the last number determines its size multiplier.
                        scenicList.push(new Scenery("grushweedPlant", 5669, -4701, 0, 1)); //for grush weed the last number determines its size multiplier.
                    }

                    if (bushornot == 2)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(5612, -4955, "Grush", false, "turtlejoe"));
                        ArtificialIntelligenceAccess.push(new Unit(5885, -5133, "Grush", "baby", "turtlejimmy"));
                    }
                    else
                    {
                        scenicList.push(new Scenery("grushweedPlant", 5612, -4955, 0, 1)); //for grush weed the last number determines its size multiplier.
                        scenicList.push(new Scenery("grushweedPlant", 5885, -5133, 0, 0.6)); //for grush weed the last number determines its size multiplier.
                    }

                    if (bushornot == 7)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(5798, -4989, "Grush", true, "turtleTrudge"));
                    }
                    else
                    {
                        scenicList.push(new Scenery("grushweedPlant", 5798, -4989, 2, 1.6)); //for grush weed the last number determines its size multiplier.
                    }

                    if (bushornot == 5)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(5593, -4493, "Grush", true, "turtletom"));
                        scenicList.push(new Scenery("ogardPlant", -597 , -5256, 0, true));
                    }
                    else
                    {
                        scenicList.push(new Scenery("techiPlant", -597 , -5256, 0, true));
                        scenicList.push(new Scenery("grushweedPlant", 5593, -4493, 0, 1.5)); //for grush weed the last number determines its size multiplier.
                    }

                    //Scenery
                    scenicList.push(new Scenery("grushweedPlant", 3160 , -4483, -0.3, 1)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 3250 , -4508, -1.3, 0.6)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 3200 , -4541, 0.3, 0.6)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 3257 , -4597, 3.2, 1.2)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 3129 , -4815, -0.8, 1)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 2899 , -5057, 0, 1.5)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 3025 , -5183, 0, 1)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 5462 , -4553, 0, 1.5)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 5785 , -4826, 0, 1.1)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 5632 , -4801, 0, 0.8)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 5547 , -5043, 0, 1)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 5842 , -5190, 0, 0.6)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("grushweedPlant", 5568 , -5328, -1, 1)); //for grush weed the last number determines its size multiplier.
                    scenicList.push(new Scenery("techiPlant", 4234 , -5994, -2.5, true));
                    scenicList.push(new Scenery("techiPlant", 5419 , -6449, 2.146, true));
                    scenicList.push(new Scenery("techiPlant", 6059 , -6527, 1, true));
                    scenicList.push(new Scenery("techiPlant", 5391 , -5262, -0.1, true));
                    scenicList.push(new Scenery("techiPlant", 2227 , -13406, -1.6, true));
                    scenicList.push(new Scenery("techiPlant", 3043 , -13540, 1.82, true));
                    scenicList.push(new Scenery("techiPlant", 288 , -13032, 0, true));

                    change = "s1";
                }
            }
            else if (region == "s2") //Y > 6290 && Y < 32370
            {
                if (change != "s2")
                {
                    //Delete All Non-native AI Units
                    for (var i = ArtificialIntelligenceAccess.length - 1; i >= 0; i--) //Splice will alter the list so the numbers will be off if you loop through beginning to end, so this for loop goes from the end to the beginning.
                    {
                        if (ArtificialIntelligenceAccess[i].playerSeen == false)
                        {
                            ArtificialIntelligenceAccess.splice(i, 1);
                            console.log(i + " in list 'AI access' has been deleted. " + ArtificialIntelligenceAccess.length);
                        }
                        else
                        {
                            console.log(i + " in list 'AI access' has been saved.");
                        }
                    }

                    //Delete All Non-native Items
                    //worldItems = [];

                    //Delete All Non-native Structures
                    //todo when structures are created add their list's refresh sequence here.

                    //Delete All Non-native Scenery
                    scenicList = [];

                    //REGION CREATION
                    //Build AI Units


                    change = "s2";
                }
            }
            else if (region == "s3") //Y > 6290 && Y < 32370
            {
                if (change != "s3")
                {
                    //Delete All Non-native AI Units
                    for (var i = ArtificialIntelligenceAccess.length - 1; i >= 0; i--) //Splice will alter the list so the numbers will be off if you loop through beginning to end, so this for loop goes from the end to the beginning.
                    {
                        if (ArtificialIntelligenceAccess[i].playerSeen == false)
                        {
                            ArtificialIntelligenceAccess.splice(i, 1);
                            console.log(i + " in list 'AI access' has been deleted. " + ArtificialIntelligenceAccess.length);
                        }
                        else
                        {
                            console.log(i + " in list 'AI access' has been saved.");
                        }
                    }

                    //Delete All Non-native Items
                    //worldItems = [];

                    //Delete All Non-native Structures
                    //todo when structures are created add their list's refresh sequence here.

                    //Delete All Non-native Scenery
                    scenicList = [];

                    //REGION CREATION
                    //Build AI Units

                    //citizens of Echlin village/tribe
                    ArtificialIntelligenceAccess.push(new Unit(-1366, -30864, "Soldier", false, "Echlin Tribe Warrior", {race: "Kel", faction: "Kel", con: 3, speed: 1.65, outfit: ["naapridLeatherArmour", 4], weapon: ["warHammer", [10, 0], 8, 16, 1], ranged: [false, "arrow", 5, 1500, 1, 3, 0, "none", 1.50], patrolStops: 0, patrolLoop: true, route:[[3071, 314], [3014, 394], [2218, 346]]}));
                    ArtificialIntelligenceAccess.push(new Unit(-1348, -30360, "Soldier", false, "Echlin Tribe Warrior", {race: "Kel", faction: "Kel", con: 2, speed: 1.80, outfit: ["naapridLeatherArmour", 4], weapon: ["warHammer", [11, 0], 8, 16, 1], ranged: [false, "arrow", 5, 1500, 1, 3, 0, "none", 1.50], patrolStops: 6, patrolLoop: true, route:[[-218, -30349], [-227, -31505], [-1706, -31503], [-1724, -30600], [-1366, -30601], [-1348, -30360]]}));
                    ArtificialIntelligenceAccess.push(new Unit(-295, -30422, "Soldier", false, "Echlin Tribe Warrior", {race: "Kel", faction: "Kel", con: 1, speed: 1.95, outfit: ["naapridLeatherArmour", 4], weapon: ["longbow", [8, 0], 8, 16, 1], ranged: [true, "arrow", 7, 1500, 1, 3, 0, "none", 1.50], patrolStops: 0, patrolLoop: true, route:[[3071, 314], [3014, 394], [2218, 346]]}));
                    if (uniqueChars.teberLDS == true && quests.bountyTeberCompletionStyle != "royal pardon")
                    {
                        var teberName = "Teber the Artisan";
                        if (quests.bountyTeberQuest == true)
                        {
                            teberName = "Teber the Deserter";
                        }

                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == teberName)
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(-631, -30389, "Person", false, teberName, {race: "Freynor", faction: "Kel", personality: "violent", outfit: ["naapridLeatherArmour", 4], weapon: ["freydicSword", [6, 6], 0, 0, 1.45], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[2049, 1021], [1943, 1127], [1690, 1021]], merchant: true, merchandise: [[new Item("coins", false, false), 62], [new Item("Fiber", false, false), 11], [new Item("pintGlass", false, false), 18], [new Item("potionGlass", false, false), 16], [new Item("glassJar", false, false), 7]]}));
                            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                            {
                                if (ArtificialIntelligenceAccess[i].ID == teberName)
                                {
                                    ArtificialIntelligenceAccess[i].healthMAX = 29;
                                    ArtificialIntelligenceAccess[i].health = 29;
                                    ArtificialIntelligenceAccess[i].speed += 0.05;
                                    ArtificialIntelligenceAccess[i].grudge = 340;
                                }
                            }
                        }
                    }
                    if (uniqueChars.roselinLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Roselin the Tailor")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(-1312, -31363, "Person", false, "Roselin the Tailor", {race: "Kel", faction: "Kel", personality: "scared", outfit: ["naapridLeatherArmour", 4], weapon: ["none", [0.1, 0.4], 0, 0, 0.65], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[2049, 1021], [1943, 1127], [1690, 1021]], merchant: true, merchandise: [[new Item("coins", false, false), 30], [new Item("naapridPelt", false, false), 7], [new Item("naapridHorn", false, false), 12], [new Item("naapridLeatherArmour", false, false), 5]]}));
                        }
                    }
                    if (uniqueChars.fenwikLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Fenwik the Smith")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(-963, -31386, "Person", false, "Fenwik the Smith", {race: "Kel", faction: "Kel", personality: "violent", outfit: ["naapridLeatherArmour", 4], weapon: ["warHammer", [8, 1], 8, 16, 1.4], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[2049, 1021], [1943, 1127], [1690, 1021]], merchant: true, merchandise: [[new Item("coins", false, false), 43], [new Item("iron", false, false), 2], [new Item("kellishSawClub", false, false), 3], [new Item("warHammer", false, false), 4], [new Item("kellishClaymore", false, false), 1], [new Item("timberAxe", false, false), 2], [new Item("longbow", false, false), 1], [new Item("arrow", false, false), 9], [new Item("mace", false, false), 2], [new Item("hammer", false, false), 3]]}));
                        }
                    }
                    if (uniqueChars.schuylarLDS == true)
                    {
                        var hits = 0;
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].ID == "Chieftan Schuylar")
                            {
                                hits += 1;
                            }
                        }
                        if (hits == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(-1335, -30763, "Person", false, "Chieftan Schuylar", {race: "Kel", faction: "Kel", personality: "violent", outfit: ["naapridLeatherArmour", 6], weapon: ["kellishClaymore", [25, 1], 0, 50, 2], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 0, patrolLoop: true, route:[[2049, 1021], [1943, 1127], [1690, 1021]], merchant: true, merchandise: [[new Item("coins", false, false), 492], [new Item("kellishClayPotOfNaapridMilk", false, false), 6], [new Item("naapridButter", false, false), 5], [new Item("kellishClayPotOfMushroomStew", false, false), 1], [new Item("kellishClayPotOfWater", false, false), 8], [new Item("kellishClayPot", false, false), 9], [new Item("santhBread", false, false), 1], [new Item("kellishSanthDough", false, false), 2], [new Item("rawNaapridFlesh", false, false), 4], [new Item("naapridMeat", false, false), 2], [new Item("pumpkin", false, false), 2], [new Item("jackOLanternEmpty", false, false), 3], [new Item("beesWax", false, false), 4], [new Item("candle", false, false), 6], [new Item("fireStarter", false, false), 2]]}));

                            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                            {
                                if (ArtificialIntelligenceAccess[i].ID == "Chieftan Schuylar")
                                {
                                    ArtificialIntelligenceAccess[i].healthMAX = 32;
                                    ArtificialIntelligenceAccess[i].health = 32;
                                    ArtificialIntelligenceAccess[i].speed += 0.55;
                                    ArtificialIntelligenceAccess[i].grudge = 340;

                                }
                            }
                        }
                    }

                    //Echlin Village crafting stations
                    scenicList.push(new Scenery("anvil", -884, -31318, -Math.PI * 1/4, true));
                    scenicList.push(new Scenery("forge", -882, -31444, Math.PI * 1/2, true));
                    scenicList.push(new Scenery("loom", -1327, -31313, 0, true));

                    //Echlin Village Farm
                    scenicList.push(new Scenery("suuliPlant", -1651 , -30665, 3, "kel"));

                    scenicList.push(new Scenery("harstPlant", -1428 , -30652, 1, "kel"));
                    scenicList.push(new Scenery("harstPlant", -1458 , -30652, 1, "kel"));
                    scenicList.push(new Scenery("harstPlant", -1488 , -30652, 1, "kel"));
                    scenicList.push(new Scenery("harstPlant", -1518 , -30652, 1, "kel"));
                    scenicList.push(new Scenery("harstPlant", -1548 , -30652, 1, "kel"));
                    scenicList.push(new Scenery("harstPlant", -1578 , -30652, 1, "kel"));

                    scenicList.push(new Scenery("potatoPlant", -1428 , -30724, 1, "kel"));
                    scenicList.push(new Scenery("potatoPlant", -1458 , -30724, 1, "kel"));
                    scenicList.push(new Scenery("potatoPlant", -1488 , -30724, 1, "kel"));
                    scenicList.push(new Scenery("potatoPlant", -1518 , -30724, 1, "kel"));
                    scenicList.push(new Scenery("potatoPlant", -1548 , -30724, 1, "kel"));
                    scenicList.push(new Scenery("potatoPlant", -1578 , -30724, 1, "kel"));

                    scenicList.push(new Scenery("carrotPlant", -1428 , -30790, 1, "kel"));
                    scenicList.push(new Scenery("carrotPlant", -1458 , -30790, 1, "kel"));
                    scenicList.push(new Scenery("carrotPlant", -1488 , -30790, 1, "kel"));
                    scenicList.push(new Scenery("carrotPlant", -1518 , -30790, 1, "kel"));
                    scenicList.push(new Scenery("carrotPlant", -1548 , -30790, 1, "kel"));
                    scenicList.push(new Scenery("carrotPlant", -1578 , -30790, 1, "kel"));

                    scenicList.push(new Scenery("santhPlant", -1652 , -30738, 1, "kel"));
                    scenicList.push(new Scenery("santhPlant", -1652 , -30768, 1, "kel"));
                    scenicList.push(new Scenery("santhPlant", -1652 , -30798, 1, "kel"));
                    scenicList.push(new Scenery("santhPlant", -1652 , -30828, 1, "kel"));

                    scenicList.push(new Scenery("pumpkinPlant", -1653 , -30888, 2, "kel"));
                    scenicList.push(new Scenery("pumpkinPlant", -1583 , -30888, -1, "kel"));
                    scenicList.push(new Scenery("pumpkinPlant", -1513 , -30888, 1, "kel"));
                    scenicList.push(new Scenery("pumpkinPlant", -1443 , -30888, 0, "kel"));

                    ArtificialIntelligenceAccess.push(new Unit(-2089, -29849, "Mofu", false, "Tupper"));
                    ArtificialIntelligenceAccess.push(new Unit(-2054, -29703, "Mofu", "baby", "Goozy"));
                    ArtificialIntelligenceAccess.push(new Unit(-2278, -29667, "Mofu", false, "Tem"));
                    ArtificialIntelligenceAccess.push(new Unit(-2372, -29720, "Mofu", "baby", "Tilby"));
                    ArtificialIntelligenceAccess.push(new Unit(-2472, -29756, "Mofu", "baby", "Libby"));
                    ArtificialIntelligenceAccess.push(new Unit(-2429, -29856, "Mofu", false, "Gelnam"));
                    ArtificialIntelligenceAccess.push(new Unit(-2440, -29962, "Mofu", "baby", "Tally"));
                    ArtificialIntelligenceAccess.push(new Unit(-2500, -29938, "Mofu", "baby", "Jilin"));
                    ArtificialIntelligenceAccess.push(new Unit(-2176, -29434, "Mofu", true, "Loz"));
                    ArtificialIntelligenceAccess.push(new Unit(-2368, -29393, "Mofu", "baby", "Kleena"));

                    //Mofu Habitations
                    scenicList.push(new Scenery("mofuNest", -2089, -29849, -3, 1.2)); //for mofu nests the last number determines its size multiplier.
                    scenicList.push(new Scenery("mofuNest", -2278, -29667, 1, 1)); //for mofu nests the last number determines its size multiplier.
                    scenicList.push(new Scenery("mofuNest", -2429, -29856, 0, 1.15)); //for mofu nests the last number determines its size multiplier.
                    scenicList.push(new Scenery("mofuNest", -2176, -29434, -2.245, 1.9)); //for mofu nests the last number determines its size multiplier.

                    change = "s3";
                }
            }
        }
    }

    var doAutosave = false;
    var singleAuto = false;
    function autosave()
    {
        //Manual autosaving
        if (tildKey == false)
        {
            doAutosave = true;
        }
        else if (tildKey == true && doAutosave == true && lowBar != "Save")
        {
            doAutosave = false;
            saveType = "autosave";
            save();
            saveType = null;
        }
        //Automatic autosaving
        if (autosaving == true)
        {
            if (Math.round(timePlayed % 180) == 1 && singleAuto == true && timePlayed >= 180)
            {
                singleAuto = false;
                if (lowBar != "save" && doAutosave == true)
                {
                    //alert("** Autosave **");
                    saveType = "autosave";
                    save();
                    saveType = null;
                }
            }
            else if (Math.round(timePlayed % 180) != 1)
            {
                singleAuto = true;
            }
        }
    }

    function saveList(list, listName, complex) //complex is for a list that has lists in it like the inventory.
    {
        var contents = [];

        if (complex == true)
        {
            for (var i = 0; i < list.length; i++)
            {
                var elem = list[i][0]; //This variable is set equal to the class in the argument list.
                var className = elem.constructor.name; //this stores the specific identity of the class like whether it is a Unit or an Item or a Projectile etc.
                var classData = {}; //This is just like the data in the class in that it stores all of the keys and values that the focus class presently holds excluding the methods.
                var amount = list[i][1];
                for (var key in elem)
                {
                    var value = elem[key]; //this finds and stores the value attached to the present key within the focus class.
                    if (typeof(value) != "function") // so if the key is anything other than a method it will be added to the object class data so that it can be saved.
                    {
                        classData[key] = value;
                    }
                }
                contents.push([{type: className, data: classData}, amount]); //this adds a save object interpretation of the original class that has the original classes type and all of the original class's non-method data.
            }
        }
        else
        {
            for (var i = 0; i < list.length; i++)
            {
                var elem = list[i]; //This variable is set equal to the class in the argument list.
                var className = elem.constructor.name; //this stores the specific identity of the class like whether it is a Unit or an Item or a Projectile etc.
                var classData = {}; //This is just like the data in the class in that it stores all of the keys and values that the focus class presently holds excluding the methods.
                for (var key in elem)
                {
                    var value = elem[key]; //this finds and stores the value attached to the present key within the focus class.
                    if (typeof(value) != "function") // so if the key is anything other than a method it will be added to the object class data so that it can be saved.
                    {
                        classData[key] = value;
                    }
                }
                contents.push({type: className, data: classData}); //this adds a save object interpretation of the original class that has the original classes type and all of the original class's non-method data.
            }
        }

        saveBrain[listName] = contents;
    }
    function save()
    {
        //This is the stuff that will be saved to the local storage.
        saveList(mainCharacterAccess, "mainCharacterAccess");
        saveList(ArtificialIntelligenceAccess, "ArtificialIntelligenceAccess");
        saveList(deadAIList, "deadAIList");
        saveList(scenicList, "scenicList");
        saveList(worldItems, "worldItems", true);
        saveList(Inventory, "Inventory", true);
        saveList(playerProjectiles, "playerProjectiles");
        saveList(unitProjectiles, "unitProjectiles");
        saveList(shopInventory, "shopInventory", true);
        saveList(bankAccount, "bankAccount", true);
        for (var n = 0; n < ArtificialIntelligenceAccess.length; n++)
        {
            var merchN = "merchandise" + JSON.stringify(n);
            if (typeof(ArtificialIntelligenceAccess[n].ultra) != "undefined")
            {
                if (typeof(ArtificialIntelligenceAccess[n].ultra.merchandise) != "undefined")
                {
                    saveList(ArtificialIntelligenceAccess[n].ultra.merchandise, merchN, true)
                }
            }
        }
        saveBrain["uniqueChars"] = uniqueChars;
        saveBrain["quests"] = quests;
        saveBrain["conversations"] = conversations;
        saveBrain["beastJournal"] = beastJournal;
        saveBrain["timePlayed"] = timePlayed;
        saveBrain["sleeperTime"] = sleeperTime;
        saveBrain["elevation"] = elevation;
        saveBrain["X"] = X;
        saveBrain["Y"] = Y;
        saveBrain["spawnX"] = spawnX;
        saveBrain["spawnY"] = spawnY;
        saveBrain["map"] = map;
        saveBrain["region"] = region;
        saveBrain["update"] = update;
        saveBrain["change"] = change;
        saveBrain["bankSlots"] = bankSlots;
        saveBrain["primarySpells"] = primarySpells;
        saveBrain["secondarySpells"] = secondarySpells;
        saveBrain["tertiarySpells"] = tertiarySpells;

        var saveFile = JSON.stringify(saveBrain);
        //based on what save type the player chooses the save will be stored in one of the four game slots.
        if (saveType == 1)
        {
            localStorage.setItem("save1", saveFile);
        }
        else if (saveType == 2)
        {
            localStorage.setItem("save2", saveFile);
        }
        else if (saveType == 3)
        {
            localStorage.setItem("save3", saveFile);
        }
        else if (saveType == 4)
        {
            localStorage.setItem("save4", saveFile);
        }
        else if (saveType == 5)
        {
            localStorage.setItem("save5", saveFile);
        }
        else if (saveType == 6)
        {
            localStorage.setItem("save6", saveFile);
        }
        else if (saveType == 7)
        {
            localStorage.setItem("save7", saveFile);
        }
        else if (saveType == 8)
        {
            localStorage.setItem("save8", saveFile);
        }
        else if (saveType == "autosave")
        {
            localStorage.setItem("autosave", saveFile);
        }


    }

    function load()
    {
        retrieveSave();
        mainCharacterAccess = loadList("mainCharacterAccess");
        if (update == lastUpdate && typeof(lastUpdate) != "undefined")
        {
            ArtificialIntelligenceAccess = loadList("ArtificialIntelligenceAccess");
            deadAIList = loadList("deadAIList");
        }
        playerProjectiles = loadList("playerProjectiles");
        scenicList = loadList("scenicList");
        unitProjectiles = loadList("unitProjectiles");
        worldItems = loadList("worldItems", true);
        Inventory = loadList("Inventory", true);
        shopInventory = loadList("shopInventory", true);
        bankAccount = loadList("bankAccount", true);
        for (var n = 0; n < ArtificialIntelligenceAccess.length; n++)
        {
            //ArtificialIntelligenceAccess[n].ultra.merchandise = loadList("merchandise" + n, true);
            var merchN = "merchandise" + JSON.stringify(n);
            if (typeof(ArtificialIntelligenceAccess[n].ultra) != "undefined")
            {
                if (typeof(ArtificialIntelligenceAccess[n].ultra.merchandise) != "undefined")
                {
                    ArtificialIntelligenceAccess[n].ultra.merchandise = loadList(merchN, true);
                    for (var m = 0; m < ArtificialIntelligenceAccess[n].ultra.merchandise.length; m++)
                    {
                        ArtificialIntelligenceAccess[n].ultra.merchandise[m][0];
                        //console.log(ArtificialIntelligenceAccess[n].ultra.merchandise[m][0].weight)
                    }
                }
            }
        }
        player = mainCharacterAccess[0];
    }

    function loadList(listName, complex)
    {
        var load = retrieveSave(listName);
        var contents = [];

        if (complex == true)
        {
            for (var i = 0; i < load.length; i++)
            {
                var parts = load[i];
                var elem = eval("new " + parts[0].type + "()");
                var amount = load[i][1];
                for (var key in parts[0].data)
                {
                    elem[key] = parts[0].data[key];
                }
                contents.push([elem, amount]);
            }
        }
        else
        {
            for (var i = 0; i < load.length; i++)
            {
                var parts = load[i];
                var elem = eval("new " + parts.type + "()");
                for (var key in parts.data)
                {
                    elem[key] = parts.data[key];
                }
                contents.push(elem);
            }
        }

        return contents;
    }

    function retrieveSave(listName)
    {
        if (loadType == 1)
        {
            var restore = localStorage.getItem("save1");
        }
        else if (loadType == 2)
        {
            var restore = localStorage.getItem("save2");
        }
        else if (loadType == 3)
        {
            var restore = localStorage.getItem("save3");
        }
        else if (loadType == 4)
        {
            var restore = localStorage.getItem("save4");
        }
        else if (loadType == 5)
        {
            var restore = localStorage.getItem("save5");
        }
        else if (loadType == 6)
        {
            var restore = localStorage.getItem("save6");
        }
        else if (loadType == 7)
        {
            var restore = localStorage.getItem("save7");
        }
        else if (loadType == 8)
        {
            var restore = localStorage.getItem("save8");
        }
        else if (loadType == "autosave")
        {
            var restore = localStorage.getItem("autosave");
        }

        var parsed = JSON.parse(restore);

        //The argument will determine which list it will return.
        for (var n = 0; n < ArtificialIntelligenceAccess.length; n++)
        {
            var merchN = "merchandise" + JSON.stringify(n);
            if (listName == merchN)
            {
                return parsed[merchN];
            }
        }

        if (listName == "mainCharacterAccess")
        {
            return parsed.mainCharacterAccess;
        }
        else if (listName == "ArtificialIntelligenceAccess")
        {
            return parsed.ArtificialIntelligenceAccess;
        }
        else if (listName == "deadAIList")
        {
            return parsed.deadAIList;
        }
        else if (listName == "scenicList")
        {
            return parsed.scenicList;
        }
        else if (listName == "worldItems")
        {
            return parsed.worldItems;
        }
        else if (listName == "Inventory")
        {
            return parsed.Inventory;
        }
        else if (listName == "playerProjectiles")
        {
            return parsed.playerProjectiles;
        }
        else if (listName == "unitProjectiles")
        {
            return parsed.unitProjectiles;
        }
        else if (listName == "shopInventory")
        {
            return parsed.shopInventory;
        }
        else if (listName == "bankAccount")
        {
            return parsed.bankAccount;
        }
        else
        {
            if (update == parsed.update && typeof(parsed.update) != "undefined")
            {
                change = parsed.change;
            }
            lastUpdate = parsed.update;
            map = parsed.map;
            region = parsed.region;
            timePlayed = parsed.timePlayed;
            sleeperTime = parsed.sleeperTime;
            elevation = parsed.elevation;
            X = parsed.X;
            Y = parsed.Y;
            spawnX = parsed.spawnX;
            spawnY = parsed.spawnY;
            primarySpells = parsed.primarySpells;
            secondarySpells = parsed.secondarySpells;
            tertiarySpells = parsed.tertiarySpells;
            //beastJournal = parsed.beastJournal; //booble

            for (var key in parsed.uniqueChars)
            {
                uniqueChars[key] = parsed.uniqueChars[key];
            }
            for (var key in parsed.quests)
            {
                quests[key] = parsed.quests[key];
            }
            for (var key in parsed.conversations)
            {
                conversations[key] = parsed.conversations[key];
            }
            bankSlots = parsed.bankSlots;
        }
    }

    function gameTimeKeeper()
    {
        if (new Date().getTime() - timeRegulator >= 100)
        {
            timeRegulator = new Date().getTime();
            timePlayed += 0.1;
        }
        gameTime = (timePlayed / 0.0625) + sleeperTime;

        gameMinute = Math.floor(gameTime / 60);

        gameHour = Math.floor(gameMinute / 60);

        gameDay = Math.floor(gameHour / 24);

        gameSeason = Math.floor(gameDay / 90); //There are four seasons: Frost, Bounty, Bright, Harvest

        gameYear = Math.floor(gameSeason / 4); //game years are only 360 days made up of four 90 day seasons.

        hourOfDay = Math.floor(gameHour % 24);

        seasonOfYear = Math.floor(gameSeason % 4);

        dayOfYear = Math.floor(gameDay % 360);

        minuteOfHour = Math.floor(gameMinute % 60);

        secondOfMinute = Math.floor(gameTime % 60);

        if (seasonOfYear == 1)
        {
            currentSeason = "Harvest";
        }
        else if (seasonOfYear == 2)
        {
            currentSeason = "Frost";
        }
        else if (seasonOfYear == 3)
        {
            currentSeason = "Bounty";
        }
        else if (seasonOfYear == 4)
        {
            currentSeason = "Bright";
        }

        //determine when night and day is in the different Seasons
        if (currentSeason == "Bright")
        {
            darkestDark = 0.92; //the darkest night is able to be during the season. (how much alpha is the nights maximum)
            if (hourOfDay < 5 || hourOfDay > 21) //gets light at 5AM and gets dark at 9PM
            {
                timeOfDay = "Night";
            }
            else if (hourOfDay == 5)
            {
                timeOfDay = "Dawn";
            }
            else if (hourOfDay == 21)
            {
                timeOfDay = "Dusk";
            }
            else
            {
                timeOfDay = "Day";
            }
        }
        else if (currentSeason == "Harvest")
        {
            darkestDark = 0.95;
            if (hourOfDay < 6 || hourOfDay > 19) //gets light at 7AM and gets dark at 8PM
            {
                timeOfDay = "Night";
            }
            else if (hourOfDay == 6)
            {
                timeOfDay = "Dawn";
            }
            else if (hourOfDay == 19)
            {
                timeOfDay = "Dusk";
            }
            else
            {
                timeOfDay = "Day";
            }
        }
        else if (currentSeason == "Frost")
        {
            darkestDark = 0.98;
            if (hourOfDay < 7 || hourOfDay > 17) //gets light at 8AM and gets dark at 6PM
            {
                timeOfDay = "Night";
            }
            else if (hourOfDay == 7)
            {
                timeOfDay = "Dawn";
            }
            else if (hourOfDay == 17)
            {
                timeOfDay = "Dusk";
            }
            else
            {
                timeOfDay = "Day";
            }
        }
        else if (currentSeason == "Bounty")
        {
            darkestDark = 0.95;
            if (hourOfDay < 6 || hourOfDay > 19) //gets light at 7AM and gets dark at 8PM
            {
                timeOfDay = "Night";
            }
            else if (hourOfDay == 6)
            {
                timeOfDay = "Dawn";
            }
            else if (hourOfDay == 19)
            {
                timeOfDay = "Dusk";
            }
            else
            {
                timeOfDay = "Day";
            }
        }
    }

    //gameState = "horde"; // this changes the gamemode so that horde will have priority.
    //playHorde(); //This starts the card game horde.

    requestAnimationFrame(mainMenuLoop, CCC); //This starts the game as normal.

    //gameState = "active"; //This is for testing the game (if turned on it will let you bypass the main menu)
    //requestAnimationFrame(gameloopOfDestiny, CCC); //This is for testing the game (if turned on it will let you bypass the main menu)
}
