/**
 * Created by skyeguy on 1/22/17.
 */

function Scenery(type, x, y, rotation, longevity, information, extra) //longevity is used either to portray permanence or ownership, information is an extra input for anything
{
    this.type = type;
    this.variety = "generic";
    this.subVariety = "generic";
    this.massive = false;
    this.X = x;
    this.Y = y;
    this.dmx = map;
    this.radius = 1;
    this.information = information;
    this.rotation = rotation;
    this.temporary = longevity; //This is whether or not it will stay permanently or is subject to despawning after time.
    this.owned = longevity; //if an items longevity is unimportant or is obvious that can be used to define its ownership.
    this.extra = extra;
    this.solid = false;
    this.mouser = 10000; //this is the measurement of the mouse's distance from the Scenery object.
    this.playerer = 10000; //this is the measurement of the player's distance from the Scenery object.
    this.counter = 0; //this is a call regulating variable that works to make sure heavy code isn't called too often.
    this.activate = false; //this is a flag that turns true when the Scenery object is clicked.
    this.interactionRange = 0;
    this.zIndex = 1;
    this.loopNum = 0;
    this.loopRate = 0;
    this.frameLoopComplete = false;
    this.runOneTime = true; //this will not be used in general functions, only for making sure each type of scenery can run something only once.
    this.loopTimer = new Date().getTime();
    this.unpassable = false; //certain creatures with the haste ability (like berulns) can pass over almost any obstacle, but not if the obstacle has this property set to true.
    this.intervalStore = new Date().getTime(); //this variable is for the interval function which calls a function on a loop at a rate defined by you.
    this.costu = 0;
    //eatFish variables
    this.fishery = false; //whether or not a unit or the player eat fish from the scenery item by decreasing the health variable
    //Campfire variables
    this.lit = false;
    this.fireCostume = 0;
    this.campFireTime = 0;
    this.burnt = false;
    this.burntTime = 0;
    this.gotFireStarter = false;
    //Well Variables
    this.wellListo = true;
    this.toggleWell = false;
    this.wellUp = false;
    this.wellChange = false;
    //Tree Variables
    this.treePhase = 0;
    this.treeHealth = 120;
    this.tree = false;
    //container variables
    this.storageListChecked = false;
    this.storage = false;
    //web variables
    this.webbed = [];
    //Rock variables
    this.rockLoad = [];
    //Destroyable Variables
    this.health = 1;
    //Bird variables
    this.eggHatchTimer = 0;
    //Plant Variables
    this.phase = 0;
    this.nectarNum = 0;
    this.nectarFlag = false;
    //light source variables
    this.lightGetTime = new Date().getTime();
    this.lightTime = 0;
    //trap variables
    this.snapShut = false;
    this.triggered = false;
    //jungle variables
    this.xiumGrowth = 0;
    //Hive Variables
    this.hiveID = Math.random();
    this.minions = 0; //the current amount of soldiers the hive has.
    this.minionsMAX = 3; //total amount of soldiers the hive can have.
    this.summonRate = 32; //how long in seconds it takes to summon a new minion.
    this.summonTime = new Date().getTime();
    //event variables
    this.angryDuendes = false;
    //Building Variables
    this.putBarriers = true;
    //map edit variables
    this.savified = false; //this determines if a scenery object can resist a safe map edit from cropper or trimmer functions
    //mushroom variables
    this.mycelium = 0;
    //dethstuff variables
    this.resources = [];
    this.inhabitants = [];
    this.refuge = [];
    this.built = 0;
    //ghoulden variables
    this.pop = 0;
    //other
    this.etapa = 0;

    //Scenery Item

    this.isMassive = function()
    {
        if (this.type == "nirwadenCastle1")
        {
            this.massive = true;
        }
        else if (this.type == "vardanCastle1")
        {
            this.massive = true;
        }
        else if (this.type == "thenganorCastles" && this.temporary >= 1.5)
        {
            this.massive = true;
        }
        else if (this.type == "thenganorCastleParts" && this.temporary >= 1.5)
        {
            this.massive = true;
        }
        else if (this.type == "ghoulDen")
        {
            this.massive = true;
        }
        else if (this.type == "ghoulEggs")
        {
            this.massive = true;
        }
        else if (this.type == "ribbackNest")
        {
            this.massive = true;
        }
        else if (this.type == "xiumSpores")
        {
            this.massive = true;
        }
        else if (this.type == "xiumPod")
        {
            this.massive = true;
        }
        else if (this.type == "leafCutterAnterHill" && this.temporary == true)
        {
            this.massive = true;
        }
        else if (this.type == "damageBubble")
        {
            this.massive = true;
        }
        else if (this.type == "venandiExplosion")
        {
            this.massive = true;
        }
        else if (this.type == "wartExplosion")
        {
            this.massive = true;
        }
        else if (this.type == "event")
        {
            this.massive = true;
        }
        else if (this.type == "vodkapaHome")
        {
            this.massive = true;
        }
        else if (this.type == "shriekingBloodWormEggs")
        {
            this.massive = true;
        }
        else if (this.type == "lyagushkaEggCluster")
        {
            this.massive = true;
        }
    };
    this.isMassive();

    this.interval = function(time, method)
    {
        if (new Date().getTime() - this.intervalStore >= time * 1000)
        {
            this.intervalStore = new Date().getTime();
            method();
        }
    };

    this.keeper = function() //this method adds the container to the storageList if it is not on it and abreviates unsavable portions of code.
    {
        //manual determination
        if (this.type == "crate" || this.type == "basket" || this.type == "drawerA" || this.type == "drawerB")
        {
            if (this.temporary > 2)
            {
                this.storage = true;
            }
        }

        // (inf0: size, inf1: storageID, inf2: storageSlots, inf3: Item List, inf4: Owned By..., inf5: factionRelationDecreaseForOpening)
        if (this.storageListChecked == false && this.storage == true)
        {
            this.storageListChecked = true;

            this.information = [information[0], information[1], information[2], information[5]];
            this.owned = information[4];

            var isInList = false;
            for (var i = 0; i < storageList.length; i++)
            {
                if (storageList[i][0] == this.information[1])
                {
                    isInList = true;
                    break;
                }
            }

            if (isInList == false)
            {
                storageList.push([this.information[1], this.information[2], information[3]]); // [containerID, storageSlots, [items inside]]
            }
        }
    };

    this.nectar = function(num)
    {
        if (this.nectarFlag == false)
        {
            this.nectarFlag = true;
            this.nectarNum = num;
        }
    };

    this.minionCount = function()
    {
        this.minions = 0;
        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
        {
            if (ArtificialIntelligenceAccess[i].ID == this.hiveID)
            {
                this.minions += 1;
            }
        }
    };

    this.dst = function(x, y) //finds the distance between this and input.
    {
        return Math.sqrt((this.X - x) * (this.X - x) + (this.Y - y) * (this.Y - y));
    };

    this.rockLoader = function(list)
    {
        var hits = 0;
        var selection = list[Math.floor(Math.random() * list.length)];

        for (var i = 0; i < Inventory.length; i ++)
        {
            if (Inventory[i][0].type == selection.type)
            {
                Inventory[i][1] += selection.quantity;
                break;
            }
            else
            {
                hits += 1;
            }
        }
        if (hits == Inventory.length)
        {
            Inventory.push([new Item(selection.type, false, false), selection.quantity]);
        }
    };

    this.damagePlayer = function(damage, negate, effect)
    {
        if (player.dmx == this.dmx)
        {
            if (quenHere == true)
            {
                quenHere = false;
            }
            else
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= damage;
                }
                else
                {
                    player.health += player.mageShield;
                    //player.decreaseInHealth -= player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, damage - Math.max(0, player.armourTotal - negate));
                    player.decreaseInHealth += Math.max(0, damage - Math.max(0, player.armourTotal - negate));

                    if (effect == "venandineExplosion") //the fungus hijacked the acid and turned it into an effective fungal delivery system for it spores
                    {
                        if (player.health < 4/5 * player.healthMAX || player.resistDisease == false)
                        {
                            if (player.venandi <= 0)
                            {
                                player.venandi = 1;
                            }
                        }
                        if ((Math.max(0, damage - Math.max(0, player.armourTotal - negate)) > 0))
                        {
                            player.venandi += 20;
                        }
                    }
                    else if (effect == "internalWartExplosion") //the fungus hijacked the acid and turned it into an effective fungal delivery system for it spores
                    {
                        if (player.resistDisease == false)
                        {
                            if (player.internalWarts == false)
                            {
                                player.internalWarts = true;
                                player.internalWartGrowth = 0;
                            }
                        }
                    }
                    else if (effect == "smashbackI" && (Math.max(0, damage - Math.max(0, player.armourTotal - negate)) > 0))
                    {
                        var twrdsUnit = Math.atan2(this.Y - Y, this.X - X);
                        X -= Math.cos(twrdsUnit) * 50;
                        Y -= Math.sin(twrdsUnit) * 50;
                        player.stunnedIII = true;
                        player.stunnedTime = 3;
                    }
                }
            }
        }
    };

    this.nearbyPlants = function(numberToList, excludeSubVariety)
    {
        var nearPlants = [];
        var checkedAlready = [];
        var nearestDistance = false;
        var closest = -1;
        var skip = false;
        var dist = false;

        for (var n = 0; n < numberToList; n++)
        {
            for (var i = 0; i < scenicList.length; i++)
            {
                if (typeof(excludeSubVariety) != "undefined")
                {
                    if (scenicList[i].subVariety != excludeSubVariety && scenicList[i].variety == "plant")
                    {
                        skip = false;
                        for (var j = 0; j < checkedAlready.length; j++)
                        {
                            if (checkedAlready[j] == i)
                            {
                                skip = true;
                            }
                        }
                        if (!skip)
                        {
                            var dist = this.dst(scenicList[i].X, scenicList[i].Y);
                            //console.log("dist " + dist);
                            if (nearestDistance == false)
                            {
                                nearestDistance = dist;
                                closest = i;
                            }
                            else if (dist < nearestDistance)
                            {
                                nearestDistance = dist;
                                closest = i;
                            }
                        }
                    }
                }
                else if (scenicList[i].variety == "plant")
                {
                    skip = false;
                    for (var j = 0; j < checkedAlready.length; j++)
                    {
                        if (checkedAlready[j] == i)
                        {
                            skip = true;
                        }
                    }
                    if (!skip)
                    {
                        var dist = this.dst(scenicList[i].X, scenicList[i].Y);
                        if (nearestDistance == false)
                        {
                            nearestDistance = dist;
                            closest = i;
                        }
                        else if (dist < nearestDistance)
                        {
                            nearestDistance = dist;
                            closest = i;
                        }
                    }
                }
            }
            if (closest != -1)
            {
                nearPlants.push(scenicList[closest]);
                checkedAlready.push(closest);
                nearestDistance = false;
            }
        }
        //console.log(nearPlants);
        return nearPlants;
    };

    this.changeFactionRelation = function(changeAmount)
    {
        if (this.owned != false)
        {
            if (this.owned.length > 1)
            {
                if (this.owned == "freynor")
                {
                    player.freynorFaction += changeAmount;
                }
                else if (this.owned == "kel")
                {
                    player.kelFaction += changeAmount;
                }
                else if (this.owned == "vardan")
                {
                    player.vardanFaction += changeAmount;
                }
                else if (this.owned == "nirwaden")
                {
                    player.nirwadenFaction += changeAmount;
                }
                else if (this.owned == "outlander")
                {
                    player.outlanderFaction += changeAmount;
                }
                else if (this.owned == "aldrek")
                {
                    player.aldrekFaction += changeAmount;
                }
                else if (this.owned == "cephrite")
                {
                    player.cephriteFaction += changeAmount;
                }
                else if (this.owned == "orgel")
                {
                    player.orgelFaction += changeAmount;
                }
                else if (this.owned == "thengar")
                {
                    player.thengarFaction += changeAmount;
                }
                else if (this.owned == "theBalgurMercenaries")
                {
                    player.theBalgurMercenariesFaction += changeAmount;
                }
                else if (this.owned == "estolGang")
                {
                    player.estolgangFaction += changeAmount;
                }
            }
        }
    };

    this.countAdder = function()
    {
        this.counter += 1 * (TTD / 16.75);
    };

    this.count = function()
    {
        if (this.counter >= 80)
        {
            this.counter = 0;
            return true;
        }
        else
        {
            return false;
        }
    };

    this.flashFrame = 0;
    this.flashFrameTime = new Date().getTime();
    this.flashAnimate = function(framerate, rotation, transparency, list)
    {
        //use a list with coords for images: [{image:, imgX:, imgY:, portionW:, portionH:, adjX:, adjY:, width:, height:}, ... etc.]
        if (this.flashFrame >= list.length)
        {
            this.flashFrame = 0;
        }

        if (rotation != false)
        {
            XXX.save();
            XXX.globalAlpha = transparency;
            XXX.translate(X - this.X + (1 / 2 * CCC.width), Y - this.Y + (1 / 2 * CCC.height));
            XXX.rotate(rotation);
            XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, list[this.flashFrame].adjX, list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
            XXX.restore();
        }
        else
        {
            XXX.save();
            XXX.globalAlpha = transparency;
            XXX.drawImage(list[this.flashFrame].image, list[this.flashFrame].imgX, list[this.flashFrame].imgY, list[this.flashFrame].portionW, list[this.flashFrame].portionH, X - this.X + (1 / 2 * CCC.width) + list[this.flashFrame].adjX, Y - this.Y + (1 / 2 * CCC.height) + list[this.flashFrame].adjY, list[this.flashFrame].width, list[this.flashFrame].height);
            XXX.restore();
        }

        if (new Date().getTime() - this.flashFrameTime >= framerate)
        {
            this.flashFrameTime = new Date().getTime();
            this.flashFrame += 1;
        }
    };

    // []
    this.frameLoop = function(theLoop, loopLimit, loopingRate, endless)
    {
        if (theLoop != [])
        {
            if (this.frameLoopComplete == false)
            {
                this.loopRate += 1;
            }

            if (this.loopRate > loopingRate)
            {
                this.loopRate = 0;

                if (this.frameLoopComplete == false)
                {
                    this.loopNum += 1;
                }
            }

            if (this.loopNum > loopLimit)
            {
                this.loopNum = 0;
                if (endless == false)
                {
                    this.frameLoopComplete = true;
                }
            }

            if (this.frameLoopComplete == false)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theLoop[this.loopNum][0], theLoop[this.loopNum][1], theLoop[this.loopNum][2], theLoop[this.loopNum][3], theLoop[this.loopNum][4], -(1/2 * theLoop[this.loopNum][5]), -(1/2 * theLoop[this.loopNum][6]), theLoop[this.loopNum][5], theLoop[this.loopNum][6]);
                XXX.restore();
            }
        }
    };


    this.mouseSensing = function()
    {
        if (this.count())
        {
            this.mouser = Math.sqrt(((X - mouseX + 1/2 * CCC.width) - this.X)*((X - mouseX + 1/2 * CCC.width) - this.X) + ((Y - mouseY + 1/2 * CCC.height) - this.Y)*((Y - mouseY + 1/2 * CCC.height) - this.Y));
            this.playerer = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y - this.Y));
            //console.log("mouser " + this.mouser + " playerer " + this.playerer);
        }

        if (this.mouser <= this.radius && this.playerer <= this.interactionRange)
        {
            //Make sure the player and the mouse are both still there...
            this.mouser = Math.sqrt(((X - mouseX + 1/2 * CCC.width) - this.X)*((X - mouseX + 1/2 * CCC.width) - this.X) + ((Y - mouseY + 1/2 * CCC.height) - this.Y)*((Y - mouseY + 1/2 * CCC.height) - this.Y));
            this.playerer = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y - this.Y));

            if (dClick)
            {
                dClick = false;
                this.activate = true;
            }
        }

    };

    this.typeBuilder = function()
    {
        if (this.type == "pineStumps")
        {
            //TRAITS
            this.solid = false;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(verse, 1, 1685, 156, 109, -(1/2 * 156 * 8), -(1/2 * 109 * 8), 156 * 8, 109 * 8);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

        }
        else if (this.type == "ribbackWeb")
        {
            //TRAITS
            this.solid = false;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(ribak, 898, 303, 160, 171, -(1/2 * 160 * 1.2 * this.temporary), -(1/2 * 171 * 1.2 * this.temporary), 160 * 1.2 * this.temporary, 171 * 1.2 * this.temporary);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 77 * this.temporary;

            //stick player and units in the web then store the data for spiders to access.
            this.webbed = [];
            if (this.playerer <= this.radius)
            {
                player.webbedNum = 3;
                player.webbedTime = new Date().getTime();
                if (quenHere == false)
                {
                    this.webbed.push(player);
                }
            }
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                var unitDist = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y - this.Y));
                if (unitDist <= this.radius)
                {
                    ArtificialIntelligenceAccess[i].webbedNum = 3;
                    ArtificialIntelligenceAccess[i].webbedTime = new Date().getTime();
                    this.webbed.push(ArtificialIntelligenceAccess[i]);
                }
            }
        }
        else if (this.type == "ribbackNest")
        {
            //TRAITS
            this.nestID = this.temporary;
            this.solid = false;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(ribak, 813, 80, 254, 221, -(1/2 * 254 * 1.2 * 1), -(1/2 * 221 * 1.2 * 1), 254 * 1.2 * 1, 221 * 1.2 * 1);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 112;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.tac = 0;
                if (typeof(this.information) != "undefined" && typeof(this.information) != "boolean")
                {
                    this.ribbackInside = this.information[0];
                    this.ribbackDentro = this.information[1];
                }
                else
                {
                    this.ribbackInside = false;
                    this.ribbackDentro = {health: 0, healthMAX: 0, speed: 0, prego: 0, barcode: 0, lifetime: 0, calledOut: 0, nest: 0};
                }
            }
            var nearbyEnemy = false;

            if (this.ribbackInside == true)
            {
                if (this.ribbackDentro.prego > 0)
                {
                    this.ribbackDentro.prego += 0.05;
                    console.log(this.ribbackDentro.prego);
                }

                if (this.ribbackDentro.prego >= 100)
                {
                    this.ribbackDentro.prego = 0;
                    for (var i = 0; i < 8; i++)
                    {
                        var babyRibbyBacky = new Unit(this.X, this.Y, "Ribback", "baby", "unitGeneratedRibback");
                        babyRibbyBacky.getout = Math.PI * 2 * Math.random();

                        ArtificialIntelligenceAccess.push(babyRibbyBacky);
                    }
                }

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].team != "docile" && ArtificialIntelligenceAccess[i].team != "ribbackia" && ArtificialIntelligenceAccess[i].team != "ulgoyia" && ArtificialIntelligenceAccess[i].team != "shehidia")
                    {
                        if (ArtificialIntelligenceAccess[i].type != "Ribback" || ArtificialIntelligenceAccess[i].getaway == "none")
                        {
                            if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) <= 300)
                            {
                                nearbyEnemy = true;
                                this.tic += 1;
                            }
                        }
                    }
                }

                if (this.playerer <= 300)
                {
                    this.tac += 1;
                }

                if (this.playerer > 300)
                {
                    this.tac = 0;
                }

                if (nearbyEnemy == false)
                {
                    this.tic = 0;
                }

                if (this.ribbackDentro.calledOut == true || this.tic > 90 || this.tac > 90)
                {
                    var ribbyBacky = new Unit(this.X, this.Y, "Ribback", true, "bigMamaRibback");
                    ribbyBacky.healthMAX = this.ribbackDentro.healthMAX;
                    ribbyBacky.health = this.ribbackDentro.health;
                    ribbyBacky.speed = this.ribbackDentro.speed;
                    ribbyBacky.prego = this.ribbackDentro.prego;
                    ribbyBacky.barcode = this.ribbackDentro.barcode;
                    ribbyBacky.lifetime = this.ribbackDentro.lifetime;
                    ribbyBacky.calledOut = this.ribbackDentro.calledOut;
                    ribbyBacky.nest = this.ribbackDentro.nest;
                    ribbyBacky.gender = 0;

                    ArtificialIntelligenceAccess.push(ribbyBacky);
                    this.ribbackInside = false;
                    this.ribbackDentro = {health: 0, healthMAX: 0, speed: 0, prego: 0, barcode: 0, lifetime: 0, calledOut: 0, nest: 0};
                }
            }
            //todo make it so that the spider can live in and exit the nest and have babies while in the nest

            //stick player and units in the web then store the data for spiders to access.
            this.webbed = [];
            if (this.playerer <= this.radius)
            {
                player.webbedNum = 3;
                player.webbedTime = new Date().getTime();
                if (quenHere == false)
                {
                    this.webbed.push(player);
                }
            }
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                var unitDist = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y - this.Y));
                if (unitDist <= this.radius)
                {
                    ArtificialIntelligenceAccess[i].webbedNum = 3;
                    ArtificialIntelligenceAccess[i].webbedTime = new Date().getTime();
                    this.webbed.push(ArtificialIntelligenceAccess[i]);
                }
            }
        }
        else if (this.type == "matnaWeb")
        {
            //TRAITS
            this.solid = false;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(jungho, 593, 622, 51, 45, -(1/2 * 51 * 1.7 * this.temporary), -(1/2 * 45 * 1.7 * this.temporary), 51 * 1.7 * this.temporary, 45 * 1.7 * this.temporary);
            XXX.restore();
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(jungho, 593, 622, 51, 45, -(1/2 * 51 * 1.7 * this.temporary) + 3 * this.temporary, -(1/2 * 45 * 1.7 * this.temporary) + 5 * this.temporary, 51 * 1.7 * this.temporary, 45 * 1.7 * this.temporary);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 35 * this.temporary;

            //stick player and units in the web then store the data for spiders to access.
            this.webbed = [];
            if (this.playerer <= this.radius)
            {
                player.webbedNum = 3;
                player.webbedTime = new Date().getTime();
                if (quenHere == false)
                {
                    this.webbed.push(player);
                }
            }
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                var unitDist = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y - this.Y));
                if (unitDist <= this.radius)
                {
                    ArtificialIntelligenceAccess[i].webbedNum = 3;
                    ArtificialIntelligenceAccess[i].webbedTime = new Date().getTime();
                    this.webbed.push(ArtificialIntelligenceAccess[i]);
                }
            }
        }
        else if (this.type == "web")
        {
            //TRAITS
            this.solid = false;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(nognog, 739, 351, 70, 62, -(1/2 * 70 * 1.6 * this.temporary), -(1/2 * 62 * 1.6 * this.temporary), 70 * 1.6 * this.temporary, 62 * 1.6 * this.temporary);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45 * this.temporary;

            //stick player and units in the web then store the data for spiders to access.
            this.webbed = [];
            if (this.playerer <= this.radius)
            {
                player.webbedNum = 3;
                player.webbedTime = new Date().getTime();
                if (quenHere == false)
                {
                    this.webbed.push(player);
                }
            }
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                var unitDist = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y - this.Y));
                if (unitDist <= this.radius)
                {
                    ArtificialIntelligenceAccess[i].webbedNum = 3;
                    ArtificialIntelligenceAccess[i].webbedTime = new Date().getTime();
                    this.webbed.push(ArtificialIntelligenceAccess[i]);
                }
            }
        }
        else if (this.type == "overWeb") //this is a purely decorative version of web that covers items and scenery objects.
        {
            //TRAITS
            this.zIndex = 3;
            this.solid = false;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(nognog, 739, 351, 70, 62, -(1/2 * 70 * 1.6 * this.temporary), -(1/2 * 62 * 1.6 * this.temporary), 70 * 1.6 * this.temporary, 62 * 1.6 * this.temporary);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45 * this.temporary;
        }
        else if (this.type == "mofuNest")
        {
            //TRAITS
            this.solid = false;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(mofu, 123, 89, 30, 29, -(1/2 * 30 * longevity), -(1/2 * 29 * longevity), 30 * longevity, 29 * longevity);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

        }
        else if (this.type == "anvil")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(verse, 2877, 149, 27, 15, -(1/2 * 54), -(1/2 * 30), 54, 30);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && player.weaponEquipped == "hammer")
            {
                this.activate = false;
                player.craftPosition = 0;
                craftScroll = 0;
                crafting = "smithing";
                lowBar = "crafting";
                gameState = "paused";
            }
        }
        else if (this.type == "candle")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(candlewic, 33, 16, 9, 9, -(1/2 * 9 * 1.2), -(1/2 * 9 * 1.2), 9 * 1.2, 9 * 1.2);
            XXX.restore();

            // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.lightTime = this.information[0];
            }

            if (this.temporary != true)
            {
                if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                {
                    lights.push({X: this.X, Y: this.Y, size: 65, extraStops: true, GRD: 0.35, Alpha: 0.5, showMe: false});
                }
                else
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("candle2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("candle1", this.X, this.Y), 1])
                    }
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else
            {
                lights.push({X: this.X, Y: this.Y, size: 65, extraStops: true, GRD: 0.35, Alpha: 0.5, showMe: false});
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 8;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (player.getIntelligence() < 1)
                {
                    player.health = Math.min(player.health, player.health - (0.25 - player.heatResistance)); //it burns the players finger :( ... or not
                }
                else if (this.temporary != true)
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("candle2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("candle1", this.X, this.Y), 1])
                    }
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

            }
        }
        else if (this.type == "jackOLantern")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(candlewic, 4, 100, 17, 18, - (1/2 * 17 * 1.2), - (1/2 * 18 * 1.2), 17 * 1.2, 18 * 1.2);
            XXX.restore();

            // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.lightTime = this.information[0];
            }

            if (this.temporary != true)
            {
                if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                {
                    lights.push({X: this.X, Y: this.Y, size: 85, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: false});
                }
                else
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("jackOLantern2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("jackOLantern1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("jackOLanternEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else
            {
                lights.push({X: this.X, Y: this.Y, size: 85, extraStops: true, GRD: 0.7, Alpha: 0.4, showMe: false});
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.temporary != true)
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("jackOLantern2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("jackOLantern1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("jackOLanternEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "vardanianLamp")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(gent, 71, 226, 20, 20, - (1/2 * 20 * 1), - (1/2 * 20 * 1), 20 * 1, 20 * 1);
            XXX.restore();

            // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.lightTime = this.information[0];
            }

            if (this.temporary != true)
            {
                if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                {
                    lights.push({X: this.X, Y: this.Y, size: 220, extraStops: true, GRD: 0.1, Alpha: 0.4, showMe: false});
                }
                else
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("vardanianLamp2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("vardanianLamp1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("vardanianLampEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else
            {
                lights.push({X: this.X, Y: this.Y, size: 220, extraStops: true, GRD: 0.1, Alpha: 0.4, showMe: false});
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 11;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.temporary != true)
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("vardanianLamp2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("vardanianLamp1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("vardanianLampEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "oilLamp")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(candlewic, 51, 110, 14, 15, - (1/2 * 14 * 1.2), - (1/2 * 15 * 1.2), 14 * 1.2, 15 * 1.2);
            XXX.restore();

            // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.lightTime = this.information[0];
            }

            if (this.temporary != true)
            {
                if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                {
                    lights.push({X: this.X, Y: this.Y, size: 175, extraStops: true, GRD: 0.7, Alpha: 0.8, showMe: false});
                }
                else
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("oilLamp2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("oilLamp1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("oilLampEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else
            {
                lights.push({X: this.X, Y: this.Y, size: 175, extraStops: true, GRD: 0.7, Alpha: 0.8, showMe: false});
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 11;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.temporary != true)
                {
                    if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("oilLamp2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("oilLamp1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("oilLampEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "oilLantern")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(candlewic, 26, 109, 16, 16, - (1/2 * 16 * 1.2), - (1/2 * 16 * 1.2), 16 * 1.2, 16 * 1.2);
            XXX.restore();

            // for the candle scenery object information == [lightsource duration, type of candle (fuel left in used candle)]
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.lightTime = this.information[0];
            }

            if (this.temporary != true)
            {
                if (new Date().getTime() - this.lightGetTime < this.lightTime * 1000)
                {
                    lights.push({X: this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
                }
                else
                {
                    if (this.information[1] == 5)
                    {
                        worldItems.push([new Item("oilLantern4", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 4)
                    {
                        worldItems.push([new Item("oilLantern3", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("oilLantern2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("oilLantern1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("oilLanternEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            else
            {
                lights.push({X: this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.7, Alpha: 0.9, showMe: false});
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 11;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.temporary != true)
                {
                    if (this.information[1] == 5)
                    {
                        worldItems.push([new Item("oilLantern4", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 4)
                    {
                        worldItems.push([new Item("oilLantern3", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 3)
                    {
                        worldItems.push([new Item("oilLantern2", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 2)
                    {
                        worldItems.push([new Item("oilLantern1", this.X, this.Y), 1])
                    }
                    else if (this.information[1] == 1)
                    {
                        worldItems.push([new Item("oilLanternEmpty", this.X, this.Y), 1])
                    }

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "bearTrap")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 50;

            if (this.runOneTime)
            {
                this.stage = 1;
                this.runOneTime = false;
                this.tiic = 0;
            }

            //DRAWSELF
            if (this.stage == 0)
            {
                this.snapShut = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mofu, 83, 8, 10, 9, -(1/2 * 10 * 1.5), -(1/2 * 9 * 1.5), 10 * 1.5, 9 * 1.5);
                XXX.restore();
            }
            else if (this.stage == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mofu, 62, 8, 10, 9, -(1/2 * 10 * 1.5), -(1/2 * 9 * 1.5), 10 * 1.5, 9 * 1.5);
                XXX.restore();
            }
            else if (this.stage == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mofu, 75, 8, 10, 9, -(1/2 * 10 * 1.5), -(1/2 * 9 * 1.5), 10 * 1.5, 9 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 13.5;

            //spring trap
            if (this.dst(X, Y) <= this.radius && this.stage == 1)
            {
                if (longevity == false)
                {
                    this.damagePlayer(5 + 30/50 * player.getSurvivalism(), 1);
                }
                else
                {
                    this.damagePlayer(20, 1);
                }
                this.stage = 2;
                this.snapShut = true;
            }
            if (this.stage == 1)
            {
                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        if (longevity == false)
                        {
                            ArtificialIntelligenceAccess[j].health -= Math.max(0, (5 + 30/50 * player.getSurvivalism()) - Math.max(0, ArtificialIntelligenceAccess[j].armour - 1));
                            //player.experience += 8 * (1 + player.getIntelligence() / 50); //the player gets experience for successful trapping.
                            ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                            ArtificialIntelligenceAccess[j].disturbedTime = new Date().getTime();
                            if (ArtificialIntelligenceAccess[j].health <= 0)
                            {
                                ArtificialIntelligenceAccess[j].killNotByPlayer = false;
                            }
                        }
                        else
                        {
                            ArtificialIntelligenceAccess[j].health -= Math.max(0, 20 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 1));
                        }
                        this.stage = 2;
                        this.snapShut = true;
                    }
                }
            }

            if (this.snapShut && this.stage == 2)
            {
                this.tiic += 1;
                trapclap.play();
                if (this.tiic >= 10)
                {
                    this.tiic = 0;
                    this.stage = 0;
                }
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.stage == 1 && this.temporary == false)
                {
                    this.snapShut = true;
                    this.stage = 2;
                }
                else if (this.stage == 1 && player.getSurvivalism >= 1)
                {
                    this.snapShut = true;
                    this.stage = 2;
                }

                if (longevity == false && this.stage == 0)
                {
                    worldItems.push([new Item("beartrap", this.X, this.Y), 1]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "floorTrap")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 70;

            if (this.runOneTime)
            {
                this.stage = 1;
                this.runOneTime = false;
                this.tiic = 0;
                this.triggered = false;
            }

            if (this.triggered != "ended")
            {
                this.tiic += 1;
            }

            //DRAWSELF
            if (this.stage == 0)
            {
                this.triggered = "ended";
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 257, 1, 38, 35, -(1 / 2 * 38 * 2), -(1 / 2 * 35 * 2), 38 * 2, 35 * 2);
                XXX.restore();
            }
            else if (this.stage == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 88, 1, 21, 20, -(1 / 2 * 21 * 2), -(1 / 2 * 20 * 2), 21 * 2, 20 * 2);
                XXX.restore();
                if (this.triggered == true)
                {
                    if (this.tiic >= 3)
                    {
                        this.stage += 1;
                        this.tiic = 0;
                    }
                }
            }
            else if (this.stage == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 116, 1, 21, 20, -(1 / 2 * 21 * 2), -(1 / 2 * 20 * 2), 21 * 2, 20 * 2);
                XXX.restore();
                if (this.tiic >= 4)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 143, 1, 21, 20, -(1 / 2 * 21 * 2), -(1 / 2 * 20 * 2), 21 * 2, 20 * 2);
                XXX.restore();
                if (this.tiic >= 4)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 173, 1, 21, 20, -(1 / 2 * 21 * 2), -(1 / 2 * 20 * 2), 21 * 2, 20 * 2);
                XXX.restore();
                if (this.tiic >= 4)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 202, 1, 21, 20, -(1 / 2 * 21 * 2), -(1 / 2 * 20 * 2), 21 * 2, 20 * 2);
                XXX.restore();
                if (this.tiic >= 3)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 6)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 229, 1, 21, 20, -(1 / 2 * 21 * 2), -(1 / 2 * 20 * 2), 21 * 2, 20 * 2);
                XXX.restore();
                if (this.tiic >= 3)
                {
                    //trapclap.play();
                    this.stage = 0; //set to disarmed mode.
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //spring trap
            if (this.stage == 1 || this.stage == 0 && this.triggered != "ended")
            {
                if (this.stage == 1)
                {
                    if (this.dst(X, Y) <= 21) //sensitivity range
                    {
                        if (this.triggered != "ended")
                        {
                            this.triggered = true;
                        }
                    }
                }
                if (this.stage == 0 && this.triggered != "ended")
                {
                    if (this.dst(X, Y) <= 25) //sensitivity range
                    {
                        this.triggered = "ended";
                        if (longevity == false)
                        {
                            this.damagePlayer(15 + 40 / 50 * player.getSurvivalism(), 5);
                        }
                        else
                        {
                            this.damagePlayer(50, 5);
                        }
                    }
                }


                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (this.stage == 1)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 21 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            if (this.triggered != "ended")
                            {
                                this.triggered = true;
                            }
                        }
                    }
                    if (this.stage == 0 && this.triggered != "ended")
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 25 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            this.triggered = "ended";
                            if (longevity == false)
                            {
                                ArtificialIntelligenceAccess[j].health -= Math.max(0, (15 + 40 / 50 * player.getSurvivalism()) - Math.max(0, ArtificialIntelligenceAccess[j].armour - 5));
                                //player.experience += 9 * (1 + player.getIntelligence() / 50); //the player gets experience for successful trapping.
                                ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                                ArtificialIntelligenceAccess[j].disturbedTime = new Date().getTime();
                                if (ArtificialIntelligenceAccess[j].health <= 0)
                                {
                                    ArtificialIntelligenceAccess[j].killNotByPlayer = false;
                                }
                            }
                            else
                            {
                                ArtificialIntelligenceAccess[j].health -= Math.max(0, 50 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 5));
                            }
                        }
                    }
                }
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.temporary == false && this.stage == 0)
                {
                    worldItems.push([new Item("floortrap", this.X, this.Y), 1]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
                else if (this.stage == 1 && this.temporary == false)
                {
                    this.triggered = true;
                }
                else if (this.stage == 1 && player.getSurvivalism() >= 15)
                {
                    this.triggered = true;
                }
            }
        }
        else if (this.type == "fireTrap")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 73;

            if (this.runOneTime)
            {
                this.stage = 1;
                this.runOneTime = false;
                this.tiic = 0;
                this.triggered = false;
            }

            if (this.triggered != "ended")
            {
                this.tiic += 1;
            }

            if (this.stage > 1)
            {
                if (timeOfDay != "Day")
                {
                    lights.push({X: this.X, Y: this.Y, size: 23, extraStops: true, GRD: 0.15, Alpha: 0.65, showMe: false});
                }
            }

            //DRAWSELF
            if (this.stage == 0)
            {
                this.snapShut = false;
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 213, 64, 14, 41, -(1 / 2 * 14 * 1.5), -(1 / 2 * 41 * 1.5), 14 * 1.5, 41 * 1.5);
                XXX.restore();
            }
            else if (this.stage == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 213, 64, 14, 41, -(1 / 2 * 14 * 1.5), -(1 / 2 * 41 * 1.5), 14 * 1.5, 41 * 1.5);
                XXX.restore();

                if (this.triggered == true)
                {
                    this.stage = 2;
                }
            }
            else
            {
                if (this.tiic < 7)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(trapper, 231, 64, 14, 41, -(1 / 2 * 14 * 1.5), -(1 / 2 * 41 * 1.5), 14 * 1.5, 41 * 1.5);
                    XXX.restore();
                }
                else if (this.tiic < 14)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(trapper, 249, 64, 14, 41, -(1 / 2 * 14 * 1.5), -(1 / 2 * 41 * 1.5), 14 * 1.5, 41 * 1.5);
                    XXX.restore();
                }
                else if (this.tiic < 21)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(trapper, 267, 64, 14, 41, -(1 / 2 * 14 * 1.5), -(1 / 2 * 41 * 1.5), 14 * 1.5, 41 * 1.5);
                    XXX.restore();
                }
                else if (this.tiic < 28)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(trapper, 283, 64, 14, 41, -(1 / 2 * 14 * 1.5), -(1 / 2 * 41 * 1.5), 14 * 1.5, 41 * 1.5);
                    XXX.restore();
                }
                else
                {
                    this.tiic = 0;
                    this.stage += 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(trapper, 283, 64, 14, 41, -(1 / 2 * 14 * 1.5), -(1 / 2 * 41 * 1.5), 14 * 1.5, 41 * 1.5);
                    XXX.restore();
                }
            }

            if (this.stage >= 17)
            {
                this.triggered = "ended";
                this.stage = 0;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //spring trap
            if (this.stage != 0)
            {
                if (this.stage == 1)
                {
                    if (this.dst(X, Y) <= 20) //sensitivity range
                    {
                        if (this.triggered != "ended")
                        {
                            this.triggered = true;
                        }
                    }
                }
                else
                {
                    if (this.triggered == true)
                    {
                        if (this.dst(X, Y) <= 23) //sensitivity range
                        {
                            if (player.mageShield > 0)
                            {
                                player.mageShield -= 0.125;
                                player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                            }
                            else
                            {
                                player.health += player.mageShield;
                                player.mageShield = 0;

                                player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                                player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                                player.burningTime = new Date().getTime();
                            }
                        }
                    }
                }

                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (this.stage == 1)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 20 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            if (this.triggered != "ended")
                            {
                                this.triggered = true;
                            }
                        }
                    }
                    else if (this.triggered == true)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 23 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            ArtificialIntelligenceAccess[j].burningTime = new Date().getTime();
                        }
                    }
                }
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.temporary == false && this.stage == 0)
                {
                    worldItems.push([new Item("firetrapEmpty", this.X, this.Y), 1]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
                else if (this.stage == 1 && this.temporary == false)
                {
                    this.triggered = true;
                }
                else if (this.stage == 1 && player.getSurvivalism() >= 12)
                {
                    this.triggered = true;
                }
            }
        }
        else if (this.type == "clawTrap")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 65;

            if (this.runOneTime)
            {
                this.stage = 1;
                this.runOneTime = false;
                this.tiic = 0;
                this.triggered = false;
            }

            if (this.triggered || this.stage > 1)
            {
                this.tiic += 1;
            }

            //DRAWSELF
            if (this.stage == 0)
            {
                this.snapShut = false;
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 186, 47, 14, 35, -(1 / 2 * 14 * 1.5), -(1 / 2 * 35 * 1.5), 14 * 1.5, 35 * 1.5);
                XXX.restore();
            }
            else if (this.stage == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 102, 47, 14, 35, -(1 / 2 * 14 * 1.5), -(1 / 2 * 35 * 1.5), 14 * 1.5, 35 * 1.5);
                XXX.restore();
                if (this.tiic >= 1)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 123, 46, 14, 35, -(1 / 2 * 14 * 1.5), -(1 / 2 * 35 * 1.5), 14 * 1.5, 35 * 1.5);
                XXX.restore();
                if (this.tiic >= 2)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 148, 46, 14, 35, -(1 / 2 * 14 * 1.5), -(1 / 2 * 35 * 1.5), 14 * 1.5, 35 * 1.5);
                XXX.restore();
                if (this.tiic >= 2)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 166, 48, 14, 35, -(1 / 2 * 14 * 1.5), -(1 / 2 * 35 * 1.5), 14 * 1.5, 35 * 1.5);
                XXX.restore();
                if (this.tiic >= 2)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 186, 47, 14, 35, -(1 / 2 * 14 * 1.5), -(1 / 2 * 35 * 1.5), 14 * 1.5, 35 * 1.5);
                XXX.restore();
                if (this.tiic >= 2)
                {
                    this.stage += 1;
                    this.tiic = 0;
                }
            }
            else if (this.stage == 6)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(trapper, 186, 47, 14, 35, -(1 / 2 * 14 * 1.5), -(1 / 2 * 35 * 1.5), 14 * 1.5, 35 * 1.5);
                XXX.restore();
                if (this.tiic >= 2)
                {
                    trapclap.play();
                    this.stage = 0; //set to disarmed mode.
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24;

            //spring trap
            if (this.stage == 1 || this.stage == 5)
            {
                if (this.stage == 1)
                {
                    if (this.dst(X, Y) <= 14) //sensitivity range
                    {
                        if (this.triggered != "ended")
                        {
                            this.triggered = true;
                        }
                    }
                }
                if (this.stage == 1 && this.triggered == true)
                {
                    if (this.dst(X, Y) <= 22) //sensitivity range
                    {
                        this.triggered = "ended";
                        if (longevity == false)
                        {
                            this.damagePlayer(9 + 34 / 50 * player.getSurvivalism(), 3);
                        }
                        else
                        {
                            this.damagePlayer(34, 3);
                        }
                    }
                }


                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (this.stage == 1)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 14 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            if (this.triggered != "ended")
                            {
                                this.triggered = true;
                            }
                        }
                    }
                    if (this.stage == 1 && this.triggered == true)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 22 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            this.triggered = "ended";
                            if (longevity == false)
                            {
                                ArtificialIntelligenceAccess[j].health -= Math.max(0, (9 + 34 / 50 * player.getSurvivalism()) - Math.max(0, ArtificialIntelligenceAccess[j].armour - 3));
                                //player.experience += 9 * (1 + player.getIntelligence() / 50); //the player gets experience for successful trapping.
                                ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                                ArtificialIntelligenceAccess[j].disturbedTime = new Date().getTime();
                                if (ArtificialIntelligenceAccess[j].health <= 0)
                                {
                                    ArtificialIntelligenceAccess[j].killNotByPlayer = false;
                                }
                            }
                            else
                            {
                                ArtificialIntelligenceAccess[j].health -= Math.max(0, 34 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 3));
                            }
                        }
                    }
                }
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.temporary == false && this.stage == 0)
                {
                    worldItems.push([new Item("clawtrap", this.X, this.Y), 1]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
                else if (this.stage == 1 && this.temporary == false)
                {
                    this.triggered = true;
                }
                else if (this.stage == 1 && player.getSurvivalism() >= 3)
                {
                    this.triggered = true;
                }
            }
        }
        else if (this.type == "jacks")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(trapper, 217, 30, 37, 35, -(1 / 2 * 37 * 1.5), -(1 / 2 * 35 * 1.5), 37 * 1.5, 35 * 1.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //spring trap
            if (this.dst(X, Y) <= this.radius) //sensitivity range
            {
                this.triggered = true;
                if (longevity == false)
                {
                    this.damagePlayer(1 + 3 / 50 * player.getSurvivalism(), 1);
                }
                else
                {
                    this.damagePlayer(3, 1);
                }
            }
            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3 / 4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    this.triggered = true;
                    if (longevity == false)
                    {
                        ArtificialIntelligenceAccess[j].health -= Math.max(0, (1 + 3 / 50 * player.getSurvivalism()) - Math.max(0, ArtificialIntelligenceAccess[j].armour - 1));
                        //player.experience += 1 * (1 + player.getIntelligence() / 50); //the player gets experience for successful trapping.
                        ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                        ArtificialIntelligenceAccess[j].disturbedTime = new Date().getTime();
                        if (ArtificialIntelligenceAccess[j].health <= 0)
                        {
                            ArtificialIntelligenceAccess[j].killNotByPlayer = false;
                        }
                    }
                    else
                    {
                        ArtificialIntelligenceAccess[j].health -= Math.max(0, 3 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 1));
                    }
                }
            }

            //delete upon successful trapping
            if (this.triggered)
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                worldItems.push([new Item("jacks", this.X, this.Y), 1]);

                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }
        }
        else if (this.type == "spindleTrap")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 62;
            this.zIndex = 2;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.triggered = true;
                this.gearTurn = 0;
                this.bladeTurn = 0;
                this.gearSpin = 0;
                this.bladeSpin = 0;
                this.tiic = 0;
            }

            //spring trap
            var self = this;

            this.springTrap = function()
            {
                self.tiic += 1;
                if (self.dst(X, Y) <= self.radius) //sensitivity range
                {
                    if (self.temporary == false)
                    {
                        self.damagePlayer(1 + 3 / 50 * player.getSurvivalism(), 13);
                    }
                    else
                    {
                        self.damagePlayer(3.5, 13);
                    }
                }
                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (self.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= self.radius + (3 / 4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == self.dmx)
                    {
                        if (self.temporary == false)
                        {
                            ArtificialIntelligenceAccess[j].health -= Math.max(0, (1 + 3 / 50 * player.getSurvivalism()) - Math.max(0, ArtificialIntelligenceAccess[j].armour - 13));
                            //player.experience += 0.15 * (1 + player.getIntelligence() / 50); //the player gets experience for successful trapping.
                            ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                            ArtificialIntelligenceAccess[j].disturbedTime = new Date().getTime();
                            if (ArtificialIntelligenceAccess[j].health <= 0)
                            {
                                ArtificialIntelligenceAccess[j].killNotByPlayer = false;
                            }
                        }
                        else
                        {
                            ArtificialIntelligenceAccess[j].health -= Math.max(0, 3.5 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 13));
                        }
                    }
                }
            };

            //Wind-up Spin
            if (this.tiic >= 60 && this.temporary != true)
            {
                this.triggered = false;
            }

            if (this.bladeSpin >= 1.8)
            {
                this.interval(0.345, this.springTrap); //can only be called from one site per scenery object
            }

            if (this.triggered)
            {
                this.gearSpin = Math.max(-6.6, this.gearSpin - 0.02);
                this.bladeSpin = Math.min(3.3, this.bladeSpin + 0.015);
            }
            else
            {
                this.gearSpin = Math.min(0, this.gearSpin + 0.1);
                this.bladeSpin = Math.max(0, this.bladeSpin - 0.075);
            }
            this.gearTurn += this.gearSpin;
            this.bladeTurn += this.bladeSpin;

            //DRAWSELF
            //base
            XXX.save();
            XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(trapper, 124, 93, 10, 10, -(1 / 2 * 10 * 2.5), -(1 / 2 * 10 * 2.5), 10 * 2.5, 10 * 2.5);
            XXX.restore();
            //blade
            XXX.save();
            XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
            XXX.rotate(this.rotation + this.bladeTurn / (Math.PI * 6));
            XXX.drawImage(trapper, 46, 79, 42, 39, -(1 / 2 * 42 * 2.5), -(1 / 2 * 39 * 2.5), 42 * 2.5, 39 * 2.5);
            XXX.restore();
            //gear
            XXX.save();
            XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
            XXX.rotate(this.rotation + this.gearTurn / (Math.PI * 6));
            XXX.drawImage(trapper, 105, 92, 10, 10, -(1 / 2 * 10 * 2.5), -(1 / 2 * 10 * 2.5), 10 * 2.5, 10 * 2.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 58;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (!this.triggered && this.bladeSpin <= 0 && this.temporary == false)
                {
                    worldItems.push([new Item("spindletrap", this.X, this.Y), 1]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
                else if (player.getSurvivalism() >= 13 && this.triggered)
                {
                    this.triggered = false;
                }

            }
        }
        else if (this.type == "fertilizedMofuEgg")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(mofu, 109, 54, 8, 11, -(1/2 * 8), -(1/2 * 11), 8, 11);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 5;

            //HATCHING
            this.eggHatchTimer += 1 * (TTD / 16.75);
            if (this.eggHatchTimer >= 15000)
            {
                this.eggHatchTimer = -1000000;
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Mofu", "baby", "Generic Mofu"));
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                worldItems.push([new Item("mofuEgg", this.X, this.Y), 1]);

                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }
        }
        else if (this.type == "turkeyEgg")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(pavo, 724, 186, 13, 15, -(1/2 * 13), -(1/2 * 15), 13, 15);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 5;

            //HATCHING
            this.eggHatchTimer += 1 * (TTD / 16.75);
            if (this.eggHatchTimer >= 8000)
            {
                this.eggHatchTimer = -10000000000;
                if (this.temporary == true)
                {
                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Turkey", "baby", "Generic Turkey"));
                }
                else
                {
                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Turkey", "baby", "player"));
                }
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                worldItems.push([new Item("turkeyEgg", this.X, this.Y), 1]);

                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }
        }
        else if (this.type == "dalgerEgg")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.health = 2;
                this.tic = 0;
                this.phase = 1;
                this.rotation = 2 * Math.PI * Math.random();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 5;

            //HATCHING
            if (this.phase == 1)
            {
                this.eggHatchTimer += 1 * (TTD / 16.75);
                if (this.eggHatchTimer >= 12000)
                {
                    this.eggHatchTimer = -1000000;
                    var impressionableBaby = new Unit(this.X, this.Y, "Dalger", "baby", "Generic Dalger");
                    if (this.temporary == "player")
                    {
                        impressionableBaby.baseTeam = "player";
                    }
                    ArtificialIntelligenceAccess.push(impressionableBaby);

                    this.phase = 0;
                }

                if (player.cutcut == true && this.playerer <= 400)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                    {
                        this.health -= player.weapon.damage;
                    }
                }

                if (this.health <= 0)
                {
                    this.phase = 0;
                }

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 115, 113, 21, 23, -(1/2 * 21), -(1/2 * 23), 21, 23);
                XXX.restore();
            }
            else //broken egg
            {
                this.tic += 1;

                if (this.tic > 130)
                {
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 139, 109, 27, 27, -(1/2 * 27), -(1/2 * 27), 27, 27);
                XXX.restore();
            }

            //INTERACTION
            if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                worldItems.push([new Item("dalgerEgg", this.X, this.Y), 1]);

                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }
        }
        else if (this.type == "etnaEggSac")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(nognog, 834, 374, 10, 10, -(1/2 * 10 * 3.7), -(1/2 * 10 * 3.7), 10 * 3.7, 10 * 3.7);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 26;

            //HATCHING
            this.eggHatchTimer += 1 * (TTD / 16.75);
            if (this.eggHatchTimer >= 12250)
            {
                this.eggHatchTimer = -1000000;
                //spawn 8 baby etnas
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Etna", "baby", "Generic Etna"));

                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                worldItems.push([new Item("etnaEggSac", this.X, this.Y), 1]);

                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }
        }
        else if (this.type == "silterEggs")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase != "broken")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 552, 274, 38, 33, -(1/2 * 38 * 1), -(1/2 * 33 * 1), 38 * 1, 33 * 1);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 551, 307, 38, 33, -(1/2 * 38 * 1), -(1/2 * 33 * 1), 38 * 1, 33 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 8;

            //HATCHING
            this.eggHatchTimer += 1 * (TTD / 16.75);
            if (this.eggHatchTimer >= 7777)
            {
                this.eggHatchTimer = -1000000;
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Silter", "baby", "Generic Silter"));
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (player.getSurvivalism() >= 1 && this.phase != "broken")
                {
                    worldItems.push([new Item("silterEggs", this.X, this.Y), 1]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "grewbleEgg")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(lodo, 9, 29, 12, 12, -(1/2 * 12 * 2), -(1/2 * 12 * 2), 12 * 2, 12 * 2);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 8;

            //HATCHING
            this.eggHatchTimer += 1 * (TTD / 16.75);
            if (this.eggHatchTimer >= 6000)
            {
                this.eggHatchTimer = -1000000;
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Grewble", "baby", "Generic Grewble"));
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                worldItems.push([new Item("grewbleEgg", this.X, this.Y), 1]);

                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }
        }
        else if (this.type == "grewbleEggPatch")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 29, 23, 24, 23, -(1 / 2 * 24 * 2), -(1 / 2 * 23 * 2), 24 * 2, 23 * 2);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 30, 50, 24, 23, -(1 / 2 * 24 * 2), -(1 / 2 * 23 * 2), 24 * 2, 23 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 12;

            //HATCHING
            this.eggHatchTimer += 1 * (TTD / 16.75);
            if (this.eggHatchTimer >= 6000 && this.phase != "broken")
            {
                this.eggHatchTimer = -1000000;
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Grewble", "baby", "Generic Grewble"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Grewble", "baby", "Generic Grewble"));
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Grewble", "baby", "Generic Grewble"));
                this.phase = "broken";
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.phase != "broken" && player.getSurvivalism() >= 8)
                {
                    worldItems.push([new Item("grewbleEgg", this.X, this.Y), 3]);

                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
                else
                {
                    this.phase = "broken";
                }
            }
        }
        else if (this.type == "shriekingBloodWormEggs")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.phase = 2;
                this.fertilized = false;
            }

            if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(blud, 494, 35, 78, 82, -(1 / 2 * 78 * 0.4), -(1 / 2 * 82 * 0.4), 78 * 0.4, 82 * 0.4);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(blud, 605, 37, 78, 82, -(1 / 2 * 78 * 0.4), -(1 / 2 * 82 * 0.4), 78 * 0.4, 82 * 0.4);
                XXX.drawImage(blud, 635, 570, 50, 48, -(1 / 2 * 50 * 0.55), -(1 / 2 * 48 * 0.55), 50 * 0.55, 48 * 0.55);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //HATCHING
            if (this.phase == 2 && this.fertilized == true)
            {
                this.eggHatchTimer += 1 * (TTD / 16.75);
                if (this.eggHatchTimer >= 4000 && this.phase != "broken")
                {
                    for (var ii = 0; ii < (Math.floor(Math.random() * 6) + 1); ii++)
                    {
                        var newby = new Unit(this.X, this.Y, "ShriekingBloodworm", "baby", "Generic Shrieking Bloodworm");
                        newby.mamaID = this.information;
                        ArtificialIntelligenceAccess.push(newby);
                    }

                    this.phase = "broken";
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.phase = "broken";
            }
        }
        else if (this.type == "lyagushkaEggCluster")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF

            if (this.phase == 0)
            {
                this.phase = 2;
                this.tic = 0;
            }

            if (this.phase == 2)
            {
                if (this.tic < 10)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cleen, 439, 49, 36, 33, -(1 / 2 * 36 * 1), -(1 / 2 * 33 * 1), 36 * 1, 33 * 1);
                    XXX.restore();
                }
                else if (this.tic < 20)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cleen, 438, 12, 36, 33, -(1 / 2 * 36 * 1), -(1 / 2 * 33 * 1), 36 * 1, 33 * 1);
                    XXX.restore();
                }
                else
                {
                    this.phase = "hatch";
                    XXX.save();
                    XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cleen, 438, 12, 36, 33, -(1 / 2 * 36 * 1), -(1 / 2 * 33 * 1), 36 * 1, 33 * 1);
                    XXX.restore();
                }
            }
            else if (this.phase == "broken" || this.phase == "hatch")
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 398, 11, 36, 33, -(1 / 2 * 36 * 1), -(1 / 2 * 33 * 1), 36 * 1, 33 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //HATCHING
            if (this.phase != "broken")
            {
                this.eggHatchTimer += 1 * (TTD / 16.75);
                if (this.eggHatchTimer >= 1900)
                {
                    this.tic += 1;
                    if (this.phase == "hatch")
                    {
                        for (var ii = 0; ii < (Math.floor(Math.random() * 3) + 3); ii++)
                        {
                            var newby = new Unit(this.X, this.Y, "Lyagushka", "baby", "Generic Lyagushka");
                            newby.bigGene = this.temporary;
                            if (Math.random() < 0.05)
                            {
                                newby.bigGene = 1 - this.temporary;
                            }
                            newby.geneticMarker = this.information;

                            ArtificialIntelligenceAccess.push(newby);
                        }
                        this.phase = "broken";
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.phase = "broken";
            }
        }
        else if (this.type == "motylekhEgg")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.phase = 2;
            }

            if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 291, 16, 24, 22, -(1 / 2 * 24 * 1.2), -(1 / 2 * 22 * 1.2), 24 * 1.2, 22 * 1.2);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 319, 17, 24, 22, -(1 / 2 * 24 * 1.2), -(1 / 2 * 22 * 1.2), 24 * 1.2, 22 * 1.2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //HATCHING
            if (this.phase == 2)
            {
                this.eggHatchTimer += 1 * (TTD / 16.75);
                if (this.eggHatchTimer >= 540 && this.phase != "broken")
                {
                    var newby = new Unit(this.X, this.Y, "Motylekh", "baby", "Generic Motylekh");

                    ArtificialIntelligenceAccess.push(newby);

                    this.phase = "broken";
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.phase = "broken";
            }
        }
        else if (this.type == "motylekhEggs")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.phase = 2;
            }

            if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1392, 970, 57, 44, -(1 / 2 * 57 * 1.2), -(1 / 2 * 44 * 1.2), 57 * 1.2, 44 * 1.2);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1312, 974, 57, 44, -(1 / 2 * 57 * 1.2), -(1 / 2 * 44 * 1.2), 57 * 1.2, 44 * 1.2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //HATCHING
            if (this.phase == 2)
            {
                this.eggHatchTimer += 1 * (TTD / 16.75);
                if (this.eggHatchTimer >= 540 && this.phase != "broken")
                {
                    var newby = new Unit(this.X, this.Y, "Motylekh", "baby", "Generic Motylekh");

                    for (var ii = 0; ii < (Math.floor(Math.random() * 4) + 1); ii++)
                    {
                        ArtificialIntelligenceAccess.push(newby);
                    }

                    this.phase = "broken";
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.phase = "broken";
            }
        }
        else if (this.type == "pixiEggCluster")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 50;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.phase = 1;
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 5, 33, 21, 22, -(1 / 2 * 21 * 1), -(1 / 2 * 22 * 1), 21 * 1, 22 * 1);
                XXX.restore();
            }
            else if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 10, 8, 28, 26, -(1 / 2 * 28 * 1), -(1 / 2 * 26 * 1), 28 * 1, 26 * 1);
                XXX.restore();
            }
            else if (this.phase == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 59, 2, 44, 40, -(1 / 2 * 44 * 1), -(1 / 2 * 40 * 1), 44 * 1, 40 * 1);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 57, 46, 44, 40, -(1 / 2 * 44 * 1), -(1 / 2 * 40 * 1), 44 * 1, 40 * 1);
                XXX.restore();
            }

            if (this.eggHatchTimer > 320 && this.phase == 1)
            {
                this.phase = 2;
            }
            if (this.eggHatchTimer > 640 && this.phase == 2)
            {
                this.phase = 3;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //HATCHING
            if (this.phase == 3 || this.phase == 2 || this.phase == 1)
            {
                this.eggHatchTimer += 1 * (TTD / 16.75);
                if (this.eggHatchTimer >= 800 && this.phase != "broken")
                {

                    for (var ii = 0; ii < (Math.floor(Math.random() * 8) + 1); ii++)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X + spacer(55), this.Y + spacer(55), "Pixi", "baby", "Generic Pixi"));
                    }

                    this.phase = "broken";
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.phase == 3)
                {
                    this.phase = "broken";
                }
            }
        }
        else if (this.type == "mugmulMat")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(polux, 13, 907, 27, 34, (-1/2 * 27 * this.temporary), (-1/2 * 27 * this.temporary), 27 * this.temporary, 27 * this.temporary);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "mugmulSleepingMat")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 40;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(polux, 13, 907, 27, 34, (1/2 * 27 * 1) - 45, (1/2 * 34 * 1) - 30, 27 * 1, 34 * 1);
            XXX.drawImage(polux, 13, 907, 27, 34, (1/2 * 120 * 1) -25 - 75, (1/2 * 36 * 1) - 30, 120 * 1, 36 * 1);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.temporary == true)
                {
                    sleep();
                }
                this.activate = false;
            }
        }
        else if (this.type == "bed")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 50;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(candlewic, 2, 41, 23, 54, -(1/2 * 23 * 1.8), -(1/2 * 54 * 1.8), 23 * 1.8, 54 * 1.8);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.temporary == true)
                {
                    sleep();
                }
                this.activate = false;
            }
        }
        else if (this.type == "fineBed")
        {
            var szx = 1.84;
            //TRAITS
            this.solid = true;
            this.interactionRange = 50;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24;

            //DRAWSELF
            if (this.information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 38, 432, 18, 32, -(1/2 * 18 * 2.2 * szx), -(1/2 * 32 * 2.2 * szx), 18 * 2.2 * szx, 32 * 2.2 * szx);
                XXX.restore();
            }
            else if (this.information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 60, 432, 18, 32, -(1/2 * 18 * 2.2 * szx), -(1/2 * 32 * 2.2 * szx), 18 * 2.2 * szx, 32 * 2.2 * szx);
                XXX.restore();
            }
            else if (this.information == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 81, 433, 18, 32, -(1/2 * 18 * 2.2 * szx), -(1/2 * 32 * 2.2 * szx), 18 * 2.2 * szx, 32 * 2.2 * szx);
                XXX.restore();
            }
            else if (this.information == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 101, 434, 18, 32, -(1/2 * 18 * 2.2 * szx), -(1/2 * 32 * 2.2 * szx), 18 * 2.2 * szx, 32 * 2.2 * szx);
                XXX.restore();
            }
            else if (this.information == 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 125, 434, 18, 32, -(1/2 * 18 * 2.2 * szx), -(1/2 * 32 * 2.2 * szx), 18 * 2.2 * szx, 32 * 2.2 * szx);
                XXX.restore();
            }
            else if (this.information == 6)
            {
                szx = 1;
                this.radius = 34;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 59, 233, 93, 53, -(1/2 * 93 * szx), -(1/2 * 53 * szx), 93 * szx, 53 * szx);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 19, 432, 18, 32, -(1/2 * 18 * 2.2 * szx), -(1/2 * 32 * 2.2 * szx), 18 * 2.2 * szx, 32 * 2.2 * szx);
                XXX.restore();
            }

            //INTERACTION
            if (this.activate == true)
            {
                if (this.temporary == true)
                {
                    sleep();
                }
                this.activate = false;
            }
        }
        else if (this.type == "vardanBed")
        {
            var szx = this.temporary[1];
            //TRAITS
            this.solid = true;
            this.interactionRange = 50 * szx;
            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24 * szx;

            //DRAWSELF
            if (this.information == 1)
            {
                this.interactionRange = 50 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 24 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 889, 563, 62, 26, -(1/2 * 62 * 2 * szx), -(1/2 * 26 * 2 * szx), 62 * 2 * szx, 26 * 2 * szx);
                XXX.restore();
            }
            else if (this.information == 2)
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 43 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 870, 515, 85, 46, -(1/2 * 85 * 2 * szx), -(1/2 * 46 * 2 * szx), 85 * 2 * szx, 46 * 2 * szx);
                XXX.restore();
            }
            else if (this.information == 3)
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 43 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 525, 67, 91, 57, -(1/2 * 91 * 1.8 * szx), -(1/2 * 57 * 1.8 * szx), 91 * 1.8 * szx, 57 * 1.8 * szx);
                XXX.restore();
            }
            else if (this.information == 4)
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 24 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 542, 22, 72, 34, -(1/2 * 72 * 1.8 * szx), -(1/2 * 34 * 1.8 * szx), 72 * 1.8 * szx, 34 * 1.8 * szx);
                XXX.restore();
            }
            else if (this.information == 5)
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 43 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 525, 67, 91, 57, -(1/2 * 91 * 1.8 * szx), -(1/2 * 57 * 1.8 * szx), 91 * 1.8 * szx, 57 * 1.8 * szx);
                XXX.restore();
            }
            else if (this.information == 6)
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 24 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 542, 22, 72, 34, -(1/2 * 72 * 1.8 * szx), -(1/2 * 34 * 1.8 * szx), 72 * 1.8 * szx, 34 * 1.8 * szx);
                XXX.restore();
            }
            else if (this.information == 7)
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 43 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 1415, 259, 84, 52, -(1/2 * 84 * 1.8 * szx), -(1/2 * 52 * 1.8 * szx), 84 * 1.8 * szx, 52 * 1.8 * szx);
                XXX.restore();
            }
            else if (this.information == 8)
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 24 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 1430, 211, 69, 33, -(1/2 * 69 * 1.8 * szx), -(1/2 * 33 * 1.8 * szx), 69 * 1.8 * szx, 33 * 1.8 * szx);
                XXX.restore();
            }
            else
            {
                this.interactionRange = 100 * szx;
                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 45 * szx;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 84, 833, 95, 60, -(1/2 * 95 * 2 * szx), -(1/2 * 60 * 2 * szx), 95 * 2 * szx, 60 * 2 * szx);
                XXX.restore();
            }

            //INTERACTION
            if (this.activate == true)
            {
                if (this.temporary[0] == true)
                {
                    sleep();
                }
                this.activate = false;
            }
        }
        else if (this.type == "southBed")
        {
            var szx = 1;
            //TRAITS
            this.solid = true;
            this.interactionRange = 50;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24;

            //DRAWSELF
            if (this.information == 1) //cephrian single bed
            {
                szx = 1.25;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 614, 828, 72, 42, -(1/2 * 72 * 1 * szx), -(1/2 * 42 * 1 * szx), 72 * 1 * szx, 42 * 1 * szx);
                XXX.restore();
            }
            else if (this.information == 2) //cephrian double bed
            {
                szx = 1.25;
                this.radius = 34;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 686, 826, 93, 69, -(1/2 * 93 * 1 * szx), -(1/2 * 69 * 1 * szx), 93 * 1 * szx, 69 * 1 * szx);
                XXX.restore();
            }
            else if (this.information == 3)//zetian sleeping mat
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(raed, 1097, 742, 43, 56, -(1/2 * 39 * 1 * szx), -(1/2 * 68 * 1 * szx), 39 * 1 * szx, 68 * 1 * szx);
                XXX.restore();
            }
            else if (this.information == 4)//woven zwaleim sleeping mat
            {
                szx = 1.25;
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 735, 70, 64, 74, -(1/2 * 64 * 1 * szx), -(1/2 * 74 * 1 * szx), 64 * 1 * szx, 74 * 1 * szx);
                XXX.restore();
            }

            //INTERACTION
            if (this.activate == true)
            {
                if (this.temporary == true)
                {
                    sleep();
                }
                this.activate = false;
            }
        }
        else if (this.type == "trollScraps")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 50;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 10, 98, 17, 18, 0, 0, 17 * 1.9, 18 * 1.9);
            XXX.drawImage(theng, 10, 98, 17, 18, 10, 2, 17 * 1.9, 18 * 1.9);
            XXX.drawImage(theng, 10, 98, 17, 18, -6, 1, 17 * 1.9, 18 * 1.9);
            XXX.drawImage(theng, 10, 98, 17, 18, 2, -3, 17 * 1.9, 18 * 1.9);
            XXX.drawImage(theng, 10, 98, 17, 18, -1, 5, 17 * 1.9, 18 * 1.9);
            XXX.drawImage(theng, 10, 98, 17, 18, -5, 9, 17 * 1.9, 18 * 1.9);
            XXX.restore();

            if (this.temporary == false)
            {
                this.eggHatchTimer += 0.1;
            }
            if (this.eggHatchTimer > 40)
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }
            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "sign")
        {
            //TRAITS
            this.zIndex = 6;
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 440, 542, 37, 16, -(1/2 * 37 * 2), -(1/2 * 16 * 2), 37 * 2, 16 * 2);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 449, 515, 37, 16, -(1/2 * 37 * 2), -(1/2 * 16 * 2), 37 * 2, 16 * 2);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 448, 487, 27, 14, -(1/2 * 27 * 2), -(1/2 * 14 * 2), 27 * 2, 14 * 2);
                XXX.restore();
            }
            else if (this.temporary == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 448, 487, 27, 14, -(1/2 * 27 * 1), -(1/2 * 14 * 1), 27 * 1, 14 * 1);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 448, 487, 27, 14, -(1/2 * 27 * 2), -(1/2 * 14 * 2), 27 * 2, 14 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 12;

            //INTERACTION
            if (this.mouser <= this.radius && this.playerer <= 110)
            {
                XXX.beginPath();
                XXX.fillStyle = "gold";
                XXX.font="25px Book Antiqua";
                XXX.textAlign="center";
                XXX.fillText(this.information, X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            }

            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "walrusHideRug")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(polyPNG, 282, 0, 50, 26, -(1/2 * 50 * 2 * this.temporary), -(1/2 * 26 * 2 * this.temporary * 1.5), 50 * 2 * this.temporary, 26 * 2 * this.temporary * 1.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "fog")
        {
            //TRAITS
            this.zIndex = 4;
            this.solid = false;
            this.interactionRange = 1;
            if (this.fogTurn != 0 && this.fogTurn != 1)
            {
                this.fogTurn = Math.round(Math.random());
            }
            if (this.fogTurn == 0)
            {
                this.phase -= 0.0006;
            }
            else
            {
                this.phase += 0.0006;
            }

            //DRAWSELF
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.phase);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1943, 112, 308, 375, -(1/2 * 308 * 1 * this.information[1]), -(1/2 * 375 * 1 * this.information[1]), 308 * 1 * this.information[1], 375 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.phase);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1977, 482, 332, 279, -(1/2 * 332 * 1 * this.information[1]), -(1/2 * 279 * 1 * this.information[1]), 332 * 1 * this.information[1], 279 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.phase);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1685, 720, 255, 275, -(1/2 * 255 * 1 * this.information[1]), -(1/2 * 275 * 1 * this.information[1]), 255 * 1 * this.information[1], 275 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.phase);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1953, 766, 200, 222, -(1/2 * 200 * 1 * this.information[1]), -(1/2 * 222 * 1 * this.information[1]), 200 * 1 * this.information[1], 222 * 1 * this.information[1]);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "highFog")
        {
            //TRAITS
            this.zIndex = 6;
            this.solid = false;
            this.interactionRange = 1;
            if (this.fogTurn != 0 && this.fogTurn != 1)
            {
                this.fogTurn = Math.round(Math.random());
            }
            if (this.fogTurn == 0)
            {
                this.phase -= 0.0006;
            }
            else
            {
                this.phase += 0.0006;
            }

            //DRAWSELF
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1943, 112, 308, 375, -(1/2 * 308 * 1 * this.information[1]), -(1/2 * 375 * 1 * this.information[1]), 308 * 1 * this.information[1], 375 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1977, 482, 332, 279, -(1/2 * 332 * 1 * this.information[1]), -(1/2 * 279 * 1 * this.information[1]), 332 * 1 * this.information[1], 279 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1685, 720, 255, 275, -(1/2 * 255 * 1 * this.information[1]), -(1/2 * 275 * 1 * this.information[1]), 255 * 1 * this.information[1], 275 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1953, 766, 200, 222, -(1/2 * 200 * 1 * this.information[1]), -(1/2 * 222 * 1 * this.information[1]), 200 * 1 * this.information[1], 222 * 1 * this.information[1]);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "lowFog")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 1;
            if (this.fogTurn != 0 && this.fogTurn != 1)
            {
                this.fogTurn = Math.round(Math.random());
            }
            if (this.fogTurn == 0)
            {
                this.phase -= 0.0006;
            }
            else
            {
                this.phase += 0.0006;
            }

            //DRAWSELF
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1943, 112, 308, 375, -(1/2 * 308 * 1 * this.information[1]), -(1/2 * 375 * 1 * this.information[1]), 308 * 1 * this.information[1], 375 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1977, 482, 332, 279, -(1/2 * 332 * 1 * this.information[1]), -(1/2 * 279 * 1 * this.information[1]), 332 * 1 * this.information[1], 279 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1685, 720, 255, 275, -(1/2 * 255 * 1 * this.information[1]), -(1/2 * 275 * 1 * this.information[1]), 255 * 1 * this.information[1], 275 * 1 * this.information[1]);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = this.information[0];
                XXX.drawImage(tomb, 1953, 766, 200, 222, -(1/2 * 200 * 1 * this.information[1]), -(1/2 * 222 * 1 * this.information[1]), 200 * 1 * this.information[1], 222 * 1 * this.information[1]);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "gargoyle")
        {
            //TRAITS
            this.zIndex = 4;
            this.solid = true;
            this.interactionRange = 90;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(garg, 365, 217, 200, 143, -(1/2 * 200 * 1), -(1/2 * 143 * 1), 200 * 1, 143 * 1);
            XXX.restore();

            if (this.temporary == true)
            {
                if (timeOfDay == "Night" || timeOfDay == "Dusk")
                {
                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Gargoyle", true, "gargoyle"));
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 60;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (player.magicalExperience >= 2)
                {
                    player.magicalExperience -= 2;
                }
                else if (player.magicalExperience >= 1)
                {
                    player.magicalExperience -= 1;
                }
            }
        }
        else if (this.type == "blackBearFurRug")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(polypol, 558, 18, 53, 30, -(1/2 * 53 * 3.35 * this.temporary), -(1/2 * 30 * 3.35 * this.temporary), 53 * 3.35 * this.temporary, 30 * 3.35 * this.temporary);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "furRug")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 23, 251, 66, 48, -(1/2 * 66 * 1 * this.temporary), -(1/2 * 48 * 1 * this.temporary), 66 * 1 * this.temporary, 48 * 1 * this.temporary);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(folw, 127, 325, 67, 63, -(1/2 * 67 * 1 * this.temporary), -(1/2 * 63 * 1 * this.temporary), 67 * 1 * this.temporary, 63 * 1 * this.temporary);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "molteTrophy")
        {
            //TRAITS
            this.zIndex = 5;
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(molte, 504, 72, 36, 35, -(1/2 * 36 * 2 * 1.2), -(1/2 * 35 * 2 * 1.2), 36 * 2 * 1.2, 35 * 2 * 1.2);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "rubbledHome")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 135;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(freeverse, 273, 416, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
            XXX.drawImage(freeverse, 306, 487, 28, 13, -(8.5 * 2.5), (19 * 2.5), 28 * 2.5, 13 * 2.5);
            XXX.drawImage(freeverse, 363, 411, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "woodenGate")
        {
            //TRAITS
            this.zIndex = 4;
            this.solid = false;
            this.interactionRange = 55;
            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.phase = 0;
                this.doTic = false;
                this.primed = true;
                this.clave = "woodenGate" + Math.random();
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(26 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) + 87, (-1/2 * 13 * 5) - 13, 28 * 8.25, 13 * 5);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(26 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) - 68, (-1/2 * 13 * 5) + 20, 28 * 8.25, 13 * 5);
                XXX.restore();

                //barriers
                if (this.primed)
                {
                    var deleteList = [];
                    for (var l = 0; l < barrierList.length; l++)
                    {
                        if (barrierList[l].info == this.clave)
                        {
                            deleteList.push(l);
                        }
                    }
                    for (var l = deleteList.length - 1; l > -1; l--)
                    {
                        barrierList.splice(deleteList[l], 1);
                    }
                    barrierList.push(new Barrier((this.X - 158), (this.Y - 26), 30, 310, true, this.clave)); //gate closed
                }
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(52 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) + 70, (-1/2 * 13 * 5) - 40, 28 * 8.25, 13 * 5);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) - 80, (-1/2 * 13 * 5) - 5, 28 * 8.25, 13 * 5);
                XXX.restore();
            }
            else if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(77 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) + 60, (-1/2 * 13 * 5) - 79, 28 * 8.25, 13 * 5);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate((360 - 25) * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) + 87, (-1/2 * 13 * 5) + 29, 28 * 8.25, 13 * 5);
                XXX.restore();
            }
            else if (this.phase == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(112 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) + 28, (-1/2 * 13 * 5) - 110, 28 * 8.25, 13 * 5);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate((360 - 60) * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) + 59, (-1/2 * 13 * 5) + 78, 28 * 8.25, 13 * 5);
                XXX.restore();
            }
            else if (this.phase == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(152 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) - 20, (-1/2 * 13 * 5) - 138, 28 * 8.25, 13 * 5);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate((360 - 100) * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) + 45, (-1/2 * 13 * 5) + 112, 28 * 8.25, 13 * 5);
                XXX.restore();
                this.primed = true;
            }
            else if (this.phase == 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(207 * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) - 103, (-1/2 * 13 * 5) - 140, 28 * 8.25, 13 * 5);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate((360 - 155) * Math.PI / 360);
                XXX.drawImage(freeverse, 306, 487, 28, 13, (-1/2 * 28 * 8) - 33, (-1/2 * 13 * 5) + 153, 28 * 8.25, 13 * 5);
                XXX.restore();
                if (this.primed)
                {
                    var deleteList = [];
                    for (var l = 0; l < barrierList.length; l++)
                    {
                        if (barrierList[l].info == this.clave)
                        {
                            deleteList.push(l);
                        }
                    }
                    for (var l = deleteList.length - 1; l > -1; l--)
                    {
                        barrierList.splice(deleteList[l], 1);
                    }
                    barrierList.push(new Barrier((this.X - 173), (this.Y - 8), 155, 30, true, this.clave)); //gate open right
                    barrierList.push(new Barrier((this.X + 131), (this.Y - 8), 155, 30, true, this.clave)); //gate open left
                }
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                //CONDITIONS TO ACTIVATE
                if (this.phase == 0 && this.doTic == false)
                {
                    this.doTic = "open";
                    this.tic = 0;
                }
                else if (this.phase == 5 && this.doTic == false)
                {
                    this.doTic = "close";
                    this.tic = 0;
                }

                if (this.doTic == "open" || this.doTic == "close")
                {
                    this.tic += 1;
                }

                //OPEN
                if (this.doTic == "open")
                {
                    if (this.tic < 10)
                    {
                        this.phase = 0;
                    }
                    else if (this.tic < 20)
                    {
                        this.phase = 1;
                    }
                    else if (this.tic < 30)
                    {
                        this.phase = 2;
                    }
                    else if (this.tic < 40)
                    {
                        this.phase = 3;
                    }
                    else if (this.tic < 50)
                    {
                        this.phase = 4;
                    }
                    else
                    {
                        this.phase = 5;
                        this.doTic = false;
                        this.activate = false;
                    }
                }
                else if (this.doTic == "close")
                {
                    if (this.tic < 10)
                    {
                        this.phase = 5;
                    }
                    else if (this.tic < 20)
                    {
                        this.phase = 4;
                    }
                    else if (this.tic < 30)
                    {
                        this.phase = 3;
                    }
                    else if (this.tic < 40)
                    {
                        this.phase = 2;
                    }
                    else if (this.tic < 50)
                    {
                        this.phase = 1;
                    }
                    else
                    {
                        this.phase = 0;
                        this.doTic = false;
                        this.activate = false;
                    }
                }

            }
        }
        else if (this.type == "door")
        {
            //TRAITS
            this.solid = false;
            this.size = 2;
            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.phase = 0;
                this.doTic = false;
                this.primed = true;
                this.clave = "door" + (Math.random() + Math.random()) + "door";
                this.locked = this.information[0];
                this.keyToUnlock = this.information[1];
            }

            if (this.locked != "broken")
            {
                this.interactionRange = 90;
            }
            else
            {
                this.interactionRange = 1;
            }

            //DRAWSELF
            if (this.temporary == 0)
            {
                if (this.locked == "broken")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 233, 73, 101, 44, (-1/2 * 101 * this.size), (-1/2 * 44 * this.size), 101 * this.size, 44 * this.size);
                    XXX.restore();
                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
                else if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 239, 14, 25, 44, (-1/2 * 25 * this.size), (-1/2 * 44 * this.size), 25 * this.size, 44 * this.size);
                    XXX.restore();

                    //barriers
                    if (this.primed == true)
                    {
                        this.primed = false;
                        if (this.rotation == 0)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == 1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                        else if (this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                    }
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 256, 14, 35, 44, (-1/2 * 35 * this.size), (-1/2 * 44 * this.size), 35 * this.size, 44 * this.size);
                    XXX.restore();
                    this.primed = true;
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 300, 18, 58, 44, (-1/2 * 58 * this.size), (-1/2 * 44 * this.size), 58 * this.size, 44 * this.size);
                    XXX.restore();

                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
            }
            else if (this.temporary == 1)
            {
                if (this.locked == "broken")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 345, 72, 101, 44, (-1/2 * 101 * this.size), (-1/2 * 44 * this.size), 101 * this.size, 44 * this.size);
                    XXX.restore();
                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
                else if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 369, 17, 14, 40, (-1/2 * 14 * this.size), (-1/2 * 40 * this.size), 14 * this.size, 40 * this.size);
                    XXX.restore();

                    //barriers
                    if (this.primed == true)
                    {
                        this.primed = false;
                        if (this.rotation == 0)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == 1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                        else if (this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                    }
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 381, 19, 35, 37, (-1/2 * 35 * this.size), (-1/2 * 37 * this.size), 35 * this.size, 37 * this.size);
                    XXX.restore();
                    this.primed = true;
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 416, 19, 66, 38, (-1/2 * 66 * this.size), (-1/2 * 38 * this.size), 66 * this.size, 38 * this.size);
                    XXX.restore();

                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
            }
            else if (this.temporary == 2)
            {
                if (this.locked == "broken")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 465, 73, 101, 44, (-1/2 * 101 * this.size), (-1/2 * 44 * this.size), 101 * this.size, 44 * this.size);
                    XXX.restore();
                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
                else if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 494, 15, 14, 40, (-1/2 * 14 * this.size), (-1/2 * 40 * this.size), 14 * this.size, 40 * this.size);
                    XXX.restore();

                    //barriers
                    if (this.primed == true)
                    {
                        this.primed = false;
                        if (this.rotation == 0)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == 1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                        else if (this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                    }
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 506, 18, 35, 37, (-1/2 * 35 * this.size), (-1/2 * 37 * this.size), 35 * this.size, 37 * this.size);
                    XXX.restore();
                    this.primed = true;
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 541, 18, 66, 38, (-1/2 * 66 * this.size), (-1/2 * 38 * this.size), 66 * this.size, 38 * this.size);
                    XXX.restore();

                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
            }
            else if (this.temporary == 3)
            {
                if (this.locked == "broken")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 572, 72, 101, 44, (-1/2 * 101 * this.size), (-1/2 * 44 * this.size), 101 * this.size, 44 * this.size);
                    XXX.restore();
                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
                else if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 622, 15, 14, 40, (-1/2 * 14 * this.size), (-1/2 * 40 * this.size), 14 * this.size, 40 * this.size);
                    XXX.restore();

                    //barriers
                    if (this.primed == true)
                    {
                        this.primed = false;
                        if (this.rotation == 0)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 9.5), (this.Y - 32), 60, 17, true, this.clave)); //door closed
                        }
                        else if (this.rotation == 1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                        else if (this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X - 32), (this.Y - 9.5), 17, 60, true, this.clave)); //door closed
                        }
                    }
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 634, 17, 35, 37, (-1/2 * 35 * this.size), (-1/2 * 37 * this.size), 35 * this.size, 37 * this.size);
                    XXX.restore();
                    this.primed = true;
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cypher, 669, 18, 66, 38, (-1/2 * 66 * this.size), (-1/2 * 38 * this.size), 66 * this.size, 38 * this.size);
                    XXX.restore();

                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
            }
            else if (this.temporary == 4)
            {
                this.size = 1.25;
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pill, 841, 220, 88, 60, (-1/2 * 88 * this.size), (-1/2 * 60 * this.size), 88 * this.size, 60 * this.size);
                    XXX.restore();

                    //barriers
                    if (this.primed == true)
                    {
                        this.primed = false;
                        if (this.rotation == 0)
                        {
                            barrierList.push(new Barrier((this.X + -42.01557192992186), (this.Y + -13.798403432054329), 30, 80, true, this.clave));
                        }
                        else if (this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -42.01557192992186), (this.Y + -13.798403432054329), 30, 80, true, this.clave));
                        }
                        else if (this.rotation == 1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -16.911750751838554), (this.Y + -39.46140228107106), 73, 30, true, this.clave));
                        }
                        else if (this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -16.911750751838554), (this.Y + -39.46140228107106), 73, 30, true, this.clave));
                        }
                    }
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pill, 938, 219, 88, 63, (-1/2 * 88 * this.size), (-1/2 * 63 * this.size), 88 * this.size, 63 * this.size);
                    XXX.restore();
                    this.primed = true;
                }
                else if (this.phase == 2)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pill, 842, 281, 88, 102, (-1/2 * 88 * this.size), (-1/2 * 102 * this.size), 88 * this.size, 102 * this.size);
                    XXX.restore();
                    this.primed = true;
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pill, 947, 284, 88, 112, (-1/2 * 88 * this.size), (-1/2 * 112 * this.size), 88 * this.size, 112 * this.size);
                    XXX.restore();

                    if (this.primed)
                    {
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }
                    }
                }
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.locked == true)
                {
                    this.activate = false;
                    var hasTheKey = false;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].doorKeyID == this.keyToUnlock || Inventory[i][0].doorKeyID == "master")
                        {
                            hasTheKey = true;
                            break;
                        }
                    }

                    if (hasTheKey == true) //key
                    {
                        this.locked = false;
                    }
                    else if (have("lockpick", 1)) //picklock
                    {
                        var lockPikChance = Math.random();
                        if (player.getDexterity() >= 40)
                        {
                            this.locked = false;
                        }
                        else if (player.getDexterity() >= 20)
                        {
                            if (lockPikChance > 0.35)
                            {
                                this.locked = false;
                            }
                            else
                            {
                                take("lockpick", 1);
                                give("brokenLockpick", 1);
                            }
                        }
                        else if (player.getDexterity() >= 10)
                        {
                            if (lockPikChance > 0.55)
                            {
                                this.locked = false;
                            }
                            else
                            {
                                take("lockpick", 1);
                                give("brokenLockpick", 1);
                            }
                        }
                        else
                        {
                            if (lockPikChance > 0.8)
                            {
                                this.locked = false;
                            }
                            else
                            {
                                take("lockpick", 1);
                                give("brokenLockpick", 1);
                            }
                        }
                    }
                    else if (player.getStrength() >= 16 && this.temporary != 4) //break down the door
                    {
                        this.locked = "broken";
                        this.primed = true;
                    }
                }

                //OPEN
                if (this.temporary == 4)
                {
                    //CONDITIONS TO ACTIVATE
                    if (this.phase == 0 && this.locked == false && this.doTic == false)
                    {
                        this.doTic = "open";
                        this.tic = 0;
                    }
                    else if (this.phase > 2 && this.doTic == false && this.locked != "broken")
                    {
                        this.doTic = "close";
                        this.tic = 0;
                    }

                    if (this.doTic == "open" || this.doTic == "close")
                    {
                        this.tic += 1;
                    }

                    if (this.doTic == "open")
                    {
                        if (this.tic < 5)
                        {
                            this.phase = 0;
                        }
                        else if (this.tic < 10)
                        {
                            this.phase = 1;
                        }
                        else if (this.tic < 15)
                        {
                            this.phase = 2;
                        }
                        else
                        {
                            this.phase = 3;
                            this.doTic = false;
                            this.activate = false;
                        }
                    }
                    else if (this.doTic == "close")
                    {
                        if (this.tic < 5)
                        {
                            this.phase = 3;
                        }
                        else if (this.tic < 10)
                        {
                            this.phase = 2;
                        }
                        else if (this.tic < 15)
                        {
                            this.phase = 1;
                        }
                        else
                        {
                            this.phase = 0;
                            this.doTic = false;
                            this.activate = false;
                        }
                    }
                }
                else
                {
                    //CONDITIONS TO ACTIVATE
                    if (this.phase == 0 && this.locked == false && this.doTic == false)
                    {
                        this.doTic = "open";
                        this.tic = 0;
                    }
                    else if (this.phase > 1 && this.doTic == false && this.locked != "broken")
                    {
                        this.doTic = "close";
                        this.tic = 0;
                    }

                    if (this.doTic == "open" || this.doTic == "close")
                    {
                        this.tic += 1;
                    }

                    if (this.doTic == "open")
                    {
                        if (this.tic < 5)
                        {
                            this.phase = 0;
                        }
                        else if (this.tic < 10)
                        {
                            this.phase = 1;
                        }
                        else
                        {
                            this.phase = 2;
                            this.doTic = false;
                            this.activate = false;
                        }
                    }
                    else if (this.doTic == "close")
                    {
                        if (this.tic < 5)
                        {
                            this.phase = 2;
                        }
                        else if (this.tic < 10)
                        {
                            this.phase = 1;
                        }
                        else
                        {
                            this.phase = 0;
                            this.doTic = false;
                            this.activate = false;
                        }
                    }
                }
            }
        }
        else if (this.type == "nirwadenCastleDoor")
        {
            //TRAITS
            this.zIndex = 4;
            this.solid = false;
            this.interactionRange = 90;
            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.phase = 0;
                this.doTic = false;
                this.primed = true;
                this.clave = "nirwadenCastleDoor" + Math.random();
                this.manualUse = false;
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1550, 753, 182, 61, (-1/2 * 182 * 2.6), (-1/2 * 61 * 2.2), 182 * 2.6, 61 * 2.2);
                XXX.restore();


                //barriers
                if (this.primed)
                {
                    var deleteList = [];
                    for (var l = 0; l < barrierList.length; l++)
                    {
                        if (barrierList[l].info == this.clave)
                        {
                            deleteList.push(l);
                        }
                    }
                    for (var l = deleteList.length - 1; l > -1; l--)
                    {
                        barrierList.splice(deleteList[l], 1);
                    }
                    barrierList.push(new Barrier((this.X - 167), (this.Y - 32), 60, 360, true, this.clave)); //gate closed
                }
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1550, 753, 182, 61, (-1/2 * 182 * 2.6), (-1/2 * 61 * 2.2), 182 * 2.6, 61 * 2.2);
                XXX.restore();
                this.primed = true;
            }
            else if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 1734, 769, 75, 79, (-1/2 * 75 * 2.2) - 140, (-1/2 * 79 * 2.6) - 54, 75 * 2.2, 79 * 2.6);
                XXX.drawImage(atal, 1837, 769, 75, 79, (-1/2 * 75 * 2.2) + 143, (-1/2 * 79 * 2.6) - 54, 75 * 2.2, 79 * 2.6);
                XXX.restore();
                if (this.primed)
                {
                    var deleteList = [];
                    for (var l = 0; l < barrierList.length; l++)
                    {
                        if (barrierList[l].info == this.clave)
                        {
                            deleteList.push(l);
                        }
                    }
                    for (var l = deleteList.length - 1; l > -1; l--)
                    {
                        barrierList.splice(deleteList[l], 1);
                    }
                    barrierList.push(new Barrier((this.X - 140 - 30), (this.Y - 54 - 94), 170, 60, true, this.clave)); //gate open
                    barrierList.push(new Barrier((this.X + 140 - 30), (this.Y - 54 - 94), 170, 60, true, this.clave)); //gate open

                }
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //autofunction for gate
            if (this.manualUse == false)
            {
                var haySoldados = false;
                var inDanger = false;
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].type == "Soldier")
                    {
                        if (typeof(ArtificialIntelligenceAccess[i].ultra) != "undefined")
                        {
                            if (ArtificialIntelligenceAccess[i].ultra.faction == "Nirwaden")
                            {
                                if (ArtificialIntelligenceAccess[i].team == "Nirwaden")
                                {
                                    haySoldados = true;
                                    if (ArtificialIntelligenceAccess[i].disturbed)
                                    {
                                        inDanger = true;
                                        break
                                    }
                                }
                            }
                        }
                    }
                }
                if (haySoldados)
                {
                    if (inDanger || hourOfDay < 8 || hourOfDay > 20)
                    {
                        if (this.phase == 2 && this.doTic == false)
                        {
                            this.doTic = "close";
                            this.tic = 0;
                        }
                    }
                    else
                    {
                        if (this.phase == 0 && this.doTic == false)
                        {
                            this.doTic = "open";
                            this.tic = 0;
                        }
                    }
                }
            }

            //openclosegate
            if (this.doTic == "open" || this.doTic == "close")
            {
                this.tic += 1;
            }

            //OPEN
            if (this.doTic == "open")
            {
                if (this.tic < 10)
                {
                    this.phase = 0;
                }
                else if (this.tic < 20)
                {
                    this.phase = 1;
                }
                else
                {
                    this.phase = 2;
                    this.doTic = false;
                    this.activate = false;
                }
            }
            else if (this.doTic == "close")
            {
                if (this.tic < 10)
                {
                    this.phase = 2;
                }
                else if (this.tic < 20)
                {
                    this.phase = 1;
                }
                else
                {
                    this.phase = 0;
                    this.doTic = false;
                    this.activate = false;
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                //CONDITIONS TO ACTIVATE
                if (player.raceName == "Nirwaden" && player.title == "Nobility" || player.raceName == "Nirwaden" && player.title == "Royalty")
                {
                    this.manualUse = true;
                    if (this.phase == 0 && this.doTic == false)
                    {
                        this.doTic = "open";
                        this.tic = 0;
                    }
                    else if (this.phase == 2 && this.doTic == false)
                    {
                        this.doTic = "close";
                        this.tic = 0;
                    }
                }
            }
        }
        else if (this.type == "item") //ITEMITEM
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 88;
            var thisItem = new Item(this.information[0], this.X, this.Y);

            //DRAWSELF
            if (player.potatoInvisibility != true && this.information[0] != "coins" || thisItem.type != "potato" && thisItem.type != "cookedPotato" && this.information[0] != "coins")
            {
                thisItem.drawItem();
            }
            else if (this.information[0] == "coins")
            {
                if (this.information[1] <= 10)
                {
                    XXX.drawImage(polyPNG, 405, 7, 6, 4, X - this.X + (1/2 * CCC.width) - (1/2 * 6), Y - this.Y + (1/2 * CCC.height) - (1/2 * 4), 6, 4);
                }
                else if (this.information[1] > 10 && this.information[1] <= 199)
                {
                    XXX.drawImage(polyPNG, 405, 4, 16, 17, X - this.X + (1/2 * CCC.width) - (1/2 * 16), Y - this.Y + (1/2 * CCC.height) - (1/2 * 17), 16, 17);
                }
                else if (this.information[1] > 199 && this.information[1] <= 549)
                {
                    XXX.drawImage(polyPNG, 482, 32, 22, 22, X - this.X + (1/2 * CCC.width) - (1/2 * 22), Y - this.Y + (1/2 * CCC.height) - (1/2 * 22), 22, 22);
                }
                else if (this.information[1] > 549 && this.information[1] <= 2999)
                {
                    XXX.drawImage(polyPNG, 418, 21, 27, 29, X - this.X + (1/2 * CCC.width) - (1/2 * 27), Y - this.Y + (1/2 * CCC.height) - (1/2 * 29), 27, 29);
                }
                else if (this.information[1] > 2999 && this.information[1] < 10000)
                {
                    XXX.drawImage(polyPNG, 948, 5, 56, 50, X - this.X + (1/2 * CCC.width) - (1/2 * 56), Y - this.Y + (1/2 * CCC.height) - (1/2 * 50), 56, 50);
                }
                else if (this.information[1] >= 10000  && this.information[1] < 99999)
                {
                    XXX.drawImage(freeverse, 137, 192, 110, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 110), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102), 110, 102);
                }
                else if (this.information[1] >= 100000)
                {
                    XXX.drawImage(freeverse, 270, 200, 110, 102, X - this.X + (1/2 * CCC.width) - (1/2 * 110), Y - this.Y + (1/2 * CCC.height) - (1/2 * 102), 110, 102);
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (player.potatoInvisibility != true || thisItem.type != "potato" && thisItem.type != "cookedPotato")
                {
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(this.information[2]);
                            //alert creatures or anger an individual
                            if (typeof(this.information[3]) != "undefined")
                            {
                                if (this.information[3] == true)
                                {
                                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                    {
                                        if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                        {
                                            this.callForNearbyHelpFromType(3500, ArtificialIntelligenceAccess[i].type);
                                        }
                                    }
                                }
                                else if (this.information[3] != false)
                                {
                                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                    {
                                        if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                        {
                                            if (ArtificialIntelligenceAccess[i].ID == this.information[3])
                                            {
                                                ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == this.information[0])
                    {
                        Inventory[i][1] += this.information[1];
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item(this.information[0], false, false), this.information[1]]);
                }

                //delete self
                scenicList.splice(scenicList.indexOf(this), 1);
            }
        }
        else if (this.type == "overVines")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (typeof(this.information) != "undefined" && typeof(this.information) != "boolean")
            {
                this.size = this.information;
            }
            else
            {
                this.size = 1;
            }

            this.zIndex = 4;
            if (this.temporary == 0) //med
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 1233, 250, 627, 161, -(1/2 * 627 * this.size), -(1/2 * 161 * this.size), 627 * this.size, 161 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 1) //small wide
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 2013, 275, 345, 177, -(1/2 * 345 * this.size), -(1/2 * 177 * this.size), 345 * this.size, 177 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 2) //long
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 2748, 1070, 299, 946, -(1/2 * 299 * this.size), -(1/2 * 946 * this.size), 299 * this.size, 946 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 3) //short thin
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 298, 0, 171, 46, -(1/2 * 171 * this.size), -(1/2 * 46 * this.size), 171 * this.size, 46 * this.size);
                XXX.restore();
            }
            else if (this.temporary >= 4) //short mediumwidth
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 501, 0, 208, 49, -(1/2 * 208 * this.size), -(1/2 * 49 * this.size), 208 * this.size, 49 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "webVictim")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (typeof(this.information) != "undefined" && typeof(this.information) != "boolean")
            {
                this.size = this.information;
            }
            else
            {
                this.size = 1;
            }

            this.zIndex = 1;
            if (this.temporary == 0) //zaf beetle
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 2531, 119, 71, 62, -(1/2 * 71 * this.size), -(1/2 * 62 * this.size), 71 * this.size, 62 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 1) //salisea
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 2531, 196, 71, 62, -(1/2 * 71 * this.size), -(1/2 * 62 * this.size), 71 * this.size, 62 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 2) //boa
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 2515, 289, 86, 79, -(1/2 * 86 * this.size), -(1/2 * 79 * this.size), 86 * this.size, 79 * this.size);
                XXX.restore();
            }
            else if (this.temporary >= 3) //dalger
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 86, 151, 76, 104, -(1/2 * 76 * this.size), -(1/2 * 104 * this.size), 76 * this.size, 104 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "jungleStuff")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (typeof(this.information) != "undefined" && typeof(this.information) != "boolean")
            {
                this.size = this.information;
            }
            else
            {
                this.size = 1;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            if (this.temporary == 0) //round
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 79, 1436, 196, 152, -(1/2 * 196 * this.size), -(1/2 * 152 * this.size), 196 * this.size, 152 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 1) //straight
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 68, 1613, 217, 63, -(1/2 * 217 * this.size), -(1/2 * 63 * this.size), 217 * this.size, 63 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 2) //selva tree stump
            {
                this.zIndex = 1;
                this.radius = 41;
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 251, 258, 111, 107, -(1/2 * 111 * this.size), -(1/2 * 107 * this.size), 111 * this.size, 107 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 3) //salisea rug
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 449, 1254, 53, 56, -(1/2 * 53 * this.size), -(1/2 * 56 * this.size), 53 * this.size, 56 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 4) //borea web ball (low)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 2427, 29, 33, 29, -(1/2 * 33 * this.size), -(1/2 * 29 * this.size), 33 * this.size, 29 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 5) //borea web ball (high)
            {
                this.zIndex = 3;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(humpa, 2427, 29, 33, 29, -(1/2 * 33 * this.size), -(1/2 * 29 * this.size), 33 * this.size, 29 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 6) //venandi patch 1
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 1501, 135, 121, 107, -(1/2 * 121 * this.size), -(1/2 * 107 * this.size), 121 * this.size, 107 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 7) //venandi patch 2
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 1774, 1, 300, 233, -(1/2 * 300 * this.size), -(1/2 * 233 * this.size), 300 * this.size, 233 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 8) //venandi buried junglehunter
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 2094, 36, 127, 167, -(1/2 * 127 * this.size), -(1/2 * 167 * this.size), 127 * this.size, 167 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 9) //venandi buried slain aranea venandi
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 2242, 19, 169, 163, -(1/2 * 169 * this.size), -(1/2 * 163 * this.size), 169 * this.size, 163 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 10) //venandi jungle hunter
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 1640, 146, 96, 82, -(1/2 * 96 * this.size), -(1/2 * 82 * this.size), 96 * this.size, 82 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 11) //venandi small over patch
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.8;
                XXX.drawImage(cef, 1501, 135, 121, 107, -(1/2 * 121 * this.size), -(1/2 * 107 * this.size), 121 * this.size, 107 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 12) //xium mycelium patch
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(fect, 607, 149, 175, 171, -(1/2 * 175 * this.size), -(1/2 * 171 * this.size), 175 * this.size, 171 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 13) //xium mycelium patch small
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(fect, 634, 69, 77, 69, -(1/2 * 77 * this.size), -(1/2 * 69 * this.size), 77 * this.size, 69 * this.size);
                XXX.restore();
            }

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "bartop")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 376, 1692, 133, 57, -(1/2 * 133 * 1), -(1/2 * 57 * 1), 133 * 1, 57 * 1);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "countertop")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 376, 1692, 133, 35, -(1/2 * 133 * 1), -(1/2 * 35 * 1), 133 * 1, 35 * 1);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "feastingTable")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 556, 1672, 137, 119, -(1/2 * 137 * 1), -(1/2 * 119 * 1), 137 * 1, 119 * 1);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "stillFountain")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 545, 804, 78, 78, -(1/2 * 78 * this.information), -(1/2 * 78 * this.information), 78 * this.information, 78 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 641, 807, 78, 78, -(1/2 * 78 * this.information), -(1/2 * 78 * this.information), 78 * this.information, 78 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 690, 893, 78, 78, -(1/2 * 78 * this.information), -(1/2 * 78 * this.information), 78 * this.information, 78 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 445, 801, 78, 78, -(1/2 * 78 * this.information), -(1/2 * 78 * this.information), 78 * this.information, 78 * this.information);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 34 * this.information;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "longTable")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(norc, 12, 484, 151, 38, -(1/2 * 151 * 3), -(1/2 * 38 * 3), 151 * 3, 38 * 3);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "floorDeco")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0) //toad hide rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 473, 830, 60, 65, -(1/2 * 60 * this.information), -(1/2 * 65 * this.information), 60 * this.information, 65 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 1)//elk fur rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 544, 829, 82, 56, -(1/2 * 82 * this.information), -(1/2 * 56 * this.information), 82 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2)//bovine hide rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 650, 834, 82, 56, -(1/2 * 82 * this.information), -(1/2 * 56 * this.information), 82 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3)//koivaya fur rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 755, 823, 110, 75, -(1/2 * 110 * this.information), -(1/2 * 75 * this.information), 110 * this.information, 75 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 4)//clean rags
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 189, 839, 37, 45, -(1/2 * 37 * this.information), -(1/2 * 45 * this.information), 37 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 5)//dirty rags
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 7, 838, 37, 45, -(1/2 * 37 * this.information), -(1/2 * 45 * this.information), 37 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 6)//clean rag (single)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 226, 845, 25, 32, -(1/2 * 25 * this.information), -(1/2 * 32 * this.information), 25 * this.information, 32 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 7)//dirty rag (single)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 45, 843, 25, 32, -(1/2 * 25 * this.information), -(1/2 * 32 * this.information), 25 * this.information, 32 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 8)//royal long rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 94, 1281, 253, 84, -(1/2 * 253 * this.information), -(1/2 * 84 * this.information), 253 * this.information, 84 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 9)//royal big rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 150, 1363, 123, 111, -(1/2 * 123 * this.information), -(1/2 * 111 * this.information), 123 * this.information, 111 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 10)//royal medbig rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 43, 1357, 106, 122, -(1/2 * 106 * this.information), -(1/2 * 122 * this.information), 106 * this.information, 122 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 11)//royal small rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 310, 1389, 76, 59, -(1/2 * 76 * this.information), -(1/2 * 59 * this.information), 76 * this.information, 59 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 12)//royal tiny rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 453, 470, 73, 73, -(1/2 * 73 * this.information), -(1/2 * 73 * this.information), 73 * this.information, 73 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 13)//rebel long rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 478, 1405, 248, 75, -(1/2 * 248 * this.information), -(1/2 * 75 * this.information), 248 * this.information, 75 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 14)//rebel big rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 327, 511, 128, 106, -(1/2 * 128 * this.information), -(1/2 * 106 * this.information), 128 * this.information, 106 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 15)//rebel small rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 754, 1410, 90, 65, -(1/2 * 90 * this.information), -(1/2 * 65 * this.information), 90 * this.information, 65 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 16)//rebel tiny rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 853, 1409, 90, 65, -(1/2 * 90 * this.information), -(1/2 * 65 * this.information), 90 * this.information, 65 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 17)//borgal fur rug (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 19, 490, 61, 38, -(1/2 * 61 * this.information), -(1/2 * 38 * this.information), 61 * this.information, 38 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 18)//fox pelt rug (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 10, 550, 58, 57, -(1/2 * 58 * this.information), -(1/2 * 57 * this.information), 58 * this.information, 57 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 19)//arctic fox pelt rug (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 9, 487, 58, 57, -(1/2 * 58 * this.information), -(1/2 * 57 * this.information), 58 * this.information, 57 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 19)//deer pelt rug (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 115, 780, 65, 40, -(1/2 * 65 * this.information), -(1/2 * 40 * this.information), 65 * this.information, 40 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 19)//badger fur rug (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 8, 780, 52, 48, -(1/2 * 52 * this.information), -(1/2 * 48 * this.information), 52 * this.information, 48 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 20)//grizzly fur rug (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 673, 1139, 90, 67, -(1/2 * 90 * this.information), -(1/2 * 67 * this.information), 90 * this.information, 67 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 21)//beulingerr aldrekii embroidered rug [rectangle] (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 45, 161, 119, 69, -(1/2 * 119 * this.information), -(1/2 * 69 * this.information), 119 * this.information, 69 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 22)//beulingerr aldrekii embroidered rug [square] (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 177, 172, 116, 117, -(1/2 * 116 * this.information), -(1/2 * 117 * this.information), 116 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 23)//beulingerr aldrekii embroidered rug [hallway] (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 313, 63, 78, 221, -(1/2 * 78 * this.information), -(1/2 * 221 * this.information), 78 * this.information, 221 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 24)//beulingerr aldrekii embroidered rug [mantel] (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 177, 132, 118, 37, -(1/2 * 118 * this.information), -(1/2 * 37 * this.information), 118 * this.information, 37 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 25)//beulingerr aldrekii floor pillow (thengaria)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 83, 135, 31, 18, -(1/2 * 31 * this.information), -(1/2 * 18 * this.information), 31 * this.information, 18 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 26)//guajolote rug 1
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 332, 432, 93, 87, -(1/2 * 93 * this.information), -(1/2 * 87 * this.information), 93 * this.information, 87 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 27)//guajolote rug 2
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 459, 437, 93, 87, -(1/2 * 93 * this.information), -(1/2 * 87 * this.information), 93 * this.information, 87 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 28) //cephrian dark rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 568, 149, 73, 56, -(1/2 * 73 * this.information), -(1/2 * 56 * this.information), 73 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 29) //cephrian long rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 309, 754, 164, 70, -(1/2 * 164 * this.information), -(1/2 * 70 * this.information), 164 * this.information, 70 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 30) //cephrian fat rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 542, 669, 112, 79, -(1/2 * 112 * this.information), -(1/2 * 79 * this.information), 112 * this.information, 79 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 31) //cephrian pudgy rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 429, 706, 106, 47, -(1/2 * 106 * this.information), -(1/2 * 47 * this.information), 106 * this.information, 47 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 32) //cephrian chubby rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 320, 626, 116, 80, -(1/2 * 116 * this.information), -(1/2 * 80 * this.information), 116 * this.information, 80 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 33) //cephrian skinny rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 316, 708, 116, 42, -(1/2 * 116 * this.information), -(1/2 * 42 * this.information), 116 * this.information, 42 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 34) //cephrian slim rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 437, 627, 53, 78, -(1/2 * 53 * this.information), -(1/2 * 78 * this.information), 53 * this.information, 78 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 35) //cephrian heraldic rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 373, 544, 83, 78, -(1/2 * 83 * this.information), -(1/2 * 78 * this.information), 83 * this.information, 78 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 36) //cephrian rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 471, 753, 106, 72, -(1/2 * 106 * this.information), -(1/2 * 72 * this.information), 106 * this.information, 72 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 37) //cephrian half rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 588, 753, 68, 72, -(1/2 * 68 * this.information), -(1/2 * 72 * this.information), 68 * this.information, 72 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 38) //cephrian wide rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 664, 755, 124, 69, -(1/2 * 124 * this.information), -(1/2 * 69 * this.information), 124 * this.information, 69 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 39) //zetian rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(raed, 1097, 742, 43, 56, -(1/2 * 43 * this.information), -(1/2 * 56 * this.information), 43 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 40) //wild dog rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(salem, 58, 2, 93, 76, -(1/2 * 93 * this.information), -(1/2 * 76 * this.information), 93 * this.information, 76 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 41) //hyena rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(salem, 0, 8, 58, 57, -(1/2 * 58 * this.information), -(1/2 * 57 * this.information), 58 * this.information, 57 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 42) //giraffe rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(salem, 524, 933, 60, 102, -(1/2 * 60 * this.information), -(1/2 * 102 * this.information), 60 * this.information, 102 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 43) //garden marble stone
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 705, 120, 79, 80, -(1/2 * 79 * this.information), -(1/2 * 80 * this.information), 79 * this.information, 80 * this.information);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 705, 120, 79, 80, -(1/2 * 79 * this.information / 2), -(1/2 * 80 * this.information / 2), 79 * this.information / 2, 80 * this.information / 2);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 705, 120, 79, 80, -(1/2 * 79 * this.information / 4), -(1/2 * 80 * this.information / 4), 79 * this.information / 4, 80 * this.information / 4);
                XXX.restore();
            }
            else if (this.temporary == 44) //blackwood rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(blud, 170, 19, 132, 95, -(1/2 * 132 * this.information), -(1/2 * 95 * this.information), 132 * this.information, 95 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 45) //blackwood round rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(blud, 321, 19, 132, 95, -(1/2 * 132 * this.information), -(1/2 * 95 * this.information), 132 * this.information, 95 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 46) //spectrum placemat / spectrum rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(blud, 27, 34, 53, 53, -(1/2 * 53 * this.information), -(1/2 * 53 * this.information), 53 * this.information, 53 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 47) //woven zwaleim rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 735, 9, 65, 63, -(1/2 * 65 * this.information), -(1/2 * 63 * this.information), 65 * this.information, 63 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 48) //varmin fur rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 1153, 899, 112, 86, -(1/2 * 112 * this.information), -(1/2 * 86 * this.information), 112 * this.information, 86 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 49) //boroye rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1211, 371, 87, 74, -(1/2 * 87 * this.information), -(1/2 * 74 * this.information), 87 * this.information, 74 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 50) //krovhyuzka rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1331, 373, 87, 74, -(1/2 * 87 * this.information), -(1/2 * 74 * this.information), 87 * this.information, 74 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 51) //long krovhyuzka rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1307, 463, 190, 69, -(1/2 * 190 * this.information), -(1/2 * 69 * this.information), 190 * this.information, 69 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 52) //long boroye rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1307, 549, 190, 69, -(1/2 * 190 * this.information), -(1/2 * 69 * this.information), 190 * this.information, 69 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 53) //big boroye rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1305, 640, 195, 115, -(1/2 * 195 * this.information), -(1/2 * 115 * this.information), 195 * this.information, 115 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 54) //big krovhyuzka rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1302, 776, 195, 115, -(1/2 * 195 * this.information), -(1/2 * 115 * this.information), 195 * this.information, 115 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 55) //small morrow rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 1444, 700, 77, 68, -(1/2 * 77 * this.information), -(1/2 * 68 * this.information), 77 * this.information, 68 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 56) //long morrow rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 1332, 783, 192, 68, -(1/2 * 192 * this.information), -(1/2 * 68 * this.information), 192 * this.information, 68 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 57) //large morrow rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 1333, 874, 193, 113, -(1/2 * 193 * this.information), -(1/2 * 113 * this.information), 193 * this.information, 113 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 58) //delta rug
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 925, 11, 129, 82, -(1/2 * 129 * this.information), -(1/2 * 82 * this.information), 129 * this.information, 82 * this.information);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "southMueble")
        {
            //TRAITS

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.

            if (this.runOneTime == true)
            {
                this.runOneTime = false;

                this.solid = false;
                this.interactionRange = 1;
                this.radius = 1;
                this.tic = 0;
                this.tac = 0;
                this.setHealth = true;
                this.health = 10;
                this.zIndex = 1;
            }

            if (this.temporary == 0) //council table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 383, 72, 179, 175, -(1/2 * 179 * this.information), -(1/2 * 175 * this.information), 179 * this.information, 175 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 1)//cephrian tray
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 27, 381, 28, 21, -(1/2 * 28 * this.information), -(1/2 * 21 * this.information), 28 * this.information, 21 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2)//pink cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 294, 459, 39, 32, -(1/2 * 39 * this.information), -(1/2 * 32 * this.information), 39 * this.information, 32 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3)//tan cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 293, 491, 39, 32, -(1/2 * 39 * this.information), -(1/2 * 32 * this.information), 39 * this.information, 32 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 4)//red cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 293, 520, 39, 32, -(1/2 * 39 * this.information), -(1/2 * 32 * this.information), 39 * this.information, 32 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 5)//green cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 293, 549, 39, 32, -(1/2 * 39 * this.information), -(1/2 * 32 * this.information), 39 * this.information, 32 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 6)//blue cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 294, 579, 39, 32, -(1/2 * 39 * this.information), -(1/2 * 32 * this.information), 39 * this.information, 32 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 7)//heraldic tan cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 332, 551, 39, 30, -(1/2 * 39 * this.information), -(1/2 * 30 * this.information), 39 * this.information, 30 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 8)//heraldic purple cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 333, 580, 39, 30, -(1/2 * 39 * this.information), -(1/2 * 30 * this.information), 39 * this.information, 30 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 9)//yellow cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 470, 494, 39, 30, -(1/2 * 39 * this.information), -(1/2 * 30 * this.information), 39 * this.information, 30 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 10)//white cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 469, 465, 39, 30, -(1/2 * 39 * this.information), -(1/2 * 30 * this.information), 39 * this.information, 30 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 11)//black cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 508, 466, 39, 30, -(1/2 * 39 * this.information), -(1/2 * 30 * this.information), 39 * this.information, 30 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 12)//heraldic salmon cephrian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 622, 640, 39, 30, -(1/2 * 39 * this.information), -(1/2 * 30 * this.information), 39 * this.information, 30 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 13)//yellow and red zetian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(raed, 1037, 762, 27, 24, -(1/2 * 27 * this.information), -(1/2 * 24 * this.information), 27 * this.information, 24 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 14)//red zetian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(raed, 1168, 769, 23, 19, -(1/2 * 23 * this.information), -(1/2 * 19 * this.information), 23 * this.information, 19 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 15)//zetian cushion
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(raed, 1167, 746, 27, 23, -(1/2 * 27 * this.information), -(1/2 * 23 * this.information), 27 * this.information, 23 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 16)//zetian shelf
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(raed, 1141, 746, 20, 43, -(1/2 * 20 * this.information), -(1/2 * 43 * this.information), 20 * this.information, 43 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 17)//zetian table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(raed, 1064, 756, 26, 25, -(1/2 * 26 * this.information), -(1/2 * 25 * this.information), 26 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 18)//cephrian small table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 509, 495, 34, 30, -(1/2 * 34 * this.information), -(1/2 * 30 * this.information), 34 * this.information, 30 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 19)//cephrian small mid-rect table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 618, 523, 35, 38, -(1/2 * 35 * this.information), -(1/2 * 38 * this.information), 35 * this.information, 38 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 20)//cephrian small rect table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 551, 557, 34, 56, -(1/2 * 34 * this.information), -(1/2 * 56 * this.information), 34 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 21)//cephrian large table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 551, 493, 61, 57, -(1/2 * 61 * this.information), -(1/2 * 57 * this.information), 61 * this.information, 57 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 22)//cephrian large rect table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 486, 540, 61, 88, -(1/2 * 61 * this.information), -(1/2 * 88 * this.information), 61 * this.information, 88 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 23)//cephrian circle table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 489, 631, 55, 53, -(1/2 * 55 * this.information), -(1/2 * 53 * this.information), 55 * this.information, 53 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 24)//cephrian angled bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 546, 617, 66, 51, -(1/2 * 66 * this.information), -(1/2 * 51 * this.information), 66 * this.information, 51 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 25)//cephrian small stub table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 618, 494, 34, 23, -(1/2 * 34 * this.information), -(1/2 * 23 * this.information), 34 * this.information, 23 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 26)//cephrian small striped bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 654, 495, 19, 61, -(1/2 * 19 * this.information), -(1/2 * 61 * this.information), 19 * this.information, 61 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 27)//cephrian large striped bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 457, 540, 26, 88, -(1/2 * 26 * this.information), -(1/2 * 88 * this.information), 26 * this.information, 88 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 28)//cephrian tiny table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 618, 617, 22, 21, -(1/2 * 22 * this.information), -(1/2 * 21 * this.information), 22 * this.information, 21 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 29)//cephrian tiny circle table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 642, 617, 22, 21, -(1/2 * 22 * this.information), -(1/2 * 21 * this.information), 22 * this.information, 21 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 30)//cephrian bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 594, 565, 62, 22, -(1/2 * 62 * this.information), -(1/2 * 22 * this.information), 62 * this.information, 22 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 31)//cephrian long bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 589, 590, 86, 21, -(1/2 * 86 * this.information), -(1/2 * 21 * this.information), 86 * this.information, 21 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 32)//lion head M
            {
                this.zIndex = 5;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 211, 6, 46, 37, -(1/2 * 46 * this.information), -(1/2 * 37 * this.information), 46 * this.information, 37 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 33)//lion head F
            {
                this.zIndex = 5;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 257, 6, 37, 36, -(1/2 * 37 * this.information), -(1/2 * 36 * this.information), 37 * this.information, 36 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 34)//gazelle head
            {
                this.zIndex = 5;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2483, 874, 70, 56, -(1/2 * 70 * this.information), -(1/2 * 56 * this.information), 70 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 35)//cephrian bowl
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 705, 120, 79, 80, -(1/2 * 79 * this.information), -(1/2 * 80 * this.information), 79 * this.information, 80 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 36)//cephrian bowl dark
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wart, 67, 12, 25, 25, -(1/2 * 25 * this.information), -(1/2 * 25 * this.information), 25 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 37)//cephrian pot/vase
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wart, 95, 12, 25, 25, -(1/2 * 25 * this.information), -(1/2 * 25 * this.information), 25 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 38)//cephrian huka
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wart, 0, 8, 50, 34, -(1/2 * 50 * this.information), -(1/2 * 34 * this.information), 50 * this.information, 34 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 39)//vorcadium crystal
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ion, 1139, 717, 34, 33, -(1/2 * 34 * this.information), -(1/2 * 33 * this.information), 34 * this.information, 33 * this.information);
                XXX.restore();

                this.radius = 1120;

                if (this.playerer < 70)
                {
                    player.will -= 0.1;
                    player.magicalExperience -= 0.1;
                    if (player.magicalExperience <= 0)
                    {
                        player.magicalExperience = 0;
                        player.health -= 0.01;
                    }
                }
                else if (this.playerer < 140)
                {
                    if (wKey || sKey)
                    {
                        player.will += 0.1;
                        player.health += 0.001
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.01;
                        }
                        else
                        {
                            player.magicalExperience += 0.0000025;
                        }
                    }
                    else
                    {
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.000000005;
                        }
                        else
                        {
                            player.magicalExperience += 0.000000000000025;
                        }
                    }
                }
                else if (this.playerer < 280)
                {
                    if (wKey || sKey)
                    {
                        player.will += 0.01;
                        player.health += 0.0001
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.005;
                        }
                        else
                        {
                            player.magicalExperience += 0.0000000625;
                        }
                    }
                    else
                    {
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.0000000025;
                        }
                        else
                        {
                            player.magicalExperience += 0.000000000000000625;
                        }
                    }
                }
                else if (this.playerer < 560)
                {
                    if (wKey || sKey)
                    {
                        player.will += 0.001;
                        player.health += 0.00001
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.0025;
                        }
                        else
                        {
                            player.magicalExperience += 0.00000001500625;
                        }
                    }
                    else
                    {
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.00000000125;
                        }
                        else
                        {
                            player.magicalExperience += 0.0000000000000001500625;
                        }
                    }
                }
                else if (this.playerer < 1120)
                {
                    if (wKey || sKey)
                    {
                        player.will += 0.0001;
                        player.health += 0.000001
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.00125;
                        }
                        else
                        {
                            player.magicalExperience += 0.000000002000025;
                        }
                    }
                    else
                    {
                        if (player.knowledge >= 1)
                        {
                            player.magicalExperience += 0.000000000625;
                        }
                        else
                        {
                            player.magicalExperience += 0.00000000000000002000025;
                        }
                    }
                }
            }
            else if (this.temporary == 40)//zetian sacks 1
            {
                this.solid = true;
                this.radius = 9 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 727, 165, 48, 54, -(1/2 * 48 * this.information), -(1/2 * 54 * this.information), 48 * this.information, 54 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 41)//zetian sacks 2
            {
                this.solid = true;
                this.radius = 16 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 694, 107, 72, 58, -(1/2 * 72 * this.information), -(1/2 * 58 * this.information), 72 * this.information, 58 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 42)//breakable cephrian pottery
            {
                if (this.setHealth == true)
                {
                    this.setHealth = false;
                    this.health = 2.5;
                }

                if (this.phase == 0)
                {
                    this.tac = Math.random()*Math.PI*2;
                    this.solid = true;
                    this.radius = 15 * this.information;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gnoll, 213, 80, 63, 59, -(1/2 * 63 * this.information), -(1/2 * 59 * this.information), 63 * this.information, 59 * this.information);
                    XXX.restore();

                    if (player.cutcut == true && this.playerer <= 320)
                    {
                        var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                        if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                        {
                            this.health -= player.weapon.damage;
                        }
                    }

                    if (this.health <= 0)
                    {
                        this.phase = "broken";
                        if (this.extra == true)
                        {
                            if (player.title == "Nobility" && player.raceName == "Cephrite" || player.title == "Royalty" && player.raceName == "Cephrite")
                            {
                                this.owned = "cephrite";
                                this.changeFactionRelation(-1);
                            }
                            else
                            {
                                this.owned = "cephrite";
                                this.changeFactionRelation(-8);
                            }
                        }
                    }
                }
                else
                {
                    this.solid = false;
                    this.radius = 15 * this.information;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.tac);
                    XXX.drawImage(gnoll, 165, 347, 70, 56, -(1/2 * 70 * this.information), -(1/2 * 56 * this.information), 70 * this.information, 56 * this.information);
                    XXX.restore();
                }
            }
            else if (this.temporary == 43)//broken cephrian pottery
            {
                this.solid = false;
                this.radius = 15 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 165, 347, 70, 56, -(1/2 * 70 * this.information), -(1/2 * 56 * this.information), 70 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 44)//globe
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 87, 20, 33, 29, -(1/2 * 33 * this.information), -(1/2 * 29 * this.information), 33 * this.information, 29 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 45)//telescopio
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 157, 7, 58, 54, -(1/2 * 58 * this.information), -(1/2 * 54 * this.information), 58 * this.information, 54 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 46)//standing book
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 71, 21, 11, 17, -(1/2 * 11 * this.information), -(1/2 * 17 * this.information), 11 * this.information, 17 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 47)//book shelf (med)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 3, 19, 60, 21, -(1/2 * 60 * this.information), -(1/2 * 21 * this.information), 60 * this.information, 21 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 48)//book shelf (lrg)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 2, 40, 85, 21, -(1/2 * 85 * this.information), -(1/2 * 21 * this.information), 85 * this.information, 21 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 49)//book shelf (sml)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gnoll, 3, 61, 43, 20, -(1/2 * 43 * this.information), -(1/2 * 20 * this.information), 43 * this.information, 20 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 50 || this.temporary == 51)//study book
            {
                if (this.setHealth == true)
                {
                    this.setHealth = false;
                    if (typeof this.extra != "undefined")
                    {
                        this.reading = this.extra;
                        this.read = 0;
                    }
                    else
                    {
                        this.reading = [];
                        this.read = 0;
                    }

                    if (this.temporary == 51)
                    {
                        this.phase = 1;
                    }
                    else
                    {
                        this.phase = 0;
                    }
                }

                if (this.phase == 0)
                {
                    if (dClick == true && this.playerer <= 50)
                    {
                        dClick = false;
                        this.phase = 1;
                        this.activate = false;
                    }
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gnoll, 0, 2, 15, 15, -(1/2 * 15 * this.information), -(1/2 * 15 * this.information), 15 * this.information, 15 * this.information);
                    XXX.restore();
                    this.read = 0;
                }
                else
                {
                    if (dClick == true && this.playerer <= 50)
                    {
                        dClick = false;
                        this.phase = 0;
                        this.activate = false;
                    }

                    if (this.tac == 0)
                    {
                        if (this.tic > 0)
                        {
                            this.tic += 1;
                        }

                        if (this.tic <= 0)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 14, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();

                            if (clicked == true && this.playerer <= 30)
                            {
                                this.tic += 0.5;
                            }
                        }
                        else if (this.tic <= 1.5)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 31, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                        else if (this.tic <= 2.5)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 48, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                        else if (this.tic <= 3.5)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 65, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                        else
                        {
                            player.intEXP += 0.2;
                            if (this.reading.length > 0)
                            {
                                console.log(this.reading[this.read]);
                                this.read += 1;
                                if (this.read >= this.reading.length)
                                {
                                    this.phase = 0;
                                }
                            }
                            this.tic = 0;
                            this.tac = 1;
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 82, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                    }
                    else if (this.tac == 1)
                    {
                        if (this.tic > 0)
                        {
                            this.tic += 1;
                        }

                        if (this.tic <= 0)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 82, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();

                            if (clicked == true && this.playerer <= 30)
                            {
                                this.tic += 0.5;
                            }
                        }
                        else if (this.tic <= 1.5)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 101, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                        else if (this.tic <= 2.5)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 119, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                        else if (this.tic <= 3.5)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 137, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                        else
                        {
                            player.intEXP += 1;
                            if (this.reading.length > 0)
                            {
                                console.log(this.reading[this.read]);
                                this.read += 1;
                                if (this.read >= this.reading.length)
                                {
                                    this.phase = 0;
                                }
                            }
                            this.tic = 0;
                            this.tac = 0;
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(gnoll, 14, 2, 17, 16, -(1/2 * 17 * this.information), -(1/2 * 16 * this.information), 17 * this.information, 16 * this.information);
                            XXX.restore();
                        }
                    }

                }
            }
            else if (this.temporary == 52)//nomad water pit
            {
                //TRAITS
                this.interactionRange = 75;

                //DRAWSELF
                if (this.phase == 0) //with water
                {
                    this.solid = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gnoll, 241, 347, 58, 55, -(1/2 * 58 * this.information), -(1/2 * 55 * this.information), 58 * this.information, 55 * this.information);
                    XXX.restore();
                }
                else //empty
                {
                    this.solid = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gnoll, 740, 151, 58, 53, -(1/2 * 58 * this.information), -(1/2 * 53 * this.information), 58 * this.information, 53 * this.information);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 13;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    this.doBreak = false;
                    this.yaTiene = false;

                    if (this.phase == 0)
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][0])
                                {
                                    if (Inventory[i][0].type == "kellishClayPot" || Inventory[i][0].type == "vardanianPot" || Inventory[i][0].type == "bucket")
                                    {
                                        this.phase = 1;
                                    }

                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][1])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "bucketOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "vardanianPotOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "kellishClayPotOfWater")
                                {
                                    this.phase = 0;
                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][0])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                }
            }


            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "westMueble")
        {
            if (this.runOneTime == true)
            {
                this.runOneTime = false;

                //TRAITS
                this.solid = false;
                this.interactionRange = 1;

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 1;

                this.tic = 0;
                this.tac = 0;
                this.zIndex = 1;
                this.oncer = true;
            }

            if (this.temporary == 0) //decorated crate corner
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 641, 208, 61, 47, -(1/2 * 61 * this.information), -(1/2 * 47 * this.information), 61 * this.information, 47 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 1)//decorated desk
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 561, 210, 61, 47, -(1/2 * 61 * this.information), -(1/2 * 47 * this.information), 61 * this.information, 47 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2)//tied up chest
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 480, 202, 62, 69, -(1/2 * 62 * this.information), -(1/2 * 69 * this.information), 62 * this.information, 69 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3)//bag pile
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 397, 194, 62, 69, -(1/2 * 62 * this.information), -(1/2 * 69 * this.information), 62 * this.information, 69 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 4)//bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 969, 526, 20, 53, -(1/2 * 20 * this.information), -(1/2 * 53 * this.information), 20 * this.information, 53 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 5)//nightstand / chair
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 972, 581, 15, 14, -(1/2 * 15 * this.information), -(1/2 * 14 * this.information), 15 * this.information, 14 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 6)//square table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 969, 614, 23, 22, -(1/2 * 23 * this.information), -(1/2 * 22 * this.information), 23 * this.information, 22 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 7)//stool
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 972, 596, 16, 15, -(1/2 * 16 * this.information), -(1/2 * 15 * this.information), 16 * this.information, 15 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 8)//long feast table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 855, 606, 100, 28, -(1/2 * 100 * this.information), -(1/2 * 28 * this.information), 100 * this.information, 28 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 9)//big square table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 936, 644, 53, 46, -(1/2 * 53 * this.information), -(1/2 * 46 * this.information), 53 * this.information, 46 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 10)//med-big table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 900, 736, 53, 46, -(1/2 * 53 * this.information), -(1/2 * 46 * this.information), 53 * this.information, 46 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 11)//med table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 955, 734, 42, 44, -(1/2 * 42 * this.information), -(1/2 * 44 * this.information), 42 * this.information, 44 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 12)//thick bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 927, 693, 73, 22, -(1/2 * 73 * this.information), -(1/2 * 22 * this.information), 73 * this.information, 22 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 13)//wide feast table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 910, 787, 86, 40, -(1/2 * 86 * this.information), -(1/2 * 40 * this.information), 86 * this.information, 40 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 14)//long bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 909, 829, 87, 20, -(1/2 * 87 * this.information), -(1/2 * 20 * this.information), 87 * this.information, 20 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 15)//long shelf
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 871, 886, 61, 13, -(1/2 * 61 * this.information), -(1/2 * 13 * this.information), 61 * this.information, 13 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 16)//feast table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 936, 868, 58, 25, -(1/2 * 58 * this.information), -(1/2 * 25 * this.information), 58 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 17)//shelf
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 887, 868, 45, 16, -(1/2 * 45 * this.information), -(1/2 * 16 * this.information), 45 * this.information, 16 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 18)//medium bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 945, 852, 50, 13, -(1/2 * 50 * this.information), -(1/2 * 13 * this.information), 50 * this.information, 13 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 19)//medium square table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 407, 843, 46, 46, -(1/2 * 46 * this.information), -(1/2 * 46 * this.information), 46 * this.information, 46 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 20)//elk throne
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 322, 832, 63, 66, -(1/2 * 63 * this.information), -(1/2 * 66 * this.information), 63 * this.information, 66 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 21)//royal elk throne
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 248, 832, 67, 67, -(1/2 * 67 * this.information), -(1/2 * 67 * this.information), 67 * this.information, 67 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 22)//royal flag
            {
                this.solid = true;
                this.radius = 24 * this.information;
                this.tic += 1;

                if (this.tic < 122)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 489, 568, 73, 122, -(1/2 * 73 * this.information), -(1/2 * 122 * this.information), 73 * this.information, 122 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 147)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 582, 571, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) - 1, 103 * this.information, 121 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 172)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 684, 570, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) - 1.5, 103 * this.information, 121 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 197)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 582, 571, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) - 1, 103 * this.information, 121 * this.information);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 582, 571, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) - 1, 103 * this.information, 121 * this.information);
                    XXX.restore();
                    this.tic = 0;
                }
            }
            else if (this.temporary == 23)//rebel flag
            {
                this.solid = true;
                this.radius = 24 * this.information;
                this.tic += 1;

                if (this.tic < 122)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 2061, 818, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information), 103 * this.information, 121 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 147)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 2168, 820, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) - 1, 103 * this.information, 121 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 172)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 2269, 822, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) + 1.5, 103 * this.information, 121 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 197)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 2168, 820, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) - 1, 103 * this.information, 121 * this.information);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 2168, 820, 103, 121, -(1/2 * 103 * this.information), -(1/2 * 121 * this.information) - 1, 103 * this.information, 121 * this.information);
                    XXX.restore();
                    this.tic = 0;
                }
            }
            else if (this.temporary == 24)//fishrack
            {
                this.solid = true;
                this.radius = 18 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 646, 277, 68, 40, -(1/2 * 68 * this.information), -(1/2 * 40 * this.information), 68 * this.information, 40 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 25)//vardanian barrel worn
            {
                this.solid = true;
                this.radius = 23 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 752, 316, 43, 43, -(1/2 * 43 * this.information), -(1/2 * 43 * this.information), 43 * this.information, 43 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 26)//vardanian barrel new
            {
                this.solid = true;
                this.radius = 23 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 699, 315, 43, 43, -(1/2 * 43 * this.information), -(1/2 * 43 * this.information), 43 * this.information, 43 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 27)//thengan barrel new
            {
                this.solid = true;
                this.radius = 23 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 549, 277, 43, 43, -(1/2 * 43 * this.information), -(1/2 * 43 * this.information), 43 * this.information, 43 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 28)//thengan barrel worn
            {
                this.solid = true;
                this.radius = 23 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 602, 278, 43, 43, -(1/2 * 43 * this.information), -(1/2 * 43 * this.information), 43 * this.information, 43 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 29)//vardanian barrel overturned
            {
                this.solid = true;
                this.radius = 28 * this.information;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 646, 326, 41, 56, -(1/2 * 41 * this.information), -(1/2 * 56 * this.information), 41 * this.information, 56 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 30)//thengan corner counter
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 843, 780, 52, 42, -(1/2 * 52 * this.information), -(1/2 * 42 * this.information), 52 * this.information, 42 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 31)//thengan large table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 969, 832, 56, 62, -(1/2 * 56 * this.information), -(1/2 * 62 * this.information), 56 * this.information, 62 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 32)//thengan medium squeezy table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1032, 832, 56, 62, -(1/2 * 56 * this.information), -(1/2 * 62 * this.information), 56 * this.information, 62 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 33)//thengan big round table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1318, 812, 54, 53, -(1/2 * 54 * this.information), -(1/2 * 53 * this.information), 54 * this.information, 53 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 34)//thengan small round table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1370, 825, 28, 27, -(1/2 * 28 * this.information), -(1/2 * 27 * this.information), 28 * this.information, 27 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 35)//thengan gallows (empty)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1171, 870, 126, 23, -(1/2 * 126 * this.information), -(1/2 * 23 * this.information), 126 * this.information, 23 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 36)//thick thengan bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1089, 835, 59, 22, -(1/2 * 59 * this.information), -(1/2 * 22 * this.information), 59 * this.information, 22 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 37)//fat thengan bench //med rect thengan table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1090, 860, 42, 28, -(1/2 * 42 * this.information), -(1/2 * 28 * this.information), 42 * this.information, 28 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 38)//very long table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 836, 863, 129, 29, -(1/2 * 129 * this.information), -(1/2 * 29 * this.information), 129 * this.information, 29 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 39)//thengan seat 1
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1315, 868, 20, 24, -(1/2 * 20 * this.information), -(1/2 * 24 * this.information), 20 * this.information, 24 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 40)//thengan seat 2
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1336, 866, 20, 24, -(1/2 * 20 * this.information), -(1/2 * 24 * this.information), 20 * this.information, 24 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 41)//thengan seat 3
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1357, 867, 21, 24, -(1/2 * 21 * this.information), -(1/2 * 24 * this.information), 21 * this.information, 24 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 42)//thengan short stub bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1380, 865, 16, 27, -(1/2 * 16 * this.information), -(1/2 * 27 * this.information), 16 * this.information, 27 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 43)//thengan hay pile
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 688, 426, 85, 79, -(1/2 * 85 * this.information), -(1/2 * 79 * this.information), 85 * this.information, 79 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 44)//thengan hay bale
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 697, 500, 59, 35, -(1/2 * 59 * this.information), -(1/2 * 35 * this.information), 59 * this.information, 35 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 45)//thengan floral arrangement (west)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 340, 6, 60, 50, -(1/2 * 60 * this.information), -(1/2 * 50 * this.information), 60 * this.information, 50 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 46)//thengan floral arrangement (east)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 0, 175, 37, 42, -(1/2 * 37 * this.information), -(1/2 * 42 * this.information), 37 * this.information, 42 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 47)//thengan floral arrangement (east + west mix)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(alfombra, 1, 238, 49, 43, -(1/2 * 49 * this.information), -(1/2 * 43 * this.information), 49 * this.information, 43 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 48)//thengan rose boquet
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 242, 9, 27, 27, -(1/2 * 27 * this.information), -(1/2 * 27 * this.information), 27 * this.information, 27 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 49)//(above) medium bench
            {
                this.zIndex = 4;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 945, 852, 50, 13, -(1/2 * 50 * this.information), -(1/2 * 13 * this.information), 50 * this.information, 13 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 50)//vardanian hay pile
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 661, 32, 89, 71, -(1/2 * 89 * this.information), -(1/2 * 71 * this.information), 89 * this.information, 71 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 51)//vardanian hay bale
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 562, 45, 89, 49, -(1/2 * 89 * this.information), -(1/2 * 49 * this.information), 89 * this.information, 49 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 52)//vardanian clothsline 1
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 1262, 998, 192, 75, -(1/2 * 192 * this.information), -(1/2 * 75 * this.information), 192 * this.information, 75 * this.information);
                XXX.restore();
                this.zIndex = 4;
            }
            else if (this.temporary == 53)//vardanian clothsline 2
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 1282, 1107, 202, 76, -(1/2 * 202 * this.information), -(1/2 * 76 * this.information), 202 * this.information, 76 * this.information);
                XXX.restore();
                this.zIndex = 4;
            }
            else if (this.temporary == 54)//vardanian water basin
            {
                this.zIndex = 2;
                //TRAITS
                this.solid = true;
                this.interactionRange = 100;

                //DRAWSELF
                if (this.phase == 0) //with water
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 1322, 907, 76, 76, -(1/2 * 76 * 1), -(1/2 * 76 * 1), 76 * 1, 76 * 1);
                    XXX.restore();
                }
                else //empty
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 1405, 907, 76, 76, -(1/2 * 76 * 1), -(1/2 * 76 * 1), 76 * 1, 76 * 1);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 25;

                //INTERACTION
                if (this.activate == true)
                {
                    this.activate = false;
                    this.doBreak = false;
                    this.yaTiene = false;

                    if (this.phase == 0)
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][0])
                                {
                                    if (Inventory[i][0].type == "kellishClayPot" || Inventory[i][0].type == "vardanianPot" || Inventory[i][0].type == "bucket")
                                    {
                                        this.phase = 1;
                                    }

                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][1])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "bucketOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "vardanianPotOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "kellishClayPotOfWater")
                                {
                                    this.phase = 0;
                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][0])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            else if (this.temporary == 55)//dead rats in a pile 1
            {
                this.zIndex = 2;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 754, 1234, 78, 79, -(1/2 * 78 * 0.6 * this.information), -(1/2 * 79 * 0.6 * this.information), 78 * 0.6 * this.information, 79 * 0.6 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 56)//dead rats in a pile 2
            {
                this.zIndex = 2;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 590, 1238, 92, 92, -(1/2 * 92 * 0.6 * this.information), -(1/2 * 92 * 0.6 * this.information), 92 * 0.6 * this.information, 92 * 0.6 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 57)//rat in a boot
            {
                this.zIndex = 2;
                if (this.playerer <= 100)
                {
                    this.tac = true;
                }

                if (this.tac == true)
                {
                    this.tic += 1;
                }

                if (this.tic < 20 || this.tac == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 576, 938, 50, 36, -(1/2 * 50 * 1), -(1/2 * 36 * 1), 50 * 1, 36 * 1);
                    XXX.restore();
                }
                else if (this.tic < 23)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 650, 939, 50, 36, -(1/2 * 50 * 1), -(1/2 * 36 * 1), 50 * 1, 36 * 1);
                    XXX.restore();
                }
                else if (this.tic < 26)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 726, 939, 50, 36, -(1/2 * 50 * 1), -(1/2 * 36 * 1), 50 * 1, 36 * 1);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 576, 938, 50, 36, -(1/2 * 50 * 1), -(1/2 * 36 * 1), 50 * 1, 36 * 1);
                    XXX.restore();
                    if (this.oncer == true)
                    {
                        this.oncer = false;
                        var rattre = new Unit(this.X + Math.cos(this.rotation + Math.PI) * 20, this.Y + Math.sin(this.rotation + Math.PI) * 20, "Rat", false, "Rattre");
                        rattre.rotation = this.rotation;
                        rattre.newRotation = this.rotation;
                        ArtificialIntelligenceAccess.push(rattre);
                    }
                }
            }
            else if (this.temporary == 58) //boot
            {
                this.zIndex = 2;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 576, 938, 50, 36, -(1/2 * 50 * 1 * this.information), -(1/2 * 36 * 1 * this.information), 50 * 1 * this.information, 36 * 1 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 59) //high half-sword
            {
                this.zIndex = 4;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 359, 950, 69, 25, -(1/2 * 69 * this.information), -(1/2 * 25 * this.information), 69 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 60) //half-sword
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 359, 950, 69, 25, -(1/2 * 69 * this.information), -(1/2 * 25 * this.information), 69 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 61) //folded vardanian f clothes
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 522, 10, 63, 53, -(1/2 * 63 * this.information), -(1/2 * 53 * this.information), 63 * this.information, 53 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 62)//krovhyuzka flag
            {
                this.solid = true;
                this.radius = 24 * this.information;
                this.tic += 1;

                if (this.tic < 122)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(moth, 798, 220, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 147)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(moth, 906, 223, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 172)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(moth, 1009, 224, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 197)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(moth, 906, 223, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(moth, 798, 220, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                    this.tic = 0;
                }
            }
            else if (this.temporary == 63)//vorcaneous flag
            {
                this.solid = true;
                this.radius = 24 * this.information;
                this.tic += 1;

                if (this.tic < 122)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 798, 220, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 147)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 906, 223, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 172)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1009, 224, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else if (this.tic < 197)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 906, 223, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 798, 220, 108, 133, -(1/2 * 108 * this.information), -(1/2 * 133 * this.information) - 1.5, 108 * this.information, 133 * this.information);
                    XXX.restore();
                    this.tic = 0;
                }
            }
            else if (this.temporary == 64)//mounted elk head
            {
                this.zIndex = 5;
                this.solid = false;
                this.interactionRange = 1;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 708, 9, 43, 95, -(1/2 * 43 * 1 * this.information), -(1/2 * 95 * 1 * this.information), 43 * 1 * this.information, 95 * 1 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 65)//mounted hydra head
            {
                //TRAITS
                this.zIndex = 5;
                this.solid = false;
                this.interactionRange = 1;

                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 180, 362, 51, 29, -(1/2 * 51 * 1 * this.information), -(1/2 * 29 * 1 * this.information), 51 * 1 * this.information, 29 * 1 * this.information);
                XXX.restore();
            }

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenMueble")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0) //counter large
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 134, 3194, 132, 47, -(1/2 * 132 * 1), -(1/2 * 47 * 1), 132 * 1, 47 * 1);
                XXX.restore();
            }
            else if (this.temporary == 1)//counter small
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 132, 3244, 95, 43, -(1/2 * 95 * 1), -(1/2 * 43 * 1), 95 * 1, 43 * 1);
                XXX.restore();
            }
            else if (this.temporary == 2)//bar table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 752, 3338, 70, 64, -(1/2 * 70 * 1), -(1/2 * 64 * 1), 70 * 1, 64 * 1);
                XXX.restore();
            }
            else if (this.temporary == 3)//long table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 823, 3344, 147, 55, -(1/2 * 147 * 1), -(1/2 * 55 * 1), 147 * 1, 55 * 1);
                XXX.restore();
            }
            else if (this.temporary == 4)//feast table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 984, 3342, 271, 68, -(1/2 * 271 * 1), -(1/2 * 68 * 1), 271 * 1, 68 * 1);
                XXX.restore();
            }
            else if (this.temporary == 5)//bar chair 1
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 747, 3429, 33, 28, -(1/2 * 33 * 1), -(1/2 * 28 * 1), 33 * 1, 28 * 1);
                XXX.restore();
            }
            else if (this.temporary == 6)//bar chair 2
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 784, 3431, 27, 26, -(1/2 * 27 * 1), -(1/2 * 26 * 1), 27 * 1, 26 * 1);
                XXX.restore();
            }
            else if (this.temporary == 7)//long bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 826, 3428, 140, 29, -(1/2 * 140 * 1), -(1/2 * 29 * 1), 140 * 1, 29 * 1);
                XXX.restore();
            }
            else if (this.temporary >= 8)//feast bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 990, 3428, 252, 30, -(1/2 * 252 * 1), -(1/2 * 30 * 1), 252 * 1, 30 * 1);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenMuebleOver")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 6;
            if (this.temporary == 0) //counter large
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 134, 3194, 132, 47, -(1/2 * 132 * 1), -(1/2 * 47 * 1), 132 * 1, 47 * 1);
                XXX.restore();
            }
            else if (this.temporary == 1)//counter small
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 132, 3244, 95, 43, -(1/2 * 95 * 1), -(1/2 * 43 * 1), 95 * 1, 43 * 1);
                XXX.restore();
            }
            else if (this.temporary == 2)//bar table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 752, 3338, 70, 64, -(1/2 * 70 * 1), -(1/2 * 64 * 1), 70 * 1, 64 * 1);
                XXX.restore();
            }
            else if (this.temporary == 3)//long table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 823, 3344, 147, 55, -(1/2 * 147 * 1), -(1/2 * 55 * 1), 147 * 1, 55 * 1);
                XXX.restore();
            }
            else if (this.temporary == 4)//feast table
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 984, 3342, 271, 68, -(1/2 * 271 * 1), -(1/2 * 68 * 1), 271 * 1, 68 * 1);
                XXX.restore();
            }
            else if (this.temporary == 5)//bar chair 1
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 747, 3429, 33, 28, -(1/2 * 33 * 1), -(1/2 * 28 * 1), 33 * 1, 28 * 1);
                XXX.restore();
            }
            else if (this.temporary == 6)//bar chair 2
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 784, 3431, 27, 26, -(1/2 * 27 * 1), -(1/2 * 26 * 1), 27 * 1, 26 * 1);
                XXX.restore();
            }
            else if (this.temporary == 7)//long bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 826, 3428, 140, 29, -(1/2 * 140 * 1), -(1/2 * 29 * 1), 140 * 1, 29 * 1);
                XXX.restore();
            }
            else if (this.temporary >= 8)//feast bench
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 990, 3428, 252, 30, -(1/2 * 252 * 1), -(1/2 * 30 * 1), 252 * 1, 30 * 1);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "woodenBench")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0) //freydic
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 12, 386, 53, 15, -(1/2 * 53 * 2.3), -(1/2 * 15 * 2.3), 52 * 2.3, 15 * 2.3);
                XXX.restore();
            }
            else //thengan
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 82, 461, 53, 16, -(1/2 * 53 * 2.3), -(1/2 * 16 * 2.3), 53 * 2.3, 16 * 2.3);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenGoods")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1160, 2694, 33, 23, -(1/2 * 33 * 1.2), -(1/2 * 23 * 1.2), 33 * 1.2, 23 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1201, 2694, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1201, 2694, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1159, 2724, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1246, 2722, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1160, 2749, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 6)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1246, 2748, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 7) //light empty
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1199, 2748, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 8) //light lid/placemat
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1200, 2723, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 9)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1153, 2793, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 10)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1153, 2819, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 11)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1153, 2851, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 12)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1153, 2881, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 13)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1200, 2878, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 14)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1249, 2878, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 15)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1156, 2909, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 16) //bolts pile
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1203, 2907, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 17) //dark lid/placemat
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1250, 2906, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 18) //eggs
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1157, 2937, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 19) //ogard
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1157, 2964, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 20) //fish
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1207, 2933, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 21) //mushrooms
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1244, 2932, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 22) //techi
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1207, 2961, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 23) //hops
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1245, 2961, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 24) //culpris
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 1246, 2992, 34, 25, -(1/2 * 34 * 1.2), -(1/2 * 25 * 1.2), 34 * 1.2, 25 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 25) //halgom
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 418, 1865, 32, 28, -(1/2 * 32 * 1.2), -(1/2 * 28 * 1.2), 32 * 1.2, 28 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 26) //iema berries
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 373, 1863, 32, 28, -(1/2 * 32 * 1.2), -(1/2 * 28 * 1.2), 32 * 1.2, 28 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 27) //erguer flowers
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 334, 1863, 32, 28, -(1/2 * 32 * 1.2), -(1/2 * 28 * 1.2), 32 * 1.2, 28 * 1.2);
                XXX.restore();
            }
            else if (this.temporary == 28) //tialo fronds
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 334, 1902, 32, 28, -(1/2 * 32 * 1.2), -(1/2 * 28 * 1.2), 32 * 1.2, 28 * 1.2);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "tombstone")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0) //mossy med dark
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 979, 647, 49, 25, -(1/2 * 49 * this.information), -(1/2 * 25 * this.information), 49 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 1) //mossy med light
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1043, 645, 49, 25, -(1/2 * 49 * this.information), -(1/2 * 25 * this.information), 49 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2) //dark square
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 966, 681, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3) //circle
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1019, 672, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 4) //large light rect
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1005, 719, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 5) //large dark square
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1112, 652, 49, 25, -(1/2 * 49 * this.information), -(1/2 * 25 * this.information), 49 * this.information, 25 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 6) //mossy large
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1091, 707, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 7) //skinny mossy light
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1180, 659, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 8) //medlarge pillar
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1187, 710, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 9) //large long rect
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1251, 657, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 10) //long skinny light
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1251, 704, 49, 45, -(1/2 * 49 * this.information), -(1/2 * 45 * this.information), 49 * this.information, 45 * this.information);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "smallTable")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(norc, 26, 412, 22, 23, -(1/2 * 22 * 2), -(1/2 * 23 * 2), 22 * 2, 23 * 2);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "mediumTable")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0) //square thengan
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 152, 423, 34, 31, -(1/2 * 34 * 2), -(1/2 * 31 * 2), 34 * 1.3, 31 * 2);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 87, 386, 52, 30, -(1/2 * 52 * 2), -(1/2 * 30 * 2), 52 * 1.3, 30 * 2);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 11, 445, 53, 26, -(1/2 * 53 * 2), -(1/2 * 26 * 2), 53 * 1.3, 26 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "deadBody")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0) //decapitated
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.restore();
            }
            else if (this.temporary == 1) //nirwaden
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "#e68900";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 2) //kel
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "green";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 3) //freynor
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "navy";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 4) //thengar
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "#663300";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 5) //aldrekii
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "darkRed";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 6) //vardanian
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "#1c1c1c";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 7) //orgell
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "gold";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 8) //sylkeem
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "#06F4CA";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 9) //cephrian
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "purple";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 10) //outlander
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "white";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 11) //empiric
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "#999966";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary == 12) //zetian
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "#2a0038";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }
            else if (this.temporary >= 13) //faelan
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.scale(this.information, this.information);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 0, 302, 35, 80, -20.5, -20, 57, 100);
                XXX.beginPath();
                XXX.fillStyle = "pink";
                XXX.arc(0, 0, 10, 0, 2 * Math.PI);
                XXX.fill();
                XXX.strokeStyle = "black";
                XXX.lineWidth = 0.5;
                XXX.stroke();
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "stumpStool")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 116, 434, 22, 18, -(1/2 * 22 * 2), -(1/2 * 18 * 2), 22 * 2, 18 * 2);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 82, 433, 22, 18, -(1/2 * 22 * 2), -(1/2 * 18 * 2), 22 * 2, 18 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "stumpStoolSml")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 116, 434, 22, 18, -(1/2 * 22 * 1.45), -(1/2 * 18 * 1.45), 22 * 1.45, 18 * 1.45);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 82, 433, 22, 18, -(1/2 * 22 * 1.45), -(1/2 * 18 * 1.45), 22 * 1.45, 18 * 1.45);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "northernFishingSpot")
        {
            //TRAITS
            this.fishery = true;
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 14 + Math.floor(Math.random() * 21);
                this.rockLoad = [];
                for (var looop = 0; looop < 60; looop++)
                {
                    this.rockLoad.push({type: "rawRedCrombal", quantity: 1});
                }
                for (var looop = 0; looop < 4; looop++)
                {
                    this.rockLoad.push({type: "rawThab", quantity: 1});
                }
                for (var looop = 0; looop < 20 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawJuurgo", quantity: 1});
                }
                for (var looop = 0; looop < 16 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawRazorfin", quantity: 1});
                }
            }

            //DRAWSELF
            this.phase += 0.10;

            if (this.phase <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.4;
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 0, 257, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 29, 259, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 63, 260, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 3, 291, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 6 || this.phase > 6)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();

                if (this.phase >= 5.9)
                {
                    this.phase = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "fishingpole" && player.fishingFrame == true)//player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 125)
                {
                    player.fishing = true;
                    player.fishingID = (this.hiveID + "_fishing");
                    player.fishingTime = new Date().getTime();
                    player.fishingFrame = false;
                }
            }

            if (player.fishing == true && player.fishingID == (this.hiveID + "_fishing"))
            {
                if (new Date().getTime() - player.fishingTime > 41000)
                {
                    if (Math.round(Math.random()) || have("worms", 1))
                    {
                        if (have("worms", 1))
                        {
                            take("worms", 1);
                        }
                        this.health -= 1;
                        this.rockLoader(this.rockLoad); //this gives the player a fish (but only half of the time)
                    }
                    else
                    {
                        if (this.health >= 3)
                        {
                            this.health -= 1;
                        }
                    }

                    if (this.temporary != true)
                    {
                        if (this.health <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }

                    player.fishing = false;
                    player.fishingID = false;
                }
            }
        }
        else if (this.type == "temperatePondFishingSpot") //unique (there should only be one)
        {
            //TRAITS
            this.fishery = true;
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 1 + Math.floor(Math.random() * 2);
                this.rockLoad = [];
                for (var looop = 0; looop < 200; looop++)
                {
                    this.rockLoad.push({type: "rawRedBelliedFalder", quantity: 1});
                }
                for (var looop = 0; looop < 1; looop++)
                {
                    this.rockLoad.push({type: "sealSkinBoots", quantity: 1});
                }
                for (var looop = 0; looop < 1; looop++)
                {
                    this.rockLoad.push({type: "ironRing", quantity: 1});
                }
            }

            //DRAWSELF
            this.phase += 0.10;

            if (this.phase <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.4;
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 0, 257, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 29, 259, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 63, 260, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 3, 291, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 6 || this.phase > 6)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();

                if (this.phase >= 5.9)
                {
                    this.phase = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "fishingpole" && player.fishingFrame == true)//player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 125)
                {
                    player.fishing = true;
                    player.fishingID = (this.hiveID + "_fishing");
                    player.fishingTime = new Date().getTime();
                    player.fishingFrame = false;
                }
            }

            if (player.fishing == true && player.fishingID == (this.hiveID + "_fishing"))
            {
                if (new Date().getTime() - player.fishingTime > 41000)
                {
                    if (Math.round(Math.random()) || have("worms", 1))
                    {
                        if (have("worms", 1))
                        {
                            take("worms", 1);
                        }
                        this.health -= 1;
                        this.rockLoader(this.rockLoad); //this gives the player a fish (but only half of the time)
                    }
                    else
                    {
                        if (this.health >= 3)
                        {
                            this.health -= 1;
                        }
                    }

                    if (this.temporary != true)
                    {
                        if (this.health <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }

                    player.fishing = false;
                    player.fishingID = false;
                }
            }
        }
        else if (this.type == "temperateFishingSpot")
        {
            //TRAITS
            this.fishery = true;
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 14 + Math.floor(Math.random() * 21);
                this.rockLoad = [];
                for (var looop = 0; looop < 50; looop++)
                {
                    this.rockLoad.push({type: "rawRedBelliedFalder", quantity: 1});
                }
                for (var looop = 0; looop < 10; looop++)
                {
                    this.rockLoad.push({type: "rawSalmon", quantity: 1});
                }
                for (var looop = 0; looop < 15 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSlol", quantity: 1});
                }
                for (var looop = 0; looop < 25 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "crawdid", quantity: 1});
                }

                this.dayliteChecker = true;
            }

            if (timeOfDay == "Day" && this.dayliteChecker == false)
            {
                this.dayliteChecker = true;
                for (var kk = this.rockLoad.length - 1; kk >= 0; kk--)
                {
                    if (this.rockLoad[kk].type == "rawDuskfish")
                    {
                        this.rockLoad.splice(kk, 1);
                    }
                }
            }
            else if (this.dayliteChecker == true && timeOfDay != "Day")
            {
                this.dayliteChecker = false;
                for (var looop = 0; looop < 20 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawDuskfish", quantity: 1});
                }
            }

            //DRAWSELF
            this.phase += 0.10;

            if (this.phase <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.4;
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 0, 257, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 29, 259, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 63, 260, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 3, 291, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 6 || this.phase > 6)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();

                if (this.phase >= 5.9)
                {
                    this.phase = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "fishingpole" && player.fishingFrame == true)//player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 125)
                {
                    player.fishing = true;
                    player.fishingID = (this.hiveID + "_fishing");
                    player.fishingTime = new Date().getTime();
                    player.fishingFrame = false;
                }
            }

            if (player.fishing == true && player.fishingID == (this.hiveID + "_fishing"))
            {
                if (new Date().getTime() - player.fishingTime > 41000)
                {
                    if (Math.round(Math.random()) || have("worms", 1))
                    {
                        if (have("worms", 1))
                        {
                            take("worms", 1);
                        }
                        this.health -= 1;
                        this.rockLoader(this.rockLoad); //this gives the player a fish (but only half of the time)
                    }
                    else
                    {
                        if (this.health >= 3)
                        {
                            this.health -= 1;
                        }
                    }

                    if (this.temporary != true)
                    {
                        if (this.health <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }

                    player.fishing = false;
                    player.fishingID = false;
                }
            }
        }
        else if (this.type == "thenganTemperateFishingSpot")
        {
            //TRAITS
            this.fishery = true;
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 14 + Math.floor(Math.random() * 21);
                this.rockLoad = [];
                for (var looop = 0; looop < 25; looop++)
                {
                    this.rockLoad.push({type: "rawTilmuk", quantity: 1});
                }
                for (var looop = 0; looop < 25; looop++)
                {
                    this.rockLoad.push({type: "rawHob", quantity: 1});
                }
                for (var looop = 0; looop < 15 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawGulb", quantity: 1});
                }
                for (var looop = 0; looop < 5 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawCres", quantity: 1});
                }
                for (var looop = 0; looop < 30 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawHetlaukWorm", quantity: 1});
                }
            }

            //DRAWSELF
            this.phase += 0.10;

            if (this.phase <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.4;
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 0, 257, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 29, 259, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 63, 260, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 3, 291, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 6 || this.phase > 6)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();

                if (this.phase >= 5.9)
                {
                    this.phase = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "fishingpole" && player.fishingFrame == true)//player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 125)
                {
                    player.fishing = true;
                    player.fishingID = (this.hiveID + "_fishing");
                    player.fishingTime = new Date().getTime();
                    player.fishingFrame = false;
                }
            }

            if (player.fishing == true && player.fishingID == (this.hiveID + "_fishing"))
            {
                if (new Date().getTime() - player.fishingTime > 41000)
                {
                    if (Math.round(Math.random()) || have("worms", 1))
                    {
                        if (have("worms", 1))
                        {
                            take("worms", 1);
                        }
                        this.health -= 1;
                        this.rockLoader(this.rockLoad); //this gives the player a fish (but only half of the time)
                    }
                    else
                    {
                        if (this.health >= 3)
                        {
                            this.health -= 1;
                        }
                    }

                    if (this.temporary != true)s
                    {
                        if (this.health <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }

                    player.fishing = false;
                    player.fishingID = false;
                }
            }
        }
        else if (this.type == "thenganSewerFishingSpot")
        {
            //TRAITS
            this.fishery = true;
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 14 + Math.floor(Math.random() * 21);
                this.rockLoad = [];

                for (var looop = 0; looop < 25; looop++)
                {
                    this.rockLoad.push({type: "rawHob", quantity: 1});
                }
                for (var looop = 0; looop < 75 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "sewerHetlaukWorm", quantity: 1});
                }
            }

            //DRAWSELF
            this.phase += 0.10;

            if (this.phase <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.4;
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 0, 257, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 29, 259, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 63, 260, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 3, 291, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 6 || this.phase > 6)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();

                if (this.phase >= 5.9)
                {
                    this.phase = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "fishingpole" && player.fishingFrame == true)//player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 125)
                {
                    player.fishing = true;
                    player.fishingID = (this.hiveID + "_fishing");
                    player.fishingTime = new Date().getTime();
                    player.fishingFrame = false;
                }
            }

            if (player.fishing == true && player.fishingID == (this.hiveID + "_fishing"))
            {
                if (new Date().getTime() - player.fishingTime > 41000)
                {
                    if (Math.round(Math.random()) || have("worms", 1))
                    {
                        if (have("worms", 1))
                        {
                            take("worms", 1);
                        }
                        this.health -= 1;
                        this.rockLoader(this.rockLoad); //this gives the player a fish (but only half of the time)
                    }
                    else
                    {
                        if (this.health >= 3)
                        {
                            this.health -= 1;
                        }
                    }

                    if (this.temporary != true)
                    {
                        if (this.health <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }

                    player.fishing = false;
                    player.fishingID = false;
                }
            }
        }
        else if (this.type == "vardanianTemperateFishingSpot")
        {
            //TRAITS
            this.fishery = true;
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 14 + Math.floor(Math.random() * 21);
                this.rockLoad = [];
                for (var looop = 0; looop < 50; looop++)
                {
                    this.rockLoad.push({type: "rawSkig", quantity: 1});
                }
                for (var looop = 0; looop < 15; looop++)
                {
                    this.rockLoad.push({type: "rawCrilp", quantity: 1});
                }
                for (var looop = 0; looop < 20 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawTaggler", quantity: 1});
                }
                for (var looop = 0; looop < 10 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawMulstish", quantity: 1});
                }
                for (var looop = 0; looop < 5 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawApoi", quantity: 1});
                }
            }

            //DRAWSELF
            this.phase += 0.10;

            if (this.phase <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.4;
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 0, 257, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 29, 259, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 63, 260, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 3, 291, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 6 || this.phase > 6)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();

                if (this.phase >= 5.9)
                {
                    this.phase = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "fishingpole" && player.fishingFrame == true)//player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 125)
                {
                    player.fishing = true;
                    player.fishingID = (this.hiveID + "_fishing");
                    player.fishingTime = new Date().getTime();
                    player.fishingFrame = false;
                }
            }

            if (player.fishing == true && player.fishingID == (this.hiveID + "_fishing"))
            {
                if (new Date().getTime() - player.fishingTime > 41000)
                {
                    if (Math.round(Math.random()) || have("worms", 1))
                    {
                        if (have("worms", 1))
                        {
                            take("worms", 1);
                        }
                        this.health -= 1;
                        this.rockLoader(this.rockLoad); //this gives the player a fish (but only half of the time)
                    }
                    else
                    {
                        if (this.health >= 3)
                        {
                            this.health -= 1;
                        }
                    }

                    if (this.temporary != true)
                    {
                        if (this.health <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }

                    player.fishing = false;
                    player.fishingID = false;
                }
            }
        }
        else if (this.type == "southFishingSpot")
        {
            //TRAITS
            this.fishery = true;
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 14 + Math.floor(Math.random() * 21);
                this.rockLoad = [];
                for (var looop = 0; looop < 26; looop++)
                {
                    this.rockLoad.push({type: "rawKalp", quantity: 1});
                }
                for (var looop = 0; looop < 33; looop++)
                {
                    this.rockLoad.push({type: "rawRiulpo", quantity: 1});
                }
                for (var looop = 0; looop < 10 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSaskriit", quantity: 1});
                }
                for (var looop = 0; looop < 20 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawPolxetp", quantity: 1});
                }
                for (var looop = 0; looop < 11 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawTridite", quantity: 1});
                }
            }

            //DRAWSELF
            this.phase += 0.10;

            if (this.phase <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.globalAlpha = 0.4;
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 0, 257, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 29, 259, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 63, 260, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 3, 291, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();
            }
            else if (this.phase <= 6 || this.phase > 6)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 48, 292, 35, 29, -(1/2 * 35 * 2), -(1/2 * 29 * 2), 35 * 2, 29 * 2);
                XXX.restore();

                if (this.phase >= 5.9)
                {
                    this.phase = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "fishingpole" && player.fishingFrame == true)//player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 125)
                {
                    player.fishing = true;
                    player.fishingID = (this.hiveID + "_fishing");
                    player.fishingTime = new Date().getTime();
                    player.fishingFrame = false;
                }
            }

            if (player.fishing == true && player.fishingID == (this.hiveID + "_fishing"))
            {
                if (new Date().getTime() - player.fishingTime > 41000)
                {
                    if (Math.round(Math.random()) || have("worms", 1))
                    {
                        if (have("worms", 1))
                        {
                            take("worms", 1);
                        }
                        this.health -= 1;
                        this.rockLoader(this.rockLoad); //this gives the player a fish (but only half of the time)
                    }
                    else
                    {
                        if (this.health >= 3)
                        {
                            this.health -= 1;
                        }
                    }

                    if (this.temporary != true)
                    {
                        if (this.health <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }

                    player.fishing = false;
                    player.fishingID = false;
                }
            }
        }
        else if (this.type == "lostPaddle")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(norc, 217, 409, 52, 55, -(1/2 * 52 * 1.5), -(1/2 * 55 * 1.5), 52 * 1.5, 55 * 1.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "crashedBoat")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(norc, 292, 424, 83, 43, -(1/2 * 83 * 1.4), -(1/2 * 43 * 1.4), 83 * 1.4, 43 * 1.4);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 70;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "boat")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(norc, 311, 480, 35, 74, -(1/2 * 35 * 1.4), -(1/2 * 74 * 1.4), 35 * 1.4, 74 * 1.4);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 44;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "floatingBoat")
        {
            //TRAITS
            this.solid = false;
            if (this.temporary == false)
            {
                this.interactionRange = 39;
            }
            else
            {
                this.interactionRange = 1;
            }

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(norc, 311, 480, 35, 74, -(1/2 * 35 * 1.4), -(1/2 * 74 * 1.4), 35 * 1.4, 74 * 1.4);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 39;

            //be able to stand on things in the water as if land were there
                //player
            var playerPos = Math.sqrt((X - this.X)*(X - this.X) + (Y - this.Y)*(Y-this.Y));
            if (playerPos <= this.radius)
            {
                player.land = true;
            }
                //units
            var unitPos;
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                unitPos = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y-this.Y));
                if (unitPos <= this.radius)
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.temporary == false && shiftKey) //shift key must also be held to re-itemize the temporary floating boat scenery piece
                {
                    if (this.weaponEquipped != "none" && this.weaponEquipped != "swimming")
                    {
                        //unequip all
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].utility == "weapon")
                            {
                                Inventory[i][0].equipped = false;
                            }
                        }
                    }

                    //equip a new boat that is added to the Inventory
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "boat")
                        {
                            Inventory[i][1] += 1;
                            Inventory[i][0].equipped = true;
                            player.weaponEquipped = Inventory[i][0].type;
                            player.weaponIsRanged = false;
                            player.isWeaponEquipped = true;
                            player.weaponID = Inventory[i][0].barcode;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        var theBoat = new Item("boat", false, false);
                        theBoat.equipped = true;
                        player.weaponEquipped = theBoat.type;
                        player.weaponIsRanged = false;
                        player.isWeaponEquipped = true;
                        player.weaponID = theBoat.barcode;
                        Inventory.push([theBoat, 1]);
                    }

                    if (player.water == true)
                    {
                        //any dead bodies that relied on the boat for land will sink when the boat is removed
                        for (var i = deadAIList.length - 1; i > -1; i--)
                        {
                            var deadPos = Math.sqrt((deadAIList[i].X - this.X)*(deadAIList[i].X - this.X) + (deadAIList[i].Y - this.Y)*(deadAIList[i].Y-this.Y));
                            if (deadPos <= this.radius)
                            {
                                deadAIList.splice(i, 1);
                            }
                        }
                        //any items that relied on the boat for land that are not aquatic items will be apropriated into the player's inventory
                        for (var i = worldItems.length - 1; i > -1; i--)
                        {
                            var itemPos = Math.sqrt((worldItems[i][0].X - this.X)*(worldItems[i][0].X - this.X) + (worldItems[i][0].Y - this.Y)*(worldItems[i][0].Y-this.Y));
                            if (itemPos <= this.radius && !worldItems[i][0].aqua)
                            {
                                var hits = 0;
                                for (var j = 0; j < Inventory.length; j ++)
                                {
                                    if (Inventory[j][0].type == worldItems[i][0].type)
                                    {
                                        Inventory[j][1] += worldItems[i][1];
                                        break;
                                    }
                                    else
                                    {
                                        hits += 1;
                                    }
                                }
                                if (hits == Inventory.length)
                                {
                                    Inventory.push([new Item(worldItems[i][0].type, false, false), worldItems[i][1]]);
                                }
                                worldItems.splice(i, 1);
                            }
                        }
                    }

                    //delete this scenery object now that it has been picked up by the player
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }
                }
                else
                {
                    dClick = true;
                }
            }
        }
        else if (this.type == "deadLeafCutter")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.temporary == true)
            {
                this.size = 1.35;
            }
            else
            {
                this.size = 1;
            }

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(jeru, 2106, 17, 61, 41, -(1/2 * 61 * this.size), -(1/2 * 41 * this.size), 61 * this.size, 41 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            if (this.temporary == true)
            {
                this.radius = 16;
            }
            else
            {
                this.radius = 13;
            }


            //be able to stand on things in the water as if land were there
            ////player
            //var playerPos = (X - this.X)*(X - this.X) + (Y - this.Y)*(Y-this.Y);
            //if (playerPos <= (this.radius *this.radius))
            //{
            //
            //}
            //units
            var unitPos;
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                unitPos = (ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y-this.Y);
                if (unitPos <= (this.radius * this.radius) && ArtificialIntelligenceAccess[i].healthMAX <= 7 || unitPos <= (this.radius * this.radius) && ArtificialIntelligenceAccess[i].type == "Anter" || unitPos <= (this.radius * this.radius) && ArtificialIntelligenceAccess[i].type == "LeafCutterAnter")
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                dClick = true;
            }
        }
        else if (this.type == "venandiExplosion")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.temporary == true)
            {
                this.size = 1.35;
            }
            else
            {
                this.size = 1;
            }

            //XXX.save();
            //XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            //XXX.rotate(this.rotation);
            //XXX.drawImage(jeru, 2106, 17, 61, 41, -(1/2 * 61 * this.size), -(1/2 * 41 * this.size), 61 * this.size, 41 * this.size);
            //XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 70 * this.size;

            if (this.dst(X, Y) <= this.radius && player.form != "venandi")
            {
                if (this.temporary == true)
                {
                    this.damagePlayer(20, 14, "venandineExplosion");
                }
                else
                {
                    this.damagePlayer(9, 9, "venandineExplosion");
                }

            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx && ArtificialIntelligenceAccess[j].ID != "venandi")
                {
                    if (this.temporary == true)
                    {
                        ArtificialIntelligenceAccess[j].health -= Math.max(0, 20 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 14));
                    }
                    else
                    {
                        ArtificialIntelligenceAccess[j].health -= Math.max(0, 9 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 9));
                    }

                    ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                    if (ArtificialIntelligenceAccess[j].health <= 0)
                    {
                        ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                    }

                    if (ArtificialIntelligenceAccess[j].health < 4/5 * ArtificialIntelligenceAccess[j].healthMAX || ArtificialIntelligenceAccess[j].resistDisease == false)
                    {
                        if (ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].type == "Soldier" || ArtificialIntelligenceAccess[j].type == "Etyr" || ArtificialIntelligenceAccess[j].type == "Aranea" || ArtificialIntelligenceAccess[j].type == "Crenid" || ArtificialIntelligenceAccess[j].type == "LeafCutterAnter")
                        {
                            if (ArtificialIntelligenceAccess[j].venandi <= 0)
                            {
                                ArtificialIntelligenceAccess[j].venandi = 1;
                            }
                        }
                    }
                    if (ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].type == "Soldier" || ArtificialIntelligenceAccess[j].type == "Etyr" || ArtificialIntelligenceAccess[j].type == "Aranea" || ArtificialIntelligenceAccess[j].type == "Crenid" || ArtificialIntelligenceAccess[j].type == "LeafCutterAnter")
                    {
                        if (this.temporary == true)
                        {
                            if ((Math.max(0, 20 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 14)) > 0))
                            {
                                ArtificialIntelligenceAccess[j].venandi += 20;
                            }
                        }
                        else
                        {
                            if ((Math.max(0, 9 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 9)) > 0))
                            {
                                ArtificialIntelligenceAccess[j].venandi += 20;
                            }
                        }
                    }
                }
            }

            if (this.temporary == true)
            {
                for (var jj = 0; jj < 22; jj++)
                {
                    scenicList.push(new Scenery("cerebrisSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                }
            }
            else
            {
                for (var jj = 0; jj < 16; jj++)
                {
                    scenicList.push(new Scenery("cerebrisSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                }
            }

            scenicList.splice(scenicList.indexOf(this), 1);

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                dClick = true;
            }
        }
        else if (this.type == "wartExplosion")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.tac = 0;
            }

            if (this.temporary == false)
            {
                if (player.undying == true || player.vamprism == true)
                {
                    player.internalWarts = false;
                    player.internalWartGrowth = 0;
                    this.temporary = true;
                }
                else
                {
                    clearEquipped();
                    player.hide = true;
                    X = this.X;
                    Y = this.Y;
                    this.tac += 0.5;

                    if (this.tac > 100)
                    {
                        player.wartPop = true;
                        player.health = -35;
                    }
                }
            }
            this.tic += 3;
            if (this.tic <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wart, 369, 906, 57, 55, -(1/2 * 57 * this.size), -(1/2 * 55 * this.size), 57 * this.size, 55 * this.size);
                XXX.restore();
            }
            else if (this.tic <= 6)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wart, 272, 984, 80, 82, -(1/2 * 80 * this.size), -(1/2 * 82 * this.size), 80 * this.size, 82 * this.size);
                XXX.restore();
            }
            else if (this.tic <= 9)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wart, 356, 973, 96, 98, -(1/2 * 96 * this.size), -(1/2 * 98 * this.size), 96 * this.size, 98 * this.size);
                XXX.restore();

                if (this.dst(X, Y) <= this.radius)
                {
                    if (this.temporary == true)
                    {
                        this.damagePlayer(0.5, 0.5, "internalWartExplosion");
                    }
                }

                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {

                        ArtificialIntelligenceAccess[j].health -= Math.max(0, 0.5 - Math.max(0, ArtificialIntelligenceAccess[j].armour - 1));

                        ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                        if (ArtificialIntelligenceAccess[j].health <= 0 && this.temporary == true)
                        {
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }

                        if (ArtificialIntelligenceAccess[j].resistDisease == false)
                        {
                            if (ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].type == "Soldier")
                            {
                                if (ArtificialIntelligenceAccess[j].internalWarts == false)
                                {
                                    ArtificialIntelligenceAccess[j].internalWarts = true;
                                    ArtificialIntelligenceAccess[j].internalWartGrowth = 0;
                                }
                            }
                        }
                    }
                }

                this.tic = 10;
            }
            else
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    if (this.temporary == true)
                    {
                        if (player.resistDisease == false)
                        {
                            if (player.internalWarts == false)
                            {
                                player.internalWarts = true;
                                player.internalWartGrowth = 0;
                            }
                        }
                    }
                }

                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        if (ArtificialIntelligenceAccess[j].resistDisease == false)
                        {
                            if (ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].type == "Soldier")
                            {
                                if (ArtificialIntelligenceAccess[j].internalWarts == false)
                                {
                                    ArtificialIntelligenceAccess[j].internalWarts = true;
                                    ArtificialIntelligenceAccess[j].internalWartGrowth = 0;
                                }
                            }
                        }
                    }
                }
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wart, 285, 713, 118, 112, -(1/2 * 118 * this.size), -(1/2 * 112 * this.size), 118 * this.size, 112 * this.size);
                XXX.restore();
                this.tic += 1;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 117 * this.size;



            if (this.tic > 3950)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                dClick = true;
            }
        }
        else if (this.type == "damageBubble")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.radius = this.temporary.radius;
                this.damage = this.temporary.damage;
                this.negate = this.temporary.negate;
                this.effect = this.temporary.effect;
                this.team = this.temporary.team;

                //scenicList.push(new Scenery("damageBubble", this.X, this.Y, 0, {radius: 50 * this.alphaSize, damage: 10, negate: this.negateArmour, effect: "smashbackI"}));
            }

            if (this.team != "player")
            {
                if (this.dst(X, Y) <= this.radius + player.mySize)
                {
                    this.damagePlayer(this.damage, this.negate, this.effect);
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= (this.radius + ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (this.team != ArtificialIntelligenceAccess[j].team)
                    {
                        ArtificialIntelligenceAccess[j].health -= (Math.max(0, this.damage - Math.max(0, ArtificialIntelligenceAccess[j].armour - this.negate)));

                        ArtificialIntelligenceAccess[j].healthShownTime = new Date().getTime();
                        if (ArtificialIntelligenceAccess[j].health <= 0)
                        {
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }

                        if (this.effect == "smashbackI" && (Math.max(0, (this.damage - Math.max(0, ArtificialIntelligenceAccess[j].armour - this.negate)))))
                        {
                            var twrdsUnit = Math.atan2(this.Y - ArtificialIntelligenceAccess[j].Y, this.X - ArtificialIntelligenceAccess[j].X);
                            ArtificialIntelligenceAccess[j].X -= Math.cos(twrdsUnit) * 50;
                            ArtificialIntelligenceAccess[j].Y -= Math.sin(twrdsUnit) * 50;
                            ArtificialIntelligenceAccess[j].stunIII = true;
                            ArtificialIntelligenceAccess[j].stunTimer = 3;
                            ArtificialIntelligenceAccess[j].stunTime = new Date().getTime();
                        }
                    }
                }
            }

            scenicList.splice(scenicList.indexOf(this), 1);
        }
        else if (this.type == "barrel")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 1) //with spigot
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 62, 170, 25, 22, -(1/2 * 25 * 1.4), -(1/2 * 22 * 1.4), 25 * 1.4, 22 * 1.4);
                XXX.restore();
            }
            else //without spigot
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 61, 169, 22, 25, -(1/2 * 22 * 1.4), -(1/2 * 25 * 1.4), 22 * 1.4, 25 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 11;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "crate")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 35 + 35 * this.information[0];

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 35 * this.information[0];

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tic = 0;
            }

            this.zIndex = 1;
            if (this.temporary == 1 || this.temporary == 3)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polpol, 89, 212, 66, 40, -(1/2 * 66 * this.information[0]), -(1/2 * 40 * this.information[0]), 66 * this.information[0], 40 * this.information[0]);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polpol, 88, 260, 66, 40, -(1/2 * 66 * this.information[0]), -(1/2 * 40 * this.information[0]), 66 * this.information[0], 40 * this.information[0]);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2 || this.temporary == 4)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polpol, 298, 273, 49, 57, -(1/2 * 49 * this.information[0]), -(1/2 * 57 * this.information[0]), 49 * this.information[0], 57 * this.information[0]);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(polpol, 96, 300, 49, 57, -(1/2 * 49 * this.information[0]), -(1/2 * 57 * this.information[0]), 49 * this.information[0], 57 * this.information[0]);
                    XXX.restore();
                }
            }
            else if (this.temporary == 0 || this.temporary == 5) //vardanian crate
            {
                this.radius = 15 * this.information[0];
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(toad, 699, 368, 29, 26, -(1/2 * 29 * this.information[0]), -(1/2 * 26 * this.information[0]), 29 * this.information[0], 26 * this.information[0]);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(toad, 734, 369, 29, 26, -(1/2 * 29 * this.information[0]), -(1/2 * 26 * this.information[0]), 29 * this.information[0], 26 * this.information[0]);
                    XXX.restore();
                }
            }
            else if (this.temporary == -1 || this.temporary == 6) //mrb crate
            {
                this.radius = 15 * this.information[0];
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gent, 150, 367, 99, 61, -(1/2 * 99 * this.information[0]), -(1/2 * 61 * this.information[0]), 99 * this.information[0], 61 * this.information[0]);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gent, 16, 364, 100, 67, -(1/2 * 100 * this.information[0]), -(1/2 * 67 * this.information[0]), 100 * this.information[0], 67 * this.information[0]);
                    XXX.restore();
                }
            }
            else if (this.temporary == -2 || this.temporary == 7) //cephrian storage pot
            {
                this.solid = true;
                this.radius = 15 * this.information[0];
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gnoll, 210, 80, 67, 61, -(1/2 * 67 * this.information[0]), -(1/2 * 61 * this.information[0]), 67 * this.information[0], 61 * this.information[0]);
                    XXX.restore();
                    this.tic = 0;
                }
                else if (this.phase == "opened")
                {
                    this.tic += 1;

                    if (this.tic < 11)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gnoll, 591, 271, 67, 61, -(1/2 * 67 * this.information[0]), -(1/2 * 61 * this.information[0]), 67 * this.information[0], 61 * this.information[0]);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gnoll, 662, 270, 67, 61, -(1/2 * 67 * this.information[0]), -(1/2 * 61 * this.information[0]), 67 * this.information[0], 61 * this.information[0]);
                        XXX.restore();
                    }
                }
            }
            else if (this.temporary == -3 || this.temporary == 8) //nomad storage pit
            {
                this.radius = 13 * this.information[0];
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gnoll, 739, 247, 60, 55, -(1/2 * 60 * this.information[0]), -(1/2 * 55 * this.information[0]), 60 * this.information[0], 55 * this.information[0]);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gnoll, 741, 303, 59, 55, -(1/2 * 59 * this.information[0]), -(1/2 * 55 * this.information[0]), 59 * this.information[0], 55 * this.information[0]);
                    XXX.restore();
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.phase == "opened")
                {
                    if (this.temporary > 2 && this.storageListChecked == true && player.noticed == true)
                    {
                        this.changeFactionRelation(this.information[3]);
                        //alert creatures or anger individuals
                        if (typeof(this.information[6]) != "undefined")
                        {
                            if (this.information[6] == true)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        this.callForNearbyHelpFromType(3500, ArtificialIntelligenceAccess[i].type);
                                    }
                                }
                            }
                            else if (this.information[6] != false)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        if (ArtificialIntelligenceAccess[i].ID == this.information[6])
                                        {
                                            ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.temporary > 2 && this.storageListChecked == true)
                    {
                        player.bankPosition = 0;
                        bankScroll = 0;
                        storedID = this.information[1];
                        storageSlots = this.information[2];
                        lowBar = "storage";
                    }
                    this.phase = 0;
                }
                else
                {
                    this.phase = "opened";
                }
            }
        }
        else if (this.type == "basket")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 35 + 35 * this.information[0];

            this.zIndex = 1;
            if (this.temporary == 1 || this.temporary == 3)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 1201, 2790, 33, 25, -(1/2 * 33 * this.information[0]), -(1/2 * 25 * this.information[0]), 33 * this.information[0], 25 * this.information[0]);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 1200, 2822, 33, 37, -(1/2 * 33 * this.information[0]), -(1/2 * 37 * this.information[0]), 33 * this.information[0], 37 * this.information[0]);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2 || this.temporary == 4)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 1247, 2783, 33, 37, -(1/2 * 33 * this.information[0]), -(1/2 * 37 * this.information[0]), 33 * this.information[0], 37 * this.information[0]);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 1247, 2822, 33, 37, -(1/2 * 33 * this.information[0]), -(1/2 * 37 * this.information[0]), 33 * this.information[0], 37 * this.information[0]);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 35 * this.information[0];

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.phase == "opened")
                {
                    if (this.temporary > 2 && this.storageListChecked == true && player.noticed == true)
                    {
                        this.changeFactionRelation(this.information[3]);
                        //alert creatures or anger individuals
                        if (typeof(this.information[6]) != "undefined")
                        {
                            if (this.information[6] == true)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        this.callForNearbyHelpFromType(3500, ArtificialIntelligenceAccess[i].type);
                                    }
                                }
                            }
                            else if (this.information[6] != false)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        if (ArtificialIntelligenceAccess[i].ID == this.information[6])
                                        {
                                            ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.temporary > 2 && this.storageListChecked == true)
                    {
                        player.bankPosition = 0;
                        bankScroll = 0;
                        storedID = this.information[1];
                        storageSlots = this.information[2];
                        lowBar = "storage";
                    }
                    this.phase = 0;
                }
                else
                {
                    this.phase = "opened";
                }
            }
        }
        else if (this.type == "drawerA")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 35 + 35 * this.information[0];

            this.zIndex = 1;
            if (this.temporary == 1 || this.temporary == 3)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 28, 398, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 58, 398, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2 || this.temporary == 4)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 86, 398, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 117, 397, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.information[0];

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.phase == "opened")
                {
                    if (this.temporary > 2 && this.storageListChecked == true && player.noticed == true)
                    {
                        this.changeFactionRelation(this.information[3]);
                        //alert creatures or anger individuals
                        if (typeof(this.information[6]) != "undefined")
                        {
                            if (this.information[6] == true)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        this.callForNearbyHelpFromType(3500, ArtificialIntelligenceAccess[i].type);
                                    }
                                }
                            }
                            else if (this.information[6] != false)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        if (ArtificialIntelligenceAccess[i].ID == this.information[6])
                                        {
                                            ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.temporary > 2 && this.storageListChecked == true)
                    {
                        player.bankPosition = 0;
                        bankScroll = 0;
                        storedID = this.information[1];
                        storageSlots = this.information[2];
                        lowBar = "storage";
                    }
                    this.phase = 0;
                }
                else
                {
                    this.phase = "opened";
                }
            }
        }
        else if (this.type == "drawerB")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 35 + 35 * this.information[0];

            this.zIndex = 1;
            if (this.temporary == 1 || this.temporary == 3)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 154, 398, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 184, 398, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2 || this.temporary == 4)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 154, 428, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
                else if (this.phase == "opened")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 184, 428, 25, 30, -(1/2 * 25 * this.information[0] * 2), -(1/2 * 30 * this.information[0] * 2), 25 * this.information[0] * 2, 30 * this.information[0] * 2);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.information[0];

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.phase == "opened")
                {
                    if (this.temporary > 2 && this.storageListChecked == true && player.noticed == true)
                    {
                        this.changeFactionRelation(this.information[3]);
                        //alert creatures or anger individuals
                        if (typeof(this.information[6]) != "undefined")
                        {
                            if (this.information[6] == true)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        this.callForNearbyHelpFromType(3500, ArtificialIntelligenceAccess[i].type);
                                    }
                                }
                            }
                            else if (this.information[6] != false)
                            {
                                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                                {
                                    if (ArtificialIntelligenceAccess[i].baseTeam != "player")
                                    {
                                        if (ArtificialIntelligenceAccess[i].ID == this.information[6])
                                        {
                                            ArtificialIntelligenceAccess[i].disturbedTime = new Date().getTime();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.temporary > 2 && this.storageListChecked == true)
                    {
                        player.bankPosition = 0;
                        bankScroll = 0;
                        storedID = this.information[1];
                        storageSlots = this.information[2];
                        lowBar = "storage";
                    }
                    this.phase = 0;
                }
                else
                {
                    this.phase = "opened";
                }
            }
        }
        else if (this.type == "dryMudSlab")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(chupa, 915, 280, 9, 18, -(1/2 * 9 * this.temporary * 2), -(1/2 * 18 * this.information * 2), 9 * this.temporary * 2, 18 * this.information * 2);
            XXX.restore();


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "blood")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 632, 1799, 82, 77, -(1/2 * 82 * this.information), -(1/2 * 77 * this.information), 82 * this.information, 77 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 718, 1821, 82, 77, -(1/2 * 82 * this.information), -(1/2 * 77 * this.information), 82 * this.information, 77 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 713, 1754, 82, 77, -(1/2 * 82 * this.information), -(1/2 * 77 * this.information), 82 * this.information, 77 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 540, 1809, 82, 77, -(1/2 * 82 * this.information), -(1/2 * 77 * this.information), 82 * this.information, 77 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 447, 1783, 82, 77, -(1/2 * 82 * this.information), -(1/2 * 77 * this.information), 82 * this.information, 77 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 6)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 371, 1793, 82, 77, -(1/2 * 82 * this.information), -(1/2 * 77 * this.information), 82 * this.information, 77 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 7)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 567, 13, 52, 78, -(1/2 * 52 * this.information), -(1/2 * 78 * this.information), 52 * this.information, 78 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 448, 14, 108, 82, -(1/2 * 108 * this.information), -(1/2 * 82 * this.information), 108 * this.information, 82 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 9)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 626, 10, 87, 87, -(1/2 * 87 * this.information), -(1/2 * 87 * this.information), 87 * this.information, 87 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 10) //long bloody drag
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 777, 718, 234, 64, -(1/2 * 234 * this.information), -(1/2 * 64 * this.information), 234 * this.information, 64 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 11) //long curved bloody drag
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 998, 642, 100, 164, -(1/2 * 100 * this.information), -(1/2 * 164 * this.information), 100 * this.information, 164 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 12) //blood and organs (giant rat or human?)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 1129, 1095, 143, 92, -(1/2 * 143 * this.information), -(1/2 * 92 * this.information), 143 * this.information, 92 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 13) //grand blood pool
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 438, 344, 257, 183, -(1/2 * 257 * this.information), -(1/2 * 183 * this.information), 257 * this.information, 183 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 14) //large blood pool
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 197, 361, 194, 169, -(1/2 * 194 * this.information), -(1/2 * 169 * this.information), 194 * this.information, 169 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 15) //thick blood pool
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 3, 385, 194, 169, -(1/2 * 194 * this.information), -(1/2 * 169 * this.information), 194 * this.information, 169 * this.information);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "brokenTent")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.radius = 1;

            this.zIndex = 1;
            if (this.temporary == 1) //vardanian Tent corner broken
            {
                this.solid = true;
                this.radius = 37;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(gul, 886, 97, 69, 55, -(1/2 * 69 * this.information * 2), -(1/2 * 55 * this.information * 2), 69 * this.information * 2, 55 * this.information * 2);
                XXX.restore();
            }
            else if (this.temporary == 2) //vardanian Tent ripped in half
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation - 1/2 * Math.PI);
                XXX.drawImage(gul, 965, 99, 69, 55, -(1/2 * 69 * this.information * 2), -(1/2 * 55 * this.information * 2), 69 * this.information * 2, 55 * this.information * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.


            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "gorePile")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 758, 220, 95, 63, -(1/2 * 95 * this.information), -(1/2 * 63 * this.information), 95 * this.information, 63 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 864, 227, 58, 57, -(1/2 * 58 * this.information), -(1/2 * 57 * this.information), 58 * this.information, 57 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 1007, 263, 31, 47, -(1/2 * 31 * this.information), -(1/2 * 47 * this.information), 31 * this.information, 47 * this.information);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "murderedVardanians")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            if (this.temporary == 1) //poor male A
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 18, 571, 75, 117, -(1/2 * 75 * this.information), -(1/2 * 117 * this.information), 75 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 2) //poor male B
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 18, 702, 75, 117, -(1/2 * 75 * this.information), -(1/2 * 117 * this.information), 75 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 3) //poor female A
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 90, 566, 75, 117, -(1/2 * 75 * this.information), -(1/2 * 117 * this.information), 75 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 4) //poor female B
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 86, 696, 75, 117, -(1/2 * 75 * this.information), -(1/2 * 117 * this.information), 75 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 5) //mid male A
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 231, 569, 75, 117, -(1/2 * 75 * this.information), -(1/2 * 117 * this.information), 75 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 6) //mid male B
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 225, 705, 75, 117, -(1/2 * 75 * this.information), -(1/2 * 117 * this.information), 75 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 7) //mid female A
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 160, 573, 75, 117, -(1/2 * 75 * this.information), -(1/2 * 117 * this.information), 75 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 8) //mid female B
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 170, 702, 55, 117, -(1/2 * 55 * this.information), -(1/2 * 117 * this.information), 55 * this.information, 117 * this.information);
                XXX.restore();
            }
            else if (this.temporary == 9) //ground soldier A
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 765, 394, 76, 104, -(1/2 * 76 * this.information * 1.1), -(1/2 * 104 * this.information * 1.1), 76 * this.information * 1.1, 104 * this.information * 1.1);
                XXX.restore();
            }
            else if (this.temporary == 10) //ground soldier B
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 875, 394, 76, 104, -(1/2 * 76 * this.information * 1.1), -(1/2 * 104 * this.information * 1.1), 76 * this.information * 1.1, 104 * this.information * 1.1);
                XXX.restore();
            }
            else if (this.temporary == 11) //ground soldier C
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 764, 286, 76, 104, -(1/2 * 76 * this.information * 1.1), -(1/2 * 104 * this.information * 1.1), 76 * this.information * 1.1, 104 * this.information * 1.1);
                XXX.restore();
            }
            else if (this.temporary == 12) //ground soldier D
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 925, 308, 76, 90, -(1/2 * 76 * this.information * 1.1), -(1/2 * 90 * this.information * 1.1), 76 * this.information * 1.1, 90 * this.information * 1.1);
                XXX.restore();
            }
            else if (this.temporary == 13) //wall soldier A
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 843, 291, 76, 104, -(1/2 * 76 * this.information * 1.1), -(1/2 * 104 * this.information * 1.1), 76 * this.information * 1.1, 104 * this.information * 1.1);
                XXX.restore();
            }
            else if (this.temporary == 14) //wall soldier B
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 956, 397, 76, 90, -(1/2 * 76 * this.information * 1.1), -(1/2 * 90 * this.information * 1.1), 76 * this.information * 1.1, 90 * this.information * 1.1);
                XXX.restore();
            }
            else if (this.temporary == 15) //WWI german casualty
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 926, 806, 85, 142, -(1/2 * 85 * this.information * 0.9), -(1/2 * 142 * this.information * 0.9), 85 * this.information * 0.9, 142 * this.information * 0.9);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenStadium")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(Math.PI);
            XXX.drawImage(bogg, 21, 4, 766, 496, -(1/2 * 766 * 2), -(1/2 * 496 * 2), 766 * 2, 496 * 2);
            XXX.restore();


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 595), (this.Y - 331), 537, 32, true)); //right wall
                barrierList.push(new Barrier((this.X + 561), (this.Y - 331), 537, 32, true)); //left wall
                barrierList.push(new Barrier((this.X - 595), (this.Y - 331 + 505), 32, 1163, true)); //top wall
                barrierList.push(new Barrier((this.X - 595), (this.Y - 331), 20, 558, true)); //bottom wallR
                barrierList.push(new Barrier((this.X - 595 + 558 + 75), (this.Y - 331), 20, 550, true)); //bottom wallL
                barrierList.push(new Barrier((this.X - 595 + 558 + 75), (this.Y - 464), 149, 9, true)); //entry L
                barrierList.push(new Barrier((this.X - 595 + 558 - 9), (this.Y - 464), 149, 9, true)); //entry R
                barrierList.push(new Barrier((this.X - 595 + 558 + 176), (this.Y + 288), 193, 20, true)); //royal box L
                barrierList.push(new Barrier((this.X - 595 + 558 - 128), (this.Y + 288), 193, 23, true)); //royal box R
                barrierList.push(new Barrier((this.X - 595 + 558 - 128), (this.Y + 288 + 171), 22, 322, true)); //royal box top
                //barrierList.push(new Barrier((this.X - 113.5), (this.Y + 92), 19, 230, true));
                //barrierList.push(new Barrier((this.X - 113.5), (this.Y - 109), 19, 85, true)); //bottom wall
                //barrierList.push(new Barrier((this.X - 113.5 + 142), (this.Y - 109), 19, 88, true)); //bottom wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanCastle1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            //this.massive = true; //this is set by the is_Massive method.

            this.size = this.temporary;
            //DRAWSELF
            this.zIndex = 4;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(0);
            XXX.drawImage(hydra, 1544, 3, 848, 793, -(1/2 * 848 * this.size), -(1/2 * 793 * this.size), 848 * this.size, 793 * this.size);
            XXX.restore();

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X + -415.88979677365296 * this.size), (this.Y + 369.6202486465645 * this.size), 20 * this.size, 833 * this.size, true));
                barrierList.push(new Barrier((this.X + -416.0698352497857 * this.size), (this.Y + -392.19735272209846 * this.size), 20 * this.size, 833 * this.size, true));
                barrierList.push(new Barrier((this.X + 383.81183066298945 * this.size), (this.Y + -392.0235755111703 * this.size), 765 * this.size, 34 * this.size, true));
                barrierList.push(new Barrier((this.X + -417.1091043859824 * this.size), (this.Y + 154.8908321578283 * this.size), 236 * this.size, 34 * this.size, true));
                barrierList.push(new Barrier((this.X + -415.71645321512733 * this.size), (this.Y + -391.11341628464015 * this.size), 236 * this.size, 34 * this.size, true));
                barrierList.push(new Barrier((this.X + -415.7200857976386 * this.size), (this.Y + -156.12056894197167 * this.size), 75 * this.size, 34 * this.size, true));
                barrierList.push(new Barrier((this.X + -416.7200857976386 * this.size), (this.Y + 79.87943105802833 * this.size), 75 * this.size, 34 * this.size, true));

                barrierList.push(new Barrier((this.X + -668.0009117981035 * (this.size / 2.4)), (this.Y + -794.3378020405371 * (this.size / 2.4)), 210 * (this.size / 2.4), 27 * (this.size / 2.4), true));
                barrierList.push(new Barrier((this.X + -836.0009117981035 * (this.size / 2.4)), (this.Y + -611.3378020405371 * (this.size / 2.4)), 27 * (this.size / 2.4), 195 * (this.size / 2.4), true));
                barrierList.push(new Barrier((this.X + 629.6553275855758 * (this.size / 2.4)), (this.Y + -608.8500269366396 * (this.size / 2.4)), 27 * (this.size / 2.4), 195 * (this.size / 2.4), true));
                barrierList.push(new Barrier((this.X + 633.6553275855758 * (this.size / 2.4)), (this.Y + -791.8500269366398 * (this.size / 2.4)), 209 * (this.size / 2.4), 27 * (this.size / 2.4), true));
                barrierList.push(new Barrier((this.X + 638.9796347178308 * (this.size / 2.4)), (this.Y + 579.6711940142286 * (this.size / 2.4)), 27 * (this.size / 2.4), 184 * (this.size / 2.4), true));
                barrierList.push(new Barrier((this.X + 638.9796347178308 * (this.size / 2.4)), (this.Y + 583.6711940142286 * (this.size / 2.4)), 229 * (this.size / 2.4), 27 * (this.size / 2.4), true));
                barrierList.push(new Barrier((this.X + -670.4068077053753 * (this.size / 2.4)), (this.Y + 577.6662912354104 * (this.size / 2.4)), 234 * (this.size / 2.4), 27 * (this.size / 2.4), true));
                barrierList.push(new Barrier((this.X + -835.4068077053753 * (this.size / 2.4)), (this.Y + 578.6662912354104 * (this.size / 2.4)), 27 * (this.size / 2.4), 194 * (this.size / 2.4), true));

                if (this.size >= 1)
                {
                    barrierList.push(new Barrier((this.X + 332.60336489567544* this.size), (this.Y + -243.16325149274644* this.size), 485* this.size, 10* this.size, true));
                    barrierList.push(new Barrier((this.X + -269.25818120207805* this.size), (this.Y + -330.9804484197848* this.size), 10* this.size, 534* this.size, true));
                    barrierList.push(new Barrier((this.X + -267.4720146986947* this.size), (this.Y + 328.71541728009333* this.size), 10* this.size, 534* this.size, true));
                    barrierList.push(new Barrier((this.X + -381.71994922885915* this.size), (this.Y + -103.208369772904* this.size), 22* this.size, 45* this.size, true));
                    barrierList.push(new Barrier((this.X + -382.71994922885915* this.size), (this.Y + 78.791630227096* this.size), 22* this.size, 45* this.size, true));
                    barrierList.push(new Barrier((this.X + -347.71994922885915* this.size), (this.Y + -244.208369772904* this.size), 163* this.size, 10* this.size, true));
                    barrierList.push(new Barrier((this.X + -347.9930189261531* this.size), (this.Y + 78.85130740588647* this.size), 163* this.size, 10* this.size, true));
                }

                if (this.size > 1.5)
                {
                    barrierList.push(new Barrier((this.X + -416.31595152935097 * this.size), (this.Y + -80.83049355028606 * this.size), 40 * this.size, 80 * this.size, true));
                    barrierList.push(new Barrier((this.X + -417.31595152935097 * this.size), (this.Y + 41.169506449713936 * this.size), 40 * this.size, 80 * this.size, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //barrierCreator(this.X, this.Y);

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //507.0879104605792, -91.03240507375267
            //-523.4892397975268, -287.09271423521204

            //DRAWSELF
            if (X > (this.X + 307.8740403679676) - 232 && X < (this.X + 307.8740403679676) && Y > (this.Y + 297.6115969253251) - 590 && Y < (this.Y + 297.6115969253251) || X > (this.X + 127.6920794056532) - 263 && X < (this.X + 127.6920794056532) && Y > (this.Y + 279.61062485348066) - 587 && Y < (this.Y + 279.61062485348066) || X > (this.X - 110.78107779158563) - 200 && X < (this.X - 110.78107779158563) && Y > (this.Y + 305.8353380940607) - 597 && Y < (this.Y + 305.8353380940607) || X > (this.X + 507.0879104605792) - 1030 && X < (this.X + 507.0879104605792) && Y > (this.Y - 91.03240507375267) - 196 && Y < (this.Y - 91.03240507375267))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 979, 1135, 602, 329, -(1/2 * 602 * 2), -(1/2 *329 * 2), 602 * 2, 329 * 2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 979, 1135, 602, 329, -(1/2 * 602 * 2), -(1/2 *329 * 2), 602 * 2, 329 * 2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 983, 806, 602, 329, -(1/2 * 602 * 2), -(1/2 *329 * 2), 602 * 2, 329 * 2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 328), (this.Y - 119), 440, 21, true)); //right wall
                barrierList.push(new Barrier((this.X + 304), (this.Y - 123), 444, 21, true)); //left wall

                barrierList.push(new Barrier((this.X - 113.5), (this.Y - 103), 68, 21, true)); //midUpR
                barrierList.push(new Barrier((this.X - 113.5 + 214), (this.Y - 100), 62, 21, true)); //midUpL

                barrierList.push(new Barrier((this.X - 208), (this.Y - 97), 21, 414, true)); //midhoz

                barrierList.push(new Barrier((this.X - 205), (this.Y - 131), 45, 21, true)); //midDnR
                barrierList.push(new Barrier((this.X - 113.5 + 296), (this.Y - 131), 45, 21, true)); //midDnL

                barrierList.push(new Barrier((this.X - 205), (this.Y - 312), 102, 21, true)); //bottomMidipR
                barrierList.push(new Barrier((this.X - 113.5 + 296), (this.Y - 312), 102, 21, true)); //bottomMidipL

                barrierList.push(new Barrier((this.X - 540), (this.Y - 308), 21, 1080, true)); //bottom

                barrierList.push(new Barrier((this.X - 534), (this.Y - 308), 220, 21, true)); //botR
                barrierList.push(new Barrier((this.X - 534 + 1051), (this.Y - 308), 220, 21, true)); //botL

                barrierList.push(new Barrier((this.X - 534), (this.Y - 88), 21, 210, true)); //botRtop

                barrierList.push(new Barrier((this.X - 534 + 855), (this.Y - 92), 21, 219, true)); //botLtop

                barrierList.push(new Barrier((this.X - 322), (this.Y - 300), 108, 21, true)); //bottom mid right vertical

                barrierList.push(new Barrier((this.X - 322 + 622), (this.Y - 300), 104, 21, true)); //bottom mid left vertical

                barrierList.push(new Barrier((this.X - 320), (this.Y - 0 + 293), 21, 222, true)); //topR
                barrierList.push(new Barrier((this.X - 320 + 410), (this.Y - 0 + 293), 21, 222, true)); //topL

                barrierList.push(new Barrier((this.X - 320 + 410), (this.Y - 0 + 36), 267, 21, true));//topmidleft
                barrierList.push(new Barrier((this.X - 320 + 207), (this.Y - 0 + 36), 273, 21, true));//topmidright

                barrierList.push(new Barrier((this.X - 320 + 220), (this.Y - 0 + 269), 21, 56, true)); //entryR
                barrierList.push(new Barrier((this.X - 320 + 354), (this.Y - 0 + 269), 21, 64, true)); //entryL

                barrierList.push(new Barrier((this.X - 320), (this.Y - 0 + 78), 21, 102, true)); //topishmiddoorR-R
                barrierList.push(new Barrier((this.X - 147), (this.Y - 0 + 78), 21, 50, true)); //topishmiddoorR-L

                barrierList.push(new Barrier((this.X - 320 + 534), (this.Y - 0 + 78), 21, 107, true)); //topishmiddoorL-L
                barrierList.push(new Barrier((this.X - 147 + 255), (this.Y - 0 + 78), 21, 32, true)); //topishmiddoorL-R
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 415.28482419599186) - 847 && X < (this.X + 415.28482419599186) && Y > (this.Y + 314.4329308889155) - 214 && Y < (this.Y + 314.4329308889155) || X > (this.X + 413.04176678976273) - 815 && X < (this.X + 413.04176678976273) && Y > (this.Y + 157.72532805669562) - 310 && Y < (this.Y + 157.72532805669562) || X > (this.X + 417.7449228227297) - 852 && X < (this.X + 417.7449228227297) && Y > (this.Y - 106.02522087985562) - 209 && Y < (this.Y - 106.02522087985562))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 1579, 1137, 474, 340, -(1/2 * 474 * 2), -(1/2 * 340 * 2), 474 * 2, 340 * 2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 1579, 1137, 474, 340, -(1/2 * 474 * 2), -(1/2 * 340 * 2), 474 * 2, 340 * 2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 1574, 797, 474, 340, -(1/2 * 474 * 2), -(1/2 * 340 * 2), 474 * 2, 340 * 2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X - 441.4452611925635), (this.Y - 321.19243736651515), 215, 21, true)); //right wall low low
                barrierList.push(new Barrier((this.X - 442.00833621565334), (this.Y + 91.18758665902578), 220, 21, true)); //right wall hi hi

                barrierList.push(new Barrier((this.X - 418.75463439251416), (this.Y + 37.53173451153452), 70, 21, true)); //right wall hi
                barrierList.push(new Barrier((this.X - 415.84071506396594), (this.Y - 98.74401780763947), 60, 21, true)); //right wall low

                barrierList.push(new Barrier((this.X - 437.61777468693344), (this.Y + 88.8610651446902), 21, 220, true)); //right interior high
                barrierList.push(new Barrier((this.X - 440.6323526275187), (this.Y - 113.54506782785847), 21, 220, true)); //right interior low

                barrierList.push(new Barrier((this.X + 407.3497203885445), (this.Y - 319.81867333856826), 650, 21, true)); //left wall

                barrierList.push(new Barrier((this.X - 442.81432004089766), (this.Y - 321.90573678095143), 21, 855, true)); //bottom wall
                barrierList.push(new Barrier((this.X - 441.0963553481711), (this.Y + 308.3690812156369), 21, 855, true)); //top wall

                barrierList.push(new Barrier((this.X + 192.48213192251387), (this.Y - 203.74477735683058), 394, 21, true)); //deep interior vertical wall

                barrierList.push(new Barrier((this.X + 195.27856604135832), (this.Y + 183.63200152761056), 21, 49, true)); //interior top right door frame
                barrierList.push(new Barrier((this.X + 327.271337136719), (this.Y + 183.51446863377214), 21, 95, true)); //interior top left door frame

                barrierList.push(new Barrier((this.X + 195.68028584698095), (this.Y - 202.1095012535102), 21, 49, true)); //interior bottom right door frame
                barrierList.push(new Barrier((this.X + 325.7785293061115), (this.Y - 203.84860945750506), 21, 95, true)); //interior bottom left door frame

                barrierList.push(new Barrier((this.X - 224.80827395349388), (this.Y + 85.99002066569255), 54, 21, true)); //front interieror top low door frame
                barrierList.push(new Barrier((this.X -224.66702430447822), (this.Y + 211.87348479019192), 110, 21, true)); //front interieror top high door frame

                barrierList.push(new Barrier((this.X - 224.62718911241882), (this.Y - 323.60513100990875), 110, 21, true)); //front interieror bottom low door frame
                barrierList.push(new Barrier((this.X - 226.87296465752752), (this.Y - 141.96278839037086), 46, 21, true)); //front interieror bottom high door frame

            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //if (lKey == true) //this is a helpful tool for getting coords quickly for making buildings: remember barriers build (bottom right -> top left) For adding roof start in the top left and end in the bottom right
            //{
            //    lKey = false;
            //    console.log((X - this.X) + ", " + (Y - this.Y));
            //}

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 155.2514627003411) - 306 && X < (this.X + 155.2514627003411) && Y > (this.Y + 257.36359545717505) - 516 && Y < (this.Y + 257.36359545717505))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 39, 820, 357, 227, -(1/2 * 357 * 1.6), -(1/2 * 227 * 1.6), 357 * 1.6, 227 * 1.6);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 39, 820, 357, 227, -(1/2 * 357 * 1.6), -(1/2 * 227 * 1.6), 357 * 1.6, 227 * 1.6);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 39, 1048, 357, 227, -(1/2 * 357 * 1.6), -(1/2 * 227 * 1.6), 357 * 1.6, 227 * 1.6);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X - 163.2744995084213), (this.Y - 267.126525758812), 525, 21, true)); //right wall

                barrierList.push(new Barrier((this.X + 156.51470208352384), (this.Y - 272.2869274593754), 400, 21, true)); //left wall low
                barrierList.push(new Barrier((this.X + 149.12191709435047), (this.Y + 179.53617218641284), 94, 21, true)); //left wall hi

                barrierList.push(new Barrier((this.X - 163.2744995084213), (this.Y - 267.126525758812), 21, 340, true)); //bottom wall
                barrierList.push(new Barrier((this.X - 166.9973903522532), (this.Y + 253.3024928607706), 21, 340, true)); //top wall

                barrierList.push(new Barrier((this.X - 157.63683638745897), (this.Y - 96.0437442237835), 21, 42, true)); //interior hoz right
                barrierList.push(new Barrier((this.X - 61.299527799201314), (this.Y - 94.62523223082462), 21, 103, true)); //interior hoz mid
                barrierList.push(new Barrier((this.X + 96.07991137173576), (this.Y - 90.06426783090546), 21, 70, true)); //interior hoz left
                barrierList.push(new Barrier((this.X + -18.06751088197143), (this.Y - 262.86797259739114), 175, 25, true)); //interior vert

            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding4")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 259.118124029289) - 521 && X < (this.X + 259.118124029289) && Y > (this.Y + 160.63074919957444) - 321 && Y < (this.Y + 160.63074919957444))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 39, 820, 357, 227, -(1/2 * 357 * 1.6), -(1/2 * 227 * 1.6), 357 * 1.6, 227 * 1.6);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 39, 820, 357, 227, -(1/2 * 357 * 1.6), -(1/2 * 227 * 1.6), 357 * 1.6, 227 * 1.6);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 39, 1048, 357, 227, -(1/2 * 357 * 1.6), -(1/2 * 227 * 1.6), 357 * 1.6, 227 * 1.6);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                var xj = -97;
                var yj = -50;

                barrierList.push(new Barrier((this.X + -178.89459812307632) + xj, (this.Y + -122.35680773497006) + yj, 23, 397, true));
                barrierList.push(new Barrier((this.X + -173.89459812307632) + xj, (this.Y + 201.64319226502994) + yj, 19, 537, true));
                barrierList.push(new Barrier((this.X + -173.89459812307632) + xj, (this.Y + 54.64319226502994) + yj, 19, 193, true));
                barrierList.push(new Barrier((this.X + -177.89459812307632) + xj, (this.Y + -121.35680773497006) + yj, 336, 22, true));
                barrierList.push(new Barrier((this.X + 344.1054018769237) + xj, (this.Y + -115.35680773497006) + yj, 336, 22, true));
                barrierList.push(new Barrier((this.X + 1.105401876923679) + xj, (this.Y + 7.643192265029938) + yj, 107, 19, true));
                barrierList.push(new Barrier((this.X + 2.105401876923679) + xj, (this.Y + -120.35680773497006) + yj, 78, 19, true));
                barrierList.push(new Barrier((this.X + 0.10540187692367908) + xj, (this.Y + 173.64319226502994) + yj, 46, 19, true));
                barrierList.push(new Barrier((this.X + 272.1054018769237) + xj, (this.Y + -116.35680773497006) + yj, 20, 92, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding5")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 201.5921538188959) - 404 && X < (this.X + 201.5921538188959) && Y > (this.Y + 281.7782119737917) - 164 && Y < (this.Y + 281.7782119737917) || X > (this.X - 25.48576382921692) - 169 && X < (this.X - 25.48576382921692) && Y > (this.Y + 126.73334807111496) - 404 && Y < (this.Y + 126.73334807111496))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 466, 815, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -35.26486613261568), (this.Y + 102.7329031680606), 18, 239, true));
                barrierList.push(new Barrier((this.X + -201.6478234070746), (this.Y + -286.37791862627637), 18, 181, true));
                barrierList.push(new Barrier((this.X + -204.6478234070746), (this.Y + -124.37791862627637), 18, 42, true));
                barrierList.push(new Barrier((this.X + -106.64782340707461), (this.Y + -123.37791862627637), 18, 88, true));
                barrierList.push(new Barrier((this.X + -210.95143662700866), (this.Y + 268.54325383451305), 18, 418, true));
                barrierList.push(new Barrier((this.X + 187.04856337299134), (this.Y + 104.54325383451305), 183, 18, true));
                barrierList.push(new Barrier((this.X + -39.309823652163686), (this.Y + -288.18865925164664), 183, 18, true));

                barrierList.push(new Barrier((this.X + -206.2068669464843), (this.Y + -283.47000756502393), 553, 18, true)); //right wall

                barrierList.push(new Barrier((this.X + -35.42477167091329), (this.Y + -59.2379349483499), 178, 18, true));
                barrierList.push(new Barrier((this.X + 23.575228329086713), (this.Y + 200.7620650516501), 86, 18, true));
                barrierList.push(new Barrier((this.X + 23.575228329086713), (this.Y + 101.7620650516501), 43, 18, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding6")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 190.41889302637264) - 161 && X < (this.X + 190.41889302637264) && Y > (this.Y + 278.0333812498907) - 554 && Y < (this.Y + 278.0333812498907) || X > (this.X + 203.21218516523186) - 401 && X < (this.X + 203.21218516523186) && Y > (this.Y - 104.3242106166249) - 175 && Y < (this.Y - 104.3242106166249))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 466, 815, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -207.09835960871987), (this.Y + -285.530104320042), 19, 417, true));
                barrierList.push(new Barrier((this.X + -205.09835960871987), (this.Y + -119.53010432004203), 17, 240, true));
                barrierList.push(new Barrier((this.X + 20.344330000960326), (this.Y + 269.2707546028355), 17, 185, true));
                barrierList.push(new Barrier((this.X + 17.24929370580685), (this.Y + 106.27081577964736), 17, 89, true));
                barrierList.push(new Barrier((this.X + 162.24929370580685), (this.Y + 105.27081577964736), 17, 44, true));

                barrierList.push(new Barrier((this.X + 189.62127478626644), (this.Y + -285.9277933494359), 577, 20, true)); //left wall

                barrierList.push(new Barrier((this.X + 15.823649492807817), (this.Y + -118.72821587644648), 180, 20, true));
                barrierList.push(new Barrier((this.X + -207.5478639043913), (this.Y + -286.17584942490475), 180, 20, true));
                barrierList.push(new Barrier((this.X + 18.909029743375868), (this.Y + 109.52274170785631), 180, 20, true));
                barrierList.push(new Barrier((this.X + -43.457075172492296), (this.Y + -288.6412846537546), 89, 20, true));
                barrierList.push(new Barrier((this.X + -43.457075172492296), (this.Y + -144.6412846537546), 45, 20, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding7")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + -115.79755456029397) - 163 && X < (this.X + -115.79755456029397) && Y > (this.Y + 193.38875951023556) - 393 && Y < (this.Y + 193.38875951023556) || X > (this.X + 276.202445439706) - 552 && X < (this.X + 276.202445439706) && Y > (this.Y + -33.61124048976444) - 168 && Y < (this.Y + -33.61124048976444))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 466, 815, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -120.79755456029397), (this.Y + -35.61124048976444), 18, 181, true));
                barrierList.push(new Barrier((this.X + 104.20244543970603), (this.Y + -36.61124048976444), 18, 184, true));
                barrierList.push(new Barrier((this.X + -288.797554560294), (this.Y + 189.38875951023556), 18, 184, true));
                barrierList.push(new Barrier((this.X + -287.797554560294), (this.Y + -206.61124048976444), 18, 572, true));
                barrierList.push(new Barrier((this.X + -287.797554560294), (this.Y + 25.38875951023556), 18, 88, true));
                barrierList.push(new Barrier((this.X + -143.79755456029397), (this.Y + 23.38875951023556), 18, 38, true));
                barrierList.push(new Barrier((this.X + 268.202445439706), (this.Y + -197.61124048976444), 176, 18, true));
                barrierList.push(new Barrier((this.X + -120.79755456029397), (this.Y + -33.61124048976444), 236, 18, true));
                barrierList.push(new Barrier((this.X + -286.797554560294), (this.Y + -208.61124048976444), 416, 18, true));
                barrierList.push(new Barrier((this.X + 105.76241103815846), (this.Y + -198.08582769160603), 36, 17, true));
                barrierList.push(new Barrier((this.X + 105.76241103815846), (this.Y + -105.08582769160603), 71, 17, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding8")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 275.2823249291623) - 554 && X < (this.X + 275.2823249291623) && Y > (this.Y + 197.45500487529625) - 171 && Y < (this.Y + 197.45500487529625) || X > (this.X + 274.2823249291623) - 163 && X < (this.X + 274.2823249291623) && Y > (this.Y + 196.45500487529625) - 393 && Y < (this.Y + 196.45500487529625))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 463, 1110, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 466, 815, 404, 296, -(1/2 * 404 * 1.5), -(1/2 * 296 * 1.5), 404 * 1.5, 296 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -123.71767507083769), (this.Y + 162.45500487529625), 42, 17, true));
                barrierList.push(new Barrier((this.X + -122.71767507083769), (this.Y + 18.455004875296254), 88, 17, true));
                barrierList.push(new Barrier((this.X + -285.7176750708377), (this.Y + 20.455004875296254), 180, 17, true));
                barrierList.push(new Barrier((this.X + 103.28232492916231), (this.Y + -205.54499512470375), 242, 17, true));
                barrierList.push(new Barrier((this.X + 268.2823249291623), (this.Y + -206.54499512470375), 416, 17, true));
                barrierList.push(new Barrier((this.X + 105.28232492916231), (this.Y + -206.54499512470375), 19, 180, true));
                barrierList.push(new Barrier((this.X + -288.7176750708377), (this.Y + 19.455004875296254), 19, 183, true));
                barrierList.push(new Barrier((this.X + -286.7176750708377), (this.Y + 187.45500487529625), 19, 573, true));
                barrierList.push(new Barrier((this.X + 103.28232492916231), (this.Y + -41.544995124703746), 17, 40, true));
                barrierList.push(new Barrier((this.X + 199.28232492916231), (this.Y + -41.544995124703746), 17, 85, true));
                barrierList.push(new Barrier((this.X + -60.64241123597003), (this.Y + 16.33163223335896), 19, 170, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding9")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //524.7609084368105, 290.8102823078116
            //-525.9918048696964, 78.70717869768669

            //312.29388195410957, 292.9869236737941
            //103.67578404948199, -302.1825300562441

            //-100.09155562348224, 293.82965071951776
            //-319.32180098553454, -304.96752241378135

            //172.07615889443423, 391.3494361214389
            //-175.6298642760612, -273.6250034114819

            //DRAWSELF
            if (X > (this.X + 172.07615889443423) - 347 && X < (this.X + 172.07615889443423) && Y > (this.Y + 391.3494361214389) - 664 && Y < (this.Y + 391.3494361214389) || X > (this.X + -100.09155562348224) - 219 && X < (this.X + -100.09155562348224) && Y > (this.Y + 293.82965071951776) - 597 && Y < (this.Y + 293.82965071951776) || X > (this.X + 312.29388195410957) - 209 && X < (this.X + 312.29388195410957) && Y > (this.Y + 292.9869236737941) - 594 && Y < (this.Y + 292.9869236737941) || X > (this.X + 524.7609084368105) - 1049 && X < (this.X + 524.7609084368105) && Y > (this.Y + 290.8102823078116) - 212 && Y < (this.Y + 290.8102823078116))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 979, 1135, 602, 329, -(1/2 * 602 * 2), -(1/2 *329 * 2), 602 * 2, 329 * 2);
                XXX.restore();

                //churchy addon
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2219, 986, 161, 97, -(1/2 * 161 * 2.7), -(1/2 *97 * 2.35) + 320, 161 * 2.7, 97 * 2.35);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2262, 1161, 101, 250, -(1/2 * 101 * 2.3) -10, -(1/2 *250 * 2.3) + 45, 101 * 2.45, 250 * 2.3);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 1970, 1186, 35, 33, -(1/2 * 35 * 1) - 133, -(1/2 *33 * 1) -88, 35 * 1, 33 * 1);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 1970, 1186, 35, 33, -(1/2 * 35 * 1) + 135, -(1/2 *33 * 1) -88, 35 * 1, 33 * 1);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 979, 1135, 602, 329, -(1/2 * 602 * 2), -(1/2 *329 * 2), 602 * 2, 329 * 2);
                XXX.restore();
                //churchy addon
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2219, 986, 161, 97, -(1/2 * 161 * 2.7), -(1/2 *97 * 2.35) + 320, 161 * 2.7, 97 * 2.35);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 983, 806, 602, 329, -(1/2 * 602 * 2), -(1/2 *329 * 2), 602 * 2, 329 * 2);
                XXX.restore();
                //churchy addon roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2062, 987, 161, 97, -(1/2 * 161 * 2.7), -(1/2 *97 * 2.3) + 320, 161 * 2.7, 97 * 2.3);
                XXX.restore();
                //churchy addon roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2062, 987, 161, 97, -(1/2 * 161 * 2.3), -(1/2 *97 * 2.3) + 142, 161 * 2.3, 97 * 2.3);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 187.96573585123042), (this.Y + 281.3334586692522), 25, 351, true));
                barrierList.push(new Barrier((this.X + -541.0342641487696), (this.Y + 285.3334586692522), 25, 356, true));
                barrierList.push(new Barrier((this.X + -192.03426414876958), (this.Y + 380.3334586692522), 25, 379, true));
                barrierList.push(new Barrier((this.X + -206.03426414876958), (this.Y + 73.3334586692522), 25, 79, true));
                barrierList.push(new Barrier((this.X + 121.96573585123042), (this.Y + 74.3334586692522), 25, 87, true));
                barrierList.push(new Barrier((this.X + -308.85699636914705), (this.Y + -97.56784625307273), 20, 94, true));
                barrierList.push(new Barrier((this.X + 217.14300363085295), (this.Y + -98.56784625307273), 20, 94, true));
                barrierList.push(new Barrier((this.X + -328.69689666313843), (this.Y + -315.085359301439), 24, 239, true));
                barrierList.push(new Barrier((this.X + 93.30310333686157), (this.Y + -316.085359301439), 24, 239, true));
                barrierList.push(new Barrier((this.X + -90.69689666313843), (this.Y + -289.085359301439), 24, 54, true));
                barrierList.push(new Barrier((this.X + 41.30310333686157), (this.Y + -291.085359301439), 24, 54, true));
                barrierList.push(new Barrier((this.X + -75.93214843930309), (this.Y + 292.97053899260754), 24, 139, true));
                barrierList.push(new Barrier((this.X + 141.0678515606969), (this.Y + 206.97053899260754), 108, 69, true));
                barrierList.push(new Barrier((this.X + -205.9321484393031), (this.Y + 204.97053899260754), 106, 64, true));
                barrierList.push(new Barrier((this.X + 142.0678515606969), (this.Y + 301.97053899260754), 106, 43, true));
                barrierList.push(new Barrier((this.X + -192.9321484393031), (this.Y + 299.97053899260754), 106, 51, true));
                barrierList.push(new Barrier((this.X + -319.9321484393031), (this.Y + 193.97053899260754), 97, 19, true));
                barrierList.push(new Barrier((this.X + 301.0678515606969), (this.Y + 190.97053899260754), 97, 19, true));
                barrierList.push(new Barrier((this.X + -319.9321484393031), (this.Y + 67.97053899260754), 54, 19, true));
                barrierList.push(new Barrier((this.X + 302.0678515606969), (this.Y + 63.970538992607544), 54, 19, true));

                barrierList.push(new Barrier((this.X + 305.59675533596874), (this.Y + -291.9987233519969), 377, 24, true));
                barrierList.push(new Barrier((this.X + -328.40324466403126), (this.Y + -294.9987233519969), 384, 24, true));
                barrierList.push(new Barrier((this.X + -538.3317813290378), (this.Y + 66.02838023301501), 229, 24, true));
                barrierList.push(new Barrier((this.X + 514.2367943396075), (this.Y + 65.90033925825855), 229, 24, true));
                barrierList.push(new Barrier((this.X + 183.98406547112245), (this.Y + 95.53446404492979), 34, 24, true));
                barrierList.push(new Barrier((this.X + -204.01593452887755), (this.Y + 94.53446404492979), 34, 24, true));
                barrierList.push(new Barrier((this.X + 318.8709704203011), (this.Y + 62.77455554903554), 23, 221, true));
                barrierList.push(new Barrier((this.X + -539.1290295796989), (this.Y + 67.77455554903554), 23, 221, true));

                barrierList.push(new Barrier((this.X + 89.39957807452811), (this.Y + -291.9431919849367), 48, 25, true));
                barrierList.push(new Barrier((this.X + -110.60042192547189), (this.Y + -290.9431919849367), 48, 25, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding10")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 107.52654430015718) - 214 && X < (this.X + 107.52654430015718) && Y > (this.Y + 243.60217780520316) - 495 && Y < (this.Y + 243.60217780520316))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 2233, 1134, 158, 323, -(1/2 * 158 * 1.75), -(1/2 * 323 * 1.75), 158 * 1.75, 323 * 1.75);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 2233, 1134, 158, 323, -(1/2 * 158 * 1.75), -(1/2 * 323 * 1.75), 158 * 1.75, 323 * 1.75);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 2071, 1133, 158, 323, -(1/2 * 158 * 1.75), -(1/2 * 323 * 1.75), 158 * 1.75, 323 * 1.75);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -122.11371358497126), (this.Y + 249.41908270643444), 15, 90, true));
                barrierList.push(new Barrier((this.X + 24.886286415028735), (this.Y + 248.41908270643444), 15, 98, true));
                barrierList.push(new Barrier((this.X + -122.29148042384804), (this.Y + -261.56606292176366), 20, 245, true));
                barrierList.push(new Barrier((this.X + -123.75030393936413), (this.Y + -262.32007970404993), 525, 18, true));
                barrierList.push(new Barrier((this.X + 105.24969606063587), (this.Y + -262.32007970404993), 525, 18, true));
                barrierList.push(new Barrier((this.X + -48.75030393936413), (this.Y + -190.32007970404993), 18, 100, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding11")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 250.29366999417016) - 506 && X < (this.X + 250.29366999417016) && Y > (this.Y + 111.35213004841535) - 223 && Y < (this.Y + 111.35213004841535))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 2233, 1134, 158, 323, -(1/2 * 158 * 1.75), -(1/2 * 323 * 1.75), 158 * 1.75, 323 * 1.75);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 2233, 1134, 158, 323, -(1/2 * 158 * 1.75), -(1/2 * 323 * 1.75), 158 * 1.75, 323 * 1.75);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 2071, 1133, 158, 323, -(1/2 * 158 * 1.75), -(1/2 * 323 * 1.75), 158 * 1.75, 323 * 1.75);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -265.70633000582984), (this.Y + 102.35213004841535), 20, 525, true));
                barrierList.push(new Barrier((this.X + -264.70633000582984), (this.Y + -123.64786995158465), 20, 527, true));
                barrierList.push(new Barrier((this.X + 168.29366999417016), (this.Y + -46.64786995158465), 97, 22, true));
                barrierList.push(new Barrier((this.X + 243.29366999417016), (this.Y + -119.64786995158465), 243, 20, true));
                barrierList.push(new Barrier((this.X + -264.70633000582984), (this.Y + -121.64786995158465), 88, 17, true));
                barrierList.push(new Barrier((this.X + -264.70633000582984), (this.Y + 24.352130048415347), 99, 17, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding12")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 168.54317121663007) - 339 && X < (this.X + 168.54317121663007) && Y > (this.Y + 113.02374242583392) - 224 && Y < (this.Y + 113.02374242583392))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 1306, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 1306, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 1150, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -182.63423996480014), (this.Y + 106.38456501138853), 16, 361, true));
                barrierList.push(new Barrier((this.X + -181.63423996480014), (this.Y + -120.61543498861147), 16, 363, true));
                barrierList.push(new Barrier((this.X + -109.63423996480014), (this.Y + -52.61543498861147), 100, 19, true));
                barrierList.push(new Barrier((this.X + 160.36576003519986), (this.Y + -121.61543498861147), 96, 19, true));
                barrierList.push(new Barrier((this.X + 160.36576003519986), (this.Y + 29.38456501138853), 96, 19, true));
                barrierList.push(new Barrier((this.X + -181.63423996480014), (this.Y + -122.61543498861147), 244, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding13")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 112.71179067206776) - 225 && X < (this.X + 112.71179067206776) && Y > (this.Y + 171.00482685314955) - 339 && Y < (this.Y + 171.00482685314955))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 1306, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 1306, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 1150, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 104.71179067206776), (this.Y + -179.99517314685045), 363, 18, true));
                barrierList.push(new Barrier((this.X + -122.28820932793224), (this.Y + -182.99517314685045), 363, 18, true));
                barrierList.push(new Barrier((this.X + -123.28820932793224), (this.Y + -181.99517314685045), 23, 98, true));
                barrierList.push(new Barrier((this.X + 32.711790672067764), (this.Y + -182.99517314685045), 23, 89, true));
                barrierList.push(new Barrier((this.X + -51.288209327932236), (this.Y + 88.00482685314955), 23, 99, true));
                barrierList.push(new Barrier((this.X + -124.28820932793224), (this.Y + 160.00482685314955), 21, 244, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding14")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 168.74052803302402) - 339 && X < (this.X + 168.74052803302402) && Y > (this.Y + 111.54791149307493) - 224 && Y < (this.Y + 111.54791149307493))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 1306, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 1306, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 1150, 552, 158, 227, -(1/2 * 158 * 1.75), -(1/2 * 227 * 1.75), 158 * 1.75, 227 * 1.75);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -179.25947196697598), (this.Y + 102.54791149307493), 20, 358, true));
                barrierList.push(new Barrier((this.X + -182.25947196697598), (this.Y + -122.45208850692507), 20, 365, true));
                barrierList.push(new Barrier((this.X + 162.74052803302402), (this.Y + -119.45208850692507), 241, 19, true));
                barrierList.push(new Barrier((this.X + 90.74052803302402), (this.Y + -49.452088506925065), 101, 19, true));
                barrierList.push(new Barrier((this.X + -179.25947196697598), (this.Y + -124.45208850692507), 92, 19, true));
                barrierList.push(new Barrier((this.X + -180.25947196697598), (this.Y + 24.547911493074935), 100, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding15")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 95.45407383155543) - 191 && X < (this.X + 95.45407383155543) && Y > (this.Y + 63.334181093194275) - 128 && Y < (this.Y + 63.334181093194275))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(hydra, 2064, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -105.54592616844457), (this.Y + -73.66581890680573), 18, 84, true));
                barrierList.push(new Barrier((this.X + 26.454073831555434), (this.Y + -74.66581890680573), 18, 78, true));
                barrierList.push(new Barrier((this.X + -106.54592616844457), (this.Y + 57.334181093194275), 18, 211, true));
                barrierList.push(new Barrier((this.X + -105.54592616844457), (this.Y + -73.66581890680573), 147, 16, true));
                barrierList.push(new Barrier((this.X + 90.45407383155543), (this.Y + -73.66581890680573), 147, 14, true));
                barrierList.push(new Barrier((this.X + 956.7608906427004), (this.Y + -4.269618451041424), 17, 84, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding16")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 95.24670278892972) - 191 && X < (this.X + 95.24670278892972) && Y > (this.Y + 62.16489049688698) - 129 && Y < (this.Y + 62.16489049688698))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(hydra, 2064, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -103.75329721107028), (this.Y + -73.83510950311302), 16, 209, true));
                barrierList.push(new Barrier((this.X + -43.753297211070276), (this.Y + -11.835109503113017), 16, 89, true));
                barrierList.push(new Barrier((this.X + -104.75329721107028), (this.Y + 58.16489049688698), 16, 74, true));
                barrierList.push(new Barrier((this.X + 21.246702788929724), (this.Y + 57.16489049688698), 16, 83, true));
                barrierList.push(new Barrier((this.X + 87.24670278892972), (this.Y + -75.83510950311302), 153, 18, true));
                barrierList.push(new Barrier((this.X + -106.75329721107028), (this.Y + -76.83510950311302), 153, 18, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding17")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 63.96013173793108) - 129 && X < (this.X + 63.96013173793108) && Y > (this.Y + 92.8934687298729) - 188 && Y < (this.Y + 92.8934687298729))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(hydra, 2064, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X + 55.57645178898201), (this.Y + -103.72556220711022), 210, 19, true));
                barrierList.push(new Barrier((this.X + -5.423548211017987), (this.Y + -40.725562207110215), 85, 19, true));
                barrierList.push(new Barrier((this.X + -75.42354821101799), (this.Y + -104.72556220711022), 76, 19, true));
                barrierList.push(new Barrier((this.X + -75.42354821101799), (this.Y + 20.274437792889785), 86, 19, true));
                barrierList.push(new Barrier((this.X + -75.42354821101799), (this.Y + 87.27443779288978), 20, 148, true));
                barrierList.push(new Barrier((this.X + -75.42354821101799), (this.Y + -105.72556220711022), 20, 148, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding18")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 63.3949349993718) - 129 && X < (this.X + 63.3949349993718) && Y > (this.Y + 95.18100222003932) - 189 && Y < (this.Y + 95.18100222003932))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 2221, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(hydra, 2064, 964, 156, 116, -(1/2 * 156 * 1.5), -(1/2 * 116 * 1.5), 156 * 1.5, 116 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -75.59424181805025), (this.Y + 90.08083140656254), 16, 152, true));
                barrierList.push(new Barrier((this.X + -76.59424181805025), (this.Y + -105.91916859343746), 16, 152, true));
                barrierList.push(new Barrier((this.X + -74.59424181805025), (this.Y + -105.91916859343746), 210, 20, true));
                barrierList.push(new Barrier((this.X + -13.59424181805025), (this.Y + -44.91916859343746), 87, 17, true));
                barrierList.push(new Barrier((this.X + 56.40575818194975), (this.Y + -107.91916859343746), 87, 17, true));
                barrierList.push(new Barrier((this.X + 57.40575818194975), (this.Y + 29.080831406562538), 76, 17, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding19")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 158.576451788982) - 317 && X < (this.X + 158.576451788982) && Y > (this.Y + 148.27443779288978) - 300 && Y < (this.Y + 148.27443779288978))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 1020, 259, 250, 228, -(1/2 * 250 * 1.5), -(1/2 * 228 * 1.5), 250 * 1.5, 228 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 152.576451788982), (this.Y + -158.72556220711022), 317, 18, true));
                barrierList.push(new Barrier((this.X + -171.423548211018), (this.Y + -160.72556220711022), 317, 18, true));
                barrierList.push(new Barrier((this.X + -170.423548211018), (this.Y + 141.27443779288978), 18, 341, true));
                barrierList.push(new Barrier((this.X + -8.423548211017987), (this.Y + -157.72556220711022), 185, 18, true));
                barrierList.push(new Barrier((this.X + -169.423548211018), (this.Y + -157.72556220711022), 18, 205, true));
                barrierList.push(new Barrier((this.X + -9.423548211017987), (this.Y + 74.27443779288978), 80, 18, true));
                barrierList.push(new Barrier((this.X + 85.57645178898201), (this.Y + -157.72556220711022), 18, 85, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding20")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 158.576451788982) - 317 && X < (this.X + 158.576451788982) && Y > (this.Y + 148.27443779288978) - 300 && Y < (this.Y + 148.27443779288978))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 1020, 259, 250, 228, -(1/2 * 250 * 1.5), -(1/2 * 228 * 1.5), 250 * 1.5, 228 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -9.852734020417302), (this.Y + -157.45163585923729), 183, 19, true));
                barrierList.push(new Barrier((this.X + -168.8527340204173), (this.Y + -157.45163585923729), 16, 204, true));
                barrierList.push(new Barrier((this.X + -9.852734020417302), (this.Y + 75.54836414076271), 83, 20, true));
                barrierList.push(new Barrier((this.X + 85.1472659795827), (this.Y + -158.45163585923729), 19, 85, true));
                barrierList.push(new Barrier((this.X + -170.8527340204173), (this.Y + -158.45163585923729), 315, 19, true));
                barrierList.push(new Barrier((this.X + 153.1472659795827), (this.Y + -156.45163585923729), 315, 19, true));
                barrierList.push(new Barrier((this.X + -170.8527340204173), (this.Y + 140.54836414076271), 17, 340, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding21")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 144.0992112678723) - 292 && X < (this.X + 144.0992112678723) && Y > (this.Y + 155.67268456890724) - 320 && Y < (this.Y + 155.67268456890724))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 1020, 259, 250, 228, -(1/2 * 250 * 1.5), -(1/2 * 228 * 1.5), 250 * 1.5, 228 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -159.36741327355594), (this.Y + -169.75550276207423), 343, 17, true));
                barrierList.push(new Barrier((this.X + -157.36741327355594), (this.Y + -168.75550276207423), 17, 318, true));
                barrierList.push(new Barrier((this.X + -159.36741327355594), (this.Y + 154.24449723792577), 17, 318, true));
                barrierList.push(new Barrier((this.X + -27.36741327355594), (this.Y + -7.755502762074229), 17, 183, true));
                barrierList.push(new Barrier((this.X + 140.63258672644406), (this.Y + -161.75550276207423), 197, 17, true));
                barrierList.push(new Barrier((this.X + -160.36741327355594), (this.Y + -7.755502762074229), 17, 85, true));
                barrierList.push(new Barrier((this.X + 139.63258672644406), (this.Y + 86.24449723792577), 83, 17, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding22")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 144.0992112678723) - 292 && X < (this.X + 144.0992112678723) && Y > (this.Y + 155.67268456890724) - 320 && Y < (this.Y + 155.67268456890724))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 1022, 34, 250, 231, -(1/2 * 250 * 1.5), -(1/2 * 231 * 1.5), 250 * 1.5, 231 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 1020, 259, 250, 228, -(1/2 * 250 * 1.5), -(1/2 * 228 * 1.5), 250 * 1.5, 228 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -157.88697091977792), (this.Y + -171.26970985356957), 85, 19, true));
                barrierList.push(new Barrier((this.X + 75.11302908022208), (this.Y + -9.269709853569566), 19, 85, true));
                barrierList.push(new Barrier((this.X + -158.88697091977792), (this.Y + -10.269709853569566), 19, 185, true));
                barrierList.push(new Barrier((this.X + -161.88697091977792), (this.Y + -35.269709853569566), 204, 19, true));
                barrierList.push(new Barrier((this.X + -157.88697091977792), (this.Y + -172.26970985356957), 19, 317, true));
                barrierList.push(new Barrier((this.X + -159.88697091977792), (this.Y + 151.73029014643043), 19, 317, true));
                barrierList.push(new Barrier((this.X + 140.11302908022208), (this.Y + -170.26970985356957), 341, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding23")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 69.53939524096495) - 144 && X < (this.X + 69.53939524096495) && Y > (this.Y + 155.08092475070862) - 313 && Y < (this.Y + 155.08092475070862))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 752, 398, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -84.46060475903505), (this.Y + -32.91907524929138), 202, 17, true));
                barrierList.push(new Barrier((this.X + -83.46060475903505), (this.Y + -165.91907524929138), 82, 17, true));
                barrierList.push(new Barrier((this.X + -84.46060475903505), (this.Y + -166.91907524929138), 17, 167, true));
                barrierList.push(new Barrier((this.X + -85.46060475903505), (this.Y + 151.08092475070862), 17, 167, true));
                barrierList.push(new Barrier((this.X + 65.53939524096495), (this.Y + -165.91907524929138), 334, 17, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding24")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 69.53939524096495) - 144 && X < (this.X + 69.53939524096495) && Y > (this.Y + 155.08092475070862) - 313 && Y < (this.Y + 155.08092475070862))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 752, 398, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 65.3876861546587), (this.Y + 84.60542192536013), 83, 20, true));
                barrierList.push(new Barrier((this.X + -82.6123138453413), (this.Y + -168.39457807463987), 18, 168, true));
                barrierList.push(new Barrier((this.X + -83.6123138453413), (this.Y + 150.60542192536013), 18, 168, true));
                barrierList.push(new Barrier((this.X + 66.3876861546587), (this.Y + -167.39457807463987), 201, 18, true));
                barrierList.push(new Barrier((this.X + -83.6123138453413), (this.Y + -167.39457807463987), 336, 18, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding25")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 155.5332752665763) - 317 && X < (this.X + 155.5332752665763) && Y > (this.Y + 71.01493107600163) - 148 && Y < (this.Y + 71.01493107600163))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 752, 398, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 82.71901315299965), (this.Y + -84.67725424146829), 19, 85, true));
                barrierList.push(new Barrier((this.X + 149.71901315299965), (this.Y + -84.67725424146829), 168, 19, true));
                barrierList.push(new Barrier((this.X + -170.28098684700035), (this.Y + -87.67725424146829), 168, 19, true));
                barrierList.push(new Barrier((this.X + -168.28098684700035), (this.Y + -85.67725424146829), 19, 202, true));
                barrierList.push(new Barrier((this.X + -170.28098684700035), (this.Y + 66.32274575853171), 17, 337, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding26")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 155.5332752665763) - 317 && X < (this.X + 155.5332752665763) && Y > (this.Y + 71.01493107600163) - 148 && Y < (this.Y + 71.01493107600163))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 754, 273, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 752, 398, 239, 125, -(1/2 * 239 * 1.5), -(1/2 * 125 * 1.5), 239 * 1.5, 125 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -167.0418684439246), (this.Y + -82.22677070779173), 165, 16, true));
                barrierList.push(new Barrier((this.X + 150.9581315560754), (this.Y + -79.22677070779173), 165, 16, true));
                barrierList.push(new Barrier((this.X + -33.04186844392461), (this.Y + 67.77322929220827), 16, 199, true));
                barrierList.push(new Barrier((this.X + -166.0418684439246), (this.Y + -81.22677070779173), 16, 334, true));
                barrierList.push(new Barrier((this.X + -170.0418684439246), (this.Y + 66.77322929220827), 16, 87, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding27")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 147.4470239681168) - 291 && X < (this.X + 147.4470239681168) && Y > (this.Y + 82.06649707318911) - 162 && Y < (this.Y + 82.06649707318911))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 458, 465, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -151.5637097540166), (this.Y + -90.1282329198907), 45, 16, true));
                barrierList.push(new Barrier((this.X + -152.5637097540166), (this.Y + 5.871767080109294), 85, 18, true));
                barrierList.push(new Barrier((this.X + 139.4362902459834), (this.Y + -86.1282329198907), 176, 18, true));
                barrierList.push(new Barrier((this.X + -152.5637097540166), (this.Y + -88.1282329198907), 18, 311, true));
                barrierList.push(new Barrier((this.X + -155.5637097540166), (this.Y + 71.8717670801093), 18, 311, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding28")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 147.4470239681168) - 291 && X < (this.X + 147.4470239681168) && Y > (this.Y + 82.06649707318911) - 162 && Y < (this.Y + 82.06649707318911))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 458, 465, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -156.60305172987864), (this.Y + -89.33097905371505), 180, 16, true));
                barrierList.push(new Barrier((this.X + 136.39694827012136), (this.Y + -89.33097905371505), 85, 16, true));
                barrierList.push(new Barrier((this.X + 136.39694827012136), (this.Y + 44.669020946284945), 45, 16, true));
                barrierList.push(new Barrier((this.X + -156.60305172987864), (this.Y + -89.33097905371505), 16, 310, true));
                barrierList.push(new Barrier((this.X + -158.60305172987864), (this.Y + 72.66902094628495), 16, 310, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding29")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 77.38104168752852) - 157 && X < (this.X + 77.38104168752852) && Y > (this.Y + 140.87736662595216) - 291 && Y < (this.Y + 140.87736662595216))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 458, 465, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -86.6330025814932), (this.Y + -157.4754215498474), 310, 15, true));
                barrierList.push(new Barrier((this.X + 74.3669974185068), (this.Y + -156.4754215498474), 310, 15, true));
                barrierList.push(new Barrier((this.X + -87.6330025814932), (this.Y + -155.4754215498474), 15, 176, true));
                barrierList.push(new Barrier((this.X + 5.366997418506799), (this.Y + 136.5245784501526), 15, 84, true));
                barrierList.push(new Barrier((this.X + -90.6330025814932), (this.Y + 136.5245784501526), 15, 46, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding30")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 77.38104168752852) - 157 && X < (this.X + 77.38104168752852) && Y > (this.Y + 140.87736662595216) - 291 && Y < (this.Y + 140.87736662595216))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 458, 336, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 458, 465, 239, 127, -(1/2 * 239 * 1.5), -(1/2 * 127 * 1.5), 239 * 1.5, 127 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -89.61895831247148), (this.Y + -135.12263337404784), 280, 18, true));
                barrierList.push(new Barrier((this.X + 70.38104168752852), (this.Y + -152.12263337404784), 310, 18, true));
                barrierList.push(new Barrier((this.X + -90.61895831247148), (this.Y + 141.87736662595216), 18, 178, true));
                barrierList.push(new Barrier((this.X + -90.61895831247148), (this.Y + -152.12263337404784), 18, 84, true));
                barrierList.push(new Barrier((this.X + 44.38104168752852), (this.Y + -152.12263337404784), 18, 44, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding31")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 51.88690083067377) - 107 && ArtificialIntelligenceAccess[i].X < (this.X + 51.88690083067377) && ArtificialIntelligenceAccess[i].Y > (this.Y + 46.01944117860512) - 96 && ArtificialIntelligenceAccess[i].Y < (this.Y + 46.01944117860512))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 51.88690083067377) - 107 && X < (this.X + 51.88690083067377) && Y > (this.Y + 46.01944117860512) - 96 && Y < (this.Y + 46.01944117860512))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1) - 4, 140 * 1, 136 * 1);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 47.88690083067377), (this.Y + -53.98055882139488), 110, 12, true));
                barrierList.push(new Barrier((this.X + -61.11309916932623), (this.Y + -54.98055882139488), 110, 12, true));
                barrierList.push(new Barrier((this.X + -60.11309916932623), (this.Y + 43.01944117860512), 12, 117, true));
                barrierList.push(new Barrier((this.X + 2.886900830673767), (this.Y + -55.98055882139488), 12, 55, true));
                barrierList.push(new Barrier((this.X + -61.11309916932623), (this.Y + -56.98055882139488), 12, 30, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding32")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 51.88690083067377) - 107 && ArtificialIntelligenceAccess[i].X < (this.X + 51.88690083067377) && ArtificialIntelligenceAccess[i].Y > (this.Y + 46.01944117860512) - 96 && ArtificialIntelligenceAccess[i].Y < (this.Y + 46.01944117860512))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 51.88690083067377) - 107 && X < (this.X + 51.88690083067377) && Y > (this.Y + 46.01944117860512) - 96 && Y < (this.Y + 46.01944117860512))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1) - 4, 140 * 1, 136 * 1);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -60.53153244603436), (this.Y + -57.13772530762526), 115, 12, true));
                barrierList.push(new Barrier((this.X + 47.46846755396564), (this.Y + -55.13772530762526), 112, 12, true));
                barrierList.push(new Barrier((this.X + -60.53153244603436), (this.Y + -55.13772530762526), 12, 119, true));
                barrierList.push(new Barrier((this.X + -60.53153244603436), (this.Y + 44.86227469237474), 12, 57, true));
                barrierList.push(new Barrier((this.X + 35.46846755396564), (this.Y + 45.86227469237474), 12, 27, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding33")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 51.88690083067377) - 107 && ArtificialIntelligenceAccess[i].X < (this.X + 51.88690083067377) && ArtificialIntelligenceAccess[i].Y > (this.Y + 46.01944117860512) - 96 && ArtificialIntelligenceAccess[i].Y < (this.Y + 46.01944117860512))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 51.88690083067377) - 107 && X < (this.X + 51.88690083067377) && Y > (this.Y + 46.01944117860512) - 96 && Y < (this.Y + 46.01944117860512))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1) - 4, 140 * 1, 136 * 1);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 43.163000143563295), (this.Y + -57.431076035120896), 117, 12, true));
                barrierList.push(new Barrier((this.X + -56.836999856436705), (this.Y + -58.431076035120896), 12, 112, true));
                barrierList.push(new Barrier((this.X + -55.836999856436705), (this.Y + 47.568923964879104), 12, 112, true));
                barrierList.push(new Barrier((this.X + -56.836999856436705), (this.Y + -59.431076035120896), 55, 12, true));
                barrierList.push(new Barrier((this.X + -57.836999856436705), (this.Y + 25.568923964879104), 29, 12, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding34")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 51.88690083067377) - 107 && ArtificialIntelligenceAccess[i].X < (this.X + 51.88690083067377) && ArtificialIntelligenceAccess[i].Y > (this.Y + 46.01944117860512) - 96 && ArtificialIntelligenceAccess[i].Y < (this.Y + 46.01944117860512))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 51.88690083067377) - 107 && X < (this.X + 51.88690083067377) && Y > (this.Y + 46.01944117860512) - 96 && Y < (this.Y + 46.01944117860512))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1), 140 * 1, 136 * 1);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1), -(1/2 * 136 * 1) - 4, 140 * 1, 136 * 1);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 44.605477254380276), (this.Y + 4.770465964820232), 55, 12, true));
                barrierList.push(new Barrier((this.X + -56.394522745619724), (this.Y + -59.22953403517977), 118, 12, true));
                barrierList.push(new Barrier((this.X + -56.394522745619724), (this.Y + -59.22953403517977), 12, 112, true));
                barrierList.push(new Barrier((this.X + -55.394522745619724), (this.Y + 46.77046596482023), 12, 112, true));
                barrierList.push(new Barrier((this.X + 44.605477254380276), (this.Y + -62.22953403517977), 32, 12, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding35")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 78.42930398944463) - 160 && ArtificialIntelligenceAccess[i].X < (this.X + 78.42930398944463) && ArtificialIntelligenceAccess[i].Y > (this.Y + 69.38525144702407) - 144 && ArtificialIntelligenceAccess[i].Y < (this.Y + 69.38525144702407))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 78.42930398944463) - 160 && X < (this.X + 78.42930398944463) && Y > (this.Y + 69.38525144702407) - 144 && Y < (this.Y + 69.38525144702407))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5) - 6, 140 * 1.5, 136 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + -88.57069601055537), (this.Y + -83.61474855297593), 165, 17, true));
                barrierList.push(new Barrier((this.X + 71.42930398944463), (this.Y + -83.61474855297593), 165, 17, true));
                barrierList.push(new Barrier((this.X + -87.57069601055537), (this.Y + 65.38525144702407), 17, 174, true));
                barrierList.push(new Barrier((this.X + 4.429303989444634), (this.Y + -83.61474855297593), 17, 84, true));
                barrierList.push(new Barrier((this.X + -89.57069601055537), (this.Y + -84.61474855297593), 17, 45, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding36")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 78.42930398944463) - 160 && ArtificialIntelligenceAccess[i].X < (this.X + 78.42930398944463) && ArtificialIntelligenceAccess[i].Y > (this.Y + 69.38525144702407) - 144 && ArtificialIntelligenceAccess[i].Y < (this.Y + 69.38525144702407))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 78.42930398944463) - 160 && X < (this.X + 78.42930398944463) && Y > (this.Y + 69.38525144702407) - 144 && Y < (this.Y + 69.38525144702407))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5) - 6, 140 * 1.5, 136 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 72.09534343482119), (this.Y + -81.34218758048792), 165, 17, true));
                barrierList.push(new Barrier((this.X + -89.90465656517881), (this.Y + -84.34218758048792), 168, 17, true));
                barrierList.push(new Barrier((this.X + -88.90465656517881), (this.Y + -83.34218758048792), 17, 177, true));
                barrierList.push(new Barrier((this.X + -87.90465656517881), (this.Y + 68.65781241951208), 17, 82, true));
                barrierList.push(new Barrier((this.X + 44.09534343482119), (this.Y + 66.65781241951208), 17, 45, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding37")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 78.42930398944463) - 160 && ArtificialIntelligenceAccess[i].X < (this.X + 78.42930398944463) && ArtificialIntelligenceAccess[i].Y > (this.Y + 69.38525144702407) - 144 && ArtificialIntelligenceAccess[i].Y < (this.Y + 69.38525144702407))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 78.42930398944463) - 160 && X < (this.X + 78.42930398944463) && Y > (this.Y + 69.38525144702407) - 144 && Y < (this.Y + 69.38525144702407))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5) - 6, 140 * 1.5, 136 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 65.61353003453223), (this.Y + -88.4173897343544), 178, 17, true));
                barrierList.push(new Barrier((this.X + -86.38646996546777), (this.Y + -88.4173897343544), 17, 169, true));
                barrierList.push(new Barrier((this.X + -85.38646996546777), (this.Y + 72.5826102656456), 17, 169, true));
                barrierList.push(new Barrier((this.X + -84.38646996546777), (this.Y + -88.4173897343544), 83, 17, true));
                barrierList.push(new Barrier((this.X + -85.38646996546777), (this.Y + 45.5826102656456), 46, 17, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding38")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 78.42930398944463) - 160 && ArtificialIntelligenceAccess[i].X < (this.X + 78.42930398944463) && ArtificialIntelligenceAccess[i].Y > (this.Y + 69.38525144702407) - 144 && ArtificialIntelligenceAccess[i].Y < (this.Y + 69.38525144702407))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 78.42930398944463) - 160 && X < (this.X + 78.42930398944463) && Y > (this.Y + 69.38525144702407) - 144 && Y < (this.Y + 69.38525144702407))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 53, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5), 140 * 1.5, 136 * 1.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(mimi, 572, 182, 140, 136, -(1/2 * 140 * 1.5), -(1/2 * 136 * 1.5) - 6, 140 * 1.5, 136 * 1.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X + 66.3163258507966), (this.Y + 4.629852882080286), 85, 18, true));
                barrierList.push(new Barrier((this.X + 65.3163258507966), (this.Y + -89.37014711791971), 45, 18, true));
                barrierList.push(new Barrier((this.X + -83.6836741492034), (this.Y + -87.37014711791971), 176, 18, true));
                barrierList.push(new Barrier((this.X + -84.6836741492034), (this.Y + -90.37014711791971), 18, 168, true));
                barrierList.push(new Barrier((this.X + -83.6836741492034), (this.Y + 72.62985288208029), 18, 168, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding39")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 50.168907715307796 * this.temporary) - 100 * this.temporary && ArtificialIntelligenceAccess[i].X < (this.X + 50.168907715307796 * this.temporary) && ArtificialIntelligenceAccess[i].Y > (this.Y + 48.107098850859074 * this.temporary) - 97 * this.temporary && ArtificialIntelligenceAccess[i].Y < (this.Y + 48.107098850859074 * this.temporary))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 50.168907715307796 * this.temporary) - 100 * this.temporary && X < (this.X + 50.168907715307796 * this.temporary) && Y > (this.Y + 48.107098850859074 * this.temporary) - 97 * this.temporary && Y < (this.Y + 48.107098850859074 * this.temporary))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(mimi, 730, 523, 140, 136, -(1/2 * 140 * this.temporary), -(1/2 * 136 * this.temporary), 140 * this.temporary, 136 * this.temporary);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(mimi, 730, 523, 140, 136, -(1/2 * 140 * this.temporary), -(1/2 * 136 * this.temporary), 140 * this.temporary, 136 * this.temporary);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(mimi, 867, 526, 140, 136, -(1/2 * 140 * this.temporary), -(1/2 * 136 * this.temporary), 140 * this.temporary, 136 * this.temporary);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -20.196674159831673 * this.temporary), (this.Y + -57.07740461643016 * this.temporary), 12 * this.temporary, 72 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.19667415983167 * this.temporary), (this.Y + 44.92259538356984 * this.temporary), 12 * this.temporary, 52 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -58.19667415983167 * this.temporary), (this.Y + -40.07740461643016 * this.temporary), 49 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 48.80332584016833 * this.temporary), (this.Y + -51.07740461643016 * this.temporary), 50 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 48.80332584016833 * this.temporary), (this.Y + 11.922595383569842 * this.temporary), 17 * this.temporary, 12 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -56.95075633752458 * this.temporary), (this.Y + -54.868873437505954 * this.temporary), 75 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 45.04924366247542 * this.temporary), (this.Y + 2.131126562494046 * this.temporary), 53 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -41.95075633752458 * this.temporary), (this.Y + 47.131126562494046 * this.temporary), 12 * this.temporary, 50 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 10.917054455612742 * this.temporary), (this.Y + -57.5702602778274 * this.temporary), 11 * this.temporary, 19 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.08294554438726 * this.temporary), (this.Y + -60.5702602778274 * this.temporary), 13 * this.temporary, 55 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 44.60621520002951 * this.temporary), (this.Y + -21.33606228443614 * this.temporary), 80 * this.temporary, 11 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.39378479997049 * this.temporary), (this.Y + -54.33606228443614 * this.temporary), 52 * this.temporary, 11 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -11.39378479997049 * this.temporary), (this.Y + -57.33606228443614 * this.temporary), 10 * this.temporary, 52 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -0.39378479997049 * this.temporary), (this.Y + 50.66393771556386 * this.temporary), 10 * this.temporary, 52 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -34.39378479997049 * this.temporary), (this.Y + 47.66393771556386 * this.temporary), 12 * this.temporary, 22 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -51.982744252360135 * this.temporary), (this.Y + 45.81918585894209 * this.temporary), 12 * this.temporary, 74 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 3.017255747639865 * this.temporary), (this.Y + -56.18081414105791 * this.temporary), 12 * this.temporary, 49 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 47.017255747639865 * this.temporary), (this.Y + -8.180814141057908 * this.temporary), 49 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.982744252360135 * this.temporary), (this.Y + -0.18081414105790827 * this.temporary), 49 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.982744252360135 * this.temporary), (this.Y + -31.18081414105791 * this.temporary), 19 * this.temporary, 12 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding40")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (ArtificialIntelligenceAccess[i].X > (this.X + 50.168907715307796 * this.temporary) - 100 * this.temporary && ArtificialIntelligenceAccess[i].X < (this.X + 50.168907715307796 * this.temporary) && ArtificialIntelligenceAccess[i].Y > (this.Y + 48.107098850859074 * this.temporary) - 97 * this.temporary && ArtificialIntelligenceAccess[i].Y < (this.Y + 48.107098850859074 * this.temporary))
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //DRAWSELF
            if (X > (this.X + 50.168907715307796 * this.temporary) - 100 * this.temporary && X < (this.X + 50.168907715307796 * this.temporary) && Y > (this.Y + 48.107098850859074 * this.temporary) - 97 * this.temporary && Y < (this.Y + 48.107098850859074 * this.temporary))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(mimi, 1022, 526, 140, 136, -(1/2 * 140 * this.temporary), -(1/2 * 136 * this.temporary), 140 * this.temporary, 136 * this.temporary);
                XXX.restore();
                player.land = true;
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(mimi, 1022, 526, 140, 136, -(1/2 * 140 * this.temporary), -(1/2 * 136 * this.temporary), 140 * this.temporary, 136 * this.temporary);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(mimi, 1160, 527, 140, 136, -(1/2 * 140 * this.temporary), -(1/2 * 136 * this.temporary), 140 * this.temporary, 136 * this.temporary);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 51.351938824910576 * this.temporary), (this.Y + -35.92491024787705 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 15.351938824910576 * this.temporary), (this.Y + -55.92491024787705 * this.temporary), 10 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -21.648061175089424 * this.temporary), (this.Y + -53.92491024787705 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -37.648061175089424 * this.temporary), (this.Y + -53.92491024787705 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 47.351938824910576 * this.temporary), (this.Y + 12.075089752122949 * this.temporary), 42 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 29.351938824910576 * this.temporary), (this.Y + 45.07508975212295 * this.temporary), 12 * this.temporary, 31 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.648061175089424 * this.temporary), (this.Y + 44.07508975212295 * this.temporary), 12 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -61.648061175089424 * this.temporary), (this.Y + -43.92491024787705 * this.temporary), 99 * this.temporary, 12 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -35.77343735734485 * this.temporary), (this.Y + -60.161809922011344 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.77343735734485 * this.temporary), (this.Y + -37.161809922011344 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.77343735734485 * this.temporary), (this.Y + -21.161809922011344 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.77343735734485 * this.temporary), (this.Y + 11.838190077988656 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.77343735734485 * this.temporary), (this.Y + 27.838190077988656 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -44.77343735734485 * this.temporary), (this.Y + 48.838190077988656 * this.temporary), 12 * this.temporary, 99 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 43.22656264265515 * this.temporary), (this.Y + 1.8381900779886564 * this.temporary), 59 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 44.22656264265515 * this.temporary), (this.Y + -62.161809922011344 * this.temporary), 34 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 11.226562642655153 * this.temporary), (this.Y + -59.161809922011344 * this.temporary), 12 * this.temporary, 42 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 45.80192771347993 * this.temporary), (this.Y + 12.739707278562037 * this.temporary), 20 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 43.80192771347993 * this.temporary), (this.Y + -38.26029272143796 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 43.80192771347993 * this.temporary), (this.Y + -22.260292721437963 * this.temporary), 11 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 24.801927713479927 * this.temporary), (this.Y + 48.73970727856204 * this.temporary), 11 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.19807228652007 * this.temporary), (this.Y + -59.26029272143796 * this.temporary), 12 * this.temporary, 96 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.19807228652007 * this.temporary), (this.Y + -60.26029272143796 * this.temporary), 57 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -57.19807228652007 * this.temporary), (this.Y + 29.739707278562037 * this.temporary), 32 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -53.19807228652007 * this.temporary), (this.Y + 47.73970727856204 * this.temporary), 12 * this.temporary, 43 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + 28.21869017987501 * this.temporary), (this.Y + 45.78592331558548 * this.temporary), 10 * this.temporary, 14 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -33.78130982012499 * this.temporary), (this.Y + 45.78592331558548 * this.temporary), 10 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -61.78130982012499 * this.temporary), (this.Y + 25.785923315585478 * this.temporary), 10 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.78130982012499 * this.temporary), (this.Y + -55.21407668441452 * this.temporary), 11 * this.temporary, 31 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -58.78130982012499 * this.temporary), (this.Y + -52.21407668441452 * this.temporary), 39 * this.temporary, 11 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 4.218690179875011 * this.temporary), (this.Y + -56.21407668441452 * this.temporary), 11 * this.temporary, 56 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 49.21869017987501 * this.temporary), (this.Y + -54.21407668441452 * this.temporary), 96 * this.temporary, 11 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding41")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            if (this.rotation == Math.PI)
            {
                XXX.rotate(Math.PI);
            }
            else if (this.rotation == 1/2 * Math.PI)
            {
                XXX.rotate(1/2 * Math.PI);
            }
            else if (this.rotation == -1/2 * Math.PI)
            {
                XXX.rotate(-1/2 * Math.PI);
            }
            else
            {
                XXX.rotate(0);
            }
            XXX.drawImage(ruin, 646, 1, 249, 849, -(1/2 * 249 * this.temporary), -(1/2 * 849 * this.temporary), 249 * this.temporary, 849 * this.temporary);
            XXX.restore();

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 30.355064888920424 * this.temporary), (this.Y + -304.2580055835733 * this.temporary), 310 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 66.35506488892042 * this.temporary), (this.Y + -395.2580055835733 * this.temporary), 150 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -64.64493511107958 * this.temporary), (this.Y + -406.2580055835733 * this.temporary), 40 * this.temporary, 150 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -85.64493511107958 * this.temporary), (this.Y + -411.2580055835733 * this.temporary), 50 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -99.64493511107958 * this.temporary), (this.Y + -379.2580055835733 * this.temporary), 50 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -114.64493511107958 * this.temporary), (this.Y + -347.2580055835733 * this.temporary), 50 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -94.64493511107958 * this.temporary), (this.Y + -320.2580055835733 * this.temporary), 40 * this.temporary, 50 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -81.64493511107958 * this.temporary), (this.Y + -285.2580055835733 * this.temporary), 40 * this.temporary, 65 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -59.644935111079576 * this.temporary), (this.Y + -282.2580055835733 * this.temporary), 215 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -81.41500332410396 * this.temporary), (this.Y + 260.44326131708794 * this.temporary), 149 * this.temporary, 180 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.415003324103964 * this.temporary), (this.Y + 93.44326131708794 * this.temporary), 194 * this.temporary, 115 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 259.67648341746917 * this.temporary), (this.Y + -97.96443611073528 * this.temporary), 180 * this.temporary, 150 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 92.67648341746917 * this.temporary), (this.Y + -64.96443611073528 * this.temporary), 115 * this.temporary, 200 * this.temporary, true));

                    barrierList.push(new Barrier((this.X + -260.32351658253083 * this.temporary), (this.Y + -69.96443611073528 * this.temporary), 40 * this.temporary, 260 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -291.32351658253083 * this.temporary), (this.Y + 16.035563889264722 * this.temporary), 40 * this.temporary, 235 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -415.32351658253083 * this.temporary), (this.Y + 48.03556388926472 * this.temporary), 40 * this.temporary, 55 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -380.32351658253083 * this.temporary), (this.Y + 56.03556388926472 * this.temporary), 40 * this.temporary, 90 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -313.32351658253083 * this.temporary), (this.Y + 42.03556388926472 * this.temporary), 40 * this.temporary, 70 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -392.32351658253083 * this.temporary), (this.Y + -95.96443611073528 * this.temporary), 45 * this.temporary, 145 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -405.32351658253083 * this.temporary), (this.Y + -85.96443611073528 * this.temporary), 165 * this.temporary, 45 * this.temporary, true, "cover"));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -409.27838029821623 * this.temporary), (this.Y + -81.23990776499613 * this.temporary), 180 * this.temporary, 145 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -273.27838029821623 * this.temporary), (this.Y + -48.23990776499613 * this.temporary), 110 * this.temporary, 180 * this.temporary, true));

                    barrierList.push(new Barrier((this.X + -4.2783802982157795 * this.temporary), (this.Y + 26.760092235003867 * this.temporary), 40 * this.temporary, 310 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 246.72161970178422 * this.temporary), (this.Y + 61.76009223500387 * this.temporary), 40 * this.temporary, 150 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 363.7216197017842 * this.temporary), (this.Y + -55.23990776499613 * this.temporary), 150 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 246.72161970178422 * this.temporary), (this.Y + -81.23990776499613 * this.temporary), 40 * this.temporary, 160 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 64.72161970178422 * this.temporary), (this.Y + -55.23990776499613 * this.temporary), 40 * this.temporary, 207 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 373.7216197017842 * this.temporary), (this.Y + -85.23990776499613 * this.temporary), 40 * this.temporary, 37 * this.temporary, true, "cover"));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -100.5390452785714 * this.temporary), (this.Y + -407.18347799347976 * this.temporary), 145 * this.temporary, 185 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.53904527857139 * this.temporary), (this.Y + -284.18347799347976 * this.temporary), 190 * this.temporary, 110 * this.temporary, true));

                    barrierList.push(new Barrier((this.X + -72.30011085424348 * this.temporary), (this.Y + 1.838977995910227 * this.temporary), 305 * this.temporary, 50 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -100.30011085424348 * this.temporary), (this.Y + 247.83897799591023 * this.temporary), 120 * this.temporary, 50 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -78.64966458846811 * this.temporary), (this.Y + 359.06660722626066 * this.temporary), 50 * this.temporary, 170 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 37.35033541153189 * this.temporary), (this.Y + 238.06660722626066 * this.temporary), 170 * this.temporary, 54 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 18.350335411531887 * this.temporary), (this.Y + 78.06660722626066 * this.temporary), 190 * this.temporary, 39 * this.temporary, true, "cover"));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding42")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            if (this.rotation == Math.PI)
            {
                XXX.rotate(Math.PI);
            }
            else if (this.rotation == 1/2 * Math.PI)
            {
                XXX.rotate(1/2 * Math.PI);
            }
            else if (this.rotation == -1/2 * Math.PI)
            {
                XXX.rotate(-1/2 * Math.PI);
            }
            else
            {
                XXX.rotate(0);
            }
            XXX.drawImage(ruin, 1364, 480, 136, 389, -(1/2 * 136 * this.temporary), -(1/2 * 389 * this.temporary), 136 * this.temporary, 389 * this.temporary);
            XXX.restore();

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -14.777168492460987 * this.temporary), (this.Y + -135.07407710322923 * this.temporary), 30 * this.temporary, 70 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -35.77716849246099 * this.temporary), (this.Y + -168.07407710322923 * this.temporary), 30 * this.temporary, 70 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.77716849246053 * this.temporary), (this.Y + -148.07407710322923 * this.temporary), 30 * this.temporary, 70 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -21.777168492460987 * this.temporary), (this.Y + -110.07407710322923 * this.temporary), 205 * this.temporary, 60 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 7.222831507539013 * this.temporary), (this.Y + -72.07407710322923 * this.temporary), 210 * this.temporary, 47 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 7.222831507539013 * this.temporary), (this.Y + 131.92592289677077 * this.temporary), 45 * this.temporary, 37 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -46.77716849246099 * this.temporary), (this.Y + 64.92592289677077 * this.temporary), 45 * this.temporary, 12 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -55.77716849246053 * this.temporary), (this.Y + 18.92592289677077 * this.temporary), 45 * this.temporary, 37 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -42.77716849246099 * this.temporary), (this.Y + -85.07407710322923 * this.temporary), 120 * this.temporary, 22 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -151.2930680166828 * this.temporary), (this.Y + -38.24020639258197 * this.temporary), 35 * this.temporary, 325 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -71.29306801668281 * this.temporary), (this.Y + -55.24020639258197 * this.temporary), 20 * this.temporary, 210 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -143.2930680166828 * this.temporary), (this.Y + -55.24020639258197 * this.temporary), 70 * this.temporary, 35 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -180.2930680166828 * this.temporary), (this.Y + -30.240206392581968 * this.temporary), 65 * this.temporary, 35 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -149.2930680166828 * this.temporary), (this.Y + 10.759793607418032 * this.temporary), 45 * this.temporary, 25 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -170.2930680166828 * this.temporary), (this.Y + -5.2402063925819675 * this.temporary), 25 * this.temporary, 270 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -82.29306801668281 * this.temporary), (this.Y + 22.759793607418032 * this.temporary), 20 * this.temporary, 145 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 17.70693198331719 * this.temporary), (this.Y + 33.75979360741803 * this.temporary), 20 * this.temporary, 90 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -178.07635579443013 * this.temporary), (this.Y + 5.3939892578569015 * this.temporary), 30 * this.temporary, 250 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -139.07635579443013 * this.temporary), (this.Y + 26.3939892578569 * this.temporary), 30 * this.temporary, 210 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 45.92364420556987 * this.temporary), (this.Y + -12.606010742143098 * this.temporary), 50 * this.temporary, 95 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -97.07635579443013 * this.temporary), (this.Y + -17.6060107421431 * this.temporary), 25 * this.temporary, 200 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -67.07635579443013 * this.temporary), (this.Y + -38.6060107421431 * this.temporary), 25 * this.temporary, 145 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -106.07635579443013 * this.temporary), (this.Y + -52.6060107421431 * this.temporary), 25 * this.temporary, 145 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 120.92364420556987 * this.temporary), (this.Y + -58.6060107421431 * this.temporary), 35 * this.temporary, 25 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 141.92364420556987 * this.temporary), (this.Y + -34.6060107421431 * this.temporary), 60 * this.temporary, 30 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 106.5265594968132 * this.temporary), (this.Y + 36.720934563021274 * this.temporary), 20 * this.temporary, 35 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -39.473440503186794 * this.temporary), (this.Y + -168.27906543697873 * this.temporary), 315 * this.temporary, 40 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -57.47344050318725 * this.temporary), (this.Y + -155.27906543697873 * this.temporary), 230 * this.temporary, 20 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -58.47344050318725 * this.temporary), (this.Y + 101.72093456302127 * this.temporary), 40 * this.temporary, 75 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -24.473440503186794 * this.temporary), (this.Y + 145.72093456302127 * this.temporary), 25 * this.temporary, 60 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 21.526559496813206 * this.temporary), (this.Y + 125.72093456302127 * this.temporary), 20 * this.temporary, 35 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -14.473440503186794 * this.temporary), (this.Y + -98.27906543697873 * this.temporary), 195 * this.temporary, 35 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 7.526559496813206 * this.temporary), (this.Y + -63.279065436978726 * this.temporary), 150 * this.temporary, 25 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 33.526559496813206 * this.temporary), (this.Y + -102.27906543697873 * this.temporary), 155 * this.temporary, 20 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding43")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            if (this.rotation == Math.PI)
            {
                XXX.rotate(Math.PI);
            }
            else if (this.rotation == 1/2 * Math.PI)
            {
                XXX.rotate(1/2 * Math.PI);
            }
            else if (this.rotation == -1/2 * Math.PI)
            {
                XXX.rotate(-1/2 * Math.PI);
            }
            else
            {
                XXX.rotate(0);
            }
            XXX.drawImage(ruin, 885, 2, 217, 810, -(1/2 * 217 * this.temporary), -(1/2 * 810 * this.temporary), 217 * this.temporary, 810 * this.temporary);
            XXX.restore();

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -67.50081805406853 * this.temporary), (this.Y + -257.53534756203817 * this.temporary), 515 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 34.49918194593192 * this.temporary), (this.Y + -259.53534756203817 * this.temporary), 515 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -99.9693812752048 * this.temporary), (this.Y + 241.32369877247993 * this.temporary), 155 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -109.9693812752048 * this.temporary), (this.Y + 361.32369877247993 * this.temporary), 45 * this.temporary, 225 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 80.0306187247952 * this.temporary), (this.Y + 226.32369877247993 * this.temporary), 180 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -104.08743346150914 * this.temporary), (this.Y + -400.81820981842884 * this.temporary), 180 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -100.08743346150914 * this.temporary), (this.Y + -400.81820981842884 * this.temporary), 45 * this.temporary, 210 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 74.91256653849086 * this.temporary), (this.Y + -395.81820981842884 * this.temporary), 165 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -90.08743346150914 * this.temporary), (this.Y + -257.81820981842884 * this.temporary), 40 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -89.95992671569138 * this.temporary), (this.Y + 221.74076876425806 * this.temporary), 40 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 46.040073284308164 * this.temporary), (this.Y + 223.74076876425806 * this.temporary), 40 * this.temporary, 45 * this.temporary, true, "cover"));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 232.5265594968132 * this.temporary), (this.Y + -107.27906543697873 * this.temporary), 35 * this.temporary, 165 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 233.5265594968132 * this.temporary), (this.Y + 67.72093456302127 * this.temporary), 35 * this.temporary, 165 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -397.47344050318725 * this.temporary), (this.Y + 72.72093456302127 * this.temporary), 35 * this.temporary, 165 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -402.47344050318725 * this.temporary), (this.Y + -108.27906543697873 * this.temporary), 35 * this.temporary, 165 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -413.47344050318725 * this.temporary), (this.Y + -112.27906543697873 * this.temporary), 215 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 366.5265594968132 * this.temporary), (this.Y + -113.27906543697873 * this.temporary), 215 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -265.47344050318725 * this.temporary), (this.Y + -75.27906543697873 * this.temporary), 40 * this.temporary, 528 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -255.47344050318725 * this.temporary), (this.Y + 23.720934563021274 * this.temporary), 40 * this.temporary, 513 * this.temporary, true, "cover"));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -275.4298228030757 * this.temporary), (this.Y + -70.18952352974657 * this.temporary), 50 * this.temporary, 536 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -269.4298228030757 * this.temporary), (this.Y + 34.810476470253434 * this.temporary), 40 * this.temporary, 536 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -396.4298228030757 * this.temporary), (this.Y + 77.81047647025343 * this.temporary), 40 * this.temporary, 161 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 234.5701771969243 * this.temporary), (this.Y + 72.81047647025343 * this.temporary), 40 * this.temporary, 161 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 367.5701771969243 * this.temporary), (this.Y + -102.18952352974657 * this.temporary), 211 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -411.4298228030757 * this.temporary), (this.Y + -100.18952352974657 * this.temporary), 211 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -407.4298228030757 * this.temporary), (this.Y + -111.18952352974657 * this.temporary), 40 * this.temporary, 171 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 226.5701771969243 * this.temporary), (this.Y + -106.18952352974657 * this.temporary), 40 * this.temporary, 171 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -271.15201767506414 * this.temporary), (this.Y + 63.77316120604519 * this.temporary), 25 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -275.15201767506414 * this.temporary), (this.Y + -81.22683879395481 * this.temporary), 25 * this.temporary, 35 * this.temporary, true, "cover"));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -75.93496836280701 * this.temporary), (this.Y + -256.8251181311639 * this.temporary), 510 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 21.065031637192988 * this.temporary), (this.Y + -258.8251181311639 * this.temporary), 510 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 73.85012700281459 * this.temporary), (this.Y + -410.6491582331223 * this.temporary), 180 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -116.14987299718541 * this.temporary), (this.Y + -405.6491582331223 * this.temporary), 180 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -102.14987299718541 * this.temporary), (this.Y + -409.6491582331223 * this.temporary), 41 * this.temporary, 200 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -102.3933137046115 * this.temporary), (this.Y + 367.69110383108773 * this.temporary), 41 * this.temporary, 200 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -91.3933137046115 * this.temporary), (this.Y + 222.69110383108773 * this.temporary), 175 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 66.6066862953885 * this.temporary), (this.Y + 224.69110383108773 * this.temporary), 175 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 54.92797733183852 * this.temporary), (this.Y + -259.3280400189824 * this.temporary), 30 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 46.60140760768354 * this.temporary), (this.Y + 221.13610881514705 * this.temporary), 30 * this.temporary, 35 * this.temporary, true, "cover"));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding44")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            if (this.rotation == Math.PI)
            {
                XXX.rotate(Math.PI);
            }
            else if (this.rotation == 1/2 * Math.PI)
            {
                XXX.rotate(1/2 * Math.PI);
            }
            else if (this.rotation == -1/2 * Math.PI)
            {
                XXX.rotate(-1/2 * Math.PI);
            }
            else
            {
                XXX.rotate(0);
            }
            XXX.drawImage(ruin, 1092, 8, 263, 799, -(1/2 * 263 * this.temporary), -(1/2 * 799 * this.temporary), 263 * this.temporary, 799 * this.temporary);
            XXX.restore();

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 103.03236276580174 * this.temporary), (this.Y + -389.7902489584467 * this.temporary), 225 * this.temporary, 30 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -110.96763723419826 * this.temporary), (this.Y + -399.7902489584467 * this.temporary), 30 * this.temporary, 250 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -96.96763723419826 * this.temporary), (this.Y + -401.7902489584467 * this.temporary), 180 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -72.79279660550583 * this.temporary), (this.Y + -261.45399200554675 * this.temporary), 525 * this.temporary, 45 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 25.207203394494172 * this.temporary), (this.Y + -265.45399200554675 * this.temporary), 510 * this.temporary, 30 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -113.54222106991074 * this.temporary), (this.Y + 365.77797754701623 * this.temporary), 41 * this.temporary, 220 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -112.54222106991074 * this.temporary), (this.Y + 231.77797754701623 * this.temporary), 165 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 67.45777893008926 * this.temporary), (this.Y + 229.77797754701623 * this.temporary), 165 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 33.45777893008926 * this.temporary), (this.Y + 227.77797754701623 * this.temporary), 30 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -72.54222106991074 * this.temporary), (this.Y + 227.77797754701623 * this.temporary), 40 * this.temporary, 41 * this.temporary, true, "cover"));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -404.28533249432076 * this.temporary), (this.Y + -132.17056183932436 * this.temporary), 30 * this.temporary, 240 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -399.28533249432076 * this.temporary), (this.Y + -135.17056183932436 * this.temporary), 240 * this.temporary, 30 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -396.28533249432076 * this.temporary), (this.Y + 62.829438160675636 * this.temporary), 35 * this.temporary, 165 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -269.28533249432076 * this.temporary), (this.Y + -60.170561839324364 * this.temporary), 35 * this.temporary, 525 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -264.28533249432076 * this.temporary), (this.Y + 26.829438160675636 * this.temporary), 35 * this.temporary, 525 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 224.71466750567924 * this.temporary), (this.Y + -103.17056183932436 * this.temporary), 35 * this.temporary, 170 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 365.71466750567924 * this.temporary), (this.Y + -99.17056183932436 * this.temporary), 200 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 229.71466750567924 * this.temporary), (this.Y + -94.17056183932436 * this.temporary), 60 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 233.71466750567924 * this.temporary), (this.Y + 31.829438160675636 * this.temporary), 60 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -266.28533249432076 * this.temporary), (this.Y + 29.829438160675636 * this.temporary), 60 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 365.71466750567924 * this.temporary), (this.Y + -91.17056183932436 * this.temporary), 185 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 235.1980368548775 * this.temporary), (this.Y + 72.48891160064159 * this.temporary), 35 * this.temporary, 165 * this.temporary, true, "cover"));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 159.53084331320952 * this.temporary), (this.Y + 102.89453842467901 * this.temporary), 35 * this.temporary, 245 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 368.5308433132095 * this.temporary), (this.Y + -105.10546157532099 * this.temporary), 245 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -254.46915668679048 * this.temporary), (this.Y + 26.894538424679013 * this.temporary), 32 * this.temporary, 520 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -258.4691566867905 * this.temporary), (this.Y + -69.10546157532099 * this.temporary), 37 * this.temporary, 520 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 231.53084331320952 * this.temporary), (this.Y + -103.10546157532099 * this.temporary), 32 * this.temporary, 170 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -399.4691566867905 * this.temporary), (this.Y + -99.10546157532099 * this.temporary), 32 * this.temporary, 170 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -399.4691566867905 * this.temporary), (this.Y + 67.89453842467901 * this.temporary), 32 * this.temporary, 170 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -402.4691566867905 * this.temporary), (this.Y + -103.10546157532099 * this.temporary), 205 * this.temporary, 32 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -267.4691566867905 * this.temporary), (this.Y + 35.89453842467901 * this.temporary), 40 * this.temporary, 32 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -264.4691566867905 * this.temporary), (this.Y + -82.10546157532099 * this.temporary), 40 * this.temporary, 32 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 227.53084331320952 * this.temporary), (this.Y + -78.10546157532099 * this.temporary), 40 * this.temporary, 32 * this.temporary, true, "cover"));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -136.56334695937403 * this.temporary), (this.Y + 156.08904102367796 * this.temporary), 245 * this.temporary, 30 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -136.56334695937403 * this.temporary), (this.Y + 365.08904102367796 * this.temporary), 30 * this.temporary, 245 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -60.495336569553274 * this.temporary), (this.Y + -270.0970320307433 * this.temporary), 450 * this.temporary, 30 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 28.50466343044718 * this.temporary), (this.Y + -273.0970320307433 * this.temporary), 450 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 61.62150904983719 * this.temporary), (this.Y + 244.13444056202616 * this.temporary), 150 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -137.37849095016236 * this.temporary), (this.Y + 251.13444056202616 * this.temporary), 150 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -113.5898667657084 * this.temporary), (this.Y + -389.10198915404203 * this.temporary), 150 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 71.4101332342916 * this.temporary), (this.Y + -390.10198915404203 * this.temporary), 150 * this.temporary, 41 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -96.5898667657084 * this.temporary), (this.Y + -405.10198915404203 * this.temporary), 41 * this.temporary, 195 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -74.5898667657084 * this.temporary), (this.Y + -255.1019891540418 * this.temporary), 41 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 39.41013323429161 * this.temporary), (this.Y + -254.1019891540418 * this.temporary), 41 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 26.174831808781164 * this.temporary), (this.Y + 174.4440047645612 * this.temporary), 90 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 52.101967847956075 * this.temporary), (this.Y + -274.0814138420801 * this.temporary), 20 * this.temporary, 25 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -83.89803215204392 * this.temporary), (this.Y + -270.0814138420801 * this.temporary), 20 * this.temporary, 25 * this.temporary, true, "cover"));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanBuilding45")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            if (this.rotation == Math.PI)
            {
                XXX.rotate(Math.PI);
            }
            else if (this.rotation == 1/2 * Math.PI)
            {
                XXX.rotate(1/2 * Math.PI);
            }
            else if (this.rotation == -1/2 * Math.PI)
            {
                XXX.rotate(-1/2 * Math.PI);
            }
            else
            {
                XXX.rotate(0);
            }
            XXX.drawImage(ruin, 1358, 2, 138, 468, -(1/2 * 138 * this.temporary), -(1/2 * 468 * this.temporary), 138 * this.temporary, 468 * this.temporary);
            XXX.restore();

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -57.79269306643255 * this.temporary), (this.Y + -231.18592999111752 * this.temporary), 460 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 26.103757053480876 * this.temporary), (this.Y + -229.64630469148005 * this.temporary), 460 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -57.89624294651958 * this.temporary), (this.Y + -231.64630469148005 * this.temporary), 35 * this.temporary, 115 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -59.89624294651958 * this.temporary), (this.Y + 198.35369530851995 * this.temporary), 35 * this.temporary, 120 * this.temporary, true, "cover"));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -228.80306199034976 * this.temporary), (this.Y + -63.02565204257917 * this.temporary), 125 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 188.1969380096507 * this.temporary), (this.Y + -61.02565204257917 * this.temporary), 125 * this.temporary, 40 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -229.80306199034976 * this.temporary), (this.Y + 18.974347957420832 * this.temporary), 40 * this.temporary, 460 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -228.80306199034976 * this.temporary), (this.Y + -65.02565204257917 * this.temporary), 40 * this.temporary, 460 * this.temporary, true, "cover"));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -228.3373785285812 * this.temporary), (this.Y + -62.1809839202233 * this.temporary), 40 * this.temporary, 455 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -227.3373785285812 * this.temporary), (this.Y + 30.819016079776702 * this.temporary), 37 * this.temporary, 455 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -229.3373785285812 * this.temporary), (this.Y + -66.1809839202233 * this.temporary), 130 * this.temporary, 37 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + 190.6626214714188 * this.temporary), (this.Y + -64.1809839202233 * this.temporary), 130 * this.temporary, 37 * this.temporary, true, "cover"));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + 20.592651661685522 * this.temporary), (this.Y + -225.58423753250872 * this.temporary), 450 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -67.40734833831448 * this.temporary), (this.Y + -225.58423753250872 * this.temporary), 450 * this.temporary, 35 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -64.40734833831448 * this.temporary), (this.Y + 193.41576246749128 * this.temporary), 35 * this.temporary, 125 * this.temporary, true, "cover"));
                    barrierList.push(new Barrier((this.X + -63.40734833831448 * this.temporary), (this.Y + -232.58423753250872 * this.temporary), 35 * this.temporary, 125 * this.temporary, true, "cover"));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "venandiBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 50.3367903492757 * this.temporary) - 104 * this.temporary && X < (this.X + 50.3367903492757 * this.temporary) && Y > (this.Y + 46.29432712501148 * this.temporary) - 94 * this.temporary && Y < (this.Y + 46.29432712501148 * this.temporary))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(cef, 1467, 6, 144, 130, -(1/2 * 144 * this.temporary), -(1/2 * 130 * this.temporary), 144 * this.temporary, 130 * this.temporary);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(cef, 1467, 6, 144, 130, -(1/2 * 144 * this.temporary), -(1/2 * 130 * this.temporary), 144 * this.temporary, 130 * this.temporary);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(cef, 1629, 3, 144, 130, -(1/2 * 144 * this.temporary), -(1/2 * 130 * this.temporary) - 2.5, 144 * this.temporary, 130 * this.temporary);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -60.699431771668344 * this.temporary), (this.Y + 39.45057161198929 * this.temporary), 15 * this.temporary, 70 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -59.699431771668344 * this.temporary), (this.Y + -56.54942838801071 * this.temporary), 18 * this.temporary, 120 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 43.300568228331656 * this.temporary), (this.Y + -56.54942838801071 * this.temporary), 109 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.699431771668344 * this.temporary), (this.Y + -55.54942838801071 * this.temporary), 109 * this.temporary, 18 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -54.477160907529594 * this.temporary), (this.Y + -60.65714453003602 * this.temporary), 17 * this.temporary, 107 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.477160907529594 * this.temporary), (this.Y + 43.34285546996398 * this.temporary), 17 * this.temporary, 107 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.477160907529594 * this.temporary), (this.Y + -60.65714453003602 * this.temporary), 117 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 37.522839092470406 * this.temporary), (this.Y + -11.657144530036021 * this.temporary), 72 * this.temporary, 17 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -53.693549148566774 * this.temporary), (this.Y + 43.28695839626016 * this.temporary), 17 * this.temporary, 108 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.693549148566774 * this.temporary), (this.Y + -60.71304160373984 * this.temporary), 71 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -53.693549148566774 * this.temporary), (this.Y + -60.71304160373984 * this.temporary), 18 * this.temporary, 108 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 38.941572915349184 * this.temporary), (this.Y + -45.834517258103006 * this.temporary), 95 * this.temporary, 16 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + 43.597342961108666 * this.temporary), (this.Y + -53.20350578799844 * this.temporary), 108 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.402657038891334 * this.temporary), (this.Y + -54.20350578799844 * this.temporary), 108 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.402657038891334 * this.temporary), (this.Y + 36.79649421200156 * this.temporary), 18 * this.temporary, 117 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -12.402657038891334 * this.temporary), (this.Y + -56.20350578799844 * this.temporary), 18 * this.temporary, 72 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "venandiBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 113.67941731765603 * this.temporary) - 226 * this.temporary && X < (this.X + 113.67941731765603 * this.temporary) && Y > (this.Y + 76.25398626498645 * this.temporary) - 155 * this.temporary && Y < (this.Y + 76.25398626498645 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 1837, 238, 216, 270, -(1/2 * 216 * this.temporary), -(1/2 * 270 * this.temporary), 216 * this.temporary, 270 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 1837, 238, 216, 270, -(1/2 * 216 * this.temporary), -(1/2 * 270 * this.temporary), 216 * this.temporary, 270 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 2062, 233, 216, 283, -(1/2 * 216 * this.temporary), -(1/2 * 283 * this.temporary), 216 * this.temporary, 283 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 75.3717661821168 * this.temporary) - 154 * this.temporary && X < (this.X + 75.3717661821168 * this.temporary) && Y > (this.Y + 112.0059588465374 * this.temporary) - 227 * this.temporary && Y < (this.Y + 112.0059588465374 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 1837, 238, 216, 270, -(1/2 * 216 * this.temporary), -(1/2 * 270 * this.temporary), 216 * this.temporary, 270 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 1837, 238, 216, 270, -(1/2 * 216 * this.temporary), -(1/2 * 270 * this.temporary), 216 * this.temporary, 270 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 2062, 233, 216, 283, -(1/2 * 216 * this.temporary), -(1/2 * 283 * this.temporary), 216 * this.temporary, 283 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -86.21702496987109 * this.temporary), (this.Y + -124.66660365450662 * this.temporary), 19 * this.temporary, 175 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -86.21702496987109 * this.temporary), (this.Y + 105.33339634549338 * this.temporary), 19 * this.temporary, 175 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 70.78297503012897 * this.temporary), (this.Y + -121.66660365450662 * this.temporary), 244 * this.temporary, 19 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -90.21702496987109 * this.temporary), (this.Y + 23.333396345493384 * this.temporary), 99 * this.temporary, 19 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -89.21702496987109 * this.temporary), (this.Y + -123.66660365450662 * this.temporary), 99 * this.temporary, 19 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 25.679417317656032 * this.temporary), (this.Y + 71.25398626498645 * this.temporary), 16 * this.temporary, 96 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -125.32058268234397 * this.temporary), (this.Y + 71.25398626498645 * this.temporary), 17 * this.temporary, 98 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -122.32058268234397 * this.temporary), (this.Y + -88.74601373501355 * this.temporary), 17 * this.temporary, 243 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -123.32058268234397 * this.temporary), (this.Y + -87.74601373501355 * this.temporary), 173 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 106.67941731765603 * this.temporary), (this.Y + -87.74601373501355 * this.temporary), 173 * this.temporary, 17 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -124.18153909885393 * this.temporary), (this.Y + -87.64789595664479 * this.temporary), 17 * this.temporary, 99 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 22.818460901146068 * this.temporary), (this.Y + -87.64789595664479 * this.temporary), 17 * this.temporary, 101 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -124.18153909885393 * this.temporary), (this.Y + -85.64789595664479 * this.temporary), 173 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 106.81846090114601 * this.temporary), (this.Y + -86.64789595664479 * this.temporary), 173 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -119.18153909885393 * this.temporary), (this.Y + 71.35210404335521 * this.temporary), 17 * this.temporary, 238 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -89.0886421573083 * this.temporary), (this.Y + -122.9940411534626 * this.temporary), 17 * this.temporary, 175 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -89.82882502867665 * this.temporary), (this.Y + 106.97254578681896 * this.temporary), 17 * this.temporary, 175 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -89.82882502867665 * this.temporary), (this.Y + -122.02745421318104 * this.temporary), 245 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 70.17117497132341 * this.temporary), (this.Y + -126.02745421318104 * this.temporary), 105 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 69.17117497132341 * this.temporary), (this.Y + 19.972545786818955 * this.temporary), 105 * this.temporary, 17 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "venandiBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 48.62396176559918 * this.temporary) - 99 * this.temporary && X < (this.X + 48.62396176559918 * this.temporary) && Y > (this.Y + 73.98512308584759 * this.temporary) - 155 * this.temporary && Y < (this.Y + 73.98512308584759 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 2310, 355, 207,145, -(1/2 * 207 * this.temporary), -(1/2 * 145 * this.temporary), 207 * this.temporary, 145 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 2310, 355, 207,145, -(1/2 * 207 * this.temporary), -(1/2 * 145 * this.temporary), 207 * this.temporary, 145 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 2310, 204, 207, 145, -(1/2 * 207 * this.temporary), -(1/2 * 145 * this.temporary), 207 * this.temporary, 145 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 73.22549011487541 * this.temporary) - 154 * this.temporary && X < (this.X + 73.22549011487541 * this.temporary) && Y > (this.Y + 48.804914214415476 * this.temporary) - 101 * this.temporary && Y < (this.Y + 48.804914214415476 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 2310, 355, 207,145, -(1/2 * 207 * this.temporary), -(1/2 * 145 * this.temporary), 207 * this.temporary, 145 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 2310, 355, 207,145, -(1/2 * 207 * this.temporary), -(1/2 * 145 * this.temporary), 207 * this.temporary, 145 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 2310, 204, 207, 145, -(1/2 * 207 * this.temporary), -(1/2 * 145 * this.temporary), 207 * this.temporary, 145 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -84.2338330726406 * this.temporary), (this.Y + -60.90662592771696 * this.temporary), 19 * this.temporary, 173 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -85.2338330726406 * this.temporary), (this.Y + 41.09337407228304 * this.temporary), 19 * this.temporary, 173 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -88.2338330726406 * this.temporary), (this.Y + -62.90662592771696 * this.temporary), 123 * this.temporary, 19 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 69.7661669273594 * this.temporary), (this.Y + -5.906625927716959 * this.temporary), 68 * this.temporary, 19 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -5.3760382344008235 * this.temporary), (this.Y + -88.01487691415241 * this.temporary), 15 * this.temporary, 66 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.37603823440082 * this.temporary), (this.Y + 68.98512308584759 * this.temporary), 15 * this.temporary, 121 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -61.37603823440082 * this.temporary), (this.Y + -86.01487691415241 * this.temporary), 168 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 44.62396176559918 * this.temporary), (this.Y + -88.01487691415241 * this.temporary), 171 * this.temporary, 15 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -58.78274433951498 * this.temporary), (this.Y + -85.99981474218657 * this.temporary), 16 * this.temporary, 120 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -59.78274433951498 * this.temporary), (this.Y + 73.00018525781343 * this.temporary), 16 * this.temporary, 60 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 44.21725566048502 * this.temporary), (this.Y + -82.99981474218657 * this.temporary), 170 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -61.78274433951498 * this.temporary), (this.Y + -86.99981474218657 * this.temporary), 175 * this.temporary, 16 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -87.77450988512459 * this.temporary), (this.Y + -60.195085785584524 * this.temporary), 16 * this.temporary, 172 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -89.77450988512459 * this.temporary), (this.Y + 43.804914214415476 * this.temporary), 16 * this.temporary, 172 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 70.22549011487541 * this.temporary), (this.Y + -59.195085785584524 * this.temporary), 122 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -89.77450988512459 * this.temporary), (this.Y + -61.195085785584524 * this.temporary), 67 * this.temporary, 16 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganSandbox")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.zIndex = 1;
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 46, 1680, 288, 196, -(1/2 * 288 * 2.5), -(1/2 * 196 * 2.5), 288 * 2.5, 196 * 2.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 50.3367903492757 * this.temporary) - 104 * this.temporary && X < (this.X + 50.3367903492757 * this.temporary) && Y > (this.Y + 46.29432712501148 * this.temporary) - 94 * this.temporary && Y < (this.Y + 46.29432712501148 * this.temporary))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(cef, 49, 211, 134, 121, -(1/2 * 134 * this.temporary), -(1/2 * 121 * this.temporary), 134 * this.temporary, 121 * this.temporary);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(cef, 49, 211, 134, 121, -(1/2 * 134 * this.temporary), -(1/2 * 121 * this.temporary), 134 * this.temporary, 121 * this.temporary);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(cef, 49, 344, 134, 121, -(1/2 * 134 * this.temporary), -(1/2 * 121 * this.temporary), 134 * this.temporary, 121 * this.temporary);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 44.07783604239421 * this.temporary), (this.Y + -52.40014949267106 * this.temporary), 105 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -59.92216395760579 * this.temporary), (this.Y + -54.40014949267106 * this.temporary), 108 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -58.92216395760579 * this.temporary), (this.Y + 40.59985050732894 * this.temporary), 15 * this.temporary, 69 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -51.199921671087395 * this.temporary), (this.Y + -54.50897126313066 * this.temporary), 16 * this.temporary, 100 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -53.53278340002589 * this.temporary), (this.Y + 44.50023333179661 * this.temporary), 17 * this.temporary, 105 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.53278340002589 * this.temporary), (this.Y + -60.49976666820339 * this.temporary), 17 * this.temporary, 105 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.53278340002589 * this.temporary), (this.Y + -58.49976666820339 * this.temporary), 115 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 39.46721659997411 * this.temporary), (this.Y + -8.499766668203392 * this.temporary), 67 * this.temporary, 17 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -52.807729923228635 * this.temporary), (this.Y + 44.31154074422011 * this.temporary), 15 * this.temporary, 106 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 38.192270076771365 * this.temporary), (this.Y + -55.68845925577989 * this.temporary), 114 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.807729923228635 * this.temporary), (this.Y + -59.68845925577989 * this.temporary), 15 * this.temporary, 108 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -54.807729923228635 * this.temporary), (this.Y + -58.68845925577989 * this.temporary), 68 * this.temporary, 15 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -9.311522570488705 * this.temporary), (this.Y + -54.4645184044266 * this.temporary), 15 * this.temporary, 70 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -58.311522570488705 * this.temporary), (this.Y + 39.5354815955734 * this.temporary), 15 * this.temporary, 115 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 43.688477429511295 * this.temporary), (this.Y + -51.4645184044266 * this.temporary), 105 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -59.311522570488705 * this.temporary), (this.Y + -53.4645184044266 * this.temporary), 105 * this.temporary, 15 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 113.67941731765603 * this.temporary) - 226 * this.temporary && X < (this.X + 113.67941731765603 * this.temporary) && Y > (this.Y + 76.25398626498645 * this.temporary) - 155 * this.temporary && Y < (this.Y + 76.25398626498645 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 14, 475, 199, 284, -(1/2 * 199 * this.temporary), -(1/2 * 284 * this.temporary), 199 * this.temporary, 284 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 14, 475, 199, 284, -(1/2 * 199 * this.temporary), -(1/2 * 284 * this.temporary), 199 * this.temporary, 284 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 11, 756, 199, 284, -(1/2 * 199 * this.temporary + 2 * this.temporary), -(1/2 * 284 * this.temporary), 199 * this.temporary, 284 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 75.3717661821168 * this.temporary) - 154 * this.temporary && X < (this.X + 75.3717661821168 * this.temporary) && Y > (this.Y + 112.0059588465374 * this.temporary) - 227 * this.temporary && Y < (this.Y + 112.0059588465374 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 14, 475, 199, 284, -(1/2 * 199 * this.temporary), -(1/2 * 284 * this.temporary), 199 * this.temporary, 284 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 14, 475, 199, 284, -(1/2 * 199 * this.temporary), -(1/2 * 284 * this.temporary), 199 * this.temporary, 284 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 11, 756, 199, 284, -(1/2 * 199 * this.temporary + 2 * this.temporary), -(1/2 * 284 * this.temporary), 199 * this.temporary, 284 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -84.06194778226245 * this.temporary), (this.Y + 103.67833966168882 * this.temporary), 18 * this.temporary, 170 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -87.06194778226245 * this.temporary), (this.Y + -126.32166033831118 * this.temporary), 18 * this.temporary, 172 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 69.93805221773755 * this.temporary), (this.Y + -122.32166033831118 * this.temporary), 241 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -90.06194778226245 * this.temporary), (this.Y + 15.678339661688824 * this.temporary), 106 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -90.06194778226245 * this.temporary), (this.Y + -126.32166033831118 * this.temporary), 106 * this.temporary, 18 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 14.434498985070604 * this.temporary), (this.Y + 72.6358270599826 * this.temporary), 15 * this.temporary, 105 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -125.5655010149294 * this.temporary), (this.Y + 71.6358270599826 * this.temporary), 16 * this.temporary, 105 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -125.5655010149294 * this.temporary), (this.Y + -86.3641729400174 * this.temporary), 172 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 105.4344989850706 * this.temporary), (this.Y + -85.3641729400174 * this.temporary), 172 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -120.5655010149294 * this.temporary), (this.Y + -86.3641729400174 * this.temporary), 16 * this.temporary, 237 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 20.434498985070604 * this.temporary), (this.Y + -88.3641729400174 * this.temporary), 15 * this.temporary, 104 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -120.5655010149294 * this.temporary), (this.Y + -87.3641729400174 * this.temporary), 15 * this.temporary, 104 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -120.5655010149294 * this.temporary), (this.Y + -87.3641729400174 * this.temporary), 174 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 107.4344989850706 * this.temporary), (this.Y + -89.3641729400174 * this.temporary), 174 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -120.5655010149294 * this.temporary), (this.Y + 70.6358270599826 * this.temporary), 15 * this.temporary, 244 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -85.5655010149294 * this.temporary), (this.Y + -121.3641729400174 * this.temporary), 15 * this.temporary, 173 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -85.5655010149294 * this.temporary), (this.Y + 108.6358270599826 * this.temporary), 15 * this.temporary, 173 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -86.5655010149294 * this.temporary), (this.Y + -118.3641729400174 * this.temporary), 238 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 71.4344989850706 * this.temporary), (this.Y + -120.3641729400174 * this.temporary), 103 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 72.4344989850706 * this.temporary), (this.Y + 21.635827059982603 * this.temporary), 103 * this.temporary, 15 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 73.22549011487541 * this.temporary) - 154 * this.temporary && X < (this.X + 73.22549011487541 * this.temporary) && Y > (this.Y + 48.804914214415476 * this.temporary) - 101 * this.temporary && Y < (this.Y + 48.804914214415476 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 233, 243, 140, 197, -(1/2 * 140 * this.temporary), -(1/2 * 197 * this.temporary), 140 * this.temporary, 197 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 233, 243, 140, 197, -(1/2 * 140 * this.temporary), -(1/2 * 197 * this.temporary), 140 * this.temporary, 197 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 235, 438, 140, 197, -(1/2 * 140 * this.temporary), -(1/2 * 197 * this.temporary), 140 * this.temporary, 197 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 48.62396176559918 * this.temporary) - 99 * this.temporary && X < (this.X + 48.62396176559918 * this.temporary) && Y > (this.Y + 73.98512308584759 * this.temporary) - 155 * this.temporary && Y < (this.Y + 73.98512308584759 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 233, 243, 140, 197, -(1/2 * 140 * this.temporary), -(1/2 * 197 * this.temporary), 140 * this.temporary, 197 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 233, 243, 140, 197, -(1/2 * 140 * this.temporary), -(1/2 * 197 * this.temporary), 140 * this.temporary, 197 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 235, 438, 140, 197, -(1/2 * 140 * this.temporary), -(1/2 * 197 * this.temporary), 140 * this.temporary, 197 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -59.59554555651812 * this.temporary), (this.Y + 73.21399509819776 * this.temporary), 15 * this.temporary, 70 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -59.59554555651812 * this.temporary), (this.Y + -84.78600490180224 * this.temporary), 15 * this.temporary, 120 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.59554555651812 * this.temporary), (this.Y + -84.78600490180224 * this.temporary), 173 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 43.40445444348188 * this.temporary), (this.Y + -85.78600490180224 * this.temporary), 173 * this.temporary, 15 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -84.5736491603343 * this.temporary), (this.Y + -60.844700872702106 * this.temporary), 18 * this.temporary, 168 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -85.5736491603343 * this.temporary), (this.Y + 45.155299127297894 * this.temporary), 18 * this.temporary, 173 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -87.5736491603343 * this.temporary), (this.Y + -60.844700872702106 * this.temporary), 118 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 73.4263508396657 * this.temporary), (this.Y + -10.844700872702106 * this.temporary), 71 * this.temporary, 15 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -87.54363470567841 * this.temporary), (this.Y + -60.00932210049814 * this.temporary), 15 * this.temporary, 171 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -87.54363470567841 * this.temporary), (this.Y + 42.99067789950186 * this.temporary), 15 * this.temporary, 171 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -88.54363470567841 * this.temporary), (this.Y + -63.00932210049814 * this.temporary), 72 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 70.45636529432159 * this.temporary), (this.Y + -58.00932210049814 * this.temporary), 117 * this.temporary, 15 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -9.565501014929396 * this.temporary), (this.Y + -89.3641729400174 * this.temporary), 15 * this.temporary, 69 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -58.565501014929396 * this.temporary), (this.Y + 69.6358270599826 * this.temporary), 15 * this.temporary, 119 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -58.565501014929396 * this.temporary), (this.Y + -87.3641729400174 * this.temporary), 174 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 45.434498985070604 * this.temporary), (this.Y + -88.3641729400174 * this.temporary), 174 * this.temporary, 15 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding4")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 191 * this.temporary) - 380 * this.temporary && X < (this.X + 191 * this.temporary) && Y > (this.Y + 139.5 * this.temporary) - 287 * this.temporary && Y < (this.Y + 139.5 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 621, 287, 341, 444, -(1/2 * 341 * this.temporary), -(1/2 * 444 * this.temporary), 341 * this.temporary, 444 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 621, 287, 341, 444, -(1/2 * 341 * this.temporary), -(1/2 * 444 * this.temporary), 341 * this.temporary, 444 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 259, 639, 341, 444, -(1/2 * 341 * this.temporary - 10 * this.temporary), -(1/2 * 444 * this.temporary + 6 * this.temporary), 341 * this.temporary, 444 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 143.74449525182172 * this.temporary) - 287 * this.temporary && X < (this.X + 143.74449525182172 * this.temporary) && Y > (this.Y + 191 * this.temporary) - 384 * this.temporary && Y < (this.Y + 191 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 621, 287, 341, 444, -(1/2 * 341 * this.temporary), -(1/2 * 444 * this.temporary), 341 * this.temporary, 444 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 621, 287, 341, 444, -(1/2 * 341 * this.temporary), -(1/2 * 444 * this.temporary), 341 * this.temporary, 444 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 259, 639, 341, 444, -(1/2 * 341 * this.temporary - 10 * this.temporary), -(1/2 * 444 * this.temporary + 6 * this.temporary), 341 * this.temporary, 444 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -149.69817936773234 * this.temporary), (this.Y + 27.661007624429658 * this.temporary), 17 * this.temporary, 162 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 49.30182063226766 * this.temporary), (this.Y + 28.661007624429658 * this.temporary), 15 * this.temporary, 107 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -18.698179367732337 * this.temporary), (this.Y + -54.33899237557034 * this.temporary), 99 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -18.698179367732337 * this.temporary), (this.Y + -201.33899237557034 * this.temporary), 104 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -150.69817936773234 * this.temporary), (this.Y + -199.33899237557034 * this.temporary), 104 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -151.69817936773234 * this.temporary), (this.Y + -61.33899237557034 * this.temporary), 261 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -148.69817936773234 * this.temporary), (this.Y + -198.33899237557034 * this.temporary), 15 * this.temporary, 306 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 139.30182063226766 * this.temporary), (this.Y + -195.33899237557034 * this.temporary), 399 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -147.69817936773234 * this.temporary), (this.Y + 186.66100762442966 * this.temporary), 15 * this.temporary, 299 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -200.3990185583334 * this.temporary), (this.Y + 3.0356308630530293 * this.temporary), 15 * this.temporary, 104 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -55.39901855833341 * this.temporary), (this.Y + 4.035630863053029 * this.temporary), 15 * this.temporary, 100 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 27.60098144166659 * this.temporary), (this.Y + -153.96436913694697 * this.temporary), 101 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 29.60098144166659 * this.temporary), (this.Y + -10.96436913694697 * this.temporary), 161 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -201.3990185583334 * this.temporary), (this.Y + 135.03563086305303 * this.temporary), 15 * this.temporary, 106 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.39901855833341 * this.temporary), (this.Y + 135.03563086305303 * this.temporary), 15 * this.temporary, 260 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -199.3990185583334 * this.temporary), (this.Y + -154.96436913694697 * this.temporary), 302 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 186.6009814416666 * this.temporary), (this.Y + -151.96436913694697 * this.temporary), 302 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -196.3990185583334 * this.temporary), (this.Y + -154.96436913694697 * this.temporary), 15 * this.temporary, 400 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 96.78379254291076 * this.temporary), (this.Y + -149.6786943771126 * this.temporary), 15 * this.temporary, 103 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 98.78379254291076 * this.temporary), (this.Y + -19.678694377112606 * this.temporary), 15 * this.temporary, 103 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -44.21620745708924 * this.temporary), (this.Y + -19.678694377112606 * this.temporary), 15 * this.temporary, 98 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -43.62432825070164 * this.temporary), (this.Y + 52.5224230811059 * this.temporary), 102 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -44.62432825070164 * this.temporary), (this.Y + -150.4775769188941 * this.temporary), 160 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 183.37567174929836 * this.temporary), (this.Y + -149.4775769188941 * this.temporary), 305 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -201.62432825070164 * this.temporary), (this.Y + -151.4775769188941 * this.temporary), 15 * this.temporary, 260 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -201.62432825070164 * this.temporary), (this.Y + -151.4775769188941 * this.temporary), 305 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -201.62432825070164 * this.temporary), (this.Y + 139.5224230811059 * this.temporary), 15 * this.temporary, 395 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -154.3133021593776 * this.temporary), (this.Y + -44.91644400905534 * this.temporary), 16 * this.temporary, 102 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 2.6866978406224007 * this.temporary), (this.Y + -44.91644400905534 * this.temporary), 102 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 2.6866978406224007 * this.temporary), (this.Y + 97.08355599094466 * this.temporary), 102 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -13.3133021593776 * this.temporary), (this.Y + -45.91644400905534 * this.temporary), 16 * this.temporary, 163 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 134.6866978406224 * this.temporary), (this.Y + 96.08355599094466 * this.temporary), 103 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 137.6866978406224 * this.temporary), (this.Y + -197.91644400905534 * this.temporary), 255 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -154.3133021593776 * this.temporary), (this.Y + 184.08355599094466 * this.temporary), 16 * this.temporary, 302 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -150.3133021593776 * this.temporary), (this.Y + -201.91644400905534 * this.temporary), 16 * this.temporary, 302 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -156.3133021593776 * this.temporary), (this.Y + -202.91644400905534 * this.temporary), 402 * this.temporary, 16 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding5")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 109.67 * this.temporary) - 225 * this.temporary && X < (this.X + 109.67 * this.temporary) && Y > (this.Y + 156.279 * this.temporary) - 318 * this.temporary && Y < (this.Y + 156.279 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 610, 740, 370, 281, -(1/2 * 370 * this.temporary), -(1/2 * 281 * this.temporary), 370 * this.temporary, 281 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 610, 740, 370, 281, -(1/2 * 370 * this.temporary), -(1/2 * 281 * this.temporary), 370 * this.temporary, 281 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 1456, 239, 370, 281, -(1/2 * 370 * this.temporary), -(1/2 * 281 * this.temporary), 370 * this.temporary, 281 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 160.91571100249894 * this.temporary) - 320 * this.temporary && X < (this.X + 160.91571100249894 * this.temporary) && Y > (this.Y + 109.46952519353545 * this.temporary) - 227 * this.temporary && Y < (this.Y + 109.46952519353545 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 610, 740, 370, 281, -(1/2 * 370 * this.temporary), -(1/2 * 281 * this.temporary), 370 * this.temporary, 281 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 610, 740, 370, 281, -(1/2 * 370 * this.temporary), -(1/2 * 281 * this.temporary), 370 * this.temporary, 281 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(cef, 1456, 239, 370, 281, -(1/2 * 370 * this.temporary), -(1/2 * 281 * this.temporary), 370 * this.temporary, 281 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -169.08428899750106 * this.temporary), (this.Y + -128.53047480646455 * this.temporary), 103 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -168.08428899750106 * this.temporary), (this.Y + 14.469525193535446 * this.temporary), 103 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -169.08428899750106 * this.temporary), (this.Y + -125.53047480646455 * this.temporary), 15 * this.temporary, 338 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -167.08428899750106 * this.temporary), (this.Y + 104.46952519353545 * this.temporary), 15 * this.temporary, 338 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 23.915711002498938 * this.temporary), (this.Y + -66.53047480646455 * this.temporary), 189 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 152.91571100249894 * this.temporary), (this.Y + -120.53047480646455 * this.temporary), 241 * this.temporary, 15 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -66.64710282504939 * this.temporary), (this.Y + -39.20470194158952 * this.temporary), 15 * this.temporary, 189 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -126.64710282504939 * this.temporary), (this.Y + 152.79529805841048 * this.temporary), 15 * this.temporary, 104 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 18.352897174950613 * this.temporary), (this.Y + 154.79529805841048 * this.temporary), 15 * this.temporary, 99 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -122.64710282504939 * this.temporary), (this.Y + -168.20470194158952 * this.temporary), 15 * this.temporary, 244 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -125.64710282504939 * this.temporary), (this.Y + -167.20470194158952 * this.temporary), 334 * this.temporary, 15 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 105.35289717495061 * this.temporary), (this.Y + -165.20470194158952 * this.temporary), 334 * this.temporary, 15 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 27.45446799970705 * this.temporary), (this.Y + -169.264128951128 * this.temporary), 16 * this.temporary, 100 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -119.54553200029295 * this.temporary), (this.Y + -169.264128951128 * this.temporary), 16 * this.temporary, 100 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -119.54553200029295 * this.temporary), (this.Y + -169.264128951128 * this.temporary), 338 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 110.45446799970705 * this.temporary), (this.Y + -168.264128951128 * this.temporary), 338 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -125.54553200029295 * this.temporary), (this.Y + 24.735871048872013 * this.temporary), 16 * this.temporary, 192 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -120.54553200029295 * this.temporary), (this.Y + 152.735871048872 * this.temporary), 16 * this.temporary, 242 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + 152.36116411413286 * this.temporary), (this.Y + -118.57850348231386 * this.temporary), 100 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 152.36116411413286 * this.temporary), (this.Y + 25.421496517686137 * this.temporary), 101 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -39.63883588586714 * this.temporary), (this.Y + -123.57850348231386 * this.temporary), 193 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -168.63883588586714 * this.temporary), (this.Y + -117.57850348231386 * this.temporary), 238 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -169.63883588586714 * this.temporary), (this.Y + -119.57850348231386 * this.temporary), 16 * this.temporary, 336 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -167.63883588586714 * this.temporary), (this.Y + 108.42149651768614 * this.temporary), 16 * this.temporary, 336 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding6")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 64.30159525962335 * this.temporary) - 114 * this.temporary && X < (this.X + 64.30159525962335 * this.temporary) && Y > (this.Y + 53.44783899921458 * this.temporary) - 108 * this.temporary && Y < (this.Y + 53.44783899921458 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 229, 335, 145, 41, -(1/2 * 145 * this.temporary), -(1/2 * 41 * this.temporary), 145 * this.temporary, 41 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 229, 335, 145, 41, -(1/2 * 145 * this.temporary), -(1/2 * 41 * this.temporary), 145 * this.temporary, 41 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(cef, 440, 438, 144, 66, -(1/2 * 144 * this.temporary), -(1/2 * 66 * this.temporary), 144 * this.temporary, 66 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 50.613190235727416 * this.temporary) - 107 * this.temporary && X < (this.X + 50.613190235727416 * this.temporary) && Y > (this.Y + 57.64800051605562 * this.temporary) - 119 * this.temporary && Y < (this.Y + 57.64800051605562 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 0)
                    {
                        XXX.rotate(0);
                    }
                    else if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    XXX.drawImage(cef, 229, 335, 145, 41, -(1/2 * 145 * this.temporary), -(1/2 * 41 * this.temporary), 145 * this.temporary, 41 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 0)
                    {
                        XXX.rotate(0);
                    }
                    else if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    XXX.drawImage(cef, 229, 335, 145, 41, -(1/2 * 145 * this.temporary), -(1/2 * 41 * this.temporary), 145 * this.temporary, 41 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 0)
                    {
                        XXX.rotate(0);
                    }
                    else if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    XXX.drawImage(cef, 440, 438, 144, 66, -(1/2 * 144 * this.temporary), -(1/2 * 66 * this.temporary), 144 * this.temporary, 66 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 43.613190235727416 * this.temporary), (this.Y + -22.351999483944383 * this.temporary), 43 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.386809764272584 * this.temporary), (this.Y + -21.351999483944383 * this.temporary), 43 * this.temporary, 16 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -20.698404740376645 * this.temporary), (this.Y + -60.55216100078542 * this.temporary), 16 * this.temporary, 41 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -20.698404740376645 * this.temporary), (this.Y + 42.44783899921458 * this.temporary), 16 * this.temporary, 41 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -20.698404740376645 * this.temporary), (this.Y + -60.55216100078542 * this.temporary), 16 * this.temporary, 41 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -20.698404740376645 * this.temporary), (this.Y + 42.44783899921458 * this.temporary), 16 * this.temporary, 41 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + 43.613190235727416 * this.temporary), (this.Y + -22.351999483944383 * this.temporary), 43 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -60.386809764272584 * this.temporary), (this.Y + -21.351999483944383 * this.temporary), 43 * this.temporary, 16 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding7") //cephrian nomad building 1
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 19.14770782768028 * this.temporary) - 45 * this.temporary && X < (this.X + 19.14770782768028 * this.temporary) && Y > (this.Y + 19.14770782768028 * this.temporary) - 45 * this.temporary && Y < (this.Y + 19.14770782768028 * this.temporary))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(gnoll, 52, 156, 80, 75, -(1/2 * 80 * this.temporary), -(1/2 * 75 * this.temporary), 80 * this.temporary, 75 * this.temporary);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(gnoll, 52, 156, 80, 75, -(1/2 * 80 * this.temporary), -(1/2 * 75 * this.temporary), 80 * this.temporary, 75 * this.temporary);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(gnoll, 51, 66, 80, 75, -(1/2 * 80 * this.temporary), -(1/2 * 75 * this.temporary), 80 * this.temporary, 75 * this.temporary);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -24.587625475600362 * this.temporary), (this.Y + 21.23730268070358 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -26.587625475600362 * this.temporary), (this.Y + -30.76269731929642 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -34.58762547560036 * this.temporary), (this.Y + -30.76269731929642 * this.temporary), 60 * this.temporary, 15 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -28.23168963007629 * this.temporary), (this.Y + 16.701281386529445 * this.temporary), 15 * this.temporary, 56 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -32.23168963007629 * this.temporary), (this.Y + -29.298718613470555 * this.temporary), 56 * this.temporary, 11 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 20.76831036992371 * this.temporary), (this.Y + -29.298718613470555 * this.temporary), 56 * this.temporary, 11 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 21.250255608116277 * this.temporary), (this.Y + -26.22824138609576 * this.temporary), 55 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -31.749744391883723 * this.temporary), (this.Y + -26.22824138609576 * this.temporary), 55 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -31.749744391883723 * this.temporary), (this.Y + -34.22824138609576 * this.temporary), 15 * this.temporary, 60 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -28.85229217231972 * this.temporary), (this.Y + 18.530989963299362 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -28.85229217231972 * this.temporary), (this.Y + -28.469010036700638 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 15.147707827680279 * this.temporary), (this.Y + -28.469010036700638 * this.temporary), 55 * this.temporary, 13 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding8") //cephrian nomad building 2
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 19.14770782768028 * this.temporary) - 45 * this.temporary && X < (this.X + 19.14770782768028 * this.temporary) && Y > (this.Y + 19.14770782768028 * this.temporary) - 45 * this.temporary && Y < (this.Y + 19.14770782768028 * this.temporary))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(gnoll, 135, 154, 80, 75, -(1/2 * 80 * this.temporary), -(1/2 * 75 * this.temporary), 80 * this.temporary, 75 * this.temporary);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(gnoll, 135, 154, 80, 75, -(1/2 * 80 * this.temporary), -(1/2 * 75 * this.temporary), 80 * this.temporary, 75 * this.temporary);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                if (this.rotation == Math.PI)
                {
                    XXX.rotate(Math.PI);
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    XXX.rotate(1/2 * Math.PI);
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    XXX.rotate(-1/2 * Math.PI);
                }
                else
                {
                    XXX.rotate(0);
                }
                XXX.drawImage(gnoll, 133, 62, 80, 75, -(1/2 * 80 * this.temporary), -(1/2 * 75 * this.temporary), 80 * this.temporary, 75 * this.temporary);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -24.587625475600362 * this.temporary), (this.Y + 21.23730268070358 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -26.587625475600362 * this.temporary), (this.Y + -30.76269731929642 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -34.58762547560036 * this.temporary), (this.Y + -30.76269731929642 * this.temporary), 60 * this.temporary, 15 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -28.23168963007629 * this.temporary), (this.Y + 16.701281386529445 * this.temporary), 15 * this.temporary, 56 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -32.23168963007629 * this.temporary), (this.Y + -29.298718613470555 * this.temporary), 56 * this.temporary, 11 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 20.76831036992371 * this.temporary), (this.Y + -29.298718613470555 * this.temporary), 56 * this.temporary, 11 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 21.250255608116277 * this.temporary), (this.Y + -26.22824138609576 * this.temporary), 55 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -31.749744391883723 * this.temporary), (this.Y + -26.22824138609576 * this.temporary), 55 * this.temporary, 10 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -31.749744391883723 * this.temporary), (this.Y + -34.22824138609576 * this.temporary), 15 * this.temporary, 60 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -28.85229217231972 * this.temporary), (this.Y + 18.530989963299362 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -28.85229217231972 * this.temporary), (this.Y + -28.469010036700638 * this.temporary), 10 * this.temporary, 55 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 15.147707827680279 * this.temporary), (this.Y + -28.469010036700638 * this.temporary), 55 * this.temporary, 13 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cephrianBuilding9") //zetian building 1
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 44.62066220761335 * this.temporary) - 95 * this.temporary && X < (this.X + 44.62066220761335 * this.temporary) && Y > (this.Y + 81.36850578844314 * this.temporary) - 162 * this.temporary && Y < (this.Y + 81.36850578844314 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(raed, 44, 599, 219, 175, -(1/2 * 219 * this.temporary), -(1/2 * 175 * this.temporary), 219 * this.temporary, 175 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);

                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(raed, 44, 599, 219, 175, -(1/2 * 219 * this.temporary), -(1/2 * 175 * this.temporary), 219 * this.temporary, 175 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == 1/2 * Math.PI)
                    {
                        XXX.rotate(1/2 * Math.PI);
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        XXX.rotate(-1/2 * Math.PI);
                    }
                    XXX.drawImage(raed, 308, 602, 219, 175, -(1/2 * 219 * this.temporary), -(1/2 * 175 * this.temporary), 219 * this.temporary, 175 * this.temporary);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 81.36850578844314 * this.temporary) - 162 * this.temporary && X < (this.X + 81.36850578844314 * this.temporary) && Y > (this.Y + 44.62066220761335 * this.temporary) - 95 * this.temporary && Y < (this.Y + 44.62066220761335 * this.temporary))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(raed, 44, 599, 219, 175, -(1/2 * 219 * this.temporary), -(1/2 * 175 * this.temporary), 219 * this.temporary, 175 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(raed, 44, 599, 219, 175, -(1/2 * 219 * this.temporary), -(1/2 * 175 * this.temporary), 219 * this.temporary, 175 * this.temporary);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    if (this.rotation == Math.PI)
                    {
                        XXX.rotate(Math.PI);
                    }
                    else
                    {
                        XXX.rotate(0);
                    }
                    XXX.drawImage(raed, 308, 602, 219, 175, -(1/2 * 219 * this.temporary), -(1/2 * 175 * this.temporary), 219 * this.temporary, 175 * this.temporary);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -71.63149421155686 * this.temporary), (this.Y + 35.62066220761335 * this.temporary), 20 * this.temporary, 140 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -72.63149421155686 * this.temporary), (this.Y + -58.37933779238665 * this.temporary), 20 * this.temporary, 140 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -72.63149421155686 * this.temporary), (this.Y + -58.37933779238665 * this.temporary), 110 * this.temporary, 16 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 48.368505788443144 * this.temporary), (this.Y + -57.37933779238665 * this.temporary), 35 * this.temporary, 21 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 59.368505788443144 * this.temporary), (this.Y + 11.62066220761335 * this.temporary), 40 * this.temporary, 21 * this.temporary, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 11.67047751462087 * this.temporary), (this.Y + -77.53670091203821 * this.temporary), 15 * this.temporary, 40 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -55.32952248537913 * this.temporary), (this.Y + -75.53670091203821 * this.temporary), 20 * this.temporary, 35 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -57.32952248537913 * this.temporary), (this.Y + -63.536700912038214 * this.temporary), 135 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 38.67047751462087 * this.temporary), (this.Y + -67.53670091203821 * this.temporary), 140 * this.temporary, 17 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.32952248537913 * this.temporary), (this.Y + 58.463299087961786 * this.temporary), 17 * this.temporary, 110 * this.temporary, true));
                }
                else if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 39.58017180376919 * this.temporary), (this.Y + -73.30533562881465 * this.temporary), 129 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -56.41982819623081 * this.temporary), (this.Y + -73.30533562881465 * this.temporary), 139 * this.temporary, 18 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -53.41982819623081 * this.temporary), (this.Y + -75.30533562881465 * this.temporary), 18 * this.temporary, 110 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -55.41982819623081 * this.temporary), (this.Y + 59.694664371185354 * this.temporary), 18 * this.temporary, 45 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 19.58017180376919 * this.temporary), (this.Y + 51.694664371185354 * this.temporary), 23 * this.temporary, 35 * this.temporary, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -55.11137299245456 * this.temporary), (this.Y + 39.65620188167668 * this.temporary), 20 * this.temporary, 130 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -68.11137299245456 * this.temporary), (this.Y + -54.34379811832332 * this.temporary), 20 * this.temporary, 140 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + 57.88862700754544 * this.temporary), (this.Y + -53.34379811832332 * this.temporary), 110 * this.temporary, 20 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -81.11137299245456 * this.temporary), (this.Y + -50.34379811832332 * this.temporary), 40 * this.temporary, 20 * this.temporary, true));
                    barrierList.push(new Barrier((this.X + -73.11137299245456 * this.temporary), (this.Y + 23.65620188167668 * this.temporary), 30 * this.temporary, 20 * this.temporary, true));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "vardanianFence")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 30 + 50 * this.temporary;

            //DRAWSELF
            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.abrir = false;
                this.cerrar = false;
                this.abierto = false;
                this.tac = 0;

                this.primed = true;
                this.clave = "vardanFenceGate" + Math.random();
            }

            this.zIndex = 1;
            if (this.information == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 777, 92, 200, 30, -(1/2 * 200 * this.temporary), -(1/2 * 30 * this.temporary), 200 * this.temporary, 30 * this.temporary);
                XXX.restore();
            }
            else if (this.information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 818, 49, 200, 30, -(1/2 * 200 * this.temporary), -(1/2 * 30 * this.temporary), 200 * this.temporary, 30 * this.temporary);
                XXX.restore();
            }
            else
            {
                if (this.abrir == true)
                {
                    this.tac += 1;
                    if (this.tac < 20)
                    {
                        this.abierto = false;
                    }
                    else if (this.tac < 40)
                    {
                        this.abierto = "media";
                    }
                    else
                    {
                        this.abierto = true;
                        this.abrir = false;
                        this.tac = 0;
                        this.primed = true;
                    }
                }
                else if (this.cerrar == true)
                {
                    this.tac += 1;
                    if (this.tac < 20)
                    {
                        this.abierto = true;
                    }
                    else if (this.tac < 40)
                    {
                        this.abierto = "media";
                    }
                    else
                    {
                        this.abierto = false;
                        this.cerrar = false;
                        this.tac = 0;
                        this.primed = true;
                    }
                }

                if (this.abierto == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pill, 943, 384, 115, 52, -(1/2 * 115 * this.temporary), -(1/2 * 52 * this.temporary), 115 * this.temporary, 52 * this.temporary);
                    XXX.restore();
                }
                else if (this.abierto == "media")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pill, 940, 437, 115, 56, -(1/2 * 115 * this.temporary), -(1/2 * 56 * this.temporary), 115 * this.temporary, 56 * this.temporary);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pill, 938, 497, 115, 87, -(1/2 * 115 * this.temporary), -(1/2 * 87 * this.temporary), 115 * this.temporary, 87 * this.temporary);
                    XXX.restore();
                }

            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.information == 0)
                {
                    if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -44.01498489471851 * this.temporary), (this.Y + -5.671560407834477 * this.temporary), 10 * this.temporary, 87 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == 1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -4.8482201670412906 * this.temporary), (this.Y + -45.81371594016673 * this.temporary), 90 * this.temporary, 10 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -4.8482201670412906 * this.temporary), (this.Y + -45.81371594016673 * this.temporary), 90 * this.temporary, 10 * this.temporary, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -44.01498489471851 * this.temporary), (this.Y + -5.671560407834477 * this.temporary), 10 * this.temporary, 87 * this.temporary, true, "phase"));
                    }
                }
                else if (this.information == 1)
                {
                    if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -82.19854373001726 * this.temporary), (this.Y + -5.783359996639774 * this.temporary), 10 * this.temporary, 166 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == 1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -5.521281409135554 * this.temporary), (this.Y + -82.59006121387938 * this.temporary), 166 * this.temporary, 10 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -5.521281409135554 * this.temporary), (this.Y + -82.59006121387938 * this.temporary), 166 * this.temporary, 10 * this.temporary, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -82.19854373001726 * this.temporary), (this.Y + -5.783359996639774 * this.temporary), 10 * this.temporary, 166 * this.temporary, true, "phase"));
                    }
                }
            }

            if (this.information > 1)
            {
                if (this.abierto == false)
                {
                    if (this.primed == true)
                    {
                        this.primed = false;
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }

                        if (this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -45.22476943873335 * this.temporary), (this.Y + -7.935814277967438 * this.temporary), 15 * this.temporary, 91 * this.temporary, true, this.clave));
                        }
                        else if (this.rotation == 1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -8.678247784031555 * this.temporary), (this.Y + -46.81697967137734 * this.temporary), 93 * this.temporary, 13 * this.temporary, true, this.clave));
                        }
                        else if (this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -8.678247784031555 * this.temporary), (this.Y + -46.81697967137734 * this.temporary), 93 * this.temporary, 13 * this.temporary, true, this.clave));
                        }
                        else
                        {
                            barrierList.push(new Barrier((this.X + -45.22476943873335 * this.temporary), (this.Y + -7.935814277967438 * this.temporary), 15 * this.temporary, 91 * this.temporary, true, this.clave));
                        }

                    }
                }
                else if (this.abierto == true)
                {
                    if (this.primed == true)
                    {
                        this.primed = false;
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }

                        if (this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + 32.18086268688785 * this.temporary), (this.Y + -31.863642918804544 * this.temporary), 38 * this.temporary, 13 * this.temporary, true, this.clave));
                            barrierList.push(new Barrier((this.X + -44.81913731311215 * this.temporary), (this.Y + -34.863642918804544 * this.temporary), 38 * this.temporary, 13 * this.temporary, true, this.clave));
                        }
                        else if (this.rotation == 1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -30.773306360759307 * this.temporary), (this.Y + -45.95877272884536 * this.temporary), 11 * this.temporary, 37 * this.temporary, true, this.clave));
                            barrierList.push(new Barrier((this.X + -33.77330636075931 * this.temporary), (this.Y + 34.04122727115464 * this.temporary), 12 * this.temporary, 37 * this.temporary, true, this.clave));
                        }
                        else if (this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -7.226858852664009 * this.temporary), (this.Y + 37.089703621997614 * this.temporary), 12 * this.temporary, 41 * this.temporary, true, this.clave));
                            barrierList.push(new Barrier((this.X + -4.226858852664009 * this.temporary), (this.Y + -43.910296378002386 * this.temporary), 13 * this.temporary, 41 * this.temporary, true, this.clave));
                        }
                        else
                        {
                            barrierList.push(new Barrier((this.X + -48.29473329690518 * this.temporary), (this.Y + -6.922517948187306 * this.temporary), 39 * this.temporary, 12 * this.temporary, true, this.clave));
                            barrierList.push(new Barrier((this.X + 32.70526670309482 * this.temporary), (this.Y + -5.922517948187306 * this.temporary), 41 * this.temporary, 12 * this.temporary, true, this.clave));
                        }
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45 + 45 * this.temporary;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                if (this.information > 1)
                {
                    if (this.abierto == false && this.abrir == false && this.cerrar == false)
                    {
                        this.abrir = true;
                    }
                    else if (this.abierto != "media" && this.abrir == false && this.cerrar == false)
                    {
                        this.cerrar = true;
                    }
                }
                else
                {
                    dClick = true;
                }
                this.activate = false;
            }
        }
        else if (this.type == "bars")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            this.zIndex = 1;
            if (this.information == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 796, 169, 232, 30, -(1/2 * 232 * this.temporary), -(1/2 * 30 * this.temporary), 232 * this.temporary, 30 * this.temporary);
                XXX.restore();
            }
            else if (this.information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 562, 242, 232, 30, -(1/2 * 232 * this.temporary), -(1/2 * 30 * this.temporary), 232 * this.temporary, 30 * this.temporary);
                XXX.restore();
            }
            else
            {

            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.information == 0)
                {
                    if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -57.98509994690539 * this.temporary), (this.Y + -11.057213336156565 * this.temporary), 20 * this.temporary, 115 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == 1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -12.893190727743786 * this.temporary), (this.Y + -60.03644279044238 * this.temporary), 116 * this.temporary, 20 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -12.893190727743786 * this.temporary), (this.Y + -60.03644279044238 * this.temporary), 116 * this.temporary, 20 * this.temporary, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -57.98509994690539 * this.temporary), (this.Y + -11.057213336156565 * this.temporary), 20 * this.temporary, 115 * this.temporary, true, "phase"));
                    }
                }
                else if (this.information == 1)
                {
                    if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -116.21147668879712 * this.temporary), (this.Y + -9.69624672838836 * this.temporary), 20 * this.temporary, 225 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == 1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -9.896466895646881 * this.temporary), (this.Y + -116.70801034205942 * this.temporary), 225 * this.temporary, 20 * this.temporary, true, "phase"));
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -9.896466895646881 * this.temporary), (this.Y + -116.70801034205942 * this.temporary), 225 * this.temporary, 20 * this.temporary, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -116.21147668879712 * this.temporary), (this.Y + -9.69624672838836 * this.temporary), 20 * this.temporary, 225 * this.temporary, true, "phase"));
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            if (X > (this.X - 117) && X < (this.X - 117) + 230 && Y > (this.Y - 105) && Y < (this.Y - 105) + 209)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 330, 492, 130, 119, -(1/2 * 130 * 1.75), -(1/2 * 119 * 1.75), 130 * 1.75, 119 * 1.75);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 330, 492, 130, 119, -(1/2 * 130 * 1.75), -(1/2 * 119 * 1.75), 130 * 1.75, 119 * 1.75);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 464, 489, 126, 122, -(1/2 * 126 * 1.725), -(1/2 * 122 * 1.725), 126 * 1.725, 122 * 1.725);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 117), (this.Y - 105), 209, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 98), (this.Y - 105), 209, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 113.5), (this.Y + 92), 19, 230, true)); //top wall
                barrierList.push(new Barrier((this.X - 113.5), (this.Y - 109), 19, 85, true)); //bottom wall
                barrierList.push(new Barrier((this.X - 113.5 + 142), (this.Y - 109), 19, 88, true)); //bottom wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            if (X > (this.X - 117) && X < (this.X - 117) + 230 && Y > (this.Y - 105) && Y < (this.Y - 105) + 209)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 330, 492, 130, 119, -(1/2 * 130 * 1.75), -(1/2 * 119 * 1.75), 130 * 1.75, 119 * 1.75);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 330, 492, 130, 119, -(1/2 * 130 * 1.75), -(1/2 * 119 * 1.75), 130 * 1.75, 119 * 1.75);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 464, 489, 126, 122, -(1/2 * 126 * 1.725), -(1/2 * 122 * 1.725), 126 * 1.725, 122 * 1.725);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 117), (this.Y - 105), 209, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 98), (this.Y - 105), 209, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 113.5), (this.Y - 109), 19, 230, true)); //bottom wall
                barrierList.push(new Barrier((this.X - 113.5), (this.Y + 92), 19, 88, true)); //top wall
                barrierList.push(new Barrier((this.X - 113.5 + 145), (this.Y + 92), 19, 85, true)); //top wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            if (X > (this.X - 210) && X < (this.X - 210) + 215 && Y > (this.Y - 164) && Y < (this.Y - 164) + 330)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(theng, 422, 16, 180, 120, -(1/2 * 180 * 1.95), -(1/2 * 12 * 1.95), 180 * 1.95, 120 * 1.95);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(theng, 422, 16, 180, 120, -(1/2 * 180 * 1.95), -(1/2 * 12 * 1.95), 180 * 1.95, 120 * 1.95);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(theng, 410, 359, 183, 122, -(1/2 * 183 * 1.95), -(1/2 * 122 * 1.95 - 101), 183 * 1.95, 122 * 1.95);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 15), (this.Y - 167), 333, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 215), (this.Y - 167), 19, 200, true)); //bottom wall
                barrierList.push(new Barrier((this.X - 215), (this.Y + 149), 19, 200, true)); //top wall
                barrierList.push(new Barrier((this.X - 215), (this.Y - 167), 150, 19, true)); //right wall
                barrierList.push(new Barrier((this.X - 215), (this.Y + 45), 105, 19, true)); //right wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding4")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            if (X > (this.X - 248) && X < (this.X - 248) + 245 && Y > (this.Y - 257) && Y < (this.Y - 257) + 513 || X > (this.X - 5) && X < (this.X - 5) + 245 && Y > (this.Y - 122) && Y < (this.Y - 122) + 228)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 67, 365, 255, 263, -(1/2 * 255 * 2), -(1/2 * 263 * 2), 255 * 2, 263 * 2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 67, 365, 255, 263, -(1/2 * 255 * 2), -(1/2 * 263 * 2), 255 * 2, 263 * 2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 162, 99, 254, 258, -(1/2 * 254 * 1.98 + 4), -(1/2 * 258 * 1.98 - 2), 254 * 1.98, 258 * 1.98);
                XXX.restore();
            }

            //barrierList.push(new Barrier(this.X + 3, this.Y -122, 228, 245, false)); // a square that covers the entire building
            //barrierList.push(new Barrier(this.X -248, this.Y -257, 513, 245, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 248), (this.Y - 257), 513, 19, true)); //right wall
                barrierList.push(new Barrier((this.X - 14), (this.Y - 257), 227, 19, true)); //middle wall
                barrierList.push(new Barrier((this.X - 14), (this.Y + 30), 227, 19, true)); //middle wall
                barrierList.push(new Barrier((this.X - 248), (this.Y + 30), 19, 95, true)); //t inner wall
                barrierList.push(new Barrier((this.X - 95), (this.Y + 30), 19, 95, true)); //t inner wall
                barrierList.push(new Barrier((this.X - 248), (this.Y - 48), 19, 95, true)); //b inner wall
                barrierList.push(new Barrier((this.X - 95), (this.Y - 48), 19, 95, true)); //b inner wall
                barrierList.push(new Barrier((this.X - 248), (this.Y - 257), 19, 245, true)); //bottom wall
                barrierList.push(new Barrier((this.X - 248), (this.Y + 240), 19, 245, true)); //top wall
                barrierList.push(new Barrier((this.X + 3), (this.Y + 90), 19, 112, true)); //sm top wall
                barrierList.push(new Barrier((this.X + 172), (this.Y + 90), 19, 80, true)); //sm top wall
                barrierList.push(new Barrier((this.X + 3), (this.Y - 122), 19, 245, true)); //sm bottom wall
                barrierList.push(new Barrier((this.X + 233), (this.Y - 122), 228, 19, true)); //sm right wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding5")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            if (X > (this.X - 110) && X < (this.X - 110) + 215 && Y > (this.Y - 164) && Y < (this.Y - 164) + 330)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(theng, 422, 16, 180, 120, -(1/2 * 180 * 1.95), -(1/2 * 120 * 1.95), 180 * 1.95, 120 * 1.95);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(theng, 422, 16, 180, 120, -(1/2 * 180 * 1.95), -(1/2 * 120 * 1.95), 180 * 1.95, 120 * 1.95);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(theng, 410, 359, 183, 122, -(1/2 * 183 * 1.95), -(1/2 * 122 * 1.95), 183 * 1.95, 122 * 1.95);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 115), (this.Y - 167), 333, 19, true)); //right wall n
                barrierList.push(new Barrier((this.X - 95), (this.Y - 167), 19, 200, true)); //bottom wall
                barrierList.push(new Barrier((this.X - 95), (this.Y + 149), 19, 200, true)); //top wall
                barrierList.push(new Barrier((this.X + 94), (this.Y + 16), 150, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 94), (this.Y -167), 125, 19, true)); //right wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding6")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            this.size = this.temporary;

            //DRAWSELF
            if (X > (this.X + 126.789680312786 * this.size) - 266 * this.size && X < (this.X + 126.789680312786 * this.size) && Y > (this.Y + -31.154568185304015 * this.size) - 110 * this.size && Y < (this.Y + -31.154568185304015 * this.size) || X > (this.X + 122.48516771850791 * this.size) - 243 * this.size && X < (this.X + 122.48516771850791 * this.size) && Y > (this.Y + 10.175537050505682 * this.size) - 69 * this.size && Y < (this.Y + 10.175537050505682 * this.size) || X > (this.X + 89.48516771850791 * this.size) - 174 * this.size && X < (this.X + 89.48516771850791 * this.size) && Y > (this.Y + 75.17553705050568 * this.size) - 80 * this.size && Y < (this.Y + 75.17553705050568 * this.size) || X > (this.X + 43.48516771850791 * this.size) - 93 * this.size && X < (this.X + 43.48516771850791 * this.size) && Y > (this.Y + 129.17553705050568 * this.size) - 66 * this.size && Y < (this.Y + 129.17553705050568 * this.size))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 608, 286, 176, 166, -(1/2 * 176 * 1.8 * this.size), -(1/2 * 166 * 1.8 * this.size), 176 * 1.8 * this.size, 166 * 1.8 * this.size);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 608, 286, 176, 166, -(1/2 * 176 * 1.8 * this.size), -(1/2 * 166 * 1.8 * this.size), 176 * 1.8 * this.size, 166 * 1.8 * this.size);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 606, 451, 176, 166, -(1/2 * 176 * 1.8 * this.size), -(1/2 * 166 * 1.8 * this.size), 176 * 1.8 * this.size, 166 * 1.8 * this.size);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -117, this.Y - 105, 209, 230, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X + 25.020444747102374 * this.size), (this.Y + -100.53450434693059 * this.size), 21 * this.size, 25 * this.size, true));
                barrierList.push(new Barrier((this.X + -49.979555252897626 * this.size), (this.Y + -101.53450434693059 * this.size), 21 * this.size, 25 * this.size, true));
                barrierList.push(new Barrier((this.X + 33.020444747102374 * this.size), (this.Y + -112.53450434693059 * this.size), 21 * this.size, 25 * this.size, true));
                barrierList.push(new Barrier((this.X + 43.020444747102374 * this.size), (this.Y + -116.53450434693059 * this.size), 22 * this.size, 16 * this.size, true));
                barrierList.push(new Barrier((this.X + -54.979555252897626 * this.size), (this.Y + -112.53450434693059 * this.size), 22 * this.size, 16 * this.size, true));
                barrierList.push(new Barrier((this.X + 54.020444747102374 * this.size), (this.Y + -125.53450434693059 * this.size), 16 * this.size, 22 * this.size, true));
                barrierList.push(new Barrier((this.X + -73.97955525289763 * this.size), (this.Y + -129.5345043469306 * this.size), 16 * this.size, 22 * this.size, true));
                barrierList.push(new Barrier((this.X + -92.97955525289763 * this.size), (this.Y + -134.5345043469306 * this.size), 16 * this.size, 22 * this.size, true));
                barrierList.push(new Barrier((this.X + 84.02044474710237 * this.size), (this.Y + -133.5345043469306 * this.size), 16 * this.size, 22 * this.size, true));
                barrierList.push(new Barrier((this.X + 102.02044474710237 * this.size), (this.Y + -126.53450434693059 * this.size), 16 * this.size, 22 * this.size, true));
                barrierList.push(new Barrier((this.X + -111.97955525289763 * this.size), (this.Y + -129.5345043469306 * this.size), 16 * this.size, 22 * this.size, true));
                barrierList.push(new Barrier((this.X + -125.97955525289763 * this.size), (this.Y + -119.53450434693059 * this.size), 22 * this.size, 16 * this.size, true));
                barrierList.push(new Barrier((this.X + -128.97955525289763 * this.size), (this.Y + -96.53450434693059 * this.size), 22 * this.size, 16 * this.size, true));
                barrierList.push(new Barrier((this.X + -119.97955525289763 * this.size), (this.Y + -73.53450434693059 * this.size), 22 * this.size, 16 * this.size, true));
                barrierList.push(new Barrier((this.X + 67.76117699359384 * this.size), (this.Y + -133.6403732421527 * this.size), 18 * this.size, 17 * this.size, true));
                barrierList.push(new Barrier((this.X + 115.76117699359384 * this.size), (this.Y + -115.64037324215269 * this.size), 18 * this.size, 17 * this.size, true));
                barrierList.push(new Barrier((this.X + 118.76117699359384 * this.size), (this.Y + -93.64037324215269 * this.size), 18 * this.size, 17 * this.size, true));
                barrierList.push(new Barrier((this.X + 111.76117699359384 * this.size), (this.Y + -77.64037324215269 * this.size), 20 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -114.23882300640616 * this.size), (this.Y + -53.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -105.23882300640616 * this.size), (this.Y + -39.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -96.23882300640616 * this.size), (this.Y + -21.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -88.23882300640616 * this.size), (this.Y + -5.640373242152691 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -82.23882300640616 * this.size), (this.Y + 7.359626757847309 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -75.23882300640616 * this.size), (this.Y + 21.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -68.23882300640616 * this.size), (this.Y + 35.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -61.238823006406164 * this.size), (this.Y + 46.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -56.238823006406164 * this.size), (this.Y + 58.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -49.238823006406164 * this.size), (this.Y + 72.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -49.238823006406164 * this.size), (this.Y + 84.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -45.238823006406164 * this.size), (this.Y + 97.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -35.238823006406164 * this.size), (this.Y + 107.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -23.238823006406164 * this.size), (this.Y + 115.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -11.238823006406164 * this.size), (this.Y + 118.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 2.7611769935938355 * this.size), (this.Y + 118.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 12.761176993593836 * this.size), (this.Y + 111.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 20.761176993593836 * this.size), (this.Y + 102.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 28.761176993593836 * this.size), (this.Y + 92.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 28.761176993593836 * this.size), (this.Y + 83.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 31.761176993593836 * this.size), (this.Y + 66.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 36.761176993593836 * this.size), (this.Y + 53.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 43.761176993593836 * this.size), (this.Y + 42.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 50.761176993593836 * this.size), (this.Y + 30.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 57.761176993593836 * this.size), (this.Y + 16.35962675784731 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 64.76117699359384 * this.size), (this.Y + 4.359626757847309 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 70.76117699359384 * this.size), (this.Y + -5.640373242152691 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 75.76117699359384 * this.size), (this.Y + -16.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 82.76117699359384 * this.size), (this.Y + -29.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 87.76117699359384 * this.size), (this.Y + -35.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 93.76117699359384 * this.size), (this.Y + -47.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + 101.76117699359384 * this.size), (this.Y + -60.64037324215269 * this.size), 17 * this.size, 18 * this.size, true));
                barrierList.push(new Barrier((this.X + -130.86411262105503 * this.size), (this.Y + -103.8514156227875 * this.size), 10 * this.size, 16 * this.size, true));
                barrierList.push(new Barrier((this.X + -128.86411262105503 * this.size), (this.Y + -74.8514156227875 * this.size), 10 * this.size, 16 * this.size, true));
                barrierList.push(new Barrier((this.X + 120.20743818035135 * this.size), (this.Y + -98.00037125849894 * this.size), 12 * this.size, 15 * this.size, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding7")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = this.temporary;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X - 69.79889495199404 * this.size) && X < (this.X - 69.79889495199404 * this.size) + 145 * this.size && Y > (this.Y - 113.38441219092329 * this.size) && Y < (this.Y - 113.38441219092329 * this.size) + 232 * this.size)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 11, 804, 132, 84, -(1/2 * 132 * 1.95 * this.size), -(1/2 * 84 * 1.95 * this.size), 132 * 1.95 * this.size, 84 * 1.95 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 11, 804, 132, 84, -(1/2 * 132 * 1.95 * this.size), -(1/2 * 84 * 1.95 * this.size), 132 * 1.95 * this.size, 84 * 1.95 * this.size);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 156, 802, 132, 84, -(1/2 * 132 * 1.95 * this.size), -(1/2 * 84 * 1.95 * this.size), 132 * 1.95 * this.size, 84 * 1.95 * this.size);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X - 114.56060697503335 * this.size) && X < (this.X - 114.56060697503335 * this.size) + 233 * this.size && Y > (this.Y - 72.79074720013477 * this.size) && Y < (this.Y - 72.79074720013477 * this.size) + 143 * this.size)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 11, 804, 132, 84, -(1/2 * 132 * 1.95 * this.size), -(1/2 * 84 * 1.95 * this.size), 132 * 1.95 * this.size, 84 * 1.95 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 11, 804, 132, 84, -(1/2 * 132 * 1.95 * this.size), -(1/2 * 84 * 1.95 * this.size), 132 * 1.95 * this.size, 84 * 1.95) * this.size;
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 156, 802, 132, 84, -(1/2 * 132 * 1.95 * this.size), -(1/2 * 84 * 1.95 * this.size), 132 * 1.95 * this.size, 84 * 1.95 * this.size);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -78.20110504800596 * this.size), (this.Y + 107.38441219092329 * this.size), 14 * this.size, 156 * this.size, true));
                    barrierList.push(new Barrier((this.X + -79.20110504800596 * this.size), (this.Y + -123.61558780907671 * this.size), 14 * this.size, 157 * this.size, true));
                    barrierList.push(new Barrier((this.X + 63.79889495199404 * this.size), (this.Y + -123.61558780907671 * this.size), 244 * this.size, 1 * this.size, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -78.86008188622782 * this.size), (this.Y + 111.11088654869036 * this.size), 14 * this.size, 157 * this.size, true));
                    barrierList.push(new Barrier((this.X + -77.86008188622782 * this.size), (this.Y + -120.88911345130964 * this.size), 14 * this.size, 157 * this.size, true));
                    barrierList.push(new Barrier((this.X + -78.86008188622782 * this.size), (this.Y + -121.88911345130964 * this.size), 247 * this.size, 14 * this.size, true));
                }
                else if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 107.56060697503335 * this.size), (this.Y + -78.20925279986523 * this.size), 157 * this.size, 14 * this.size, true));
                    barrierList.push(new Barrier((this.X + -124.43939302496665 * this.size), (this.Y + -79.20925279986523 * this.size), 157 * this.size, 14 * this.size, true));
                    barrierList.push(new Barrier((this.X + -124.43939302496665 * this.size), (this.Y + -78.20925279986523 * this.size), 14 * this.size, 245 * this.size, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + 111.09035537028922 * this.size), (this.Y + -78.46845810049581 * this.size), 158 * this.size, 14 * this.size, true));
                    barrierList.push(new Barrier((this.X + -121.90964462971078 * this.size), (this.Y + -77.46845810049581 * this.size), 158 * this.size, 14 * this.size, true));
                    barrierList.push(new Barrier((this.X + -120.90964462971078 * this.size), (this.Y + 63.53154189950419 * this.size), 14 * this.size, 245 * this.size, true));
                }
            }

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding8")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = this.temporary;

            if (this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X - 98.54998428204408 * this.size) && X < (this.X - 98.54998428204408 * this.size) + 205 * this.size && Y > (this.Y - 197.07143745309986 * this.size) && Y < (this.Y - 197.07143745309986* this.size) + 194 * this.size || X > (this.X - 84.5197321138271 * this.size) && X < (this.X - 84.5197321138271 * this.size) + 173 * this.size && Y > (this.Y - 5.584229778812187 * this.size) && Y < (this.Y - 5.584229778812187 * this.size) + 205 * this.size)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 314, 796, 164, 97, -(1/2 * 164 * 1.9 * this.size * 1.4), -(1/2 * 97 * 1.9 * this.size * 1.4), 164 * 1.9 * this.size * 1.4, 97 * 1.9 * this.size * 1.4);
                    XXX.restore();
                }
            }
            else if (this.rotation == 1/2 * Math.PI)
            {
                if (X > (this.X - 86.3109946725167 * this.size) && X < (this.X - 86.3109946725167 * this.size) + 170 * this.size && Y > (this.Y - 198.5894424155731 * this.size) && Y < (this.Y - 198.5894424155731 * this.size) + 233 * this.size || X > (this.X - 101.48247575013602 * this.size) && X < (this.X - 101.48247575013602 * this.size) + 202 * this.size && Y > (this.Y - -9.283263252867073 * this.size) && Y < (this.Y - -9.283263252867073 * this.size) + 192 * this.size)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 314, 796, 164, 97, -(1/2 * 164 * 1.9 * this.size * 1.4), -(1/2 * 97 * 1.9 * this.size * 1.4), 164 * 1.9 * this.size * 1.4, 97 * 1.9 * this.size * 1.4);
                    XXX.restore();
                }
            }
            else if (this.rotation == Math.PI)
            {
                if (X > (this.X + 199.61567818736603 * this.size) - 195 * this.size && X < (this.X + 199.61567818736603 * this.size) && Y > (this.Y + 101.06054616639312 * this.size) - 205 * this.size && Y < (this.Y + 101.06054616639312 * this.size) || X > (this.X + 17.2015049264146 * this.size) - 220 * this.size && X < (this.X + 17.2015049264146 * this.size) && Y > (this.Y + 85.21867038193977 * this.size) - 171 * this.size && Y < (this.Y + 85.21867038193977 * this.size))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 314, 796, 164, 97, -(1/2 * 164 * 1.9 * this.size * 1.4), -(1/2 * 97 * 1.9 * this.size * 1.4), 164 * 1.9 * this.size * 1.4, 97 * 1.9 * this.size * 1.4);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 200.87083721950876 * this.size) - 226 * this.size && X < (this.X + 200.87083721950876 * this.size) && Y > (this.Y + 84.12400268294596 * this.size) - 170 * this.size && Y < (this.Y + 84.12400268294596 * this.size) || X > (this.X + -5.129162780491697 * this.size) - 195 * this.size && X < (this.X + -5.129162780491697 * this.size) && Y > (this.Y + 101.12400268294596 * this.size) - 205 * this.size && Y < (this.Y + 101.12400268294596 * this.size))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 487, 801, 164, 97, -(1/2 * 164 * 1.95 * this.size * 1.4), -(1/2 * 97 * 1.95 * this.size * 1.4), 164 * 1.95 * this.size * 1.4, 97 * 1.95 * this.size * 1.4);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 314, 796, 164, 97, -(1/2 * 164 * 1.9 * this.size * 1.4), -(1/2 * 97 * 1.9 * this.size * 1.4), 164 * 1.9 * this.size * 1.4, 97 * 1.9 * this.size * 1.4);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -98.22569989277281 * this.size), (this.Y + -212.33567270905996 * this.size), 19 * this.size, 74 * this.size, true));
                    barrierList.push(new Barrier((this.X + 31.77430010722719 * this.size), (this.Y + -211.33567270905996 * this.size), 21 * this.size, 66 * this.size, true));
                    barrierList.push(new Barrier((this.X + 75.77430010722719 * this.size), (this.Y + -214.33567270905996 * this.size), 226 * this.size, 21 * this.size, true));
                    barrierList.push(new Barrier((this.X + -99.22569989277281 * this.size), (this.Y + -212.33567270905996 * this.size), 226 * this.size, 21 * this.size, true));
                    barrierList.push(new Barrier((this.X + 92.34540144651464 * this.size), (this.Y + -1.7007419041228786 * this.size), 216 * this.size, 21 * this.size, true));
                    barrierList.push(new Barrier((this.X + -115.65459855348536 * this.size), (this.Y + -2.7007419041228786 * this.size), 216 * this.size, 21 * this.size, true));
                    barrierList.push(new Barrier((this.X + -111.65459855348536 * this.size), (this.Y + 191.29925809587712 * this.size), 21 * this.size, 216 * this.size, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 78.38354893288488 * this.size), (this.Y + -14.26267395251989 * this.size), 225 * this.size, 18 * this.size, true));
                    barrierList.push(new Barrier((this.X + -95.61645106711512 * this.size), (this.Y + -13.26267395251989 * this.size), 225 * this.size, 18 * this.size, true));
                    barrierList.push(new Barrier((this.X + -112.61645106711512 * this.size), (this.Y + -211.2626739525199 * this.size), 213 * this.size, 18 * this.size, true));
                    barrierList.push(new Barrier((this.X + 97.38354893288488 * this.size), (this.Y + -211.2626739525199 * this.size), 213 * this.size, 18 * this.size, true));
                    barrierList.push(new Barrier((this.X + -108.61645106711512 * this.size), (this.Y + -207.2626739525199 * this.size), 18 * this.size, 221 * this.size, true));
                    barrierList.push(new Barrier((this.X + -95.61645106711512 * this.size), (this.Y + 194.7373260474801 * this.size), 18 * this.size, 61 * this.size, true));
                    barrierList.push(new Barrier((this.X + 25.383548932884878 * this.size), (this.Y + 193.7373260474801 * this.size), 18 * this.size, 71 * this.size, true));
                }
                else if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -213.50403006103488 * this.size), (this.Y + 76.01644194271375 * this.size), 22 * this.size, 226 * this.size, true));
                    barrierList.push(new Barrier((this.X + -213.50403006103488 * this.size), (this.Y + -93.98355805728625 * this.size), 20 * this.size, 226 * this.size, true));
                    barrierList.push(new Barrier((this.X + -1.5040300610348822 * this.size), (this.Y + -111.98355805728625 * this.size), 20 * this.size, 214 * this.size, true));
                    barrierList.push(new Barrier((this.X + -1.5040300610348822 * this.size), (this.Y + 96.01644194271375 * this.size), 20 * this.size, 214 * this.size, true));
                    barrierList.push(new Barrier((this.X + 190.49596993896512 * this.size), (this.Y + -108.98355805728625 * this.size), 222 * this.size, 20 * this.size, true));
                    barrierList.push(new Barrier((this.X + -212.50403006103488 * this.size), (this.Y + 25.016441942713755 * this.size), 73 * this.size, 20 * this.size, true));
                    barrierList.push(new Barrier((this.X + -210.50403006103488 * this.size), (this.Y + -94.98355805728625 * this.size), 61 * this.size, 20 * this.size, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -212.80522312213088 * this.size), (this.Y + 91.88662497634687 * this.size), 20 * this.size, 215 * this.size, true));
                    barrierList.push(new Barrier((this.X + -211.80522312213088 * this.size), (this.Y + -114.11337502365313 * this.size), 20 * this.size, 213 * this.size, true));
                    barrierList.push(new Barrier((this.X + -208.80522312213088 * this.size), (this.Y + -112.11337502365313 * this.size), 222 * this.size, 20 * this.size, true));
                    barrierList.push(new Barrier((this.X + -10.805223122130883 * this.size), (this.Y + -98.11337502365313 * this.size), 20 * this.size, 222 * this.size, true));
                    barrierList.push(new Barrier((this.X + -10.805223122130883 * this.size), (this.Y + 77.88662497634687 * this.size), 20 * this.size, 222 * this.size, true));
                    barrierList.push(new Barrier((this.X + 191.19477687786912 * this.size), (this.Y + 33.886624976346866 * this.size), 62 * this.size, 20 * this.size, true));
                    barrierList.push(new Barrier((this.X + 193.19477687786912 * this.size), (this.Y + -98.11337502365313 * this.size), 72 * this.size, 20 * this.size, true));
                }
            }

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBuilding9")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = this.temporary;

            //DRAWSELF
            if (this.rotation == 1/2 * Math.PI)
            {
                if (X > (this.X + 40.59855733548375 * this.size) - 83 * this.size && X < (this.X + 40.59855733548375 * this.size) && Y > (this.Y + 44.53746122286793 * this.size) - 97 * this.size && Y < (this.Y + 44.53746122286793 * this.size))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1243, 813, 67, 58, -(1/2 * 67 * 1.95 * this.size), -(1/2 * 58 * 1.95 * this.size), 67 * 1.95 * this.size, 58 * 1.95 * this.size);
                    XXX.restore();
                }
            }
            else if (this.rotation == -1/2 * Math.PI)
            {
                if (X > (this.X + 43.376949998947566 * this.size) - 87 * this.size && X < (this.X + 43.376949998947566 * this.size) && Y > (this.Y + 48.153007944874844 * this.size) - 93 * this.size && Y < (this.Y + 48.153007944874844 * this.size))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1243, 813, 67, 58, -(1/2 * 67 * 1.95 * this.size), -(1/2 * 58 * 1.95 * this.size), 67 * 1.95 * this.size, 58 * 1.95 * this.size);
                    XXX.restore();
                }
            }
            else if (this.rotation == Math.PI)
            {
                if (X > (this.X + 48.23606710664626 * this.size) - 97 * this.size && X < (this.X + 48.23606710664626 * this.size) && Y > (this.Y +  41.005422250286756 * this.size) - 85 * this.size && Y < (this.Y + 41.005422250286756 * this.size))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1243, 813, 67, 58, -(1/2 * 67 * 1.95 * this.size), -(1/2 * 58 * 1.95 * this.size), 67 * 1.95 * this.size, 58 * 1.95 * this.size);
                    XXX.restore();
                }
            }
            else
            {
                if (X > (this.X + 46.566102830332966 * this.size) - 101 * this.size && X < (this.X + 46.566102830332966 * this.size) && Y > (this.Y + 41.55209704253048 * this.size) - 82 * this.size && Y < (this.Y + 41.55209704253048 * this.size))
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1175, 813, 59, 57, -(1/2 * 59 * 1.95 * this.size), -(1/2 * 57 * 1.95 * this.size), 59 * 1.95 * this.size, 57 * 1.95 * this.size);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(bloat, 1243, 813, 67, 58, -(1/2 * 67 * 1.95 * this.size), -(1/2 * 58 * 1.95 * this.size), 67 * 1.95 * this.size, 58 * 1.95 * this.size);
                    XXX.restore();
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.rotation == -1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -46.780853286205 * this.size), (this.Y + -50.310347703088155 * this.size), 77 * this.size, 9 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + 39.219146713795 * this.size), (this.Y + -50.310347703088155 * this.size), 77 * this.size, 9 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + -45.780853286205 * this.size), (this.Y + -51.310347703088155 * this.size), 9 * this.size, 93 * this.size, true, "cover"));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 36.29591418656082 * this.size), (this.Y + -25.875218092258365 * this.size), 75 * this.size, 9 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + -48.70408581343918 * this.size), (this.Y + -25.875218092258365 * this.size), 75 * this.size, 9 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + -47.70408581343918 * this.size), (this.Y + 41.124781907741635 * this.size), 9 * this.size, 93 * this.size, true, "cover"));
                }
                else if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -50.76393289335374 * this.size), (this.Y + 38.005422250286756 * this.size), 8 * this.size, 77 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + -49.76393289335374 * this.size), (this.Y + -48.994577749713244 * this.size), 8 * this.size, 77 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + -50.76393289335374 * this.size), (this.Y + -47.994577749713244 * this.size), 94 * this.size, 8 * this.size, true, "cover"));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + 42.566102830332966 * this.size), (this.Y + -45.44790295746952 * this.size), 93 * this.size, 8 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + -26.433897169667034 * this.size), (this.Y + -46.44790295746952 * this.size), 8 * this.size, 76 * this.size, true, "cover"));
                    barrierList.push(new Barrier((this.X + -26.433897169667034 * this.size), (this.Y + 39.55209704253048 * this.size), 8 * this.size, 76 * this.size, true, "cover"));
                }
            }

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganBridges")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 1;
            this.size = this.temporary;

            //DRAWSELF
            if (this.information == 0) //fat bridge
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 291, 652, 93, 133, -(1/2 * 93 * 1.95 * this.size), -(1/2 * 133 * 1.95 * this.size), 93 * 1.95 * this.size, 133 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 1) //bridge
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 677, 846, 129, 48, -(1/2 * 129 * 1.95 * this.size), -(1/2 * 48 * 1.95 * this.size), 129 * 1.95 * this.size, 48 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 2) //wide half bridge
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 677, 795, 129, 48, -(1/2 * 129 * 1.95 * this.size), -(1/2 * 48 * 1.95 * this.size), 129 * 1.95 * this.size, 48 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 3) //rail-less wide bridge
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 899, 781, 129, 41, -(1/2 * 129 * 1.95 * this.size), -(1/2 * 41 * 1.95 * this.size), 129 * 1.95 * this.size, 41 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 4) //half bridge
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 835, 830, 130, 30, -(1/2 * 130 * 1.95 * this.size), -(1/2 * 30 * 1.95 * this.size), 130 * 1.95 * this.size, 30 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 5) //rail-less half bridge
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 835, 863, 130, 30, -(1/2 * 130 * 1.95 * this.size), -(1/2 * 30 * 1.95 * this.size), 130 * 1.95 * this.size, 30 * 1.95 * this.size);
                XXX.restore();
            }

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                //ArtificialIntelligenceAccess[i].X
                //ArtificialIntelligenceAccess[i].Y
                if (this.information == 0)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 74.37327952072064 * this.size) - 149 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 74.37327952072064 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 116.97828163059148 * this.size) - 236 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 116.97828163059148 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                    else
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 120.22028192781272 * this.size) - 241 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 120.22028192781272 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 74.90872893132064 * this.size) - 151 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 74.90872893132064 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                }
                else if (this.information == 1)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 118.80872291392916 * this.size) - 239 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 118.80872291392916 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 35.110415715371346 * this.size) - 67 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 35.110415715371346 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                    else
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 34.522144045557525 * this.size) - 69 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 34.522144045557525 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 116.72089731869437 * this.size) - 238 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 116.72089731869437 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                }
                else if (this.information == 2)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 118.80872291392916 * this.size) - 239 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 118.80872291392916 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 35.110415715371346 * this.size) - 67 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 35.110415715371346 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                    else
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 34.522144045557525 * this.size) - 69 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 34.522144045557525 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 116.72089731869437 * this.size) - 238 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 116.72089731869437 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                }
                else if (this.information == 3)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 118.80872291392916 * this.size) - 239 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 118.80872291392916 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 35.110415715371346 * this.size) - 67 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 35.110415715371346 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                    else
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 34.522144045557525 * this.size) - 69 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 34.522144045557525 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 116.72089731869437 * this.size) - 238 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 116.72089731869437 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                }
                else if (this.information == 4)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 119.07816547916582 * this.size) - 236 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 119.07816547916582 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 17.70960740564351 * this.size) - 36 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 17.70960740564351 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                    else
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 19.572103613434592 * this.size) - 38 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 19.572103613434592 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 115.80407678485835 * this.size) - 236 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 115.80407678485835 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                }
                else if (this.information == 5)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 119.07816547916582 * this.size) - 236 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 119.07816547916582 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 17.70960740564351 * this.size) - 36 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 17.70960740564351 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                    else
                    {
                        if (ArtificialIntelligenceAccess[i].X > (this.X + 19.572103613434592 * this.size) - 38 * this.size && ArtificialIntelligenceAccess[i].X < (this.X + 19.572103613434592 * this.size) && ArtificialIntelligenceAccess[i].Y > (this.Y + 115.80407678485835 * this.size) - 236 * this.size && ArtificialIntelligenceAccess[i].Y < (this.Y + 115.80407678485835 * this.size))
                        {
                            ArtificialIntelligenceAccess[i].land = true;
                            ArtificialIntelligenceAccess[i].water = false;
                        }
                    }
                }
            }

            if (this.information == 0)
            {
                if (this.rotation == 0 || this.rotation == Math.PI)
                {
                    if (X > (this.X + 74.37327952072064 * this.size) - 149 * this.size && X < (this.X + 74.37327952072064 * this.size) && Y > (this.Y + 116.97828163059148 * this.size) - 236 * this.size && Y < (this.Y + 116.97828163059148 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
                else
                {
                    if (X > (this.X + 120.22028192781272 * this.size) - 241 * this.size && X < (this.X + 120.22028192781272 * this.size) && Y > (this.Y + 74.90872893132064 * this.size) - 151 * this.size && Y < (this.Y + 74.90872893132064 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
            }
            else if (this.information == 1)
            {
                if (this.rotation == 0 || this.rotation == Math.PI)
                {
                    if (X > (this.X + 118.80872291392916 * this.size) - 239 * this.size && X < (this.X + 118.80872291392916 * this.size) && Y > (this.Y + 35.110415715371346 * this.size) - 67 * this.size && Y < (this.Y + 35.110415715371346 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
                else
                {
                    if (X > (this.X + 34.522144045557525 * this.size) - 69 * this.size && X < (this.X + 34.522144045557525 * this.size) && Y > (this.Y + 116.72089731869437 * this.size) - 238 * this.size && Y < (this.Y + 116.72089731869437 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
            }
            else if (this.information == 2)
            {
                if (this.rotation == 0 || this.rotation == Math.PI)
                {
                    if (X > (this.X + 118.80872291392916 * this.size) - 239 * this.size && X < (this.X + 118.80872291392916 * this.size) && Y > (this.Y + 35.110415715371346 * this.size) - 67 * this.size && Y < (this.Y + 35.110415715371346 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
                else
                {
                    if (X > (this.X + 34.522144045557525 * this.size) - 69 * this.size && X < (this.X + 34.522144045557525 * this.size) && Y > (this.Y + 116.72089731869437 * this.size) - 238 * this.size && Y < (this.Y + 116.72089731869437 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
            }
            else if (this.information == 3)
            {
                if (this.rotation == 0 || this.rotation == Math.PI)
                {
                    if (X > (this.X + 118.80872291392916 * this.size) - 239 * this.size && X < (this.X + 118.80872291392916 * this.size) && Y > (this.Y + 35.110415715371346 * this.size) - 67 * this.size && Y < (this.Y + 35.110415715371346 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
                else
                {
                    if (X > (this.X + 34.522144045557525 * this.size) - 69 * this.size && X < (this.X + 34.522144045557525 * this.size) && Y > (this.Y + 116.72089731869437 * this.size) - 238 * this.size && Y < (this.Y + 116.72089731869437 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
            }
            else if (this.information == 4)
            {
                if (this.rotation == 0 || this.rotation == Math.PI)
                {
                    if (X > (this.X + 119.07816547916582 * this.size) - 236 * this.size && X < (this.X + 119.07816547916582 * this.size) && Y > (this.Y + 17.70960740564351 * this.size) - 36 * this.size && Y < (this.Y + 17.70960740564351 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
                else
                {
                    if (X > (this.X + 19.572103613434592 * this.size) - 38 * this.size && X < (this.X + 19.572103613434592 * this.size) && Y > (this.Y + 115.80407678485835 * this.size) - 236 * this.size && Y < (this.Y + 115.80407678485835 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
            }
            else if (this.information == 5)
            {
                if (this.rotation == 0 || this.rotation == Math.PI)
                {
                    if (X > (this.X + 119.07816547916582 * this.size) - 236 * this.size && X < (this.X + 119.07816547916582 * this.size) && Y > (this.Y + 17.70960740564351 * this.size) - 36 * this.size && Y < (this.Y + 17.70960740564351 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
                else
                {
                    if (X > (this.X + 19.572103613434592 * this.size) - 38 * this.size && X < (this.X + 19.572103613434592 * this.size) && Y > (this.Y + 115.80407678485835 * this.size) - 236 * this.size && Y < (this.Y + 115.80407678485835 * this.size))
                    {
                        player.land = true;
                        player.water = false;
                    }
                }
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.information == 0)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + 69.83807543732746 * this.size), (this.Y + -120.22706668289811 * this.size), 240 * this.size, 11 * this.size, true, "phase"));
                        barrierList.push(new Barrier((this.X + -80.16192456267254 * this.size), (this.Y + -120.22706668289811 * this.size), 240 * this.size, 11 * this.size, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -120.16192456267254 * this.size), (this.Y + 69.77293331710189 * this.size), 11 * this.size, 241 * this.size, true, "phase"));
                        barrierList.push(new Barrier((this.X + -121.16192456267254 * this.size), (this.Y + -80.22706668289811 * this.size), 11 * this.size, 241 * this.size, true, "phase"));
                    }
                }
                else if (this.information == 1)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -121.72699083443467 * this.size), (this.Y + -40.84263995903666 * this.size), 12 * this.size, 242 * this.size, true, "phase"));
                        barrierList.push(new Barrier((this.X + -121.72699083443467 * this.size), (this.Y + 29.15736004096334 * this.size), 12 * this.size, 242 * this.size, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -41.477855954442475 * this.size), (this.Y + -120.27910268130563 * this.size), 241 * this.size, 12 * this.size, true, "phase"));
                        barrierList.push(new Barrier((this.X + 29.522144045557525 * this.size), (this.Y + -121.27910268130563 * this.size), 241 * this.size, 12 * this.size, true, "phase"));
                    }
                }
                else if (this.information == 2)
                {
                    if (this.rotation == 0)
                    {
                        barrierList.push(new Barrier((this.X + -121.72699083443467 * this.size), (this.Y + 29.15736004096334 * this.size) - 6 * this.size, 12 * this.size, 242 * this.size, true, "phase"));
                    }
                    else if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -121.72699083443467 * this.size), (this.Y + -40.84263995903666 * this.size) + 6 * this.size, 12 * this.size, 242 * this.size, true, "phase"));
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + 29.522144045557525 * this.size) - 6 * this.size, (this.Y + -121.27910268130563 * this.size), 241 * this.size, 12 * this.size, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -41.477855954442475 * this.size) + 6 * this.size, (this.Y + -120.27910268130563 * this.size), 241 * this.size, 12 * this.size, true, "phase"));
                    }
                }
                else if (this.information == 4)
                {
                    if (this.rotation == 0)
                    {
                        barrierList.push(new Barrier((this.X + -121.87491602174123 * this.size), (this.Y + 10.581549253093272 * this.size), 13 * this.size, 242 * this.size, true, "phase"));
                    }
                    else if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -118.92183452083418 * this.size), (this.Y + -24.29039259435649 * this.size), 14 * this.size, 240 * this.size, true, "phase"));
                    }
                    else if (this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + 10.572103613434592 * this.size), (this.Y + -119.19592321514165 * this.size), 240 * this.size, 13 * this.size, true, "phase"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -23.427896386565408 * this.size), (this.Y + -121.19592321514165 * this.size), 240 * this.size, 12 * this.size, true, "phase"));
                    }
                }
            }

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganorCastlePartsHigh")
        {
            //TRAITS
            this.zIndex = 6;
            this.solid = false;
            this.interactionRange = 1;
            this.size = this.temporary;

            //DRAWSELF
            if (this.information == 0) //freydic long wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 396, 915, 371, 51, -(1/2 * 371 * 1.95 * this.size), -(1/2 * 51 * 1.95 * this.size), 371 * 1.95 * this.size, 51 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 1) //thengan long wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 395, 972, 371, 51, -(1/2 * 371 * 1.95 * this.size), -(1/2 * 51 * 1.95 * this.size), 371 * 1.95 * this.size, 51 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 2) //freydic short wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 580, 1033, 203, 49, -(1/2 * 203 * 1.95 * this.size), -(1/2 * 49 * 1.95 * this.size), 203 * 1.95 * this.size, 49 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 3) //thengan short wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 580, 1090, 202, 50, -(1/2 * 202 * 1.95 * this.size), -(1/2 * 50 * 1.95 * this.size), 202 * 1.95 * this.size, 50 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 4) //freydic turret
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 396, 1034, 86, 83, -(1/2 * 86 * 1.95 * this.size), -(1/2 * 83 * 1.95 * this.size), 86 * 1.95 * this.size, 83 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 5) //thengan turret
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 482, 1034, 86, 83, -(1/2 * 86 * 1.95 * this.size), -(1/2 * 83 * 1.95 * this.size), 86 * 1.95 * this.size, 83 * 1.95 * this.size);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.information == 0 || this.information == 1)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -351.43308977611014 * this.size), (this.Y + -40.961172604667354 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -351.43308977611014 * this.size), (this.Y + 23.038827395332646 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -351.43308977611014 * this.size), (this.Y + -39.961172604667354 * this.size), 81 * this.size, 16 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 333.56691022388986 * this.size), (this.Y + -40.961172604667354 * this.size), 81 * this.size, 16 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -40.712547144248674 * this.size), (this.Y + -351.2915878208819 * this.size), 15 * this.size, 81 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -40.7766229712588 * this.size), (this.Y + 335.8451544245004 * this.size), 15 * this.size, 81 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -39.96460574856883 * this.size), (this.Y + 68.49404959715548 * this.size), 283 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 22.03539425143117 * this.size), (this.Y + 69.49404959715548 * this.size), 283 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 23.056029707805465 * this.size), (this.Y + -350.75954369642477 * this.size), 438 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -39.943970292194535 * this.size), (this.Y + -348.75954369642477 * this.size), 438 * this.size, 17 * this.size, true, "cover"));
                    }
                }
                else if (this.information == 2 || this.information == 3)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -189.0833216984429 * this.size), (this.Y + -42.480172550895986 * this.size), 20 * this.size, 377 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -189.0833216984429 * this.size), (this.Y + 19.519827449104014 * this.size), 20 * this.size, 377 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -190.0833216984429 * this.size), (this.Y + -40.480172550895986 * this.size), 82 * this.size, 22 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 166.9166783015571 * this.size), (this.Y + -41.480172550895986 * this.size), 82 * this.size, 22 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -40.122248345111075 * this.size), (this.Y + -188.85653751909285 * this.size), 22 * this.size, 80 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -40.122248345111075 * this.size), (this.Y + 168.14346248090715 * this.size), 20 * this.size, 80 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -40.122248345111075 * this.size), (this.Y + -187.85653751909285 * this.size), 375 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 22.877751654888925 * this.size), (this.Y + -186.85653751909285 * this.size), 375 * this.size, 18 * this.size, true, "cover"));
                    }
                }
                else if (this.information == 4 || this.information == 5)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -76.69000531507118 * this.size), (this.Y + -75.10100712532085 * this.size), 150 * this.size, 24 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 54.309994684928824 * this.size), (this.Y + -76.10100712532085 * this.size), 150 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -75.69000531507118 * this.size), (this.Y + -76.10100712532085 * this.size), 21 * this.size, 150 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -75.69000531507118 * this.size), (this.Y + 54.89899287467915 * this.size), 20 * this.size, 150 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -75.51428241965368 * this.size), (this.Y + -75.4820396663581 * this.size), 21 * this.size, 152 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -75.51428241965368 * this.size), (this.Y + 54.517960333641895 * this.size), 21 * this.size, 152 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -76.51428241965368 * this.size), (this.Y + -74.4820396663581 * this.size), 152 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 56.48571758034632 * this.size), (this.Y + -75.4820396663581 * this.size), 152 * this.size, 19 * this.size, true, "cover"));
                    }
                }
            }

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganorCastleParts")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 1;
            this.size = this.temporary;

            //DRAWSELF
            if (this.information == 0) //freydic long wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 396, 915, 371, 51, -(1/2 * 371 * 1.95 * this.size), -(1/2 * 51 * 1.95 * this.size), 371 * 1.95 * this.size, 51 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 1) //thengan long wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 395, 972, 371, 51, -(1/2 * 371 * 1.95 * this.size), -(1/2 * 51 * 1.95 * this.size), 371 * 1.95 * this.size, 51 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 2) //freydic short wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 580, 1033, 203, 49, -(1/2 * 203 * 1.95 * this.size), -(1/2 * 49 * 1.95 * this.size), 203 * 1.95 * this.size, 49 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 3) //thengan short wall
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 580, 1090, 202, 50, -(1/2 * 202 * 1.95 * this.size), -(1/2 * 50 * 1.95 * this.size), 202 * 1.95 * this.size, 50 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 4) //freydic turret
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 396, 1034, 86, 83, -(1/2 * 86 * 1.95 * this.size), -(1/2 * 83 * 1.95 * this.size), 86 * 1.95 * this.size, 83 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 5) //thengan turret
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 482, 1034, 86, 83, -(1/2 * 86 * 1.95 * this.size), -(1/2 * 83 * 1.95 * this.size), 86 * 1.95 * this.size, 83 * 1.95 * this.size);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.information == 0 || this.information == 1)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -351.43308977611014 * this.size), (this.Y + -40.961172604667354 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -351.43308977611014 * this.size), (this.Y + 23.038827395332646 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -351.43308977611014 * this.size), (this.Y + -39.961172604667354 * this.size), 81 * this.size, 16 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 333.56691022388986 * this.size), (this.Y + -40.961172604667354 * this.size), 81 * this.size, 16 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -40.712547144248674 * this.size), (this.Y + -351.2915878208819 * this.size), 15 * this.size, 81 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -40.7766229712588 * this.size), (this.Y + 335.8451544245004 * this.size), 15 * this.size, 81 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -39.96460574856883 * this.size), (this.Y + 68.49404959715548 * this.size), 283 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 22.03539425143117 * this.size), (this.Y + 69.49404959715548 * this.size), 283 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 23.056029707805465 * this.size), (this.Y + -350.75954369642477 * this.size), 438 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -39.943970292194535 * this.size), (this.Y + -348.75954369642477 * this.size), 438 * this.size, 17 * this.size, true, "cover"));
                    }
                }
                else if (this.information == 2 || this.information == 3)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -189.0833216984429 * this.size), (this.Y + -42.480172550895986 * this.size), 20 * this.size, 377 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -189.0833216984429 * this.size), (this.Y + 19.519827449104014 * this.size), 20 * this.size, 377 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -190.0833216984429 * this.size), (this.Y + -40.480172550895986 * this.size), 82 * this.size, 22 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 166.9166783015571 * this.size), (this.Y + -41.480172550895986 * this.size), 82 * this.size, 22 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -40.122248345111075 * this.size), (this.Y + -188.85653751909285 * this.size), 22 * this.size, 80 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -40.122248345111075 * this.size), (this.Y + 168.14346248090715 * this.size), 20 * this.size, 80 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -40.122248345111075 * this.size), (this.Y + -187.85653751909285 * this.size), 375 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 22.877751654888925 * this.size), (this.Y + -186.85653751909285 * this.size), 375 * this.size, 18 * this.size, true, "cover"));
                    }
                }
                else if (this.information == 4 || this.information == 5)
                {
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -76.69000531507118 * this.size), (this.Y + -75.10100712532085 * this.size), 150 * this.size, 24 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 54.309994684928824 * this.size), (this.Y + -76.10100712532085 * this.size), 150 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -75.69000531507118 * this.size), (this.Y + -76.10100712532085 * this.size), 21 * this.size, 150 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -75.69000531507118 * this.size), (this.Y + 54.89899287467915 * this.size), 20 * this.size, 150 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + -75.51428241965368 * this.size), (this.Y + -75.4820396663581 * this.size), 21 * this.size, 152 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -75.51428241965368 * this.size), (this.Y + 54.517960333641895 * this.size), 21 * this.size, 152 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -76.51428241965368 * this.size), (this.Y + -74.4820396663581 * this.size), 152 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 56.48571758034632 * this.size), (this.Y + -75.4820396663581 * this.size), 152 * this.size, 19 * this.size, true, "cover"));
                    }
                }
            }

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "thenganorCastles")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 1;
            this.size = this.temporary;

            //DRAWSELF
            if (this.information == 0) //sqr Thengan Castle
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 11, 9, 368, 330, -(1/2 * 368 * 1.95 * this.size), -(1/2 * 330 * 1.95 * this.size), 368 * 1.95 * this.size, 330 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 1) //rct Thengan Castle
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 12, 356, 369, 419, -(1/2 * 369 * 1.95 * this.size), -(1/2 * 419 * 1.95 * this.size), 369 * 1.95 * this.size, 419 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 2) //sqr Freydic Castle
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 401, 140, 368, 330, -(1/2 * 368 * 1.95 * this.size), -(1/2 * 330 * 1.95 * this.size), 368 * 1.95 * this.size, 330 * 1.95 * this.size);
                XXX.restore();
            }
            else if (this.information == 3) //rct Freydic Castle
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 403, 487, 369, 419, -(1/2 * 369 * 1.95 * this.size), -(1/2 * 419 * 1.95 * this.size), 369 * 1.95 * this.size, 419 * 1.95 * this.size);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                if (this.information == 0 || this.information == 2)
                {
                    if (this.rotation == 0)
                    {
                        barrierList.push(new Barrier((this.X + 331.1614368623477 * this.size), (this.Y + -313.63379781922777 * this.size), 395 * this.size, 22 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 261.1614368623477 * this.size), (this.Y + -252.63379781922777 * this.size), 420 * this.size, 22 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 331.51374411072084 * this.size), (this.Y + 72.14669546942878 * this.size), 243 * this.size, 22 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -290.2342345230154 * this.size), (this.Y + -253.6214460717929 * this.size), 20 * this.size, 573 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -282.3150200633727 * this.size), (this.Y + 240.1353264363438 * this.size), 19 * this.size, 565 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -349.3150200633727 * this.size), (this.Y + 298.1353264363438 * this.size), 18 * this.size, 701 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -350.8812866893395 * this.size), (this.Y + -315.2428110073565 * this.size), 18 * this.size, 704 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 161.98755218607948 * this.size), (this.Y + 149.79521945089073 * this.size), 18 * this.size, 121 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -351.1531568724431 * this.size), (this.Y + -85.86562266037754 * this.size), 18 * this.size, 80 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -350.1531568724431 * this.size), (this.Y + 95.13437733962246 * this.size), 18 * this.size, 80 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -289.31853763053823 * this.size), (this.Y + -252.8024993567342 * this.size), 183 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -352.59927108837655 * this.size), (this.Y + -313.9859298803153 * this.size), 244 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -350.83911421361154 * this.size), (this.Y + 94.63888101494013 * this.size), 221 * this.size, 13 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -282.83911421361154 * this.size), (this.Y + 97.63888101494013 * this.size), 162 * this.size, 13 * this.size, true, "cover"));
                    }
                    else if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + 269.1368413657883 * this.size), (this.Y + -110.46561528766324 * this.size), 15 * this.size, 82 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 267.1368413657883 * this.size), (this.Y + 68.53438471233676 * this.size), 15 * this.size, 84 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 335.808026130263 * this.size), (this.Y + -316.9885672441892 * this.size), 222 * this.size, 15 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 266.808026130263 * this.size), (this.Y + -259.9885672441892 * this.size), 165 * this.size, 15 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 267.7659734318022 * this.size), (this.Y + 68.47443907347633 * this.size), 185 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 334.7659734318022 * this.size), (this.Y + 69.47443907347633 * this.size), 245 * this.size, 16 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -282.05168735723055 * this.size), (this.Y + 235.2382236294775 * this.size), 18 * this.size, 571 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -283.7315187050235 * this.size), (this.Y + -258.9896970899208 * this.size), 18 * this.size, 566 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -352.7315187050235 * this.size), (this.Y + -314.9896970899208 * this.size), 18 * this.size, 702 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -352.0271745927366 * this.size), (this.Y + 295.278670273678 * this.size), 18 * this.size, 702 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -351.98343208310416 * this.size), (this.Y + -315.2916345848771 * this.size), 397 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -282.1900177415955 * this.size), (this.Y + -167.9283615219283 * this.size), 421 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -350.9711473686657 * this.size), (this.Y + 70.92527722010072 * this.size), 243 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -283.08592477277034 * this.size), (this.Y + -167.39001572633333 * this.size), 19 * this.size, 122 * this.size, true, "cover"));
                    }
                    else if (this.rotation == 1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + 296.12590074940636 * this.size), (this.Y + -349.58280028647914 * this.size), 435 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 234.12590074940636 * this.size), (this.Y + -290.58280028647914 * this.size), 375 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -258.87409925059364 * this.size), (this.Y + -282.58280028647914 * this.size), 375 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -315.87409925059364 * this.size), (this.Y + -349.58280028647914 * this.size), 430 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -315.00170066513783 * this.size), (this.Y + 69.06217993913242 * this.size), 285 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 295.99829933486217 * this.size), (this.Y + 68.06217993913242 * this.size), 285 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 234.99829933486217 * this.size), (this.Y + 68.06217993913242 * this.size), 215 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -259.00170066513783 * this.size), (this.Y + 67.06217993913242 * this.size), 215 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -167.00170066513783 * this.size), (this.Y + 160.06217993913242 * this.size), 125 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -169.00170066513783 * this.size), (this.Y + 263.0621799391324 * this.size), 18 * this.size, 420 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -315.00170066513783 * this.size), (this.Y + 334.0621799391324 * this.size), 18 * this.size, 630 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -259.45010122226904 * this.size), (this.Y + -288.34604630155263 * this.size), 18 * this.size, 164 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 68.54989877773096 * this.size), (this.Y + -287.34604630155263 * this.size), 18 * this.size, 185 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 69.54989877773096 * this.size), (this.Y + -351.34604630155263 * this.size), 16 * this.size, 245 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -316.45010122226904 * this.size), (this.Y + -350.34604630155263 * this.size), 13 * this.size, 221 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 69.54989877773096 * this.size), (this.Y + -349.34604630155263 * this.size), 81 * this.size, 15 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -110.45010122226904 * this.size), (this.Y + -349.34604630155263 * this.size), 81 * this.size, 15 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + 95.10303044710872 * this.size), (this.Y + 269.1854900923722 * this.size), 80 * this.size, 15 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -83.89696955289128 * this.size), (this.Y + 268.1854900923722 * this.size), 80 * this.size, 15 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 96.10303044710872 * this.size), (this.Y + 336.1854900923722 * this.size), 15 * this.size, 220 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -312.8969695528913 * this.size), (this.Y + 336.1854900923722 * this.size), 15 * this.size, 244 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -251.89696955289128 * this.size), (this.Y + 272.1854900923722 * this.size), 15 * this.size, 184 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 96.10303044710872 * this.size), (this.Y + 270.1854900923722 * this.size), 15 * this.size, 164 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 148.0817981166192 * this.size), (this.Y + -283.2113677669672 * this.size), 122 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -252.9182018833808 * this.size), (this.Y + -281.2113677669672 * this.size), 19 * this.size, 418 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -313.9182018833808 * this.size), (this.Y + -351.2113677669672 * this.size), 19 * this.size, 629 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -314.9182018833808 * this.size), (this.Y + -352.2113677669672 * this.size), 434 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 298.0817981166192 * this.size), (this.Y + -354.2113677669672 * this.size), 434 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 240.0817981166192 * this.size), (this.Y + -282.2113677669672 * this.size), 369 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -252.9182018833808 * this.size), (this.Y + -283.2113677669672 * this.size), 369 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 296.1886316642922 * this.size), (this.Y + 69.51057477812901 * this.size), 280 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -314.8113683357078 * this.size), (this.Y + 69.51057477812901 * this.size), 280 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 239.1886316642922 * this.size), (this.Y + 70.51057477812901 * this.size), 210 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -253.8113683357078 * this.size), (this.Y + 70.51057477812901 * this.size), 219 * this.size, 19 * this.size, true, "cover"));
                    }
                }
                else if (this.information == 1 || this.information == 3)
                {
                    if (this.rotation == 0)
                    {
                        barrierList.push(new Barrier((this.X + -352.6484141752562 * this.size), (this.Y + 5.056583201428566 * this.size), 14 * this.size, 81 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -351.6484141752562 * this.size), (this.Y + 180.05658320142857 * this.size), 14 * this.size, 81 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -284.00730813386235 * this.size), (this.Y + 181.16907157481637 * this.size), 165 * this.size, 14 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -352.00730813386235 * this.size), (this.Y + 180.16907157481637 * this.size), 222 * this.size, 14 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -353.12153143917567 * this.size), (this.Y + -401.02176557870825 * this.size), 418 * this.size, 14 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -353.0176389114067 * this.size), (this.Y + -401.64031786190435 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -350.16402812763863 * this.size), (this.Y + 384.5481199386704 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -283.16402812763863 * this.size), (this.Y + 328.5481199386704 * this.size), 17 * this.size, 565 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -291.9327483010893 * this.size), (this.Y + -337.63155877421104 * this.size), 17 * this.size, 571 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 332.5977652217098 * this.size), (this.Y + 72.39857566050432 * this.size), 315 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 332.1899186921328 * this.size), (this.Y + -388.11303509621166 * this.size), 470 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 261.1899186921328 * this.size), (this.Y + -334.11303509621166 * this.size), 415 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -290.8100813078672 * this.size), (this.Y + -334.11303509621166 * this.size), 345 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 263.2680775427343 * this.size), (this.Y + 68.8379535832064 * this.size), 186 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 158.26807754273432 * this.size), (this.Y + 235.8379535832064 * this.size), 19 * this.size, 123 * this.size, true, "cover"));
                    }
                    else if (this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -282.05067501349095 * this.size), (this.Y + -345.69884110761177 * this.size), 18 * this.size, 565 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -352.05067501349095 * this.size), (this.Y + -402.69884110761177 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -350.4610800454084 * this.size), (this.Y + 383.48835759879194 * this.size), 18 * this.size, 703 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -279.4610800454084 * this.size), (this.Y + 321.48835759879194 * this.size), 18 * this.size, 572 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -348.94101745222724 * this.size), (this.Y + 73.04773762011837 * this.size), 328 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -350.9277862962408 * this.size), (this.Y + -402.00282058279026 * this.size), 483 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -281.4917117939931 * this.size), (this.Y + 75.34399152507103 * this.size), 265 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -280.91375055812387 * this.size), (this.Y + -254.7895217553155 * this.size), 331 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 271.6745730212988 * this.size), (this.Y + -17.992191157647085 * this.size), 357 * this.size, 21 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -282.39959483557413 * this.size), (this.Y + -255.53618933171174 * this.size), 21 * this.size, 123 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 269.60040516442587 * this.size), (this.Y + -194.53618933171174 * this.size), 13 * this.size, 83 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 269.60040516442587 * this.size), (this.Y + -18.53618933171174 * this.size), 13 * this.size, 83 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 269.60040516442587 * this.size), (this.Y + -346.53618933171174 * this.size), 164 * this.size, 13 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 338.60040516442587 * this.size), (this.Y + -402.53618933171174 * this.size), 220 * this.size, 13 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 337.918448012746 * this.size), (this.Y + -16.288863492356086 * this.size), 416 * this.size, 15 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 271.918448012746 * this.size), (this.Y + -16.288863492356086 * this.size), 356 * this.size, 19 * this.size, true, "cover"));
                    }
                    else if (this.rotation == 1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -254.76461160503823 * this.size), (this.Y + 156.67918668667153 * this.size), 125 * this.size, 20 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -346.17356980274053 * this.size), (this.Y + -282.7805307308754 * this.size), 360 * this.size, 20 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -402.17356980274053 * this.size), (this.Y + -350.7805307308754 * this.size), 428 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -345.26640799678626 * this.size), (this.Y + 71.42240052965963 * this.size), 210 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -402.26640799678626 * this.size), (this.Y + 71.42240052965963 * this.size), 280 * this.size, 17 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -254.26640799678626 * this.size), (this.Y + 157.42240052965963 * this.size), 125 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -255.26640799678626 * this.size), (this.Y + 262.4224005296596 * this.size), 19 * this.size, 595 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -403.26640799678626 * this.size), (this.Y + 330.4224005296596 * this.size), 19 * this.size, 805 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -329.7924752808767 * this.size), (this.Y + -284.8188159383508 * this.size), 15 * this.size, 147 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -399.7924752808767 * this.size), (this.Y + -351.8188159383508 * this.size), 14 * this.size, 217 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -16.792475280876715 * this.size), (this.Y + -352.8188159383508 * this.size), 15 * this.size, 418 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -18.792475280876715 * this.size), (this.Y + -290.8188159383508 * this.size), 20 * this.size, 358 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -195.79247528087672 * this.size), (this.Y + -350.8188159383508 * this.size), 80 * this.size, 13 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -19.792475280876715 * this.size), (this.Y + -351.8188159383508 * this.size), 80 * this.size, 13 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 382.7834973237632 * this.size), (this.Y + -354.6113350810101 * this.size), 434 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 320.7834973237632 * this.size), (this.Y + -292.6113350810101 * this.size), 370 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 383.23553115273626 * this.size), (this.Y + 72.2486958682598 * this.size), 275 * this.size, 18 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 321.23553115273626 * this.size), (this.Y + 66.2486958682598 * this.size), 210 * this.size, 18 * this.size, true, "cover"));
                    }
                    else
                    {
                        barrierList.push(new Barrier((this.X + 182.06185915521473 * this.size), (this.Y + 269.59536953791894 * this.size), 81 * this.size, 14 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 4.061859155214734 * this.size), (this.Y + 269.59536953791894 * this.size), 81 * this.size, 14 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 182.06185915521473 * this.size), (this.Y + 337.59536953791894 * this.size), 14 * this.size, 221 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 181.06185915521473 * this.size), (this.Y + 270.59536953791894 * this.size), 14 * this.size, 165 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -400.93814084478527 * this.size), (this.Y + 338.59536953791894 * this.size), 14 * this.size, 420 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -339.93814084478527 * this.size), (this.Y + 271.59536953791894 * this.size), 20 * this.size, 357 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -339.78924858457776 * this.size), (this.Y + -280.91148384610005 * this.size), 20 * this.size, 594 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -402.47870515653904 * this.size), (this.Y + -352.1669449090141 * this.size), 20 * this.size, 805 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -402.89167012012695 * this.size), (this.Y + -350.82975954236554 * this.size), 430 * this.size, 20 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 384.3356345662487 * this.size), (this.Y + -352.49287676241465 * this.size), 433 * this.size, 20 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 326.3356345662487 * this.size), (this.Y + -283.49287676241465 * this.size), 363 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -340.6643654337513 * this.size), (this.Y + -279.49287676241465 * this.size), 363 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 384.2253738771751 * this.size), (this.Y + 73.06793103569726 * this.size), 278 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -402.7746261228249 * this.size), (this.Y + 71.06793103569726 * this.size), 283 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + -340.7746261228249 * this.size), (this.Y + 70.06793103569726 * this.size), 223 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 327.2253738771751 * this.size), (this.Y + 67.06793103569726 * this.size), 216 * this.size, 19 * this.size, true, "cover"));
                        barrierList.push(new Barrier((this.X + 235.49395836527947 * this.size), (this.Y + -282.9554532277998 * this.size), 123 * this.size, 19 * this.size, true, "cover"));
                    }
                }


            }

            //barrierCreator(this.X, this.Y); //for easily setting barriers when making buildings

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 112) && X < (this.X - 112) + 212 && Y > (this.Y - 150) && Y < (this.Y - 150) + 294)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 131, 2651, 202, 256, -(1/2 * 202 * 1.2), -(1/2 * 256 * 1.2), 202 * 1.2, 256 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 131, 2651, 202, 256, -(1/2 * 202 * 1.2), -(1/2 * 256 * 1.2), 202 * 1.2, 256 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 128, 2912, 202, 256, -(1/2 * 202 * 1.2), -(1/2 * 256 * 1.2), 202 * 1.2, 256 * 1.2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X + 94), (this.Y - 150), 300, 19, true)); //left wall
                barrierList.push(new Barrier((this.X + -112), (this.Y - 150), 19, 212, true)); //bottom wall
                barrierList.push(new Barrier((this.X + -112), (this.Y + 128), 19, 212, true)); //top wall
                barrierList.push(new Barrier((this.X - 112), (this.Y - 150), 128, 19, true)); //right wall lower
                barrierList.push(new Barrier((this.X - 112), (this.Y + 36), 94, 19, true)); //right wall upper
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 112) && X < (this.X - 112) + 212 && Y > (this.Y - 150) && Y < (this.Y - 150) + 294)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 131, 2651, 202, 256, -(1/2 * 202 * 1.2), -(1/2 * 256 * 1.2), 202 * 1.2, 256 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 131, 2651, 202, 256, -(1/2 * 202 * 1.2), -(1/2 * 256 * 1.2), 202 * 1.2, 256 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 128, 2912, 202, 256, -(1/2 * 202 * 1.2), -(1/2 * 256 * 1.2), 202 * 1.2, 256 * 1.2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 112), (this.Y - 150), 294, 19, true)); //left wall
                barrierList.push(new Barrier((this.X + -112), (this.Y - 150), 19, 212, true)); //bottom wall
                barrierList.push(new Barrier((this.X + -112), (this.Y + 128), 19, 212, true)); //top wall
                barrierList.push(new Barrier((this.X + 94), (this.Y - 150), 113, 19, true)); //right wall lower
                barrierList.push(new Barrier((this.X + 94), (this.Y + 27), 120, 19, true)); //right wall upper
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 30) && X < (this.X - 30) + 230 && Y > (this.Y - 146) && Y < (this.Y - 146) + 296 || X > (this.X - 200) && X < (this.X - 200) + 182 && Y > (this.Y - 146) && Y < (this.Y - 146) + 231)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 332, 2933, 356, 257, -(1/2 * 356 * 1.2), -(1/2 * 257 * 1.2), 356 * 1.2, 257 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 332, 2933, 356, 257, -(1/2 * 356 * 1.2), -(1/2 * 257 * 1.2), 356 * 1.2, 257 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 334, 3190, 356, 257, -(1/2 * 356 * 1.2), -(1/2 * 247 * 1.2 + 8.5), 356 * 1.2, 247 * 1.2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X + 183), (this.Y - 146), 296, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 20), (this.Y - 146), 111, 19, true)); //middle wall lower
                barrierList.push(new Barrier((this.X - 20), (this.Y + 24), 124, 19, true)); //middle wall upper
                barrierList.push(new Barrier((this.X - 206), (this.Y - 146), 231, 19, true)); //right wall

                barrierList.push(new Barrier((this.X - 200), (this.Y - 146), 19, 117, true)); //bottom right wall
                barrierList.push(new Barrier((this.X - 200), (this.Y + 64), 19, 182, true)); //top right wall
                barrierList.push(new Barrier((this.X - 9), (this.Y - 146), 19, 194, true)); //bottom left wall
                barrierList.push(new Barrier((this.X - 9), (this.Y + 131), 19, 194, true)); //top left wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding4")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 35) && X < (this.X - 35) + 235 && Y > (this.Y - 85) && Y < (this.Y - 85) + 231 || X > (this.X - 200) && X < (this.X - 200) + 194 && Y > (this.Y - 146) && Y < (this.Y - 146) + 296)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 332, 2933, 356, 257, -(1/2 * 356 * 1.2), -(1/2 * 257 * 1.2), 356 * 1.2, 257 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 332, 2933, 356, 257, -(1/2 * 356 * 1.2), -(1/2 * 257 * 1.2), 356 * 1.2, 257 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 334, 3190, 356, 257, -(1/2 * 356 * 1.2), -(1/2 * 247 * 1.2 + 8.5), 356 * 1.2, 247 * 1.2);
                XXX.restore();
            }

            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X -206), (this.Y - 146), 292, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 0), (this.Y - 146), 111, 19, true)); //middle wall lower
                barrierList.push(new Barrier((this.X - 0), (this.Y + 24), 124, 19, true)); //middle wall upper
                barrierList.push(new Barrier((this.X + 186), (this.Y - 85), 231, 19, true)); //right wall

                barrierList.push(new Barrier((this.X + 82), (this.Y + 127), 19, 117, true)); //bottom right wall
                barrierList.push(new Barrier((this.X + 18), (this.Y - 82), 19, 182, true)); //top right wall
                barrierList.push(new Barrier((this.X - 200), (this.Y - 146), 19, 203, true)); //bottom left wall
                barrierList.push(new Barrier((this.X - 200), (this.Y + 127), 19, 203, true)); //top left wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding5")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 213) && X < (this.X - 213) + 425 && Y > (this.Y -145) && Y < (this.Y -145) + 282)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 66, 3443, 371, 255, -(1/2 * 371 * 1.2), -(1/2 * 255 * 1.2), 371 * 1.2, 255 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 66, 3443, 371, 255, -(1/2 * 371 * 1.2), -(1/2 * 255 * 1.2), 371 * 1.2, 255 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 63, 3706, 371, 255, -(1/2 * 371 * 1.2), -(1/2 * 255 * 1.2), 371 * 1.2, 255 * 1.2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 97), (this.Y - 46), 110, 9, true)); //alter
                barrierList.push(new Barrier((this.X - 209), (this.Y - 135), 282, 19, true)); //right wall
                barrierList.push(new Barrier((this.X -213), (this.Y - 145), 19, 425, true)); //bottom wall
                barrierList.push(new Barrier((this.X -213), (this.Y + 126), 19, 425, true)); //top wall
                barrierList.push(new Barrier((this.X + 195), (this.Y - 135), 111, 19, true)); //lower left wall
                barrierList.push(new Barrier((this.X + 195), (this.Y + 40), 105, 19, true)); //upper left wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding6")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //special fix to remove priest robe from building picture
            var imaginCC = document.createElement("canvas");
            imaginCC.width = 740 * 1.2;
            imaginCC.height = 468 * 1.2;
            var imaginCX = imaginCC.getContext("2d");
            imaginCX.drawImage(atal, 471, 3494, 740, 468, 0, 0, 740 * 1.2, 468 * 1.2);
            imaginCX.clearRect(0, 0, 150 * 1.2, 200 * 1.2);

            //DRAWSELF
            if (X > (this.X - 424) && X < (this.X - 424) + 240 && Y > (this.Y -125) && Y < (this.Y -125) + 290 || X > (this.X + 389) - 234 && X < (this.X + 389) && Y > (this.Y) - 273 && Y < (this.Y) || X > (this.X + 182) - 402 && X < (this.X + 182) && Y > (this.Y + 271) - 517 && Y < (this.Y + 271))
            {
                this.zIndex = 1;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(imaginCC, -(1/2 * 740 * 1.2), -(1/2 * 468 * 1.2));
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(imaginCC, -(1/2 * 740 * 1.2), -(1/2 * 468 * 1.2));
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1238, 3516, 740, 468, -(1/2 * 740 * 1.2) + 11, -(1/2 * 468 * 1.2), 740 * 1.2, 468 * 1.2);
                XXX.restore();
            }

            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //vertical
                barrierList.push(new Barrier((this.X - 218), (this.Y + 58), 214, 24, true)); //right room top-left wall
                barrierList.push(new Barrier((this.X - 218), (this.Y - 259), 254, 24, true)); //right room lower-left wall

                barrierList.push(new Barrier((this.X - 424), (this.Y -124), 290, 24, true)); //right room right wall

                barrierList.push(new Barrier((this.X - 17), (this.Y + 2), 102, 24, true));
                barrierList.push(new Barrier((this.X - 17), (this.Y + 164), 109, 24, true));


                barrierList.push(new Barrier((this.X + 182), (this.Y + 24), 247, 24, true)); //top room left wall

                barrierList.push(new Barrier((this.X - 17), (this.Y - 240), 102, 24, true)); //middle bottom rung

                barrierList.push(new Barrier((this.X + 389), (this.Y - 249), 102, 24, true)); //far left lower
                barrierList.push(new Barrier((this.X + 389), (this.Y - 85), 85, 24, true)); //far left upper
                //horizontal
                barrierList.push(new Barrier((this.X - 10), (this.Y + 1), 24, 422, true));

                barrierList.push(new Barrier((this.X - 210), (this.Y + 247), 24, 402, true)); //top wall

                barrierList.push(new Barrier((this.X - 210), (this.Y - 266), 24, 623, true)); //bottom wall

                barrierList.push(new Barrier((this.X - 424), (this.Y -125), 24, 210, true));

                barrierList.push(new Barrier((this.X - 424), (this.Y + 142), 24, 210, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding7")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X + 110) && X < (this.X + 110) + 236 && Y > (this.Y - 190) && Y < (this.Y - 190) + 292 || X > (this.X - 125) && X < (this.X - 125) + 271 && Y > (this.Y + 295) - 576 && Y < (this.Y + 295) || X > (this.X - 345) && X < (this.X - 345) + 236 && Y > (this.Y + 176) - 275 && Y < (this.Y + 176))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 1333, 2948, 646, 562, -(1/2 * 646 * 1.2), -(1/2 * 562 * 1.2), 646 * 1.2, 562 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 1333, 2948, 646, 562, -(1/2 * 646 * 1.2), -(1/2 * 562 * 1.2), 646 * 1.2, 562 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 1335, 2411, 646, 555, -(1/2 * 646 * 1.2), -(1/2 * 555 * 1.2), 646 * 1.2, 555 * 1.2);
                XXX.restore();
            }

            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //vertical
                barrierList.push(new Barrier((this.X - 146), (this.Y + 75), 229, 24, true)); //entry right wall

                barrierList.push(new Barrier((this.X - 146), (this.Y - 308), 324, 24, true)); //low mid right wall

                barrierList.push(new Barrier((this.X + 120), (this.Y - 308), 229, 24, true)); //low mid left wall
                barrierList.push(new Barrier((this.X + 120), (this.Y - 23), 328, 24, true)); //upper mid left wall

                barrierList.push(new Barrier((this.X + 322), (this.Y - 189), 292, 24, true)); //far left wall

                barrierList.push(new Barrier((this.X - 345), (this.Y - 91), 290, 24, true)); //far right wall
                //horizontal
                barrierList.push(new Barrier((this.X - 68), (this.Y + 282), 24, 200, true)); //entry wall

                barrierList.push(new Barrier((this.X - 345), (this.Y - 91), 24, 220, true)); //far right room lower wall
                barrierList.push(new Barrier((this.X - 345), (this.Y + 176), 24, 220, true)); //far right room upper wall

                barrierList.push(new Barrier((this.X - 125), (this.Y - 106), 24, 90, true)); //lower entry right
                barrierList.push(new Barrier((this.X + 25), (this.Y - 102), 24, 110, true)); //lower entry left

                barrierList.push(new Barrier((this.X + 128), (this.Y - 190), 24, 220, true)); //far left room lower wall
                barrierList.push(new Barrier((this.X + 128), (this.Y + 77), 24, 220, true)); //far left room upper wall


                barrierList.push(new Barrier((this.X - 125), (this.Y - 308), 24, 271, true)); //bottom wall

            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenBuilding8")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 368) && X < (this.X - 368) + 717 && Y > (this.Y + 295) - 339 && Y < (this.Y + 295) || X > (this.X - 240) && X < (this.X - 240) + 450 && Y > (this.Y + 295) - 576 && Y < (this.Y + 295))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1407, 1983, 480, 418, -(1/2 * 480 * 1.8), -(1/2 * 418 * 1.8), 480 * 1.8, 418 * 1.8);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1407, 1983, 480, 418, -(1/2 * 480 * 1.8), -(1/2 * 418 * 1.8), 480 * 1.8, 418 * 1.8);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1404, 1595, 480, 418, -(1/2 * 480 * 1.79) - 3, -(1/2 * 418 * 1.78) - 20, 480 * 1.79, 418 * 1.79);
                XXX.restore();
            }

            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //vertical
                barrierList.push(new Barrier((this.X - 368), (this.Y - 44), 349, 37, true)); //right top wall
                barrierList.push(new Barrier((this.X + 334), (this.Y - 44), 349, 37, true)); //left top wall
                barrierList.push(new Barrier((this.X - 240), (this.Y - 283), 281, 37, true)); //right lower wall
                barrierList.push(new Barrier((this.X + 163), (this.Y - 286), 244, 37, true)); //left lower wall
                //horizontal
                barrierList.push(new Barrier((this.X - 368), (this.Y - 41), 37, 150, true)); //mid right
                barrierList.push(new Barrier((this.X + 191), (this.Y - 44), 37, 150, true)); //mid left

                barrierList.push(new Barrier((this.X - 240), (this.Y - 283), 37, 159, true)); //low right
                barrierList.push(new Barrier((this.X + 15), (this.Y - 286), 37, 180, true)); //low left

                barrierList.push(new Barrier((this.X - 368), (this.Y + 273), 37, 717, true)); //top wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenCastle1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;
            //this.massive = true; //this is set by the is_Massive method.

            //if (this.runOneTime)
            //{
            //    this.runOneTime = false;
            //    this.numbo = 0;
            //}
            //if (rKey)
            //{
            //    rKey = false;
            //    this.numbo -= 0;
            //    alert(this.numbo);
            //}


            //DRAWSELF
            if (X > (this.X + 368) && X < (this.X + 368) + 300 && Y > (this.Y + 880) - 1740 && Y < (this.Y + 880) || X > (this.X - 711) && X < (this.X - 711) + 1400 && Y > (this.Y + 890) - 260 && Y < (this.Y + 890) || X > (this.X - 711) && X < (this.X - 711) + 1400 && Y > (this.Y -574) - 330 && Y < (this.Y -574) || X > (this.X - 711) && X < (this.X - 711) + 300 && Y > (this.Y + 880) - 1740 && Y < (this.Y + 880))
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1338, 843, 611, 755, -(1/2 * 611 * 2.6), -(1/2 * 755 * 2.6), 611 * 2.6, 755 * 2.6);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1338, 843, 611, 755, -(1/2 * 611 * 2.6), -(1/2 * 755 * 2.6), 611 * 2.6, 755 * 2.6);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 1338, 11, 611, 755, -(1/2 * 611 * 2.6), -(1/2 * 755 * 2.6) - 20, 611 * 2.6, 755 * 2.6);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //vertical
                barrierList.push(new Barrier((this.X - 453), (this.Y - 644), 1345, 81, true)); //inner right
                barrierList.push(new Barrier((this.X + 368), (this.Y - 644), 1345, 81, true)); //inner left

                barrierList.push(new Barrier((this.X + 653), (this.Y - 901), 1856, 50, true)); //outer left
                barrierList.push(new Barrier((this.X - 711), (this.Y - 901), 1856, 60, true)); //outer right

                //horizontal
                barrierList.push(new Barrier((this.X - 453), (this.Y + 620), 81, 845, true)); //inner top
                barrierList.push(new Barrier((this.X - 453), (this.Y -644), 70, 307, true)); //inner bottom right
                barrierList.push(new Barrier((this.X + 185), (this.Y -644), 70, 235, true)); //inner bottom left
                barrierList.push(new Barrier((this.X - 711), (this.Y - 901), 72, 563, true)); //outer bottom right
                barrierList.push(new Barrier((this.X + 185), (this.Y - 901), 72, 500, true)); //outer bottom left
                barrierList.push(new Barrier((this.X - 711), (this.Y + 880), 81, 1400, true)); //outer top
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenStableD")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 180) && X < (this.X - 180) + 333 && Y > (this.Y - 108) && Y < (this.Y - 108) + 208)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 368, 2511, 329, 209, -(1/2 * 329 * 1.2), -(1/2 * 209 * 1.2), 329 * 1.2, 209 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 368, 2511, 329, 209, -(1/2 * 329 * 1.2), -(1/2 * 209 * 1.2), 329 * 1.2, 209 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 372, 2729, 329, 209, -(1/2 * 329 * 1.2) + 3, -(1/2 * 209 * 1.2), 329 * 1.2, 209 * 1.2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X -165), (this.Y + 84), 19, 333, true)); //upper Wall

                barrierList.push(new Barrier((this.X - 180), (this.Y - 108), 208, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 159), (this.Y - 108), 208, 19, true)); //left wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenStableU")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 180) && X < (this.X - 180) + 333 && Y > (this.Y - 108) && Y < (this.Y - 108) + 208)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 368, 2511, 329, 209, -(1/2 * 329 * 1.2), -(1/2 * 209 * 1.2), 329 * 1.2, 209 * 1.2);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 368, 2511, 329, 209, -(1/2 * 329 * 1.2), -(1/2 * 209 * 1.2), 329 * 1.2, 209 * 1.2);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 372, 2729, 329, 209, -(1/2 * 329 * 1.2) + 3, -(1/2 * 209 * 1.2), 329 * 1.2, 209 * 1.2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X -210, this.Y -164, 330, 215, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;

                barrierList.push(new Barrier((this.X - 180), (this.Y - 108), 208, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 159), (this.Y - 108), 208, 19, true)); //left wall

                barrierList.push(new Barrier((this.X -165), (this.Y - 108), 19, 333, true)); //bottom Wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenStadiumCanopy")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;
            this.zIndex = 6;

            //DRAWSELF
            if (X > (this.X - 130) && X < (this.X - 130) + 260 && Y > (this.Y - 90) && Y < (this.Y - 90) + 220)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.globalAlpha = 0.1;
                XXX.drawImage(bogg, 324, 519, 169, 198, -(1/2 * 169 * 2), -(1/2 * 198 * 2), 169 * 2, 198 * 2);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(bogg, 324, 519, 169, 198, -(1/2 * 169 * 2), -(1/2 * 198 * 2), 169 * 2, 198 * 2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 230, this.Y - 245, 470, 495, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //barrierList.push(new Barrier((this.X - 91), (this.Y - 45), 90, 186, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenTiendaD")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 91) && X < (this.X - 91) + 186 && Y > (this.Y - 45) && Y < (this.Y - 45) + 90)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
                //roof
                if (this.temporary == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(0);
                    XXX.drawImage(atal, 723, 3224, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(0);
                    XXX.drawImage(atal, 1109, 3016, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 2)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(0);
                    XXX.drawImage(atal, 1109, 3123, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 3)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(0);
                    XXX.drawImage(atal, 1108, 3229, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary >= 4)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(0);
                    XXX.drawImage(atal, 143, 2535, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
            }


            //barrierList.push(new Barrier(this.X - 230, this.Y - 245, 470, 495, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //barrierList.push(new Barrier((this.X - 91), (this.Y - 45), 90, 186, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenTiendaU")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 91) && X < (this.X - 91) + 186 && Y > (this.Y - 45) && Y < (this.Y - 45) + 90)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
                //roof
                if (this.temporary == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(Math.PI);
                    XXX.drawImage(atal, 723, 3224, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(Math.PI);
                    XXX.drawImage(atal, 1109, 3016, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 2)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(Math.PI);
                    XXX.drawImage(atal, 1109, 3123, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 3)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(Math.PI);
                    XXX.drawImage(atal, 1108, 3229, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary >= 4)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(Math.PI);
                    XXX.drawImage(atal, 143, 2535, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
            }


            //barrierList.push(new Barrier(this.X - 230, this.Y - 245, 470, 495, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //barrierList.push(new Barrier((this.X - 91), (this.Y - 45), 90, 186, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenTiendaL")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 45) && X < (this.X - 45) + 90 && Y > (this.Y - 91) && Y < (this.Y - 81) + 186)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
                //roof
                if (this.temporary == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(1/2 * Math.PI);
                    XXX.drawImage(atal, 723, 3224, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(1/2 * Math.PI);
                    XXX.drawImage(atal, 1109, 3016, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 2)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(1/2 * Math.PI);
                    XXX.drawImage(atal, 1109, 3123, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 3)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(1/2 * Math.PI);
                    XXX.drawImage(atal, 1108, 3229, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary >= 4)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(1/2 * Math.PI);
                    XXX.drawImage(atal, 143, 2535, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
            }


            //barrierList.push(new Barrier(this.X - 230, this.Y - 245, 470, 495, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //barrierList.push(new Barrier((this.X - 91), (this.Y - 45), 90, 186, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "nirwadenTiendaR")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 45) && X < (this.X - 45) + 90 && Y > (this.Y - 91) && Y < (this.Y - 81) + 186)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(atal, 908, 3226, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                XXX.restore();
                //roof
                if (this.temporary == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(-1/2 * Math.PI);
                    XXX.drawImage(atal, 723, 3224, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(-1/2 * Math.PI);
                    XXX.drawImage(atal, 1109, 3016, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 2)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(-1/2 * Math.PI);
                    XXX.drawImage(atal, 1109, 3123, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary == 3)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(-1/2 * Math.PI);
                    XXX.drawImage(atal, 1108, 3229, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
                else if (this.temporary >= 4)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.globalAlpha = 0.01;
                    XXX.rotate(-1/2 * Math.PI);
                    XXX.drawImage(atal, 143, 2535, 184, 113, -(1/2 * 184 * 1.22), -(1/2 * 113 * 1.22), 184 * 1.22, 113 * 1.22);
                    XXX.restore();
                }
            }


            //barrierList.push(new Barrier(this.X - 230, this.Y - 245, 470, 495, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //barrierList.push(new Barrier((this.X - 91), (this.Y - 45), 90, 186, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 230) && X < (this.X - 230) + 450 && Y > (this.Y - 245) && Y < (this.Y - 245) + 470)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 532, 363, 199, 201, -(1/2 * 199 * 2.5), -(1/2 * 201 * 2.5), 199 * 2.5, 201 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 532, 363, 199, 201, -(1/2 * 199 * 2.5), -(1/2 * 201 * 2.5), 199 * 2.5, 201 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                //XXX.globalAlpha = 0.05;
                XXX.rotate(0);
                XXX.drawImage(freeverse, 528, 569, 199, 201, -(1/2 * 199 * 2.5) - 5, -(1/2 * 201 * 2.5) + 5, 199 * 2.5, 201 * 2.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 230, this.Y - 245, 470, 495, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 230), (this.Y - 225), 454, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 222), (this.Y - 242), 472, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 230), (this.Y - 28), 19, 250, true)); //mid section horizontal
                barrierList.push(new Barrier((this.X - 225), (this.Y + 214), 19, 462, true)); //upper wall
                barrierList.push(new Barrier((this.X + 20), (this.Y + 114), 100, 19, true)); //upper mid section vertical
                barrierList.push(new Barrier((this.X + 18), (this.Y - 93), 150, 19, true)); //mid section vertical
                barrierList.push(new Barrier((this.X + 20), (this.Y - 225), 79, 19, true)); //lower mid section vertical
                barrierList.push(new Barrier((this.X + 130), (this.Y - 242), 19, 96, true)); //left bottom horizontal
                barrierList.push(new Barrier((this.X - 230), (this.Y - 242), 19, 306, true)); //right bottom horizontal
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.playerer <= 90)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-2/3 * Math.PI);
                XXX.drawImage(freeverse, 273, 416, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-2/3 * Math.PI);
                XXX.drawImage(freeverse, 273, 416, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                //XXX.drawImage(freeverse, 306, 487, 28, 13, -(8.5 * 2.5), (19 * 2.5), 28 * 2.5, 13 * 2.5);
                XXX.drawImage(freeverse, 363, 411, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                XXX.restore();
            }

            //barrierList.push(new Barrier((this.X - 85), (this.Y - 80), 160, 150, false));

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 18), (this.Y + 60), 18, 36, true)); //top
                barrierList.push(new Barrier((this.X + 20), (this.Y + 24), 39, 18, true));
                barrierList.push(new Barrier((this.X + 39), (this.Y + -13), 38, 18, true));
                barrierList.push(new Barrier((this.X + 50), (this.Y + -50), 37, 18, true));
                barrierList.push(new Barrier((this.X + 26), (this.Y - 63), 18, 25, true));
                barrierList.push(new Barrier((this.X - 18), (this.Y - 81), 18, 44, true)); //bottom
                barrierList.push(new Barrier((this.X - 45), (this.Y - 63), 18, 28, true));
                barrierList.push(new Barrier((this.X - 66), (this.Y - 35), 20, 21, true));
                barrierList.push(new Barrier((this.X - 80), (this.Y - 17), 42, 18, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 135) && X < (this.X - 135) + 260 && Y > (this.Y - 125) && Y < (this.Y - 125) + 251)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 235, 636, 117, 113, -(1/2 * 117 * 2.5), -(1/2 * 113 * 2.5), 117 * 2.5, 113 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 235, 636, 117, 113, -(1/2 * 117 * 2.5), -(1/2 * 113 * 2.5), 117 * 2.5, 113 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 368, 636, 117, 113, -(1/2 * 117 * 2.5) - 10, -(1/2 * 113 * 2.5), 117 * 2.5, 113 * 2.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 135, this.Y - 125, 251, 260, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X + 114), (this.Y + 20), 105, 19, true)); //upper left vertical
                barrierList.push(new Barrier((this.X + 114), (this.Y - 125), 98, 19, true)); //lower left vertical
                barrierList.push(new Barrier((this.X - 135), (this.Y - 125), 251, 19, true)); //right wall
                barrierList.push(new Barrier((this.X - 135), (this.Y - 125), 19, 251, true)); //lower wall
                barrierList.push(new Barrier((this.X - 135), (this.Y + 108), 19, 251, true)); //lower wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding4")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 235) && X < (this.X - 235) + 450 && Y > (this.Y - 125) && Y < (this.Y - 125) + 251)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 253, 796, 198, 110, -(1/2 * 198 * 2.5), -(1/2 * 110 * 2.5), 198 * 2.5, 110 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 253, 796, 198, 110, -(1/2 * 198 * 2.5), -(1/2 * 110 * 2.5), 198 * 2.5, 110 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 462, 793, 198, 110, -(1/2 * 198 * 2.4), -(1/2 * 110 * 2.4) - 10, 198 * 2.4, 110 * 2.4);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 235, this.Y - 125, 251, 450, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 235), (this.Y + 107), 20, 450, true)); //upper wall
                barrierList.push(new Barrier((this.X + 214), (this.Y - 125), 251, 20, true)); //left wall
                barrierList.push(new Barrier((this.X - 235), (this.Y - 125), 20, 308, true)); //lower right horizontal
                barrierList.push(new Barrier((this.X + 128), (this.Y - 125), 20, 86, true)); //lower left horizontal
                barrierList.push(new Barrier((this.X - 235), (this.Y - 125), 251, 20, true)); //left wall
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding5")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (this.playerer <= 90)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI * 1/3);
                XXX.drawImage(freeverse, 273, 416, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI * 1/3);
                XXX.drawImage(freeverse, 273, 416, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                //XXX.drawImage(freeverse, 306, 487, 28, 13, -(8.5 * 2.5), (19 * 2.5), 28 * 2.5, 13 * 2.5);
                XXX.drawImage(freeverse, 363, 411, 64, 71, -(1/2 * 64 * 2.5), -(1/2 * 71 * 2.5), 64 * 2.5, 71 * 2.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 30), (this.Y + 65), 18, 44, true)); //top
                barrierList.push(new Barrier((this.X + 7), (this.Y + 48), 18, 38, true));
                barrierList.push(new Barrier((this.X + 25), (this.Y + 30), 18, 38, true));
                barrierList.push(new Barrier((this.X - 55), (this.Y + 48), 18, 25, true));
                barrierList.push(new Barrier((this.X - 70), (this.Y + 30), 18, 22, true));
                barrierList.push(new Barrier((this.X + 63), (this.Y - 27), 62, 18, true));
                barrierList.push(new Barrier((this.X - 52), (this.Y - 43), 36, 18, true));
                barrierList.push(new Barrier((this.X - 67), (this.Y - 7), 42, 18, true));
                barrierList.push(new Barrier((this.X - 44), (this.Y - 53), 25, 18, true));
                barrierList.push(new Barrier((this.X - 30), (this.Y - 72), 18, 61, true)); //bottom
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding6")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 135) && X < (this.X - 135) + 260 && Y > (this.Y - 125) && Y < (this.Y - 125) + 251)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 235, 636, 117, 113, -(1/2 * 117 * 2.5), -(1/2 * 113 * 2.5), 117 * 2.5, 113 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 235, 636, 117, 113, -(1/2 * 117 * 2.5), -(1/2 * 113 * 2.5), 117 * 2.5, 113 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 368, 636, 117, 113, -(1/2 * 117 * 2.5) - 10, -(1/2 * 113 * 2.5), 117 * 2.5, 113 * 2.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 135, this.Y - 125, 251, 260, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X + 114), (this.Y - 125), 251, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 135), (this.Y + 20), 105, 19, true)); //upper left vertical
                barrierList.push(new Barrier((this.X - 135), (this.Y - 125), 98, 19, true)); //lower left vertical
                barrierList.push(new Barrier((this.X - 135), (this.Y - 125), 19, 251, true)); //lower wall
                barrierList.push(new Barrier((this.X - 135), (this.Y + 108), 19, 251, true)); //lower wall
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding7")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 230) && X < (this.X - 230) + 450 && Y > (this.Y - 245) && Y < (this.Y - 245) + 470)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 741, 563, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 741, 563, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 529, 566, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 135, this.Y - 125, 251, 260, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 230), (this.Y - 225), 454, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 222), (this.Y - 242), 472, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 75), (this.Y + 214), 19, 302, true)); //left bottom horizontal
                barrierList.push(new Barrier((this.X - 225), (this.Y + 214), 19, 96, true)); //right bottom horizontal
                barrierList.push(new Barrier((this.X - 230), (this.Y - 242), 19, 462, true)); //right bottom horizontal
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding8")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 100) && X < (this.X - 100) + 205 && Y > (this.Y - 79) && Y < (this.Y - 79) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 790, 470, 110, 78, -(1/2 * 110 * 2.5), -(1/2 * 78 * 2.5), 110 * 2.5, 78 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 790, 470, 110, 78, -(1/2 * 110 * 2.5), -(1/2 * 78 * 2.5), 110 * 2.5, 78 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 790, 392, 110, 78, -(1/2 * 110 * 2.5), -(1/2 * 78 * 2.5), 110 * 2.5, 78 * 2.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 100, this.Y - 79, 251, 260, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 100), (this.Y - 65), 130, 19, true));
                barrierList.push(new Barrier((this.X + 90), (this.Y - 65), 130, 19, true));
                barrierList.push(new Barrier((this.X - 90), (this.Y + 55), 19, 60, true));
                barrierList.push(new Barrier((this.X + 38), (this.Y + 55), 19, 70, true));
                barrierList.push(new Barrier((this.X - 96), (this.Y - 79), 19, 205, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuilding9")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 100) && X < (this.X - 100) + 205 && Y > (this.Y - 79) && Y < (this.Y - 79) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 790, 470, 110, 78, -(1/2 * 110 * 2.5), -(1/2 * 78 * 2.5), 110 * 2.5, 78 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 790, 470, 110, 78, -(1/2 * 110 * 2.5), -(1/2 * 78 * 2.5), 110 * 2.5, 78 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 790, 392, 110, 78, -(1/2 * 110 * 2.5), -(1/2 * 78 * 2.5), 110 * 2.5, 78 * 2.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 100, this.Y - 79, 251, 260, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 96), (this.Y - 79 + 141), 19, 205, true));
                barrierList.push(new Barrier((this.X - 90), (this.Y + 55 - 136), 19, 60, true));
                barrierList.push(new Barrier((this.X + 38 - 13), (this.Y + 55 - 136), 19 , 70 + 14, true));
                barrierList.push(new Barrier((this.X - 100), (this.Y + 65 - 136), 130, 19, true));
                barrierList.push(new Barrier((this.X + 90), (this.Y + 65 - 136), 130, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuildingHalveR")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 230) && X < (this.X - 230) + 450 && Y > (this.Y - 245) && Y < (this.Y - 245) + 470)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(freeverse, 741, 563, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5);
                XXX.restore();
            }
            else
            {
                if (this.rotation != 10)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(Math.PI);
                    XXX.drawImage(freeverse, 741, 563, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5);
                    XXX.restore();
                    //roof
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(Math.PI);
                    XXX.drawImage(freeverse, 529, 566, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(Math.PI);
                    XXX.drawImage(freeverse, 741, 563, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5);
                    XXX.restore();
                }
            }


            //barrierList.push(new Barrier(this.X - 135, this.Y - 125, 251, 260, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 230), (this.Y - 225), 454, 19, true)); //right wall
                //barrierList.push(new Barrier((this.X + 222), (this.Y - 242), 472, 19, true)); //left wall
                barrierList.push(new Barrier((this.X - 75), (this.Y + 214), 19, 302, true)); //left bottom horizontal
                barrierList.push(new Barrier((this.X - 225), (this.Y + 214), 19, 96, true)); //right bottom horizontal
                barrierList.push(new Barrier((this.X - 230), (this.Y - 242), 19, 462, true)); //right bottom horizontal
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "freydicBuildingHalveL")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 585) && X < (this.X - 585) + 825 && Y > (this.Y - 245) && Y < (this.Y - 245) + 470)
            {
                this.zIndex = 1;
                //XXX.save();
                //XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                //XXX.rotate(Math.PI);
                //XXX.drawImage(freeverse, 741, 563, 180, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5); //198
                //XXX.restore();
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 741, 563, 170, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 170 * 2.5, 204 * 2.5); //198
                XXX.restore();
            }
            else
            {
                //this.zIndex = 6;
                //XXX.save();
                //XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                //XXX.rotate(Math.PI);
                //XXX.drawImage(freeverse, 741, 563, 180, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 2.5, 204 * 2.5); //198
                //XXX.restore();
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 741, 563, 170, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 170 * 2.5, 204 * 2.5); //198
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(freeverse, 529, 566, 198, 204, -(1/2 * 198 * 2.5), -(1/2 * 204 * 2.5), 198 * 4.6, 204 * 2.5);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 135, this.Y - 125, 251, 260, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                //barrierList.push(new Barrier((this.X - 230), (this.Y - 225), 454, 19, true)); //right wall
                barrierList.push(new Barrier((this.X + 222), (this.Y - 242), 472, 19, true)); //left wall
                //barrierList.push(new Barrier((this.X - 75), (this.Y + 214), 19, 302, true)); //left bottom horizontal
                //barrierList.push(new Barrier((this.X - 225), (this.Y + 214), 19, 96, true)); //right bottom horizontal
                barrierList.push(new Barrier((this.X - 230), (this.Y - 242), 19, 462, true)); //right bottom horizontal
                barrierList.push(new Barrier((this.X - 230), (this.Y + 214), 19, 462, true)); //right bottom horizontal
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "alzkwayaBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(chupa, 910, 163 + 3, 89, 87, -(1/2 * 89 * 2), -(1/2 * 87 * 2), 89 * 2, 87 * 2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 80), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + 64), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + -64), (this.Y + 60), 19, 140, true));
                barrierList.push(new Barrier((this.X + -74), (this.Y - 69), 19, 45, true));
                barrierList.push(new Barrier((this.X + 36), (this.Y - 69), 19, 45, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "alzkwayaBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(chupa, 910, 163 + 3, 89, 87, -(1/2 * 89 * 2), -(1/2 * 87 * 2), 89 * 2, 87 * 2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 80), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + 64), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + -64), (this.Y - 69), 19, 140, true));
                barrierList.push(new Barrier((this.X + -74), (this.Y + 60), 19, 45, true));
                barrierList.push(new Barrier((this.X + 20), (this.Y + 56), 19, 45, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "alzkwayaBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(chupa, 910, 163 + 3, 89, 87, -(1/2 * 89 * 2), -(1/2 * 87 * 2), 89 * 2, 87 * 2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 40), (this.Y - 80), 19, 90, true));
                barrierList.push(new Barrier((this.X - 40), (this.Y + 64), 19, 90, true));
                barrierList.push(new Barrier((this.X - 69), (this.Y - 64), 140, 19, true));
                barrierList.push(new Barrier((this.X + 56), (this.Y - 64), 45, 19, true));
                barrierList.push(new Barrier((this.X + 56), (this.Y + 20), 45, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "alzkwayaBuilding4")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 1.9), -(1/2 * 87 * 1.9), 89 * 1.9, 87 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(chupa, 910, 163 + 3, 89, 87, -(1/2 * 89 * 2), -(1/2 * 87 * 2), 89 * 2, 87 * 2);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 40), (this.Y - 80), 19, 90, true));
                barrierList.push(new Barrier((this.X - 40), (this.Y + 64), 19, 90, true));
                barrierList.push(new Barrier((this.X + 56), (this.Y - 64), 140, 19, true));
                barrierList.push(new Barrier((this.X - 69), (this.Y - 64), 45, 19, true));
                barrierList.push(new Barrier((this.X - 69), (this.Y + 20), 45, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "alzkwayaBuilding5")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 70 * 2.5) && X < (this.X - 70 * 2.5) + 70 * 2.5 + 54 * 2.5 && Y > (this.Y - 67 * 2.5) && Y < (this.Y - 67 * 2.5) + 67 * 2.5 + 64 * 2.5)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 4.7), -(1/2 * 87 * 4.7), 89 * 4.7, 87 * 4.7);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(chupa, 911, 251, 89, 87, -(1/2 * 89 * 4.7), -(1/2 * 87 * 4.7), 89 * 4.7, 87 * 4.7);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(chupa, 910, 163 + 4, 89, 87, -(1/2 * 89 * 4.8), -(1/2 * 87 * 4.8), 89 * 4.8, 87 * 4.8);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 60), (this.Y - 67 * 2.5), 19, 130, true));
                barrierList.push(new Barrier((this.X - 60), (this.Y + 64 * 2.5), 19, 130, true));
                barrierList.push(new Barrier((this.X + 56 * 2.5), (this.Y - 64), 140, 19, true));
                barrierList.push(new Barrier((this.X - 69 * 2.5), (this.Y - 80), 45, 19, true));
                barrierList.push(new Barrier((this.X - 69 * 2.5), (this.Y + 36), 45, 19, true));
                barrierList.push(new Barrier((this.X - 60 * 2.5), (this.Y - 126), 55, 19, true));
                barrierList.push(new Barrier((this.X - 60 * 2.5), (this.Y + 72), 55, 19, true));
                barrierList.push(new Barrier((this.X + 48 * 2.5), (this.Y - 126), 55, 19, true));
                barrierList.push(new Barrier((this.X + 48 * 2.5), (this.Y + 72), 55, 19, true));
                barrierList.push(new Barrier((this.X + 60), (this.Y - 59 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X + 60), (this.Y + 53 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X - 130), (this.Y - 59 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X - 130), (this.Y + 53 * 2.5), 19, 70, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "kellishBuilding1")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(0);
                XXX.drawImage(theng, 688, 632, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 80), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + 64), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + -64), (this.Y + 60), 19, 140, true));
                barrierList.push(new Barrier((this.X + -74), (this.Y - 69), 19, 45, true));
                barrierList.push(new Barrier((this.X + 36), (this.Y - 69), 19, 45, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "kellishBuilding2")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(Math.PI);
                XXX.drawImage(theng, 688, 632, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 80), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + 64), (this.Y - 40), 90, 19, true));
                barrierList.push(new Barrier((this.X + -64), (this.Y - 69), 19, 140, true));
                barrierList.push(new Barrier((this.X + -74), (this.Y + 60), 19, 45, true));
                barrierList.push(new Barrier((this.X + 20), (this.Y + 56), 19, 45, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "kellishBuilding3")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 *Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(theng, 688, 632, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 40), (this.Y - 80), 19, 90, true));
                barrierList.push(new Barrier((this.X - 40), (this.Y + 64), 19, 90, true));
                barrierList.push(new Barrier((this.X - 69), (this.Y - 64), 140, 19, true));
                barrierList.push(new Barrier((this.X + 56), (this.Y - 64), 45, 19, true));
                barrierList.push(new Barrier((this.X + 56), (this.Y + 20), 45, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "kellishBuilding4")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 69) && X < (this.X - 69) + 140 && Y > (this.Y - 67) && Y < (this.Y - 67) + 130)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 *Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(theng, 688, 632, 90, 80, -(1/2 * 90 * 1.9), -(1/2 * 80 * 1.9), 90 * 1.9, 80 * 1.9);
                XXX.restore();
            }


            //barrierList.push(new Barrier(this.X - 69, this.Y - 67, 130, 140, false)); // a square that covers the entire building

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 40), (this.Y - 80), 19, 90, true));
                barrierList.push(new Barrier((this.X - 40), (this.Y + 64), 19, 90, true));
                barrierList.push(new Barrier((this.X + 56), (this.Y - 64), 140, 19, true));
                barrierList.push(new Barrier((this.X - 69), (this.Y - 64), 45, 19, true));
                barrierList.push(new Barrier((this.X - 69), (this.Y + 20), 45, 19, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "kellishBuilding5")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 70 * 2.5) && X < (this.X - 70 * 2.5) + 70 * 2.5 + 54 * 2.5 && Y > (this.Y - 67 * 2.5) && Y < (this.Y - 67 * 2.5) + 67 * 2.5 + 64 * 2.5)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9 * 2.5), -(1/2 * 80 * 1.9 * 2.5), 90 * 1.9 * 2.5, 80 * 1.9 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 *Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9 * 2.5), -(1/2 * 80 * 1.9 * 2.5), 90 * 1.9 * 2.5, 80 * 1.9 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(-1/2 * Math.PI);
                XXX.drawImage(theng, 688, 632, 90, 80, -(1/2 * 90 * 1.9 * 2.5), -(1/2 * 80 * 1.9 * 2.5), 90 * 1.9 * 2.5, 80 * 1.9 * 2.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 60), (this.Y - 67 * 2.5), 19, 130, true));
                barrierList.push(new Barrier((this.X - 60), (this.Y + 64 * 2.5), 19, 130, true));
                barrierList.push(new Barrier((this.X + 56 * 2.5), (this.Y - 64), 140, 19, true));
                barrierList.push(new Barrier((this.X - 69 * 2.5), (this.Y - 80), 45, 19, true));
                barrierList.push(new Barrier((this.X - 69 * 2.5), (this.Y + 36), 45, 19, true));
                barrierList.push(new Barrier((this.X - 60 * 2.5), (this.Y - 126), 55, 19, true));
                barrierList.push(new Barrier((this.X - 60 * 2.5), (this.Y + 72), 55, 19, true));
                barrierList.push(new Barrier((this.X + 48 * 2.5), (this.Y - 126), 55, 19, true));
                barrierList.push(new Barrier((this.X + 48 * 2.5), (this.Y + 72), 55, 19, true));
                barrierList.push(new Barrier((this.X + 60), (this.Y - 59 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X + 60), (this.Y + 53 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X - 130), (this.Y - 59 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X - 130), (this.Y + 53 * 2.5), 19, 70, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "kellishBuilding6")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 135;

            //DRAWSELF
            if (X > (this.X - 70 * 2.5) && X < (this.X - 70 * 2.5) + 70 * 2.5 + 64 * 2.5 && Y > (this.Y - 67 * 2.5) && Y < (this.Y - 67 * 2.5) + 67 * 2.5 + 64 * 2.5)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9 * 2.5), -(1/2 * 80 * 1.9 * 2.5), 90 * 1.9 * 2.5, 80 * 1.9 * 2.5);
                XXX.restore();
            }
            else
            {
                this.zIndex = 6;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 *Math.PI);
                XXX.drawImage(theng, 684, 716, 90, 80, -(1/2 * 90 * 1.9 * 2.5), -(1/2 * 80 * 1.9 * 2.5), 90 * 1.9 * 2.5, 80 * 1.9 * 2.5);
                XXX.restore();
                //roof
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(1/2 * Math.PI);
                XXX.drawImage(theng, 688, 632, 90, 80, -(1/2 * 90 * 1.9 * 2.5), -(1/2 * 80 * 1.9 * 2.5), 90 * 1.9 * 2.5, 80 * 1.9 * 2.5);
                XXX.restore();
            }

            //BARRIERS
            if (this.putBarriers)
            {
                this.putBarriers = false;
                barrierList.push(new Barrier((this.X - 60), (this.Y - 67 * 2.5), 19, 130, true));
                barrierList.push(new Barrier((this.X - 60), (this.Y + 64 * 2.5), 19, 130, true));
                barrierList.push(new Barrier((this.X - 69 * 2.5), (this.Y - 64), 140, 19, true));
                barrierList.push(new Barrier((this.X + 59 * 2.5), (this.Y - 80), 45, 19, true));
                barrierList.push(new Barrier((this.X + 59 * 2.5), (this.Y + 46), 45, 19, true));
                barrierList.push(new Barrier((this.X + 48 * 2.5), (this.Y - 126), 55, 19, true));
                barrierList.push(new Barrier((this.X + 48 * 2.5), (this.Y + 72), 55, 19, true));
                barrierList.push(new Barrier((this.X - 57 * 2.5), (this.Y - 126), 55, 19, true));
                barrierList.push(new Barrier((this.X - 57 * 2.5), (this.Y + 72), 55, 19, true));
                barrierList.push(new Barrier((this.X - 130), (this.Y - 59 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X - 130), (this.Y + 53 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X + 60), (this.Y - 59 * 2.5), 19, 70, true));
                barrierList.push(new Barrier((this.X + 60), (this.Y + 53 * 2.5), 19, 70, true));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "cave")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 200;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(0);
            XXX.drawImage(freeverse, 256, 518, 141, 96, -(1/2 * 141 * 1.6), -(1/2 * 96 * 1.6), 141 * 1.6, 96 * 1.6);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "sewerDrain")
        {
            //TRAITS
            this.interactionRange = 200;
            if (this.treeHealth >= 100)
            {
                this.treeHealth = 80;
            }

            //DRAWSELF
            if (this.extra == "sewerA")
            {
                if (quests.sewerBrokenA != true)
                {
                    this.solid = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(caverna, 42, 187, 83, 87, -(1/2 * 83 * 1.6), -(1/2 * 87 * 1.6), 83 * 1.6, 87 * 1.6);
                    XXX.restore();

                    if (player.cutcut == true && this.playerer < 500)
                    {
                        var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                        if (distFromCutCut <= player.weapon.distance)
                        {
                            if (player.weapon.negateArmour >= 6)
                            {
                                this.treeHealth -= player.weapon.damage;
                            }
                            else
                            {
                                this.treeHealth -= Math.max(0, player.weapon.damage - 6);
                            }
                        }
                        if (this.treeHealth <= 0)
                        {
                            quests.sewerBrokenA = true;
                        }
                    }
                }
                else
                {
                    this.solid = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(caverna, 115, 188, 83, 87, -(1/2 * 83 * 1.6), -(1/2 * 87 * 1.6), 83 * 1.6, 87 * 1.6);
                    XXX.restore();
                }
            }
            else if (this.extra == "sewerB")
            {
                if (quests.sewerBrokenB != true)
                {
                    this.solid = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(caverna, 42, 187, 83, 87, -(1/2 * 83 * 1.6), -(1/2 * 87 * 1.6), 83 * 1.6, 87 * 1.6);
                    XXX.restore();

                    if (player.cutcut == true && this.playerer < 500)
                    {
                        var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                        if (distFromCutCut <= player.weapon.distance)
                        {
                            if (player.weapon.negateArmour >= 6)
                            {
                                this.treeHealth -= player.weapon.damage;
                            }
                            else
                            {
                                this.treeHealth -= Math.max(0, player.weapon.damage - 6);
                            }
                        }
                        if (this.treeHealth <= 0)
                        {
                            quests.sewerBrokenB = true;
                        }
                    }
                }
                else
                {
                    this.solid = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(caverna, 115, 188, 83, 87, -(1/2 * 83 * 1.6), -(1/2 * 87 * 1.6), 83 * 1.6, 87 * 1.6);
                    XXX.restore();
                }
            }
            else if (this.extra == "inside" || this.extra == "insideA" || this.extra == "insideB")
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(caverna, 42, 276, 83, 87, -(1/2 * 83 * 1.6), -(1/2 * 87 * 1.6), 83 * 1.6, 87 * 1.6);
                XXX.restore();

                this.radius = 25;
            }
            else
            {
                if (this.treeHealth > 0)
                {
                    this.solid = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(caverna, 42, 187, 83, 87, -(1/2 * 83 * 1.6), -(1/2 * 87 * 1.6), 83 * 1.6, 87 * 1.6);
                    XXX.restore();

                    if (player.cutcut == true && this.playerer < 500)
                    {
                        var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                        if (distFromCutCut <= player.weapon.distance)
                        {
                            if (player.weapon.negateArmour >= 6)
                            {
                                this.treeHealth -= player.weapon.damage;
                            }
                            else
                            {
                                this.treeHealth -= Math.max(0, player.weapon.damage - 6);
                            }
                        }
                    }
                }
                else
                {
                    this.solid = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(caverna, 115, 188, 83, 87, -(1/2 * 83 * 1.6), -(1/2 * 87 * 1.6), 83 * 1.6, 87 * 1.6);
                    XXX.restore();
                }
            }

            //solidness
            if (this.extra != "inside" && this.extra != "insideA" && this.extra != "insideB")
            {
                this.radius = 14;
                if (this.rotation == 0)
                {
                    barrierList.push(new Barrier((this.X + -42.5554787773317), (this.Y + -63.27239474087037), 63, 87, true));
                }
                else if (this.rotation == Math.PI)
                {
                    barrierList.push(new Barrier((this.X + -43.440034203537834), (this.Y + 1.78417021431369), 62, 85, true));
                }
                else if (this.rotation == 1/2 * Math.PI)
                {
                    barrierList.push(new Barrier((this.X + 1.5599657964621656), (this.Y + -42.21582978568631), 85, 63, true));
                }
                else
                {
                    barrierList.push(new Barrier((this.X + -64.44003420353783), (this.Y + -44.21582978568631), 87, 63, true));
                }
            }
            //barrierCreator(this.X, this.Y);

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                if (this.extra == "inside" || this.extra == "insideA" && quests.sewerBrokenA == true || this.extra == "insideB" && quests.sewerBrokenB == true || this.extra == "sewerA" && quests.sewerBrokenA == true || this.extra == "sewerB" && quests.sewerBrokenB == true)
                {
                    this.activate = false;
                    X = this.temporary[0];
                    Y = this.temporary[1];
                    map = this.information;
                }
            }
        }
        else if (this.type == "caves")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 200;
            if (typeof this.extra[1] == "undefined")
            {
                this.extra[1] = 1.6;
            }
            this.size = this.extra[1];

            //DRAWSELF
            if (this.extra[0] == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(caverna, 21, 83, 160, 111, -(1/2 * 160 * this.size), -(1/2 * 111 * this.size), 160 * this.size, 111 * this.size);
                XXX.restore();
            }
            else if (this.extra[0] == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(caverna, 10, 629, 161, 122, -(1/2 * 161 * this.size), -(1/2 * 122 * this.size), 161 * this.size, 122 * this.size);
                XXX.restore();
            }
            else if (this.extra[0] == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(caverna, 17, 761, 161, 122, -(1/2 * 161 * this.size), -(1/2 * 122 * this.size), 161 * this.size, 122 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(caverna, 0, 482, 161, 122, -(1/2 * 161 * this.size), -(1/2 * 122 * this.size), 161 * this.size, 122 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = (73 / 1.6) * this.size;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "arcusExit")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3), -(1/2 * 16 * 3), 18 * 3, 16 * 3);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3), -(1/2 * 16 * 3), 18 * 3, 16 * 3);

            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 25, -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 25, -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 25, -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 25, -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3) + 25, -(1/2 * 16 * 3), 18 * 3, 16 * 3);

            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 50, -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 50, -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 50, -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 50, -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3) + 50, -(1/2 * 16 * 3), 18 * 3, 16 * 3);
            XXX.restore();

            //produces light
            if (timeOfDay == "Day")
            {
                lights.push({X:this.X, Y: this.Y, size: 170, extraStops: true, GRD: 0.20, Alpha: 0.80, showMe: false});
            }
            else if (timeOfDay == "Dusk" || timeOfDay == "Dawn")
            {
                lights.push({X:this.X, Y: this.Y, size: 170, extraStops: true, GRD: 0.20, Alpha: 0.30, showMe: false});
            }
            else
            {
                lights.push({X:this.X, Y: this.Y, size: 170, extraStops: true, GRD: 0.20, Alpha: 0.05, showMe: false});
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                if (uniqueChars.gavorLDS == true)
                {
                    var arcusPay = 0;
                    for (var i = Inventory.length -1; i >= 0; i--)
                    {
                        if (Inventory[i][0].type == "alcaStone")
                        {
                            arcusPay += Math.floor(0.5 * Inventory[i][1]);
                            Inventory.splice(i, 1);
                        }
                        else if (Inventory[i][0].type == "ironOre")
                        {
                            arcusPay += Math.floor(5 * Inventory[i][1]);
                            Inventory.splice(i, 1);
                        }
                        else if (Inventory[i][0].type == "copperOre")
                        {
                            arcusPay += Math.floor(4 * Inventory[i][1]);
                            Inventory.splice(i, 1);
                        }
                        else if (Inventory[i][0].type == "rawGold")
                        {
                            arcusPay += Math.floor(92 * Inventory[i][1]);
                            Inventory.splice(i, 1);
                        }
                        else if (Inventory[i][0].type == "coal")
                        {
                            arcusPay += Math.floor(2.5 * Inventory[i][1]);
                            Inventory.splice(i, 1);
                        }
                    }

                    if (arcusPay > 0)
                    {
                        var coinHitz = -1;
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].type == "coins")
                            {
                                coinHitz = i;
                            }
                        }
                        if (coinHitz > -1)
                        {
                            Inventory[coinHitz][1] += arcusPay;
                        }
                        else
                        {
                            Inventory.unshift([new Item("coins", false, false), arcusPay]);
                        }
                    }
                }

                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "caveExit")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3), -(1/2 * 16 * 3), 18 * 3, 16 * 3);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3), -(1/2 * 16 * 3), 18 * 3, 16 * 3);

            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 25, -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 25, -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 25, -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 25, -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3) + 25, -(1/2 * 16 * 3), 18 * 3, 16 * 3);

            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 50, -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 50, -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 50, -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 50, -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3) + 50, -(1/2 * 16 * 3), 18 * 3, 16 * 3);
            XXX.restore();

            //produces light
            if (timeOfDay == "Day")
            {
                lights.push({X:this.X, Y: this.Y, size: 170, extraStops: true, GRD: 0.20, Alpha: 0.80, showMe: false});
            }
            else if (timeOfDay == "Dusk" || timeOfDay == "Dawn")
            {
                lights.push({X:this.X, Y: this.Y, size: 170, extraStops: true, GRD: 0.20, Alpha: 0.30, showMe: false});
            }
            else
            {
                lights.push({X:this.X, Y: this.Y, size: 170, extraStops: true, GRD: 0.20, Alpha: 0.05, showMe: false});
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "cavePassage")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3), -(1/2 * 16 * 3), 18 * 3, 16 * 3);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2), -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1), -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3), -(1/2 * 16 * 3), 18 * 3, 16 * 3);

            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 25, -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 25, -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 25, -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 25, -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3) + 25, -(1/2 * 16 * 3), 18 * 3, 16 * 3);

            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 50, -(1/2 * 16 * 3.2) + 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 50, -(1/2 * 16 * 3.1) + 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.2) + 50, -(1/2 * 16 * 3.2) - 38, 18 * 3.2, 16 * 3.2);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3.1) + 50, -(1/2 * 16 * 3.1) - 19, 18 * 3.1, 16 * 3.1);
            XXX.drawImage(theng, 779, 780, 18, 16, -(1/2 * 18 * 3) + 50, -(1/2 * 16 * 3), 18 * 3, 16 * 3);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "trapdoor")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 746, 821, 47, 43, -(1/2 * 47 * 1.5), -(1/2 * 43 * 1.5), 47 * 1.5, 43 * 1.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "ladder")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theng, 692, 822, 47, 43, -(1/2 * 47 * 1.5), -(1/2 * 43 * 1.5), 47 * 1.5, 43 * 1.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "metalLadder")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(chupa, 587, 260, 42, 59, -(1/2 * 42 * 1.5), -(1/2 * 59 * 1.5), 42 * 1.5, 59 * 1.5);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                X = this.temporary[0];
                Y = this.temporary[1];
                map = this.information;
            }
        }
        else if (this.type == "sewer")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(chupa, 642, 269, 37, 34, -(1/2 * 37 * 2.3), -(1/2 * 34 * 2.3), 37 * 2.3, 34 * 2.3);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(chupa, 681, 271, 37, 34, -(1/2 * 37 * 2.3), -(1/2 * 34 * 2.3), 37 * 2.3, 34 * 2.3);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                if (this.phase == 1)
                {
                    if (this.playerer <= 25)
                    {
                        X = this.temporary[0];
                        Y = this.temporary[1];
                        map = this.information;
                    }
                    else
                    {
                        this.phase = 0;
                    }
                }
                else
                {
                    this.phase = 1;
                }
            }
        }
        else if (this.type == "hatch")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 563, 93, 54, 49, -(1/2 * 54 * 2.2), -(1/2 * 49 * 2.2), 54 * 2.2, 49 * 2.2);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pill, 615, 94, 59, 49, -(1/2 * 59 * 2.2), -(1/2 * 49 * 2.2), 59 * 2.2, 49 * 2.2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && player.druidBear != true)
            {
                this.activate = false;
                if (this.phase == 1)
                {
                    if (this.playerer <= 25)
                    {
                        X = this.temporary[0];
                        Y = this.temporary[1];
                        map = this.information;
                    }
                    else
                    {
                        this.phase = 0;
                    }
                }
                else
                {
                    this.phase = 1;
                }
            }
        }
        else if (this.type == "event")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 100;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = this.rotation;

            //DRAWSELF
            if (testBarriers)
            {
                XXX.save();
                XXX.beginPath();
                XXX.fillStyle="black";
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.arc(0, 0, this.radius, 0, 2*Math.PI);
                XXX.fill();
                XXX.restore();
            }

            if (this.temporary == "theMineshaftMystery0")
            {
                if (quests.theMineshaftMysteryQuest == true)
                {
                    if (X > 3600 && Y > 2665)
                    {
                        quests.theMineshaftMysteryCompletionStyle = "stoneman";
                        quests.theMineshaftMysteryQuest = "complete";
                        if (player.class == "Mage")
                        {
                            player.magicalExperience += 50;
                        }
                        else
                        {
                            player.experience += 95;
                            player.magicalExperience += 5;
                        }
                        quests.completeQuests.push({name: "The Mineshaft Mystery", description: "You found the man who went treasure hunting in the abandoned mineshaft: He was petrified by basilisks!"});
                        player.freynorFaction += 2;
                    }
                }
            }
            else if (this.temporary == "atalinTollBridgeValidation")
            {

                    if (X < -40305 && X > - 40808 && Y < 1549 && Y > 1116)
                    {
                        quests.atalinToll = true;
                    }
            }
            else if (this.temporary == "atalinPrisonSentence")
            {
                if (this.runOneTime)
                {
                    this.runOneTime = false;
                    this.tic = 0;
                }
                if (player.nirwadenFaction <= -25)
                {
                    this.tic += 1;
                    if (this.tic >= 600)
                    {
                        this.tic = 0;
                        player.nirwadenFaction += 1;
                    }
                }
                else
                {
                    change = "getOuttaJailFree!";
                }
                if (X < -40305 && X > - 40808 && Y < 1549 && Y > 1116)
                {
                    quests.atalinToll = true;
                }
            }
            else if (this.temporary == "atalinDuendeHouse")
            {
                this.interactionRange = 1;
                var duendeLoad = 0;
                var unitPos;
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].type == "Duende" || ArtificialIntelligenceAccess[i].type == "Foux")
                    {
                        if (ArtificialIntelligenceAccess[i].type == "Duende")
                        {
                            duendeLoad += 1;
                        }

                        if (ArtificialIntelligenceAccess[i].DTP() <= 120 || ArtificialIntelligenceAccess[i].disturbed == true || this.angryDuendes == true)
                        {
                            //console.log("arena3");
                            this.angryDuendes = true;
                            ArtificialIntelligenceAccess[i].muzzle = false;
                            ArtificialIntelligenceAccess[i].disturbed = true;
                            ArtificialIntelligenceAccess[i].ID = "arena3";
                            ArtificialIntelligenceAccess[i].baseTeam = "arena3";
                            ArtificialIntelligenceAccess[i].team = "arena3";
                        }
                        else
                        {
                            //console.log("arena2");
                            ArtificialIntelligenceAccess[i].ID = "arena2";
                        }
                        unitPos = Math.sqrt((ArtificialIntelligenceAccess[i].X - this.X)*(ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y)*(ArtificialIntelligenceAccess[i].Y-this.Y));

                        if (unitPos > 200)
                        {
                            ArtificialIntelligenceAccess[i].health = ArtificialIntelligenceAccess[i].healthMAX;
                            ArtificialIntelligenceAccess[i].X = this.X + (70 - (140 * Math.random()));
                            ArtificialIntelligenceAccess[i].Y = this.Y + (70 - (140 * Math.random()));
                        }
                    }
                }
                quests.duendeInfestationDuendeLoad = duendeLoad;
            }
            else if (this.temporary == "venandiVillage")
            {
                if (this.playerer < 1722 && this.runOneTime == true)
                {
                    this.runOneTime = false;
                    ArtificialIntelligenceAccess.push(new Unit(1761.467220143321, -274546.5328912581, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(1962.8528517118675, -274883.3473478064, "Venandi", false, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(2424.806758180921, -274773.7406644493, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(2550.5370983176763, -274502.08677324647, "Venandi", false, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(1329.4982310968405, -274838.11025205586, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(840.4975298726388, -274747.9659901391, "Venandi", false, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(182.991102090899, -274971.09615767415, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(92.2335023573335, -275254.02234379016, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(95.15356900837473, -275801.9923823702, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(500.989254538023, -275804.2450462249, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(894.4658398003901, -275735.60856395675, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(1748.73507750998, -275549.5472443783, "Venandi", true, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(2322.826177787509, -275111.4666085051, "Venandi", true, "Huntar"));

                    ArtificialIntelligenceAccess.push(new Unit(481.1001574739309, -274663.8613990115, "Venandi", false, "Huntar"));
                    ArtificialIntelligenceAccess.push(new Unit(34.464232625649984, -275509.8066522656, "AraneaVenandi", false, "DoorSpider"));

                    ArtificialIntelligenceAccess.push(new Unit(2265.023123697053, -275317.37828354584, "Venandi", true, "DoorZombi"));
                    ArtificialIntelligenceAccess.push(new Unit(2242.448370307351, -275366.4766496496, "Venandi", true, "DoorZombi"));
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "viudaTunnel")
        {
            //TRAITS
            this.interactionRange = 100;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.health = 25;
                this.spider = this.temporary;
                this.spiderHunger = 40;
                this.spiderAlpha = this.information;
                this.spiderId = "blackwidow";
                this.tic = 0;
            }

            this.spiderHunger -= 0.025;

            //DRAWSELF
            if (this.health <= 0)
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 247, 290, 88, 90, -(1/2 * 88 * 1), -(1/2 * 90 * 1), 88 * 1, 90 * 1);
                XXX.restore();
            }
            else
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 139, 283, 88, 90, -(1/2 * 88 * 1), -(1/2 * 90 * 1), 88 * 1, 90 * 1);
                XXX.restore();
            }

            this.tic += 1;

            if (this.spider == true && this.health > 0)
            {
                if (this.playerer < 170 && this.spiderHunger < 20 || this.playerer < 140 && player.health < 1/3 * player.healthMAX && player.health < 13 || this.playerer < 140 && player.health < 7)
                {
                    this.spider = false;
                    var makeViuda = new Unit(this.X + 40 * Math.cos(this.rotation + Math.PI), this.Y + 40 * Math.sin(this.rotation + Math.PI), "Viuda", this.spiderAlpha, this.spiderId);
                    makeViuda.spiderHunger = this.spiderHunger;
                    ArtificialIntelligenceAccess.push(makeViuda);
                }
                else if (this.tic % 30 == 0)
                {
                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                    {
                        var ddttuu = ArtificialIntelligenceAccess[i].DTU(this);
                        if (ddttuu < 170 && this.spiderHunger < 20 || ddttuu < 140 && ArtificialIntelligenceAccess[i].health < 1/3 * ArtificialIntelligenceAccess[i].healthMAX && ArtificialIntelligenceAccess[i].health < 13 || ddttuu < 140 && ArtificialIntelligenceAccess[i].health < 7)
                        {
                            this.spider = false;
                            var makeViuda = new Unit(this.X + 40 * Math.cos(this.rotation + Math.PI), this.Y + 40 * Math.sin(this.rotation + Math.PI), "Viuda", this.spiderAlpha, this.spiderId);
                            makeViuda.spiderHunger = this.spiderHunger;
                            ArtificialIntelligenceAccess.push(makeViuda);
                            break;
                        }
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 30;

            if (player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                {
                    this.health -= player.weapon.damage;
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "vinePatch")
        {
            //TRAITS
            this.interactionRange = 100;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.size = this.temporary;
                this.health = 28 * this.size;
            }

            //DRAWSELF
            if (this.health <= 0)
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 914, 634, 70, 70, -(1/2 * 70 * this.size), -(1/2 * 70 * this.size), 70 * this.size, 70 * this.size);
                XXX.restore();
            }
            else if (this.health <= 1/2 * (28 * this.size))
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 911, 561, 70, 70, -(1/2 * 70 * this.size), -(1/2 * 70 * this.size), 70 * this.size, 70 * this.size);
                XXX.restore();
            }
            else
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 910, 484, 70, 70, -(1/2 * 70 * this.size), -(1/2 * 70 * this.size), 70 * this.size, 70 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20 * this.size;

            if (player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                {
                    this.health -= player.weapon.damage;
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "brokenWell")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(freeverse, 146, 336, 47, 40, -(1/2 * 47 * 1.6), -(1/2 * 40 * 1.6), 47 * 1.6, 40 * 1.6);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 27;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "vardanianBasin")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0) //with water
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 1953, 827, 80, 73, -(1/2 * 80 * 1), -(1/2 * 73 * 1), 80 * 1, 73 * 1);
                XXX.restore();
            }
            else //empty
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 1953, 743, 80, 73, -(1/2 * 80 * 1), -(1/2 * 73 * 1), 80 * 1, 73 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.doBreak = false;
                this.yaTiene = false;

                if (this.phase == 0)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        for (var j = 0; j < wellConversionList.length; j++)
                        {
                            //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                            if (Inventory[i][0].type == wellConversionList[j][0])
                            {
                                if (Inventory[i][0].type == "kellishClayPot" || Inventory[i][0].type == "vardanianPot" || Inventory[i][0].type == "bucket")
                                {
                                    this.phase = 1;
                                }

                                for (var k = 0; k < Inventory.length; k++)
                                {
                                    if (Inventory[k][0].type == wellConversionList[j][1])
                                    {
                                        this.yaTiene = k;
                                    }
                                }

                                if (Inventory[i][1] > 1)
                                {
                                    Inventory[i][1] -= 1;
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                                else
                                {
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.splice(i, 1);
                                        Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                        Inventory.splice(i, 1);
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                            }
                        }
                        if (this.doBreak == true)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        for (var j = 0; j < wellConversionList.length; j++)
                        {
                            //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                            if (Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "bucketOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "vardanianPotOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "kellishClayPotOfWater")
                            {
                                this.phase = 0;
                                for (var k = 0; k < Inventory.length; k++)
                                {
                                    if (Inventory[k][0].type == wellConversionList[j][0])
                                    {
                                        this.yaTiene = k;
                                    }
                                }

                                if (Inventory[i][1] > 1)
                                {
                                    Inventory[i][1] -= 1;
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                                else
                                {
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.splice(i, 1);
                                        Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                        Inventory.splice(i, 1);
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                            }
                        }
                        if (this.doBreak == true)
                        {
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "spiritBasin")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0) //with water
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 6, 3370, 60, 57, -(1/2 * 60 * 1.2), -(1/2 * 57 * 1.2), 60 * 1.2, 57 * 1.2);
                XXX.restore();
            }
            else //empty
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 84, 3372, 60, 57, -(1/2 * 60 * 1.2), -(1/2 * 57 * 1.2), 60 * 1.2, 57 * 1.2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.doBreak = false;
                this.yaTiene = false;

                if (this.phase == 0)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        for (var j = 0; j < wellConversionList.length; j++)
                        {
                            //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                            if (Inventory[i][0].type == wellConversionList[j][0])
                            {
                                if (Inventory[i][0].type == "kellishClayPot" || Inventory[i][0].type == "vardanianPot" || Inventory[i][0].type == "bucket")
                                {
                                    this.phase = 1;
                                }

                                for (var k = 0; k < Inventory.length; k++)
                                {
                                    if (Inventory[k][0].type == wellConversionList[j][1])
                                    {
                                        this.yaTiene = k;
                                    }
                                }

                                if (Inventory[i][1] > 1)
                                {
                                    Inventory[i][1] -= 1;
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                                else
                                {
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.splice(i, 1);
                                        Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                        Inventory.splice(i, 1);
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                            }
                        }
                        if (this.doBreak == true)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        for (var j = 0; j < wellConversionList.length; j++)
                        {
                            //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                            if (Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "bucketOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "vardanianPotOfWater" || Inventory[i][0].type == wellConversionList[j][1] && Inventory[i][0].type == "kellishClayPotOfWater")
                            {
                                this.phase = 0;
                                for (var k = 0; k < Inventory.length; k++)
                                {
                                    if (Inventory[k][0].type == wellConversionList[j][0])
                                    {
                                        this.yaTiene = k;
                                    }
                                }

                                if (Inventory[i][1] > 1)
                                {
                                    Inventory[i][1] -= 1;
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                                else
                                {
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.splice(i, 1);
                                        Inventory.push([new Item(wellConversionList[j][0], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                        Inventory.splice(i, 1);
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                            }
                        }
                        if (this.doBreak == true)
                        {
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "nirwadenPump")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 13;

            //INTERACTION
            if (this.activate == true)
            {
                this.doBreak = false;
                this.yaTiene = false;
                this.frameLoop([[atal, 16, 3167, 49, 63, 49 * 1.1, 63 * 1.1], [atal, 66, 3167, 49, 63, 49 * 1.1, 63 * 1.1], [atal, 17, 3225, 49, 63, 49 * 1.1, 63 * 1.1], [atal, 65, 3226, 49, 63, 49 * 1.1, 63 * 1.1], [atal, 18, 3289, 49, 63, 49 * 1.1, 63 * 1.1]],4, 18, false);
                if (this.frameLoopComplete == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 16, 3167, 49, 63, -(1/2 * 49 * 1.1), -(1/2 * 63 * 1.1), 49 * 1.1, 63 * 1.1);
                    XXX.restore();
                    this.activate = false;
                    this.frameLoopComplete = false;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        for (var j = 0; j < wellConversionList.length; j++)
                        {
                            //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                            if (Inventory[i][0].type == wellConversionList[j][0])
                            {
                                for (var k = 0; k < Inventory.length; k++)
                                {
                                    if (Inventory[k][0].type == wellConversionList[j][1])
                                    {
                                        this.yaTiene = k;
                                    }
                                }

                                if (Inventory[i][1] > 1)
                                {
                                    Inventory[i][1] -= 1;
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                                else
                                {
                                    if (this.yaTiene == false)
                                    {
                                        Inventory.splice(i, 1);
                                        Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                    }
                                    else
                                    {
                                        Inventory[this.yaTiene][1] +=1;
                                        Inventory.splice(i, 1);
                                    }
                                    this.doBreak = true;
                                    break;
                                }
                            }
                        }
                        if (this.doBreak == true)
                        {
                            break;
                        }
                    }
                }
            }
            else
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 16, 3167, 49, 63, -(1/2 * 49 * 1.1), -(1/2 * 63 * 1.1), 49 * 1.1, 63 * 1.1);
                XXX.restore();
            }
        }
        else if (this.type == "well")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF

            if (this.wellChange == true)
            {
                this.wellListo = false;
                if (this.toggleWell == true)
                {
                    this.frameLoop([[freeverse, 87, 46, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87, 85, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 145, 84, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 202, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 306, 82, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 308, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 198, 125, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 140, 126, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87.65, 125.65, 47, 40, 47 * 1.6, 40 * 1.6]], 10, 18, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = true;
                        this.wellListo = true;
                    }
                }
                else if (this.toggleWell == false)
                {
                    this.frameLoop([[freeverse, 87.65, 125.65, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 140, 126, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 198, 125, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 308, 124, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 306, 82, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 255, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 202, 83, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 145, 84, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87, 85, 47, 40, 47 * 1.6, 40 * 1.6], [freeverse, 87, 46, 47, 40, 47 * 1.6, 40 * 1.6]], 10, 18, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = false;
                        this.wellListo = true;
                    }
                }
            }

            if (this.wellChange == false)
            {
                if (this.wellUp == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 87.65, 125.65, 47, 40, -(1/2 * 47 * 1.6), -(1/2 * 40 * 1.6), 47 * 1.6, 40 * 1.6);
                    XXX.restore();
                }
                else if (this.wellUp == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(freeverse, 87, 46, 47, 40, -(1/2 * 47 * 1.6), -(1/2 * 40 * 1.6), 47 * 1.6, 40 * 1.6);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 27;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.wellListo)
                {
                    this.wellChange = true;
                    this.loopNum = 0;
                    this.loopRate = 0;
                    this.frameLoopComplete = false;

                    //fill container with water
                    if (this.wellUp == true)
                    {
                        this.doBreak = false;
                        this.yaTiene = false;

                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][0])
                                {
                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][1])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                }
                if (this.toggleWell == false && this.wellListo)
                {
                    this.toggleWell = true;
                }
                else if (this.toggleWell == true && this.wellListo)
                {
                    this.toggleWell = false;
                }
            }
        }
        else if (this.type == "vardanianWell")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF

            if (this.wellChange == true)
            {
                this.wellListo = false;
                if (this.toggleWell == true)
                {
                    this.frameLoop([[hydra, 7, 602, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 65, 601, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 122, 600, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 175, 600, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 226, 599, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 228, 641, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 175, 641, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 118, 642, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 60, 643, 51, 42, 51 * 1.6, 42 * 1.6]], 8, 18, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = true;
                        this.wellListo = true;
                    }
                }
                else if (this.toggleWell == false)
                {
                    this.frameLoop([[hydra, 60, 643, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 118, 642, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 175, 641, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 228, 641, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 226, 599, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 175, 600, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 122, 600, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 65, 601, 51, 42, 51 * 1.6, 42 * 1.6], [hydra, 7, 602, 51, 42, 51 * 1.6, 42 * 1.6]], 8, 18, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = false;
                        this.wellListo = true;
                    }
                }
            }

            if (this.wellChange == false)
            {
                if (this.wellUp == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 8, 643, 51, 42, -(1/2 * 51 * 1.6), -(1/2 * 42 * 1.6), 51 * 1.6, 42 * 1.6);
                    XXX.restore();
                }
                else if (this.wellUp == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 7, 563, 51, 42, -(1/2 * 51 * 1.6), -(1/2 * 42 * 1.6), 51 * 1.6, 42 * 1.6);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 27;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.wellListo)
                {
                    this.wellChange = true;
                    this.loopNum = 0;
                    this.loopRate = 0;
                    this.frameLoopComplete = false;

                    //fill container with water
                    if (this.wellUp == true)
                    {
                        this.doBreak = false;
                        this.yaTiene = false;

                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][0])
                                {
                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][1])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                }
                if (this.toggleWell == false && this.wellListo)
                {
                    this.toggleWell = true;
                }
                else if (this.toggleWell == true && this.wellListo)
                {
                    this.toggleWell = false;
                }
            }
        }
        else if (this.type == "thenganWell")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 80;

            //DRAWSELF

            if (this.wellChange == true)
            {
                this.wellListo = false;
                if (this.toggleWell == true)
                {
                    this.frameLoop([[theng, 333, 392, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 621 + 0.5, 208, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 622, 139 - 1, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 622 - 0.5, 74, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 621, 12, 69, 66, 69 * 1.6, 66 * 1.6]], 4, 20, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = true;
                        this.wellListo = true;
                    }
                }
                else if (this.toggleWell == false)
                {
                    this.frameLoop([[theng, 714, 208, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 714, 146 - 0.5, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 714, 83, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 715 - 0.75, 12, 69, 66, 69 * 1.6, 66 * 1.6], [theng, 333, 392, 69, 66, 69 * 1.6, 66 * 1.6]], 4, 20, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = false;
                        this.wellListo = true;
                    }
                }
            }

            if (this.wellChange == false)
            {
                if (this.wellUp == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 621, 12, 69, 66, -(1/2 * 69 * 1.6), -(1/2 * 66 * 1.6), 69 * 1.6, 66 * 1.6);
                    XXX.restore();
                }
                else if (this.wellUp == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 333, 392, 69, 66, -(1/2 * 69 * 1.6), -(1/2 * 66 * 1.6), 69 * 1.6, 66 * 1.6);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.wellListo)
                {
                    this.wellChange = true;
                    this.loopNum = 0;
                    this.loopRate = 0;
                    this.frameLoopComplete = false;

                    //fill container with water
                    if (this.wellUp == true)
                    {
                        this.doBreak = false;
                        this.yaTiene = false;

                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][0])
                                {
                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][1])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                }
                if (this.toggleWell == false && this.wellListo)
                {
                    this.toggleWell = true;
                }
                else if (this.toggleWell == true && this.wellListo)
                {
                    this.toggleWell = false;
                }
            }
        }
        else if (this.type == "cephrianWell")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 83;

            //DRAWSELF
            this.size = 1.25;
            if (this.wellChange == true)
            {
                this.wellListo = false;
                if (this.toggleWell == true)
                {
                    this.frameLoop([[jeru, 689, 677, 115, 71, 115 * this.size, 71 * this.size], [jeru, 689, 585, 115, 71, 115 * this.size, 71 * this.size], [jeru, 689, 493, 115, 71, 115 * this.size, 71 * this.size], [jeru, 689, 394, 115, 71, 115 * this.size, 71 * this.size], [jeru, 596, 118, 115, 71, 115 * this.size, 71 * this.size]], 4, 20, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = true;
                        this.wellListo = true;
                    }
                }
                else if (this.toggleWell == false)
                {
                    this.frameLoop([[jeru, 596, 118, 115, 71, 115 * this.size, 71 * this.size], [jeru, 689, 394, 115, 71, 115 * this.size, 71 * this.size], [jeru, 689, 493, 115, 71, 115 * this.size, 71 * this.size], [jeru, 689, 585, 115, 71, 115 * this.size, 71 * this.size], [jeru, 689, 677, 115, 71, 115 * this.size, 71 * this.size]], 4, 20, false);
                    if (this.frameLoopComplete == true)
                    {
                        this.wellChange = false;
                        this.wellUp = false;
                        this.wellListo = true;
                    }
                }
            }

            if (this.wellChange == false)
            {
                if (this.wellUp == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 596, 118, 115, 71, -(1/2 * 115 * this.size), -(1/2 * 71 * this.size), 115 * this.size, 71 * this.size);
                    XXX.restore();
                }
                else if (this.wellUp == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 689, 677, 115, 71, -(1/2 * 115 * this.size), -(1/2 * 71 * this.size), 115 * this.size, 71 * this.size);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 38;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.wellListo)
                {
                    this.wellChange = true;
                    this.loopNum = 0;
                    this.loopRate = 0;
                    this.frameLoopComplete = false;

                    //fill container with water
                    if (this.wellUp == true)
                    {
                        this.doBreak = false;
                        this.yaTiene = false;

                        for (var i = 0; i < Inventory.length; i++)
                        {
                            for (var j = 0; j < wellConversionList.length; j++)
                            {
                                //console.log(Inventory[i][0].type + " v.s. "  + wellConversionList[j][0]);
                                if (Inventory[i][0].type == wellConversionList[j][0])
                                {
                                    for (var k = 0; k < Inventory.length; k++)
                                    {
                                        if (Inventory[k][0].type == wellConversionList[j][1])
                                        {
                                            this.yaTiene = k;
                                        }
                                    }

                                    if (Inventory[i][1] > 1)
                                    {
                                        Inventory[i][1] -= 1;
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                    else
                                    {
                                        if (this.yaTiene == false)
                                        {
                                            Inventory.splice(i, 1);
                                            Inventory.push([new Item(wellConversionList[j][1], false, false), 1]);
                                        }
                                        else
                                        {
                                            Inventory[this.yaTiene][1] +=1;
                                            Inventory.splice(i, 1);
                                        }
                                        this.doBreak = true;
                                        break;
                                    }
                                }
                            }
                            if (this.doBreak == true)
                            {
                                break;
                            }
                        }
                    }
                }
                if (this.toggleWell == false && this.wellListo)
                {
                    this.toggleWell = true;
                }
                else if (this.toggleWell == true && this.wellListo)
                {
                    this.toggleWell = false;
                }
            }
        }
        else if (this.type == "cerebrisSporeCough")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tac = 30;
            }
            this.tac -= 8;

            if (this.tac >= 20)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 427, 775, 22, 21, -(1/2 * 22), -(1/2 * 21), 22, 21);
                XXX.restore();
            }
            else if (this.tac >= 10)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 451, 774, 22, 21, -(1/2 * 22), -(1/2 * 21), 22, 21);
                XXX.restore();
            }
            else if (this.tac > 0)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 475, 775, 22, 21, -(1/2 * 22), -(1/2 * 21), 22, 21);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 427, 775, 22, 21, -(1/2 * 22), -(1/2 * 21), 22, 21);
                XXX.restore();
                if (this.tac <= 0)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            this.X += Math.cos(this.rotation) * 3;
            this.Y += Math.sin(this.rotation) * 3;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //infect
            if (this.dst(X, Y) <= this.radius)
            {
                if (player.resistDisease == false)
                {
                    if (player.venandi <= 0)
                    {
                        player.venandi = 1;
                    }
                }
                else if (player.health < 1/3 * player.healthMAX)
                {
                    if (player.venandi <= 0)
                    {
                        player.venandi = 1;
                    }
                }
            }


            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].type == "Etyr" || ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].type == "Soldier" || ArtificialIntelligenceAccess[j].type == "Aranea" || ArtificialIntelligenceAccess[j].type == "Crenid" || ArtificialIntelligenceAccess[j].type == "LeafCutterAnter")
                    {
                        if (ArtificialIntelligenceAccess[j].venandi <= 0 && ArtificialIntelligenceAccess[j].resistDisease != true)
                        {
                            ArtificialIntelligenceAccess[j].venandi = 1;
                        }
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "cerebrisSpores")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tac = 130;
                this.spin = 0;
                this.rotation = Math.random() * 2*Math.PI;
                if (Math.random() > 0.6)
                {
                    this.speed = 5;
                }
                else
                {
                    this.speed = 4;
                }
            }
            this.tac -= 3;
            this.spin += 0.025;

            if (this.tac >= 115)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 157, 612, 44, 46, -(1/2 * 44), -(1/2 * 46), 44, 46);
                XXX.restore();
            }
            else if (this.tac >= 100)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 220, 607, 52, 53, -(1/2 * 52), -(1/2 * 53), 52, 53);
                XXX.restore();
            }
            else if (this.tac >= 85)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 285, 605, 52, 53, -(1/2 * 52), -(1/2 * 53), 52, 53);
                XXX.restore();
            }
            else if (this.tac >= 60)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.65;
                XXX.drawImage(jungho, 353, 598, 63, 63, -(1/2 * 63), -(1/2 * 63), 63, 63);
                XXX.restore();
            }
            else if (this.tac >= 45)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.75;
                XXX.drawImage(jungho, 110, 675, 94, 97, -(1/2 * 94), -(1/2 * 97), 94, 97);
                XXX.restore();
            }
            else if (this.tac >= 30)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.65;
                XXX.drawImage(jungho, 110, 675, 94, 97, -(1/2 * 94), -(1/2 * 97), 94, 97);
                XXX.restore();
            }
            else if (this.tac >= 15)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.75;
                XXX.drawImage(jungho, 110, 675, 94, 97, -(1/2 * 94), -(1/2 * 97), 94, 97);
                XXX.restore();
            }
            else if (this.tac > 0)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.65;
                XXX.drawImage(jungho, 110, 675, 94, 97, -(1/2 * 94), -(1/2 * 97), 94, 97);
                XXX.restore();
            }
            else
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.45;
                XXX.drawImage(jungho, 110, 675, 94, 97, -(1/2 * 94), -(1/2 * 97), 94, 97);
                XXX.restore();
                if (this.tac <= 0)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            this.X += Math.cos(this.rotation) * this.speed;
            this.Y += Math.sin(this.rotation) * this.speed;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 95;

            //infect
            if (this.dst(X, Y) <= this.radius)
            {
                if (player.resistDisease == false)
                {
                    if (player.venandi <= 0)
                    {
                        player.venandi = 1;
                    }
                }
                else if (player.health < 1/3 * player.healthMAX)
                {
                    if (player.venandi <= 0)
                    {
                        player.venandi = 1;
                    }
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].type == "Etyr" || ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].type == "Soldier" || ArtificialIntelligenceAccess[j].type == "Aranea" || ArtificialIntelligenceAccess[j].type == "Crenid" || ArtificialIntelligenceAccess[j].type == "LeafCutterAnter")
                    {
                        if (ArtificialIntelligenceAccess[j].venandi <= 0 && ArtificialIntelligenceAccess[j].resistDisease != true)
                        {
                            ArtificialIntelligenceAccess[j].venandi = 1;
                        }
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "athergmSpores")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tac = 130;
                this.spin = 0;
                this.rotation = Math.random() * 2*Math.PI;
                if (Math.random() > 0.6)
                {
                    this.speed = 3;
                }
                else
                {
                    this.speed = 2;
                }
            }
            this.tac -= 2;
            this.spin += 0.05;

            if (this.tac >= 115)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 513, 954, 47, 45, -(1/2 * 47), -(1/2 * 45), 47, 45);
                XXX.restore();
            }
            else if (this.tac >= 110)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 575, 946, 56, 57, -(1/2 * 56), -(1/2 * 57), 56, 57);
                XXX.restore();
            }
            else if (this.tac >= 105)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 641, 944, 56, 57, -(1/2 * 56), -(1/2 * 57), 56, 57);
                XXX.restore();
            }
            else if (this.tac >= 100)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 710, 938, 65, 65, -(1/2 * 65), -(1/2 * 65), 65, 65);
                XXX.restore();
            }
            else if (this.tac >= 45)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 403, 926, 88, 93, -(1/2 * 88), -(1/2 * 93), 88, 93);
                XXX.restore();
            }
            else if (this.tac >= 30)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.65;
                XXX.drawImage(jungho, 403, 926, 88, 93, -(1/2 * 88), -(1/2 * 93), 88, 93);
                XXX.restore();
            }
            else if (this.tac >= 15)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 403, 926, 88, 93, -(1/2 * 88), -(1/2 * 93), 88, 93);
                XXX.restore();
            }
            else if (this.tac > 0)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.65;
                XXX.drawImage(jungho, 403, 926, 88, 93, -(1/2 * 88), -(1/2 * 93), 88, 93);
                XXX.restore();
            }
            else
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.55;
                XXX.drawImage(jungho, 403, 926, 88, 93, -(1/2 * 88), -(1/2 * 93), 88, 93);
                XXX.restore();
                if (this.tac <= 0)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            this.X += Math.cos(this.rotation) * this.speed;
            this.Y += Math.sin(this.rotation) * this.speed;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 95;

            //infect
            if (player.resistDisease == false)
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    if (player.form != "venandi")
                    {
                        player.energy -= 0.6;
                        player.stunnedTime = 6;
                        player.stunnedII = true;
                        player.poisonI = true;
                        for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                        {
                            if (ArtificialIntelligenceAccess[j].baseTeam != "player" && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                            {
                                if (ArtificialIntelligenceAccess[j].target == player)
                                {
                                    ArtificialIntelligenceAccess[j].disturbed = true;
                                }
                            }
                        }
                    }
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].team != "venandi" && ArtificialIntelligenceAccess[j].resistDisease != true)
                    {
                        ArtificialIntelligenceAccess[j].charmedTeam = (Math.random() * 1.7888888889);
                        ArtificialIntelligenceAccess[j].charmedTime = new Date().getTime() + 55000;
                        ArtificialIntelligenceAccess[j].marked = "shome";

                        ArtificialIntelligenceAccess[j].stunTime = new Date().getTime();
                        ArtificialIntelligenceAccess[j].stunTimer = 6;
                        ArtificialIntelligenceAccess[j].stunII = true;

                        ArtificialIntelligenceAccess[j].acidI = true;
                        ArtificialIntelligenceAccess[j].acidTime = Math.max(new Date().getTime() + 90000, ArtificialIntelligenceAccess[j].acidTime);
                        ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "xiumSpores")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tac = 0;
                this.spin = 0;
                this.tim = 0;
                this.rotation = Math.random() * 2*Math.PI;
                if (Math.random() > 0.6)
                {
                    this.speed = 0.9;
                }
                else
                {
                    this.speed = 0.8;
                }
                this.size = 0.4;
            }

            if (this.size < 2.9)
            {
                this.size += 0.02;
            }
            this.radius = 32 * this.size;
            this.tac += 1;
            this.spin += 0.022;
            this.tim += 1;

            if (this.tim > 770)
            {
                if (this.tac <= 2)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.1;
                    XXX.drawImage(fect, 646, 3, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
                else if (this.tac <= 4)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.1;
                    XXX.drawImage(fect, 730, 67, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.tac = 0;
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.1;
                    XXX.drawImage(fect, 646, 3, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
            }
            else if (this.tim > 700)
            {
                if (this.tac <= 2)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.2;
                    XXX.drawImage(fect, 646, 3, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
                else if (this.tac <= 4)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.2;
                    XXX.drawImage(fect, 730, 67, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.tac = 0;
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.2;
                    XXX.drawImage(fect, 646, 3, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
            }
            else
            {
                if (this.tac <= 2)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.4;
                    XXX.drawImage(fect, 646, 3, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
                else if (this.tac <= 4)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.4;
                    XXX.drawImage(fect, 730, 67, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.tac = 0;
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.globalAlpha = 0.4;
                    XXX.drawImage(fect, 646, 3, 63, 58, -(1/2 * 63 * this.size), -(1/2 * 58 * this.size), 63 * this.size, 58 * this.size);
                    XXX.restore();
                }
            }

            if (this.tim > 800)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //move
            this.X += Math.cos(this.rotation) * this.speed;
            this.Y += Math.sin(this.rotation) * this.speed;

            //infect
            if (player.resistDisease == false)
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    if (player.form != "venandi")
                    {
                        player.asfixiationII = true;
                        player.asfixiationTime = Math.max(20, player.asfixiationTime);
                        player.energilTime = Math.max(player.energilTime, 800);
                        player.fatigueIV = true;
                        player.poisonII = true;
                    }
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].team != "venandi" && ArtificialIntelligenceAccess[j].resistDisease != true)
                    {
                        ArtificialIntelligenceAccess[j].acidIII = true;
                        ArtificialIntelligenceAccess[j].acidTime = Math.max(ArtificialIntelligenceAccess[j].acidTime, new Date().getTime() + 140000);
                        ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                    }
                }
            }

            for (var j = 0; j < scenicList.length; j++)
            {
                if (scenicList[j].type == "selvaTree" && scenicList[j].xiumGrowth <= 0 || scenicList[j].type == "sonjaTree" && scenicList[j].xiumGrowth <= 0)
                {
                    if (this.dst(scenicList[j].X, scenicList[j].Y) <= this.radius + 3/4 * scenicList[j].radius && scenicList[j].dmx == this.dmx)
                    {
                        scenicList[j].xiumGrowth = 2;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "bloatGas")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tac = 0.33;
                this.tic = 0;
                this.spin = 0;
                this.transp = 1;
                this.rotation = Math.random() * 2*Math.PI;
                if (Math.random() > 0.6)
                {
                    this.speed = 0.82;
                }
                else
                {
                    this.speed = 0.52;
                }
            }

            if (this.tac < 2.4 || this.temporary == true)
            {
                this.tac += 0.002;
                if (this.temporary == false)
                {
                    this.transp -= 0.0005;
                }
                else
                {
                    this.tac = this.information;
                    this.transp = 0.85;
                }
            }

            this.tic += 1;

            this.spin += 0.001;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.spin);
            XXX.globalAlpha = this.transp;
            XXX.drawImage(bloat, 113, 401, 155, 143, -(1/2 * 155 * this.tac), -(1/2 * 143 * this.tac), 155 * this.tac, 143 * this.tac);
            XXX.restore();

            if (this.temporary == false)
            {
                this.X += Math.cos(this.rotation) * this.speed;
                this.Y += Math.sin(this.rotation) * this.speed;
            }
            else
            {
                this.spin += 0.001;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90 * this.tac;

            //infect
            if (player.resistDisease == false)
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    player.decay += 0.0055;
                    player.health -= 0.025;
                    player.energy -= 0.055;
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].resistances.indexOf("decay") == -1)
                    {
                        if (ArtificialIntelligenceAccess[j].resistDisease != true)
                        {
                            ArtificialIntelligenceAccess[j].health -= 0.1;
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }
                    }
                }
            }

            if (this.transp < 0.5 && this.temporary == false)
            {
                this.transp -= 0.025;

                if (this.transp < 0.05)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "heskGas")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tac = 0.33;
                this.spin = 0;
                this.transp = 1;
                this.speed = 0.6;
            }

            if (this.tac < 5.5 || this.temporary == true)
            {
                this.tac += 0.01;
                if (this.temporary == false)
                {
                    this.transp -= 0.001;
                }
                else
                {
                    this.tac = this.information;
                    this.transp = 0.85;
                }
            }

            this.spin -= 0.0001;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.spin);
            XXX.globalAlpha = this.transp;
            XXX.drawImage(ruin, 10, 128, 106, 101, -(1/2 * 106 * this.tac), -(1/2 * 101 * this.tac), 106 * this.tac, 101 * this.tac);
            XXX.restore();

            if (this.temporary == false)
            {
                this.X += Math.cos(this.rotation) * this.speed;
                this.Y += Math.sin(this.rotation) * this.speed;
            }
            else
            {
                this.spin += 0.001;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 44 * this.tac;

            //infect
            if (player.cyberArmour != true && player.radProof != true)
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    player.health -= 0.025;
                    if (player.resistDisease == false)
                    {
                        player.asfixiationII = true;
                        player.asfixiationTime = Math.max(75, player.asfixiationTime);
                    }
                    player.swollenVI = true;
                    player.swollenTime = Math.max(player.swollenTime, 75);
                }
            }


            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].hazmatted != true)
                    {
                        if (ArtificialIntelligenceAccess[j].resistDisease != true)
                        {
                            ArtificialIntelligenceAccess[j].health -= 0.15;
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }
                        else
                        {
                            ArtificialIntelligenceAccess[j].health -= 0.075;
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }
                    }
                }
            }

            if (this.transp < 0.5 && this.temporary == false)
            {
                this.transp -= 0.025;

                if (this.transp < 0.05)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "dragonFire")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.zIndex = 6;

                this.tac = 0.1;
                this.tic = 0;
                this.spin = 0;
                this.burn = 0;
                this.transp = 1;
                this.team = this.information;

                this.spinDir = Math.round(Math.random());

                if (this.extra == true)
                {
                    this.speed = 17 + (14.5 * this.temporary);
                }
                else
                {
                    this.speed = 17 + (14 * this.temporary);
                }
            }

            if (this.tac < (this.temporary * 1.5))
            {
                this.tac += (1/50 * this.temporary);
                this.transp -= (1/125 * this.temporary);

                if (this.spinDir == 1)
                {
                    this.spin += 0.025;
                }
                else
                {
                    this.spin -= 0.025;
                }

                this.X += Math.cos(this.rotation) * this.speed;
                this.Y += Math.sin(this.rotation) * this.speed;
            }
            else
            {
                this.speed = 0;
                this.zIndex = 1;
            }

            this.tic += 1;
            this.burn += 1;

            //DRAWSELF
            if (this.tic <= 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2147, 36, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2145, 261, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2154, 485, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2153, 702, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2154, 941, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 6)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2153, 1166, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 7)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2159, 1395, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2159, 1609, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = this.transp;
                XXX.drawImage(drake, 2147, 36, 232, 196, -(1/2 * 232 * this.tac), -(1/2 * 196 * this.tac), 232 * this.tac, 196 * this.tac);
                XXX.restore();
                this.tic = 0;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 135 * this.tac;

            //affect
            if (player.dragonRider != true && player.antiDragonFire != true && this.team != "player")
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    player.health -= ((10 * this.temporary) - (0.001 * player.heatResistance));
                    player.dragonFireKeepTime = new Date().getTime();
                    player.dragonFireMult = Math.max(player.dragonFireMult, this.temporary);
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].resistances.indexOf("dragonFire") == -1 && this.team != ArtificialIntelligenceAccess[j].team)
                    {
                        ArtificialIntelligenceAccess[j].dragonFireMult = this.temporary;
                        ArtificialIntelligenceAccess[j].dragonFireKeepTime = new Date().getTime();
                        ArtificialIntelligenceAccess[j].health -= ((10 * this.temporary) - (0.001 * ArtificialIntelligenceAccess[j].heatResistance));
                        if (this.team == "player")
                        {
                            ArtificialIntelligenceAccess[j].killByPlayerTeam = true;
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }
                        else
                        {
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }
                    }
                }
            }

            if (this.burn > 300)
            {
                this.transp -= 0.025;

                if (this.transp < 0.05)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "motylekhCocoon")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.phase = 2;
                this.tic = 0;
                this.toc = 0;
            }

            if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1099, 613, 80, 48, -(1 / 2 * 80 * 1.2), -(1 / 2 * 48 * 1.2), 80 * 1.2, 48 * 1.2);
                XXX.restore();
                this.toc += 1;
                if (this.toc > 45)
                {
                    this.phase = 3;
                }
            }
            else if (this.phase == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(moth, 1098, 661, 80, 48, -(1 / 2 * 80 * 1.2), -(1 / 2 * 48 * 1.2), 80 * 1.2, 48 * 1.2);
                XXX.restore();
            }
            else if (this.phase == "hatching")
            {
                this.tic += 1;
                if (player.mothfear == true)
                {
                    if (this.tic < 9)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(mawt, 860, 1052, 146, 99, -(1 / 2 * 146 * 1.4), -(1 / 2 * 99 * 1.4), 146 * 1.4, 99 * 1.4);
                        XXX.restore();
                    }
                    else if (this.tic < 18)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(mawt, 1008, 1044, 179, 122, -(1 / 2 * 179 * 1.4), -(1 / 2 * 122 * 1.4), 179 * 1.4, 122 * 1.4);
                        XXX.restore();
                    }
                    else if (this.tic < 27)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(mawt, 1247, 1043, 179, 122, -(1 / 2 * 179 * 1.4), -(1 / 2 * 122 * 1.4), 179 * 1.4, 122 * 1.4);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(mawt, 1247, 1043, 179, 122, -(1 / 2 * 179 * 1.4), -(1 / 2 * 122 * 1.4), 179 * 1.4, 122 * 1.4);
                        XXX.restore();
                        this.phase = "hatched";
                    }
                }
                else
                {
                    if (this.tic < 9)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(moth, 860, 1052, 146, 99, -(1 / 2 * 146 * 1.2), -(1 / 2 * 99 * 1.2), 146 * 1.2, 99 * 1.2);
                        XXX.restore();
                    }
                    else if (this.tic < 18)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(moth, 1008, 1044, 179, 122, -(1 / 2 * 179 * 1.2), -(1 / 2 * 122 * 1.2), 179 * 1.2, 122 * 1.2);
                        XXX.restore();
                    }
                    else if (this.tic < 27)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(moth, 1247, 1043, 179, 122, -(1 / 2 * 179 * 1.2), -(1 / 2 * 122 * 1.2), 179 * 1.2, 122 * 1.2);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1 / 2 * CCC.width, Y - this.Y + 1 / 2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(moth, 1247, 1043, 179, 122, -(1 / 2 * 179 * 1.2), -(1 / 2 * 122 * 1.2), 179 * 1.2, 122 * 1.2);
                        XXX.restore();
                        this.phase = "hatched";
                    }
                }
            }
            else if (this.phase == "broken")
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            this.eggHatchTimer += 1 * (TTD / 16.75);
            if (this.eggHatchTimer >= 2777 && this.phase == 3)
            {
                this.phase = "hatching";
            }

            //HATCHING
            if (this.phase == "hatched")
            {
                if (Math.round(Math.random()))
                {
                    var newby = new Unit(this.X, this.Y, "Motylekh", true, "Motylek Strakha");

                    ArtificialIntelligenceAccess.push(newby);
                }
                else
                {
                    var newby = new Unit(this.X, this.Y, "Motylekh", false, "Motylek Strakha");

                    ArtificialIntelligenceAccess.push(newby);
                }

                this.phase = "broken";
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.phase = "broken";
            }
        }
        else if (this.type == "motylekhDust")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.tac = this.information;
                this.spin = 0;
                this.transp = 7;
                if (Math.random() > 0.6)
                {
                    this.speed = 1.14;
                }
                else
                {
                    this.speed = 1.04;
                }

                this.zIndex = 6;
            }

            if (this.temporary == false)
            {
                this.transp -= 0.005;
            }
            else
            {
                this.transp = 1;
            }

            if (this.transp <= 0)
            {
                this.phase = 1;
            }

            this.tic += 1;

            //DRAWSELF
            if (player.mothfear == true)
            {
                if (this.phase == 0)
                {
                    this.spin += 0.01;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.drawImage(mawt, 1178, 10, 147, 134, -(1/2 * 147 * this.tac), -(1/2 * 134 * this.tac), 147 * this.tac, 134 * this.tac);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.drawImage(mawt, 1174, 172, 147, 134, -(1/2 * 147 * this.tac), -(1/2 * 134 * this.tac), 147 * this.tac, 134 * this.tac);
                    XXX.restore();
                }
            }
            else
            {
                if (this.phase == 0)
                {
                    this.spin += 0.01;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.drawImage(moth, 1178, 10, 147, 134, -(1/2 * 147 * this.tac), -(1/2 * 134 * this.tac), 147 * this.tac, 134 * this.tac);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation + this.spin);
                    XXX.drawImage(moth, 1174, 172, 147, 134, -(1/2 * 147 * this.tac), -(1/2 * 134 * this.tac), 147 * this.tac, 134 * this.tac);
                    XXX.restore();
                }
            }

            if (this.temporary == false && this.phase == 0)
            {
                this.X += Math.cos(this.rotation) * this.speed * (this.transp / 7);
                this.Y += Math.sin(this.rotation) * this.speed * (this.transp / 7);
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 70 * this.tac;

            //infect
            if (player.resistDisease == false && this.phase == 0)
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    player.swollenII = true;
                    player.swollenTime = Math.max(player.swollenTime, 80);

                    player.energy -= 0.025;

                    player.mothfearKeepTime = new Date().getTime();
                    player.mothfearTime = 80;
                }
            }

            if (this.phase == 0)
            {
                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        if (ArtificialIntelligenceAccess[j].resistDisease != true && ArtificialIntelligenceAccess[j].type != "Motylekh")
                        {
                            ArtificialIntelligenceAccess[j].stunIII = true;
                            ArtificialIntelligenceAccess[j].stunTimer = 2;
                            ArtificialIntelligenceAccess[j].stunTime = new Date().getTime();

                            ArtificialIntelligenceAccess[j].mothfearTime = 80;
                            ArtificialIntelligenceAccess[j].mothfearKeepTime = new Date().getTime();
                        }
                    }
                }
            }

            if (this.transp < -27 && this.temporary == false)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "bahabGas")
        {
            var szx = 2;
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tac = 100;
                this.spin = 0;
            }
            this.tac -= 6;
            this.spin -= 0.1;

            if (this.tac >= 80)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.95;
                XXX.drawImage(jungho, 595, 743, 31, 29, -(1/2 * 31 * szx), -(1/2 * 29 * szx), 31 * szx, 29 * szx);
                XXX.restore();
            }
            else if (this.tac >= 60)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.95;
                XXX.drawImage(jungho, 555, 736, 38, 38, -(1/2 * 38 * szx), -(1/2 * 38 * szx), 38 * szx, 38 * szx);
                XXX.restore();
            }
            else if (this.tac >= 30)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.95;
                XXX.drawImage(jungho, 501, 733, 44, 43, -(1/2 * 44 * szx), -(1/2 * 43 * szx), 44 * szx, 43 * szx);
                XXX.restore();
            }
            else if (this.tac >= 10)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.75;
                XXX.drawImage(jungho, 501, 733, 44, 43, -(1/2 * 44 * szx), -(1/2 * 43 * szx), 44 * szx, 43 * szx);
                XXX.restore();
            }
            else if (this.tac > -10)
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.5;
                XXX.drawImage(jungho, 501, 733, 44, 43, -(1/2 * 44 * szx), -(1/2 * 43 * szx), 44 * szx, 43 * szx);
                XXX.restore();
            }
            else
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.globalAlpha = 0.25;
                XXX.drawImage(jungho, 501, 733, 44, 43, -(1/2 * 44 * szx), -(1/2 * 43 * szx), 44 * szx, 43 * szx);
                XXX.restore();
                if (this.tac <= -20)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 85;

            if (player.resistDisease == false)
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    player.bahabTime = 150;
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "pixiDust")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.tac = 1.5;
                this.toc = 0;
                this.spinSort = Math.round(Math.random());
                this.spin = 0;
            }

            //DRAWSELF
            if (this.spinSort == true)
            {
                this.spin += 0.0000001
            }
            else
            {
                this.spin -= 0.0000001
            }
            this.tic += 2.5;
            if (this.tic <= 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.drawImage(pixi, 421, 9, 96, 67, -(1/2 * 96 * this.tac), -(1/2 * 67 * this.tac), 96 * this.tac, 67 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 10)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.drawImage(pixi, 550, 11, 96, 67, -(1/2 * 96 * this.tac), -(1/2 * 67 * this.tac), 96 * this.tac, 67 * this.tac);
                XXX.restore();
            }
            else if (this.tic <= 15)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.drawImage(pixi, 673, 13, 96, 67, -(1/2 * 96 * this.tac), -(1/2 * 67 * this.tac), 96 * this.tac, 67 * this.tac);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + this.spin);
                XXX.drawImage(pixi, 550, 11, 96, 67, -(1/2 * 96 * this.tac), -(1/2 * 67 * this.tac), 96 * this.tac, 67 * this.tac);
                XXX.restore();
                this.tic = 0;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 80 * this.tac;

            //infect
            if (player.resistDisease == false && player.vamprism == false)
            {
                if (this.dst(X, Y) <= this.radius)
                {
                    player.pixiDusted = true;
                    player.energy = Math.min(player.energyMAX, player.energy + 1);
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                {
                    if (ArtificialIntelligenceAccess[j].resistances.indexOf("pixi") == -1 && ArtificialIntelligenceAccess[j].resistances.indexOf("pixiDust") == -1)
                    {
                        if (ArtificialIntelligenceAccess[j].resistDisease != true && ArtificialIntelligenceAccess[j].vamprism != true)
                        {
                            ArtificialIntelligenceAccess[j].pixiDusted = true;
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }
                    }
                }
            }

            if (this.temporary == false)
            {
                this.toc += 0.25;

                if (this.toc > 100)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "forge")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(verse, 2907, 149, 35, 19, -(1/2 * 70), -(1/2 * 38), 70, 38);
            XXX.restore();

            //produce light
            if (timeOfDay != "Day")
            {
                lights.push({X:this.X, Y: this.Y, size: 100, extraStops: true, GRD: 0.25, Alpha: 0.875, showMe: false});
            }

            //produce heat
            if (this.playerer <= 105)
            {
                player.warmth += Math.max(0, (0.90 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                player.craftPosition = 0;
                craftScroll = 0;
                crafting = "forging";
                lowBar = "crafting";
                gameState = "paused";
            }
        }
        else if (this.type == "forger")
        {
            //TRAITS
            this.solid = true;

            this.interactionRange = 90;

            if (this.runOneTime)
            {
                this.runOneTime = false;
            }

            //animate
            if (timeOfDay != "Day")
            {
                lights.push({X: this.X, Y: this.Y, size: 115, extraStops: true, GRD: 0.1, Alpha: 0.9, showMe: false});
            }
            this.fireCostume += 1;

            //DRAWSELF

            if (this.fireCostume <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 566, 517.75, 57, 70, -(1/2 * 57 * 1.1), -(1/2 * 70 * 1.1), 57 * 1.1, 70 * 1.1);
                XXX.restore();
            }
            else if (this.fireCostume > 8 && this.fireCostume <= 16)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 565.4, 590.25, 57, 70, -(1/2 * 57 * 1.1), -(1/2 * 70 * 1.1), 57 * 1.1, 70 * 1.1);
                XXX.restore();
            }
            else if (this.fireCostume > 16 && this.fireCostume <= 24)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 567.5, 664.25, 57, 70, -(1/2 * 57 * 1.1), -(1/2 * 70 * 1.1), 57 * 1.1, 70 * 1.1);
                XXX.restore();
            }
            else
            {
                magicList.push(new Magic({ID:"smoke", CNX: 50}, false, {X:this.X + Math.cos(this.rotation + 0.8/2*Math.PI) * 35, Y:this.Y + Math.sin(this.rotation + 0.8/2*Math.PI) * 35, rotation: this.rotation}, false, true));
                this.fireCostume = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 566, 518, 57, 70, -(1/2 * 57 * 1.1), -(1/2 * 70 * 1.1), 57 * 1.1, 70 * 1.1);
                XXX.restore();
            }

            if (this.playerer <= 115)
            {
                player.warmth += Math.max(0, (0.9 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 40;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                player.craftPosition = 0;
                craftScroll = 0;
                crafting = "forging";
                lowBar = "crafting";
                gameState = "paused";
            }
        }
        else if (this.type == "loom")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(verse, 2841, 139, 34, 26, -(1/2 * 68), -(1/2 * 52), 68, 52);
            XXX.drawImage(verse, 2841, 139, 34, 26, -(1/2 * 68), -(1/2 * 52), 68, 52);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                player.craftPosition = 0;
                craftScroll = 0;
                crafting = "tailoring";
                lowBar = "crafting";
                gameState = "paused";
            }
        }
        else if (this.type == "brew")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 80;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(candlewic, 62, 170, 25, 22, -(1/2 * 25 * 3.25), -(1/2 * 22 * 3.25), 25 * 3.25, 22 * 3.25);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 33;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                player.craftPosition = 0;
                craftScroll = 0;
                crafting = "brewing";
                lowBar = "crafting";
                gameState = "paused";
            }
        }
        else if (this.type == "lab")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(verse, 2890, 125, 32, 22, -(1/2 * 64), -(1/2 * 44), 64, 44);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                player.craftPosition = 0;
                craftScroll = 0;
                crafting = "alchemy";
                lowBar = "crafting";
                gameState = "paused";
            }
        }
        else if (this.type == "spellOilPot")
        {
            //TRAITS
            this.solid = true;

            this.interactionRange = 90;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.spellOiledFull = this.information;
            }

            //animate
            this.fireCostume += 1;

            //DRAWSELF

            if (this.spellOiledFull > 0)
            {
                if (this.fireCostume <= 8)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 121, 113, 42, 41, -(1/2 * 42 * 1.2), -(1/2 * 41 * 1.2), 42 * 1.2, 41 * 1.2);
                    XXX.restore();
                }
                else if (this.fireCostume > 8 && this.fireCostume <= 16)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 165, 113, 42, 41, -(1/2 * 42 * 1.2), -(1/2 * 41 * 1.2), 42 * 1.2, 41 * 1.2);
                    XXX.restore();
                }
                else if (this.fireCostume > 16 && this.fireCostume <= 24)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 210, 114, 42, 41, -(1/2 * 42 * 1.2), -(1/2 * 41 * 1.2), 42 * 1.2, 41 * 1.2);
                    XXX.restore();
                }
                else if (this.fireCostume > 24 && this.fireCostume <= 32)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 255, 114, 42, 41, -(1/2 * 42 * 1.2), -(1/2 * 41 * 1.2), 42 * 1.2, 41 * 1.2);
                    XXX.restore();
                }
                else
                {
                    this.fireCostume = 0;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 210, 114, 42, 41, -(1/2 * 42 * 1.2), -(1/2 * 41 * 1.2), 42 * 1.2, 41 * 1.2);
                    XXX.restore();
                }
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 76, 112, 42, 41, -(1/2 * 42 * 1.2), -(1/2 * 41 * 1.2), 42 * 1.2, 41 * 1.2);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.spellOiledFull > 0)
                {
                    if (have("glassBottle", 1))
                    {
                        take("glassBottle", 1);
                        give("spellOil", 1);
                        this.spellOiledFull -= 1;
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-40);
                        }
                    }
                }
            }
        }
        else if (this.type == "cauldron")
        {
            //TRAITS
            this.solid = true;

            this.interactionRange = 90;

            if (this.runOneTime)
            {
                this.runOneTime = false;
            }

            //animate
            this.fireCostume += 1;

            //DRAWSELF

            if (this.fireCostume <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 668, 520.5, 95, 48, -(1/2 * 95 * 1.1), -(1/2 * 48 * 1.1), 95 * 1.1, 48 * 1.1);
                XXX.restore();
            }
            else if (this.fireCostume > 8 && this.fireCostume <= 16)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 670, 566, 95, 48, -(1/2 * 95 * 1.1), -(1/2 * 48 * 1.1), 95 * 1.1, 48 * 1.1);
                XXX.restore();
            }
            else if (this.fireCostume > 16 && this.fireCostume <= 24)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 670, 615.25, 95, 48, -(1/2 * 95 * 1.1), -(1/2 * 48 * 1.1), 95 * 1.1, 48 * 1.1);
                XXX.restore();
            }
            else if (this.fireCostume > 24 && this.fireCostume <= 32)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 671, 661.55, 95, 48, -(1/2 * 95 * 1.1), -(1/2 * 48 * 1.1), 95 * 1.1, 48 * 1.1);
                XXX.restore();
            }
            else
            {
                this.fireCostume = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 668, 520.5, 95, 48, -(1/2 * 95 * 1.1), -(1/2 * 48 * 1.1), 95 * 1.1, 48 * 1.1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                player.craftPosition = 0;
                craftScroll = 0;
                crafting = "alchemy";
                lowBar = "crafting";
                gameState = "paused";
            }
        }
        else if (this.type == "pyre")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                if (this.temporary != true)
                {
                    this.lit = true;
                }
                else
                {
                    this.lit = "burnt";
                }
                this.randomPire = Math.random();
                this.tic = 0;
                this.toc = 0;
            }

            //DRAWSELF
            if (this.temporary == true)
            {
                if (quests.doPire == true)
                {
                    quests.doPire = false;
                    this.lit = true;
                }

                if (this.toc > 300)
                {
                    this.lit = "burnt";
                    this.toc = 0;
                    this.tic = 0;
                }

                if (this.lit == false)
                {
                    this.solid = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 20, 13, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                    XXX.restore();
                }
                else
                {
                    if (this.lit == "burnt")
                    {
                        this.solid = false;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 93, 15, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                        XXX.restore();
                    }
                    else
                    {
                        if (this.playerer <= this.radius) //fire burns the player but heat resistance can reduce the damage it does.
                        {
                            if (player.mageShield > 0)
                            {
                                player.mageShield -= 0.125;
                                player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                            }
                            else
                            {
                                player.health += player.mageShield;
                                player.mageShield = 0;

                                player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                                player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                                player.burningTime = new Date().getTime();
                            }
                        }
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) < this.radius)
                            {
                                ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                            }
                        }
                        this.solid = true;
                        //produce light
                        if (timeOfDay != "Day")
                        {
                            lights.push({X:this.X, Y: this.Y, size: 200, extraStops: true, GRD: 0.1, Alpha: 0.875, showMe: false});
                        }
                        //produce heat
                        if (this.playerer <= 105)
                        {
                            player.warmth += Math.max(0, (0.90 - (player.heatResistance / 200)));
                        }

                        this.tic += 2.5;

                        if (this.tic <= 10)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(folw, 18, 83, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                            XXX.restore();
                        }
                        else if (this.tic <= 20)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(folw, 93, 85, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                            XXX.restore();
                        }
                        else
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(folw, 15, 157, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                            XXX.restore();

                            if (this.tic >= 30)
                            {
                                this.tic = 0;
                                this.toc += 1;
                            }
                        }
                    }
                }
            }
            else
            {
                this.solid = false;
                if (this.randomPire > 0.5)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 92, 161, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                    XXX.restore();
                }
                else if (this.randomPire > 0.3)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 93, 15, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                    XXX.restore();
                }
                else
                {
                    if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
                    {
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) < (this.radius * 9/10))
                            {
                                ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                            }
                        }
                        if (player.mageShield > 0)
                        {
                            player.mageShield -= 0.125;
                            player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                        }
                        else
                        {
                            player.health += player.mageShield;
                            player.mageShield = 0;

                            player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                            player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                            player.burningTime = new Date().getTime();
                        }
                    }

                    //produce light
                    if (timeOfDay != "Day")
                    {
                        lights.push({X:this.X, Y: this.Y, size: 200, extraStops: true, GRD: 0.1, Alpha: 0.875, showMe: false});
                    }
                    //produce heat
                    if (this.playerer <= 188)
                    {
                        player.warmth += Math.max(0, (0.90 - (player.heatResistance / 200)));
                    }


                    this.tic += 2.5;
                    if (this.tic <= 10)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 18, 83, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                        XXX.restore();
                    }
                    else if (this.tic <= 20)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 93, 85, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 15, 157, 70, 67, -(1/2 * 70 * 2.3), -(1/2 * 67 * 2.3), 70 * 2.3, 67 * 2.3);
                        XXX.restore();

                        if (this.tic >= 30)
                        {
                            this.tic = 0;
                        }
                    }
                }

            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 66;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                //the player can light the pire as well
                if (this.lit == false && this.temporary == true)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.lit = true;
                    }
                    else
                    {
                        dClick = true;
                    }
                }
            }
        }
        else if (this.type == "skeleton")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.4;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(mofu, 1303, 79, 64, 55, -(1/2 * 64 * this.size), -(1/2 * 55 * this.size), 64 * this.size, 55 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "bones")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 0.94 * 1.3;
            }

            //DRAWSELF
            if (this.information == 0) //small bone pile ribs
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 348, 25, 41, 48, -(1/2 * 41 * this.size), -(1/2 * 48 * this.size), 41 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 1) //small bone pile no ribs
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 410, 44, 41, 48, -(1/2 * 41 * this.size), -(1/2 * 48 * this.size), 41 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 2) //small bone pile no ribs no skull
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 416, 95, 41, 48, -(1/2 * 41 * this.size), -(1/2 * 48 * this.size), 41 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 3) //skull
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 208, 7, 41, 48, -(1/2 * 41 * this.size), -(1/2 * 48 * this.size), 41 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 4) //skeleton
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 484, 89, 81, 48, -(1/2 * 81 * this.size), -(1/2 * 48 * this.size), 81 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 5) //sitting skeleton
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 563, 85, 81, 48, -(1/2 * 81 * this.size), -(1/2 * 48 * this.size), 81 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 6) //skeleton with sword
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1742, 25, 81, 48, -(1/2 * 81 * this.size), -(1/2 * 48 * this.size), 81 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 7) //sitting skeleton with sword
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1716, 96, 81, 48, -(1/2 * 81 * this.size), -(1/2 * 48 * this.size), 81 * this.size, 48 * this.size);
                XXX.restore();
            }
            else if (this.information == 8) //crushed-bone-golem
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1396, 23, 141, 131, -(1/2 * 141 * this.size), -(1/2 * 131 * this.size), 141 * this.size, 131 * this.size);
                XXX.restore();
            }
            else if (this.information == 9) //bone pile
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1041, 26, 141, 131, -(1/2 * 141 * this.size), -(1/2 * 131 * this.size), 141 * this.size, 131 * this.size);
                XXX.restore();
            }
            else if (this.information == 10) //bone pile spread
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 878, 43, 113, 106, -(1/2 * 113 * this.size), -(1/2 * 106 * this.size), 113 * this.size, 106 * this.size);
                XXX.restore();
            }
            else if (this.information == 11) //bone pile compact
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 741, 37, 113, 106, -(1/2 * 113 * this.size), -(1/2 * 106 * this.size), 113 * this.size, 106 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "propWagon")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.5;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(polpol, 209, 279, 87, 63, -(1/2 * 87 * this.size), -(1/2 * 63 * this.size), 87 * this.size, 63 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 28 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "clayDeposit")
        {

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.phase = longevity;
            }

            //TRAITS
            this.solid = false;
            this.interactionRange = 50 + 9 * this.phase;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(mufmuf, 1, 4, 11, 10, -(1/2 * 11 * 2 * this.phase), -(1/2 * 10 * 2 * this.phase), 11 * 2 * this.phase, 10 * 2 * this.phase);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9 * this.phase;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.phase -= 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "clay")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("clay", false, false), 1]);
                }

                if (this.phase < 1)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }
        }
        else if (this.type == "sparks")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0.79;
                this.fireCostume = 0;
            }

            //Permanence
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.tic -= 0.04;
                if (this.tic < 0.04)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned * 2;
            }
            else
            {
                this.size = 2;
            }

            //DRAWSELF
            if (this.fireCostume <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.globalAlpha = this.tic;
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 125, 778, 23, 24, -(1/2 * 23 * this.size / 2), -(1/2 * 24 * this.size / 2), 23 * this.size / 2, 24 * this.size / 2);
                XXX.restore();
            }
            else if (this.fireCostume > 8 && this.fireCostume <= 16)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.globalAlpha = this.tic;
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 152, 779, 23, 24, -(1/2 * 23 * this.size / 2), -(1/2 * 24 * this.size / 2), 23 * this.size / 2, 24 * this.size / 2);
                XXX.restore();
            }
            else if (this.fireCostume > 16 && this.fireCostume <= 24)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.globalAlpha = this.tic;
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 174, 778, 23, 24, -(1/2 * 23 * this.size / 2), -(1/2 * 24 * this.size / 2), 23 * this.size / 2, 24 * this.size / 2);
                XXX.restore();
            }
            else if (this.fireCostume > 24 && this.fireCostume <= 32)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.globalAlpha = this.tic;
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 200, 778, 23, 24, -(1/2 * 23 * this.size / 2), -(1/2 * 24 * this.size / 2), 23 * this.size / 2, 24 * this.size / 2);
                XXX.restore();
            }
            else
            {
                this.fireCostume = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.globalAlpha = this.tic;
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 152, 779, 23, 24, -(1/2 * 23 * this.size / 2), -(1/2 * 24 * this.size / 2), 23 * this.size / 2, 24 * this.size / 2);
                XXX.restore();
            }

            this.fireCostume += 7;

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14 * this.size;

            //FUNCTIONALITY
            if (timeOfDay != "Day" || player.underground == true && this.dmx == map)
            {
                lights.push({X: this.X, Y: this.Y, size: 14 * this.size, extraStops: true, GRD: 0, Alpha: this.tic, showMe: false});
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "babosaSlime")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0.99;
            }

            this.tic -= 0.03;
            if (this.tic < 0.03)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.5;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.globalAlpha = this.tic;
            XXX.rotate(this.rotation);
            XXX.drawImage(zapa, 347, 266, 28, 21, -(1/2 * 28 * this.size), -(1/2 * 21 * this.size), 28 * this.size, 21 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14 * this.size;

            //FUNCTIONALITY
            if (player.acidII == false && player.areBootsEquipped == false && player.armourTotal < 9 && player.outfitEquipped != "jungleHunterOutfit")
            {
                if (Math.sqrt((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y)) <= this.radius)
                {
                    player.acidII = true;
                    player.acidTime = Math.max(player.acidTime, new Date().getTime() + 39000);
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (ArtificialIntelligenceAccess[j].acidII == false && ArtificialIntelligenceAccess[j].armour < 9 && ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].acidII == false && ArtificialIntelligenceAccess[j].armour < 9 && ArtificialIntelligenceAccess[j].type == "Soldier" || ArtificialIntelligenceAccess[j].acidII == false && ArtificialIntelligenceAccess[j].armour < 9 && ArtificialIntelligenceAccess[j].type == "Changeling" || ArtificialIntelligenceAccess[j].acidII == false && ArtificialIntelligenceAccess[j].armour < 4 && ArtificialIntelligenceAccess[j].type != "Person" && ArtificialIntelligenceAccess[j].type != "Soldier" && ArtificialIntelligenceAccess[j].type != "Changeling")
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        ArtificialIntelligenceAccess[j].acidII = true;
                        ArtificialIntelligenceAccess[j].acidTime = Math.max(new Date().getTime() + 39000, ArtificialIntelligenceAccess[j].acidTime);
                        ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "spiritBearFade")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0.99;
                this.tac = this.information;
                this.zIndex = 3;
            }

            this.tic -= 0.03;
            if (this.tic < 0.03)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.5;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.globalAlpha = this.tic;
            XXX.rotate(this.rotation);
            if (this.tac == 0)
            {
                XXX.drawImage(polypol, 908, 1133, 70, 52, -1/2 * 70 * this.temporary, -1/2 * 52 * this.temporary, 70 * this.temporary, 52 * this.temporary);
            }
            else if (this.tac == 1)
            {
                XXX.drawImage(polypol, 832, 1131, 70, 52, -1/2 * 70 * this.temporary, -1/2 * 52 * this.temporary, 70 * this.temporary, 52 * this.temporary);
            }
            else if (this.tac == 2)
            {
                XXX.drawImage(polypol, 976, 1133, 70, 52, -1/2 * 70 * this.temporary, -1/2 * 52 * this.temporary, 70 * this.temporary, 52 * this.temporary);
            }
            else
            {
                XXX.drawImage(polypol, 832, 1131, 70, 52, -1/2 * 70 * this.temporary, -1/2 * 52 * this.temporary, 70 * this.temporary, 52 * this.temporary);
            }
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19 * this.size;

            //FUNCTIONALITY
            if (player.druidBear == false && player.stunnedIII == false && this.magicalResistanceTotal < 4)
            {
                if (Math.sqrt((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y)) <= this.radius)
                {
                    //player.blinded = true;
                    //player.blindedStoreTime = new Date().getTime();
                    //player.blindedTime = Math.max(player.blindedTime, 2);
                    magicList.push(new Magic({ID: "entanglement", CNX: 50}, false, [X, Y]));
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (ArtificialIntelligenceAccess[j].team != "docile" && ArtificialIntelligenceAccess[j].stunIV == false && ArtificialIntelligenceAccess[j].magicalResistance < 4 && ArtificialIntelligenceAccess[j].team != "neutral2" && ArtificialIntelligenceAccess[j].team != "neutral" && ArtificialIntelligenceAccess[j].type != "SpiritBear" && ArtificialIntelligenceAccess[j].type != "Skriatok" && ArtificialIntelligenceAccess[j].type != "Sprite")
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        //ArtificialIntelligenceAccess[j].blindedTime = new Date().getTime() + (2000);
                        magicList.push(new Magic({ID: "entanglement", CNX: 50}, false, [ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y]));
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "utSlime")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.5;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.globalAlpha = 0.4;
            XXX.rotate(this.rotation);
            XXX.drawImage(freeverse, 473, 921, 85, 66, -(1/2 * 85 * this.size), -(1/2 * 66 * this.size), 85 * this.size, 66 * this.size);
            XXX.restore();

            //Permanence
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                if (new Date().getTime() >= this.loopTimer + 8400)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 35 * this.size;

            //FUNCTIONALITY
            if (player.stunnedI == false)
            {
                if (Math.sqrt((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y)) <= this.radius)
                {
                    player.stunnedI = true;
                    player.stunnedTime = 1;
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (ArtificialIntelligenceAccess[j].stunI == false)
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        ArtificialIntelligenceAccess[j].stunI = true;
                        ArtificialIntelligenceAccess[j].stunTimer = Math.max(ArtificialIntelligenceAccess[j].stunTimer, 6);
                        ArtificialIntelligenceAccess[j].stunTime = new Date().getTime();
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "anemoneSlime")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.5;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.globalAlpha = 0.4;
            XXX.rotate(this.rotation);
            XXX.drawImage(norc, 824, 184, 31, 28, -(1/2 * 31 * this.size), -(1/2 * 28 * this.size), 31 * this.size, 28 * this.size);
            XXX.restore();

            //Permanence
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                if (new Date().getTime() >= this.loopTimer + 10000)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 12 * this.size;

            //FUNCTIONALITY
            if (player.acidI == false && this.size < 1 || player.acidIII == false && this.size < 2 || player.acidIV == false && this.size >= 2)
            {
                if (Math.sqrt((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y)) <= this.radius)
                {
                    if (this.size < 1)
                    {
                        player.acidI = true;
                        player.acidTime = new Date().getTime() + 3000;
                    }
                    else if (this.size < 2)
                    {
                        player.acidIII = true;
                        player.acidTime = new Date().getTime() + 4000;
                    }
                    else
                    {
                        player.acidIV = true;
                        player.acidTime = new Date().getTime() + 4500;
                    }
                }
            }

            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (Math.sqrt((ArtificialIntelligenceAccess[j].X - this.X) * (ArtificialIntelligenceAccess[j].X - this.X) + (ArtificialIntelligenceAccess[j].Y - this.Y) * (ArtificialIntelligenceAccess[j].Y - this.Y)) <= this.radius)
                {
                    if (this.size < 1)
                    {
                        ArtificialIntelligenceAccess[j].acidI = true;
                        ArtificialIntelligenceAccess[j].acidTime = new Date().getTime() + 3000;
                        ArtificialIntelligenceAccess[j].killNotByPlayer = true;

                    }
                    else if (this.size < 2)
                    {
                        ArtificialIntelligenceAccess[j].acidIII = true;
                        ArtificialIntelligenceAccess[j].acidTime = new Date().getTime() + 4000;
                        ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                    }
                    else
                    {
                        ArtificialIntelligenceAccess[j].acidIV = true;
                        ArtificialIntelligenceAccess[j].acidTime = new Date().getTime() + 4500;
                        ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "cheshire")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;
            if (this.temporary.alpha)
            {
                this.size = 1.1;
            }
            else
            {
                this.size = 1;
            }

            this.zIndex = 6;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.globalAlpha = 0.14;
            XXX.drawImage(tomb, 532, 540, 40, 31, -(1/2 * 40 * this.size), -(1/2 * 31 * this.size), 40 * this.size, 31 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            this.stayInTree = false;
            for (var i = 0; i < scenicList.length; i++)
            {
                if (scenicList[i].type == "pineTree")
                {
                    if (scenicList[i].treePhase == 0)
                    {
                        if ((scenicList[i].X - this.X)*(scenicList[i].X - this.X) + (scenicList[i].Y - this.Y)*(scenicList[i].Y - this.Y) <= 25)
                        {
                            this.stayInTree = true;
                            break;
                        }
                    }
                }
            }

            if (this.stayInTree == false)
            {
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Cheshire", this.temporary.alpha, this.temporary.ID, this.temporary.ultra));
                ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].health = this.temporary.health;
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            if (this.playerer <= 280)
            {
                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Cheshire", this.temporary.alpha, this.temporary.ID, this.temporary.ultra));
                ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].health = this.temporary.health;
                scenicList.splice(scenicList.indexOf(this), 1);
            }
            else
            {
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].DTU(this) < 280 && ArtificialIntelligenceAccess[i].health <= 60 && ArtificialIntelligenceAccess[i].type != "Sprite")
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Cheshire", this.temporary.alpha, this.temporary.ID, this.temporary.ultra));
                        ArtificialIntelligenceAccess[(ArtificialIntelligenceAccess.length - 1)].health = this.temporary.health;
                        scenicList.splice(scenicList.indexOf(this), 1);
                        break;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "lilypads")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1.2;

            //DRAWSELF
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 114, 3, 83, 84, -(1/2 * 83 * this.size), -(1/2 * 84 * this.size), 83 * this.size, 84 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 219, 5, 92, 90, -(1/2 * 92 * this.size), -(1/2 * 90 * this.size), 92 * this.size, 90 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 332, 5, 92, 90, -(1/2 * 92 * this.size), -(1/2 * 90 * this.size), 92 * this.size, 90 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "ghoulDen")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 40;
            }

            if (this.health > 40)
            {
                this.health = 40;
            }

            //DRAWSELF
            if (this.health > 22)
            {
                if (this.inhabitants.length > 0)
                {
                    this.health += 0.15;
                }

                for (var i = 0; i < this.inhabitants.length; i++)
                {
                    //hunger
                    if (this.inhabitants[i].hunger > 180)
                    {
                        this.inhabitants[i].hunger = 180;
                    }
                    this.inhabitants[i].hunger -= 0.05;
                    //console.log(this.inhabitants[i].hunger);

                    //reproduction
                    if (this.inhabitants[i].alpha == true && this.inhabitants[i].gender == 1)
                    {
                        if (this.inhabitants[i].genes.fecundidad == true) //testicles for males
                        {
                            this.inhabitants[i].horny += 1.2;
                        }
                        else
                        {
                            this.inhabitants[i].horny += 0.6;
                        }
                    }

                    if (this.inhabitants[i].alpha == false && this.inhabitants[i].eggs == false && this.inhabitants[i].gender == 0) //ovaries for females
                    {
                        if (this.inhabitants[i].genes.fecundidad == true)
                        {
                            this.inhabitants[i].eggsT += 1.2;
                        }
                        else
                        {
                            this.inhabitants[i].eggsT += 0.6;
                        }

                        if (this.inhabitants[i].eggsT >= 800)
                        {
                            this.inhabitants[i].eggs = true;
                            this.inhabitants[i].eggsT = 0;
                        }
                    }

                    //aging process
                    if (this.inhabitants[i].genes.fecundidad == true)
                    {
                        this.inhabitants[i].trueAge += 0.005;
                        this.inhabitants[i].age += 0.002;
                    }
                    else
                    {
                        this.inhabitants[i].trueAge += 0.005;
                        this.inhabitants[i].age += 0.005;
                    }

                    //xxxy time
                    if (this.inhabitants[i].horny >= 800 && this.inhabitants[i].alpha == true && this.inhabitants[i].gender == 1)
                    {
                        for (var j = 0; j < this.inhabitants.length; j++)
                        {
                            if (this.inhabitants[j].alpha == false && this.inhabitants[j].gender == 0 && this.inhabitants[j].eggs == true)
                            {
                                this.inhabitants[j].eggs = "fecundo";
                                this.inhabitants[i].horny = 0;
                                this.inhabitants[i].dadGenes = this.inhabitants[i].genes;
                                break;
                            }
                        }
                    }
                }

                for (var i = 0; i < this.inhabitants.length; i++)
                {
                    if (this.inhabitants[i].hunger < 90 || this.inhabitants[i].eggs == "fecundo" && this.inhabitants[i].hunger < 170)
                    {
                        var makeGhoul = new Unit(this.X, this.Y, "Ghoul", this.inhabitants[i].alpha, "ghoul");
                        //{hunger: this.hunger, healthMAX: this.healthMAX, eggs: this.eggs, eggsT: this.eggsT, horny: this.horny, gender: this.gender, alpha: this.alpha, age: this.age, trueAge: this.trueAge, genes: this.genes, home: this.home, dadGenes: this.dadGenes}
                        makeGhoul.hunger = this.inhabitants[i].hunger;
                        makeGhoul.healthMAX = this.inhabitants[i].healthMAX;
                        makeGhoul.eggs = this.inhabitants[i].eggs;
                        makeGhoul.eggsT = this.inhabitants[i].eggsT;
                        makeGhoul.horny = this.inhabitants[i].horny;
                        makeGhoul.gender = this.inhabitants[i].gender;
                        makeGhoul.speed = this.inhabitants[i].speed;
                        makeGhoul.swimSpeed = this.inhabitants[i].swimSpeed;
                        makeGhoul.age = this.inhabitants[i].age;
                        makeGhoul.trueAge = this.inhabitants[i].trueAge;
                        makeGhoul.genes = this.inhabitants[i].genes;
                        makeGhoul.home = this.inhabitants[i].home;
                        makeGhoul.dadGenes = this.inhabitants[i].dadGenes;

                        ArtificialIntelligenceAccess.push(makeGhoul);
                        this.inhabitants.splice(this.inhabitants.indexOf(this.inhabitants[i]), 1);
                        break;
                    }
                }
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 310, 721, 106, 106, -(1/2 * 106 * this.size), -(1/2 * 106 * this.size), 106 * this.size, 106 * this.size);
                XXX.restore();
            }
            else if (this.health > 0)
            {
                if (this.inhabitants.length > 0)
                {
                    this.health += 0.3;
                }
                for (var i = 0; i < this.inhabitants.length; i++)
                {
                    //hunger
                    this.inhabitants[i].hunger -= 0.2;
                }
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 428, 723, 106, 106, -(1/2 * 106 * this.size), -(1/2 * 106 * this.size), 106 * this.size, 106 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 537, 724, 106, 106, -(1/2 * 106 * this.size), -(1/2 * 106 * this.size), 106 * this.size, 106 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 64;

            if (player.weaponEquipped == "spade" && player.cutcut == true && this.playerer < 500 || player.weaponEquipped == "pickaxe" && player.cutcut == true && this.playerer < 500)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.distance)
                {
                    if (player.weaponEquipped == "spade")
                    {
                        this.health -= 8;
                    }
                    else
                    {
                        this.health -= 4;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "ghoulEggs")
        {
            //TRAITS
            this.solid = false;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.size = this.temporary[1];
                this.eggs = 1;
                this.hatchRate = 0.5;
                this.hatch = 0;
                this.rotAway = 0;
                this.phase = false;
                this.interactionRange = 100;
            }

            //DRAWSELF
            if (this.phase != "popped")
            {
                if (this.temporary[0] == "Deth")
                {
                    this.eggs = 1 + Math.floor(this.size * 3);

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 632, 275, 97, 62, -(1/2 * 97 * this.size), -(1/2 * 62 * this.size), 97 * this.size, 62 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Elk")
                {
                    this.eggs = 1 + Math.floor(this.size * 3);
                    this.hatchRate = 1;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 246, 255, 97, 84, -(1/2 * 97 * this.size * 1), -(1/2 * 84 * this.size * 1), 97 * this.size * 1, 84 * this.size * 1);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Koivaya")
                {
                    this.eggs = 2 + Math.floor(this.size * 2);
                    this.hatchRate = 0.2;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 160, 252, 97, 84, -(1/2 * 97 * this.size), -(1/2 * 84 * this.size), 97 * this.size, 84 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Person" || this.temporary[0] == "Soldier")
                {
                    this.eggs = 1 + Math.floor(this.size * 4);
                    this.hatchRate = 0.35;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 454, 271, 57, 88, -(1/2 * 57 * this.size * 1.5), -(1/2 * 88 * this.size * 1.5), 57 * this.size * 1.5, 88 * this.size * 1.5);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Ghoul")
                {
                    this.eggs = 3 + Math.floor(this.size * 3);
                    this.hatchRate = 0.5;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 13, 241, 128, 102, -(1/2 * 128 * this.size), -(1/2 * 102* this.size), 128 * this.size, 102 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Dalger")
                {
                    this.eggs = 1 + Math.floor(this.size * 6);
                    this.hatchRate = 0.1;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 523, 267, 101, 78, -(1/2 * 101 * this.size), -(1/2 * 78 * this.size), 101 * this.size, 78 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Vreck")
                {
                    this.eggs = 1 + Math.floor(this.size * 2);
                    this.hatchRate = 0.4;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 834, 567, 117, 77, -(1/2 * 117 * this.size), -(1/2 * 77 * this.size), 117 * this.size, 77 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Bovine")
                {
                    this.eggs = 1 + Math.floor(this.size * 3);
                    this.hatchRate = 1.2;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 357, 273, 81, 61, -(1/2 * 81 * this.size * 1.15), -(1/2 * 61 * this.size * 1.15), 81 * this.size * 1.15, 61 * this.size * 1.15);
                    XXX.restore();
                }
            }
            else
            {
                if (this.temporary[0] == "Deth")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 634, 358, 97, 62, -(1/2 * 97 * this.size), -(1/2 * 62 * this.size), 97 * this.size, 62 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Elk")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 245, 349, 97, 84, -(1/2 * 97 * this.size * 1.5), -(1/2 * 84 * this.size * 1.5), 97 * this.size * 1.5, 84 * this.size * 1.5);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Koivaya")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 159, 354, 97, 84, -(1/2 * 97 * this.size), -(1/2 * 84 * this.size), 97 * this.size, 84 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Person" || this.temporary[0] == "Soldier")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 452, 358, 57, 88, -(1/2 * 57 * this.size * 1.5), -(1/2 * 88 * this.size * 1.5), 57 * this.size * 1.5, 88 * this.size * 1.5);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Ghoul")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 15, 342, 128, 102, -(1/2 * 128 * this.size), -(1/2 * 102* this.size), 128 * this.size, 102 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Dalger")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 521, 350, 101, 78, -(1/2 * 101 * this.size), -(1/2 * 78 * this.size), 101 * this.size, 78 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Vreck")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 835, 630, 117, 77, -(1/2 * 117 * this.size), -(1/2 * 77 * this.size), 117 * this.size, 77 * this.size);
                    XXX.restore();
                }
                else if (this.temporary[0] == "Bovine")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gul, 361, 358, 81, 61, -(1/2 * 81 * this.size * 1.15), -(1/2 * 61 * this.size * 1.15), 81 * this.size * 1.15, 61 * this.size * 1.15);
                    XXX.restore();
                }
            }

            if (this.phase != "popped")
            {
                this.hatch += this.hatchRate;

                //console.log(this.hatch);
                if (this.hatch > 900)
                {
                    if (typeof(this.eggs) != "undefined" && this.eggs >= 1)
                    {
                        for (var i = 0; i < this.eggs; i++)
                        {
                            var makeGhoul = new Unit(this.X, this.Y, "Ghoul", "baby", "ghoul");

                            var bruzah = false;
                            var savuj = false;
                            var fecuntitat = false;

                            if (this.information.genes.bruiser == true || this.information.dadGenes.bruiser == true) //dominant gene
                            {
                                bruzah = true;
                            }

                            if (this.information.genes.savage == true && this.information.dadGenes.savage == true) //recessive gene
                            {
                                savuj = true;
                            }

                            if (this.information.genes.fecundidad == true || this.information.dadGenes.fecundidad == true) //recessive gene
                            {
                                fecuntitat = Math.round(Math.random());
                            }

                            makeGhoul.genes.bruiser = bruzah;
                            makeGhoul.genes.fecundidad = fecuntitat;
                            makeGhoul.genes.savage = savuj;
                            ArtificialIntelligenceAccess.push(makeGhoul);
                        }
                    }

                    this.phase = "popped";
                }
            }
            else
            {
                this.rotAway += 1;

                if (this.rotAway > 220)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 28;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.phase = "popped";
                this.interactionRange = 1;
            }
        }
        else if (this.type == "kellishRaft")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(gul, 1034, 432, 60, 53, -(1/2 * 60 * this.size), -(1/2 * 53 * this.size), 60 * this.size, 53 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "vardanianDirtPile")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(gul, 320, 605, 74, 76, -(1/2 * 74 * this.size), -(1/2 * 76 * this.size), 74 * this.size, 76 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "scuffleMarks")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(gul, 649, 711, 125, 95, -(1/2 * 71 * this.size), -(1/2 * 48 * this.size), 71 * this.size, 48 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "swampIsla")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.information) == "undefined")
            {
                this.size = 1;
            }
            else
            {
                this.size = this.information;
            }


            if (this.temporary == 0) //big square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 30, 561, 305, 316, -(1/2 * 305 * this.size), -(1/2 * 316 * this.size), 305 * this.size, 316 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 300 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 40 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 40 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 40 * this.size, this.Y + Math.sin(0 + this.rotation) * 40 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 40 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 40 * this.size);
                if (distToPlat <= 150 * this.size * 150 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 40 * this.size, this.Y + Math.sin(0 + this.rotation) * 40 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 40 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 40 * this.size);
                    if (distToPlat <= 150 * this.size * 150 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 1) //big circle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 442, 557, 305, 316, -(1/2 * 305 * this.size), -(1/2 * 316 * this.size), 305 * this.size, 316 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 280* this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 30 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 30 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                if (distToPlat <= 140 * this.size * 140 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                    if (distToPlat <= 140 * this.size * 140 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 2) //half large square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(pavo, 591, 873, 181, 303, -(1/2 * 181 * this.size), -(1/2 * 303 * this.size), 181 * this.size, 303 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 166 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 80 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 80 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 80 * this.size, this.Y + Math.sin(0 + this.rotation) * 80 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 80 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 80 * this.size);
                if (distToPlat <= 83 * this.size * 83 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 80 * this.size, this.Y + Math.sin(0 + this.rotation) * 80 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 80 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 80 * this.size);
                    if (distToPlat <= 83 * this.size * 83 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 3) //long fourth of large square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 24, 938, 321, 119, -(1/2 * 321 * this.size), -(1/2 * 119 * this.size) + 9, 321 * this.size, 119 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 98 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 110 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 110 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 110 * this.size, this.Y + Math.sin(0 + this.rotation) * 110 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 110 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 110 * this.size);
                if (distToPlat <= 49 * this.size * 49 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 110 * this.size, this.Y + Math.sin(0 + this.rotation) * 110 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 110 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 110 * this.size);
                    if (distToPlat <= 49 * this.size * 49 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 4) //small rectangle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 79, 1054, 211, 138, -(1/2 * 211 * this.size), -(1/2 * 138 * this.size), 211 * this.size, 138 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 120 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 70 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 70 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 70 * this.size, this.Y + Math.sin(0 + this.rotation) * 70 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 70 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 70 * this.size);
                if (distToPlat <= 60 * this.size * 60 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 70 * this.size, this.Y + Math.sin(0 + this.rotation) * 70 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 70 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 70 * this.size);
                    if (distToPlat <= 60 * this.size * 60 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 5) //small circle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 473, 1080, 110, 106, -(1/2 * 110 * this.size), -(1/2 * 106 * this.size), 110 * this.size, 106 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 84 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 15 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 15 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 15 * this.size, this.Y + Math.sin(0 + this.rotation) * 15 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 15 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 15 * this.size);
                if (distToPlat <= 42 * this.size * 42 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 15 * this.size, this.Y + Math.sin(0 + this.rotation) * 15 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 15 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 15 * this.size);
                    if (distToPlat <= 42 * this.size * 42 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 6) //small particle square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 343, 1083, 115, 106, -(1/2 * 115 * this.size), -(1/2 * 106 * this.size), 115 * this.size, 106 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 90 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 20 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 20 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 20 * this.size, this.Y + Math.sin(0 + this.rotation) * 20 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 20 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 20 * this.size);
                if (distToPlat <= 45 * this.size * 45 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 20 * this.size, this.Y + Math.sin(0 + this.rotation) * 20 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 20 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 20 * this.size);
                    if (distToPlat <= 45 * this.size * 45 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 7) //medium particle circle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 375, 903, 195, 172, -(1/2 * 195 * this.size), -(1/2 * 172 * this.size), 195 * this.size, 172 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 154 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 30 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 30 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                if (distToPlat <= 77 * this.size * 77 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                    if (distToPlat <= 77 * this.size * 77 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "mireIsla")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.information) == "undefined")
            {
                this.size = 1;
            }
            else
            {
                this.size = this.information;
            }


            if (this.temporary == 0) //big square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 30, 561, 305, 316, -(1/2 * 305 * this.size), -(1/2 * 316 * this.size), 305 * this.size, 316 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 300 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 40 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 40 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 40 * this.size, this.Y + Math.sin(0 + this.rotation) * 40 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 40 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 40 * this.size);
                if (distToPlat <= 150 * this.size * 150 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 40 * this.size, this.Y + Math.sin(0 + this.rotation) * 40 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 40 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 40 * this.size);
                    if (distToPlat <= 150 * this.size * 150 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 1) //big circle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 442, 557, 305, 316, -(1/2 * 305 * this.size), -(1/2 * 316 * this.size), 305 * this.size, 316 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 280* this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 30 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 30 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                if (distToPlat <= 140 * this.size * 140 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                    if (distToPlat <= 140 * this.size * 140 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 2) //half large square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(cleen, 591, 873, 181, 303, -(1/2 * 181 * this.size), -(1/2 * 303 * this.size), 181 * this.size, 303 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 166 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 80 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 80 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 80 * this.size, this.Y + Math.sin(0 + this.rotation) * 80 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 80 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 80 * this.size);
                if (distToPlat <= 83 * this.size * 83 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 80 * this.size, this.Y + Math.sin(0 + this.rotation) * 80 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 80 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 80 * this.size);
                    if (distToPlat <= 83 * this.size * 83 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 3) //long fourth of large square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 24, 938, 321, 119, -(1/2 * 321 * this.size), -(1/2 * 119 * this.size) + 9, 321 * this.size, 119 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 98 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 110 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 110 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 110 * this.size, this.Y + Math.sin(0 + this.rotation) * 110 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 110 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 110 * this.size);
                if (distToPlat <= 49 * this.size * 49 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 110 * this.size, this.Y + Math.sin(0 + this.rotation) * 110 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 110 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 110 * this.size);
                    if (distToPlat <= 49 * this.size * 49 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 4) //small rectangle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 79, 1054, 211, 138, -(1/2 * 211 * this.size), -(1/2 * 138 * this.size), 211 * this.size, 138 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 120 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 70 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 70 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 70 * this.size, this.Y + Math.sin(0 + this.rotation) * 70 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 70 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 70 * this.size);
                if (distToPlat <= 60 * this.size * 60 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 70 * this.size, this.Y + Math.sin(0 + this.rotation) * 70 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 70 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 70 * this.size);
                    if (distToPlat <= 60 * this.size * 60 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 5) //small circle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 473, 1080, 110, 106, -(1/2 * 110 * this.size), -(1/2 * 106 * this.size), 110 * this.size, 106 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 84 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 15 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 15 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 15 * this.size, this.Y + Math.sin(0 + this.rotation) * 15 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 15 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 15 * this.size);
                if (distToPlat <= 42 * this.size * 42 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 15 * this.size, this.Y + Math.sin(0 + this.rotation) * 15 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 15 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 15 * this.size);
                    if (distToPlat <= 42 * this.size * 42 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 6) //small particle square
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 343, 1083, 115, 106, -(1/2 * 115 * this.size), -(1/2 * 106 * this.size), 115 * this.size, 106 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 90 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 20 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 20 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 20 * this.size, this.Y + Math.sin(0 + this.rotation) * 20 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 20 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 20 * this.size);
                if (distToPlat <= 45 * this.size * 45 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 20 * this.size, this.Y + Math.sin(0 + this.rotation) * 20 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 20 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 20 * this.size);
                    if (distToPlat <= 45 * this.size * 45 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }
            else if (this.temporary == 7) //medium particle circle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cleen, 375, 903, 195, 172, -(1/2 * 195 * this.size), -(1/2 * 172 * this.size), 195 * this.size, 172 * this.size);

                //XXX.beginPath();
                //XXX.lineWidth = 154 * this.size;
                //XXX.strokeStyle = "black";
                //XXX.moveTo(0 + Math.cos(0) * 30 * this.size, 0);
                //XXX.lineTo(0 + Math.cos(Math.PI) * 30 * this.size, 0);
                //XXX.stroke();

                XXX.restore();

                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                if (distToPlat <= 77 * this.size * 77 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                    if (distToPlat <= 77 * this.size * 77 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "vardanianSpike")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.information) != "null" && typeof(this.information) != "boolean")
            {
                this.size = this.information;
            }
            else
            {
                this.size = 1;
            }

            //DRAWSELF
            if (this.temporary == 0) //nothing
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2285, 173, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 1) //spike
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2281, 17, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 2) //bloody
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2289, 319, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 3) //body
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2291, 494, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 4) //skeleton
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2293, 658, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 5) //guts
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2295, 819, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 30;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "vardanianPyre")
        {
            //TRAITS
            if (this.temporary == false)
            {
                this.solid = false;
            }
            else
            {
                this.solid = true;
            }
            this.interactionRange = 25 + 105 * this.size;
            if (typeof(this.information) != "null" && typeof(this.information) != "boolean")
            {
                this.size = this.information;
            }
            else
            {
                this.size = 1;
            }

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0;
            }

            if (this.temporary == true)
            {
                this.tic += 0.4;
            }

            if (this.temporary == true)
            {
                if (this.playerer <= this.radius) //fire burns the player but heat resistance can reduce the damage it does.
                {
                    if (player.mageShield > 0)
                    {
                        player.mageShield -= 0.125;
                        player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    }
                    else
                    {
                        player.health += player.mageShield;
                        player.mageShield = 0;

                        player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                        player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                        player.burningTime = new Date().getTime();
                    }
                }
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) < this.radius)
                    {
                        ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                        ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                    }
                }

                //produce light
                if (timeOfDay != "Day")
                {
                    lights.push({X:this.X, Y: this.Y, size: 200 * this.size, extraStops: true, GRD: 0.1, Alpha: 0.75, showMe: false});
                }
                //produce heat
                if (this.playerer <= 105)
                {
                    player.warmth += Math.max(0, (0.90 - (player.heatResistance / 200)));
                }
            }

            //DRAWSELF
            if (this.temporary == false)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2453, 13, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.tic < 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2456, 170, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.tic < 10)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2458, 319, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.tic < 15)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2457, 492, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else if (this.tic < 20)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2458, 655, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 2458, 655, 163, 150, -(1/2 * 163 * this.size), -(1/2 * 150 * this.size), 163 * this.size, 150 * this.size);
                XXX.restore();
                this.tic = 0;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1 + 25 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.temporary == false)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].type == "fireStarter")
                        {
                            this.temporary = true;
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "swampPlatform")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(mimi, 755, 34, 244, 235, -(1/2 * 244 * this.size), -(1/2 * 235 * this.size), 244 * this.size, 235 * this.size);

            //XXX.beginPath();
            //XXX.lineWidth = 236;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(0) * 22, 0);
            //XXX.lineTo(0 + Math.cos(Math.PI) * 22, 0);
            //XXX.stroke();

            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 22, this.Y + Math.sin(0 + this.rotation) * 22, this.X + Math.cos(Math.PI + this.rotation) * 22, this.Y + Math.sin(Math.PI + this.rotation) * 22);
            if (distToPlat <= 118 * 118) // && player.movingType != "swimming"
            {
                player.land = true;
            }

            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 22, this.Y + Math.sin(0 + this.rotation) * 22, this.X + Math.cos(Math.PI + this.rotation) * 22, this.Y + Math.sin(Math.PI + this.rotation) * 22);
                if (distToPlat <= 118 * 118)
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "swampWalkBridge")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);

            //XXX.beginPath();
            //XXX.lineWidth = 20;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(0) * 90, 0);
            //XXX.lineTo(0 + Math.cos(Math.PI) * 90, 0);
            //XXX.stroke();

            if (player.movingType == "swimming" || player.weaponEquipped == "boat")
            {
                XXX.globalAlpha = 0.5;
            }

            XXX.drawImage(mimi, 25, 498, 253, 96, -(1/2 * 253 * this.size), -(1/2 * 96 * this.size), 253 * this.size, 96 * this.size);
            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 90, this.Y + Math.sin(0 + this.rotation) * 90, this.X + Math.cos(Math.PI + this.rotation) * 90, this.Y + Math.sin(Math.PI + this.rotation) * 90);
            if (distToPlat <= 30 * 30 && player.weaponEquipped != "swimming" && player.weaponEquipped != "boat")
            {
                player.land = true;
            }

            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 90, this.Y + Math.sin(0 + this.rotation) * 90, this.X + Math.cos(Math.PI + this.rotation) * 90, this.Y + Math.sin(Math.PI + this.rotation) * 90);
                if (distToPlat <= 30 * 30)
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "swampWalk")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);

            //XXX.beginPath();
            //XXX.lineWidth = 20;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(0) * 90, 0);
            //XXX.lineTo(0 + Math.cos(Math.PI) * 90, 0);
            //XXX.stroke();

            if (player.movingType == "swimming")
            {
                XXX.globalAlpha = 0.5;
            }

            XXX.drawImage(mimi, 25, 498, 253, 96, -(1/2 * 253 * this.size), -(1/2 * 96 * this.size), 253 * this.size, 96 * this.size);
            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 90, this.Y + Math.sin(0 + this.rotation) * 90, this.X + Math.cos(Math.PI + this.rotation) * 90, this.Y + Math.sin(Math.PI + this.rotation) * 90);
            if (distToPlat <= 30 * 30 && player.movingType != "swimming")
            {
                player.land = true;
            }

            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 90, this.Y + Math.sin(0 + this.rotation) * 90, this.X + Math.cos(Math.PI + this.rotation) * 90, this.Y + Math.sin(Math.PI + this.rotation) * 90);
                if (distToPlat <= 30 * 30)
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "swampWalkShort")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);

            //XXX.beginPath();
            //XXX.lineWidth = 20;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(0) * 22, 0);
            //XXX.lineTo(0 + Math.cos(Math.PI) * 22, 0);
            //XXX.stroke();

            if (player.movingType == "swimming")
            {
                XXX.globalAlpha = 0.5;
            }

            XXX.drawImage(mimi, 285, 498, 99, 88, -(1/2 * 99 * this.size), -(1/2 * 88 * this.size), 99 * this.size, 88 * this.size);
            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 22, this.Y + Math.sin(0 + this.rotation) * 22, this.X + Math.cos(Math.PI + this.rotation) * 22, this.Y + Math.sin(Math.PI + this.rotation) * 22);
            if (distToPlat <= 30 * 30 && player.movingType != "swimming")
            {
                player.land = true;
            }

            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 22, this.Y + Math.sin(0 + this.rotation) * 22, this.X + Math.cos(Math.PI + this.rotation) * 22, this.Y + Math.sin(Math.PI + this.rotation) * 22);
                if (distToPlat <= 30 * 30)
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "swampStilt")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);

            //XXX.beginPath();
            //XXX.lineWidth = 20;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(0) * 80, 0);
            //XXX.lineTo(0 + Math.cos(Math.PI) * 80, 0);
            //XXX.stroke();
            XXX.rotate(-0.28);

            if (player.movingType == "swimming")
            {
                XXX.globalAlpha = 0.5;
            }

            XXX.drawImage(mimi, 211, 594, 179, 69, -(1/2 * 179 * this.size), -(1/2 * 69 * this.size), 179 * this.size, 69 * this.size);
            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 75, this.Y + Math.sin(0 + this.rotation) * 75, this.X + Math.cos(Math.PI + this.rotation) * 75, this.Y + Math.sin(Math.PI + this.rotation) * 75);
            if (distToPlat <= 6 * 6 && player.movingType != "swimming" && player.getDexterity() >= 3)
            {
                player.land = true;
            }

            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 75, this.Y + Math.sin(0 + this.rotation) * 75, this.X + Math.cos(Math.PI + this.rotation) * 75, this.Y + Math.sin(Math.PI + this.rotation) * 75);
                if (distToPlat <= 6 * 6)
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "swampPlank")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);

            //XXX.beginPath();
            //XXX.lineWidth = 20;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(0) * 17, 0);
            //XXX.lineTo(0 + Math.cos(Math.PI) * 17, 0);
            //XXX.stroke();

            XXX.rotate(-1/2 * Math.PI);

            if (player.movingType == "swimming")
            {
                XXX.globalAlpha = 0.5;
            }

            XXX.drawImage(mimi, 304, 370, 30, 70, -(1/2 * 50 * this.size), -(1/2 * 70 * this.size), 50 * this.size, 70 * this.size);
            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 17, this.Y + Math.sin(0 + this.rotation) * 17, this.X + Math.cos(Math.PI + this.rotation) * 17, this.Y + Math.sin(Math.PI + this.rotation) * 17);
            if (distToPlat <= 10 * 10 && player.movingType != "swimming")
            {
                player.land = true;
            }

            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 17, this.Y + Math.sin(0 + this.rotation) * 17, this.X + Math.cos(Math.PI + this.rotation) * 17, this.Y + Math.sin(Math.PI + this.rotation) * 17);
                if (distToPlat <= 10 * 10)
                {
                    ArtificialIntelligenceAccess[i].land = true;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "swampBridge")
        {
            //TRAITS
            this.solid = false;
            if (player.weaponEquipped == "hammer" && player.getIntelligence() >= 8)
            {
                this.interactionRange = 100;
            }
            else
            {
                this.interactionRange = 1;
            }
            this.size = 2.2;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 10;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);

            //XXX.beginPath();
            //XXX.lineWidth = 20;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(0) * 40, 0);
            //XXX.lineTo(0 + Math.cos(Math.PI) * 40, 0);
            //XXX.stroke();

            XXX.rotate(0.65);

            if (player.movingType == "swimming")
            {
                XXX.globalAlpha = 0.5;
            }

            if (this.health >= 7.5)
            {
                XXX.drawImage(dmil, 70, 725, 66, 66, -(1/2 * 66 * this.size), -(1/2 * 66 * this.size), 66 * this.size, 66 * this.size);
            }
            else if (this.health >= 5)
            {
                XXX.drawImage(dmil, 136, 723, 66, 66, -(1/2 * 66 * this.size), -(1/2 * 66 * this.size), 66 * this.size, 66 * this.size);
            }
            else if (this.health >= 2.5)
            {
                XXX.drawImage(dmil, 208, 721, 66, 66, -(1/2 * 66 * this.size), -(1/2 * 66 * this.size), 66 * this.size, 66 * this.size);
            }
            else
            {
                XXX.drawImage(dmil, 277, 724, 66, 66, -(1/2 * 66 * this.size), -(1/2 * 66 * this.size), 66 * this.size, 66 * this.size);
            }

            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 28, this.Y + Math.sin(0 + this.rotation) * 28, this.X + Math.cos(Math.PI + this.rotation) * 28, this.Y + Math.sin(Math.PI + this.rotation) * 28);
            if (distToPlat <= 23 * 23 && player.movingType != "swimming" && this.health >= 2.5)
            {
                player.land = true;

                if (this.temporary == false)
                {
                    if (player.carryWeight < 10)
                    {
                        this.health -= 0.01;
                    }
                    else if (player.carryWeight < 20)
                    {
                        this.health -= 0.02;
                    }
                    else if (player.carryWeight < 30)
                    {
                        this.health -= 0.05;
                    }
                    else if (player.carryWeight < 50)
                    {
                        this.health -= 0.10;
                    }
                    else if (player.carryWeight < 100)
                    {
                        this.health -= 0.25;
                    }
                    else if (player.carryWeight < 200)
                    {
                        this.health -= 0.5;
                    }
                    else
                    {
                        this.health -= 1;
                    }
                }
            }

            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 28, this.Y + Math.sin(0 + this.rotation) * 28, this.X + Math.cos(Math.PI + this.rotation) * 28, this.Y + Math.sin(Math.PI + this.rotation) * 28);
                if (distToPlat <= 23 * 23 && this.health >= 2.5)
                {
                    ArtificialIntelligenceAccess[i].land = true;

                    if (this.temporary == false)
                    {
                        if (ArtificialIntelligenceAccess[i].type != "Person" && ArtificialIntelligenceAccess[i].type != "Soldier" && ArtificialIntelligenceAccess[i].healthMAX <= 4)
                        {
                            this.health -= 0.10;
                        }
                        else if (ArtificialIntelligenceAccess[i].type != "Person" && ArtificialIntelligenceAccess[i].type != "Soldier" && ArtificialIntelligenceAccess[i].healthMAX <= 20)
                        {
                            this.health -= 0.15;
                        }
                        else if (ArtificialIntelligenceAccess[i].healthMAX <= 50)
                        {
                            this.health -= 0.25;
                        }
                        else if (ArtificialIntelligenceAccess[i].healthMAX <= 120)
                        {
                            this.health -= 0.5;
                        }
                        else
                        {
                            this.health -= 1;
                        }
                    }
                }
            }

            if (this.health < 5)
            {
                this.health -= 0.5;
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (player.weaponEquipped == "hammer" && player.getIntelligence() >= 8)
                {
                    if (this.health < 5)
                    {
                        this.health = 5;
                    }
                    else
                    {
                        this.health += 2.5;
                        if (this.health >= 10)
                        {
                            this.temporary = true;
                        }
                    }
                }
            }
        }
        else if (this.type == "pikeWall")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);

            XXX.drawImage(mimi, 2462, 820, 163, 166, -(1/2 * 163 * this.size), -(1/2 * 166 * this.size), 163 * this.size, 166 * this.size);

            //XXX.beginPath();
            //XXX.lineWidth = 30;
            //XXX.strokeStyle = "black";
            //XXX.moveTo(0 + Math.cos(1/2 * Math.PI) * 35, 0 + Math.sin(1/2 * Math.PI) * 35);
            //XXX.lineTo(0 + Math.cos(1/2 * Math.PI) * 65, 0 + Math.sin(1/2 * Math.PI) * 65);
            //XXX.stroke();

            XXX.restore();

            var distToPlat = pDist(X, Y, this.X + Math.cos(1/2 * Math.PI + this.rotation) * 40, this.Y + Math.sin(1/2 * Math.PI + this.rotation) * 35, this.X + Math.cos(1/2 * Math.PI + this.rotation) * 50, this.Y + Math.sin(1/2 * Math.PI + this.rotation) * 50);
            if (distToPlat <= 40 * 40)
            {
                this.damagePlayer(0.75, 11);
            }


            distToPlat = 1000000000000000;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (ArtificialIntelligenceAccess[i].type != "Rat" && ArtificialIntelligenceAccess[i].type != "Mornid")
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(1/2 * Math.PI + this.rotation) * 40, this.Y + Math.sin(1/2 * Math.PI + this.rotation) * 35, this.X + Math.cos(1/2 * Math.PI + this.rotation) * 50, this.Y + Math.sin(1/2 * Math.PI + this.rotation) * 50);
                    if (distToPlat <= 40 * 40)
                    {
                        ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                        ArtificialIntelligenceAccess[i].healthShownTime = new Date().getTime();
                        ArtificialIntelligenceAccess[i].health -= Math.max(0, 0.75 - Math.max(0, ArtificialIntelligenceAccess[i].armour - 11));
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "mimicry")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 2.2;

            //DRAWSELF
            if (testingUnitCenters == true)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mimi, 264, 314, 35, 36, -(1/2 * 35 * this.size), -(1/2 * 36 * this.size), 35 * this.size, 36 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "magicLock")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 120;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.lowLock = 0;
                this.midLock = 0;
                this.topLock = 0;
            }

            //DRAWSELF

            //base
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(cypher, 136, 0, 83, 81, -(1/2 * 83 * this.size), -(1/2 * 81 * this.size), 83 * this.size, 81 * this.size);
            XXX.restore();

            //lowest lock
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.lowLock);
            XXX.drawImage(cypher, 67, 2, 72, 87, -(1/2 * 72 * this.size), -(1/2 * 87 * this.size), 72 * this.size, 87 * this.size);
            XXX.restore();

            //middle lock
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.midLock);
            XXX.drawImage(cypher, 24, 4, 34, 42, -(1/2 * 34 * this.size), -(1/2 * 42 * this.size), 34 * this.size, 42 * this.size);
            XXX.restore();

            //highest lock
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.topLock);
            XXX.drawImage(cypher, 1, 4, 20, 22, -(1/2 * 20 * this.size), -(1/2 * 22 * this.size), 20 * this.size, 22 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 50;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.mouser < 6)
                {
                    this.topLock += 1/4 * Math.PI;
                    if (this.temporary == "magesCache")
                    {
                        magesCacheLock[0] = Math.round(degrees(this.topLock));
                        console.log(magesCacheLock);
                    }
                }
                else if (this.mouser < 16)
                {
                    this.midLock += 1/4 * Math.PI;
                    if (this.temporary == "magesCache")
                    {
                        magesCacheLock[1] = Math.round(degrees(this.midLock));
                        console.log(magesCacheLock);
                    }
                }
                else if (this.mouser < 46)
                {
                    this.lowLock += 1/4 * Math.PI;
                    if (this.temporary == "magesCache")
                    {
                        magesCacheLock[2] = Math.round(degrees(this.lowLock));
                        console.log(magesCacheLock);
                    }
                }
                this.activate = false;
            }
        }
        else if (this.type == "magicSpinnerLock")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 100;
            this.size = 0.8;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.lowLock = 0;
                this.midLock = 0;
                this.topLock = 0;
                this.callStop = false;
                this.magicSpinLockTime = new Date().getTime();
            }

            //DRAWSELF

            if (this.callStop == false)
            {
                if (new Date().getTime() - this.magicSpinLockTime > (this.information * 1000))
                {
                    this.magicSpinLockTime = new Date().getTime();
                    this.lowLock += radians(this.temporary[0]);
                    this.midLock += radians(this.temporary[1]);
                    this.topLock += radians(this.temporary[2]);
                    if (Math.round(degrees(this.lowLock)) > 360)
                    {
                        this.lowLock = radians(degrees(this.lowLock) % 360);
                    }
                    if (Math.round(degrees(this.midLock)) > 360)
                    {
                        this.midLock = radians(degrees(this.midLock) % 360);
                    }
                    if (Math.round(degrees(this.topLock)) > 360)
                    {
                        this.topLock = radians(degrees(this.topLock) % 360);
                    }

                    if (Math.round(degrees(this.lowLock)) == 360)
                    {
                        this.lowLock = 0;
                    }
                    if (Math.round(degrees(this.midLock)) == 360)
                    {
                        this.midLock = 0;
                    }
                    if (Math.round(degrees(this.topLock)) == 360)
                    {
                        this.topLock = 0;
                    }
                }
            }

            //base
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(cypher, 136, 0, 83, 81, -(1/2 * 83 * this.size), -(1/2 * 81 * this.size), 83 * this.size, 81 * this.size);
            XXX.restore();

            //lowest lock
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.lowLock);
            XXX.drawImage(cypher, 67, 2, 72, 87, -(1/2 * 72 * this.size), -(1/2 * 87 * this.size), 72 * this.size, 87 * this.size);
            XXX.restore();

            //middle lock
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.midLock);
            XXX.drawImage(cypher, 24, 4, 34, 42, -(1/2 * 34 * this.size), -(1/2 * 42 * this.size), 34 * this.size, 42 * this.size);
            XXX.restore();

            //highest lock
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + this.topLock);
            XXX.drawImage(cypher, 1, 4, 20, 22, -(1/2 * 20 * this.size), -(1/2 * 22 * this.size), 20 * this.size, 22 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 70 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.callStop = true;
                if (this.temporary[3] == "magicSpinnerA")
                {
                    magicSpinnerA[0] = Math.round(degrees(this.topLock));
                    magicSpinnerA[1] = Math.round(degrees(this.midLock));
                    magicSpinnerA[2] = Math.round(degrees(this.lowLock));
                    console.log(magicSpinnerA);
                }
                else if (this.temporary[3] == "magicSpinnerB")
                {
                    magicSpinnerB[0] = Math.round(degrees(this.topLock));
                    magicSpinnerB[1] = Math.round(degrees(this.midLock));
                    magicSpinnerB[2] = Math.round(degrees(this.lowLock));
                    console.log(magicSpinnerB);
                }
            }
        }
        else if (this.type == "magicButton")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 40;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.pressed = 0;
            }

            //DRAWSELF
            if (this.pressed == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 0, 98, 21, 13, -(1/2 * 21 * this.size), -(1/2 * 13 * this.size), 21 * this.size, 13 * this.size);
                XXX.restore();
            }
            else
            {
                this.pressed += 1;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 0, 113, 21, 13, -(1/2 * 21 * this.size), -(1/2 * 13 * this.size), 21 * this.size, 13 * this.size);
                XXX.restore();

                if (this.pressed > 10)
                {
                    this.pressed = 0;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 11 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.pressed == 0)
                {
                    this.pressed = 1;
                    if (this.temporary == "magesCache")
                    {
                        magesCacheButtons.push(this.information);
                        console.log(magesCacheButtons);
                    }
                }
            }
        }
        else if (this.type == "magicOrbPortal")
        {
            //TRAITS
            this.solid = false;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.orbPlaced = false;
                this.tic = 0;
                this.useBlock = false;
            }

            //portal activation pre-reqs
            if (this.temporary == "magesCache")
            {
                var isLocked = false;

                if (magesCacheButtons.toString() != [1, 1, 3, 2, 1, 2].toString())
                {
                    isLocked = true;
                }

                isSameStupidtard = false;
                if (magesCacheLock.toString() != [360, 90, 270].toString())
                {
                    isLocked = true;
                }
                this.useBlock = isLocked;
            }

            //if it has already been unlocked
            if (this.temporary == "magesCache")
            {
                if (quests.sagesCachePortal == true)
                {
                    this.useBlock = false;
                    this.orbPlaced = true;
                }
            }


            if (this.useBlock == false)
            {
                this.interactionRange = 130;
            }
            else
            {
                this.interactionRange = 1;
            }

            //DRAWSELF
            if (this.orbPlaced == false)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 594, 165, 99, 101, -(1/2 * 99 * this.size), -(1/2 * 101 * this.size), 99 * this.size, 101 * this.size);
                XXX.restore();
            }
            else
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 598, 277, 99, 101, -(1/2 * 99 * this.size), -(1/2 * 101 * this.size), 99 * this.size, 101 * this.size);
                XXX.restore();

                if (this.useBlock == false)
                {
                    this.tic += 2;
                    if (this.tic <= 4)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(cypher, 729, 281, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                        XXX.restore();
                    }
                    else if (this.tic <= 8)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(cypher, 728, 344, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                        XXX.restore();
                    }
                    else if (this.tic <= 12)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(cypher, 725, 415, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(cypher, 728, 344, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                        XXX.restore();
                        this.tic = 0;
                    }

                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.useBlock == false)
                {
                    if (this.orbPlaced == true)
                    {
                        if (this.temporary == "magesCache")
                        {
                            X = this.information[0];
                            Y = this.information[1];
                            map = this.information[2];
                        }
                    }
                    else
                    {
                        if (this.temporary == "magesCache")
                        {
                            if (have("garldsMemories", 1))
                            {
                                take("garldsMemories", 1);
                                this.orbPlaced = true;
                                quests.sagesCachePortal = true;
                            }
                        }
                    }
                }
            }
        }
        else if (this.type == "returnOrbPortal")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 30 + 60 * this.size;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
            }

            //DRAWSELF
            this.tic += 2;
            if (this.tic <= 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 729, 281, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                XXX.restore();
            }
            else if (this.tic <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 728, 344, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                XXX.restore();
            }
            else if (this.tic <= 12)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 725, 415, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cypher, 728, 344, 63, 65, -(1/2 * 63 * this.size), -(1/2 * 65 * this.size), 63 * this.size, 65 * this.size);
                XXX.restore();
                this.tic = 0;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 60 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                X = this.information[0];
                Y = this.information[1];
                map = this.information[2];
            }
        }
        else if (this.type == "thenganTray")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(floras, 934, 99, 39, 28, -(1/2 * 39 * this.size), -(1/2 * 28 * this.size), 39 * this.size, 28 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "vardanianThrowingSpear")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 70;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }
            this.zIndex = 2;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(ribak, 972, 6, 78, 15, -(1/2 * 78 * this.size), -(1/2 * 15 * this.size), 78 * this.size, 15 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                give("vardanianThrowingSpear", 1);
                scenicList.splice(scenicList.indexOf(this), 1);
            }
        }
        else if (this.type == "spilledSpellOil")
        {
            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 10000;
                this.ignited = false;
                this.tic = 0;
                if (typeof(this.information) == "undefined")
                {
                    this.information = 2.4;
                }
            }
            //TRAITS
            this.solid = false;
            this.interactionRange = 70;
            this.size = this.information;
            this.zIndex = 2;

            this.health -= 0.444;

            if (this.ignited == true)
            {
                if (timeOfDay != "Day")
                {
                    lights.push({X: this.X, Y: this.Y, size: 330, extraStops: true, GRD: 0.25, Alpha: 0.75, showMe: false});
                }
                if (this.playerer <= this.radius) //fire burns the player but heat resistance can reduce the damage it does.
                {
                    if (player.form != "vampire" || wKey != true)
                    {
                        if (player.mageShield <= 0)
                        {
                            this.ignited = true;
                            player.shockedTime = new Date().getTime();
                            player.shockedTime2 = new Date().getTime();

                            player.mageShield = 0;

                            player.health -= Math.max(0, (0.55 - (player.heatResistance / 100)));
                            player.warmth += Math.max(0, (5 - (player.heatResistance / 100)));
                            player.burningTime = new Date().getTime();
                        }
                    }
                }
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].flying == false && ArtificialIntelligenceAccess[i].underground == false && ArtificialIntelligenceAccess[i].dmx == this.dmx)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) < this.radius)
                        {
                            ArtificialIntelligenceAccess[i].shockedTime = new Date().getTime();
                            ArtificialIntelligenceAccess[i].shockedTime2 = new Date().getTime();

                            ArtificialIntelligenceAccess[i].health -= Math.max(0, (0.55 - (ArtificialIntelligenceAccess[i].heatResistance / 100)));
                            ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                            if (this.temporary == true)
                            {
                                ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                            }
                        }
                    }
                }
            }
            else
            {
                if (this.playerer <= this.radius) //fire burns the player but heat resistance can reduce the damage it does.
                {
                    if (player.form != "vampire" || wKey != true)
                    {
                        if (player.mageShield <= 0)
                        {
                            this.ignited = true;
                            player.shockedTime = new Date().getTime();
                            player.shockedTime2 = new Date().getTime();

                            player.mageShield = 0;
                        }
                    }
                }
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].flying == false && ArtificialIntelligenceAccess[i].underground == false && ArtificialIntelligenceAccess[i].dmx == this.dmx)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) < this.radius)
                        {
                            this.ignited = true;
                            ArtificialIntelligenceAccess[i].shockedTime = new Date().getTime();
                            ArtificialIntelligenceAccess[i].shockedTime2 = new Date().getTime();

                            if (this.temporary == true)
                            {
                                ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                            }
                        }
                    }
                }
            }

            //DRAWSELF
            if (this.ignited == true)
            {
                this.tic += 3;
                if (this.tic <= 5)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 837, 114, 68, 51, -(1/2 * 68 * this.size), -(1/2 * 51 * this.size), 68 * this.size, 51 * this.size);
                    XXX.restore();
                }
                else if (this.tic <= 10)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 835, 163, 68, 51, -(1/2 * 68 * this.size), -(1/2 * 51 * this.size), 68 * this.size, 51 * this.size);
                    XXX.restore();
                }
                else if (this.tic <= 15)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 904, 163, 68, 51, -(1/2 * 68 * this.size), -(1/2 * 51 * this.size), 68 * this.size, 51 * this.size);
                    XXX.restore();
                }
                else if (this.tic <= 20)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 835, 163, 68, 51, -(1/2 * 68 * this.size), -(1/2 * 51 * this.size), 68 * this.size, 51 * this.size);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(cef, 837, 114, 68, 51, -(1/2 * 68 * this.size), -(1/2 * 51 * this.size), 68 * this.size, 51 * this.size);
                    XXX.restore();
                    this.tic = 0;
                }
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 839, 67, 60, 43, -(1/2 * 60 * this.size), -(1/2 * 43 * this.size), 60 * this.size, 43 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24 * this.size;

            if (this.temporary == false)
            {
                if (this.health <= 0)
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "spellOil")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 70;
            this.size = 2;
            this.zIndex = 2;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 1000;
                scenicList.push(new Scenery("spilledSpellOil", this.X, this.Y, Math.random()*Math.PI*2, false));
            }

            this.health -= 0.444;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(cef, 1007, 37, 12, 22, -(1/2 * 12 * this.size), -(1/2 * 22 * this.size), 12 * this.size, 22 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "throwingKnife" || this.type == "poisonCoatedThrowingKnife")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 75;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }
            this.zIndex = 2;

            if (this.type == "poisonCoatedThrowingKnife")
            {
                this.information = true;
            }
            else
            {
                this.information = false;
            }

            //DRAWSELF
            if (this.information == true) //with glazm
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(jeru, 1449, 856, 27, 38, -(1/2 * 27 * this.size), -(1/2 * 38 * this.size), 27 * this.size, 38 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(jeru, 1449, 810, 27, 38, -(1/2 * 27 * this.size), -(1/2 * 38 * this.size), 27 * this.size, 38 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                give("throwingKnife", 1);
                scenicList.splice(scenicList.indexOf(this), 1);
            }
        }
        else if (this.type == "throwingStar")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 75;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1;
            }
            this.zIndex = 2;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(theCrack, 207, 402, 5, 9, -(1/2 * 5 * this.size), -(1/2 * 9 * this.size), 5 * this.size, 9 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 6;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                give("throwingStar", 1);
                scenicList.splice(scenicList.indexOf(this), 1);
            }
        }
        else if (this.type == "fegilMound")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 7;
            }

            //DRAWSELF
            if (this.health > 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 226, 978, 39, 39, -(1/2 * 39), -(1/2 * 39), 39, 39);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 184, 978, 39, 39, -(1/2 * 39), -(1/2 * 39), 39, 39);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24;

            if (player.cutcut == true && this.playerer < 500)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                if (distFromCutCut <= player.weapon.distance)
                {
                    if (player.weaponEquipped == "spade")
                    {
                        this.health -= 8;
                    }
                    else if (player.weaponEquipped == "pickaxe")
                    {
                        this.health -= 4;
                    }
                    else
                    {
                        this.health -= 3;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "mrbAssets")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.phase = 0;
                this.primed = true;
                this.clave = "door" + (Math.random() + Math.random()) + "door";
                this.tic = 0;
            }

            if (this.temporary == 0) //
            {

            }
            else if (this.temporary == 1) //teleporter
            {
                this.size = this.information[0];
                this.interactionRange = 70 * this.size;
                this.radius = 10 * this.size;

                if (this.phase == 1)
                {
                    player.stunnedXV = true;
                    player.stunnedTime = 4;
                    this.tic += 3;
                    if (this.tic <= 9)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gent, 368, 293, 45, 45, -(1/2 * 45 * this.size), -(1/2 * 45 * this.size), 45 * this.size, 45 * this.size);
                        XXX.restore();
                    }
                    else if (this.tic <= 18)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gent, 444, 295, 45, 45, -(1/2 * 45 * this.size), -(1/2 * 45 * this.size), 45 * this.size, 45 * this.size);
                        XXX.restore();
                    }
                    else if (this.tic <= 27)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gent, 513, 297, 45, 45, -(1/2 * 45 * this.size), -(1/2 * 45 * this.size), 45 * this.size, 45 * this.size);
                        XXX.restore();
                    }
                    else if (this.tic <= 36)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gent, 579, 297, 45, 45, -(1/2 * 45 * this.size), -(1/2 * 45 * this.size), 45 * this.size, 45 * this.size);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gent, 579, 297, 45, 45, -(1/2 * 45 * this.size), -(1/2 * 45 * this.size), 45 * this.size, 45 * this.size);
                        XXX.restore();
                        this.phase = 0;
                        X = this.information[1];
                        Y = this.information[2];
                        map = this.information[3];
                    }
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gent, 368, 293, 45, 45, -(1/2 * 45 * this.size), -(1/2 * 45 * this.size), 45 * this.size, 45 * this.size);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2) //empty desk
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 16, 446, 104, 46, -(1/2 * 104 * this.size), -(1/2 * 46 * this.size), 104 * this.size, 46 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 3) //science-l a b
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 150, 446, 104, 46, -(1/2 * 104 * this.size), -(1/2 * 46 * this.size), 104 * this.size, 46 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 4) //computer
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 280, 446, 104, 46, -(1/2 * 104 * this.size), -(1/2 * 46 * this.size), 104 * this.size, 46 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 5) //short wall
            {
                this.size = this.information;
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 584, 403, 90, 29, -(1/2 * 90 * this.size), -(1/2 * 29 * this.size), 90 * this.size, 29 * this.size);
                XXX.restore();
                if (this.putBarriers)
                {
                    this.putBarriers = false;
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -35.97794267052814 * this.size), (this.Y + -6.524498641339051 * this.size), 14 * this.size, 73 * this.size, true));
                    }
                    else if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -6.404640629981259 * this.size), (this.Y + -36.81007340743872 * this.size), 73 * this.size, 14 * this.size, true));
                    }
                }
            }
            else if (this.temporary == 6) //short window
            {
                this.size = this.information;
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 583, 374, 90, 29, -(1/2 * 90 * this.size), -(1/2 * 29 * this.size), 90 * this.size, 29 * this.size);
                XXX.restore();
                if (this.putBarriers)
                {
                    this.putBarriers = false;
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -36.632419126223795 * this.size), (this.Y + -7.015880895978171 * this.size), 13 * this.size, 75 * this.size, true));
                    }
                    else if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -6.359164083902215 * this.size), (this.Y + -39.04397893764417 * this.size), 75 * this.size, 13 * this.size, true));
                    }
                }
            }
            else if (this.temporary == 7) //long wall
            {
                this.size = this.information;
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 455, 349, 172, 27, -(1/2 * 172 * this.size), -(1/2 * 27 * this.size), 172 * this.size, 27 * this.size);
                XXX.restore();
                if (this.putBarriers)
                {
                    this.putBarriers = false;
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -77.77162429510281 * this.size), (this.Y + -6.385264696009472 * this.size), 14 * this.size, 156 * this.size, true));
                    }
                    else if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -6.707246129984924 * this.size), (this.Y + -78.72292933319932 * this.size), 156 * this.size, 14 * this.size, true));
                    }
                }
            }
            else if (this.temporary == 8) //long window
            {
                this.size = this.information;
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 623, 349, 172, 27, -(1/2 * 172 * this.size), -(1/2 * 27 * this.size), 172 * this.size, 27 * this.size);
                XXX.restore();
                if (this.putBarriers)
                {
                    this.putBarriers = false;
                    if (this.rotation == 0 || this.rotation == Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -77.89436200460841 * this.size), (this.Y + -7.352614503275618 * this.size), 12 * this.size, 156 * this.size, true));
                    }
                    else if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
                    {
                        barrierList.push(new Barrier((this.X + -6.064133893577491 * this.size), (this.Y + -79.16603010936024 * this.size), 156 * this.size, 12 * this.size, true));
                    }
                }
            }
            else if (this.temporary == 9) //lifting door
            {
                this.size = this.information;
                this.interactionRange = 70 * this.size;
                this.radius = 50 * this.size;

                if (this.phase == 1)
                {
                    if (this.playerer < 50 * this.size)
                    {
                        if (this.etapa == 0)
                        {
                            this.putBarriers = true;
                        }

                        this.etapa = 1;
                    }
                    else
                    {
                        if (this.etapa == 1)
                        {
                            this.putBarriers = true;
                        }

                        this.etapa = 0;
                    }

                    if (this.etapa == 1)
                    {
                        //DRAWSELF
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gent, 692, 407, 85, 24, -(1/2 * 85 * this.size), -(1/2 * 24 * this.size), 85 * this.size, 24 * this.size);
                        XXX.restore();
                        if (this.putBarriers)
                        {
                            this.putBarriers = false;
                            var deleteList = [];
                            for (var l = 0; l < barrierList.length; l++)
                            {
                                if (barrierList[l].info == this.clave)
                                {
                                    deleteList.push(l);
                                }
                            }
                            for (var l = deleteList.length - 1; l > -1; l--)
                            {
                                barrierList.splice(deleteList[l], 1);
                            }

                            if (this.rotation == 0 || this.rotation == Math.PI)
                            {
                                barrierList.push(new Barrier((this.X + 26.33896278485645 * this.size), (this.Y + -7.087289068071186 * this.size), 14 * this.size, 10 * this.size, true, this.clave));
                                barrierList.push(new Barrier((this.X + -39.69603005122735 * this.size), (this.Y + -6.544796696507547 * this.size), 14 * this.size, 10 * this.size, true, this.clave));
                            }
                            else if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
                            {
                                barrierList.push(new Barrier((this.X + -5.508224735384829 * this.size), (this.Y + -36.67822171322587 * this.size), 10 * this.size, 12 * this.size, true, this.clave));
                                barrierList.push(new Barrier((this.X + -6.508224735384829 * this.size), (this.Y + 26.321778286774133 * this.size), 10 * this.size, 12 * this.size, true, this.clave));
                            }
                        }
                    }
                    else
                    {
                        //DRAWSELF
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(gent, 692, 380, 85, 24, -(1/2 * 85 * this.size), -(1/2 * 24 * this.size), 85 * this.size, 24 * this.size);
                        XXX.restore();
                        if (this.putBarriers)
                        {
                            this.putBarriers = false;
                            var deleteList = [];
                            for (var l = 0; l < barrierList.length; l++)
                            {
                                if (barrierList[l].info == this.clave)
                                {
                                    deleteList.push(l);
                                }
                            }
                            for (var l = deleteList.length - 1; l > -1; l--)
                            {
                                barrierList.splice(deleteList[l], 1);
                            }

                            if (this.rotation == 0 || this.rotation == Math.PI)
                            {
                                barrierList.push(new Barrier((this.X + -36.355127078560145 * this.size), (this.Y + -4.184865131620882 * this.size), 10 * this.size, 73 * this.size, true, this.clave));
                            }
                            else if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
                            {
                                barrierList.push(new Barrier((this.X + -6.508224735384829 * this.size), (this.Y + -36.67822171322587 * this.size), 73 * this.size, 12 * this.size, true, this.clave));
                            }
                        }
                    }
                }
                else
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gent, 692, 380, 85, 24, -(1/2 * 85 * this.size), -(1/2 * 24 * this.size), 85 * this.size, 24 * this.size);
                    XXX.restore();
                    if (this.putBarriers)
                    {
                        this.putBarriers = false;
                        var deleteList = [];
                        for (var l = 0; l < barrierList.length; l++)
                        {
                            if (barrierList[l].info == this.clave)
                            {
                                deleteList.push(l);
                            }
                        }
                        for (var l = deleteList.length - 1; l > -1; l--)
                        {
                            barrierList.splice(deleteList[l], 1);
                        }

                        if (this.rotation == 0 || this.rotation == Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -36.355127078560145 * this.size), (this.Y + -4.184865131620882 * this.size), 10 * this.size, 73 * this.size, true, this.clave));
                        }
                        else if (this.rotation == 1/2 * Math.PI || this.rotation == -1/2 * Math.PI)
                        {
                            barrierList.push(new Barrier((this.X + -6.508224735384829 * this.size), (this.Y + -36.67822171322587 * this.size), 73 * this.size, 12 * this.size, true, this.clave));
                        }
                    }
                }
            }
            else if (this.temporary == 10) //data cataloger
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 399, 433, 69, 62, -(1/2 * 69 * this.size), -(1/2 * 62 * this.size), 69 * this.size, 62 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 11) //vending machine
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 415, 383, 50, 29, -(1/2 * 50 * this.size), -(1/2 * 29 * this.size), 50 * this.size, 29 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 12) //shelf
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 681, 454, 101, 23, -(1/2 * 101 * this.size), -(1/2 * 23 * this.size), 101 * this.size, 23 * this.size);
                XXX.restore();
            }

            //barrierCreator(this.X, this.Y);

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.temporary == 9) //door
                {
                    this.putBarriers = true;
                    if (this.phase == 1)
                    {
                        this.phase = 0;
                    }
                    else
                    {
                        this.phase = 1;
                    }
                }
                else if (this.temporary == 1) //teleporter
                {
                    this.phase = 1;
                }
            }
        }
        else if (this.type == "trainingDummy")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.5;
            }

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = Math.round(15 * this.size);
            }

            //DRAWSELF
            if (this.health <= 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1032, 807, 35, 24, -(1/2 * 35 * this.size), -(1/2 * 24 * this.size), 35 * this.size, 24 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1102, 810, 35, 24, -(1/2 * 35 * this.size), -(1/2 * 24 * this.size), 35 * this.size, 24 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 7.5 * this.size;

            //damage sensing
            if (this.health > 0)
            {
                if (player.cutcut == true && this.playerer < 400)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.distance)
                    {
                        player.experience += Math.min((0.2 * player.weapon.damage), this.health * 0.2);
                        this.health -= player.weapon.damage;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "rangedTarget")
        {
            //TRAITS
            this.zIndex = 1;
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.5;
            }

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = Math.round(4 * this.size);
            }

            //DRAWSELF
            if (this.health <= 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1077, 810, 26, 27, -(1/2 * 26 * this.size), -(1/2 * 27 * this.size), 26 * this.size, 27 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bloat, 1147, 812, 26, 27, -(1/2 * 26 * this.size), -(1/2 * 27 * this.size), 26 * this.size, 27 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 12 * this.size;

            //projectile sensing
            for (var i = 0; i < playerProjectiles.length; i++)
            {
                if (playerProjectiles[i].notShotByPlayer != true)
                {
                    var distAProyectil = this.dst(playerProjectiles[i].X, playerProjectiles[i].Y);
                    if (distAProyectil <= this.radius)
                    {
                        worldItems.push([new Item(playerProjectiles[i].tipo, this.X, this.Y), 1]);
                        if (this.health > 0)
                        {
                            player.experience += 1;
                            this.health -= 1;
                        }
                        playerProjectiles.splice(i, 1);
                        break;
                    }
                }
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "wendigoCircle")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1.1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0;
                this.victim = "none";
            }

            if (this.playerer <= this.radius && this.tic < 5 && player.wendigo != true && this.victim == "none" && player.vamprism != true && player.lycanthropy != true && player.venandi < 400)
            {
                if (new Date().getTime() - player.timeSinceHumanFleshConsumed < 20 * 1000 * 60)
                {
                    this.tic = 5;
                    this.victim = "player";
                }
            }

            var wendVic = false;
            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (ArtificialIntelligenceAccess[j].cannibal == true && ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].cannibal == true && ArtificialIntelligenceAccess[j].type == "Soldier")
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        wendVic = ArtificialIntelligenceAccess[j];
                        this.victim = "unit";
                        if (this.tic < 5)
                        {
                            this.tic = 5;
                        }
                    }
                }
            }

            if (this.victim == "player")
            {
                this.zIndex = 4;
                this.X = X;
                this.Y = Y;
                this.rotation = player.rotation - 1/2 * Math.PI;
                clearEquipped();
                player.stunnedXV = true;
                player.stunnedTime = 1;
            }
            if (this.victim == "unit")
            {
                this.zIndex = 4;
                this.X = wendVic.X;
                this.Y = wendVic.Y;
                this.rotation = wendVic.rotation;

                wendVic.stunX = true;
                wendVic.stunTime = 1;
            }

            if (this.tic >= 5)
            {
                this.tic += 0.75;
            }

            //DRAWSELF
            if (this.tic < 5)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 217, 1663, 157, 153, -(1/2 * 157 * this.size), -(1/2 * 153 * this.size), 157 * this.size, 153 * this.size);
                XXX.restore();
            }
            else if (this.tic < 10)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 217, 1663, 157, 153, -(1/2 * 157 * this.size), -(1/2 * 153 * this.size), 157 * this.size, 153 * this.size);
                XXX.restore();
            }
            else if (this.tic < 15)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 646, 1660, 157, 153, -(1/2 * 157 * this.size), -(1/2 * 153 * this.size), 157 * this.size, 153 * this.size);
                XXX.restore();
            }
            else if (this.tic < 20)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 673, 1816, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 25)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 559, 1824, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 30)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 457, 1827, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 35)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 321, 1826, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 40)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 216, 1825, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 45)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 115, 1826, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 50)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 0, 1827, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 55)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 1, 1925, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 60)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 109, 1931, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 65)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 223, 1938, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 70)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 327, 1940, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 75)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 433, 1943, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 80)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 535, 1946, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 85)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 538, 2040, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 90)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 438, 2037, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else if (this.tic < 95)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 304, 2037, 108, 104, -(1/2 * 108 * this.size), -(1/2 * 104 * this.size), 108 * this.size, 104 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 168, 2037, 122, 97, -(1/2 * 122 * this.size), -(1/2 * 97 * this.size), 122 * this.size, 97 * this.size);
                XXX.restore();
                if (this.victim == "player")
                {
                    player.wendigo = true;
                    player.form = "wendigo";
                    player.hunger = 10;
                    player.wendigoChange = "remaining";
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
                if (this.victim == "unit")
                {
                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Wendigo", Math.round(Math.random()), wendVic.ID));
                    wendVic.killNotByPlayer = true;
                    wendVic.health = -100;
                    wendVic.invisible = true;
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 60;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "vodkapaHome")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0;
                this.fullified = this.information;
                this.alphized = this.temporary;
                this.youthenator = 0;
                this.surpriseATK = false;

                this.cloneLineage = "vodkapa" + (Math.random()*100);
                this.breedSplice = 0;
                this.health = 1;
                this.healthMAX = 1;
                this.ident = "voddy";
                this.speed = 4;
                this.genes = {runter: false, speeder: false, smeller: false, breeder: false, aggro: false, sideliner: false, calculated: false, spleener: false, sterile: false};
            }

            if (this.alphized == "runt" && this.fullified)
            {
                this.youthenator += 0.2;
                if (this.youthenator > 500)
                {
                    this.youthenator = 0;
                    this.alphized = false;
                    this.cloneLineage = "vodkapa" + (Math.random()*100);
                }
            }
            else if (this.alphized == "baby" && this.fullified)
            {
                this.youthenator += 0.2;
                if (this.youthenator > 500)
                {
                    this.youthenator = 0;
                    this.alphized = true;
                    this.cloneLineage = "vodkapa" + (Math.random()*100);
                }
            }
            else if (this.alphized == false)
            {
                this.size = 0.7;

                //DRAWSELF
                if (this.tic < 10 && this.fullified)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 37, 405, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 20 && this.fullified)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 405, 400, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 30 && this.fullified)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 767, 399, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 1112, 399, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();

                    if (this.fullified == "new" || this.fullified == "sterile")
                    {
                        var voddy = new Unit(this.X + Math.cos(this.rotation) * 15, this.Y + Math.sin(this.rotation) * 15, "Vodkapa", false, "voddy");

                        voddy.rotation = this.rotation + 1/2 * Math.PI;
                        voddy.newRotation = this.rotation + 1/2 * Math.PI;
                        if (this.fullified == "sterile")
                        {
                            this.genes = {runter: Math.round(Math.random()), speeder: Math.round(Math.random()), smeller: Math.round(Math.random()), breeder: Math.round(Math.random()), aggro: Math.round(Math.random()), sideliner: Math.round(Math.random()), calculated: Math.round(Math.random()), spleener: Math.round(Math.random()), sterile: true};
                            voddy.genes = this.genes;
                        }
                        ArtificialIntelligenceAccess.push(voddy);
                    }
                    else if (this.fullified == true)
                    {
                        var voddy = new Unit(this.X + Math.cos(this.rotation) * 15, this.Y + Math.sin(this.rotation) * 15, "Vodkapa", false, "voddy");
                        voddy.rotation = this.rotation + 1/2 * Math.PI;
                        voddy.newRotation = this.rotation + 1/2 * Math.PI;
                        voddy.breedSplice = this.breedSplice;
                        voddy.health = this.health;
                        voddy.healthMAX = this.healthMAX;
                        voddy.speed = this.speed;
                        voddy.genes = this.genes;
                        voddy.ID = this.ident;
                        voddy.cloneLineage = this.cloneLineage;
                        voddy.baseTeam = this.cloneLineage;
                        voddy.team = this.cloneLineage;
                        ArtificialIntelligenceAccess.push(voddy);
                    }
                    this.fullified = false;
                }
            }
            else if (this.alphized == true)
            {
                this.size = 1;

                //DRAWSELF
                if (this.tic < 10 && this.fullified)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 37, 405, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 20 && this.fullified)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 405, 400, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 30 && this.fullified)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 767, 399, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(kapa, 1112, 399, 287, 263, -(1/2 * 287 * this.size), -(1/2 * 263 * this.size), 287 * this.size, 263 * this.size);
                    XXX.restore();

                    if (this.fullified == "new" || this.fullified == "sterile")
                    {
                        var voddy = new Unit(this.X + Math.cos(this.rotation) * 22, this.Y + Math.sin(this.rotation) * 22, "Vodkapa", true, "voddy");

                        voddy.rotation = this.rotation + 1/2 * Math.PI;
                        voddy.newRotation = this.rotation + 1/2 * Math.PI;
                        if (this.fullified == "sterile")
                        {
                            this.genes = {runter: Math.round(Math.random()), speeder: Math.round(Math.random()), smeller: Math.round(Math.random()), breeder: Math.round(Math.random()), aggro: Math.round(Math.random()), sideliner: Math.round(Math.random()), calculated: Math.round(Math.random()), spleener: Math.round(Math.random()), sterile: true};
                            voddy.genes = this.genes;
                        }
                        ArtificialIntelligenceAccess.push(voddy);
                    }
                    else if (this.fullified == true)
                    {
                        var voddy = new Unit(this.X + Math.cos(this.rotation) * 22, this.Y + Math.sin(this.rotation) * 22, "Vodkapa", true, "voddy");
                        voddy.rotation = this.rotation + 1/2 * Math.PI;
                        voddy.newRotation = this.rotation + 1/2 * Math.PI;
                        voddy.breedSplice = this.breedSplice;
                        voddy.health = this.health;
                        voddy.healthMAX = this.healthMAX;
                        voddy.speed = this.speed;
                        voddy.genes = this.genes;
                        voddy.ID = this.ident;
                        voddy.cloneLineage = this.cloneLineage;
                        voddy.baseTeam = this.cloneLineage;
                        voddy.team = this.cloneLineage;
                        ArtificialIntelligenceAccess.push(voddy);
                    }
                    this.fullified = false;
                }
            }

            if (this.alphized == true && this.alphized != "runt" && this.alphized != "baby" && this.fullified || this.alphized == false && this.fullified)
            {
                //regenerate health while resting
                if (this.genes.spleener == true)
                {
                    this.health += 0.15;
                }
                else
                {
                    this.health += 0.05;
                }
                if (this.health > this.healthMAX)
                {
                    this.health = this.healthMAX;
                }

                //leave home to attack
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].team != "docile" && ArtificialIntelligenceAccess[i].team != "ulgoyia" && ArtificialIntelligenceAccess[i].team != "shehidia")
                    {
                        if (ArtificialIntelligenceAccess[i].type != "Vodkapa" || ArtificialIntelligenceAccess[i].cloneLineage != this.cloneLineage)
                        {
                            if (this.genes.calculated == true && ArtificialIntelligenceAccess[i].healthMAX <= (this.health + 9) && this.health >= this.healthMAX || this.genes.calculated == false || ArtificialIntelligenceAccess[i].type == "Person" && this.health > 1/2 * this.healthMAX || ArtificialIntelligenceAccess[i].type == "Soldier" && this.health > 1/2 * this.healthMAX)
                            {
                                if (this.genes.smeller == true)
                                {
                                    if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) <= 400 * this.size)
                                    {
                                        this.surpriseATK = true;
                                    }
                                }
                                else
                                {
                                    if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) <= 290 * this.size)
                                    {
                                        this.surpriseATK = true;
                                    }
                                }
                            }
                        }
                    }
                }

                if (this.genes.calculated == true)
                {
                    if (this.health >= this.healthMAX)
                    {
                        if (this.genes.smeller == true)
                        {
                            if (this.playerer <= 400 * this.size)
                            {
                                this.surpriseATK = true;
                            }
                        }
                        else
                        {
                            if (this.playerer <= 290 * this.size)
                            {
                                this.surpriseATK = true;
                            }
                        }
                    }
                }
                else
                {
                    if (this.genes.smeller == true)
                    {
                        if (this.playerer <= 400 * this.size)
                        {
                            this.surpriseATK = true;
                        }
                    }
                    else
                    {
                        if (this.playerer <= 290 * this.size)
                        {
                            this.surpriseATK = true;
                        }
                    }
                }

                if (this.surpriseATK == true)
                {
                    if (this.tic < 10)
                    {
                        this.tic += 0.2;
                    }
                    else
                    {
                        this.tic += 1;
                    }
                }


                //asexual breeding
                this.breedSplice += 0.25;
                if (this.breedSplice > 900 && this.genes.sterile == false)
                {
                    this.breedSplice = -450;
                    if (this.genes.breeder)
                    {
                        for (var j = 0; j < 2; j++)
                        {
                            if (this.alphized == false)
                            {
                                if (this.genes.runter == true)
                                {
                                    if (Math.random() > 0.8)
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                    else
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                }
                                else
                                {
                                    if (Math.random() > 0.999)
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                    else
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                }
                            }
                            else if (this.alphized == true)
                            {
                                if (this.genes.runter == true)
                                {
                                    if (Math.random() > 0.8)
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                    else
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                }
                                else
                                {
                                    if (Math.random() > 0.999)
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                    else
                                    {
                                        var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                        voddy.genes = this.genes;
                                        if (Math.random() < 0.04)
                                        {
                                            voddy.genes.sterile = true;
                                        }
                                        voddy.ID = this.ident;
                                        voddy.cloneLineage = this.cloneLineage;
                                        voddy.baseTeam = this.cloneLineage;
                                        voddy.team = this.cloneLineage;
                                        ArtificialIntelligenceAccess.push(voddy);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (this.alphized == false)
                        {
                            if (this.genes.runter == true)
                            {
                                if (Math.random() > 0.8)
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                                else
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                            }
                            else
                            {
                                if (Math.random() > 0.999)
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                                else
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                            }
                        }
                        else if (this.alphized == true)
                        {
                            if (this.genes.runter == true)
                            {
                                if (Math.random() > 0.8)
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                                else
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                            }
                            else
                            {
                                if (Math.random() > 0.999)
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "runt", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                                else
                                {
                                    var voddy = new Unit(this.X, this.Y, "Vodkapa", "baby", "voddy");
                                    voddy.genes = this.genes;
                                    if (Math.random() < 0.04)
                                    {
                                        voddy.genes.sterile = true;
                                    }
                                    voddy.ID = this.ident;
                                    voddy.cloneLineage = this.cloneLineage;
                                    voddy.baseTeam = this.cloneLineage;
                                    voddy.team = this.cloneLineage;
                                    ArtificialIntelligenceAccess.push(voddy);
                                }
                            }
                        }
                    }
                }
            }

            if (this.alphized == true && this.alphized != "runt" && this.alphized != "baby" || this.alphized == false)
            {
                var distToPlat = pDist(X, Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                if (distToPlat <= 77 * this.size * 77 * this.size)
                {
                    player.land = true;
                }

                distToPlat = 1000000000000000;

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    distToPlat = pDist(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y, this.X + Math.cos(0 + this.rotation) * 30 * this.size, this.Y + Math.sin(0 + this.rotation) * 30 * this.size, this.X + Math.cos(Math.PI + this.rotation) * 30 * this.size, this.Y + Math.sin(Math.PI + this.rotation) * 30 * this.size);
                    if (distToPlat <= 77 * this.size * 77 * this.size)
                    {
                        ArtificialIntelligenceAccess[i].land = true;
                    }
                }
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "deadDeer")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.1;
            }

            //DRAWSELF
            if (this.information == true)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 114, 1117, 105, 86, -(1/2 * 105 * this.size), -(1/2 * 86 * this.size), 105 * this.size, 86 * this.size);
                XXX.restore();
            }
            else //eviscerated deer
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 663, 2779, 177, 206, -(1/2 * 177 * this.size), -(1/2 * 206 * this.size), 177 * this.size, 206 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "deadNaaprid")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.25;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(verse, 3080, 90, 71, 48, -(1/2 * 71 * this.size), -(1/2 * 48 * this.size), 71 * this.size, 48 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "guillotine")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;
            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.size = 1.15;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0;
                this.manned = this.information[1]
                this.executed = this.information[0];
                this.isPlayer = this.information[2];
                this.headX = 0;
                this.headY = 0;
                this.killPlayerTic = 0;
                this.chopPlayer = 0;
                this.choppedDone = false;
                this.radius = 40;
                this.doAiChop = false;
            }

            if (this.isPlayer == true && player.form == false && this.choppedDone == false)
            {

                clearEquipped();
                player.guillotine = true;
                this.chopPlayer += 1;
                X = this.X;
                Y = this.Y;
                this.temporary = player.race;
                if (this.executed == true)
                {
                    this.killPlayerTic += 1;
                    if (this.killPlayerTic > 75)
                    {
                        player.health = -20;

                        if (player.vamprism == true || player.undying)
                        {
                            this.choppedDone = true;
                            player.guillotine = false;
                        }
                    }
                }
            }

            if (quests.guillotine == true)
            {
                this.doAiChop = true;
            }

            if (this.doAiChop == true && this.manned == true || this.chopPlayer > 90 && this.manned == true)
            {
                this.tic += 2;
            }

            //DRAWSELF

            if (this.choppedDone == true && this.isPlayer == true)
            {
                this.radius = 16;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 904, 449, 62, 15, -1/2 * 62 * this.size, -1/2 * 15 * this.size, 62 * this.size, 15 * this.size);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width - 30, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 466, 828, 146, 19, -1/2 * 146 * this.size, -1/2 * 19 * this.size, 146 * this.size, 19 * this.size);
                XXX.restore();
            }
            else if (this.manned == false && this.executed == false)
            {
                this.headY = 11;
                this.headX = 1;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 806, 16, 244, 73, -1/2 * 244 * this.size, -1/2 * 73 * this.size, 244 * this.size, 73 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //w
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();
            }
            else if (this.tic < 4 && this.manned == true && this.executed == false)
            {
                this.headY = 11;
                this.headX = 1;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 801, 96, 257, 73, -1/2 * 257 * this.size, -1/2 * 73 * this.size, 257 * this.size, 73 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();
            }
            else if (this.tic < 8 && this.manned == true && this.executed == false)
            {
                this.headY = 11;
                this.headX = 1;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 801, 185, 257, 73, -1/2 * 257 * this.size, -1/2 * 73 * this.size, 257 * this.size, 73 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();
            }
            else if (this.tic < 12 && this.manned == true && this.executed == false)
            {
                this.headY = 11;
                this.headX = 0;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 802, 259, 257, 73, -1/2 * 257 * this.size, -1/2 * 73 * this.size, 257 * this.size, 73 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();
            }
            else if (this.tic < 16 && this.manned == true && this.executed == false)
            {
                this.headY = 11;
                this.headX = 0;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 804, 342, 257, 73, -1/2 * 257 * this.size, -1/2 * 73 * this.size, 257 * this.size, 73 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width - 27, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 344, 849, 62, 19, -1/2 * 62 * this.size, -1/2 * 19 * this.size, 62 * this.size, 19 * this.size);
                XXX.restore();
            }
            else if (this.tic < 20 && this.manned == true && this.executed == false)
            {
                this.headY = 11;
                this.headX = 0;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 804, 342, 257, 73, -1/2 * 257 * this.size, -1/2 * 73 * this.size, 257 * this.size, 73 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width - 27, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 416, 849, 100, 19, -1/2 * 100 * this.size, -1/2 * 19 * this.size, 100 * this.size, 19 * this.size);
                XXX.restore();
            }
            else if (this.tic < 24 && this.manned == true && this.executed == false || this.tic >= 24 && this.manned == true && this.executed == false)
            {
                this.headY = 34;
                this.headX = -16;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 807, 421, 257, 73, -1/2 * 257 * this.size, -1/2 * 73 * this.size, 257 * this.size, 73 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width - 30, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 466, 828, 146, 19, -1/2 * 146 * this.size, -1/2 * 19 * this.size, 146 * this.size, 19 * this.size);
                XXX.restore();

                if (this.tic >= 35)
                {
                    this.executed = true;
                    this.manned = true;
                    quests.guillotine = false;
                }
            }
            else if (this.manned == true && this.executed == true)
            {
                this.headY = 34;
                this.headX = -16;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 894, 408, 82, 98, -1/2 * 82 * this.size, -1/2 * 98 * this.size, 82 * this.size, 98 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width - 30, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 466, 828, 146, 19, -1/2 * 146 * this.size, -1/2 * 19 * this.size, 146 * this.size, 19 * this.size);
                XXX.restore();

                this.manned = false;
                ArtificialIntelligenceAccess.push(new Unit(this.X + Math.cos(this.rotation + 0.085 * Math.PI) * 120, this.Y + Math.sin(this.rotation + 0.085 * Math.PI) * 120, "Soldier", false, "Headsman", {race: "Cephrite", faction: "Cephrite", con: 9, speed: 1.25, outfit: ["cephrianArmour", 10], weapon: ["none", [0.45, 0.45], 0, 3, 1.1], ranged: [false, "arrow", 8, 2100, 1, 7, 0, "stunI", 2.65], patrolStops: 1, patrolLoop: false, route:[[this.X + Math.cos(this.rotation) * 120, this.Y + Math.sin(this.rotation) * 120]]}));
            }
            else if (this.manned == false && this.executed == true)
            {
                this.headY = 34;
                this.headX = -16;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 894, 408, 82, 98, -1/2 * 82 * this.size, -1/2 * 98 * this.size, 82 * this.size, 98 * this.size);

                if (this.temporary == 1 || this.temporary == "#e68900") //nirwaden
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#e68900";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 2 || this.temporary == "green") //kel
                {
                    XXX.beginPath();
                    XXX.fillStyle = "green";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 3 || this.temporary == "navy") //freynor
                {
                    XXX.beginPath();
                    XXX.fillStyle = "navy";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 4 || this.temporary == "#663300") //thengar
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#663300";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 5 || this.temporary == "darkRed") //aldrekii
                {
                    XXX.beginPath();
                    XXX.fillStyle = "darkRed";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 6 || this.temporary == "#1c1c1c") //vardanian
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#1c1c1c";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 7 || this.temporary == "gold") //orgell
                {
                    XXX.beginPath();
                    XXX.fillStyle = "gold";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 8 || this.temporary == "#06F4CA") //sylkeem
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#06F4CA";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 9 || this.temporary == "purple") //cephrian
                {

                    XXX.beginPath();
                    XXX.fillStyle = "purple";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 10 || this.temporary == "white") //outlander
                {

                    XXX.beginPath();
                    XXX.fillStyle = "white";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 11 || this.temporary == "#999966") //empiric
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#999966";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary == 12 || this.temporary == "#2a0038") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "#2a0038";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                else if (this.temporary >= 13 || this.temporary == "pink") //faelan
                {
                    XXX.beginPath();
                    XXX.fillStyle = "pink";
                    XXX.arc(this.headX, this.headY, 10, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.strokeStyle = "black";
                    XXX.lineWidth = 0.5;
                    XXX.stroke();
                }
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width - 30, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 466, 828, 146, 19, -1/2 * 146 * this.size, -1/2 * 19 * this.size, 146 * this.size, 19 * this.size);
                XXX.restore();
            }


            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "deadDrile")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.25;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(polux, 799, 53, 195, 92, -1/2 * 195 * this.size, -1/2 * 92 * this.size, 195 * this.size, 92 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "deadDrileQST") //this is for a particular quest
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.25;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(polux, 799, 53, 195, 92, -1/2 * 195 * this.size, -1/2 * 92 * this.size, 195 * this.size, 92 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            if (this.playerer < 200)
            {
                quests.lostHuntressFound = true;
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "deadWaanti")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.25;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(furr, 268, 236, 76, 46, -1/2 * 76 * this.size, -1/2 * 46 * this.size, 76 * this.size, 46 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "pixiVictim")
        {
            //TRAITS
            this.solid = false;
            this.size = this.information;
            if (this.phase == 0)
            {
                this.interactionRange = 40 * this.size;
            }
            else
            {
                this.interactionRange = 1;
            }

            //DRAWSELF
            if (this.temporary == 1)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pixi, 384, 236, 72, 67, -1/2 * 72 * this.size, -1/2 * 67 * this.size, 72 * this.size, 67 * this.size);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pixi, 473, 221, 72, 67, -1/2 * 72 * this.size, -1/2 * 67 * this.size, 72 * this.size, 67 * this.size);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pixi, 552, 91, 72, 67, -1/2 * 72 * this.size, -1/2 * 67 * this.size, 72 * this.size, 67 * this.size);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pixi, 556, 155, 72, 67, -1/2 * 72 * this.size, -1/2 * 67 * this.size, 72 * this.size, 67 * this.size);
                    XXX.restore();
                }
            }
            else if (this.temporary == 3)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pixi, 630, 86, 72, 67, -1/2 * 72 * this.size, -1/2 * 67 * this.size, 72 * this.size, 67 * this.size);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pixi, 634, 139, 72, 67, -1/2 * 72 * this.size, -1/2 * 67 * this.size, 72 * this.size, 67 * this.size);
                    XXX.restore();
                }
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 475, 150, 72, 67, -1/2 * 72 * this.size, -1/2 * 67 * this.size, 72 * this.size, 67 * this.size);
                XXX.restore();
            }

            if (this.playerer <= (20 * this.size))
            {
                this.phase = 1;
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.phase = 1;
            }
        }
        else if (this.type == "horseSkeleton")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 1.15;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(atal, 685, 328, 199, 129, -(1/2 * 199 * this.size * 0.7), -(1/2 * 129 * this.size * 0.7), 199 * this.size * 0.7, 129 * this.size * 0.7);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "sackmansSack")
        {
            //TRAITS
            this.interactionRange = 77;
            this.size = 1.4;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0;
                this.opened = quests.theDeermenAndTheWendigoSackOpened;
            }

            //DRAWSELF
            if (this.opened == false)
            {
                this.solid = true;
                this.tic += 2;
                if (this.tic < 10)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pavo, 569, 11, 47, 46, -(1/2 * 47 * this.size), -(1/2 * 46 * this.size), 47 * this.size, 46 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 20)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pavo, 614, 11, 47, 46, -(1/2 * 47 * this.size), -(1/2 * 46 * this.size), 47 * this.size, 46 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 30)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pavo, 659, 13, 47, 46, -(1/2 * 47 * this.size), -(1/2 * 46 * this.size), 47 * this.size, 46 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 40)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pavo, 700, 15, 47, 46, -(1/2 * 47 * this.size), -(1/2 * 46 * this.size), 47 * this.size, 46 * this.size);
                    XXX.restore();
                }
                else if (this.tic < 50)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pavo, 744, 16, 47, 46, -(1/2 * 47 * this.size), -(1/2 * 46 * this.size), 47 * this.size, 46 * this.size);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(pavo, 700, 15, 47, 46, -(1/2 * 47 * this.size), -(1/2 * 46 * this.size), 47 * this.size, 46 * this.size);
                    XXX.restore();
                    this.tic = 0;
                }
            }
            else
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pavo, 744, 69, 47, 46, -(1/2 * 47 * this.size), -(1/2 * 46 * this.size), 47 * this.size, 46 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                quests.theDeermenAndTheWendigoSackOpened = true;
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].ID == "Sackman" && ArtificialIntelligenceAccess[i].type == "Soldier")
                    {
                        ArtificialIntelligenceAccess[i].disturbed = true;
                        break;
                    }
                }
                if (quests.theDeermenAndTheWendigoSacked < 5 && this.opened == false)
                {
                    if (quests.theDeermenAndTheWendigoSacked == 0) //grettel is in the sack but still alive
                    {
                        if (uniqueChars.grettelLDS == true)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Person", false, "Grettel", {race: "Thengar", faction: "Thengar", personality: "scared", outfit: ["hoffalgreFurCloak", 0], weapon: ["none", [0.05, 0.05], 0, 0, 1.2], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 1, patrolLoop: false, route:[[148164.0611449937, -33034.80529272785]], kid: true}));
                            quests.theDeermenAndTheWendigoSaved = "grettel";
                        }
                        else
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Turkey", true, "preBuilt"));
                        }

                    }
                    else if (quests.theDeermenAndTheWendigoSacked == 1) //a 2nd kid is in the sack but still alive
                    {
                        uniqueChars.grettelLDS = false;
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Person", false, "Thengan Boy", {race: "Thengar", faction: "Thengar", personality: "scared", outfit: ["none", 0], weapon: ["none", [0.05, 0.05], 0, 0, 1.2], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 1, patrolLoop: false, route:[[0, 0]], kid: true}));
                    }
                    else if (quests.theDeermenAndTheWendigoSacked == 2) //a 3rd kid is in the sack but still alive
                    {
                        uniqueChars.grettelLDS = false;
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Person", false, "Thengan Girl", {race: "Thengar", faction: "Thengar", personality: "scared", outfit: ["hoffalgreFurCloak", 0], weapon: ["none", [0.04, 0.045], 0, 0, 1.6], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 1, patrolLoop: false, route:[[0, 0]], kid: true}));
                    }
                    else if (quests.theDeermenAndTheWendigoSacked == 3) // a 4rth kid is in the sack but still alive
                    {
                        uniqueChars.grettelLDS = false;
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Person", false, "Thengar Boy", {race: "Thengar", faction: "Thengar", personality: "scared", outfit: ["hoffalgreFurCloak", 0], weapon: ["none", [0.05, 0.05], 0, 0, 1.2], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 1, patrolLoop: false, route:[[0, 0]], kid: true}));
                    }
                    else if (quests.theDeermenAndTheWendigoSacked == 4) //rosy red is in the sack but still alive
                    {
                        uniqueChars.grettelLDS = false;
                        if (uniqueChars.roseyRedLDS == true)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Person", false, "Little Rosey Red", {race: "Thengar", faction: "Thengar", personality: "scared", outfit: ["littleRedRidingHood", 0], weapon: ["rose", [0, 0], 0, 0, 10], ranged: [false, "arrow", 1, 2000, 1, 6, 0, "none", 1.25], patrolStops: 1, patrolLoop: false, route:[[147832.24742762043, -33025.12709050626]], kid: true}));
                            quests.theDeermenAndTheWendigoSaved = "rosey";
                        }
                        else
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Turkey", true, "preBuilt"));
                        }
                    }
                    else
                    {
                        uniqueChars.roseyRedLDS = false;
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Turkey", true, "preBuilt"));
                    }

                }
                else if (this.opened == false)
                {
                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Turkey", true, "preBuilt"));
                }
                this.opened = true;
            }
        }
        else if (this.type == "dalgerNest")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(stic, 26, 624, 148, 150, -1/2 * 148 * this.size, -1/2 * 150 * this.size, 148 * this.size, 150 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "turkeyNest")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.size = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(pavo, 722, 343, 69, 66, -1/2 * 69 * this.size, -1/2 * 66 * this.size, 69 * this.size, 66 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "dethElkPile")
        {
            //TRAITS
            this.interactionRange = 100;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.vacio = true;
                this.health = 25;
                this.team = this.information;
                this.usable = false;

                if (this.temporary == true)
                {
                    this.built = 1;
                    this.resources = {elkMeat: 20};
                }
                else
                {
                    this.resources = {elkMeat: 0};
                }
            }

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //DRAWSELF
            if (this.built == 0)
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 793, 570, 98, 86, -1/2 * 98 * this.size, -1/2 * 86 * this.size, 98 * this.size, 86 * this.size);
                XXX.restore();
            }
            else
            {
                if (this.resources.elkMeat <= 0)
                {
                    this.solid = false;
                    this.radius = 18;
                    this.vacio = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 903, 666, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else if (this.resources.elkMeat < 4)
                {
                    this.solid = true;
                    this.radius = 5;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 908, 659, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else if (this.resources.elkMeat < 9)
                {
                    this.solid = true;
                    this.radius = 10;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 908, 733, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.solid = true;
                    this.radius = 15;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 909, 809, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                this.usable = true;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.health -= 10;
            }
        }
        else if (this.type == "dethGulPile")
        {
            //TRAITS
            this.interactionRange = 100;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.vacio = true;
                this.health = 25;
                this.team = this.information;
                this.usable = false;

                if (this.temporary == true)
                {
                    this.built = 1;
                    this.resources = {ghoulMeat: 20};
                }
                else
                {
                    this.resources = {ghoulMeat: 0};
                }
            }

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //DRAWSELF
            if (this.built == 0)
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 793, 570, 98, 86, -1/2 * 98 * this.size, -1/2 * 86 * this.size, 98 * this.size, 86 * this.size);
                XXX.restore();
            }
            else
            {
                if (this.resources.ghoulMeat <= 0)
                {
                    this.solid = false;
                    this.radius = 5;
                    this.vacio = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1124, 563, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else if (this.resources.ghoulMeat < 4)
                {
                    this.solid = true;
                    this.radius = 5;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1128, 655, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else if (this.resources.ghoulMeat < 9)
                {
                    this.solid = true;
                    this.radius = 10;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1129, 730, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.solid = true;
                    this.radius = 15;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1130, 808, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                this.usable = true;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.health -= 10;
            }
        }
        else if (this.type == "dethKoiPile")
        {
            //TRAITS
            this.interactionRange = 100;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.vacio = true;
                this.health = 25;
                this.team = this.information;
                this.usable = false;

                if (this.temporary == true)
                {
                    this.built = 1;
                    this.resources = {koivayaMeat: 20};
                }
                else
                {
                    this.resources = {koivayaMeat: 0};
                }
            }

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //DRAWSELF
            if (this.built == 0)
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 793, 570, 98, 86, -1/2 * 98 * this.size, -1/2 * 86 * this.size, 98 * this.size, 86 * this.size);
                XXX.restore();
            }
            else
            {
                if (this.resources.koivayaMeat <= 0)
                {
                    this.solid = false;
                    this.radius = 18;
                    this.vacio = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1012, 560, 98, 86, -1/2 * 98 * this.size, -1/2 * 86 * this.size, 98 * this.size, 86 * this.size);
                    XXX.restore();
                }
                else if (this.resources.koivayaMeat < 4)
                {
                    this.solid = true;
                    this.radius = 5;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1017, 656, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else if (this.resources.koivayaMeat < 9)
                {
                    this.solid = true;
                    this.radius = 10;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1017, 731, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.solid = true;
                    this.radius = 15;
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 1020, 807, 98, 80, -1/2 * 98 * this.size, -1/2 * 80 * this.size, 98 * this.size, 80 * this.size);
                    XXX.restore();
                }
                this.usable = true;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.health -= 10;
            }
        }
        else if (this.type == "dethArmory")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.vacio = true;
                this.health = 19;
                this.team = this.information;
                this.usable = false;

                if (this.temporary == true)
                {
                    this.built = 2;
                    this.resources = {claws: 2, spear: 2, spike: 2, blowdart: 60, blowgun: 2};
                }
                else
                {
                    this.resources = {claws: 0, spear: 0, spike: 0, blowdart: 0, blowgun: 0};
                }
            }

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //DRAWSELF
            if (this.built == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 406, 948, 75, 44, -1/2 * 75 * this.size, -1/2 * 44 * this.size, 75 * this.size, 44 * this.size);
                XXX.restore();
            }
            else if (this.built == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 407, 1002, 74, 33, -1/2 * 74 * this.size, -1/2 * 33 * this.size, 74 * this.size, 33 * this.size);
                XXX.restore();
            }
            else
            {
                if (this.resources.claws + this.resources.spear + this.resources.spike + this.resources.blowdart + this.resources.blowgun > 0)
                {
                    this.vacio = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 314, 1034, 76, 46, -1/2 * 76 * this.size, -1/2 * 46 * this.size, 76 * this.size, 46 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.vacio = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 407, 1002, 74, 33, -1/2 * 74 * this.size, -1/2 * 33 * this.size, 74 * this.size, 33 * this.size);
                    XXX.restore();
                }
                this.usable = true;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.health -= 10;
            }
        }
        else if (this.type == "dethOutfitter")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 19;
                this.team = this.information;
                this.usable = false;
                this.vacio = true;

                if (this.temporary == 1) //elk
                {
                    this.built = 2;
                    this.resources = {elkMaker: 7, elkStalker: 7, elkShaman: 2, elkChief: 2, koiMaker: 0, koiStalker: 0, koiShaman: 0, koiChief: 0, gulMaker: 0, gulStalker: 0, gulShaman: 0, gulChief: 0};
                }
                else if (this.temporary == 2) //koivaya
                {
                    this.built = 2;
                    this.resources = {elkMaker: 0, elkStalker: 0, elkShaman: 0, elkChief: 0, koiMaker: 9, koiStalker: 9, koiShaman: 2, koiChief: 2, gulMaker: 0, gulStalker: 0, gulShaman: 0, gulChief: 0};
                }
                else if (this.temporary == 3) //ghoul
                {
                    this.built = 2;
                    this.resources = {elkMaker: 0, elkStalker: 0, elkShaman: 0, elkChief: 0, koiMaker: 0, koiStalker: 0, koiShaman: 0, koiChief: 0, gulMaker: 6, gulStalker: 6, gulShaman: 2, gulChief: 2};
                }
                else
                {
                    this.resources = {elkMaker: 0, elkStalker: 0, elkShaman: 0, elkChief: 0, koiMaker: 0, koiStalker: 0, koiShaman: 0, koiChief: 0, gulMaker: 0, gulStalker: 0, gulShaman: 0, gulChief: 0};
                }
            }

            var elkPoint = 0;
            elkPoint += this.resources.elkMaker;
            elkPoint += this.resources.elkStalker;
            elkPoint += this.resources.elkShaman;
            elkPoint += this.resources.elkChief;
            var koiPoint = 0;
            koiPoint += this.resources.koiMaker;
            koiPoint += this.resources.koiStalker;
            koiPoint += this.resources.koiShaman;
            koiPoint += this.resources.koiChief;
            var gulPoint = 0;
            gulPoint += this.resources.gulMaker;
            gulPoint += this.resources.gulStalker;
            gulPoint += this.resources.gulShaman;
            gulPoint += this.resources.gulChief;

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //DRAWSELF
            if (this.built == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 406, 948, 75, 44, -1/2 * 75 * this.size, -1/2 * 44 * this.size, 75 * this.size, 44 * this.size);
                XXX.restore();
            }
            else if (this.built == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 407, 1002, 74, 33, -1/2 * 74 * this.size, -1/2 * 33 * this.size, 74 * this.size, 33 * this.size);
                XXX.restore();
            }
            else
            {
                if ((gulPoint + koiPoint + elkPoint) <= 0)
                {
                    this.vacio = true;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tribe, 407, 1002, 74, 33, -1/2 * 74 * this.size, -1/2 * 33 * this.size, 74 * this.size, 33 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.vacio = false;

                    if (gulPoint >= koiPoint && gulPoint >= elkPoint)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(tribe, 313, 1142, 76, 46, -1/2 * 76 * this.size, -1/2 * 46 * this.size, 76 * this.size, 46 * this.size);
                        XXX.restore();
                    }
                    else if (elkPoint >= koiPoint && elkPoint >= koiPoint)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(tribe, 314, 1093, 76, 46, -1/2 * 76 * this.size, -1/2 * 46 * this.size, 76 * this.size, 46 * this.size);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(tribe, 407, 1035, 76, 46, -1/2 * 76 * this.size, -1/2 * 46 * this.size, 76 * this.size, 46 * this.size);
                        XXX.restore();
                    }
                }
                this.usable = true;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.health -= 10;
            }
        }
        else if (this.type == "dethMasterHut")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 70;
                this.team = this.information;
                this.culture = false;
                this.tiiic = 0;
                this.lockout = false;

                if (this.temporary == 0) //elk
                {
                    this.resources = {bones: 70, koivayaSkull: 0, koivayaMeat: 0, elkSkull: 25, elkMeat: 55, ghoulSkull: 0, ghoulMeat: 0, healing: 50, poison: 0, koivayaHide: 0, ghoulHide: 0, elkHide: 30, feather: 40}
                }
                else if (this.temporary == 1) //ghoul
                {
                    this.resources = {bones: 70, koivayaSkull: 0, koivayaMeat: 0, elkSkull: 0, elkMeat: 0, ghoulSkull: 25, ghoulMeat: 65, healing: 10, poison: 20, koivayaHide: 0, ghoulHide: 30, elkHide: 0, feather: 32}
                }
                else if (this.temporary == 2) //koivaya
                {
                    this.resources = {bones: 90, koivayaSkull: 35, koivayaMeat: 75, elkSkull: 0, elkMeat: 0, ghoulSkull: 0, ghoulMeat: 0, healing: 10, poison: 0, koivayaHide: 50, ghoulHide: 0, elkHide: 0, feather: 32}
                }
            }

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            this.chiefF = -1;
            this.shamanN = -1;
            this.lockout = false;
            for (var kkk = 0; kkk < ArtificialIntelligenceAccess.length; kkk++)
            {
                if (ArtificialIntelligenceAccess[kkk].type == "Deth" && ArtificialIntelligenceAccess[kkk].team == this.team)
                {
                    if (ArtificialIntelligenceAccess[kkk].role == "shaman")
                    {
                        this.shamanN = kkk;
                    }
                    if (ArtificialIntelligenceAccess[kkk].role == "chief")
                    {
                        this.chiefF = kkk;
                    }
                }
            }
            for (var kkk = 0; kkk < scenicList.length; kkk++)
            {
                if (scenicList[kkk].type == "dethMasterHut" && scenicList[kkk].team == this.team)
                {
                    for (var kkkk = 0; kkkk < scenicList[kkk].refuge.length; kkkk++)
                    {
                        if (scenicList[kkk].refuge[kkkk].role == "shaman")
                        {
                            this.shamanN = kkkk;
                        }
                        if (scenicList[kkk].refuge[kkkk].role == "chief")
                        {
                            this.chiefF = kkkk;
                        }
                    }
                }
            }

            if (this.chiefF == -1 || this.shamanN == -1)
            {
                this.lockout = true;
            }

            if (this.lockout == true) //if an election needs to take place all must attend otherwise proper succession of power will not progress properly
            {
                for (var l = 0; l < this.refuge.length; l++)
                {
                    var leavDeth = new Unit(this.X + Math.cos(this.rotation + (0.2 * Math.random() - 0.1)) * 110, this.Y + Math.sin(this.rotation + (0.2 * Math.random() - 0.1)) * 110, "Deth", true, "deth");
                    leavDeth.role = this.refuge[l].role;
                    leavDeth.gender = this.refuge[l].gender;
                    leavDeth.cultural = this.refuge[l].cultural;
                    leavDeth.geneBank = this.refuge[l].geneBank;
                    leavDeth.age = this.refuge[l].age;
                    leavDeth.healthMAX = this.refuge[l].healthMAX;
                    leavDeth.health = this.refuge[l].health;
                    leavDeth.equipment = this.refuge[l].equipment;
                    leavDeth.culturePreset = this.refuge[l].culturePreset;
                    leavDeth.baseTeam = this.refuge[l].team;
                    leavDeth.team = this.refuge[l].team;
                    leavDeth.bulging = this.refuge[l].bulging;
                    leavDeth.preggers = this.refuge[l].preggers;
                    leavDeth.lineage = this.refuge[l].lineage;
                    leavDeth.bloodline = this.refuge[l].bloodline;
                    leavDeth.newGen = true;
                    leavDeth.hunger = this.refuge[l].hunger;

                    ArtificialIntelligenceAccess.push(leavDeth);
                }
                for (var l = 0; l < this.inhabitants.length; l++)
                {
                    var leavDeth = new Unit(this.X + Math.cos(this.rotation + (0.2 * Math.random() - 0.1)) * 110, this.Y + Math.sin(this.rotation + (0.2 * Math.random() - 0.1)) * 110, "Deth", true, "deth");
                    leavDeth.role = this.inhabitants[l].role;
                    leavDeth.gender = this.inhabitants[l].gender;
                    leavDeth.cultural = this.inhabitants[l].cultural;
                    leavDeth.geneBank = this.inhabitants[l].geneBank;
                    leavDeth.age = this.inhabitants[l].age;
                    leavDeth.healthMAX = this.inhabitants[l].healthMAX;
                    leavDeth.health = this.inhabitants[l].health;
                    leavDeth.equipment = this.inhabitants[l].equipment;
                    leavDeth.culturePreset = this.inhabitants[l].culturePreset;
                    leavDeth.baseTeam = this.inhabitants[l].team;
                    leavDeth.team = this.inhabitants[l].team;
                    leavDeth.bulging = this.inhabitants[l].bulging;
                    leavDeth.preggers = this.inhabitants[l].preggers;
                    leavDeth.lineage = this.inhabitants[l].lineage;
                    leavDeth.bloodline = this.inhabitants[l].bloodline;
                    leavDeth.newGen = true;
                    leavDeth.hunger = this.inhabitants[l].hunger;

                    ArtificialIntelligenceAccess.push(leavDeth);
                }
                this.refuge = [];
                this.inhabitants = [];
            }

            this.tiiic += 1;
            var totalK = 0;
            var awayK = 0;
            var plNotc = 0;

            if (this.tiiic > 30)
            {
                this.tiiic = 0;

                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (ArtificialIntelligenceAccess[j].team != this.team)
                    {
                        if (ArtificialIntelligenceAccess[j].type != "Deth" || ArtificialIntelligenceAccess[j].age >= 2)
                        {
                            totalK += 1;
                            if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) >= 500 && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                            {
                                awayK += 1;
                            }
                        }
                    }
                }
                if (this.dst(X, Y) <= 500)
                {
                    plNotc = 1;
                }

                if (totalK != 0 && totalK == awayK && plNotc == 0)
                {
                    for (var l = 0; l < this.refuge.length; l++)
                    {
                        var leavDeth = new Unit(this.X + Math.cos(this.rotation + (0.2 * Math.random() - 0.1)) * 110, this.Y + Math.sin(this.rotation + (0.2 * Math.random() - 0.1)) * 110, "Deth", true, "deth");
                        leavDeth.role = this.refuge[l].role;
                        leavDeth.gender = this.refuge[l].gender;
                        leavDeth.cultural = this.refuge[l].cultural;
                        leavDeth.geneBank = this.refuge[l].geneBank;
                        leavDeth.age = this.refuge[l].age;
                        leavDeth.healthMAX = this.refuge[l].healthMAX;
                        leavDeth.health = this.refuge[l].health;
                        leavDeth.equipment = this.refuge[l].equipment;
                        leavDeth.culturePreset = this.refuge[l].culturePreset;
                        leavDeth.baseTeam = this.refuge[l].team;
                        leavDeth.team = this.refuge[l].team;
                        leavDeth.bulging = this.refuge[l].bulging;
                        leavDeth.preggers = this.refuge[l].preggers;
                        leavDeth.lineage = this.refuge[l].lineage;
                        leavDeth.bloodline = this.refuge[l].bloodline;
                        leavDeth.newGen = true;
                        leavDeth.hunger = this.refuge[l].hunger;

                        ArtificialIntelligenceAccess.push(leavDeth);
                    }
                    this.refuge = [];
                }

                if (this.culture == false || this.culture == "I")
                {
                    for (var l = 0; l < this.inhabitants.length; l++)
                    {
                        var leavDeth = new Unit(this.X + Math.cos(this.rotation + (0.2 * Math.random() - 0.1)) * 110, this.Y + Math.sin(this.rotation + (0.2 * Math.random() - 0.1)) * 110, "Deth", true, "deth");
                        leavDeth.role = this.inhabitants[l].role;
                        leavDeth.gender = this.inhabitants[l].gender;
                        leavDeth.cultural = this.inhabitants[l].cultural;
                        leavDeth.geneBank = this.inhabitants[l].geneBank;
                        leavDeth.age = this.inhabitants[l].age;
                        leavDeth.healthMAX = this.inhabitants[l].healthMAX;
                        leavDeth.health = this.inhabitants[l].health;
                        leavDeth.equipment = this.inhabitants[l].equipment;
                        leavDeth.culturePreset = this.inhabitants[l].culturePreset;
                        leavDeth.baseTeam = this.inhabitants[l].team;
                        leavDeth.team = this.inhabitants[l].team;
                        leavDeth.bulging = this.inhabitants[l].bulging;
                        leavDeth.preggers = this.inhabitants[l].preggers;
                        leavDeth.lineage = this.inhabitants[l].lineage;
                        leavDeth.bloodline = this.inhabitants[l].bloodline;
                        leavDeth.newGen = true;
                        leavDeth.hunger = this.inhabitants[l].hunger;

                        ArtificialIntelligenceAccess.push(leavDeth);
                    }
                    this.inhabitants = [];
                }
                else if (this.culture == "II" || this.culture == "III")
                {
                    for (var l = this.inhabitants.length - 1; l >= 0 ; l--)
                    {
                        if (this.inhabitants[l].culturePreset != this.culture)
                        {
                            var leavDeth = new Unit(this.X + Math.cos(this.rotation + (0.2 * Math.random() - 0.1)) * 110, this.Y + Math.sin(this.rotation + (0.2 * Math.random() - 0.1)) * 110, "Deth", true, "deth");
                            leavDeth.role = this.inhabitants[l].role;
                            leavDeth.gender = this.inhabitants[l].gender;
                            leavDeth.cultural = this.inhabitants[l].cultural;
                            leavDeth.geneBank = this.inhabitants[l].geneBank;
                            leavDeth.age = this.inhabitants[l].age;
                            leavDeth.healthMAX = this.inhabitants[l].healthMAX;
                            leavDeth.health = this.inhabitants[l].health;
                            leavDeth.equipment = this.inhabitants[l].equipment;
                            leavDeth.culturePreset = this.inhabitants[l].culturePreset;
                            leavDeth.baseTeam = this.inhabitants[l].team;
                            leavDeth.team = this.inhabitants[l].team;
                            leavDeth.bulging = this.inhabitants[l].bulging;
                            leavDeth.preggers = this.inhabitants[l].preggers;
                            leavDeth.lineage = this.inhabitants[l].lineage;
                            leavDeth.bloodline = this.inhabitants[l].bloodline;
                            leavDeth.newGen = true;
                            leavDeth.hunger = this.inhabitants[l].hunger;

                            ArtificialIntelligenceAccess.push(leavDeth);
                            this.inhabitants.splice(l, 1);
                        }
                    }
                }
            }

            if (this.temporary == 0) //elkstyle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 1027, 0, 182, 155, -1/2 * 182 * this.size, -1/2 * 155 * this.size, 182 * this.size, 155 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 1) //ghoulstyle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 1027, 182, 181, 179, -1/2 * 181 * this.size, -1/2 * 179 * this.size, 181 * this.size, 179 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 2) //koivayastyle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 1023, 368, 182, 170, -1/2 * 182 * this.size, -1/2 * 170 * this.size, 182 * this.size, 170 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 67;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.health -= 10;
            }
        }
        else if (this.type == "dethTotem")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 100;
            this.size = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 37;
                this.team = this.information;
            }

            if (this.health <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            if (this.temporary == 0) //elkstyle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 226, 1107, 65, 67, -1/2 * 65 * this.size, -1/2 * 67 * this.size, 65 * this.size, 67 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 1) //ghoulstyle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 239, 1008, 47, 51, -1/2 * 47 * this.size, -1/2 * 51 * this.size, 47 * this.size, 51 * this.size);
                XXX.restore();
            }
            else if (this.temporary == 2) //koivayastyle
            {
                //DRAWSELF
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 240, 1051, 47, 51, -1/2 * 47 * this.size, -1/2 * 51 * this.size, 47 * this.size, 51 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                this.health -= 10;
            }
        }
        else if (this.type == "araneaDen")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 22;
                this.tic = 0;
                this.tac = 0;
                this.toc = 0;
                this.araneado = false;
                this.makeAranea = true;

                if (this.information == true)
                {
                    this.spiderHome = true;
                }
                else
                {
                    this.spiderHome = false;
                }

                if (this.temporary == true)
                {
                    this.size = 1.2
                }
                else
                {
                    this.size = 1;
                }
            }

            this.tic += 1;

            if (this.tic >= 32 && this.araneado != "broken" && this.spiderHome == true)
            {
                this.tic = 0;

                if (this.araneado == false)
                {
                    for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                    {
                        if (ArtificialIntelligenceAccess[j].type != "Aranea")
                        {
                            if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 300 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].insect && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                            {
                                this.araneado = true;
                            }
                        }
                    }
                }
            }

            if (this.playerer <= 300 && this.araneado != "broken" && this.spiderHome == true)
            {
                this.araneado = true;
            }

            if (this.araneado == true && this.spiderHome == true)
            {
                this.tac += 2;
            }

            if (this.araneado == "broken")
            {
                this.toc += 1;
            }

            if (this.araneado == "broken")
            {
                if (this.toc < 6)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 279, 928, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else if (this.toc < (12))
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 0, 1015, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else if (this.toc < (18))
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 84, 1018, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else if (this.toc < (24))
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 172, 1019, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 262, 1022, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
            }
            else
            {
                if (this.tac < 110)
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 279, 928, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else if (this.tac < (110 + 8))
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 366, 1023, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else if (this.tac < (110 + 16))
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 484, 1026, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else if (this.tac < (110 + 24))
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 608, 1027, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                }
                else
                {
                    //DRAWSELF
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jungho, 279, 928, 95, 109, -(1/2 * 95 * this.size), -(1/2 * 109 * this.size), 95 * this.size, 109 * this.size);
                    XXX.restore();
                    if (this.makeAranea == true)
                    {
                        this.makeAranea = false;
                        this.spiderHome = false;
                        var araneato = new Unit(this.X + 55 * Math.cos(this.rotation + Math.PI), this.Y + 55 * Math.sin(this.rotation + Math.PI), "Aranea", this.temporary, "Emmergent Aranea");
                        araneato.newRotation = this.rotation;
                        araneato.rotation = this.rotation;
                        ArtificialIntelligenceAccess.push(araneato);
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 66 * this.size;

            if (player.weaponEquipped == "spade" && player.cutcut == true && this.playerer < 500 || player.weaponEquipped == "pickaxe" && player.cutcut == true && this.playerer < 500)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.distance)
                {
                    if (player.weaponEquipped == "spade")
                    {
                        this.health -= 8;
                    }
                    else
                    {
                        this.health -= 4;
                    }
                }

                if (this.health <= 0)
                {
                    this.araneado = "broken";
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "araneaHair")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            this.zIndex = 6;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 200;

                if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
                {
                    this.size = this.owned;
                }
                else
                {
                    this.size = 1;
                }
                this.alfa = 1;
                this.alfa2 = 1;
                this.spin = 0;
            }

            this.rotation += 0.18;
            this.spin -= 0.18;

            this.tic -= 3;
            if (this.tic <= 0)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }
            else
            {
                if (Math.random() > 0.5)
                {
                    this.alfa = 0.5;
                }
                else
                {
                    this.alfa = 0.4;
                }

                if (Math.random() > 0.5)
                {
                    this.alfa2 = 0.5;
                }
                else
                {
                    this.alfa2 = 0.4;
                }
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.spin);
            XXX.globalAlpha = this.alfa2;
            XXX.drawImage(jungho, 0, 675, 89, 94, -1/2 * 89 * (this.size + 0.6), -1/2 * 94 * (this.size + 0.6), 89 * (this.size + 0.6), 94 * (this.size + 0.6));
            XXX.restore();

            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.globalAlpha = this.alfa;
            XXX.drawImage(jungho, 0, 675, 89, 94, -1/2 * 89 * (this.size + 0.6), -1/2 * 94 * (this.size + 0.6), 89 * (this.size + 0.6), 94 * (this.size + 0.6));
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 90 * (this.size + 0.6);

            if (this.dst(X, Y) <= this.radius)
            {
                if (player.resistDisease == false)
                {
                    player.energilTime = 40;
                    player.fatigueII = true;

                    player.stunnedII = true;
                    player.stunnedTime = 40;

                    player.halfAcid = true;
                    player.acidTime = new Date().getTime() + 40000;
                }
            }


            for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
            {
                if (ArtificialIntelligenceAccess[j].type != "Aranea")
                {
                    if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= this.radius + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && !ArtificialIntelligenceAccess[j].flying && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                    {
                        if (ArtificialIntelligenceAccess[j].resistDisease != true)
                        {
                            ArtificialIntelligenceAccess[j].stunII = true;
                            ArtificialIntelligenceAccess[j].stunTimer = 40;
                            ArtificialIntelligenceAccess[j].stunTime = new Date().getTime();

                            ArtificialIntelligenceAccess[j].halfAcid = true;
                            ArtificialIntelligenceAccess[j].acidTime = new Date().getTime() + 40000;
                            ArtificialIntelligenceAccess[j].killNotByPlayer = true;
                        }
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "hayPile")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            if (typeof(this.owned) != "null" && typeof(this.owned) != "boolean")
            {
                this.size = this.owned;
            }
            else
            {
                this.size = 2;
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(atal, 8, 2601, 97, 110, -(1/2 * 97 * this.size * 0.75), -(1/2 * 110 * this.size * 0.75), 97 * this.size * 0.75, 110 * this.size * 0.75);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "hayBale")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;
            this.size = 1.1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(atal, 13, 2530, 84, 45, -(1/2 * 84 * this.size * 0.7), -(1/2 * 45 * this.size * 0.7), 84 * this.size * 0.7, 45 * this.size * 0.7);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "brolleFeast")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            var distToPlayer = 1000;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.phase = "busy";
                this.tiic = 0;
                this.selTyp = Math.round(Math.random()); //selection type
            }
            //DRAWSELF
            if (this.phase == "busy")
            {
                this.flashAnimate(150 + Math.random() * 250, this.rotation, 1, [{image: lodo, imgX: 330, imgY: 231, portionW: 22, portionH: 21, adjX: - (1/2 * 22 * 2), adjY: - (1/2 * 21 * 2), width: 22 * 2, height: 21 * 2}, {image: lodo, imgX: 357, imgY: 231, portionW: 22, portionH: 21, adjX: - (1/2 * 22 * 2), adjY: - (1/2 * 21 * 2), width: 22 * 2, height: 21 * 2}]);
                distToPlayer = Math.sqrt((this.X - X) * (this.X - X) + (this.Y - Y) * (this.Y - Y));
            }
            else if (this.phase = "done")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 305, 232, 22, 21, -(1/2 * 22 * 2), -(1/2 * 21 * 2), 22 * 2, 21 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            if (distToPlayer <= 250 && this.phase == "busy")
            {
                this.tiic += 1;
                if (this.tiic >= 240)
                {
                    this.tiic = 0;
                    this.phase = "done";

                    if (this.selTyp == 1)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrolleWorms", true, "Hungry Brolles"));
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrolleWorms", true, "Hungry Brolles"));
                    }
                    else
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrolleWorms", true, "Hungry Brolles"));
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "grushweedPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(oldverse, 3022, 233, 40, 42, -1/2 * 20 * this.owned, -1/2 * 42 * this.owned, 40 * this.owned, 42 * this.owned);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16 * this.owned;
        }
        else if (this.type == "ogoTree")
        {
            //TRAITS
            this.tree = true;
            this.variety = "plant";
            this.nectar(20);
            this.solid = true;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (this.playerer < 39)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 122, 474, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 475, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 475, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                }
            }
            else if (this.phase == "picked")
            {
                if (this.playerer < 39)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 178, 475, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 475, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 475, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "ogoFruit")
                    {
                        Inventory[i][1] += 1 + Math.floor(7 * Math.random());
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("ogoFruit", false, false), 1 + Math.floor(7 * Math.random())]);
                }
            }
        }
        else if (this.type == "appleTree")
        {
            //TRAITS
            this.tree = true;
            this.variety = "plant";
            this.nectar(8);
            this.solid = true;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (this.playerer < 39)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 122, 529, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 532, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 532, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                }
            }
            else if (this.phase == "picked")
            {
                if (this.playerer < 39)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 179, 531, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 532, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(hydra, 236, 532, 56, 57, -(1/2 * 56 * 2), -(1/2 * 57 * 2), 56 * 2, 57 * 2);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "apple")
                    {
                        Inventory[i][1] += 1 + Math.floor(7 * Math.random());
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("apple", false, false), 1 + Math.floor(7 * Math.random())]);
                }
            }
        }
        else if (this.type == "chonaTree")
        {
            //TRAITS
            this.tree = true;
            this.variety = "plant";
            this.nectar(5);
            this.solid = true;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (this.playerer < 80)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 744, 3025, 203, 189, -(1/2 * 203), -(1/2 * 189), 203, 189);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 743, 2674, 203, 189, -(1/2 * 203), -(1/2 * 189), 203, 189);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 743, 2674, 203, 189, -(1/2 * 203), -(1/2 * 189), 203, 189);
                    XXX.restore();
                }
            }
            else if (this.phase == "picked")
            {
                if (this.playerer < 80)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 747, 2854, 203, 189, -(1/2 * 203), -(1/2 * 189), 203, 189);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 743, 2674, 203, 189, -(1/2 * 203), -(1/2 * 189), 203, 189);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 743, 2674, 203, 189, -(1/2 * 203), -(1/2 * 189), 203, 189);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "chonaFruit")
                    {
                        Inventory[i][1] += 1 + Math.floor(10 * Math.random());
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("chonaFruit", false, false), 1 + Math.floor(12 * Math.random())]);
                }
            }
        }
        else if (this.type == "polyapaTree")
        {
            //TRAITS
            this.tree = true;
            this.variety = "plant";
            this.nectar(3);
            this.solid = true;
            this.interactionRange = 73;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (this.playerer < 73)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 960, 2862, 159, 172, -(1/2 * 159), -(1/2 * 172), 159, 172);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 955, 2682, 159, 172, -(1/2 * 159), -(1/2 * 172), 159, 172);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 955, 2682, 159, 172, -(1/2 * 159), -(1/2 * 172), 159, 172);
                    XXX.restore();
                }
            }
            else if (this.phase == "picked")
            {
                if (this.playerer < 73)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 956, 3021, 159, 172, -(1/2 * 159), -(1/2 * 172), 159, 172);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 955, 2682, 159, 172, -(1/2 * 159), -(1/2 * 172), 159, 172);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 955, 2682, 159, 172, -(1/2 * 159), -(1/2 * 172), 159, 172);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "polyapaFruit")
                    {
                        Inventory[i][1] += 1 + Math.floor(9 * Math.random());
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("polyapaFruit", false, false), 1 + Math.floor(8 * Math.random())]);
                }
            }
        }
        else if (this.type == "bahabPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(9);
            this.solid = false;
            this.interactionRange = 100;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.tic = 0;
                this.boof = false;
                this.bahabCooldown = 105;
            }
            this.bahabCooldown += 0.5;

            if (this.playerer < 60 && this.phase == 0 && this.phase != "pickt" && this.phase != "picked")
            {
                if (this.tic > 310 || this.tic == 0)
                {
                    if (this.bahabCooldown > 100)
                    {
                        this.boof = true;
                    }
                }
            }

            if (this.phase != "pickt" && this.phase != "picked")
            {
                if (this.boof == true)
                {
                    this.tic += 5;
                }

                if (this.tic < 25)
                {
                    this.phase = 0;
                }
                else if (this.tic < 50)
                {
                    this.phase = 1;
                }
                else if (this.tic < 85)
                {
                    this.phase = 2;
                }
                else if (this.tic < 105)
                {
                    this.phase = 3;
                    this.booff = true;
                }
                else
                {
                    this.phase = 0;
                    if (this.booff == true)
                    {
                        this.booff = false;
                        scenicList.push(new Scenery("bahabGas", this.X, this.Y, 2 * Math.PI * Math.random(), true));
                        this.bahabCooldown = 0;
                    }

                    if (this.tic > 310)
                    {
                        this.boof = false;
                        this.tic = 0;
                    }
                }
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 462, 673, 50, 55, -(1/2 * 50), -(1/2 * 55), 50, 55);
                XXX.restore();
            }
            if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 516, 675, 50, 55, -(1/2 * 50), -(1/2 * 55), 50, 55);
                XXX.restore();
            }
            if (this.phase == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 572, 675, 50, 55, -(1/2 * 50), -(1/2 * 55), 50, 55);
                XXX.restore();
            }
            if (this.phase == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 624, 675, 50, 55, -(1/2 * 50), -(1/2 * 55), 50, 55);
                XXX.restore();
            }
            else if (this.phase == "pickt")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 392, 673, 50, 55, -(1/2 * 50), -(1/2 * 55), 50, 55);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 328, 673, 50, 55, -(1/2 * 50), -(1/2 * 55), 50, 55);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase != "pickt" && this.phase != "picked")
            {
                this.activate = false;
                this.phase = "pickt";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "bahabPod")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("bahabPod", false, false), 1]);
                }
            }
            else if (this.activate == true && this.phase == "pickt")
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "bahabLeaf")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("bahabLeaf", false, false),  1 + Math.floor(Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "decipulaBasePlant")
        {
            //TRAITS
            this.variety = "plant";
            //this.nectar(20);
            this.solid = true;
            this.interactionRange = 100;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                if (this.temporary == "massive")
                {
                    this.size = 1.5;
                }
                else if (this.temporary == true)
                {
                    this.size = 1.2;
                }
                else
                {
                    this.size = 1;
                }
                //lower left
                var rotrot = (-3.5/24 * 2*Math.PI);
                var decipulaHead = new Unit(this.X + Math.cos(this.rotation + rotrot) * (14 * this.size), this.Y + Math.sin(this.rotation + rotrot) * (14 * this.size), "Decipula", this.temporary, "decipulaPlant");
                decipulaHead.rotation = rotrot + Math.PI;
                decipulaHead.newRotation = rotrot + Math.PI;
                ArtificialIntelligenceAccess.push(decipulaHead);

                //right
                var rotrot = (12/24 * 2*Math.PI);
                var decipulaHead = new Unit(this.X + Math.cos(this.rotation + rotrot) * (14 * this.size), this.Y + Math.sin(this.rotation + rotrot) * (14 * this.size), "Decipula", this.temporary, "decipulaPlant");
                decipulaHead.rotation = rotrot + Math.PI;
                decipulaHead.newRotation = rotrot + Math.PI;
                ArtificialIntelligenceAccess.push(decipulaHead);

                //upper left
                var rotrot = (-20.5/24 * 2*Math.PI);
                var decipulaHead = new Unit(this.X + Math.cos(this.rotation + rotrot) * (14 * this.size), this.Y + Math.sin(this.rotation + rotrot) * (14 * this.size), "Decipula", this.temporary, "decipulaPlant");
                decipulaHead.rotation = rotrot + Math.PI;
                decipulaHead.newRotation = rotrot + Math.PI;
                ArtificialIntelligenceAccess.push(decipulaHead);
            }

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(jungho, 691, 578, 60, 59, -(1/2 * 60 * this.size), -(1/2 * 59 * this.size), 60 * this.size, 59 * this.size);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "neprilnePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(4);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2029, 501, 46, 42, -(1/2 * 46), -(1/2 * 42), 46, 42);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2088, 501, 46, 42, -(1/2 * 46), -(1/2 * 42), 46, 42);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "neprilneBerries")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("neprilneBerries", false, false), 1]);
                }
            }
        }
        else if (this.type == "roylaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(4);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 22, 2, 48, 45, -(1/2 * 48 * 1.7), -(1/2 * 45 * 1.7), 48 * 1.7, 45 * 1.7);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 79, 1, 48, 45, -(1/2 * 48 * 1.7), -(1/2 * 45 * 1.7), 48 * 1.7, 45 * 1.7);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "roylaFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("roylaFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "orgishMardylPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 60;
            this.mardylDropNum = 1;

            //DRAWSELF
            if (this.temporary == 0)
            {
                this.mardylDropNum = 2;
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 199, 25, 100, 94, -(1/2 * 100 * 1.1), -(1/2 * 94 * 1.1), 100 * 1.1, 94 * 1.1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //3
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 162, 144, 18, 19, -(1/2 * 18 * 1.1), -(1/2 * 19 * 1.1), 18 * 1.1, 19 * 1.1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 1)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 88, 5, 100, 94, -(1/2 * 100 * 1.1), -(1/2 * 94 * 1.1), 100 * 1.1, 94 * 1.1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //2
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 141, 144, 18, 19, -(1/2 * 18 * 1.1), -(1/2 * 19 * 1.1), 18 * 1.1, 19 * 1.1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2)
            {
                this.mardylDropNum = 2;
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 284, 23, 100, 94, -(1/2 * 100 * 1.1), -(1/2 * 94 * 1.1), 100 * 1.1, 94 * 1.1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //4
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 187, 144, 18, 19, -(1/2 * 18 * 1.1), -(1/2 * 19 * 1.1), 18 * 1.1, 19 * 1.1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 3)
            {
                this.mardylDropNum = 3;
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 381, 20, 100, 94, -(1/2 * 100 * 1.1), -(1/2 * 94 * 1.1), 100 * 1.1, 94 * 1.1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //5
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 208, 145, 18, 19, -(1/2 * 18 * 1.1), -(1/2 * 19 * 1.1), 18 * 1.1, 19 * 1.1);
                    XXX.restore();
                }
            }
            else
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 11, 13, 100, 94, -(1/2 * 100 * 1.1), -(1/2 * 94 * 1.1), 100 * 1.1, 94 * 1.1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //1
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 118, 144, 18, 19, -(1/2 * 18 * 1.1), -(1/2 * 19 * 1.1), 18 * 1.1, 19 * 1.1);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "orgishMardyl")
                    {
                        Inventory[i][1] += this.mardylDropNum;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("orgishMardyl", false, false), this.mardylDropNum]);
                }
            }
        }
        else if (this.type == "vardanianMardylPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 60;
            this.mardylDropNum = 1;

            //DRAWSELF
            if (this.temporary == 0)
            {
                this.mardylDropNum = 2;
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1000, 418, 100, 94, -(1/2 * 100 * 1), -(1/2 * 94 * 1), 100 * 1, 94 * 1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //3
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 964, 536, 18, 19, -(1/2 * 18 * 1), -(1/2 * 19 * 1), 18 * 1, 19 * 1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 1)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 890, 398, 100, 94, -(1/2 * 100 * 1), -(1/2 * 94 * 1), 100 * 1, 94 * 1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //2
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 942, 537, 18, 19, -(1/2 * 18 * 1), -(1/2 * 19 * 1), 18 * 1, 19 * 1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2)
            {
                this.mardylDropNum = 2;
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1086, 414, 100, 94, -(1/2 * 100 * 1), -(1/2 * 94 * 1), 100 * 1, 94 * 1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //4
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 989, 537, 18, 19, -(1/2 * 18 * 1), -(1/2 * 19 * 1), 18 * 1, 19 * 1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 3)
            {
                this.mardylDropNum = 3;
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1183, 414, 100, 94, -(1/2 * 100 * 1), -(1/2 * 94 * 1), 100 * 1, 94 * 1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //5
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1011, 538, 18, 19, -(1/2 * 18 * 1), -(1/2 * 19 * 1), 18 * 1, 19 * 1);
                    XXX.restore();
                }
            }
            else
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 813, 407, 100, 94, -(1/2 * 100 * 1), -(1/2 * 94 * 1), 100 * 1, 94 * 1);
                    XXX.restore();
                }
                else if (this.phase == "picked") //1
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 920, 538, 18, 19, -(1/2 * 18 * 1), -(1/2 * 19 * 1), 18 * 1, 19 * 1);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "vardanianMardyl")
                    {
                        Inventory[i][1] += this.mardylDropNum;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("vardanianMardyl", false, false), this.mardylDropNum]);
                }
            }
        }
        else if (this.type == "heskPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 65;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.gasBurst = false;
                this.gasCooldown = 200;
            }

            this.gasCooldown += 0.5;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (this.gasBurst == true)
                {
                    this.tic += 1;
                }
                if (this.tic < 28)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 2, 60, 47, 55, -(1/2 * 47 * 1.45), -(1/2 * 55 * 1.45), 47 * 1.45, 55 * 1.45);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 2, 60, 47, 55, -(1/2 * 47 * 1.45), -(1/2 * 55 * 1.45), 47 * 1.45, 55 * 1.45);
                    XXX.restore();
                    this.tic = 1;
                    this.phase = 1;
                }
            }
            else if (this.phase == 1)
            {
                if (this.gasBurst == true)
                {
                    this.tic += 1;
                }
                else
                {
                    this.tic -= 1;
                }

                if (this.tic < 1)
                {
                    this.phase = 0;
                    this.tic = 0;
                    this.gasCooldown = 0;
                }

                if (this.tic < 3)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 40, 61, 47, 55, -(1/2 * 47 * 1.45), -(1/2 * 55 * 1.45), 47 * 1.45, 55 * 1.45);
                    XXX.restore();
                }
                else if (this.tic < 6)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 79, 62, 38, 55, -(1/2 * 42 * 1.45), -(1/2 * 55 * 1.45), 42 * 1.45, 55 * 1.45);
                    XXX.restore();
                }
                else if (this.tic < 9)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 114, 62, 38, 55, -(1/2 * 42 * 1.45), -(1/2 * 55 * 1.45), 42 * 1.45, 55 * 1.45);
                    XXX.restore();
                }
                else if (this.tic < 12)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 149, 64, 42, 55, -(1/2 * 42 * 1.45), -(1/2 * 55 * 1.45), 42 * 1.45, 55 * 1.45);
                    XXX.restore();
                }
                else if (this.tic < 15)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 190, 63, 47, 55, -(1/2 * 47 * 1.45), -(1/2 * 55 * 1.45), 47 * 1.45, 55 * 1.45);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(ruin, 190, 63, 47, 55, -(1/2 * 47 * 1.45), -(1/2 * 55 * 1.45), 47 * 1.45, 55 * 1.45);
                    XXX.restore();
                    if (this.gasBurst == true)
                    {
                        this.gasBurst = false;
                        this.tic = 22;
                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation + 0.9/4 * Math.PI, false));
                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation, false));
                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation - 0.9/4 * Math.PI, false));

                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation + 1.9/4 * Math.PI + Math.PI, false));
                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation + 1/4 * Math.PI + Math.PI, false));
                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation + 0.1/4 * Math.PI + Math.PI, false));

                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation - 1.9/4 * Math.PI + Math.PI, false));
                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation - 1/4 * Math.PI + Math.PI, false));
                        scenicList.push(new Scenery("heskGas", this.X + Math.cos(this.rotation + 3/4 * Math.PI) * 18, this.Y + Math.sin(this.rotation + 3/4 * Math.PI) * 18, this.rotation - 0.1/4 * Math.PI + Math.PI, false));
                    }
                }

            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 326, 20, 15, 17, -(1/2 * 15 * 1.45), -(1/2 * 17 * 1.45), 15 * 1.45, 17 * 1.45);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            if (this.phase == 0 && this.gasBurst == false && this.gasCooldown > 200)
            {
                if (this.dst(X, Y) <= 130)
                {
                    this.gasBurst = true;
                }

                for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                {
                    if (ArtificialIntelligenceAccess[j].type == "Person" || ArtificialIntelligenceAccess[j].type == "Soldier" || ArtificialIntelligenceAccess[j].healthMAX > 3 && ArtificialIntelligenceAccess[j].type != "ShriekingBloodworm")
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 130 + (3/4 * ArtificialIntelligenceAccess[j].sizeRadius) && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            this.gasBurst = true;
                        }
                    }
                }
            }

            //INTERACTION
            if (this.activate == true && this.phase == 0 || this.activate == true && this.phase == 1)
            {
                this.activate = false;
                if (have("shears", 1))
                {
                    if (this.phase == 0)
                    {
                        this.phase = "picked";
                        var hits = 0;
                        for (var i = 0; i < Inventory.length; i ++)
                        {
                            if (Inventory[i][0].type == "heskFungalPod")
                            {
                                Inventory[i][1] += 1;
                                break;
                            }
                            else
                            {
                                hits += 1;
                            }
                        }
                        if (hits == Inventory.length)
                        {
                            Inventory.push([new Item("heskFungalPod", false, false), 1]);
                        }
                    }
                    else
                    {
                        this.phase = "picked";
                        var hits = 0;
                        for (var i = 0; i < Inventory.length; i ++)
                        {
                            if (Inventory[i][0].type == "heskFungus")
                            {
                                Inventory[i][1] += 3;
                                break;
                            }
                            else
                            {
                                hits += 1;
                            }
                        }
                        if (hits == Inventory.length)
                        {
                            Inventory.push([new Item("heskFungus", false, false), 3]);
                        }
                    }
                }
            }
        }
        else if (this.type == "cauwPlant")
        {
            //TRAITS
            if (currentSeason == "Bounty")
            {
                this.variety = "plant";
                this.nectar(1);
                this.solid = false;
                this.interactionRange = 90;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1588, 977, 53, 49, -(1/2 * 53 * 1.3), -(1/2 * 49 * 1.3), 53 * 1.3, 49 * 1.3);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1593, 939, 42, 38, -(1/2 * 42 * 1.3), -(1/2 * 38 * 1.3), 42 * 1.3, 38 * 1.3);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    if (player.glovesEquipped == "none")
                    {
                        player.poisonII = true;
                    }
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "prematureCauwLeaf")
                        {
                            Inventory[i][1] += (1 + Math.floor(Math.random() * 7));
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("prematureCauwLeaf", false, false), (1 + Math.floor(Math.random() * 7))]);
                    }
                }
            }
            else
            {
                this.variety = "plant";
                this.nectar(2);
                this.solid = false;
                this.interactionRange = 90;

                //DRAWSELF
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1660, 934, 53, 49, -(1/2 * 53 * 1.3), -(1/2 * 49 * 1.3), 53 * 1.3, 49 * 1.3);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1593, 939, 42, 38, -(1/2 * 42 * 1.3), -(1/2 * 38 * 1.3), 42 * 1.3, 38 * 1.3);
                    XXX.restore();
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 22;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "cauwLeaf")
                        {
                            Inventory[i][1] += (1 + Math.floor(Math.random() * 7));
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("cauwLeaf", false, false), (1 + Math.floor(Math.random() * 7))]);
                    }
                }
            }
        }
        else if (this.type == "eisyncrynePlant")
        {
            //TRAITS
            this.variety = "plant";

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.felled = false;
                this.health = 3.5;
                this.solid = true;
                this.interactionRange = 85;
            }

            //DRAWSELF
            if (this.phase == 0 && this.felled != true && this.felled != "looted")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 1645, 1029, 44, 40, -(1/2 * 44 * 1.4), -(1/2 * 40 * 1.4), 44 * 1.4, 40 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked" || this.felled == true || this.felled == "looted")
            {
                if (this.felled == true)
                {
                    this.solid = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1593, 1047, 48, 49, -(1/2 * 48 * 1.4), -(1/2 * 49 * 1.4) - 9, 48 * 1.4, 49 * 1.4);
                    XXX.restore();
                }
                else if (this.felled == "looted")
                {
                    this.interactionRange = 1;
                    this.solid = false;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1650, 1074, 16, 14, -(1/2 * 16 * 1.45), -(1/2 * 14 * 1.45), 16 * 1.45, 14 * 1.45);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 1691, 1029, 44, 40, -(1/2 * 44 * 1.4), -(1/2 * 40 * 1.4), 44 * 1.4, 40 * 1.4);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            if (player.cutcut == true && this.playerer <= 320 && this.felled != true && this.felled != "looted")
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                {
                    this.health -= player.weapon.damage;
                }
                if (this.health <= 0)
                {
                    if (this.phase == 0)
                    {
                        worldItems.push([new Item("eisyncryneFruit", this.X + Math.cos(this.rotation + 1/2 * Math.PI) * 27, this.Y + Math.sin(this.rotation + 1/2 * Math.PI) * 27), 1]);
                        this.felled = true;
                    }
                    else if (this.phase == "picked")
                    {
                        this.felled = true;
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.felled == true && this.felled != "looted")
                {
                    give("eisyncrynePlant", 1);
                    this.felled = "looted"
                    this.phase = "picked";
                }
                else if (this.phase == 0 && this.felled != "looted")
                {
                    this.phase = "picked";
                    player.health -= 3.5;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "eisyncryneFruit")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("eisyncryneFruit", false, false), 1]);
                    }
                }
            }
        }
        else if (this.type == "pashaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ion, 1111, 376, 74, 50, -(1/2 * 74), -(1/2 * 50), 74, 50);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ion, 1109, 351, 26, 21, -(1/2 * 26), -(1/2 * 21), 26, 21);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "pashaArm")
                    {
                        Inventory[i][1] += (Math.floor(Math.random() * 3) + 1);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("pashaArm", false, false), Math.floor(Math.random() * 3) + 1]);
                }
            }
        }
        else if (this.type == "elchePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 100;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
            }

            //it grows rapidly
            if (this.phase == "picked")
            {
                this.tic += 1;
                if (this.tic > 500)
                {
                    this.tic = 0;
                    this.phase = 0;
                }
            }
            else if (this.phase == 1)
            {
                this.tic += 1;
                if (this.tic > 100)
                {
                    this.tic = 0;
                    this.phase = 0;
                }
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                this.radius = 43;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 1980, 13, 54, 53, -(1/2 * 54 * 1.85), -(1/2 * 53 * 1.85), 54 * 1.85, 53 * 1.85);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                this.radius = 25;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 1979, 64, 54, 53, -(1/2 * 54 * 1.85), -(1/2 * 53 * 1.85), 54 * 1.85, 53 * 1.85);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                this.radius = 9;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 1986, 116, 40, 39, -(1/2 * 40 * 1.85), -(1/2 * 39 * 1.85), 40 * 1.85, 39 * 1.85);
                XXX.restore();
            }

            if (this.phase != "picked")
            {
                if (player.areBootsEquipped != true || player.armourTotal < 1.2 )
                {
                    if (((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y)) <= this.radius * this.radius)
                    {
                        player.health -= 0.0022;
                    }
                }
            }
            //INTERACTION
            if (this.activate == true && this.phase == 0 || this.activate == true && this.phase == 1)
            {
                this.activate = false;

                if (player.areGlovesEquipped != true)
                {
                    player.health -= 2.2;
                }

                if (this.phase == 0)
                {
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "elcheLeaves")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("elcheLeaves", false, false), 1]);
                    }
                }
                else
                {
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "elcheLeaves")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("elcheLeaves", false, false), 1]);
                    }
                }
            }
        }
        else if (this.type == "trubkaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(9);
            this.solid = false;
            this.interactionRange = 100;
            this.radius = 13;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 712, 86, 74, 68, -(1/2 * 74 * 1.55), -(1/2 * 68 * 1.55), 74 * 1.55, 68 * 1.55);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 712, 137, 74, 68, -(1/2 * 74 * 1.55), -(1/2 * 68 * 1.55), 74 * 1.55, 68 * 1.55);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 44, 270, 19, 17, -(1/2 * 19 * 1.55), -(1/2 * 17 * 1.55), 19 * 1.55, 17 * 1.55);
                XXX.restore();
            }

            //INTERACTION
            if (this.activate == true && this.phase == 0 || this.activate == true && this.phase == 1)
            {
                this.activate = false;

                if (player.areGlovesEquipped != true && this.phase == 0)
                {
                    player.poisonI = true;
                }

                if (this.phase == 0)
                {
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "trubkaStalk")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("trubkaStalk", false, false), 1]);
                    }
                }
                else
                {
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "trubkaLeaf")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("trubkaLeaf", false, false), 1]);
                    }
                }
            }
        }
        else if (this.type == "tchafulaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(15);
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 340, 4, 70, 56, -(1/2 * 70 * 1.4), -(1/2 * 56 * 1.4), 70 * 1.4, 56 * 1.4);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 417, 6, 70, 56, -(1/2 * 70 * 1.4), -(1/2 * 56 * 1.4), 70 * 1.4, 56 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 484, 6, 70, 56, -(1/2 * 70 * 1.4), -(1/2 * 56 * 1.4), 70 * 1.4, 56 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24;

            //INTERACTION
            if (this.activate == true && this.phase == 0 || this.activate == true && this.phase == 1)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-19);
                    }
                }

                if (this.phase == 0)
                {
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "tchafula")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("tchafula", false, false), Math.floor(1 + Math.random() * 6)]);
                    }
                }
                else
                {
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "tchafulaTuft")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("tchafulaTuft", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
        }
        else if (this.type == "tchaltaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(6);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 147, 52, 44, 46, -(1/2 * 44 * 1.7), -(1/2 * 46 * 1.7), 44 * 1.7, 46 * 1.7);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 96, 53, 44, 46, -(1/2 * 44 * 1.7), -(1/2 * 46 * 1.7), 44 * 1.7, 46 * 1.7);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 40, 53, 44, 46, -(1/2 * 44 * 1.7), -(1/2 * 46 * 1.7), 44 * 1.7, 46 * 1.7);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24;

            //INTERACTION
            if (this.activate == true && this.phase == 0 || this.activate == true && this.phase == 1)
            {
                this.activate = false;

                if (this.phase == 0)
                {
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "tchaltaFlower")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("tchaltaFlower", false, false), 1]);
                    }
                }
                else
                {
                    this.phase = "picked";
                    if (player.areGlovesEquipped == false)
                    {
                        if (Math.round(Math.random()))
                        {
                            player.health -= 1;
                            player.halfAcid = true;
                            player.acidTime = Math.max(player.acidTime, new Date().getTime() + 15000);
                        }
                    }
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "tchaltaLeaf")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("tchaltaLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
        }
        else if (this.type == "nupalaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(2);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 144, 15, 44, 46, -(1/2 * 44 * 1.55), -(1/2 * 46 * 1.55), 44 * 1.55, 46 * 1.55);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 92, 14, 44, 46, -(1/2 * 44 * 1.55), -(1/2 * 46 * 1.55), 44 * 1.55, 46 * 1.55);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 37, 13, 44, 46, -(1/2 * 44 * 1.55), -(1/2 * 46 * 1.55), 44 * 1.55, 46 * 1.55);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24;

            //INTERACTION
            if (this.activate == true && this.phase == 0 || this.activate == true && this.phase == 1)
            {
                this.activate = false;

                if (this.phase == 0)
                {
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "nupalaPuffs")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("nupalaPuffs", false, false), Math.floor(1 + Math.random() * 4)]);
                    }
                }
                else
                {
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "nupalaPuffs")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("nupalaPuffs", false, false), Math.floor(1 + Math.random() * 4)]);
                    }
                }
            }
        }
        else if (this.type == "zwaleimPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 258, 12, 53, 52, -(1/2 * 53 * 1.55), -(1/2 * 52 * 1.55), 53 * 1.55, 52 * 1.55);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 200, 13, 53, 52, -(1/2 * 53 * 1.55), -(1/2 * 52 * 1.55), 53 * 1.55, 52 * 1.55);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "zwaleimBranches")
                    {
                        Inventory[i][1] += (1 + Math.round(Math.random() * 5));
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("zwaleimBranches", false, false), (1 + Math.round(Math.random() * 5))]);
                }
            }
        }
        else if (this.type == "glazaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 6, 22, 28, 30, -(1/2 * 28 * 1.5), -(1/2 * 30 * 1.5), 28 * 1.5, 30 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(cef, 1, 53, 39, 39, -(1/2 * 39 * 1.5), -(1/2 * 39 * 1.5), 39 * 1.5, 39 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "glazaRoot")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("glazaRoot", false, false), 1]);
                }
            }
        }
        else if (this.type == "jollePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(9);
            this.solid = false;
            this.interactionRange = 96;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 333, 957, 55, 50, -(1/2 * 55), -(1/2 * 50), 55, 50);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(wendi, 335, 1024, 55, 50, -(1/2 * 55), -(1/2 * 50), 55, 50);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "jolleFlower")
                    {
                        Inventory[i][1] += (1 + Math.round(Math.random() * 7));
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("jolleFlower", false, false), (1 + Math.round(Math.random() * 7))]);
                }
            }
        }
        else if (this.type == "mustardPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 711, 155, 27, 28, -(1/2 * 27 * 1.2), -(1/2 * 28 * 1.2), 27 * 1.2, 28 * 1.2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 747, 155, 27, 28, -(1/2 * 27 * 1.2), -(1/2 * 28 * 1.2), 27 * 1.2, 28 * 1.2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                give("mustardGreens", (1 + Math.round(Math.random())));
                give("mustardSeedPods", 1);
            }
        }
        else if (this.type == "palggaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(12);
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 122, 15, 99, 96, -(1/2 * 99 * 1), -(1/2 * 96 * 1), 99 * 1, 96 * 1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 124, 136, 99, 96, -(1/2 * 99 * 1), -(1/2 * 96 * 1), 99 * 1, 96 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                give("palggaFlowers", (1 + Math.round(Math.random() * 2)));
            }
        }
        else if (this.type == "falloryPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(10);
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 3, 14, 99, 96, -(1/2 * 99 * 1), -(1/2 * 96 * 1), 99 * 1, 96 * 1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 10, 142, 99, 96, -(1/2 * 99 * 1), -(1/2 * 96 * 1), 99 * 1, 96 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 30;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                give("falloryFlower", (1 + Math.round(Math.random() * 5)));
            }
        }
        else if (this.type == "desertPoppyPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(3);
            this.solid = false;
            this.interactionRange = 65;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 962, 258, 38, 39, -(1/2 * 38 * 1), -(1/2 * 39 * 1), 38 * 1, 39 * 1);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 962, 303, 38, 39, -(1/2 * 38 * 1), -(1/2 * 39 * 1), 38 * 1, 39 * 1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                this.nectarNum = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 967, 353, 31, 29, -(1/2 * 31 * 1), -(1/2 * 29 * 1), 31 * 1, 29 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "desertPoppyFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("desertPoppyFlower", false, false), 1]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "desertPoppyPods")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("desertPoppyPods", false, false), 1]);
                }
            }
        }
        else if (this.type == "marigoldPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(9);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 260, 137, 56, 46, -(1/2 * 56), -(1/2 * 46), 56, 46);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 327, 138, 56, 46, -(1/2 * 56), -(1/2 * 46), 56, 46);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "marigoldFlower")
                    {
                        Inventory[i][1] += (1 + Math.round(Math.random() * 8));
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("marigoldFlower", false, false), (1 + Math.round(Math.random() * 8))]);
                }
            }
        }
        else if (this.type == "bleedingHeartPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(10);
            this.solid = true;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 471, 146, 37, 40, -(1/2 * 37), -(1/2 * 40), 37, 40);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 564, 148, 37, 40, -(1/2 * 37), -(1/2 * 40), 37, 40);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "bleedingHeartBranch")
                    {
                        Inventory[i][1] += (1 + Math.floor(Math.random() * 4));
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("bleedingHeartBranch", false, false), (1 + Math.floor(Math.random() * 4))]);
                }
            }
        }
        else if (this.type == "crilkPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(9);
            this.solid = true;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 654, 736, 45, 43, -(1/2 * 45), -(1/2 * 43), 45, 43);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 701, 705, 45, 43, -(1/2 * 45), -(1/2 * 43), 45, 43);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "crilkFruit")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random()*5);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("crilkFruit", false, false), 1 + Math.floor(Math.random()*5)]);
                }
            }
        }
        else if (this.type == "morshPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(4);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 918, 710, 56, 53, -(1/2 * 56), -(1/2 * 53), 56, 53);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(stic, 916, 772, 56, 53, -(1/2 * 56), -(1/2 * 53), 56, 53);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "morshPuff")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("morshPuff", false, false), 1]);
                }
            }
        }
        else if (this.type == "lauminPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(8);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 237, 132, 31, 30, -(1/2 * 31), -(1/2 * 30), 31, 30);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 273, 132, 31, 30, -(1/2 * 31), -(1/2 * 30), 31, 30);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "laumin")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("laumin", false, false), 1]);
                }
            }
        }
        else if (this.type == "korceidaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(9);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 238, 46, 31, 30, -(1/2 * 31), -(1/2 * 30), 31, 30);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 277, 45, 31, 30, -(1/2 * 31), -(1/2 * 30), 31, 30);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 316, 48, 31, 30, -(1/2 * 31), -(1/2 * 30), 31, 30);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0 || this.activate == true && this.phase == 1)
            {
                if (this.phase == 1)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "korceidaLeaf")
                        {
                            Inventory[i][1] += 1 + Math.floor(Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("korceidaLeaf", false, false), 1 + Math.floor(Math.random() * 3)]);
                    }
                }
                else
                {
                    this.activate = false;
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "korceidaFlower")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("korceidaFlower", false, false), 1]);
                    }
                }

            }
        }
        else if (this.type == "sciltPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 100;
            this.size = this.information;

            //DRAWSELF
            if (this.temporary == true)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(beets, 3, 351, 114, 101, -(1/2 * 114 * this.size), -(1/2 * 101 * this.size), 114 * this.size, 101 * this.size);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(beets, 41, 464, 30, 25, -(1/2 * 30 * this.size), -(1/2 * 25 * this.size), 30 * this.size, 25 * this.size);
                    XXX.restore();
                }
            }
            else
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(beets, 115, 357, 115, 101, -(1/2 * 115 * this.size), -(1/2 * 101 * this.size), 115 * this.size, 101 * this.size);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(beets, 140, 468, 30, 25, -(1/2 * 30 * this.size), -(1/2 * 25 * this.size), 30 * this.size, 25 * this.size);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "sciltArm")
                    {
                        Inventory[i][1] += 1 + Math.round(Math.random() * 3 * this.size);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("sciltArm", false, false), 1 + Math.round(Math.random() * 3 * this.size)]);
                }
            }
        }
        else if (this.type == "pyromothWeb")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 90;

            //DRAWSELF
            if (this.information == false)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 647, 620, 44, 52, -(1/2 * 44 * this.temporary), -(1/2 * 52 * this.temporary), 44 * this.temporary, 52 * this.temporary);
                XXX.restore();
                this.radius = 22 * this.temporary;
            }
            else if (this.information == true)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 649, 582, 37, 28, -(1/2 * 37 * this.temporary), -(1/2 * 28 * this.temporary), 37 * this.temporary, 28 * this.temporary);
                XXX.restore();
                this.radius = 14 * this.temporary;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                var hasShears = false;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "shears")
                    {
                        hasShears = true;
                        break;
                    }
                }

                if (hasShears)
                {
                    var silkSwag = 1;
                    if (this.information == false)
                    {
                        silkSwag += Math.floor(3 * this.temporary)
                    }
                    else
                    {
                        silkSwag += Math.floor(1 * this.temporary)
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "pyromothSilkweb")
                        {
                            Inventory[i][1] += silkSwag;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("pyromothSilkweb", false, false), silkSwag]);
                    }

                    //self delete
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }
        }
        else if (this.type == "gojiiPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 234, 739, 42, 42, -(1/2 * 42), -(1/2 * 42), 42, 42);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 366, 741, 42, 42, -(1/2 * 42), -(1/2 * 42), 42, 42);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 284, 740, 42, 42, -(1/2 * 42), -(1/2 * 42), 42, 42);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.phase == 0)
                {
                    if (player.areGlovesEquipped == false)
                    {
                        player.poisonV = true;
                    }
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "gojiiBerries")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("gojiiBerries", false, false), 1]);
                    }
                }
                else if (this.phase == 1)
                {
                    this.phase = "picked";
                    if (player.areGlovesEquipped == false)
                    {
                        player.poisonV = true;
                    }
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "gojiiFlower")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("gojiiFlower", false, false), 1]);
                    }
                }
            }
        }
        else if (this.type == "saugPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 464, 6, 19, 17, -(1/2 * 19), -(1/2 * 17), 19, 17);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tribe, 380, 7, 19, 19, -(1/2 * 19), -(1/2 * 19), 19, 19);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 6;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "saugRoot")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("saugRoot", false, false), 1]);
                }
            }
        }
        else if (this.type == "redStetriliPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(8);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 754, 596, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 754, 642, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "redStetriliFlower")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 5) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("redStetriliFlower", false, false), Math.floor(Math.random() * 5) + 1]);
                }
            }
        }
        else if (this.type == "yellowStetriliPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(8);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 515, 516, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 514, 562, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "yellowStetriliFlower")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 5) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("yellowStetriliFlower", false, false), Math.floor(Math.random() * 5) + 1]);
                }
            }
        }
        else if (this.type == "orangeStetriliPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(8);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 701, 688, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 701, 734, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "orangeStetriliFlower")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 5) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("orangeStetriliFlower", false, false), Math.floor(Math.random() * 5) + 1]);
                }
            }
        }
        else if (this.type == "peachStetriliPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(6);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 514, 605, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 513, 651, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "peachStetriliFlower")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 5) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("peachStetriliFlower", false, false), Math.floor(Math.random() * 5) + 1]);
                }
            }
        }
        else if (this.type == "blueStetriliPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(11);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 752, 688, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 752, 735, 43, 47, -(1/2 * 43), -(1/2 * 47), 43, 47);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "blueStetriliFlower")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 5) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("blueStetriliFlower", false, false), Math.floor(Math.random() * 5) + 1]);
                }
            }
        }
        else if (this.type == "rosePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(12);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 621, 525, 53, 46, -(1/2 * 53), -(1/2 * 46), 53, 46);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 567, 524, 53, 46, -(1/2 * 53), -(1/2 * 46), 53, 46);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            if (this.playerer <= this.radius && player.armourTotal < 0.15)
            {
                player.health -= 0.005;
            }

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-9);
                    }
                }

                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "rose")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 8) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("rose", false, false), Math.floor(Math.random() * 8) + 1]);
                }
            }
        }
        else if (this.type == "darkRosePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(11);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 622, 578, 53, 46, -(1/2 * 53), -(1/2 * 46), 53, 46);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(bogg, 568, 577, 53, 46, -(1/2 * 53), -(1/2 * 46), 53, 46);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            if (this.playerer <= this.radius && player.armourTotal < 0.15)
            {
                player.health -= 0.005;
            }

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-9);
                    }
                }

                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "darkRose")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 8) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("darkRose", false, false), Math.floor(Math.random() * 8) + 1]);
                }
            }
        }
        else if (this.type == "valumPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(8);
            this.solid = false;
            this.interactionRange = 100;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.digesting = 0;
            }
            //DRAWSELF
            if (this.digesting == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 759, 752, 33, 31, -(1/2 * 33), -(1/2 * 31), 33, 31);
                XXX.restore();
            }
            else if (this.digesting > 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 723, 750, 33, 31, -(1/2 * 33), -(1/2 * 31), 33, 31);
                XXX.restore();
                this.digesting += 1;
            }

            if (this.digesting > 200)
            {
                this.digesting = 0;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            if (this.digesting == 0)
            {
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].insect == true || ArtificialIntelligenceAccess[i].type == "Fletter" || ArtificialIntelligenceAccess[i].type == "Zancudo" || ArtificialIntelligenceAccess[i].type == "Bees" || ArtificialIntelligenceAccess[i].type == "Bat")
                    {
                        if (ArtificialIntelligenceAccess[i].DTU(this) < this.radius)
                        {
                            this.digesting = 1;
                            ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                            ArtificialIntelligenceAccess[i].deleteBody = true;
                            ArtificialIntelligenceAccess[i].health = 0;
                        }
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

            }
        }
        else if (this.type == "decipulaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(9);
            this.solid = true;
            this.interactionRange = 90;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.digesting = 0;
            }
            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //DRAWSELF
            if (this.digesting == -1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 698, 16, 86, 86, -(1/2 * 86), -(1/2 * 86), 86, 86);
                XXX.restore();
                this.radius = 8;
            }
            else if (this.digesting == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 696, 107, 86, 86, -(1/2 * 86), -(1/2 * 86), 86, 86);
                XXX.restore();
            }
            else if (this.digesting < 20)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 700, 205, 86, 86, -(1/2 * 86), -(1/2 * 86), 86, 86);
                XXX.restore();
                this.digesting += 2;
            }
            else if (this.digesting < 30)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 702, 306, 86, 86, -(1/2 * 86), -(1/2 * 86), 86, 86);
                XXX.restore();
                this.digesting += 2;
            }
            else if (this.digesting < 40)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 705, 396, 86, 86, -(1/2 * 86), -(1/2 * 86), 86, 86);
                XXX.restore();
                this.digesting += 2;
            }
            else if (this.digesting <= 220)
            {
                this.digesting += 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 708, 496, 78, 77, -(1/2 * 78), -(1/2 * 77), 78, 77);
                XXX.restore();
            }

            if (this.digesting > 220)
            {
                this.digesting = 0;
            }

            if (this.digesting == 0)
            {
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].type == "Zancudo" && ArtificialIntelligenceAccess[i].alive == true)
                    {
                        if (ArtificialIntelligenceAccess[i].DTU(this) < this.radius * 3)
                        {
                            this.digesting = 1;
                            ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                            ArtificialIntelligenceAccess[i].deleteBody = true;
                            ArtificialIntelligenceAccess[i].health = 0;
                        }
                    }
                }
            }

            //INTERACTION
            if (this.activate == true && this.digesting == 0)
            {
                this.digesting = -1;
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "decipulaHead")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("decipulaHead", false, false), 1 + Math.floor(Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "hracklePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(2);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 441, 364, 54, 44, -(1/2 * 54), -(1/2 * 44), 54, 44);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 440, 409, 54, 44, -(1/2 * 54), -(1/2 * 44), 54, 44);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "hracklePod")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("hracklePod", false, false), 1 + Math.floor(Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "potatoPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 40;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 2912, 68, 20, 19, -(1/2 * 20), -(1/2 * 19), 20, 19);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (player.potatoInvisibility != true)
                {
                    if (this.owned.length > 1)
                    {
                        if (player.noticed == true)
                        {
                            this.changeFactionRelation(-7);
                        }
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "potato")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 6) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("potato", false, false), Math.floor(Math.random() * 6) + 1]);
                }
            }
        }
        else if (this.type == "garlicPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 38;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 872, 2333, 38, 33, -(1/2 * 38 * 0.35), -(1/2 * 33 * 0.35), 38 * 0.35, 33 * 0.35);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 915, 2333, 38, 33, -(1/2 * 38 * 0.35), -(1/2 * 33 * 0.35), 38 * 0.35, 33 * 0.35);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-6);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "garlic")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("garlic", false, false), 1]);
                }
            }
        }
        else if (this.type == "carrotPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 40;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 2892, 73, 13, 12, -(1/2 * 13), -(1/2 * 12), 13, 12);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "carrot")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("carrot", false, false), 1]);
                }
            }
        }
        else if (this.type == "onionPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 40;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 2892, 73, 13, 12, -(1/2 * 13 * 1.1), -(1/2 * 12 * 1.1), 13 * 1.1, 12 * 1.1);
                XXX.restore();
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + 1/2 * Math.PI);
                XXX.drawImage(oldverse, 2892, 73, 13, 12, -(1/2 * 13 * 1.1), -(1/2 * 12 * 1.1), 13 * 1.1, 12 * 1.1);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-7);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "onion")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("onion", false, false), 1]);
                }
            }
        }
        else if (this.type == "cabbagePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 40;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 0, 5, 23, 24, -(1/2 * 23 * 1.5), -(1/2 * 24 * 1.5), 23 * 1.5, 24 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 41, 5, 23, 24, -(1/2 * 23 * 1.5), -(1/2 * 24 * 1.5), 23 * 1.5, 24 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-8);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "cabbage")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("cabbage", false, false), 1]);
                }
            }
        }
        else if (this.type == "aberdomPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 856, 166, 22, 27, -(1/2 * 22), -(1/2 * 27), 22, 27);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                if (player.areGlovesEquipped == false)
                {
                    player.poisonIII = true;
                }

                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "aberdomMushrooms")
                    {
                        Inventory[i][1] += 1 + Math.round(Math.random());
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("aberdomMushrooms", false, false), 1 + Math.round(Math.random())]);
                }
            }
        }
        else if (this.type == "beunumPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 50;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 907, 170, 38, 30, -(1/2 * 38), -(1/2 * 30), 38, 30);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "beunumMushroom")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("beunumMushroom", false, false), 1 + Math.floor(Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "toadstoolPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(ruin, 196, 6, 86, 57, -(1/2 * 86 * 1.25), -(1/2 * 57 * 1.25), 86 * 1.25, 57 * 1.25);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "toadstools")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("toadstools", false, false), 1 + Math.floor(Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "thimblecapPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 50;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(negro, 32, 33, 83, 54, -(1/2 * 83 * 0.75), -(1/2 * 54 * 0.75), 83 * 0.75, 54 * 0.75);
                XXX.restore();

                if (timeOfDay != "Day" || player.underground == true)
                {
                    lights.push({X:this.X, Y: this.Y, size: 40, extraStops: true, GRD: 0.15, Alpha: 0.2, showMe: false});

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.beginPath();
                    XXX.fillStyle = "#1E86D8";
                    if (timeOfDay == "Night")
                    {
                        XXX.globalAlpha = 0.2;
                    }
                    else
                    {
                        XXX.globalAlpha = 0.1;
                    }
                    XXX.arc(0, 0, 40, 0, 2 * Math.PI);
                    XXX.fill();
                    XXX.restore();
                }
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "thimblecapMushrooms")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("thimblecapMushrooms", false, false), 1 + Math.floor(Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "ciprinPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 50;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(floras, 948, 172, 33, 30, -(1/2 * 33), -(1/2 * 30), 33, 30);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "ciprinMushroom")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("ciprinMushroom", false, false), 1 + Math.floor(Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "kozlyakPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 407, 577, 26, 27, -(1/2 * 26), -(1/2 * 27), 26, 27);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "kozlyakMushrooms")
                    {
                        Inventory[i][1] += 1 + Math.round(Math.random());
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("kozlyakMushrooms", false, false), 1 + Math.round(Math.random())]);
                }
            }
        }
        else if (this.type == "gribnoyPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 728, 715, 35, 38, -(1/2 * 35), -(1/2 * 38), 35, 38);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "gribnoyMushroom")
                    {
                        Inventory[i][1] += 1 + Math.round(Math.random());
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("gribnoyMushroom", false, false), 1 + Math.round(Math.random())]);
                }
            }
        }
        else if (this.type == "maleotPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 667, 727, 62, 65, -(1/2 * 62), -(1/2 * 65), 62, 65);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "maleotMushroom")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("maleotMushroom", false, false), 1 + Math.floor(Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "poegroonPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 541, 711, 76, 93, -(1/2 * 76), -(1/2 * 93), 76, 93);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "poegroonMushrooms")
                    {
                        Inventory[i][1] += 1 + Math.floor(Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("poegroonMushrooms", false, false), 1 + Math.floor(Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "iodPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 66;

            if (this.runOneTime)
            {
                this.hideMush = false;
                this.runOneTime = false;
                this.nutrients = 0;
                this.soilNutrients = 90 + (110 * Math.random());
                this.mycelium = 66;
                this.myceliumCap = 260 + (80 * Math.random());
            }

            var soilProcessRate = 0.1 + 0.0025 * this.mycelium;
            if (this.soilNutrients > soilProcessRate)
            {
                this.nutrients += soilProcessRate;
                this.soilNutrients -= soilProcessRate;
            }
            else if (this.soilNutrients > 0)
            {
                this.nutrients += this.soilNutrients;
                this.soilNutrients = 0;
            }

            var tenticles = 1 + Math.floor(this.mycelium / 110);
            for (var dd = deadAIList.length - 1; dd >= 0; dd--)
            {
                if (deadAIList[dd].healthMAX > 0 && tenticles > 0)
                {
                    if (deadAIList[dd].DTU(this) < this.mycelium)
                    {
                        tenticles -= 1;
                        XXX.save();
                        XXX.translate(X - deadAIList[dd].X + 1/2 * CCC.width, Y - deadAIList[dd].Y + 1/2 * CCC.height);
                        XXX.rotate(deadAIList[dd].rotation);
                        XXX.drawImage(hydra, 325, 711, 62, 65, -(1/2 * 62), -(1/2 * 65), 62, 65);
                        XXX.restore();

                        deadAIList[dd].healthMAX -= 0.1;
                        this.soilNutrients += 2;

                        if (deadAIList[dd].healthMAX <= 0)
                        {
                            scenicList.push(new Scenery("iodLimb", deadAIList[dd].X, deadAIList[dd].Y, deadAIList[dd].rotation, true));
                            deadAIList.splice(dd, 1);
                        }
                    }
                }
            }

            if (this.nutrients >= 3 && this.mycelium < this.myceliumCap)
            {
                this.nutrients -= 3;
                this.mycelium += 1;
            }
            else if (this.nutrients >= 90 && this.mycelium >= this.myceliumCap)
            {
                var plantItRot = (Math.PI * 2 * Math.random());
                var plantit = true;
                for (var iod = 0; iod < scenicList.length; iod++)
                {
                    if (scenicList[iod].type == "iodPlant")
                    {
                        if (scenicList[iod].dst((this.X + Math.cos(plantItRot) * this.mycelium), (this.Y + Math.sin(plantItRot) * this.mycelium)) <= 120)
                        {
                            plantit = false;
                        }
                    }
                }
                if (plantit == true)
                {
                    scenicList.push(new Scenery("iodPlant", this.X + Math.cos(plantItRot) * this.mycelium, this.Y + Math.sin(plantItRot) * this.mycelium, Math.PI * 2 * Math.random(), true));
                    this.nutrients -= 90;
                }
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(hydra, 396, 713, 62, 65, -(1/2 * 62), -(1/2 * 65), 62, 65);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i++)
                {
                    if (Inventory[i][0].type == "iodFungi")
                    {
                        Inventory[i][1] += 1 + Math.floor(this.mycelium / 110);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("iodFungi", false, false), 1 + Math.floor(this.mycelium / 110)]);
                }
            }
        }
        else if (this.type == "iodLimb")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
            }


            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.globalAlpha = 0.85;
            XXX.drawImage(hydra, 325, 711, 62, 65, -(1/2 * 62), -(1/2 * 65), 62, 65);
            XXX.restore();

            this.tic += 0.12;
            if (this.tic > 55)
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 1;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "halgomPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 434, 1938, 29, 29, -(1/2 * 29), -(1/2 * 29), 29, 29);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "halgomMushrooms")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("halgomMushrooms", false, false), 1]);
                }
            }
        }
        else if (this.type == "cerebrisPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 253, 670, 54, 58, -(1/2 * 54), -(1/2 * 58), 54, 58);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
            }
            this.tic += 1;

            //if (this.tic > 600)
            //{
            //    if (this.tic % 40)
            //    {
            //        scenicList.push(new Scenery("cerebrisSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false))
            //    }
            //
            //    if (this.tic > 1000)
            //    {
            //        this.tic = 0;
            //    }
            //}

            if (timeOfDay == "Day")
            {
                if (this.tic % 6 == 0)
                {
                    scenicList.push(new Scenery("cerebrisSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 26;

            //INTERACTION
            if (this.activate == true && this.phase == 0 && player.form != "venandi" && player.venandi < 200)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "cerebrisMushrooms")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("cerebrisMushrooms", false, false), 1]);
                }
            }
        }
        else if (this.type == "athergmPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 499, 0, 50, 41, -(1/2 * 50), -(1/2 * 41), 50, 41);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
            }
            this.tic += 1;

            if (timeOfDay == "Day")
            {
                if (this.tic % 12 == 0)
                {
                    scenicList.push(new Scenery("athergmSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false))
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "athergmMushrooms")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("athergmMushrooms", false, false), 1]);
                }
            }
        }
        else if (this.type == "xiumPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 70;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.pods = true;
                this.podRecargar = 0;
                this.babyTic = 0;
                this.podPot = false;
            }

            if (this.phase == 0)
            {
                if (this.pods == false)
                {
                    this.podRecargar += 0.1;

                    if (this.podRecargar > 800)
                    {
                        this.pods = true;
                    }
                }
            }

            //DRAWSELF
            if (this.temporary == false)
            {
                this.babyTic += 0.1;
                if (this.babyTic < 70)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 534, 67, 80, 72, -(1/2 * 80), -(1/2 * 72), 80, 72);
                    XXX.restore();
                }
                else if (this.babyTic < 140)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 457, 174, 82, 75, -(1/2 * 82), -(1/2 * 75), 82, 75);
                    XXX.restore();
                }
                else if (this.babyTic < 210)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 459, 269, 82, 75, -(1/2 * 82), -(1/2 * 75), 82, 75);
                    XXX.restore();
                }
                else
                {
                    this.temporary = true;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 459, 269, 82, 75, -(1/2 * 82), -(1/2 * 75), 82, 75);
                    XXX.restore();
                }

                if (this.phase == "picked")
                {
                    scenicList.splice(scenicList.indexOf(this), 1);
                }
            }
            else
            {
                if (this.pods == true && this.phase == 0)
                {
                    if (this.dst(X, Y) <= 120)
                    {
                        this.podPot = true;
                    }

                    for (var j = 0; j < ArtificialIntelligenceAccess.length; j++)
                    {
                        if (this.dst(ArtificialIntelligenceAccess[j].X, ArtificialIntelligenceAccess[j].Y) <= 120 && !ArtificialIntelligenceAccess[j].underground && ArtificialIntelligenceAccess[j].dmx == this.dmx)
                        {
                            this.podPot = true;
                        }
                    }

                    if (this.podPot == true)
                    {
                        this.podPot = false;
                        this.pods = false;
                        this.podRecargar = 0;
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 1/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 2/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 3/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 4/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 5/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 6/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 7/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                        scenicList.push(new Scenery("xiumPod", this.X, this.Y, 0/8 * 2 * Math.PI + this.rotation + spacer(0.04), false));
                    }
                }

                if (this.phase == 0)
                {
                    if (this.pods == true)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(fect, 469, 74, 48, 44, -(1/2 * 48), -(1/2 * 44), 48, 44);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(fect, 492, 38, 39, 36, -(1/2 * 39), -(1/2 * 36), 39, 36);
                        XXX.restore();
                    }
                }
                else
                {
                    if (this.pods == true)
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(fect, 472, 123, 47, 43, -(1/2 * 47), -(1/2 * 43), 47, 43);
                        XXX.restore();
                    }
                    else
                    {
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(fect, 457, 38, 39, 36, -(1/2 * 39), -(1/2 * 36), 39, 36);
                        XXX.restore();
                    }
                }

                this.tic += 1;

                if (timeOfDay != "Night" && this.phase == 0)
                {
                    if (this.tic % 88 == 0)
                    {
                        scenicList.push(new Scenery("xiumSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                        scenicList.push(new Scenery("xiumSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                    }
                }

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 25;

                //INTERACTION
                if (this.activate == true && this.phase == 0)
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "xiumMushroom")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("xiumMushroom", false, false), 1]);
                    }
                }
            }
        }
        else if (this.type == "xiumPod")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 50;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.sticky = true;
                this.speed = 8;
                this.shoot = 72;
                this.hatch = false;
                this.sporePressure = 0;
                this.latched = false;
                this.playerLatched = false;
            }

            this.shoot -= 1;
            this.sporePressure += 1;

            if (this.shoot > 0)
            {
                this.X += Math.cos(this.rotation) * this.speed;
                this.Y += Math.sin(this.rotation) * this.speed;
            }

            if (this.sporePressure > 700)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }
            else if (this.sporePressure > 540)
            {
                this.sticky = false;
                this.stuck = false;
                if (this.hatch == false)
                {
                    this.hatch = true;
                    for (var ixium = 0; ixium < 6; ixium++)
                    {
                        scenicList.push(new Scenery("xiumSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                        if (Math.random() < (1/14))
                        {
                            var dontHatchNothin = false;
                            for (var j = 0; j < scenicList.length; j++)
                            {
                                if (scenicList[j] !== this && scenicList[j].type != "xiumPod")
                                {
                                    if (this.dst(scenicList[j].X, scenicList[j].Y) < (scenicList[j].radius + this.radius + 40))
                                    {
                                        dontHatchNothin = true;
                                        break;
                                    }
                                }
                            }
                            if (dontHatchNothin == false)
                            {
                                scenicList.push(new Scenery("xiumPlant", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                            }
                        }
                    }
                }
            }

            if (this.latched != false || this.playerLatched == true)
            {
                this.zIndex = 4;
            }
            else
            {
                this.zIndex = 2;
            }

            //DRAWSELF
            if (this.hatch == false)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + Math.PI);
                XXX.drawImage(fect, 601, 41, 15, 16, -(1/2 * 15), -(1/2 * 16), 15, 16);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation + Math.PI);
                XXX.drawImage(fect, 597, 7, 23, 21, -(1/2 * 23), -(1/2 * 21), 23, 21);
                XXX.restore();
            }

            var stuck = "none";
            if (this.sticky == true)
            {
                if (this.playerLatched == false)
                {
                    for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                    {
                        if (this.latched == ArtificialIntelligenceAccess[i].barcode)
                        {
                            stuck = ArtificialIntelligenceAccess[i];
                        }
                        else if (this.latched == false)
                        {
                            var diist = this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y);
                            if (diist <= this.radius + this.speed && this.shoot > 0 || diist <= this.radius)
                            {
                                stuck = ArtificialIntelligenceAccess[i];
                                this.shoot = 0;
                                this.latched = ArtificialIntelligenceAccess[i].barcode;
                            }
                        }
                    }
                }

                if (this.playerLatched == true)
                {
                    stuck = {X: X, Y: Y};
                }
                else if (this.latched == false)
                {
                    var diiist = this.dst(X, Y);
                    if (diiist <= this.radius + this.speed && this.shoot > 0 || diiist <= this.radius)
                    {
                        stuck = {X: X, Y: Y};
                        this.playerLatched = true;
                        this.shoot = 0;
                    }
                }

                if (stuck != "none")
                {
                    this.X = stuck.X;
                    this.Y = stuck.Y;
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 4;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.sticky = false;
                this.latched = false;
            }
        }
        else if (this.type == "glinPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 26, 1, 26, 23, -(1/2 * 26), -(1/2 * 23), 26, 23);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "glinMushrooms")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("glinMushrooms", false, false), 1]);
                }
            }
        }
        else if (this.type == "halcifPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 7, 58, 26, 22, -(1/2 * 26), -(1/2 * 22), 26, 22);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                if (player.glovesEquipped == "none")
                {
                    player.poisonIII = true;
                }
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "halcifMushroom")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("halcifMushroom", false, false), Math.floor(1 + Math.random() * 6)]);
                }
            }
        }
        else if (this.type == "krogiPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 45;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 90, 236, 47, 46, -(1/2 * 47), -(1/2 * 46), 47, 46);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(pixi, 148, 236, 47, 46, -(1/2 * 47), -(1/2 * 46), 47, 46);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "krogiMushroom")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("krogiMushroom", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "cyrinthilimPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.subVariety = "fungi";
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 7, 29, 38, 23, -(1/2 * 38), -(1/2 * 23), 38, 23);
                XXX.restore();
            }
            else
            {
                for (var i = 0; i < scenicList.length; i++)
                {
                    if (scenicList[i] === this)
                    {
                        scenicList.splice(i, 1);
                        break;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "cyrinthilimMushroom")
                    {
                        Inventory[i][1] += Math.floor(Math.random() * 5) + 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("cyrinthilimMushroom", false, false), Math.floor(Math.random() * 5) + 1]);
                }
            }
        }
        else if (this.type == "culprisPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2075, 194, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2120, 195, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "culprisLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("culprisLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "beachedKelp")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 110;

            //DRAWSELF
            if (this.temporary == 0)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(norc, 178, 228, 76, 54, -(1/2 * 76 * 1.8), -(1/2 * 54 * 1.8), 76 * 1.8, 54 * 1.8);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(norc, 173, 321, 76, 54, -(1/2 * 76 * 1.8), -(1/2 * 54 * 1.8), 76 * 1.8, 54 * 1.8);
                    XXX.restore();
                }
            }
            else if (this.temporary == 1)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(norc, 281, 236, 76, 65, -(1/2 * 76 * 1.8), -(1/2 * 65 * 1.8), 76 * 1.8, 65 * 1.8);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(norc, 277, 328, 76, 65, -(1/2 * 76 * 1.8), -(1/2 * 65 * 1.8), 76 * 1.8, 65 * 1.8);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(norc, 387, 234, 59, 84, -(1/2 * 59 * 1.8), -(1/2 * 84 * 1.8), 59 * 1.8, 84 * 1.8);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(norc, 383, 326, 59, 84, -(1/2 * 59 * 1.8), -(1/2 * 84 * 1.8), 59 * 1.8, 84 * 1.8);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 75;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "kelp")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("kelp", false, false), 1]);
                }
            }
        }
        else if (this.type == "hoilPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 13, 360, 18, 16, -(1/2 * 18 * 1.6), -(1/2 * 16 * 1.6), 18 * 1.6, 16 * 1.6);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 37, 360, 18, 16, -(1/2 * 18 * 1.6), -(1/2 * 16 * 1.6), 18 * 1.6, 16 * 1.6);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "hoilLeaves")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("hoilLeaves", false, false), 1]);
                }
            }
        }
        else if (this.type == "wheatPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 718, 268, 39, 39, -(1/2 * 39 * 1), -(1/2 * 39 * 1), 39 * 1, 39 * 1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 759, 269, 39, 39, -(1/2 * 39 * 1), -(1/2 * 39 * 1), 39 * 1, 39 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 16;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-6);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "wheat")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("wheat", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "berenjenaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 34, 470, 31, 58, -(1/2 * 31 * 1.5), -(1/2 * 58 * 1.5), 31 * 1.5, 58 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 66, 468, 31, 58, -(1/2 * 31 * 1.5), -(1/2 * 58 * 1.5), 31 * 1.5, 58 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-10);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "berenjena")
                    {
                        Inventory[i][1] += (1 + Math.round(Math.random()));
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("berenjena", false, false), (1 + Math.round(Math.random()))]);
                }
            }
        }
        else if (this.type == "saffronPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 24, 425, 24, 23, -(1/2 * 24 * 1.3), -(1/2 * 23 * 1.3), 24 * 1.3, 23 * 1.3);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 25, 404, 24, 23, -(1/2 * 24 * 1.3), -(1/2 * 23 * 1.3), 24 * 1.3, 23 * 1.3);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 12;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-20);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "saffron")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("saffron", false, false), 1]);
                }
            }
        }
        else if (this.type == "alcachofaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 3, 180, 35, 43, -(1/2 * 35 * 1.3), -(1/2 * 43 * 1.3), 35 * 1.3, 43 * 1.3);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jungho, 0, 137, 35, 43, -(1/2 * 35 * 1.3), -(1/2 * 43 * 1.3), 35 * 1.3, 43 * 1.3);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 12;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "alcachofa")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("alcachofa", false, false), 1]);
                }
            }
        }
        else if (this.type == "harstPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 240, 27, 17, 19, -(1/2 * 17 * 2), -(1/2 * 19 * 2), 17 * 2, 19 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 261, 42, 17, 19, -(1/2 * 17 * 2), -(1/2 * 19 * 2), 17 * 2, 19 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-5);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "harstGrain")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("harstGrain", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "santhPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 2972, 178, 24, 23, -(1/2 * 24), -(1/2 * 23), 24, 23);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 2941, 178, 24, 23, -(1/2 * 24), -(1/2 * 23), 24, 23);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-19);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "santhGrain")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("santhGrain", false, false), 1]);
                }
            }
        }
        else if (this.type == "suuliPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 90;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 2878, 92, 49, 50, -(1/2 * 49), -(1/2 * 50), 49, 50);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 2947, 94, 49, 50, -(1/2 * 49), -(1/2 * 50), 49, 50);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-17);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "suuliMelon")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("suuliMelon", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "pumpkinPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 27, 28, 56, 39, -(1/2 * 56 * 1.2), -(1/2 * 39 * 1.2), 56 * 1.2, 39 * 1.2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 27, 64, 56, 39, -(1/2 * 56 * 1.2), -(1/2 * 39 * 1.2), 56 * 1.2, 39 * 1.2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-14);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "pumpkin")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("pumpkin", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "salaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 332, 1, 27, 22, -(1/2 * 27 * 1.25), -(1/2 * 22 * 1.25), 27 * 1.25, 22 * 1.25);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 334, 22, 27, 22, -(1/2 * 27 * 1.25), -(1/2 * 22 * 1.25), 27 * 1.25, 22 * 1.25);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "salaFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("salaFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "heyolPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = true;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 384, 3, 19, 16, -(1/2 * 19 * 2), -(1/2 * 19 * 2), 19 * 2, 19 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 363, 4, 19, 16, -(1/2 * 19 * 2), -(1/2 * 19 * 2), 19 * 2, 19 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "heyolBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("heyolBerries", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "hopsPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 290, 29, 33, 25, -(1/2 * 33 * 1.25), -(1/2 * 25 * 1.25), 33 * 1.25, 25 * 1.25);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 290, 0, 33, 25, -(1/2 * 33 * 1.25), -(1/2 * 25 * 1.25), 33 * 1.25, 25 * 1.25);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-9);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "hops")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("hops", false, false), Math.floor(1 + Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "tylunPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 60;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2113, 150, 32, 30, -(1/2 * 32), -(1/2 * 30), 32, 30);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2078, 150, 32, 30, -(1/2 * 32), -(1/2 * 30), 32, 30);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        if (this.information == "theGreatFlowerOfTheJarlOfTeshir")
                        {
                            if (player.title != "nobility" && player.title != "royalty")
                            {
                                this.changeFactionRelation(-200);
                            }
                        }
                        else
                        {
                            this.changeFactionRelation(-19);
                        }
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "tylunFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("tylunFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "vardanianSwampBrush")
        {
            //TRAITS
            this.variety = "plant";
            this.interactionRange = 20;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.solid = true;
                this.size = this.temporary;
                this.health = 8 * this.size;
            }

            //DRAWSELF
            if (this.health <= 0)
            {
                this.solid = false;
                this.size = 0.4;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 178, 108, 55, 58, -(1/2 * 55 * this.size), -(1/2 * 58 * this.size), 55 * this.size, 58 * this.size);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 178, 108, 55, 58, -(1/2 * 55 * this.size), -(1/2 * 58 * this.size), 55 * this.size, 58 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 24 * this.size;

            //certain enemies break right through it
            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (ArtificialIntelligenceAccess[i].type == "BogTroll" || ArtificialIntelligenceAccess[i].type == "Hydra" || ArtificialIntelligenceAccess[i].type == "Vodkapa" || ArtificialIntelligenceAccess[i].healthMAX > 60)
                {
                    var disst = (this.X - ArtificialIntelligenceAccess[i].X)*(this.X - ArtificialIntelligenceAccess[i].X) + (this.Y - ArtificialIntelligenceAccess[i].Y)*(this.Y - ArtificialIntelligenceAccess[i].Y);
                    if (disst < (this.radius * 1.5) * (this.radius * 1.5) + ArtificialIntelligenceAccess[i].sizeRadius * ArtificialIntelligenceAccess[i].sizeRadius)
                    {
                        this.health = 0;
                    }
                }
            }

            if (player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                {
                    this.health -= player.weapon.damage;
                }
            }

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
            }
        }
        else if (this.type == "ulgoyPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 50 * this.owned;
            this.nectar(50);

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polpol, 245, 385, 39, 34, -(1/2 * 31 * this.owned), -(1/2 * 30 * this.owned), 31 * this.owned, 30 * this.owned);
                XXX.drawImage(polpol, 245, 385, 39, 34, -(1/2 * 31 * this.owned), -(1/2 * 30 * this.owned), 31 * this.owned, 30 * this.owned);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polpol, 286, 385, 39, 34, -(1/2 * 31 * this.owned), -(1/2 * 30 * this.owned), 31 * this.owned, 30 * this.owned);
                XXX.drawImage(polpol, 286, 385, 39, 34, -(1/2 * 31 * this.owned), -(1/2 * 30 * this.owned), 31 * this.owned, 30 * this.owned);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polpol, 317, 385, 39, 34, -(1/2 * 31 * this.owned), -(1/2 * 30 * this.owned), 31 * this.owned, 30 * this.owned);
                XXX.drawImage(polpol, 317, 385, 39, 34, -(1/2 * 31 * this.owned), -(1/2 * 30 * this.owned), 31 * this.owned, 30 * this.owned);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "ulgoyLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("ulgoyLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                var jarHitz = [-1, 1];
                for (var i = 0; i < Inventory.length; i++)
                {
                    if (Inventory[i][0].type == "glassJar")
                    {
                        jarHitz[0] = i;
                        jarHitz[1] = Inventory[i][1];
                    }
                }
                if (jarHitz[0] > -1 && player.getIntelligence() >= 12)
                {
                    if (jarHitz[1] - 1 > 0)
                    {
                        Inventory[jarHitz[0]][1] -= 1;
                    }
                    else
                    {
                        Inventory.splice(jarHitz[0], 1);
                    }
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "jarOfUlgoyNectar")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("jarOfUlgoyNectar", false, false), 1]);
                    }
                }
            }
        }
        else if (this.type == "akerPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(3);
            this.solid = true;
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2103, 73, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2060, 73, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "akerBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 5);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("akerBerries", false, false), Math.floor(1 + Math.random() * 5)]);
                }
            }
        }
        else if (this.type == "yaihefPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = true;
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 107, 462, 36, 28, -(1/2 * 36), -(1/2 * 28), 36, 28);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 51, 464, 36, 28, -(1/2 * 36), -(1/2 * 28), 36, 28);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "yaihefBerries")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("yaihefBerries", false, false), 1]);
                }
            }
        }
        else if (this.type == "porstolPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 568, 223, 31, 26, -(1/2 * 31), -(1/2 * 26), 31, 26);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 622, 226, 31, 26, -(1/2 * 31), -(1/2 * 26), 31, 26);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 7;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "porstolBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("porstolBerries", false, false), Math.floor(1 + Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "cranberryPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(2);
            this.solid = true;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 812, 107, 29, 28, -(1/2 * 29 * 1.1), -(1/2 * 28 * 1.1), 29 * 1.1, 28 * 1.1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 854, 108, 29, 28, -(1/2 * 29 * 1.1), -(1/2 * 28 * 1.1), 29 * 1.1, 28 * 1.1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "cranberries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("cranberries", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "chyoulPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(8);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 857, 140, 25, 23, -(1/2 * 25 * 1.5), -(1/2 * 23 * 1.5), 25 * 1.5, 23 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 810, 138, 25, 23, -(1/2 * 25 * 1.5), -(1/2 * 23 * 1.5), 25 * 1.5, 23 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            if (this.playerer <= this.radius && player.areBootsEquipped == false)
            {
                player.health -= 0.014;
            }

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                if (player.areGlovesEquipped == false)
                {
                    player.health -= 0.8;
                }
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "chyoulBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("chyoulBerries", false, false), Math.floor(1 + Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "ameloyPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(10);
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(milk, 283, 24, 33, 32, -(1/2 * 33), -(1/2 * 32), 33, 32);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(milk, 342, 23, 33, 32, -(1/2 * 33), -(1/2 * 32), 33, 32);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "ameloyFlower")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 8);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("ameloyFlower", false, false), Math.floor(1 + Math.random() * 8)]);
                }
            }
        }
        else if (this.type == "thadinePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(0);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.temporary == false)
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(milk, 97, 104, 79, 73, -(1/2 * 79), -(1/2 * 73), 79, 73);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(milk, 261, 79, 79, 73, -(1/2 * 79), -(1/2 * 73), 79, 73);
                    XXX.restore();
                }
            }
            else
            {
                if (this.phase == 0)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(milk, 186, 103, 79, 73, -(1/2 * 79), -(1/2 * 73), 79, 73);
                    XXX.restore();
                }
                else if (this.phase == "picked")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(milk, 333, 77, 79, 73, -(1/2 * 79), -(1/2 * 73), 79, 73);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 50;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                if (this.temporary == false)
                {
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "thadineBranch")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("thadineBranch", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
                else
                {
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "thadineBranch")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("thadineBranch", false, false), Math.floor(1 + Math.random() * 6)]);
                    }
                }
            }
        }
        else if (this.type == "thegolthornPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = false;
            this.interactionRange = 10;

            //DRAWSELF
            if (this.temporary == true)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(milk, 521, 32, 32, 30, -(1/2 * 32) * 1.17, -(1/2 * 30) * 1.17, 32 * 1.17, 30 * 1.17);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(milk, 521, 32, 32, 30, -(1/2 * 32), -(1/2 * 30), 32, 30);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
            }
        }
        else if (this.type == "kwomPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 390, 72, 28, 21, -(1/2 * 28 * 1.4), -(1/2 * 21 * 1.4), 28 * 1.4, 21 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 426, 74, 28, 21, -(1/2 * 28 * 1.4), -(1/2 * 21 * 1.4), 28 * 1.4, 21 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "kwomFruit")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("kwomFruit", false, false), Math.floor(1 + Math.random() * 6)]);
                }
            }
        }
        else if (this.type == "clobePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 326, 114, 23, 20, -(1/2 * 23 * 1.4), -(1/2 * 20 * 1.4), 23 * 1.4, 20 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 354, 114, 23, 20, -(1/2 * 23 * 1.4), -(1/2 * 20 * 1.4), 23 * 1.4, 20 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "clobeLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("clobeLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "frijolPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 357, 27, 17, 16, -(1/2 * 17 * 1.4), -(1/2 * 16 * 1.4), 17 * 1.4, 16 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 337, 27, 17, 16, -(1/2 * 17 * 1.4), -(1/2 * 16 * 1.4), 17 * 1.4, 16 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-7);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "frijols")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("frijols", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "maizePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 337, 3, 21, 18, -(1/2 * 21 * 1.8), -(1/2 * 18 * 1.8), 21 * 1.8, 18 * 1.8);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 361, 2, 21, 18, -(1/2 * 21 * 1.8), -(1/2 * 18 * 1.8), 21 * 1.8, 18 * 1.8);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-10);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "mazorca")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("mazorca", false, false), Math.floor(1 + Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "apotlPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 495, 44, 21, 20, -(1/2 * 21 * 1.4), -(1/2 * 20 * 1.4), 21 * 1.4, 20 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 520, 44, 21, 20, -(1/2 * 21 * 1.4), -(1/2 * 20 * 1.4), 21 * 1.4, 20 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "apotlPepper")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 7);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("apotlPepper", false, false), Math.floor(1 + Math.random() * 7)]);
                }
            }
        }
        else if (this.type == "karmPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(2);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 214, 61, 31, 30, -(1/2 * 31 * 1.4), -(1/2 * 30 * 1.4), 31 * 1.4, 30 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 251, 62, 31, 30, -(1/2 * 31 * 1.4), -(1/2 * 30 * 1.4), 31 * 1.4, 30 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "karmFruit")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("karmFruit", false, false), 1]);
                }
            }
        }
        else if (this.type == "pochalPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(2);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 313, 61, 28, 26, -(1/2 * 28 * 1.4), -(1/2 * 26 * 1.4), 28 * 1.4, 26 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 344, 62, 28, 26, -(1/2 * 28 * 1.4), -(1/2 * 26 * 1.4), 28 * 1.4, 26 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "pochalPods")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("pochalPods", false, false), 1]);
                }
            }
        }
        else if (this.type == "volaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(4);
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 387, 111, 25, 21, -(1/2 * 25 * 1.4), -(1/2 * 21 * 1.4), 25 * 1.4, 21 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 412, 111, 25, 21, -(1/2 * 25 * 1.4), -(1/2 * 21 * 1.4), 25 * 1.4, 21 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "volaFlowers")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("volaFlowers", false, false), 1]);
                }
            }
        }
        else if (this.type == "haeflowerPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(2);
            this.solid = false;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(zapa, 12, 408, 40, 40, -(1/2 * 40 * 1.4), -(1/2 * 40 * 1.4), 40 * 1.4, 40 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(zapa, 12, 358, 40, 40, -(1/2 * 40 * 1.4), -(1/2 * 40 * 1.4), 40 * 1.4, 40 * 1.4);
                XXX.restore();
            }

            //TODO add that its pollen floats around getting people all drugged up in the season of Bright.

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "haeflower")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("haeflower", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "tepprekliaPlant")
        {
            //TRAITS
            this.solid = true;
            this.variety = "plant";
            this.subVariety = "fungi";
            this.interactionRange = 110;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 3190, 59, 78, 72, -(1/2 * 78), -(1/2 * 72), 78, 72);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 3105, 62, 78, 72, -(1/2 * 78), -(1/2 * 72), 78, 72);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "tepprekliaFungus")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 9);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("tepprekliaFungus", false, false), Math.floor(1 + Math.random() * 9)]);
                }
            }
        }
        else if (this.type == "bequonPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(10);
            this.solid = false;
            this.interactionRange = 50;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 3028, 72, 68, 57, -(1/2 * 68), -(1/2 * 57), 68, 57);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(oldverse, 3024, 129, 68, 57, -(1/2 * 68), -(1/2 * 57), 68, 57);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "bequonFruit")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("bequonFruit", false, false), 1]);
                }
            }
        }
        else if (this.type == "lelPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(6);
            this.solid = false;
            this.interactionRange = 90;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 449, 9, 34, 33, -(1/2 * 34 * 1.8), -(1/2 * 33 * 1.8), 34 * 1.8, 33 * 1.8);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 492, 9, 34, 33, -(1/2 * 34 * 1.8), -(1/2 * 33 * 1.8), 34 * 1.8, 33 * 1.8);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 536, 11, 34, 33, -(1/2 * 34 * 1.8), -(1/2 * 33 * 1.8), 34 * 1.8, 33 * 1.8);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "lelBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("lelBerries", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "lelFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("lelFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "tenicPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 222, 65, 33, 27, -(1/2 * 33 * 2), -(1/2 * 27 * 2), 33 * 2, 27 * 2);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 260, 66, 33, 27, -(1/2 * 33 * 2), -(1/2 * 27 * 2), 33 * 2, 27 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 180, 65, 33, 27, -(1/2 * 33 * 2), -(1/2 * 27 * 2), 33 * 2, 27 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "tenicFlower")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("tenicFlower", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "tenicLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 7);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("tenicLeaf", false, false), Math.floor(1 + Math.random() * 7)]);
                }
            }
        }
        else if (this.type == "palntPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 157, 467, 20, 20, -(1/2 * 20 * 1.35), -(1/2 * 20 * 1.35), 20 * 1.3, 20 * 1.35);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 158, 495, 20, 20, -(1/2 * 20 * 1.35), -(1/2 * 20 * 1.35), 20 * 1.3, 20 * 1.35);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 177, 492, 32, 23, -(1/2 * 32 * 1.35 * 1.75), -(1/2 * 23 * 1.35 * 1.75), 32 * 1.35 * 1.75, 23 * 1.35 * 1.75);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "palntFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("palntFlower", false, false), 1]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "palntRoot")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("palntRoot", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "aktaltlPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 157, 9, 54, 46, -(1/2 * 54 * 1.4), -(1/2 * 46 * 1.4), 54 * 1.4, 46 * 1.4);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 229, 7, 54, 46, -(1/2 * 54 * 1.4), -(1/2 * 46 * 1.4), 54 * 1.4, 46 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dolls, 275, 7, 54, 46, -(1/2 * 54 * 1.4), -(1/2 * 46 * 1.4), 54 * 1.4, 46 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "aktaltlFrond")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("aktaltlFrond", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "aktaltlRoot")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("aktaltlRoot", false, false), 1]);
                }
            }
        }
        else if (this.type == "sesrePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(3);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (timeOfDay == "Day")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(lodo, 271, 174, 27, 25, -(1/2 * 27 * 2), -(1/2 * 25 * 2), 27 * 2, 25 * 2);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(lodo, 271, 140, 27, 25, -(1/2 * 27 * 2), -(1/2 * 25 * 2), 27 * 2, 25 * 2);
                    XXX.restore();
                    lights.push({X: this.X, Y: this.Y, size: 92, extraStops: true, GRD: 0.1, Alpha: 0.68, showMe: false});
                }
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 215, 174, 27, 25, -(1/2 * 27 * 2), -(1/2 * 25 * 2), 27 * 2, 25 * 2);
                XXX.restore();
                lights.push({X: this.X, Y: this.Y, size: 92, extraStops: true, GRD: 0.1, Alpha: 0.68, showMe: false});
            }
            else if (this.phase == "picked")
            {
                this.nectarNum = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 216, 141, 27, 25, -(1/2 * 27 * 2), -(1/2 * 25 * 2), 27 * 2, 25 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "sesreLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("sesreLeaf", false, false), Math.floor(1 + Math.random() * 4)]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "sesreStamen")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("sesreStamen", false, false), 1]);
                }
            }
        }
        else if (this.type == "steugiurnePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(10);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 114, 256, 64, 56, -(1/2 * 64 * 3), -(1/2 * 56 * 3), 64 * 3, 56 * 3);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 132, 331, 15, 13, -(1/2 * 15 * 3), -(1/2 * 13 * 3), 15 * 3, 13 * 3);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                this.nectarNum = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 178, 331, 14, 13, -(1/2 * 14 * 3), -(1/2 * 13 * 3), 14 * 3, 13 * 3);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "steugiurneFrond")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("steugiurneFrond", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "steugiurneFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("steugiurneFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "erguerPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(6);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 495, 1946, 29, 29, -(1/2 * 29 * 1), -(1/2 * 29 * 1), 29 * 1, 29 * 1);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                this.nectarNum = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 521, 1944, 29, 29, -(1/2 * 29 * 1), -(1/2 * 29 * 1), 29 * 1, 29 * 1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 554, 1945, 29, 29, -(1/2 * 29 * 1), -(1/2 * 29 * 1), 29 * 1, 29 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = 1;
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "erguerFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("erguerFlower", false, false), 1]);
                }
            }
            else if (this.activate == true && this.phase == 1)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "erguerLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("erguerLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "iemaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 493, 1910, 29, 29, -(1/2 * 29 * 1), -(1/2 * 29 * 1), 29 * 1, 29 * 1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 523, 1910, 29, 29, -(1/2 * 29 * 1), -(1/2 * 29 * 1), 29 * 1, 29 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "iemaBerries")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("iemaBerries", false, false), 1]);
                }
            }
        }
        else if (this.type == "wobeaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (timeOfDay == "Day")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(chupa, 50, 341, 67, 64, -(1/2 * 67 * 2), -(1/2 * 64 * 2), 67 * 2, 64 * 2);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(chupa, 49, 494, 67, 64, -(1/2 * 67 * 2), -(1/2 * 64 * 2), 67 * 2, 64 * 2);
                    XXX.restore();
                }
            }
            else if (this.phase == 1)
            {
                if (timeOfDay == "Day")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(chupa, 50, 261, 67, 64, -(1/2 * 67 * 2), -(1/2 * 64 * 2), 67 * 2, 64 * 2);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(chupa, 48, 186, 67, 64, -(1/2 * 67 * 2), -(1/2 * 64 * 2), 67 * 2, 64 * 2);
                    XXX.restore();
                }
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(chupa, 49, 413, 67, 64, -(1/2 * 67 * 2), -(1/2 * 64 * 2), 67 * 2, 64 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 52;

            if (player.stunnedIII == false && player.armourTotal < 0.8 && timeOfDay == "Day")
            {
                if (((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y)) <= this.radius * this.radius)
                {
                    player.stunnedIII = true;
                    player.stunnedTime = 9;
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.phase == 0)
                {
                    this.phase = 1;
                    if (player.glovesEquipped == "none" && timeOfDay == "Day")
                    {
                        player.stunnedII = true;
                        player.stunnedTime = 4;
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "wobeaFruit")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("wobeaFruit", false, false), 1]);
                    }
                }
                else if (this.phase == 1)
                {
                    this.phase = "picked";
                    if (player.glovesEquipped == "none" && timeOfDay == "Day")
                    {
                        player.stunnedII = true;
                        player.stunnedTime = 4;
                    }
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "wobeaLeaf")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 8);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("wobeaLeaf", false, false), Math.floor(1 + Math.random() * 8)]);
                    }
                }
            }
        }
        else if (this.type == "ostryyGrassPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.size = this.temporary;
            this.interactionRange = 52 * this.size;

            if (typeof this.trampled == "undefined")
            {
                this.trampled = false;
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 52 * this.size;

            this.sharp = true;

            //DRAWSELF
            if (this.phase == 0)
            {
                if (this.trampled == true)
                {
                    this.sharp = false;
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 245, 119, 146, 148, -(1/2 * 146 * this.size), -(1/2 * 148 * this.size), 146 * this.size, 148 * this.size);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 4;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mawt, 19, 181, 144, 123, -(1/2 * 144 * this.size), -(1/2 * 123 * this.size), 144 * this.size, 123 * this.size);
                    XXX.restore();
                }
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mawt, 1095, 533, 141, 117, -(1/2 * 141 * this.size), -(1/2 * 117 * this.size), 114 * this.size, 117 * this.size);
                XXX.restore();
            }
            this.trampled = false;

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (ArtificialIntelligenceAccess[i].insect != true && ArtificialIntelligenceAccess[i].type != "Rat" && ArtificialIntelligenceAccess[i].flying != true && ArtificialIntelligenceAccess[i].underground != true && ArtificialIntelligenceAccess[i].dmx == this.dmx && ArtificialIntelligenceAccess[i].healthMAX > 2.4)
                {
                    if (((ArtificialIntelligenceAccess[i].X - this.X) * (ArtificialIntelligenceAccess[i].X - this.X) + (ArtificialIntelligenceAccess[i].Y - this.Y) * (ArtificialIntelligenceAccess[i].Y - this.Y)) <= (this.radius * this.radius) + (1/2 * ArtificialIntelligenceAccess[i].sizeRadius)*(1/2 * ArtificialIntelligenceAccess[i].sizeRadius))
                    {
                        if (ArtificialIntelligenceAccess[i].healthMAX >= 20 || ArtificialIntelligenceAccess[i].type == "Soldier" && ArtificialIntelligenceAccess[i].armour >= 4 || ArtificialIntelligenceAccess[i].type == "Person" && ArtificialIntelligenceAccess[i].armour >= 4)
                        {
                            if (ArtificialIntelligenceAccess[i].armour < 4)
                            {
                                if (ArtificialIntelligenceAccess[i].moving == true || ArtificialIntelligenceAccess[i].attacking)
                                {
                                    if (ArtificialIntelligenceAccess[i].speed <= 1.5)
                                    {
                                        ArtificialIntelligenceAccess[i].health -= 0.04;
                                    }
                                    else
                                    {
                                        ArtificialIntelligenceAccess[i].health -= 0.08;
                                    }
                                    ArtificialIntelligenceAccess[i].showHealthTime = new Date().getTime();
                                    ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                                }
                            }
                            this.trampled = true;
                        }
                        else
                        {
                            if (ArtificialIntelligenceAccess[i].moving == true || ArtificialIntelligenceAccess[i].attacking)
                            {
                                if (ArtificialIntelligenceAccess[i].speed <= 1.5)
                                {
                                    ArtificialIntelligenceAccess[i].health -= 0.04;
                                }
                                else
                                {
                                    ArtificialIntelligenceAccess[i].health -= 0.08;
                                }
                                ArtificialIntelligenceAccess[i].showHealthTime = new Date().getTime();
                                ArtificialIntelligenceAccess[i].killNotByPlayer = true;
                            }
                        }
                    }
                }
            }

            if (this.trampled == false)
            {
                if (((X - this.X) * (X - this.X) + (Y - this.Y) * (Y - this.Y)) <= this.radius * this.radius)
                {
                    if (player.bootsEquipped != "none" && player.glovesEquipped != "none" || player.armour >= 4)
                    {
                        this.trampled = true;
                    }
                    else
                    {
                        if (wKey || sKey || aKey || dKey || eKey || spaceKey)
                        {
                            if (wKey && shiftKey)
                            {
                                player.health -= 0.08;
                            }
                            else
                            {
                                player.health -= 0.04;
                            }
                        }
                    }
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (this.phase == 0)
                {
                    this.phase = "picked";
                    if (player.glovesEquipped == "none")
                    {
                        player.health -= 3.5;
                    }

                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "ostryyGrass")
                        {
                            Inventory[i][1] += Math.max(1, Math.floor((4 + Math.random() * 4) * this.size));
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("ostryyGrass", false, false), Math.max(1, Math.floor((4 + Math.random() * 4) * this.size))]);
                    }
                }
            }
        }
        else if (this.type == "tialoPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 370, 1939, 44, 40, -(1/2 * 44 * 1), -(1/2 * 40 * 1), 44 * 1, 40 * 1);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 323, 1935, 44, 40, -(1/2 * 44 * 1), -(1/2 * 40 * 1), 44 * 1, 40 * 1);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "tialoFrond")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("tialoFrond", false, false), Math.floor(1 + Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "blilPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(8);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 42, 261, 27, 30, -(1/2 * 27 * 2), -(1/2 * 30 * 2), 27 * 2, 30 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 79, 261, 27, 30, -(1/2 * 27 * 2), -(1/2 * 30 * 2), 27 * 2, 30 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "blilArm")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("blilArm", false, false), Math.floor(1 + Math.random() * 6)]);
                }
            }
        }
        else if (this.type == "kofkePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 9, 295, 17, 16, -(1/2 * 17 * 2), -(1/2 * 16 * 2), 17 * 2, 16 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 37, 297, 17, 16, -(1/2 * 17 * 2), -(1/2 * 16 * 2), 17 * 2, 16 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "kofkeLeaves")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("kofkeLeaves", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "thalisPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(3);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 5, 316, 22, 18, -(1/2 * 22 * 2), -(1/2 * 18 * 2), 22 * 2, 18 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 41, 317, 22, 18, -(1/2 * 22 * 2), -(1/2 * 18 * 2), 22 * 2, 18 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "thalisLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("thalisLeaf", false, false), Math.floor(1 + Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "callopPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(3);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 36, 366, 13, 12, -(1/2 * 13 * 2), -(1/2 * 12 * 2), 13 * 2, 12 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 56, 366, 13, 12, -(1/2 * 13 * 2), -(1/2 * 12 * 2), 13 * 2, 12 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "callopBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("callopBerries", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "eyewortPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 552, 369, 34, 34, -(1/2 * 34 * 1.4), -(1/2 * 34 * 1.4), 34 * 1.4, 34 * 1.4);
                XXX.restore();
            }
            else if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 551, 407, 34, 34, -(1/2 * 34 * 1.4), -(1/2 * 34 * 1.4), 34 * 1.4, 34 * 1.4);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(beets, 551, 440, 34, 34, -(1/2 * 34 * 1.4), -(1/2 * 34 * 1.4), 34 * 1.4, 34 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase != "picked")
            {
                if (player.areGlovesEquipped == false)
                {
                    player.poisonII = true;
                }

                if (this.phase == 0)
                {
                    this.activate = false;
                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "eyewortStalk")
                        {
                            Inventory[i][1] += 1;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("eyewortStalk", false, false), 1]);
                    }
                }
                else
                {
                    this.activate = false;
                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "eyewortLeaves")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("eyewortLeaves", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
            }
        }
        else if (this.type == "darbPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 31, 385, 12, 11, -(1/2 * 12 * 2), -(1/2 * 11 * 2), 12 * 2, 11 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 47, 386, 12, 11, -(1/2 * 12 * 2), -(1/2 * 11 * 2), 12 * 2, 11 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "darbBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("darbBerries", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "galloshPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(2);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 7, 354, 19, 19, -(1/2 * 19 * 2), -(1/2 * 19 * 2), 19 * 2, 19 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 6, 372, 19, 19, -(1/2 * 19 * 2), -(1/2 * 19 * 2), 19 * 2, 19 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "galloshFlower")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("galloshFlower", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "vorlymPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = false;
            this.interactionRange = 75;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 106, 355, 22, 22, -(1/2 * 22 * 2.5), -(1/2 * 22 * 2.5), 22 * 2.5, 22 * 2.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 105, 377, 22, 22, -(1/2 * 22 * 2.5), -(1/2 * 22 * 2.5), 22 * 2.5, 22 * 2.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "vorlymFlower")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 5);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("vorlymFlower", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "brightbloomPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(6);
            this.solid = false;
            this.interactionRange = 75;

            if (quests.ultherFlower == false && this.temporary == "ultherFlower")
            {
                this.phase = "picked";
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 828, 306, 22, 21, -(1/2 * 22 * 2.5), -(1/2 * 21 * 2.5), 22 * 2.5, 21 * 2.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(nognog, 863, 305, 22, 21, -(1/2 * 22 * 2.5), -(1/2 * 21 * 2.5), 22 * 2.5, 21 * 2.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                //this is a special case in which picking this changes a specific variable
                if (this.temporary == "ultherFlower")
                {
                    quests.ultherFlower = false;
                }

                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "brightbloomFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("brightbloomFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "wegPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 90;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 345, 179, 25, 23, -(1/2 * 25 * 2), -(1/2 * 23 * 2), 25 * 2, 23 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 330, 121, 46, 49, -(1/2 * 46 * 2) - 7.5, -(1/2 * 49 * 2), 46 * 2, 49 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "wegRoot")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("wegRoot", false, false), 1]);
                }
            }
        }
        else if (this.type == "wightbloomPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 100;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 154, 523, 27, 27, -(1/2 * 27 * 1.5), -(1/2 * 27 * 1.5), 27 * 1.5, 27 * 1.5);
                XXX.drawImage(theCrack, 154, 523, 27, 27, -(1/2 * 27 * 1.5), -(1/2 * 27 * 1.5), 27 * 1.5, 27 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 116, 524, 27, 27, -(1/2 * 27 * 1.5), -(1/2 * 27 * 1.5), 27 * 1.5, 27 * 1.5);
                XXX.drawImage(theCrack, 116, 524, 27, 27, -(1/2 * 27 * 1.5), -(1/2 * 27 * 1.5), 27 * 1.5, 27 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 21;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "wightbloomBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("wightbloomBerries", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "tyrniPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(3);
            this.interactionRange = 85;
            this.solid = true;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 40, 336, 23, 18, -(1/2 * 23 * 2), -(1/2 * 18 * 2), 23 * 2, 18 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 10, 336, 23, 18, -(1/2 * 23 * 2), -(1/2 * 18 * 2), 23 * 2, 18 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                if (player.glovesEquipped == "none")
                {
                    player.health -= 2;
                    player.energy -= 1;
                }
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "tyrniBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("tyrniBerries", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "lorkweedPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.interactionRange = 65;
            this.solid = false;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 106, 173, 20, 17, -(1/2 * 20 * 2), -(1/2 * 17 * 2), 20 * 2, 17 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(lodo, 84, 174, 20, 17, -(1/2 * 20 * 2), -(1/2 * 17 * 2), 20 * 2, 17 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                if (player.glovesEquipped == "none")
                {
                    player.health -= 0.45;
                    player.energy -= 0.25;
                }
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "lorkWeed")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("lorkWeed", false, false), 1]);
                }
            }
        }
        else if (this.type == "danzigPlant")
        {
            //TRAITS
            this.solid = false;
            this.variety = "plant";
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 869, 150, 50, 46, -(1/2 * 50 * 1.5), -(1/2 * 46 * 1.5), 50 * 1.5, 46 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 823, 151, 50, 46, -(1/2 * 50 * 1.5), -(1/2 * 46 * 1.5), 50 * 1.5, 46 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "danzigFrond")
                    {
                        Inventory[i][1] += Math.floor(2 + Math.random() * 4);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("danzigFrond", false, false), Math.floor(2 + Math.random() * 4)]);
                }
            }
        }
        else if (this.type == "meklePlant")
        {
            //TRAITS
            this.solid = false;
            this.variety = "plant";
            this.interactionRange = 95;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.ticc = 0;
            }

            //rejuvenation
            if (this.phase == "picked")
            {
                this.ticc += 0.1;

                if (this.ticc > 100)
                {
                    this.phase = 0;
                }
            }
            else
            {
                this.ticc = 0;
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 1018, 13, 29, 29, -(1/2 * 29), -(1/2 * 29), 29, 29);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 1052, 13, 29, 29, -(1/2 * 29), -(1/2 * 29), 29, 29);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "mekleFrond")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("mekleFrond", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "ishPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 759, 542, 47, 46, -(1/2 * 47), -(1/2 * 46), 47, 46);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 809, 543, 47, 46, -(1/2 * 47), -(1/2 * 46), 47, 46);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "ishBranch")
                    {
                        Inventory[i][1] += Math.floor(2 + Math.random() * 8);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("ishBranch", false, false), Math.floor(2 + Math.random() * 8)]);
                }
            }
        }
        else if (this.type == "itlinPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 469, 59, 25, 22, -(1/2 * 25 * 2), -(1/2 * 22 * 2), 25 * 2, 22 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 470, 82, 25, 22, -(1/2 * 25 * 2), -(1/2 * 22 * 2), 25 * 2, 22 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "itlinBranch")
                    {
                        Inventory[i][1] += Math.floor(2 + Math.random() * 6);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("itlinBranch", false, false), Math.floor(2 + Math.random() * 6)]);
                }
            }
        }
        else if (this.type == "butterMellowPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.interactionRange = 50;
            this.solid = false;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 274, 46, 10, 8, -(1/2 * 10 * 2), -(1/2 * 8 * 2), 10 * 2, 8 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 287, 46, 10, 8, -(1/2 * 10 * 2), -(1/2 * 8 * 2), 10 * 2, 8 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "butterMellowFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("butterMellowFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "corneliusPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.interactionRange = 50;
            this.solid = false;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 234, 7, 9, 7, -(1/2 * 9 * 2), -(1/2 * 7 * 2), 9 * 2, 7 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 259, 7, 9, 7, -(1/2 * 9 * 2), -(1/2 * 7 * 2), 9 * 2, 7 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "corneliusFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("corneliusFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "rilthasiaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.interactionRange = 50;
            this.solid = false;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 247, 7, 9, 7, -(1/2 * 9 * 2), -(1/2 * 7 * 2), 9 * 2, 7 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 259, 7, 9, 7, -(1/2 * 9 * 2), -(1/2 * 7 * 2), 9 * 2, 7 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "rilthasiaFlower")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("rilthasiaFlower", false, false), 1]);
                }
            }
        }
        else if (this.type == "mufPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.interactionRange = 85;
            this.solid = false;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 278, 5, 13, 12, -(1/2 * 13 * 2), -(1/2 * 12 * 2), 13 * 2, 12 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 294, 5, 13, 12, -(1/2 * 13 * 2), -(1/2 * 12 * 2), 13 * 2, 12 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "mufBall")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("mufBall", false, false), 1]);
                }
            }
        }
        else if (this.type == "wyrPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(3);
            this.solid = false;
            this.interactionRange = 90;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 376, 71, 49, 45, -(1/2 * 49 * 1.5), -(1/2 * 45 * 1.5), 49 * 1.5, 45 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 376, 116, 49, 45, -(1/2 * 49 * 1.5), -(1/2 * 45 * 1.5), 49 * 1.5, 45 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "wyrLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 8);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("wyrLeaf", false, false), Math.floor(1 + Math.random() * 8)]);
                }
            }
        }
        else if (this.type == "luufPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 383, 3, 21, 16, -(1/2 * 21), -(1/2 * 16), 21, 16);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(freeverse, 362, 4, 21, 16, -(1/2 * 21), -(1/2 * 16), 21, 16);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 15;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "luufBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 2);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("luufBerries", false, false), Math.floor(1 + Math.random() * 2)]);
                }
            }
        }
        else if (this.type == "laicaumPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(4);
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 978, 54, 35, 33, -(1/2 * 35 * 2), -(1/2 * 33 * 2), 35 * 2, 33 * 2);
                XXX.restore();
            }
            if (this.phase == 1)
            {
                this.solid = true;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 1015, 53, 35, 33, -(1/2 * 35 * 2), -(1/2 * 33 * 2), 35 * 2, 33 * 2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                this.solid = false;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gul, 1051, 53, 35, 33, -(1/2 * 35 * 2), -(1/2 * 33 * 2), 35 * 2, 33 * 2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true && this.phase != "picked")
            {
                this.activate = false;
                if (this.phase == 0)
                {

                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].type == "laicaumBerries")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("laicaumBerries", false, false), Math.floor(1 + Math.random() * 3)]);
                    }
                }
                else if (this.phase == 1)
                {

                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].type == "laicaumBranch")
                        {
                            Inventory[i][1] += Math.floor(2 + Math.random() * 4);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("laicaumBranch", false, false), Math.floor(2 + Math.random() * 4)]);
                    }
                }
            }
        }
        else if (this.type == "bushkaPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = true;
            this.interactionRange = 80;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 1, 174, 41, 33, -(1/2 * 41), -(1/2 * 33), 41, 33);
                XXX.restore();
            }
            if (this.phase == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 2, 138, 41, 33, -(1/2 * 41), -(1/2 * 33), 41, 33);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 40, 138, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase != "picked")
            {
                this.activate = false;
                if (this.phase == 0)
                {

                    this.phase = 1;
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].type == "bushkaBerries")
                        {
                            Inventory[i][1] += Math.floor(1 + Math.random() * 6);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("bushkaBerries", false, false), Math.floor(1 + Math.random() * 6)]);
                    }
                }
                else if (this.phase == 1)
                {

                    this.phase = "picked";
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].type == "bushkaLeaves")
                        {
                            Inventory[i][1] += Math.floor(2 + Math.random() * 7);
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("bushkaLeaves", false, false), Math.floor(2 + Math.random() * 7)]);
                    }
                }
            }
        }
        else if (this.type == "pluttPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(7);
            this.solid = true;
            this.interactionRange = 95;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2064, 245, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2113, 245, 39, 34, -(1/2 * 39), -(1/2 * 34), 39, 34);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //extras
            if (this.temporary == "picked")
            {
                this.phase = "picked";
            }


            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "pluttBerries")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("pluttBerries", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "stomwikPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 90;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2112, 112, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2078, 108, 32, 32, -(1/2 * 32), -(1/2 * 32), 32, 32);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "stomwikLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 5);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("stomwikLeaf", false, false), Math.floor(1 + Math.random() * 5)]);
                }
            }
        }
        else if (this.type == "techiPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 90;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 79, 108, 18, 21, -(1/2 * 18), -(1/2 * 21), 18, 21);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(candlewic, 79, 128, 18, 21, -(1/2 * 18), -(1/2 * 21), 18, 21);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "techiLeaf")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("techiLeaf", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "ogardPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(5);
            this.solid = false;
            this.interactionRange = 85;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(poly, 60, 66, 34, 32, -(1/2 * 34 * 1.3), -(1/2 * 32 * 1.3), 34 * 1.3, 32 * 1.3);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(poly, 19, 65, 34, 32, -(1/2 * 34 * 1.3), -(1/2 * 32 * 1.3), 34 * 1.3, 32 * 1.3);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 22;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "ogard")
                    {
                        Inventory[i][1] += Math.floor(1 + Math.random() * 3);
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("ogard", false, false), Math.floor(1 + Math.random() * 3)]);
                }
            }
        }
        else if (this.type == "swampLilyPlant")
        {
            //TRAITS
            this.variety = "plant";

            this.solid = false;
            this.interactionRange = 64;

            //DRAWSELF
            if (this.phase == 0)
            {
                this.nectar(7);
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 100, 143, 25, 24, -(1/2 * 25 * 1.2), -(1/2 * 24 * 1.2), 25 * 1.2, 24 * 1.2);
                XXX.restore();
            }
            else if (this.phase == "picked")
            {
                this.nectar(0);
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 55, 143, 25, 24, -(1/2 * 25 * 1.2), -(1/2 * 24 * 1.2), 25 * 1.2, 24 * 1.2);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 12;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "swampLily")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("swampLily", false, false), 1]);
                }
            }
        }
        else if (this.type == "borshtPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 13, 98, 30, 32, -(1/2 * 30 * 1.4), -(1/2 * 32 * 1.4), 30 * 1.4, 32 * 1.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 11;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";

                //if the plant is owned and you are noticed by any AI then decrease faction relation for stealing.
                if (typeof(this.owned) != "boolean" && this.owned.length > 1)
                {
                    if (player.noticed == true)
                    {
                        this.changeFactionRelation(-11);
                    }
                }

                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "borsht")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("borsht", false, false), 1]);
                }
            }
        }
        else if (this.type == "cattailPlant")
        {
            //TRAITS
            this.variety = "plant";
            this.nectar(1);
            this.solid = false;
            this.interactionRange = 70;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 0, 41, 50, 59, -(1/2 * 50 * 1.25), -(1/2 * 59 * 1.25), 50 * 1.25, 59 * 1.25);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 14;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;
                this.phase = "picked";
                var hits = 0;
                for (var i = 0; i < Inventory.length; i ++)
                {
                    if (Inventory[i][0].type == "cattail")
                    {
                        Inventory[i][1] += 1;
                        break;
                    }
                    else
                    {
                        hits += 1;
                    }
                }
                if (hits == Inventory.length)
                {
                    Inventory.push([new Item("cattail", false, false), 1]);
                }
            }
        }
        else if (this.type == "mandrakePlant")
        {
            //TRAITS
            this.variety = "plant";
            this.solid = false;
            this.interactionRange = 55;

            //DRAWSELF
            if (this.phase == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 818, 243, 21, 18, -(1/2 * 21 * 1.5), -(1/2 * 18 * 1.5), 21 * 1.5, 18 * 1.5);
                XXX.restore();
                this.mandrakeScream = false;
            }
            else if (this.phase == "picked")
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 817, 264, 21, 18, -(1/2 * 21 * 1.5), -(1/2 * 18 * 1.5), 21 * 1.5, 18 * 1.5);
                XXX.restore();

                if (this.mandrakeScream == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(toad, 812, 202, 25, 41, -(1/2 * 25 * 1.5), -(1/2 * 41 * 1.5), 25 * 1.5, 41 * 1.5);
                    XXX.restore();

                    if (this.playerer < 150 && player.vamprism != true)
                    {
                        player.level -= 1;
                        player.skillPoints -= 4;
                        player.totalSkillPoints -= 4;
                        player.experience = 0;
                        player.magicalExperience = 0;
                        if (player.level < 1)
                        {
                            player.health = -1000000;
                        }
                    }
                    for (var jj = 0; jj < ArtificialIntelligenceAccess.length; jj++)
                    {
                        if (ArtificialIntelligenceAccess[jj].dmx == this.dmx)
                        {
                            if (ArtificialIntelligenceAccess[jj].DTU({X: this.X, Y: this.Y}) < 150)
                            {
                                if (ArtificialIntelligenceAccess[jj].type == "Changeling")
                                {
                                    ArtificialIntelligenceAccess[jj].childForm = false;
                                    ArtificialIntelligenceAccess[jj].changelingForm = true;
                                }
                                if (ArtificialIntelligenceAccess[jj].team != "undead" && ArtificialIntelligenceAccess[jj].team != "ghost")
                                {
                                    ArtificialIntelligenceAccess[jj].health = -1000000;
                                }
                            }
                        }
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 9;

            //INTERACTION
            if (this.activate == true && this.phase == 0)
            {
                this.activate = false;

                this.doBreak = false;
                this.yaTiene = false;
                var hit = 0;

                for (var i = 0; i < Inventory.length; i++)
                {
                    hit += 1;
                    for (var j = 0; j < mandrakeConversionList.length; j++)
                    {
                        //console.log(Inventory[i][0].type + " v.s. "  + bovineConversionList[j][0]);
                        if (Inventory[i][0].type == mandrakeConversionList[j][0])
                        {
                            hit = 0;
                            for (var k = 0; k < Inventory.length; k++)
                            {
                                if (Inventory[k][0].type == mandrakeConversionList[j][1])
                                {
                                    this.yaTiene = k;
                                }
                            }

                            if (Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                if (this.yaTiene == false)
                                {
                                    Inventory.push([new Item(mandrakeConversionList[j][1], false, false), 1]);
                                }
                                else
                                {
                                    Inventory[this.yaTiene][1] +=1;
                                }
                                this.doBreak = true;
                                break;
                            }
                            else
                            {
                                if (this.yaTiene == false)
                                {
                                    Inventory.splice(i, 1);
                                    Inventory.push([new Item(mandrakeConversionList[j][1], false, false), 1]);
                                }
                                else
                                {
                                    Inventory[this.yaTiene][1] +=1;
                                    Inventory.splice(i, 1);
                                }
                                this.doBreak = true;
                                break;
                            }
                        }
                    }
                    if (this.doBreak == true)
                    {
                        break;
                    }
                }
                if (hit == Inventory.length)
                {
                    this.mandrakeScream = true;
                }
                this.phase = "picked";
            }
        }
        else if (this.type == "largeCeremonialRockCircle")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(furr, 15, 685, 164, 147, -(1/2 * 164 * 1.7), -(1/2 * 147 * 1.7), 164 * 1.7, 147 * 1.7);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 0;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "smallRockCircle")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(furr, 15, 685, 164, 147, -(1/2 * 164 * 0.4), -(1/2 * 147 * 0.4), 164 * 0.4, 147 * 0.4);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 0;

            //INTERACTION
            if (this.activate == true)
            {
                dClick = true;
                this.activate = false;
            }
        }
        else if (this.type == "hyelingSkeleton")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(furr, 282, 707, 54, 45, -(1/2 * 54 * 1.6), -(1/2 * 45 * 1.6), 54 * 1.6, 45 * 1.6);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 0;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "tent")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 110;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(verse, 162, 1436, 40, 45, -(1/2 * 80), -(1/2 * 90), 80, 90);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 42;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (player.weaponEquipped == "hammer" && this.temporary == false) //if hammer is equipped deconstruct the tent.
                {
                    worldItems.push([new Item("tent", this.X, this.Y), 1]);
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }

                }
                else
                {
                    sleep();
                    if (typeof dOS == "number")
                    {
                        if (dOS > 0 && dOS < 25)
                        {
                            player.warmth += (5 * dOS);
                        }
                    }
                }
            }
        }
        else if (this.type == "vardanianTent")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 105;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation - 1/2 * Math.PI);
            XXX.drawImage(gul, 894, 14, 55, 40, -(1/2 * 55 * 2), -(1/2 * 40 * 2), 55 * 2, 40 * 2);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 38;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (player.weaponEquipped == "hammer" && this.temporary == false) //if hammer is equipped deconstruct the tent.
                {
                    worldItems.push([new Item("vardanianTent", this.X, this.Y), 1]);
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }

                }
                else
                {
                    sleep();
                    if (typeof dOS == "number")
                    {
                        if (dOS > 0 && dOS < 25)
                        {
                            player.warmth += (3 * dOS);
                        }
                    }
                }
            }
        }
        else if (this.type == "nomadTent")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 110;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation + 1/2 * Math.PI);
            XXX.drawImage(gnoll, 0, 87, 51, 52, -(1/2 * 51 * 2.4), -(1/2 * 52 * 2.4), 51 * 2.4, 52 * 2.4);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 45;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                if (player.weaponEquipped == "hammer" && this.temporary == false) //if hammer is equipped deconstruct the tent.
                {
                    worldItems.push([new Item("nomadTent", this.X, this.Y), 1]);
                    for (var i = 0; i < scenicList.length; i++)
                    {
                        if (scenicList[i] === this)
                        {
                            scenicList.splice(i, 1);
                            break;
                        }
                    }

                }
                else
                {
                    sleep();
                    if (typeof dOS == "number")
                    {
                        if (dOS > 0 && dOS < 25)
                        {
                            player.warmth += (1 * dOS);
                        }
                    }
                }
            }
        }
        else if (this.type == "hyelingTent")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 130;

            //DRAWSELF
            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(furr, 188, 715, 64, 57, -(1/2 * 64 * 1.9), -(1/2 * 57 * 1.9), 64 * 1.9, 57 * 1.9);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 54;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                player.warmth += 50;
                sleep();
            }
        }
        else if (this.type == "fouxDuende")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //DRAWSELF
            this.costu += 0.1;

            this.rotation = Math.atan2(this.Y - Y, this.X - X) + 1/2 *Math.PI;

            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            if (this.costu <= 0)
            {
                XXX.drawImage(atal, 201, 1826, 143, 136, -1/2 * 143 * 1 * 0.7, -1/2 * 136 * 1  * 0.7, 143 * 0.7, 136 * 0.7);
            }
            else if (this.costu <= 1)
            {
                XXX.drawImage(atal, 344, 1825, 143, 136, -1/2 * 143 * 1 * 0.7, -1/2 * 136 * 1  * 0.7, 143 * 0.7, 136 * 0.7);
            }
            else if (this.costu <= 2)
            {
                XXX.drawImage(atal, 506, 1823, 143, 136, -1/2 * 143 * 1 * 0.7, -1/2 * 136 * 1  * 0.7, 143 * 0.7, 136 * 0.7);
            }
            else if (this.costu <= 3)
            {
                XXX.drawImage(atal, 650, 1820, 143, 136, -1/2 * 143 * 1 * 0.7, -1/2 * 136 * 1  * 0.7, 143 * 0.7, 136 * 0.7);
            }
            else if (this.costu >= 4)
            {
                this.costu = 0;
                XXX.drawImage(atal, 650, 1820, 143, 136, -1/2 * 143 * 1 * 0.7, -1/2 * 136 * 1  * 0.7, 143 * 0.7, 136 * 0.7);
            }
            else
            {
                XXX.drawImage(atal, 201, 1826, 143, 136, -1/2 * 143 * 1 * 0.7, -1/2 * 136 * 1  * 0.7, 143 * 0.7, 136 * 0.7);
            }
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 50;

            //SELF DELETE
            this.burntTime += 1;

            if (this.burntTime > 290)
            {
                scenicList.splice(scenicList.indexOf(this), 1);
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "grave")
        {
            //TRAITS
            this.owned = this.information[0];
            this.zIndex = 1;
            this.solid = false;
            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.treeHealth = 5;
                this.phase = 0;
            }
            this.interactionRange = 115;

            var szx = 1.5;
            var szz = 1.25;
            var ticRate = 10/3;

            //DRAWSELF
            if (this.temporary == 0) //no coffin (interactive)
            {
                if (this.phase == 0)
                {
                    //don't draw anything
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1734, 249, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();
                }
                else if (this.phase == 2)
                {
                    if (this.lit == true)
                    {
                        if (this.tic < 10)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1351, 647, 76, 135, -(1/2 * 76 * szx + 0.5), -(1/2 * 135 * szx + 0.055), 76 * szx, 135 * szx);
                            XXX.restore();
                        }
                        else if (this.tic < 20)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1478, 648, 76, 135, -(1/2 * 76 * szx - 1.2), -(1/2 * 135 * szx - 1.2), 76 * szx, 135 * szx);
                            XXX.restore();
                        }
                        else if (this.tic < 30)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1603, 644, 76, 135, -(1/2 * 76 * szx - 2.5), -(1/2 * 135 * szx - 1), 76 * szx, 135 * szx);
                            XXX.restore();
                        }
                        else
                        {
                            this.tic = 0;

                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1603, 644, 76, 135, -(1/2 * 76 * szx - 2.5), -(1/2 * 135 * szx - 1), 76 * szx, 135 * szx);
                            XXX.restore();
                        }


                        //if (zKey)
                        //{
                        //    zKey = false;
                        //    this.tic += ticRate;
                        //    console.log(this.tic);
                        //}
                        this.tic += ticRate;
                    }
                    else
                    {
                        this.tic = 0;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(tomb, 1746, 570, 76, 135, -(1/2 * 76 * szx + 0), -(1/2 * 135 * szx + 0), 76 * szx, 135 * szx);
                        XXX.restore();
                    }
                }
            }
            else if (this.temporary == 1) //no coffin empty (interactive)
            {
                if (this.phase == 0)
                {
                    //don't draw anything
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1734, 249, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();
                }
                else if (this.phase >= 2)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();
                }
            }
            else if (this.temporary == 2) //with coffin (interactive)
            {
                if (this.phase == 0)
                {
                    //don't draw anything
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1734, 249, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();
                }
                else if (this.phase == 2)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1628, 221, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                    XXX.restore();
                }
                else if (this.phase == 3)
                {
                    if (this.lit == true)
                    {
                        if (this.tic < 10)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                            XXX.restore();

                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1555, 111, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                        }
                        else if (this.tic < 20)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                            XXX.restore();

                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1555, 0, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                        }
                        else if (this.tic < 30)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                            XXX.restore();

                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1636, 0, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                        }
                        else
                        {
                            this.tic = 0;

                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                            XXX.restore();

                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1636, 0, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                        }


                        this.tic += ticRate;
                    }
                    else
                    {
                        this.tic = 0;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                        XXX.restore();

                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(tomb, 1632, 107, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                        XXX.restore();
                    }
                }
            }
            else if (this.temporary == 3) //with coffin empty (interactive)
            {
                if (this.phase == 0)
                {
                    //don't draw anything
                }
                else if (this.phase == 1)
                {

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1734, 249, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();
                }
                else if (this.phase == 2)
                {

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();


                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1628, 221, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                    XXX.restore();
                }
                else if (this.phase >= 3)
                {
                    this.tic = 0;

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1567, 237, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                    XXX.restore();
                }
            }
            else if (this.temporary == 4) //coffin only (interactive)
            {
                if (this.phase == 0)
                {

                    this.phase = 1;
                }
                else if (this.phase == 1)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1628, 221, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                    XXX.restore();
                }
                else if (this.phase == 2)
                {
                    if (this.lit == true)
                    {
                        if (this.tic < 10)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1555, 111, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                        }
                        else if (this.tic < 20)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1555, 0, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                        }
                        else if (this.tic < 30)
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1636, 0, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                        }
                        else
                        {
                            XXX.save();
                            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                            XXX.rotate(this.rotation);
                            XXX.drawImage(tomb, 1636, 0, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                            XXX.restore();
                            this.tic = 0;
                        }


                        this.tic += ticRate;
                    }
                    else
                    {
                        this.tic = 0;

                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(tomb, 1632, 107, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                        XXX.restore();
                    }
                }
            }
            else if (this.temporary == 5) //coffin only empty (interactive)
            {
                this.interactionRange = 120;
                var szz = 1.25;
                if (this.phase == 0)
                {

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1628, 221, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                    XXX.restore();
                }
                else if (this.phase == 1)
                {

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(tomb, 1567, 237, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                    XXX.restore();
                }
            }
            else if (this.temporary == 6) //dug up grave (decorative)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                XXX.restore();
            }
            else if (this.temporary == 7) //open coffin (decorative)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1567, 237, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                XXX.restore();
            }
            else if (this.temporary == 8) //dug up empty coffin (decorative)
            {

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1735, 393, 89, 131, -(1/2 * 89 * szx), -(1/2 * 131 * szx), 89 * szx, 131 * szx);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(tomb, 1567, 237, 74, 115, -(1/2 * 74 * szz), -(1/2 * 115 * szz), 74 * szz, 115 * szz);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 33;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.temporary == 0)
                {
                    if (this.phase == 2 && this.lit == false)
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].type == "fireStarter")
                            {
                                this.lit = true;
                                break;
                            }
                        }
                        if (this.lit == true)
                        {
                            dClick = true;
                        }
                    }
                }
                else if (this.temporary == 1)
                {
                    dClick = true;
                }
                else if (this.temporary == 2)
                {
                    if (this.phase == 2)
                    {
                        this.phase = 3;
                    }
                    else if (this.phase == 3)
                    {
                        var frstr = false;
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].type == "fireStarter")
                            {
                                this.lit = true;
                                frstr = true;
                                break;
                            }
                        }
                        if (frstr == false && this.lit == false)
                        {
                            this.phase = 2;
                        }
                        else if (this.lit == true)
                        {
                            dClick = true;
                        }
                    }
                }
                else if (this.temporary == 3)
                {
                    if (this.phase == 2)
                    {
                        this.phase = 3;
                    }
                    else if (this.phase == 3)
                    {
                        this.phase = 2;
                    }
                }
                else if (this.temporary == 4)
                {
                    if (this.phase == 1)
                    {
                        this.phase = 2;
                    }
                    else if (this.phase == 2)
                    {
                        var frstr = false;
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].type == "fireStarter")
                            {
                                this.lit = true;
                                frstr = true;
                                break;
                            }
                        }
                        if (frstr == false && this.lit == false)
                        {
                            this.phase = 1;
                        }
                        else if (this.lit == true)
                        {
                            dClick = true;
                        }
                    }
                }
                else if (this.temporary == 5)
                {
                    if (this.phase == 0)
                    {
                        this.phase = 1;
                    }
                    else if (this.phase == 1)
                    {
                        this.phase = 0;
                    }
                }
                else
                {
                    dClick = true;
                }

            }

            if (this.temporary >= 0 && this.temporary < 4 && this.phase == 0 || this.temporary >= 0 && this.temporary < 4 && this.phase == 1) //if this tree is in its cut down phase.
            {
                //console.log(player.finalAttackStage);
                if (player.weaponEquipped == "spade" && player.cutcut == true && this.playerer < 170)
                {
                    if (this.owned != "nirwaden" || player.inquisitionRank == "none")
                    {
                        if (this.owned != false)
                        {
                            if (player.noticed == true)
                            {
                                this.changeFactionRelation(-8);
                            }
                        }
                    }
                    var distFromCutCut = Math.sqrt((this.X - X)*(this.X - X) + (this.Y - Y)*(this.Y - Y));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 107)
                    {
                        this.treeHealth -= 1;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treeHealth = 5;
                        if (this.phase == 0)
                        {
                            this.phase = 1;
                        }
                        else if (this.phase <= 1)
                        {
                            this.phase = 2;
                        }
                    }
                }
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (this.dst(ArtificialIntelligenceAccess[i].X, ArtificialIntelligenceAccess[i].Y) < (this.radius * 9/10))
                    {
                        ArtificialIntelligenceAccess[i].burningTime = new Date().getTime();
                    }
                }
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.125;
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }

            if (this.lit == true)
            {
                if (this.information[1] != false)
                {
                    quests.flamingBones.push(this.information[1]);
                }
                //produce light
                if (timeOfDay != "Day")
                {
                    lights.push({X:this.X, Y: this.Y, size: 190, extraStops: true, GRD: 0.15, Alpha: 0.65, showMe: false});
                }
                //produce heat
                if (this.playerer <= 176)
                {
                    player.warmth += Math.max(0, (0.90 - (player.heatResistance / 200)));
                }
            }
        }
        else if (this.type == "selvaTree")
        {
            //TRAITS
            this.tree = true;
            this.solid = true;
            this.interactionRange = 1;
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.tic = 0;
                this.tac = 0;
            }

            if (this.xiumGrowth > 0)
            {
                this.xiumGrowth += 0.2;
            }
            if (this.xiumGrowth >= 600 && timeOfDay != "Night" || this.temporary == 3 && timeOfDay != "Night")
            {
                this.xiumGrowth -= 400;
                for (var ixium = 0; ixium < 12; ixium++)
                {
                    scenicList.push(new Scenery("xiumSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                }
            }

            //DRAWSELF
            if (this.xiumGrowth >= 200 || this.temporary == 3)
            {
                if (this.playerer < 328)
                {
                    XXX.globalAlpha = 0.5;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 251, 258, 111, 107, -(1/2 * 111 * 1), -(1/2 * 107 * 1), 111 * 1, 107 * 1);
                    XXX.restore();

                    this.zIndex = 6;
                    XXX.globalAlpha = 0.8;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 45, 1369, 716, 762, -(1/2 * 716 * 1), -(1/2 * 762 * 1), 716 * 1, 762 * 1);
                    XXX.restore();

                    XXX.globalAlpha = 0.35;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 31, 429, 768, 938, -(1/2 * 768 * 1), -(1/2 * 938 * 1), 768 * 1, 938 * 1);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 31, 429, 768, 938, -(1/2 * 768 * 1), -(1/2 * 938 * 1), 768 * 1, 938 * 1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 0)
            {
                if (this.playerer < 328)
                {
                    XXX.globalAlpha = 0.5;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 251, 258, 111, 107, -(1/2 * 111 * 1), -(1/2 * 107 * 1), 111 * 1, 107 * 1);
                    XXX.restore();

                    this.zIndex = 6;
                    XXX.globalAlpha = 0.8;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1204, 1289, 716, 762, -(1/2 * 716 * 1) + 4, -(1/2 * 762 * 1) -28, 716 * 1, 762 * 1);
                    XXX.restore();

                    XXX.globalAlpha = 0.4;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1211, 394, 755, 871, -(1/2 * 755 * 1), -(1/2 * 871 * 1), 755 * 1, 871 * 1);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1211, 394, 755, 871, -(1/2 * 755 * 1), -(1/2 * 871 * 1), 755 * 1, 871 * 1);
                    XXX.restore();
                }
            }
            else if (this.temporary == 1) //torper nest
            {
                this.minionsMAX = 11;
                this.summonRate = 23;
                this.minionCount();
                if (this.minions < this.minionsMAX)
                {
                    if (new Date().getTime() - this.summonTime > this.summonRate * 1000)
                    {
                        this.summonTime = new Date().getTime();
                        var random = Math.floor(Math.random() * 4);
                        var randAlpha = Math.floor(Math.random() * 6);
                        var alphaPicks = [false, false, false, true, true, true];

                        if (random == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Torper", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X, this.Y], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600]]}));
                        }
                        else if (random == 1)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Torper", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X, this.Y]]}));
                        }
                        else if (random == 2)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Torper", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X, this.Y], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X, this.Y], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200]]}));
                        }
                        else if (random == 3)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Torper", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y], [this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y], [this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y]]}));
                        }
                    }
                }

                if (this.playerer < 328)
                {
                    XXX.globalAlpha = 0.5;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 251, 258, 111, 107, -(1/2 * 111 * 1), -(1/2 * 107 * 1), 111 * 1, 107 * 1);
                    XXX.restore();

                    this.zIndex = 6;
                    XXX.globalAlpha = 0.9;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 2029, 484, 716, 762, -(1/2 * 716 * 1) + 4, -(1/2 * 762 * 1) -28, 716 * 1, 762 * 1);
                    XXX.restore();

                    //XXX.globalAlpha = 0.75;
                    //XXX.save();
                    //XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.rotate(this.rotation);
                    //XXX.drawImage(humpa, 1211, 394, 755, 871, -(1/2 * 755 * 1), -(1/2 * 871 * 1), 755 * 1, 871 * 1);
                    //XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 2029, 484, 716, 762, -(1/2 * 716 * 1) + 4, -(1/2 * 762 * 1) -28, 716 * 1, 762 * 1);
                    XXX.restore();

                    //XXX.save();
                    //XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    //XXX.rotate(this.rotation);
                    //XXX.drawImage(humpa, 1211, 394, 755, 871, -(1/2 * 755 * 1), -(1/2 * 871 * 1), 755 * 1, 871 * 1);
                    //XXX.restore();
                }
            }
            else if (this.temporary == 2) //borea perch
            {
                if (this.playerer < 328)
                {
                    this.tic += 1;
                    if (this.tic > 70)
                    {
                        for (var boreeat = 0; boreeat < 1 + Math.round(Math.random() * 3); boreeat++)
                        {
                            if (boreeat == 0 || Math.round(Math.random()))
                            {
                                var boreat = new Unit(this.X + spacer(266), this.Y + spacer(266), "Borea", Math.round(Math.random()), "Borea Suprise");
                                ArtificialIntelligenceAccess.push(boreat);
                            }
                        }
                        this.temporary = 0;
                    }
                    XXX.globalAlpha = 0.5;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 251, 258, 111, 107, -(1/2 * 111 * 1), -(1/2 * 107 * 1), 111 * 1, 107 * 1);
                    XXX.restore();

                    this.zIndex = 6;
                    XXX.globalAlpha = 0.8;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 2033, 1288, 716, 762, -(1/2 * 716 * 1) + 2, -(1/2 * 762 * 1) -37, 716 * 1, 762 * 1);
                    XXX.restore();

                    XXX.globalAlpha = 0.4;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1211, 394, 755, 871, -(1/2 * 755 * 1), -(1/2 * 871 * 1), 755 * 1, 871 * 1);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1211, 394, 755, 871, -(1/2 * 755 * 1), -(1/2 * 871 * 1), 755 * 1, 871 * 1);
                    XXX.restore();
                }
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 41;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "greatPineTree")
        {
            //TRAITS
            this.tree = true;
            this.solid = true;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.size = Math.max(5, this.temporary);
                this.treeHealth = Math.ceil(120 * (this.size /4.5));
            }
            this.interactionRange = 120 * (this.size /4.5);

            //DRAWSELF
            if (this.information == "snowy")
            {
                if (this.treePhase == 0)
                {
                    if (this.playerer < (130 * (this.size /4.5)))
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * this.size), -(1/2 * 26 * this.size), 28 * this.size, 28 * this.size);
                        XXX.restore();

                        XXX.globalAlpha = 0.75;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 19, 315, 82, 79, -(1/2 * 82 * this.size), -(1/2 * 79 * this.size), 82 * this.size, 79 * this.size);
                        XXX.restore();
                        XXX.globalAlpha = 1;
                    }
                    else
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 19, 315, 82, 79, -(1/2 * 82 * this.size), -(1/2 * 79 * this.size), 82 * this.size, 79 * this.size);
                        XXX.restore();
                    }
                }
                else if (this.treePhase == 1)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 1508, 191, 355, 95, -(1/2 * 355 * this.size), -(1/2 * 95 * this.size), 355 * this.size, 95 * this.size);
                    XXX.restore();
                }
                else if (this.treePhase == 2)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * this.size), -(1/2 * 26 * this.size), 28 * this.size, 28 * this.size);
                    XXX.restore();
                }
            }
            else
            {
                if (this.treePhase == 0)
                {
                    if (this.playerer < (130 * (this.size /4.5)))
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * this.size), -(1/2 * 28 * this.size), 28 * this.size, 28 * this.size);
                        XXX.restore();

                        XXX.globalAlpha = 0.75;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3783, 317, 79, 71, -(1/2 * 79 * this.size), -(1/2 * 71 * this.size), 79 * this.size, 71 * this.size);
                        XXX.restore();
                        XXX.globalAlpha = 1;
                    }
                    else
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3783, 317, 79, 71, -(1/2 * 79 * this.size), -(1/2 * 71 * this.size), 79 * this.size, 71 * this.size);
                        XXX.restore();
                    }
                }
                else if (this.treePhase == 1)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 1, 1597, 165, 82, -(1/2 * 25 * this.size), -(1/2 * 80 * this.size), 165 * this.size, 82 * this.size);
                    XXX.restore();
                }
                else if (this.treePhase == 2)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * this.size), -(1/2 * 26 * this.size), 28 * this.size, 28 * this.size);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 30 * (this.size /4.5);

            //INTERACTION
            if (this.activate == true)
            {
                if (this.treePhase == 1)
                {
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "wood")
                        {
                            Inventory[i][1] += Math.round(60 * (this.size / 4.5));
                            this.treePhase = 2;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("wood", false, false), Math.round(60 * (this.size / 4.5))]);
                        this.treePhase = 2;
                    }
                }
                this.activate = false;
            }

            if (this.treePhase == 0) //if this tree is in its cut down phase.
            {
                //console.log(player.finalAttackStage);
                if (player.weaponEquipped == "vardanianAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "vardanianAxeDual" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.45;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "timberAxe" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "vardanianBattleAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "freydicWarAxe" && player.cutcut == true  && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "dualVardanianBattleAxe" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 0.35;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "chainsaw" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 20;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
            }
        }
        else if (this.type == "pineTree")
        {
            //TRAITS
            this.tree = true;
            this.solid = true;
            this.interactionRange = 120;

            //DRAWSELF
            if (this.information == "snowy")
            {
                if (this.treePhase == 0)
                {
                    if (this.playerer < 130)
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * 4.5), -(1/2 * 26 * 4.5), 28 * 4.5, 28 * 4.5);
                        XXX.restore();

                        XXX.globalAlpha = 0.9;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 19, 315, 82, 79, -(1/2 * 82 * 4.5), -(1/2 * 79 * 4.5), 82 * 4.5, 79 * 4.5);
                        XXX.restore();
                        XXX.globalAlpha = 1;
                    }
                    else
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(folw, 19, 315, 82, 79, -(1/2 * 82 * 4.5), -(1/2 * 79 * 4.5), 82 * 4.5, 79 * 4.5);
                        XXX.restore();
                    }
                }
                else if (this.treePhase == 1)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(folw, 1508, 191, 355, 95, -(1/2 * 355 * 4.5), -(1/2 * 95 * 4.5), 355 * 4.5, 95 * 4.5);
                    XXX.restore();
                }
                else if (this.treePhase == 2)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * 4.5), -(1/2 * 26 * 4.5), 28 * 4.5, 28 * 4.5);
                    XXX.restore();
                }
            }
            else
            {
                if (this.treePhase == 0)
                {
                    if (this.playerer < 130)
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * 4.5), -(1/2 * 28 * 4.5), 28 * 4.5, 28 * 4.5);
                        XXX.restore();

                        XXX.globalAlpha = 0.9;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3783, 317, 79, 71, -(1/2 * 79 * 4.5), -(1/2 * 71 * 4.5), 79 * 4.5, 71 * 4.5);
                        XXX.restore();
                        XXX.globalAlpha = 1;
                    }
                    else
                    {
                        this.zIndex = 6;
                        XXX.save();
                        XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                        XXX.rotate(this.rotation);
                        XXX.drawImage(verse, 3783, 317, 79, 71, -(1/2 * 79 * 4.5), -(1/2 * 71 * 4.5), 79 * 4.5, 71 * 4.5);
                        XXX.restore();
                    }
                }
                else if (this.treePhase == 1)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 1, 1597, 165, 82, -(1/2 * 25 * 4.5), -(1/2 * 80 * 4.5), 165 * 4.5, 82 * 4.5);
                    XXX.restore();
                }
                else if (this.treePhase == 2)
                {
                    this.zIndex = 1;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 172, 1593, 28, 28, -(1/2 * 28 * 4.5), -(1/2 * 26 * 4.5), 28 * 4.5, 28 * 4.5);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 30;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.treePhase == 1)
                {
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "wood")
                        {
                            Inventory[i][1] += 60;
                            this.treePhase = 2;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("wood", false, false), 60]);
                        this.treePhase = 2;
                    }
                }
                this.activate = false;
            }

            if (this.treePhase == 0) //if this tree is in its cut down phase.
            {
                //console.log(player.finalAttackStage);
                if (player.weaponEquipped == "vardanianAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "vardanianAxeDual" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.45;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "timberAxe" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "vardanianBattleAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "freydicWarAxe" && player.cutcut == true  && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "dualVardanianBattleAxe" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 0.35;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "chainsaw" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 20;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
            }
        }
        else if (this.type == "acaciaTree")
        {
            this.tree = true;
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.size = this.temporary;
                this.treeHealth = 125 * this.size;
            }

            //TRAITS
            this.solid = true;
            this.interactionRange = 115 * this.size;

            //DRAWSELF
            if (this.treePhase == 0)
            {
                if (this.playerer < 134 * this.size)
                {
                    XXX.globalAlpha = 0.75;
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 1157, 40, 337, 335, -(1/2 * 337 * 1.1 * this.size), -(1/2 * 335 * 1.1 * this.size), 337 * 1.1 * this.size, 335 * 1.1 * this.size);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 1131, 408, 364, 370, -(1/2 * 364 * 1.1 * this.size) + 5, -(1/2 * 370 * 1.1 * this.size), 364 * 1.1 * this.size, 370 * 1.1 * this.size);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 1157, 40, 337, 335, -(1/2 * 337 * 1.1 * this.size), -(1/2 * 335 * 1.1 * this.size), 337 * 1.1 * this.size, 335 * 1.1 * this.size);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 1131, 408, 364, 370, -(1/2 * 364 * 1.1 * this.size) + 5, -(1/2 * 370 * 1.1 * this.size), 364 * 1.1 * this.size, 370 * 1.1 * this.size);
                    XXX.restore();
                }
            }
            else if (this.treePhase == 1)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 1507, 432, 489, 516, -(1/2 * 489 * 1 * this.size) + 106, -(1/2 * 516 * 1 * this.size) - 165, 489 * 1 * this.size, 516 * 1 * this.size);
                XXX.restore();
            }
            else if (this.treePhase == 2)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 1112, 815, 74, 72, -(1/2 * 74 * 1 * this.size), -(1/2 * 72 * 1 * this.size), 74 * 1 * this.size, 72 * 1 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 29 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.treePhase == 1)
                {
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "acaciaWood")
                        {
                            Inventory[i][1] += Math.round(30 * this.size);
                            this.treePhase = 2;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("acaciaWood", false, false), Math.round(30 * this.size)]);
                        this.treePhase = 2;
                    }
                }
                this.activate = false;
            }

            if (this.treePhase == 0) //if this tree is in its cut down phase.
            {
                //console.log(player.finalAttackStage);
                if (player.weaponEquipped == "vardanianAxe" && player.cutcut == true && this.playerer < 130 * this.size || player.weaponEquipped == "vardanianAxeDual" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.45;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "timberAxe" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "vardanianBattleAxe" && player.cutcut == true && this.playerer < 130 * this.size || player.weaponEquipped == "freydicWarAxe" && player.cutcut == true  && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "dualVardanianBattleAxe" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 0.35;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "chainsaw" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 20;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
            }
        }
        else if (this.type == "ashaiTree")
        {
            this.tree = true;
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.size = this.temporary;
                this.treeHealth = 98 * this.size;
            }

            //TRAITS
            this.solid = true;
            this.interactionRange = 100 * this.size;

            //DRAWSELF
            if (this.treePhase == 0)
            {
                if (this.playerer < 89)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(dmil, 11, 698, 33, 29, -(1/2 * 33 * 2 * this.size), -(1/2 * 29 * 2 * this.size), 33 * 2 * this.size, 29 * 2 * this.size);
                    XXX.restore();

                    XXX.globalAlpha = 0.8;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(dmil, 15, 522, 99, 108, -(1/2 * 99 * 2 * this.size), -(1/2 * 108 * 2 * this.size), 99 * 2 * this.size, 108 * 2 * this.size);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(dmil, 15, 522, 99, 108, -(1/2 * 99 * 2 * this.size), -(1/2 * 108 * 2 * this.size), 99 * 2 * this.size, 108 * 2 * this.size);
                    XXX.restore();
                }
            }
            else if (this.treePhase == 1)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dmil, 129, 508, 194, 202, -(1/2 * 194 * 2 * this.size - 53 * 2 * this.size), -(1/2 * 202 * 2 * this.size + 67 * 2 * this.size), 194 * 2 * this.size, 202 * 2 * this.size);
                XXX.restore();
            }
            else if (this.treePhase == 2)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(dmil, 11, 698, 33, 29, -(1/2 * 33 * 2 * this.size), -(1/2 * 29 * 2 * this.size), 33 * 2 * this.size, 29 * 2 * this.size);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 18 * this.size;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.treePhase == 1)
                {
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "ashaiWood")
                        {
                            Inventory[i][1] += Math.round(46 * this.size);
                            this.treePhase = 2;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("ashaiWood", false, false), Math.round(46 * this.size)]);
                        this.treePhase = 2;
                    }
                }
                this.activate = false;
            }

            if (this.treePhase == 0) //if this tree is in its cut down phase.
            {
                //console.log(player.finalAttackStage);
                if (player.weaponEquipped == "vardanianAxe" && player.cutcut == true && this.playerer < 130 * this.size || player.weaponEquipped == "vardanianAxeDual" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.45;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "timberAxe" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "vardanianBattleAxe" && player.cutcut == true && this.playerer < 130 * this.size || player.weaponEquipped == "freydicWarAxe" && player.cutcut == true  && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "dualVardanianBattleAxe" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 0.35;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "chainsaw" && player.cutcut == true && this.playerer < 130 * this.size)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 20;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
            }
        }
        else if (this.type == "yeolTree")
        {
            //TRAITS
            this.tree = true;
            this.solid = true;
            this.interactionRange = 100;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.treeHealth = 90;

                //DROPS NUT PODS FROM THE TREE
                if (this.treePhase == 0 && currentSeason != "Frost") //The nut only falls from the tree when it is not the season frost
                {
                    if (currentSeason == "Bounty") //twice as many yeol nuts fall during the season called Bounty
                    {
                        //Extra Seed Drop
                        if (Math.floor(Math.random() * 3) == 2)
                        {
                            if (Math.round(Math.random()) == 0)
                            {
                                for (var ii = 0; ii < 2; ii++)
                                {
                                    var podX = this.X + (Math.random() * 130) - 65;
                                    var podY = this.Y + (Math.random() * 130) - 65;
                                    var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                                    if (podDist > 30)
                                    {
                                        scenicList.push(new Scenery("item", podX, podY, 0, false, ["yeolPod", 1, 0]));
                                    }
                                }
                            }
                            else
                            {
                                var podX = this.X + (Math.random() * 130) - 65;
                                var podY = this.Y + (Math.random() * 130) - 65;
                                var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                                if (podDist > 30)
                                {
                                    scenicList.push(new Scenery("item", podX, podY, 0, false, ["yeolPod", 1, 0]));
                                }
                            }
                        }
                    }
                    //Seed Drop
                    if (Math.floor(Math.random() * 3) == 2)
                    {
                        if (Math.round(Math.random()) == 0)
                        {
                            for (var ii = 0; ii < 2; ii++)
                            {
                                var podX = this.X + (Math.random() * 130) - 65;
                                var podY = this.Y + (Math.random() * 130) - 65;
                                var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                                if (podDist > 30)
                                {
                                    scenicList.push(new Scenery("item", podX, podY, 0, false, ["yeolPod", 1, 0]));
                                }
                            }
                        }
                        else
                        {
                            var podX = this.X + (Math.random() * 130) - 65;
                            var podY = this.Y + (Math.random() * 130) - 65;
                            var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                            if (podDist > 30)
                            {
                                scenicList.push(new Scenery("item", podX, podY, 0, false, ["yeolPod", 1, 0]));
                            }
                        }
                    }
                }
            }

            console.log(this.treeHealth + " treeHealth");
            //DRAWSELF
            if (this.treePhase == 0)
            {
                if (this.playerer < 100)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mufmuf, 393, 68, 18, 15, -(1/2 * 18 * 4.5), -(1/2 * 15 * 4.5), 18 * 4.5, 15 * 4.5);
                    XXX.restore();

                    XXX.globalAlpha = 0.9;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mufmuf, 380, 7, 58, 54, -(1/2 * 58 * 4.5), -(1/2 * 54 * 4.5), 58 * 4.5, 54 * 4.5);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mufmuf, 380, 7, 58, 54, -(1/2 * 58 * 4.5), -(1/2 * 54 * 4.5), 58 * 4.5, 54 * 4.5);
                    XXX.restore();
                }
            }
            else if (this.treePhase == 1)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 393, 68, 18, 15, -(1/2 * 18 * 4.5), -(1/2 * 15 * 4.5), 18 * 4.5, 15 * 4.5);
                XXX.restore();

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 362, 97, 100, 56, -(1/2 * 200 * 4.5), -(1/2 * 56 * 4.5), 100 * 4.5, 56 * 4.5);
                XXX.restore();
            }
            else if (this.treePhase == 2)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 393, 68, 18, 15, -(1/2 * 18 * 4.5), -(1/2 * 15 * 4.5), 18 * 4.5, 15 * 4.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 25;

            //INTERACTION
            if (this.activate == true)
            {
                if (this.treePhase == 1)
                {
                    var hits = 0;
                    for (var i = 0; i < Inventory.length; i ++)
                    {
                        if (Inventory[i][0].type == "yeolWood")
                        {
                            Inventory[i][1] += 38;
                            this.treePhase = 2;
                            break;
                        }
                        else
                        {
                            hits += 1;
                        }
                    }
                    if (hits == Inventory.length)
                    {
                        Inventory.push([new Item("yeolWood", false, false), 38]);
                        this.treePhase = 2;
                    }
                }
                this.activate = false;
            }

            if (this.treePhase == 0) //if this tree is in its cut down phase.
            {
                //console.log(player.finalAttackStage);
                if (player.weaponEquipped == "vardanianAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "vardanianAxeDual" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.45;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "timberAxe" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "vardanianBattleAxe" && player.cutcut == true && this.playerer < 130 || player.weaponEquipped == "freydicWarAxe" && player.cutcut == true  && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 7 + 35)
                    {
                        this.treeHealth -= 0.2;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "dualVardanianBattleAxe" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 0.35;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
                else if (player.weaponEquipped == "chainsaw" && player.cutcut == true && this.playerer < 130)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.range * 10 + 35)
                    {
                        this.treeHealth -= 20;
                    }

                    if (this.treeHealth <= 0)
                    {
                        this.treePhase = 1
                    }
                }
            }
        }
        else if (this.type == "sonjaTree")
        {
            //TRAITS
            this.tree = true;
            this.solid = true;
            this.interactionRange = 100;

            if (this.runOneTime == true)
            {
                this.runOneTime = false;

                if (this.xiumGrowth <= 0)
                {
                    //DROPS FRUIT FROM THE TREE
                    if (currentSeason == "Frost" && this.information != "garden" || currentSeason == "Bright"&& this.information != "garden") //The nut only falls from the tree when it is not the season frost
                    {
                        if (currentSeason == "Bright") //twice as many yeol nuts fall during the season called Bounty
                        {
                            //Extra fruit Drop
                            if (Math.floor(Math.random() * 3) == 2)
                            {
                                if (Math.floor(Math.random() * 3) == 2)
                                {
                                    for (var ii = 0; ii < 2; ii++)
                                    {
                                        var podX = this.X + (Math.random() * 320) - 160;
                                        var podY = this.Y + (Math.random() * 320) - 160;
                                        var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                                        if (podDist > 50)
                                        {
                                            scenicList.push(new Scenery("item", podX, podY, 0, false, ["sonja", 1, 0]));
                                        }
                                    }
                                }
                                else
                                {
                                    var podX = this.X + (Math.random() * 320) - 160;
                                    var podY = this.Y + (Math.random() * 320) - 160;
                                    var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                                    if (podDist > 50)
                                    {
                                        scenicList.push(new Scenery("item", podX, podY, 0, false, ["sonja", 1, 0]));
                                    }
                                }
                            }
                        }
                        //fruit Drop
                        if (Math.floor(Math.random() * 4) == 2)
                        {
                            if (Math.floor(Math.random() * 4) == 2)
                            {
                                for (var ii = 0; ii < 2; ii++)
                                {
                                    var podX = this.X + (Math.random() * 320) - 160;
                                    var podY = this.Y + (Math.random() * 320) - 160;
                                    var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                                    if (podDist > 50)
                                    {
                                        scenicList.push(new Scenery("item", podX, podY, 0, false, ["sonja", 1, 0]));
                                    }
                                }
                            }
                            else
                            {
                                var podX = this.X + (Math.random() * 320) - 160;
                                var podY = this.Y + (Math.random() * 320) - 160;
                                var podDist = Math.sqrt((this.X - podX)*(this.X - podX) + (this.Y - podY)*(this.Y - podY));
                                if (podDist > 50)
                                {
                                    scenicList.push(new Scenery("item", podX, podY, 0, false, ["sonja", 1, 0]));
                                }
                            }
                        }
                    }
                }
            }

            if (this.xiumGrowth > 0)
            {
                this.xiumGrowth += 0.2;
            }
            if (this.xiumGrowth >= 500 && timeOfDay != "Night")
            {
                this.xiumGrowth -= 340;
                for (var ixium = 0; ixium < 5; ixium++)
                {
                    scenicList.push(new Scenery("xiumSpores", this.X, this.Y, Math.random() * 2 * Math.PI, false));
                }
            }

            //DRAWSELF
            if (this.playerer < 160)
            {
                if (this.xiumGrowth >= 140)
                {
                    this.zIndex = 6;
                    XXX.globalAlpha = 0.9;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 106, 2200, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5) - 8, 279 * 1.5, 242 * 1.5);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 421, 2180, 278, 240, -(1/2 * 278 * 1.5), -(1/2 * 240 * 1.5) - 8, 278 * 1.5, 240 * 1.5);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else if (currentSeason == "Frost" || currentSeason == "Bright")
                {
                    this.zIndex = 6;
                    XXX.globalAlpha = 0.9;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1802, 26, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 2128, 24, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
                else
                {
                    this.zIndex = 6;
                    XXX.globalAlpha = 0.9;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1482, 26, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();

                    XXX.globalAlpha = 0.7;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 2128, 24, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();
                    XXX.globalAlpha = 1;
                }
            }
            else
            {
                if (this.xiumGrowth >= 140)
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 106, 2200, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5) - 8, 279 * 1.5, 242 * 1.5);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(fect, 421, 2180, 278, 240, -(1/2 * 278 * 1.5), -(1/2 * 240 * 1.5) - 8, 278 * 1.5, 240 * 1.5);
                    XXX.restore();
                }
                else if (currentSeason == "Frost" || currentSeason == "Bright")
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1802, 26, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 2128, 24, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();
                }
                else
                {
                    this.zIndex = 6;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 1482, 26, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();

                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(humpa, 2128, 24, 279, 242, -(1/2 * 279 * 1.5), -(1/2 * 242 * 1.5), 279 * 1.5, 242 * 1.5);
                    XXX.restore();
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 50;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }
        }
        else if (this.type == "algae")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 2;
            }

            //DRAWSELF
            if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 6, 212, 17, 15, -(1/2 * 17 * 1.75), -(1/2 * 15 * 1.75), 17 * 1.75, 15 * 1.75);
                XXX.restore();
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 1, 237, 17, 15, -(1/2 * 17 * 1.75), -(1/2 * 15 * 1.75), 17 * 1.75, 15 * 1.75);
                XXX.restore();
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 19, 226, 17, 15, -(1/2 * 17 * 1.75), -(1/2 * 15 * 1.75), 17 * 1.75, 15 * 1.75);
                XXX.restore();
            }
            else if (this.temporary == 4)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 49, 236, 17, 15, -(1/2 * 17 * 1.75), -(1/2 * 15 * 1.75), 17 * 1.75, 15 * 1.75);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(norc, 46, 213, 17, 19, -(1/2 * 17 * 1.75), -(1/2 * 19 * 1.75), 17 * 1.75, 19 * 1.75);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 5;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        scenicList.splice(scenicList.indexOf(this), 1);
                    }
                }
            }
        }
        else if (this.type == "stone")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 10;
                this.rockLoad = [];
                for (var looop = 0; looop < 80; looop++)
                {
                    this.rockLoad.push({type: "stone", quantity: 1});
                }
                for (var looop = 0; looop < 8; looop++)
                {
                    this.rockLoad.push({type: "stone", quantity: 2});
                }
                for (var looop = 0; looop < 6 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "coal", quantity: 1});
                }
                for (var looop = 0; looop < 4 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ironOre", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSilver", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawGold", quantity: 1});
                }
            }

            //DRAWSELF
            if (this.information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 956, 397, 49, 55, -(1/2 * 49 * this.owned), -(1/2 * 55 * this.owned), 49 * this.owned, 55 * this.owned);
                XXX.restore();
            }
            else if (this.information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 896, 398, 55, 41, -(1/2 * 55 * this.owned), -(1/2 * 41 * this.owned), 55 * this.owned, 41 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 864, 410, 31, 30, -(1/2 * 31 * this.owned * 1.5), -(1/2 * 30 * this.owned * 1.5), 31 * this.owned * 1.5, 30 * this.owned * 1.5);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 10;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "darkStone")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 13;
                this.rockLoad = [];
                for (var looop = 0; looop < 64; looop++)
                {
                    this.rockLoad.push({type: "darkStone", quantity: 1});
                }
                for (var looop = 0; looop < 8; looop++)
                {
                    this.rockLoad.push({type: "darkStone", quantity: 2});
                }
                for (var looop = 0; looop < 15 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "coal", quantity: 1});
                }
                for (var looop = 0; looop < 10 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ironOre", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ruby", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSilver", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawGold", quantity: 1});
                }
            }

            //DRAWSELF
            if (information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 780, 460, 45, 42, -(1/2 * 45 * this.owned), -(1/2 * 42 * this.owned), 45 * this.owned, 42 * this.owned);
                XXX.restore();
            }
            else if (information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 722, 461, 54, 42, -(1/2 * 54 * this.owned), -(1/2 * 42 * this.owned), 54 * this.owned, 42 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 691, 473, 25, 26, -(1/2 * 25 * this.owned * 1.5), -(1/2 * 26 * this.owned * 1.5), 25 * this.owned * 1.5, 26 * this.owned * 1.5);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 13;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "darkStoneOver")
        {
            this.zIndex = 4;
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 13;
                this.rockLoad = [];
                for (var looop = 0; looop < 64; looop++)
                {
                    this.rockLoad.push({type: "darkStone", quantity: 1});
                }
                for (var looop = 0; looop < 8; looop++)
                {
                    this.rockLoad.push({type: "darkStone", quantity: 2});
                }
                for (var looop = 0; looop < 15 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "coal", quantity: 1});
                }
                for (var looop = 0; looop < 10 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ironOre", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ruby", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSilver", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawGold", quantity: 1});
                }
            }

            //DRAWSELF
            if (information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 780, 460, 45, 42, -(1/2 * 45 * this.owned), -(1/2 * 42 * this.owned), 45 * this.owned, 42 * this.owned);
                XXX.restore();
            }
            else if (information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 722, 461, 54, 42, -(1/2 * 54 * this.owned), -(1/2 * 42 * this.owned), 54 * this.owned, 42 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 691, 473, 25, 26, -(1/2 * 25 * this.owned * 1.5), -(1/2 * 26 * this.owned * 1.5), 25 * this.owned * 1.5, 26 * this.owned * 1.5);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 13;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "alcaStone")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 11;
                this.rockLoad = [];
                for (var looop = 0; looop < 73; looop++)
                {
                    this.rockLoad.push({type: "alcaStone", quantity: 1});
                }
                for (var looop = 0; looop < 4; looop++)
                {
                    this.rockLoad.push({type: "alcaStone", quantity: 2});
                }
                for (var looop = 0; looop < 8 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "coal", quantity: 1});
                }
                for (var looop = 0; looop < 6 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ironOre", quantity: 1});
                }
                for (var looop = 0; looop < 17 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "copperOre", quantity: 1});
                }
                for (var looop = 0; looop < 2 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawGold", quantity: 1});
                }
            }

            //DRAWSELF
            if (this.information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 785, 518, 47, 44, -(1/2 * 47 * this.owned), -(1/2 * 44 * this.owned), 47 * this.owned, 44 * this.owned);
                XXX.restore();
            }
            else if (this.information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 725, 521, 54, 40, -(1/2 * 54 * this.owned), -(1/2 * 40 * this.owned), 54 * this.owned, 40 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 695, 531, 26, 29, -(1/2 * 26 * this.owned * 1.5), -(1/2 * 29 * this.owned * 1.5), 26 * this.owned * 1.5, 29 * this.owned * 1.5);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 11;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "ashStone")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 8;
                this.rockLoad = [];
                for (var looop = 0; looop < 90; looop++)
                {
                    this.rockLoad.push({type: "ashStone", quantity: 1});
                }
                for (var looop = 0; looop < 35 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "coal", quantity: 1});
                }
                for (var looop = 0; looop < 15 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "coal", quantity: 2});
                }
                for (var looop = 0; looop < 10 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ironOre", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "sapphire", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSilver", quantity: 1});
                }
            }

            //DRAWSELF
            if (information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 955, 457, 43, 46, -(1/2 * 43 * this.owned), -(1/2 * 46 * this.owned), 43 * this.owned, 46 * this.owned);
                XXX.restore();
            }
            else if (information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 894, 459, 54, 41, -(1/2 * 54 * this.owned), -(1/2 * 41 * this.owned), 54 * this.owned, 41 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 863, 470, 28, 28, -(1/2 * 28 * this.owned * 1.5), -(1/2 * 28 * this.owned * 1.5), 28 * this.owned * 1.5, 28 * this.owned * 1.5);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 8;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "brightStone")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 22;
                this.rockLoad = [];
                for (var looop = 0; looop < 90; looop++)
                {
                    this.rockLoad.push({type: "brightStone", quantity: 1});
                }
                for (var looop = 0; looop < 5; looop++)
                {
                    this.rockLoad.push({type: "brightStone", quantity: 2});
                }
                for (var looop = 0; looop < 2 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ironOre", quantity: 1});
                }
                for (var looop = 0; looop < 2 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSilver", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawGold", quantity: 1});
                }
            }

            //DRAWSELF
            if (this.information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1070, 458, 58, 44, -(1/2 * 58 * this.owned), -(1/2 * 44 * this.owned), 58 * this.owned, 44 * this.owned);
                XXX.restore();
            }
            else if (this.information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1129, 451, 51, 51, -(1/2 * 51 * this.owned), -(1/2 * 51 * this.owned), 51 * this.owned, 51 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1038, 469, 31, 32, -(1/2 * 31 * this.owned * 1.5), -(1/2 * 32 * this.owned * 1.5), 31 * this.owned * 1.5, 32 * this.owned * 1.5);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //radioactive
            if (player.radProof != true)
            {
                if (this.playerer < 105 * this.owned)
                {
                    player.radiation += 0.05;
                }
            }

            for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
            {
                if (ArtificialIntelligenceAccess[i].radProof != true)
                {
                    if (ArtificialIntelligenceAccess[i].DTU(this) < 105 * this.owned)
                    {
                        ArtificialIntelligenceAccess[i].radiation += 0.05;
                    }
                }
            }

            //light
            if (timeOfDay != "Day" || player.underground == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 98 * this.owned, extraStops: true, GRD: 0.19, Alpha: 0.7, showMe: false});
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 10;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "nechrovite")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 39;
                this.rockLoad = [];
                for (var looop = 0; looop < 97; looop++)
                {
                    this.rockLoad.push({type: "nechroviteOre", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "ruby", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSilver", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawGold", quantity: 1});
                }
            }

            //DRAWSELF
            if (information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1635, 390, 44, 53, -(1/2 * 44 * this.owned * 1.5), -(1/2 * 53 * this.owned * 1.5), 44 * this.owned * 1.5, 53 * this.owned * 1.5);
                XXX.restore();
            }
            else if (information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1686, 393, 75, 46, -(1/2 * 75 * this.owned), -(1/2 * 46 * this.owned), 75 * this.owned, 46 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1771, 391, 64, 57, -(1/2 * 64 * this.owned), -(1/2 * 57 * this.owned), 64 * this.owned, 57 * this.owned);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 39;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "jvostran")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //Establish Rock Load
            if (this.runOneTime == true)
            {
                this.runOneTime = false;
                this.health = 70;
                this.rockLoad = [];
                for (var looop = 0; looop < 76; looop++)
                {
                    this.rockLoad.push({type: "jvostranOre", quantity: 1});
                }
                for (var looop = 0; looop < 2 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "aquamarine", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "rawSilver", quantity: 1});
                }
                for (var looop = 0; looop < 1 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "sapphire", quantity: 1});
                }
                for (var looop = 0; looop < 20 + player.miningLuck; looop++)
                {
                    this.rockLoad.push({type: "turquoise", quantity: 1});
                }
            }

            //DRAWSELF
            if (information == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1424, 458, 35, 44, -(1/2 * 35 * this.owned * 1.5), -(1/2 * 44 * this.owned * 1.5), 35 * this.owned * 1.5, 44 * this.owned * 1.5);
                XXX.restore();
            }
            else if (information == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1471, 460, 73, 39, -(1/2 * 73 * this.owned), -(1/2 * 39 * this.owned), 73 * this.owned, 39 * this.owned);
                XXX.restore();
            }
            else
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(polypol, 1561, 454, 56, 55, -(1/2 * 56 * this.owned), -(1/2 * 55 * this.owned), 56 * this.owned, 55 * this.owned);
                XXX.restore();
            }


            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10 * this.owned;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }


            //console.log(player.finalAttackStage);
            if (player.weaponEquipped == "pickaxe" && player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                console.log(distFromCutCut);
                if (distFromCutCut <= player.weapon.range * 7 + 18)
                {
                    this.health -= 1;
                    if (this.health <= 0)
                    {
                        this.health = 70;
                        this.rockLoader(this.rockLoad);
                        this.owned -= 0.25;
                        if (this.owned <= 0)
                        {
                            scenicList.splice(scenicList.indexOf(this), 1);
                        }
                    }
                }
            }
        }
        else if (this.type == "killerTermiteMound")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            //DRAWSELF
            if (this.temporary == 0)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2546, 90, 178, 159, -(1/2 * 178 * 1.3), -(1/2 * 159 * 1.3), 178 * 1.3, 159 * 1.3);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 70;
            }
            else if (this.temporary == 1)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2536, 245, 178, 159, -(1/2 * 178 * 1.3), -(1/2 * 159 * 1.3), 178 * 1.3, 159 * 1.3);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 55;
            }
            else if (this.temporary == 2)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2541, 406, 178, 159, -(1/2 * 178 * 1.3), -(1/2 * 159 * 1.3), 178 * 1.3, 159 * 1.3);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 65;
            }
            else if (this.temporary == 3)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2544, 585, 178, 159, -(1/2 * 178 * 1.3), -(1/2 * 159 * 1.3), 178 * 1.3, 159 * 1.3);
                XXX.restore();

                //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
                this.radius = 60;
            }



            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }

            //HIVE
            if (this.information == true)
            {
                if (this.temporary == 0)
                {
                    this.minionsMAX = 12;
                    this.summonRate = 8;
                }
                else if (this.temporary == 1 || this.temporary == 3)
                {
                    this.minionsMAX = 6;
                    this.summonRate = 11;
                }
                else
                {
                    this.minionsMAX = 9;
                    this.summonRate = 9;
                }

                this.minionCount();
                if (this.minions < this.minionsMAX)
                {
                    if (new Date().getTime() - this.summonTime > this.summonRate * 1000)
                    {
                        this.summonTime = new Date().getTime();
                        var random = Math.floor(Math.random() * 4);

                        if (random == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "KillerTermite", true, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X, this.Y], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600]]}));
                        }
                        else if (random == 1)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "KillerTermite", true, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X, this.Y]]}));
                        }
                        else if (random == 2)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "KillerTermite", true, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X, this.Y], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X, this.Y], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200]]}));
                        }
                        else if (random == 3)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "KillerTermite", true, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y], [this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y], [this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y]]}));
                        }
                    }
                }
            }
        }
        else if (this.type == "brainFlyHive")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 3;
            }
            //console.log(player.cutcut);
            //DRAWSELF
            if (this.phase == 0)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(poly, 496, 254, 43, 39, -(1/2 * 43), -(1/2 * 39), 43, 49);
                XXX.restore();
            }
            else if (this.phase == "dead")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(poly, 491, 293, 43, 39, -(1/2 * 43), -(1/2 * 39), 43, 49);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }

            //HIVE
            this.minionCount();
            if (this.minions < this.minionsMAX && this.phase != "dead")
            {
                if (new Date().getTime() - this.summonTime > this.summonRate * 1000)
                {
                    this.summonTime = new Date().getTime();
                    var random = Math.floor(Math.random() * 4);
                    if (random == 0)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X, this.Y], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)]]}));
                    }
                    else if (random == 1)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X, this.Y], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)]]}));
                    }
                    else if (random == 2)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - spacer(300), this.Y - spacer(300)], [this.X, this.Y], [this.X - spacer(300), this.Y - spacer(300)], [this.X - spacer(300), this.Y - spacer(300)], [this.X - spacer(300), this.Y - spacer(300)], [this.X - spacer(300), this.Y - spacer(300)]]}));
                    }
                    else if (random == 3)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - spacer(250), this.Y - spacer(250)], [this.X - spacer(250), this.Y - spacer(250)], [this.X - spacer(250), this.Y - spacer(250)], [this.X - spacer(250), this.Y - spacer(250)], [this.X, this.Y], [this.X - spacer(250), this.Y - spacer(250)]]}));
                    }
                }
            }
            //DAMAGE AND DEATH SENSING
            if (this.phase == 0)
            {
                if (player.cutcut == true)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                    {
                        this.health -= player.weapon.damage;
                    }

                    if (this.health <= 0)
                    {
                        this.phase = "dead";
                        for (var i = 0; i < 6; i++)
                        {
                            var random = Math.floor(Math.random() * 4);
                            if (random == 0)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X, this.Y], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)]]}));
                            }
                            else if (random == 1)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)], [this.X, this.Y], [this.X - spacer(375), this.Y - spacer(375)], [this.X - spacer(375), this.Y - spacer(375)]]}));
                            }
                            else if (random == 2)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - spacer(300), this.Y - spacer(300)], [this.X, this.Y], [this.X - spacer(300), this.Y - spacer(300)], [this.X - spacer(300), this.Y - spacer(300)], [this.X - spacer(300), this.Y - spacer(300)], [this.X - spacer(300), this.Y - spacer(300)]]}));
                            }
                            else if (random == 3)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "BrainFlies", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - spacer(250), this.Y - spacer(250)], [this.X - spacer(250), this.Y - spacer(250)], [this.X - spacer(250), this.Y - spacer(250)], [this.X - spacer(250), this.Y - spacer(250)], [this.X, this.Y], [this.X - spacer(250), this.Y - spacer(250)]]}));
                            }
                        }
                    }
                }
            }
        }
        else if (this.type == "beeHive")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.health = 3;
            }

            //DRAWSELF
            if (this.phase == 0)
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(poly, 490, 341, 20, 27, -(1/2 * 20), -(1/2 * 27), 20, 27);
                XXX.restore();
            }
            else if (this.phase == "dead")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(poly, 489, 375, 20, 27, -(1/2 * 20), -(1/2 * 27), 20, 27);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }

            //HIVE
            this.minionCount();
            var nearPlants = this.nearbyPlants(5, "fungi");
            //console.log(nearPlants);
            if (this.minions < this.minionsMAX && this.phase != "dead")
            {
                if (new Date().getTime() - this.summonTime > this.summonRate * 1000)
                {
                    this.summonTime = new Date().getTime();
                    var random = Math.floor(Math.random() * 4);
                    if (nearPlants.length == 5)
                    {
                        if (random == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[nearPlants[3].X, nearPlants[3].Y], [nearPlants[0].X, nearPlants[0].Y], [nearPlants[4].X, nearPlants[4].Y], [nearPlants[2].X, nearPlants[2].Y], [nearPlants[1].X, nearPlants[1].Y], [this.X, this.Y]]}));
                        }
                        else if (random == 1)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[nearPlants[0].X, nearPlants[0].Y], [nearPlants[1].X, nearPlants[1].Y], [nearPlants[2].X, nearPlants[2].Y], [nearPlants[3].X, nearPlants[3].Y], [nearPlants[4].X, nearPlants[4].Y], [this.X, this.Y]]}));
                        }
                        else if (random == 2)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[nearPlants[1].X, nearPlants[1].Y], [nearPlants[2].X, nearPlants[2].Y], [nearPlants[0].X, nearPlants[0].Y], [nearPlants[4].X, nearPlants[4].Y], [nearPlants[3].X, nearPlants[3].Y], [this.X, this.Y]]}));
                        }
                        else if (random == 3)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[nearPlants[2].X, nearPlants[2].Y], [nearPlants[4].X, nearPlants[4].Y], [nearPlants[3].X, nearPlants[3].Y], [nearPlants[1].X, nearPlants[1].Y], [nearPlants[0].X, nearPlants[0].Y], [this.X, this.Y]]}));
                        }
                    }
                    else
                    {
                        if (random == 0)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + 210, this.Y + 15], [this.X + 560, this.Y + 200], [this.X - 90, this.Y + 185], [this.X, this.Y], [this.X + 132, this.Y - 78], [this.X - 300, this.Y - 146]]}));
                        }
                        else if (random == 1)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - 210, this.Y - 15], [this.X - 560, this.Y - 200], [this.X + 90, this.Y - 185], [this.X, this.Y], [this.X - 132, this.Y + 78], [this.X + 300, this.Y + 146]]}));
                        }
                        else if (random == 2)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - 130, this.Y - 115], [this.X - 205, this.Y + 340], [this.X + 39, this.Y + 70], [this.X - 60, this.Y - 10], [this.X - 200, this.Y - 100], [this.X + 200, this.Y + 200]]}));
                        }
                        else if (random == 3)
                        {
                            ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + 130, this.Y + 115], [this.X + 205, this.Y - 340], [this.X - 39, this.Y - 70], [this.X + 60, this.Y + 10], [this.X + 200, this.Y + 100], [this.X - 200, this.Y - 200]]}));
                        }
                    }
                }
            }
            //DAMAGE AND DEATH SENSING
            if (this.phase == 0)
            {
                if (player.cutcut == true)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                    {
                        this.health -= player.weapon.damage;
                    }

                    if (this.health <= 0)
                    {
                        this.phase = "dead";
                        for (var i = 0; i < 2; i++)
                        {
                            var random = Math.floor(Math.random() * 4);
                            if (random == 0)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + 210, this.Y + 15], [this.X + 560, this.Y + 200], [this.X - 90, this.Y + 185], [this.X, this.Y], [this.X + 132, this.Y - 78], [this.X - 300, this.Y - 146]]}));
                            }
                            else if (random == 1)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - 210, this.Y - 15], [this.X - 560, this.Y - 200], [this.X + 90, this.Y - 185], [this.X, this.Y], [this.X - 132, this.Y + 78], [this.X + 300, this.Y + 146]]}));
                            }
                            else if (random == 2)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X - 130, this.Y - 115], [this.X - 205, this.Y + 340], [this.X + 39, this.Y + 70], [this.X - 60, this.Y - 10], [this.X - 200, this.Y - 100], [this.X + 200, this.Y + 200]]}));
                            }
                            else if (random == 3)
                            {
                                ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Bees", false, this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + 130, this.Y + 115], [this.X + 205, this.Y - 340], [this.X - 39, this.Y - 70], [this.X + 60, this.Y + 10], [this.X + 200, this.Y + 100], [this.X - 200, this.Y - 200]]}));
                            }
                        }
                        worldItems.push([new Item("beesWax", this.X, this.Y), 3]);
                        worldItems.push([new Item("honey", this.X, this.Y), 1]);
                    }
                }
            }
        }
        else if (this.type == "anterHill")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.phase = "sturdy";
                this.health = 125;
                this.tiic = 0;
                this.minionsMAX = 21; //total amount of soldiers the hive can have.
                this.summonRate = 100; //how long in seconds it takes to summon a new minion.
                this.selTyp = Math.round(Math.random()); //selection type
            }
            console.log(player.cutcut);
            //DRAWSELF
            if (this.phase == "sturdy")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                if (this.selTyp == 1)
                {
                    XXX.drawImage(theCrack, 923, 507, 78, 74, -(1/2 * 78 * 1.5), -(1/2 * 74 * 1.5), 78 * 1.5, 74 * 1.5);
                }
                else
                {
                    XXX.drawImage(theCrack, 923, 600, 78, 74, -(1/2 * 78 * 1.5), -(1/2 * 74 * 1.5), 78 * 1.5, 74 * 1.5);
                }
                XXX.restore();
            }
            else if (this.phase == "break1")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 735, 608, 78, 74, -(1/2 * 78 * 1.5), -(1/2 * 74 * 1.5), 78 * 1.5, 74 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "break2")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 737, 689, 78, 74, -(1/2 * 78 * 1.5), -(1/2 * 74 * 1.5), 78 * 1.5, 74 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "break3")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 638, 689, 78, 74, -(1/2 * 78 * 1.5), -(1/2 * 74 * 1.5), 78 * 1.5, 74 * 1.5);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theCrack, 830, 603, 78, 74, -(1/2 * 78 * 1.5), -(1/2 * 74 * 1.5), 78 * 1.5, 74 * 1.5);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }

            //HIVE
            this.minionCount();
            if (this.minions < this.minionsMAX && this.phase == "sturdy")
            {
                if (new Date().getTime() - this.summonTime > this.summonRate * 1000)
                {
                    this.summonTime = new Date().getTime();
                    var random = Math.floor(Math.random() * 4);
                    var randAlpha = Math.floor(Math.random() * 6);
                    var alphaPicks = [false, false, false, true, true, "massive"];

                    if (random == 0)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Anter", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600], [this.X, this.Y], [this.X + (Math.random() * 1200) - 600, this.Y + (Math.random() * 1200) - 600]]}));
                    }
                    else if (random == 1)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Anter", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X + (Math.random() * 1800) - 900, this.Y + (Math.random() * 1800) - 900], [this.X, this.Y]]}));
                    }
                    else if (random == 2)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Anter", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X, this.Y], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X, this.Y], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200], [this.X + (Math.random() * 2400) - 1200, this.Y + (Math.random() * 2400) - 1200]]}));
                    }
                    else if (random == 3)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Anter", alphaPicks[randAlpha], this.hiveID, {patrolStops: 6, patrolLoop: true, route:[[this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y], [this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y], [this.X + (Math.random() * 800) - 400, this.Y + (Math.random() * 800) - 400], [this.X, this.Y]]}));
                    }
                }
            }

            //DAMAGE AND DEATH SENSING
            if (player.cutcut == true)
            {
                var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                if (distFromCutCut <= player.weapon.range * 7 + this.radius)
                {
                    this.health -= player.weapon.damage;
                }
            }
            console.log(this.health);
            if (this.health <= 0 && this.phase == "sturdy")
            {
                console.log("pass");
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "break1";
                    anterHillCollapse.play();
                }
            }
            if (this.phase == "break1")
            {
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "break2";
                }
            }
            if (this.phase == "break2")
            {
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "break3";
                }
            }
            if (this.phase == "break3")
            {
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "broken";
                }
            }
        }
        else if (this.type == "leafCutterAnterHill")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.phase = "sturdy";
                this.health = 47;
                this.tiic = 0;
                this.minionsMAX = 6; //total amount of soldiers the hive can have.
                this.summonRate = 1; //how long in seconds it takes to summon a new minion.
            }

            //DRAWSELF
            if (this.phase == "sturdy")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 1979, 243, 208, 203, -(1/2 * 208 * 1.3), -(1/2 * 203 * 1.3), 208 * 1.3, 203 * 1.3);
                XXX.restore();
            }
            else if (this.phase == "break1")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2023, 462, 208, 203, -(1/2 * 208 * 1.3), -(1/2 * 203 * 1.3), 208 * 1.3, 203 * 1.3);
                XXX.restore();
            }
            else if (this.phase == "break2")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2023, 690, 208, 203, -(1/2 * 208 * 1.3), -(1/2 * 203 * 1.3), 208 * 1.3, 203 * 1.3);
                XXX.restore();
            }
            else if (this.phase == "break3")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2023, 690, 208, 203, -(1/2 * 208 * 1.3), -(1/2 * 203 * 1.3), 208 * 1.3, 203 * 1.3);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 2213, 712, 179, 167, -(1/2 * 179 * 1.3), -(1/2 * 167 * 1.3), 179 * 1.3, 167 * 1.3);
                XXX.restore();

                for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                {
                    if (ArtificialIntelligenceAccess[i].type == "LeafCutterAnter" && ArtificialIntelligenceAccess[i].ID == this.hiveID)
                    {
                        ArtificialIntelligenceAccess[i].angry = true;
                        ArtificialIntelligenceAccess[i].disturbed = true;
                        ArtificialIntelligenceAccess[i].offended = true;
                    }
                }
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 100;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }

            //HIVE
            this.minionCount();
            if (this.minions < this.minionsMAX && this.phase == "sturdy")
            {
                if (new Date().getTime() - this.summonTime > this.summonRate * 1000)
                {
                    this.summonTime = new Date().getTime();
                    var randAlpha = Math.floor(Math.random() * 6);
                    var alphaPicks = [false, false, false, true, true, true];

                    ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "LeafCutterAnter", alphaPicks[randAlpha], this.hiveID));
                }
            }

            //damage sensing
            if (this.health > 0)
            {
                if (player.cutcut == true && this.playerer < 400)
                {
                    var distFromCutCut = Math.sqrt((this.X - player.bubbleOfDamageX)*(this.X - player.bubbleOfDamageX) + (this.Y - player.bubbleOfDamageY)*(this.Y - player.bubbleOfDamageY));
                    //console.log(distFromCutCut);
                    if (distFromCutCut <= player.weapon.distance)
                    {
                        if (player.weaponEquipped == "Spade")
                        {
                            this.health -= 15;
                        }
                        else
                        {
                            this.health -= player.weapon.damage;
                        }
                        for (var i = 0; i < ArtificialIntelligenceAccess.length; i++)
                        {
                            if (ArtificialIntelligenceAccess[i].type == "LeafCutterAnter" && ArtificialIntelligenceAccess[i].ID == this.hiveID)
                            {
                                ArtificialIntelligenceAccess[i].angry = true;
                                ArtificialIntelligenceAccess[i].disturbed = true;
                                ArtificialIntelligenceAccess[i].offended = true;
                            }
                        }
                    }
                }
            }

            //console.log(this.health);
            if (this.health <= 0 && this.phase == "sturdy")
            {
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "break1";
                }
            }
            if (this.phase == "break1")
            {
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "break2";
                }
            }
            if (this.phase == "break2")
            {
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "break3";
                }
            }
            if (this.phase == "break3")
            {
                this.tiic += 1;
                if (this.tiic >= 12)
                {
                    this.tiic = 0;
                    this.phase = "broken";
                }
            }
        }
        else if (this.type == "tunskMound")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 1;
            var distToPlayer = 1000;

            if (this.runOneTime)
            {
                this.runOneTime = false;

                this.phase = "sturdy";
                this.tiic = 0;
                this.selTyp = Math.round(Math.random()); //selection type
            }

            //DRAWSELF
            if (this.phase == "sturdy")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 145, 3, 18, 17, -(1/2 * 18 * 2.4), -(1/2 * 17 * 2.4), 18 * 2.4, 17 * 2.4);
                XXX.restore();

                distToPlayer = Math.sqrt((this.X - X) * (this.X - X) + (this.Y - Y) * (this.Y - Y));
            }
            else if (this.phase == "break1")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 164, 3, 18, 17, -(1/2 * 18 * 2.4), -(1/2 * 17 * 2.4), 18 * 2.4, 17 * 2.4);
                XXX.restore();
            }
            else if (this.phase == "break2")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 183, 2, 18, 17, -(1/2 * 18 * 2.4), -(1/2 * 17 * 2.4), 18 * 2.4, 17 * 2.4);
                XXX.restore();
            }
            else if (this.phase == "broken")
            {
                this.zIndex = 1;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 206, 3, 18, 17, -(1/2 * 18 * 2.4), -(1/2 * 17 * 2.4), 18 * 2.4, 17 * 2.4);
                XXX.restore();
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 10;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
            }

            //A tunsk scurries out of its burrow when a player is near for too long.
            if (distToPlayer <= 130 && this.phase == "sturdy")
            {
                this.tiic += 1;
                if (this.tiic >= 290)
                {
                    this.tiic = 0;
                    this.phase = "break1";
                    anterHillCollapse.play();
                }
            }
            if (this.phase == "break1")
            {
                this.tiic += 1;
                if (this.tiic >= 14)
                {
                    this.tiic = 0;
                    this.phase = "break2";
                }
            }
            if (this.phase == "break2")
            {
                this.tiic += 1;
                if (this.tiic >= 14)
                {
                    this.tiic = 0;
                    this.phase = "broken";

                    if (this.selTyp == 1)
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Tunsk", true, "Un-burrowed Tunsk"));
                    }
                    else
                    {
                        ArtificialIntelligenceAccess.push(new Unit(this.X, this.Y, "Tunsk", false, "Un-burrowed Tunsk"));
                    }
                }
            }
        }
        else if (this.type == "hearth")
        {
            //TRAITS
            if (this.lit)
            {
                this.solid = true;
            }
            else
            {
                this.solid = false;
            }
            this.interactionRange = 50;

            if (this.runOneTime)
            {
                if (this.temporary == "lit" || this.temporary == "flame")
                {
                    this.lit = true;
                    this.campFireTime = 0;
                }
                else if (this.temporary == "ash")
                {
                    this.burnt = true;
                    this.burntTime = 0;
                }
                else
                {
                    this.runOneTime = false;
                    this.burnt = "empty";
                }
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 200, extraStops: true, GRD: 0.65, Alpha: 0.85, showMe: false});
                this.fireCostume += 1;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 15000)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = true;
                }
            }

            if (this.burnt == true)
            {
                this.burntTime += 1;

                if (this.burntTime >= 1000)
                {
                    this.burntTime = 0;
                    this.burnt = "empty";
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.burnt == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 444, 319, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                    XXX.restore();
                }
                else if (this.burnt == "empty")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 440, 161, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 439, 193, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                    XXX.restore();
                }
            }
            else if (this.fireCostume <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 442, 226, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }
            else if (this.fireCostume > 8 && this.fireCostume <= 16)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 442, 258, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }
            else if (this.fireCostume > 16 && this.fireCostume <= 24)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 444, 288, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }
            else
            {
                this.fireCostume = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 444, 288, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.125;
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }
            else if (this.playerer <= 125 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.65 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == false)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.burnt == false && this.temporary != "lit")
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }

                if (this.burnt == "empty" && this.lit == false && this.temporary || this.burnt && this.lit == false && this.temporary)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Wood" && Inventory[i][1] > 1)
                        {
                            Inventory[i][1] -= 1;
                            this.burnt = false;
                            break;
                        }
                        else if (Inventory[i][0].identity == "Wood" && Inventory[i][1] == 1)
                        {
                            Inventory.splice(i, 1);
                            this.burnt = false;
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "vardanianHearth")
        {
            //TRAITS
            if (this.lit)
            {
                this.solid = true;
            }
            else
            {
                this.solid = false;
            }
            this.interactionRange = 50;

            if (this.runOneTime)
            {
                if (this.temporary == "lit" || this.temporary == "flame")
                {
                    this.lit = true;
                    this.campFireTime = 0;
                }
                else if (this.temporary == "ash")
                {
                    this.burnt = true;
                    this.burntTime = 0;
                }
                else
                {
                    this.runOneTime = false;
                    this.burnt = "empty";
                }
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 260, extraStops: true, GRD: 0.05, Alpha: 0.8, showMe: false});
                this.fireCostume += 1;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 16000)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = true;
                }
            }

            if (this.burnt == true)
            {
                this.burntTime += 1;

                if (this.burntTime >= 1000)
                {
                    this.burntTime = 0;
                    this.burnt = "empty";
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.burnt == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(toad, 242, 509, 44, 31, -(1/2 * 44 * 1.6), -(1/2 * 31 * 1.6), 44 * 1.6, 31 * 1.6);
                    XXX.restore();
                }
                else if (this.burnt == "empty")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(toad, 293, 509, 44, 31, -(1/2 * 44 * 1.6), -(1/2 * 31 * 1.6), 44 * 1.6, 31 * 1.6);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(toad, 242, 509, 44, 31, -(1/2 * 44 * 1.6), -(1/2 * 31 * 1.6), 44 * 1.6, 31 * 1.6);
                    XXX.restore();
                }
            }
            else if (this.fireCostume <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 193, 510, 44, 31, -(1/2 * 44 * 1.6), -(1/2 * 31 * 1.6), 44 * 1.6, 31 * 1.6);
                XXX.restore();
            }
            else if (this.fireCostume > 8 && this.fireCostume <= 16)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 140, 511, 44, 31, -(1/2 * 44 * 1.6), -(1/2 * 31 * 1.6), 44 * 1.6, 31 * 1.6);
                XXX.restore();
            }
            else if (this.fireCostume > 16 && this.fireCostume <= 24)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 90, 511, 44, 31, -(1/2 * 44 * 1.6), -(1/2 * 31 * 1.6), 44 * 1.6, 31 * 1.6);
                XXX.restore();
            }
            else
            {
                if (this.fireCostume > 32)
                {
                    this.fireCostume = 0;
                }
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(toad, 41, 512, 44, 31, -(1/2 * 44 * 1.6), -(1/2 * 31 * 1.6), 44 * 1.6, 31 * 1.6);
                XXX.restore();
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.125;
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }
            else if (this.playerer <= 140 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.55 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == false)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.burnt == false && this.temporary != "lit")
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }

                if (this.burnt == "empty" && this.lit == false && this.temporary || this.burnt && this.lit == false && this.temporary)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] > 1)
                        {
                            Inventory[i][1] -= 1;
                            this.burnt = false;
                            break;
                        }
                        else if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] == 1)
                        {
                            Inventory.splice(i, 1);
                            this.burnt = false;
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "cephrianPyre")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 1;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                if (this.information == false) //when added make this selvaCampFire
                {
                    if (this.temporary == "lit")
                    {
                        scenicList.push(new Scenery("acaciaCampFire", this.X, this.Y, this.rotation, "permaLit"));
                    }
                    else if (this.temporary == true)
                    {
                        scenicList.push(new Scenery("acaciaCampFire", this.X, this.Y, this.rotation, true));
                    }
                    else
                    {
                        scenicList.push(new Scenery("acaciaCampFire", this.X, this.Y, this.rotation, false));
                    }
                }
                else
                {
                    if (this.temporary == "lit")
                    {
                        scenicList.push(new Scenery("acaciaCampFire", this.X, this.Y, this.rotation, "permaLit"));
                    }
                    else if (this.temporary == true)
                    {
                        scenicList.push(new Scenery("acaciaCampFire", this.X, this.Y, this.rotation, true));
                    }
                    else
                    {
                        scenicList.push(new Scenery("acaciaCampFire", this.X, this.Y, this.rotation, false));
                    }
                }
            }

            XXX.save();
            XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
            XXX.rotate(this.rotation);
            XXX.drawImage(jeru, 707, 123, 77, 75, -(1/2 * 77 * 1.35), -(1/2 * 75 * 1.35), 77 * 1.35, 75 * 1.35);
            XXX.restore();

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 37;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;
                dClick = true;
            }
        }
        else if (this.type == "zetianOven")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 135;
            this.radius = 55;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.opened = false;
                this.campFireTime = 0;
                this.fuel = 0;
                if (this.temporary == "lit")
                {
                    this.lit = true;
                }
                else
                {
                    this.lit = false;
                }
            }

            //animate
            if (this.lit == true)
            {
                this.campFireTime += 1;
                //die out over time
                if (this.campFireTime >= 300 && this.temporary != "lit")
                {
                    this.fuel -= 1;
                    this.campFireTime = 0;
                }

                if (this.fuel <= 0 && this.temporary != "lit")
                {
                    this.lit = false;
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.opened == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 1099, 591, 71, 68, -(1/2 * 71 * 2), -(1/2 * 68 * 2), 71 * 2, 68 * 2);
                    XXX.restore();
                }
                else if (this.opened == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 1080, 669, 116, 71, -(1/2 * 116 * 2) + 5, -(1/2 * 71 * 2), 116 * 2, 71 * 2);
                    XXX.restore();
                }
            }
            else if (this.lit == true)
            {
                if (this.opened == false)
                {
                    lights.push({X:this.X, Y: this.Y, size: 90, extraStops: true, GRD: 0.8, Alpha: 0.1, showMe: false});
                    if (this.playerer <= 140)
                    {
                        player.warmth += Math.max(0, (3 - (player.heatResistance / 200)));
                    }
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 1016, 557, 71, 68, -(1/2 * 71 * 2), -(1/2 * 68 * 2), 71 * 2, 68 * 2);
                    XXX.restore();
                }
                else if (this.opened == true)
                {
                    lights.push({X:this.X, Y: this.Y, size: 425, extraStops: true, GRD: 0.5, Alpha: 0.8, showMe: false});
                    if (this.playerer <= 140)
                    {
                        player.warmth += Math.max(0, (3.5 - (player.heatResistance / 200)));
                    }
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 908, 555, 112, 70, -(1/2 * 112 * 2) + 5, -(1/2 * 70 * 2), 112 * 2, 70 * 2);
                    XXX.restore();
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.didSomethinOven = false;
                if (this.opened == true)
                {
                    this.gotFireStarter = false;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }
                    if (this.lit == false && this.fuel > 0 && this.gotFireStarter == true)
                    {
                        this.lit = true;
                        this.didSomethinOven = true;
                    }
                    else if (this.lit == false && this.temporary == true)
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 9;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 9;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 14;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 14;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Selva Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 60;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Selva Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 60;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Acacia Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 50;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Acacia Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 50;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Yeol Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 5;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Yeol Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 5;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Coal" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 15;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Coal" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 15;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Charcoal" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 10;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Charcoal" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 10;
                                this.didSomethinOven = true;
                                break;
                            }
                        }
                    }
                    else if (this.lit == true && this.temporary != "lit")
                    {
                        player.craftPosition = 0;
                        craftScroll = 0;
                        crafting = "foods";
                        lowBar = "crafting";
                        gameState = "paused";
                    }

                    if (this.didSomethinOven == false)
                    {
                        this.opened = false;
                    }
                }
                else
                {
                    this.opened = true;
                }
            }
        }
        else if (this.type == "aldrekiiOven")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 120;
            this.radius = 35;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.opened = false;
                this.campFireTime = 0;
                this.fuel = 0;
                if (this.temporary == "lit")
                {
                    this.lit = true;
                }
                else
                {
                    this.lit = false;
                }
            }

            //animate
            if (this.lit == true)
            {
                this.campFireTime += 1;
                //die out over time
                if (this.campFireTime >= 500 && this.temporary != "lit")
                {
                    this.fuel -= 1;
                    this.campFireTime = 0;
                }

                if (this.fuel <= 0 && this.temporary != "lit")
                {
                    this.lit = false;
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.opened == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 69, 166, 41, 38, -(1/2 * 41 * 2), -(1/2 * 38 * 2), 41 * 2, 38 * 2);
                    XXX.restore();
                }
                else if (this.opened == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 60, 209, 53, 38, -(1/2 * 53 * 2) - 9, -(1/2 * 38 * 2) + 1, 53 * 2, 38 * 2);
                    XXX.restore();
                }
            }
            else if (this.lit == true)
            {
                if (this.opened == false)
                {
                    if (this.playerer <= 140)
                    {
                        player.warmth += Math.max(0, (2 - (player.heatResistance / 200)));
                    }
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 10, 165, 53, 38, -(1/2 * 53 * 2), -(1/2 * 38 * 2), 53 * 2, 38 * 2);
                    XXX.restore();
                }
                else if (this.opened == true)
                {
                    lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.3, Alpha: 0.4, showMe: false});
                    if (this.playerer <= 140)
                    {
                        player.warmth += Math.max(0, (2.5 - (player.heatResistance / 200)));
                    }
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 6, 207, 53, 39, -(1/2 * 53 * 2) - 9, -(1/2 * 39 * 2), 53 * 2, 39 * 2);
                    XXX.restore();
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.didSomethinOven = false;
                if (this.opened == true)
                {
                    this.gotFireStarter = false;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }
                    if (this.lit == false && this.fuel > 0 && this.gotFireStarter == true)
                    {
                        this.lit = true;
                        this.didSomethinOven = true;
                    }
                    else if (this.lit == false && this.temporary == true)
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 9;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 9;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 14;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 14;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Selva Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 60;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Selva Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 60;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Acacia Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 50;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Acacia Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 50;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Yeol Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 5;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Yeol Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 5;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Coal" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 15;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Coal" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 15;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Charcoal" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 10;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Charcoal" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 10;
                                this.didSomethinOven = true;
                                break;
                            }
                        }
                    }
                    else if (this.lit == true && this.temporary != "lit")
                    {
                        player.craftPosition = 0;
                        craftScroll = 0;
                        crafting = "foods";
                        lowBar = "crafting";
                        gameState = "paused";
                    }

                    if (this.didSomethinOven == false)
                    {
                        this.opened = false;
                    }
                }
                else
                {
                    this.opened = true;
                }
            }
        }
        else if (this.type == "cephrianOven")
        {
            //TRAITS
            this.solid = true;
            this.interactionRange = 120;
            this.radius = 35;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                this.opened = false;
                this.campFireTime = 0;
                this.fuel = 0;
                if (this.temporary == "lit")
                {
                    this.lit = true;
                }
                else
                {
                    this.lit = false;
                }
            }

            //animate
            if (this.lit == true)
            {
                this.campFireTime += 1;
                //die out over time
                if (this.campFireTime >= 500 && this.temporary != "lit")
                {
                    this.fuel -= 1;
                    this.campFireTime = 0;
                }

                if (this.fuel <= 0 && this.temporary != "lit")
                {
                    this.lit = false;
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.opened == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 125, 166, 40, 41, -(1/2 * 40 * 2), -(1/2 * 41 * 2), 40 * 2, 41 * 2);
                    XXX.restore();
                }
                else if (this.opened == true)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 113, 210, 67, 38, -(1/2 * 67 * 2), -(1/2 * 38 * 2), 67 * 2, 38 * 2);
                    XXX.restore();
                }
            }
            else if (this.lit == true)
            {
                if (this.opened == false)
                {
                    if (this.playerer <= 140)
                    {
                        player.warmth += Math.max(0, (2 - (player.heatResistance / 200)));
                    }
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 159, 30, 41, 38, -(1/2 * 41 * 2), -(1/2 * 38 * 2), 41 * 2, 38 * 2);
                    XXX.restore();
                }
                else if (this.opened == true)
                {
                    lights.push({X:this.X, Y: this.Y, size: 250, extraStops: true, GRD: 0.3, Alpha: 0.4, showMe: false});
                    if (this.playerer <= 140)
                    {
                        player.warmth += Math.max(0, (2.5 - (player.heatResistance / 200)));
                    }
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(raed, 4, 130, 67, 38, -(1/2 * 67 * 2), -(1/2 * 38 * 2), 67 * 2, 38 * 2);
                    XXX.restore();
                }
            }

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                this.didSomethinOven = false;
                if (this.opened == true)
                {
                    this.gotFireStarter = false;
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }
                    if (this.lit == false && this.fuel > 0 && this.gotFireStarter == true)
                    {
                        this.lit = true;
                        this.didSomethinOven = true;
                    }
                    else if (this.lit == false && this.temporary == true)
                    {
                        for (var i = 0; i < Inventory.length; i++)
                        {
                            if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 9;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Ashai Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 9;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 14;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 14;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Selva Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 60;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Selva Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 60;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Acacia Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 50;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Acacia Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 50;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Yeol Wood" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 5;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Yeol Wood" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 5;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Coal" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 15;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Coal" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 15;
                                this.didSomethinOven = true;
                                break;
                            }
                            if (Inventory[i][0].identity == "Charcoal" && Inventory[i][1] > 1)
                            {
                                Inventory[i][1] -= 1;
                                this.fuel += 10;
                                this.didSomethinOven = true;
                                break;
                            }
                            else if (Inventory[i][0].identity == "Charcoal" && Inventory[i][1] == 1)
                            {
                                Inventory.splice(i, 1);
                                this.fuel += 10;
                                this.didSomethinOven = true;
                                break;
                            }
                        }
                    }
                    else if (this.lit == true && this.temporary != "lit")
                    {
                        player.craftPosition = 0;
                        craftScroll = 0;
                        crafting = "foods";
                        lowBar = "crafting";
                        gameState = "paused";
                    }

                    if (this.didSomethinOven == false)
                    {
                        this.opened = false;
                    }
                }
                else
                {
                    this.opened = true;
                }
            }
        }
        else if (this.type == "stove")
        {
            //TRAITS
            this.solid = true;

            this.interactionRange = 50;

            if (this.runOneTime)
            {
                this.runOneTime = false;
                if (this.temporary == "lit" || this.temporary == "flame")
                {
                    this.lit = true;
                    this.burnt = "fullest";
                }
                else
                {
                    this.lit = false;
                    this.burnt = "empty";
                }
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 220, extraStops: true, GRD: 0.1, Alpha: 0.9, showMe: false});
                this.fireCostume += 1;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 30000)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = "empty";
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(atal, 21, 3074, 53, 71, -(1/2 * 53 * 1.1), -(1/2 * 71 * 1.1), 53 * 1.1, 71 * 1.1);
                XXX.restore();
            }
            else
            {
                if (this.fireCostume <= 8)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 20.5, 3002, 53, 71, -(1/2 * 53 * 1.1), -(1/2 * 71 * 1.1), 53 * 1.1, 71 * 1.1);
                    XXX.restore();
                }
                else if (this.fireCostume > 8 && this.fireCostume <= 16)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 21, 2928.5, 53, 71, -(1/2 * 53 * 1.1), -(1/2 * 71 * 1.1), 53 * 1.1, 71 * 1.1);
                    XXX.restore();
                }
                else if (this.fireCostume > 16 && this.fireCostume <= 24)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 21.5, 2858.15, 53, 71, -(1/2 * 53 * 1.1), -(1/2 * 71 * 1.1), 53 * 1.1, 71 * 1.1);
                    XXX.restore();
                }
                else
                {
                    magicList.push(new Magic({ID:"smoke", CNX: 50}, false, {X:this.X + Math.cos(this.rotation + 1/2*Math.PI) * 30, Y:this.Y + Math.sin(this.rotation + 1/2*Math.PI) * 30, rotation: this.rotation}, false, true));
                    this.fireCostume = 0;
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(atal, 21, 3002, 53, 71, -(1/2 * 53 * 1.1), -(1/2 * 71 * 1.1), 53 * 1.1, 71 * 1.1);
                    XXX.restore();
                }
            }

            if (this.playerer <= 220 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.85 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 17;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == "full")
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.temporary != "lit")
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }

                if (this.burnt == "empty" && this.lit == false && this.temporary)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Coal" && Inventory[i][1] > 1)
                        {
                            Inventory[i][1] -= 1;
                            this.burnt = "full";
                            break;
                        }
                        else if (Inventory[i][0].identity == "Coal" && Inventory[i][1] == 1)
                        {
                            Inventory.splice(i, 1);
                            this.burnt = "full";
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "thenganHearth")
        {
            //TRAITS
            if (this.lit)
            {
                this.solid = true;
            }
            else
            {
                this.solid = false;
            }
            this.interactionRange = 50;

            if (this.runOneTime)
            {
                if (this.temporary == "lit" || this.temporary == "flame")
                {
                    this.lit = true;
                    this.campFireTime = 0;
                }
                else if (this.temporary == "ash")
                {
                    this.runOneTime = false;
                    this.burnt = true;
                }
                else
                {
                    this.runOneTime = false;
                    this.burnt = "empty";
                }
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 200, extraStops: true, GRD: 0.65, Alpha: 0.85, showMe: false});
                this.fireCostume += 1;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 15000)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = true;
                }
            }

            if (this.burnt == true)
            {
                this.burntTime += 1;

                if (this.burntTime >= 1000)
                {
                    this.burntTime = 0;
                    this.burnt = "empty"
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.burnt == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 512, 320, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                    XXX.restore();
                }
                else if ("empty")
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 512, 162, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(theng, 512, 194, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                    XXX.restore();
                }
            }
            else if (this.fireCostume <= 8)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 512, 226, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }
            else if (this.fireCostume > 8 && this.fireCostume <= 16)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 512, 258, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }
            else if (this.fireCostume > 16 && this.fireCostume <= 24)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 512, 290, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }
            else
            {
                this.fireCostume = 0;
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(theng, 512, 290, 47, 26, -(1/2 * 47 * 1.6), -(1/2 * 26 * 1.6), 47 * 1.6, 26 * 1.6);
                XXX.restore();
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.125;
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }
            else if (this.playerer <= 125 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.65 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 20;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == false)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.burnt == false && this.temporary != "lit")
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }

                if (this.burnt == "empty" && this.lit == false && this.temporary || this.burnt && this.lit == false && this.temporary)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Wood" && Inventory[i][1] > 1)
                        {
                            Inventory[i][1] -= 1;
                            this.burnt = false;
                            break;
                        }
                        else if (Inventory[i][0].identity == "Wood" && Inventory[i][1] == 1)
                        {
                            Inventory.splice(i, 1);
                            this.burnt = false;
                            break;
                        }
                    }
                }
            }
        }
        else if (this.type == "campFire")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 35;

            if (this.temporary == "permaLit")
            {
                this.campFireTime = 0;
                this.lit = true;
                this.burnt = false;
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 140, extraStops: true, GRD: 0.5, Alpha: 0.75, showMe: false});
                this.fireCostume += 3.5;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 10000)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = true;
                }
            }

            if (this.burnt == true)
            {
                this.burntTime += 1;

                if (this.burntTime >= 2000)
                {
                    this.burntTime = 0;
                    if (this.temporary == false)
                    {
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.burnt == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2917, 174, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                    XXX.drawImage(verse, 2917, 174, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2890, 173, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                    XXX.drawImage(verse, 2890, 173, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                    XXX.restore();
                }
            }
            else if (this.fireCostume <= 14)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                XXX.restore();
            }
            else if (this.fireCostume > 14 && this.fireCostume <= 28)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2939, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                XXX.drawImage(verse, 2939, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                XXX.restore();
            }
            else if (this.fireCostume > 28 && this.fireCostume <= 42)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2966, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                XXX.drawImage(verse, 2966, 220, 23, 23, -(1/2 * 34.5) + 1, -(1/2 * 34.5) + 0.6, 34.5, 34.5);
                XXX.restore();
            }
            else if (this.fireCostume > 42)
            {
                this.fireCostume = 0;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                XXX.drawImage(verse, 2865, 168, 23, 23, -(1/2 * 34.5) - 0.225, -(1/2 * 34.5) + 0.4, 34.5, 34.5);
                XXX.restore();
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.125;
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }
            else if (this.playerer <= 50 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.65 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == false || this.lit == false && this.temporary == true)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.burnt == false)
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
        }
        else if (this.type == "acaciaCampFire")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 45;

            if (this.temporary == "permaLit")
            {
                this.campFireTime = 0;
                this.lit = true;
                this.burnt = false;
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 610, extraStops: true, GRD: 0.25, Alpha: 0.65, showMe: false});
                this.fireCostume += 3.5;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 25000)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = true;
                }
            }

            if (this.burnt == true)
            {
                this.burntTime += 1;

                if (this.burntTime >= 2000)
                {
                    this.burntTime = 0;
                    if (this.temporary == false)
                    {
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.burnt == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 800, 721, 73, 73, -(1/2 * 73), -(1/2 * 73), 73, 73);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(jeru, 976, 808, 73, 73, -(1/2 * 73), -(1/2 * 73), 73, 73);
                    XXX.restore();
                }
            }
            else if (this.fireCostume <= 14)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 885, 725, 73, 73, -(1/2 * 73), -(1/2 * 73), 73, 73);
                XXX.restore();
            }
            else if (this.fireCostume > 14 && this.fireCostume <= 28)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 974, 724, 73, 73, -(1/2 * 73), -(1/2 * 73), 73, 73);
                XXX.restore();
            }
            else if (this.fireCostume > 28 && this.fireCostume <= 42)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 800, 806, 73, 73, -(1/2 * 73), -(1/2 * 73), 73, 73);
                XXX.restore();
            }
            else if (this.fireCostume > 42 && this.fireCostume <= 56)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 885, 807, 73, 73, -(1/2 * 73), -(1/2 * 73), 73, 73);
                XXX.restore();
            }
            else if (this.fireCostume > 56)
            {
                this.fireCostume = 0;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(jeru, 885, 807, 73, 73, -(1/2 * 73), -(1/2 * 73), 73, 73);
                XXX.restore();
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.15;
                    player.warmth += Math.max(0, (1.5 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.15 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1.5 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }
            else if (this.playerer <= 96 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.95 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 27;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == false || this.lit == false && this.temporary == true)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.burnt == false)
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
        }
        else if (this.type == "ashaiCampFire")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 35;

            if (this.temporary == "permaLit")
            {
                this.campFireTime = 0;
                this.lit = true;
                this.burnt = false;
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 220, extraStops: true, GRD: 0.15, Alpha: 0.4, showMe: false});
                this.fireCostume += 2;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 14000)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = true;
                }
            }

            if (this.burnt == true)
            {
                this.burntTime += 1;

                if (this.burntTime >= 2000)
                {
                    this.burntTime = 0;
                    if (this.temporary == false)
                    {
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            }

            //DRAWSELF
            var szx = 1;
            if (this.lit == false)
            {
                if (this.burnt == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gent, 17, 284, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(gent, 17, 285, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                    XXX.drawImage(gent, 18, 284, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                    XXX.drawImage(gent, 17, 286, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                    XXX.restore();
                }
            }
            else if (this.fireCostume <= 14)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 17, 284, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.drawImage(gent, 82, 284, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.restore();
            }
            else if (this.fireCostume > 14 && this.fireCostume <= 28)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 17, 284, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.drawImage(gent, 140, 285, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.restore();
            }
            else if (this.fireCostume > 28 && this.fireCostume <= 42)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 17, 284, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.drawImage(gent, 201, 286, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.restore();
            }
            else if (this.fireCostume > 42)
            {
                this.fireCostume = 0;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(gent, 17, 284, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.drawImage(gent, 258, 286, 49, 48, -(1/2 * 49* szx), -(1/2 * 48 * szx), 49* szx, 48* szx);
                XXX.restore();
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.125;
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }
            else if (this.playerer <= 65 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.26 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == false || this.lit == false && this.temporary == true)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.burnt == false)
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
        }
        else if (this.type == "yeolCampFire")
        {
            //TRAITS
            this.solid = false;
            this.interactionRange = 35;

            if (this.temporary == "permaLit")
            {
                this.campFireTime = 0;
                this.lit = true;
                this.burnt = false;
            }

            //animate
            if (this.lit == true)
            {
                lights.push({X:this.X, Y: this.Y, size: 110, extraStops: true, GRD: 0.5, Alpha: 0.7, showMe: false});
                this.fireCostume += 1;
                this.campFireTime += 1;

                //die out over time
                if (this.campFireTime >= 7500)
                {
                    this.campFireTime = 0;
                    this.lit = false;
                    this.burnt = true;
                }
            }

            if (this.burnt == true)
            {
                this.burntTime += 1;

                if (this.burntTime >= 2000)
                {
                    this.burntTime = 0;
                    if (this.temporary == false)
                    {
                        for (var i = 0; i < scenicList.length; i++)
                        {
                            if (scenicList[i] === this)
                            {
                                scenicList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            }

            //DRAWSELF
            if (this.lit == false)
            {
                if (this.burnt == false)
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(mufmuf, 332, 43, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                    XXX.drawImage(mufmuf, 332, 43, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                    XXX.restore();
                }
                else
                {
                    XXX.save();
                    XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                    XXX.rotate(this.rotation);
                    XXX.drawImage(verse, 2890, 173, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                    XXX.drawImage(verse, 2890, 173, 23, 23, -(1/2 * 34.5), -(1/2 * 34.5), 34.5, 34.5);
                    XXX.restore();
                }
            }
            else if (this.fireCostume <= 14)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 308, 42, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.drawImage(mufmuf, 308, 42, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.restore();
            }
            else if (this.fireCostume > 14 && this.fireCostume <= 28)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 308, 60, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.drawImage(mufmuf, 308, 60, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.restore();
            }
            else if (this.fireCostume > 28 && this.fireCostume <= 42)
            {
                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 308, 79, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.drawImage(mufmuf, 308, 79, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.restore();
            }
            else if (this.fireCostume > 42)
            {
                this.fireCostume = 0;

                XXX.save();
                XXX.translate(X - this.X + 1/2 * CCC.width, Y - this.Y + 1/2 * CCC.height);
                XXX.rotate(this.rotation);
                XXX.drawImage(mufmuf, 308, 60, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.drawImage(mufmuf, 308, 60, 19, 16, -(1/2 * 19 * 2.5), -(1/2 * 16 * 2.5), 19 * 2.5, 16 * 2.5);
                XXX.restore();
            }

            if (this.playerer <= this.radius && this.lit == true) //fire burns the player but heat resistance can reduce the damage it does.
            {
                if (player.mageShield > 0)
                {
                    player.mageShield -= 0.125;
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                }
                else
                {
                    player.health += player.mageShield;
                    player.mageShield = 0;

                    player.health -= Math.max(0, (0.125 - (player.heatResistance / 200)));
                    player.warmth += Math.max(0, (1 - (player.heatResistance / 200)));
                    player.burningTime = new Date().getTime();
                }
            }
            else if (this.playerer <= 50 && this.lit == true)
            {
                player.warmth += Math.max(0, (0.55 - (player.heatResistance / 200)));
            }

            //SIZE //a radius that the player cannot walk through and that when clicked will trigger the scenery object.
            this.radius = 19;

            //INTERACTION
            if (this.activate == true)
            {
                this.activate = false;

                if (this.lit == false && this.burnt == false || this.lit == false && this.temporary == true)
                {
                    for (var i = 0; i < Inventory.length; i++)
                    {
                        if (Inventory[i][0].identity == "Fire-Starter")
                        {
                            this.gotFireStarter = true;
                        }
                    }

                    if (this.gotFireStarter)
                    {
                        this.burntTime = 0;
                        this.lit = true;
                    }
                }
                else if (this.lit == true && this.burnt == false)
                {
                    player.craftPosition = 0;
                    craftScroll = 0;
                    crafting = "foods";
                    lowBar = "crafting";
                    gameState = "paused";
                }
            }
        }
    };

    this.operations = function()
    {
        this.countAdder();
        this.mouseSensing();
        this.typeBuilder();
    }
}